Query: How do I iterate each characters of a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40215015)
 Iterate string: 

  for ($i = 0; $i < strlen($str); $i++){
    echo $str[$i];
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8780076)
 If your strings are in Unicode you should use  preg_split  with  /u  modifier  

 From comments in php documentation: 

  function mb_str_split( $string ) { 
    # Split at all position not after the start: ^ 
    # and not before the end: $ 
    return preg_split('/(?<!^)(?!$)/u', $string ); 
} 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19076883)
 This happens because the  chunk_split  evaluates the  substr(str_shuffle($chars), 0, 5)  only once. You need to iterate the letters and generate the sequence for each one: 



  function random($string) {

    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    $shuffle_start = substr(str_shuffle($chars), 0, 6);
    $shuffle_end = substr(str_shuffle($chars), 0, 6);
    $letters = str_split($string);
    $str = '';
    $count = count($letters);
    foreach($letters as $l){
        $count--;
        $str .= $l;
        if($count){ // add 5 characters if not last letter
            $str .= substr(str_shuffle($chars), 0, 5);
        }
    }

    return $shuffle_start . $str . $shuffle_end;
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35493062)
 You can also just access $s1 like an array, if you only need to access it: 

  $s1 = "hello world";
echo $s1[0]; // -> h
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4601066)
  Step 1:  convert the string to an array using the  str_split  function 

  $array = str_split($your_string);  

  Step 2:  loop through the newly created array 

  foreach ($array as $char) {
 echo $char;
}
  

 You can check the PHP docs for more information: http://us.php.net/str_split 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30254373)
 Expanded from @SeaBrightSystems answer, you could try this: 

  $s1 = "textasstringwoohoo";
$arr = str_split($s1); //$arr now has character array
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7371835)
 Adding string iteration support to  foreach  was http://marc.info/?l=php-internals&m=130858381502918&w=2. There were mainly two reasons for this decision: 

 
 It makes applications harder to debug. Usually you don't want to iterate over the characters of a string. . So if you do iterate over a string you probably just made a programming mistake - and PHP will tell you so. If string iteration were introduces this kind of error would be hard to catch. 
  Should PHP iterate over each single byte? Should it iterate over characters (which can be multiple bytes)? If so, what should it do if it encounters a malformed multibyte sequence? And where does it get the charset from? 
 

 To solve both problems there was a proposal to introduce a  TextIterator , which you pass a string and a charset. That way you can't accidentally iterate a string and the byte vs character problem doesn't exist. I'm not sure though what the state of the  TextIterator  is currently. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8798355)
 I think you should be able to use http://php.net/manual/en/function.grapheme-extract.php to iterate over the combined characters (which are technically called "grapheme clusters"). 

 Alternatively, if you prefer the regex approach, I think you can use this: 

  preg_match_all('/\pL\pM*|./u', $str, $results)
  

 where  \pL  means a Unicode "letter", and  \pM  means a Unicode "mark". 

 (Disclaimer: I have not tested either of these approaches.) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8407645)
 It's actually pretty hard to solve that sort of problem using regular expressions. You can do it if you have lookahead expressions. Here's an example, where  (?...)  is a lookahead expression. 

  /^(?.*a)(?.*s)(?.*k).{3}$/
  

 Here each of the  (?.*a)  expressions match that letter, anywhere in the expression, and the .{3} specifies that it must be three characters. 

 This becomes complicated when you have duplicate characters, but it's still possible. For  aask : 

  /^(?.*a.*a)(?.*s)(?.*k).{4}$/
  

 Where the first one matches only if there are two  a s anywhere in the string. 

 You can do this a few other ways. For example, you can iterate over each character and count the number of each letter, storing it in an array (which is O(n)), or you can sort the characters alphabetically ( aks ) and match the strings character by character (which is O(whatever your sorting algorithm is)). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/26487649)
 
 Iterate over string, character at a time 
 Get character its ASCII value 
 Increase by 5 
 Add to new string 
 

 Something like this should work: 

  <?php
$newString = '';

foreach (str_split('test') as $character) {
    $newString .= chr(ord($character) + 5);
}

echo $newString;
  

 Note that there is more than one way to iterate over a string.  



