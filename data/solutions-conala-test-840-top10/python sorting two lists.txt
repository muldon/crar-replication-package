Query: python sorting two lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9543233)
 http://en.wikipedia.org/wiki/Schwartzian_transform 

  list_1_sorted, list_2_sorted = zip(*sorted(zip(list_1, list_2),
  key=operator.itemgetter(0), reverse=True))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9543232)
 You can use  zip : 

  >>> list_1 = ['string1', 'string2', 'string3']
>>> list_2 = [5, 2, 8]
>>> s = sorted(zip(list_2, list_1), reverse=True)
>>> list_1_sorted = [e[1] for e in s]
>>> list_2_sorted = [e[0] for e in s]
>>> list_1_sorted
['string3', 'string1', 'string2']
>>> list_2_sorted
[8, 5, 2]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19843368)
 If you need to merge two ordered lists with complicated sorting rules, you might have to roll it yourself like in the following code (using a simple sorting rule for readability :-) ). 

  list1 = [1,2,5]
list2 = [2,3,4]
newlist = []

while list1 and list2:
    if list1[0] == list2[0]:
        newlist.append(list1.pop(0))
        list2.pop(0)
    elif list1[0] < list2[0]:
        newlist.append(list1.pop(0))
    else:
        newlist.append(list2.pop(0))

if list1:
    newlist.extend(list1)
if list2:
    newlist.extend(list2)

assert(newlist == [1, 2, 3, 4, 5])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16868476)
  >>> d = {"one": [(1,3),(1,4)], "two": [(1,2),(1,2),(1,3)], "three": [(1,1)]}
>>> for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
  

 Here is a universal solution that works on Python 2 & Python 3: 

  >>> print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))
two one three
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9543293)
 @Ignacio's answer is the best, but just in case you need to  sort the lists in-place  without making new lists, you can try this: 

  import itertools
list_enumerate = itertools.count()

list_2.sort(reverse=True, key=lambda k: list_1[next(list_enumerate)])
list_1.sort(reverse=True)
print list_1
print list_2
  

 Note that  I do not think there is any guarantee that the  key  function is called for each list item in order  (which is necessary for this to work), so this is a risky method to use. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9543229)
 Zip the lists together, sort, unzip the lists: 

  together = zip(list_1, list_2)
sorted_together =  sorted(together)

list_1_sorted = [x[0] for x in sorted_together]
list_2_sorted = [x[1] for x in sorted_together]
  

 What's happening here is that zip creates a list of tuples, with the elements you want the list to be sorted by being the first elements: 

  >>> a = [1,3,7,3,2]
>>> b = ["one","two",'three','four','five']
>>> zip(a,b)
[(1, 'one'), (3, 'two'), (7, 'three'), (3, 'four'), (2, 'five')]
  

  

  >>> sorted(zip(a,b))
[(1, 'one'), (2, 'five'), (3, 'four'), (3, 'two'), (7, 'three')]
  

 Then all that's left is to unpack these lists. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53054464)
 Zip them together, sort, then unpack: 

  zipd = sorted(zip(l1,l2,l3), key=lambda t:-t[0])
l2_sorted = [t[1] for t in zipd] #['cc', 'bb', 'aa', 'dd']
l3_sorted = [t[2] for t in zipd] #['c_c', 'b_b', 'a_a', 'd_d']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13668413)
 Use a  key  parameter for your sort that only compares the first element of the pair. Since Python's sort is stable, this guarantees that the order of the second elements will remain the same when the first elements are equal. 

  >>> from operator import itemgetter
>>> [list(x) for x in zip(*sorted(zip(list1, list2), key=itemgetter(0)))]
[[1, 2, 3, 4, 4, 5, 6], [3, 2, 7, 2, 1, 1, 8]]
  

 Which is equivalent to: 

  >>> [list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]
[[1, 2, 3, 4, 4, 5, 6], [3, 2, 7, 2, 1, 1, 8]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25894274)
 You want  x[0]  rather than  x[1] : 

  daten, werte = (list(t) for t in zip(*sorted(zip(daten, werte), key=lambda x : datetime.datetime.strptime(x[0], "%d. %b %Y"))))
  



