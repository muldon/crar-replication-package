Query: Python: Check if a string contains chinese character?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34587468)
 The matched string should be unicode as well 

  >>> import re
>>> ipath= u"./data/NCDC/上海/虹桥/9705626661750dat.txt"
>>> re.findall(ur'[\u4e00-\u9fff]+', ipath)
[u'\u4e0a\u6d77', u'\u8679\u6865']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19443500)
 Check for the range of unicode characters to find out if a character in string belongs to chinese characters or not. A google search tells me all chinese characters fall between  '\u4e00'  and  u'\u9fff' . . 

  def check_contain_chinese(check_str):
    for ch in check_str.decode('utf-8'):
        if u'\u4e00' <= ch <= u'\u9fff':
            return True
    return False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34587517)
  impt re
ipath= raw_input()
print re.findall(ur'[\u4e00-\u9fff]+', ipath.decode("utf-8"))
  

 Output: ./data/NCDC/上海/虹桥/9705626661750dat.txt
[u'\u4e0a\u6d77', u'\u8679\u6865']  

 You need to decode the input to make it unicode. 

  

   impt re
 ipath= unicode(raw_input(),encoding="utf-8")
 print re.findall(ur'[\u4e00-\u9fff]+', ipath)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34587571)
  ''  is a bytestring on Python 2. Either add  from __future__ import unicode_literals  at the top of the module or use unicode literals:  u'' : 

  >>> import re
>>> ipath= u"./data/NCDC/上海/虹桥/9705626661750dat.txt"
>>> re.findall(ur'[\u4e00-\u9fff]+', ipath)
[u'\u4e0a\u6d77', u'\u8679\u6865']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34587623)
 If you just want to know whether there is a chinese character in your string you don't need  re.findall , use  re.search  and the fact that match objects are truthy. 

  >>> import re
>>> ipath= u'./data/NCDC/上海/虹桥/9705626661750dat.txt'
>>> ipath2 = u'./data/NCDC/ciampino/6240476818161dat.txt'
>>> for x in (ipath, ipath2):
...     if re.search(u'[\u4e00-\u9fff]', x):
...         print 'found chinese character in ' + x
... 
found chinese character in ./data/NCDC/上海/虹桥/9705626661750dat.txt
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19443511)
 There is http://www.khngai.com/chinese/charmap/tbluni.php?page=0 for Chinese characters. Just check if code of any character in your string fits the 0x4E00 - 0x9FFF interval: 

  >>> any(0x4E00 <= ord(x) <= 0x9FFF for x in u'xx中国')
1: True
>>> any(0x4E00 <= ord(x) <= 0x9FFF for x in u'xxx')
2: False
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34587637)
 And for those of us who don't care for  re : 

  >>> ipath= u"./data/NCDC/上海/虹桥/6240476818161dat.txt"
>>> for i in range(len(ipath)):
...  if ipath[i] > u'\u4e00' and ipath[i] < u'\u9fff':
...   print ipath[i]
... 
上
海
虹
桥
  

 Edit: for the full list of Chinese characters this SO link is worth looking at as the range U+4E00..U+9FFF is not complete.
https://stackoverflow.com/questions/1366068/whats-the-complete-range-for-chinese-characters-in-unicode 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20353935)
 There is lib for encoding detection: https://pypi.python.org/pypi/chardet ( Character encoding auto-detection in Python. . Open source ) 

 Detects... 

 
 ASCII, UTF-8, UTF-16 (2 variants), UTF-32 (4 variants) 
 Big5, GB2312, EUC-TW, HZ-GB-2312, ISO-2022-CN (Traditional and Simplified Chinese) 
 EUC-JP, SHIFT_JIS, ISO-2022-JP (Japanese) 
 EUC-KR, ISO-2022-KR (Korean) 
 KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (Cyrillic) 
 ISO-8859-2, windows-1250 (Hungarian) 
 ISO-8859-5, windows-1251 (Bulgarian) 
 windows-1252 (English) 
 ISO-8859-7, windows-1253 (Greek) 
 ISO-8859-8, windows-1255 (Visual and Logical Hebrew) 
 TIS-620 (Thai) 
 

 example from docs: 

  >>> import urllib
>>> rawdata = urllib.urlopen('http://yahoo.co.jp/').read()
>>> import chardet
>>> chardet.detect(rawdata)
{'encoding': 'EUC-JP', 'confidence': 0.99}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21764603)
 You need to decode the data read from the file to utf-8 first: 

  >>> with open('abc1') as f:
        text = f.read().decode('utf-8')
...     
>>> print text                              
地藏菩萨本愿经卷上 忉利天宫神通品第一
>>> for x in text:
    print x,
...     
地 藏 菩 萨 本 愿 经 卷 上   忉 利 天 宫 神 通 品 第 一
  

 Or use  io.open  to open the file with required encoding: 

  >>> import io
>>> with io.open('abc1', encoding='utf-8') as f:
    text = f.read()
>>> for x in text:                              
    print x,
...     
地 藏 菩 萨 本 愿 经 卷 上   忉 利 天 宫 神 通 品 第 一
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/19444080)
 All existing answers here confused the  CJK  (which represents Chinese, Japanese, and Korean) characters with  Han  characters(which only represents Chinese) characters. 

 It's easy tell whether a character is CJK but harder to tell whether a character is Chinese and the standard is changing, new characters are being added always. 

 But in practice, people usually use  u'\u4e00' - u'\u9fa5'  to check whether a character. CJK characters out of that range usually can not be displayed by common Chinese fonts. 

 Sometimes http://www.unicode.org/charts/PDF/U2E80.pdf, http://www.unicode.org/charts/PDF/U3100.pdf, http://www.unicode.org/charts/PDF/U31C0.pdf should also be treated as characters, and they are not even in the CJK Unified Ideographs('\u4e00'- u'\u9fff'), but they are common and important in the Chinese writing system. 

 Reference: 

 http://en.wikipedia.org/wiki/CJK 

 http://en.wikipedia.org/wiki/CJK_Unified_Ideographs 

 http://www.unicode.org/charts/unihan.html 

 http://cpansearch.perl.org/src/GUS/Unicode-UTF8simple-1.06/gb2312.txt 

 http://examples.oreilly.com/cjkvinfo/unicode/gb12345-90.txt 



