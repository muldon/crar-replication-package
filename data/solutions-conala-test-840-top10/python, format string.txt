Query: python, format string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12590431)
  "Text {}, on date: {}".format(x.name, x.time)
  

 If you are using Python 2.6 or above, then  format()  is the best bet to format your string. It helps you from getting mangled with  %  format specifier, with which you have to do much more task to format your string in correct format.. Else you can get  TypeError  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4928580)
 with python 2.6: 

  >>> '{0} %s {1}'.format('foo', 'bar')
'foo %s bar'
  

 or with python 2.7: 

  >>> '{} %s {}'.format('foo', 'bar')
'foo %s bar'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28059096)
 You can https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists: 

  >>> line = 'first {0}, second {1}'
>>> l = [1, 2]
>>> print(line.format(*l))
first 1, second 2
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36139171)
 Using  str.format  

  >>> length = 20
>>> string = "some string"
>>> print('{1:>{0}}'.format(length, string))
         some string
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10589905)
 In the latest versions of Python you can omit number in string-format placeholders: 

  >>> '{}{}{}.{}{}{}.{}{}{}-{}{}'.format(*c)
'324.867.842-98'
  

 It works in Python 2.7. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50742166)
 To have a regular brace, use it twice in a format string. 

  >>> "{{foo{}}}".format("bar")
'{foobar}'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36964031)
  {{  is converted into  { by  format , so use this: 

  '{{{}}}'.format(x)
  

 (note the  three  braces) 

 However, in this case, I would use the older C-style format string: 

  '{%s}' % x
  

 It is a lot clearer. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18620969)
 The https://github.com/r1chardj0n3s/parse "is the opposite of format()". 

 Example usage: 

  >>> import parse
>>> format_string = 'PN-{:0>9}'
>>> id = 123
>>> pn = format_string.format(id)
>>> pn
'PN-000000123'
>>> parsed = parse.parse(format_string, pn)
>>> parsed
<Result ('123',) {}>
>>> parsed[0]
'123'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9675576)
 Using the string format method, you could do it as follows: 

  a[i][j] = input("college {0:d} {1:s}".format(j+1,d[i]))
  

 Using the  %  format is deprecated, I believe. The  string.format()  method is more flexible anyways. 

 See: http://docs.python.org/library/string.html#format-string-syntax 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43748091)
 You don't need to override something, you can just escape the curly brackets by doubling them, as stated in https://docs.python.org/3.4/library/string.html#format-string-syntax for the format string syntax: 

 
   If you need to include a brace character in the literal text, it can be escaped by doubling:  {{  and  }} . 
 

  >>> '{{"k":"{value}"}}'.format(value=my_value)
'{"k":"v"}'
  

 This equally applies for formatted string literals if you plan on using them at some point: 

  >>> f'{{"k": "{my_value}"}}'
'{"k": "v"}'
  



