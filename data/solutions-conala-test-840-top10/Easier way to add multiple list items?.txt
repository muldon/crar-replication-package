Query: Easier way to add multiple list items?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15465255)
 As short as it gets, not very efficient though 

  sum(sum(lists, []))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15465235)
 You can do it in a single line,  listAdder()  is the same as calling  sum() : 

  sum(sum(x) for x in lists)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15465452)
 You can also avoid the list of lists and just sum directly: 

  sum(n+o+p)  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15148123)
 I would switch from lists to dictionaries. To make addition easier, I'd use  defaultdict : 

  from collections import defaultdict

poly = defaultdict(int)
  

 And then add those tuples into the dictionary: 

  for exponent, variable in poly_list:
    poly[exponent] += variable
  

  

  >>> from collections import defaultdict
>>> 
>>> poly = defaultdict(int)
>>> 
>>> for poly_list in [[(1, 1)], [(1, 1)]]:
...     for exponent, variable in poly_list:
...         poly[exponent] += variable
... 
>>> poly
    defaultdict(<type 'int'>, {1: 2})
>>> poly.items()
    [(1, 2)]
  

 Although personally, I would just make a  Polynomial  class: 

  class Polynomial(object):
    def __init__(self, terms=None):
        if isinstance(terms, dict):
            self.terms = terms
        else:
            self.terms = dict(terms) or {}

    def copy(self):
        return Polynomial(self.terms.copy())

    def __add__(self, other):
        result = self.copy()

        for e, c in self.terms.items():
            result[e] = self.get(e, 0) + c

        return result

    def __mul__(self, other):
        result = self.copy()

        for e1, c1 in self.terms.items():
            for e2, c2 in other.terms.items():
                result[e1 + e2] = self.get(e1, 0) * other.get(e2, 0)

        return result
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15465234)
  

  from itertools import chain

n = [3,5,7]
o = [4,10,8]
p = [4,10,5]

print sum(chain(n, o, p))
# 56
  

 This avoids creating an un-necessary list of items, since you pass them to  chain  directly... 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4289695)
 Here's one way: 

  y = ['a', 'b', 'c', 'd']
x = [1,2,3]

return reduce(lambda a,b:a+b, [[x,a] for a in y])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49980908)
 If you have multiple dataframes and that causes the issue, consider using  dict  instead of variables and it will make it much easier to achieve your goal. 

 Example: 

  my_frames = {}

my_frames['DF_NAME'] = pd.read_csv('CSV_LOCATION', encoding = "ISO-8859-1")

for k, v in my_frames.items():
    my_frames[k] = v.assign(Name = k)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34173674)
 Another way to think about this is that the first item in each pair is the  key , and the second is the  value  -- so if you create a  dict  you can then add the values together as you come across each key -- and it's even easier if you use a  defaultdict : 

  from collections import defaultdict

summary = defaultdict(int)
for sublist in lst:
    key, value = sublist
    summary[key] += value

print(summary.items())
  

 The line  summary[key] += value  is the workhorse here.  What it does: 

 
 looks up the  key  in summary 
 if it doesn't exist add it and use  int  to create the default value 
 return the value (either already there or freshly created) 
 add the new value to it 
 store it back to  summary  under  key  
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4289781)
  x = [1,2,3]
y = ['a', 'b', 'c', 'd']
z = []

[z.extend([x, a]) for a in y]
  

 (The correct value will be in z) 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/15856949)
 You can use this as an easier way to generate your matrix: 

  >>> LoL=[['#']*4 for i in range(5)]
>>> LoL
[['#', '#', '#', '#'], ['#', '#', '#', '#'], ['#', '#', '#', '#'], ['#', '#', '#', '#'], ['#', '#', '#', '#']]
  

 And use .insert to add an element to a list in a given location: 

  >>> LoL.insert(1,'A')
>>> LoL
[['#', '#', '#', '#'], 'A', ['#', '#', '#', '#'], ['#', '#', '#', '#'], ['#', '#', '#', '#'], ['#', '#', '#', '#']]
  

 The issue is, perhaps, mixing types. You can solve this by using one more level of list: 

  >>> LoL=[[['#']*4] for i in range(5)]
>>> LoL
[[['#', '#', '#', '#']], [['#', '#', '#', '#']], [['#', '#', '#', '#']], [['#', '#', '#', '#']], [['#', '#', '#', '#']]]
  

 Then you can use append instead of insert: 

  >>> LoL[0].append('A')
>>> LoL
[[['#', '#', '#', '#'], 'A'], [['#', '#', '#', '#']], [['#', '#', '#', '#']], [['#', '#', '#', '#']], [['#', '#', '#', '#']]]
  

 Then it is easier to print, since the list is homogeneous: 

  >>> print '\n'.join(str(i)[1:-1] for i in LoL)
['#', '#', '#', '#'], 'A'
['#', '#', '#', '#']
['#', '#', '#', '#']
['#', '#', '#', '#']
['#', '#', '#', '#']
  

 You can also use a dictionary for each row: 

  >>> d={i:l for i,l in enumerate(LoL)}   #assuming that is just a LoL
>>> d
{0: [['#', '#', '#', '#']], 1: [['#', '#', '#', '#']], 2: [['#', '#', '#', '#']], 3: [['#', '#', '#', '#']], 4: [['#', '#', '#', '#']]}
>>> d[0].append('A')
>>> d
{0: [['#', '#', '#', '#'], 'A'], 1: [['#', '#', '#', '#']], 2: [['#', '#', '#', '#']], 3: [['#', '#', '#', '#']], 4: [['#', '#', '#', '#']]}
>>> d[0]
[['#', '#', '#', '#'], 'A']
  

 Then print that by sorting the keys of the dict: 

  >>> print '\n'.join(str(d[k])[1:-1] for k,v in sorted(d.items()) )
['#', '#', '#', '#'], 'A'
['#', '#', '#', '#']
['#', '#', '#', '#']
['#', '#', '#', '#']
['#', '#', '#', '#']
  

 

  Edit  

 You can print this way: 

  >>> for row in LoL:
...    for items in row:
...        print items,
...    print
... 
['#', '#', '#', '#'] A
['#', '#', '#', '#']
['#', '#', '#', '#']
['#', '#', '#', '#']
['#', '#', '#', '#']
  



