Query: sum a list of numbers in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34769929)
 Using a simple  list-comprehension  and the  sum : 

  >> sum(i for i in range(x))/2. #if x = 10 the result will be 22.5
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45056202)
 You can try this way: 

  a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sm = sum(a[0:len(a)]) # Sum of 'a' from 0 index to 9 index. sum(a) == sum(a[0:len(a)]
print(sm) # Python 3
print sm  # Python 2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4364975)
 Using the  pairwise  http://docs.python.org/library/itertools.html#recipes: 

  import itertools
def pairwise(iterable):
    "s -> (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = itertools.tee(iterable)
    next(b, None)
    return itertools.izip(a, b)

def pair_averages(seq):
    return ( (a+b)/2 for a, b in pairwise(seq) )
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41084785)
 I use a  while  loop to get the result: 

  i = 0
while i < len(a)-1:
   result = (a[i]+a[i+1])/2
   print result
   i +=1
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38328719)
  Question 2: 
To sum a list of integers: 

  a = [2, 3, 5, 8]
sum(a)
# 18
# or you can do:
sum(i for i in a)
# 18
  

 If the list contains integers as strings: 

  a = ['5', '6']
# import Decimal: from decimal import Decimal
sum(Decimal(i) for i in a)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4362599)
 Sum list of numbers: 

  sum(list_of_nums)
  

 Calculating half of n and n - 1 (if I have the pattern correct), using a http://docs.python.org/release/2.7/tutorial/datastructures.html#list-comprehensions: 

  [(x + (x - 1)) / 2 for x in list_of_nums]
  

 Sum adjacent elements, e.g. ((1 + 2) / 2) + ((2 + 3) / 2) + ... using http://docs.python.org/release/2.7/tutorial/datastructures.html#functional-programming-tools and http://docs.python.org/release/2.7/tutorial/controlflow.html#lambda-forms 

  reduce(lambda x, y: (x + y) / 2, list_of_nums)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28063826)
 I'd just use a lambda with map() 

  a = [1,2,3,4,5,6,7,8,9,10]
b = map(lambda x, y: (x+y)/2.0, fib[:-1], fib[1:])
print b
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44991258)
 Loop through elements in the list and update the total like this: 

  def sum(a):
    total = 0
    index = 0
    while index < len(a):
        total = total + a[index]
        index = index + 1
    return total
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35359188)
 The simplest way to solve this problem: 

  l =[1,2,3,4,5]
sum=0
for element in l:
    sum+=element
print sum
  



