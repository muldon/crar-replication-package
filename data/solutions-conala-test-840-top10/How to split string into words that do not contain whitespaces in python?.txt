Query: How to split string into words that do not contain whitespaces in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9207026)
  >>> v="This is a  string"

>>> v.split()
['This', 'is', 'a', 'string']
  

 just use http://docs.python.org/library/stdtypes.html#str.split. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9206989)
 It won't add whitespace as elements if you just use  .split() , instead of  .split(' ')  

  >>> "This     is a     string".split()
['This', 'is', 'a', 'string']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9206991)
 Like http://docs.python.org/library/stdtypes.html#str.split say, don't pass an argument. 

  >>> "This is a string".split()
['This', 'is', 'a', 'string']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34383714)
 Using https://docs.python.org/2/library/subprocess.html#subprocess.check_output simplifies getting the command output, so you could do: 

  out = subprocess.check_output(cmd)

lines = out.splitlines()
  

 Note that each line will contain the trailing new line character. 

 Or if you want the data after the colons: 

  lines = [l.split(':', 1)[1].strip() for l in out.splitlines() 
         if ':' in l]
  

  l.split(':', 1)[1]  is taking the whatever is after the colon.
 .strip()  removes the surrounding whitespaces.
 if ':' in l  is a protection against lines that don't contain a colon. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50039573)
  

  for item in text_string:
  

   

  for item in text_string.split():
  

 

 https://docs.python.org/2/library/stdtypes.html#str.split  .split()  splits the string to words using whitespace characters (including tabs and newlines) as delimiters. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15783564)
  

  [x.strip() for x in "test1 * test2".split('*', 1)]
  

  .strip()  gets rid off whitespaces and  .split('*', 1)  splits the string by asterisk once. 

 As you want only one word: 

  words = [x.strip() for x in "test1 * test2".split('*', 1)]
first = words[0].rsplit(' ', 1)[1]
last = words[1].split(' ', 1)[0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12783239)
 Why not just use the regular http://docs.python.org/library/stdtypes.html#str.split? 

  '.text      0x1000       0xb51b       0xb600       6.259216    '.split()
  

 To quote the documentation: 

 
   if sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. 
 

 

 As an aside, I've found that using  mystring.split(None)  (as opposed to  mystring.split() ) is sometimes quite a useful thing to keep in mind as it allows you to not "hardcode" the splitting algorithm. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40665408)
 It seems to me you overcomplicate the task. You may split the string with whitespaces and get the whole digit chunks and then reverse the list. 

  in_list = "testing abc 13 12ab cbds 1234 1.23 ab12"
in_list2 =  " ".join(list(reversed([s for s in in_list.split() if s.isdigit()])))
print(in_list2)
  

 Else, you may use a  (?<!\S)\d+(?!\S)  pattern to grab the digits that are enclosed with whitespace (with  re.findall ) and then reverse the list: 

  import re
in_list = "testing abc 13 12ab cbds 1234 1.23 ab12"
int_sort = " ".join(list(reversed(re.findall(r"(?<!\S)\d+(?!\S)", in_list))))
print(int_sort)
  

 See the http://ideone.com/bpwZ5k 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38956991)
 Assuming no spaces around  , : 

  with open('file.txt') as f:
    for line in f:
        print(line.split(',')[1])
  

 If there could be whitespaces, use  re.split() : 

  with open('file.txt') as f:
    for line in f:
        print(re.split(r'\s?,\s?', line)[1])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/31845501)
   

  for word in string:
  

 You are not iterating through the words in the string, you are iterating through the characters in the string. To iterate through the words, you would first need to split the string into words , using  str.split()  , and then iterate through that . Example - 

  my_string = "this is a string"
for word in my_string.split():
    print (word)
  

 Please note,  str.split()  , without passing any arguments splits by all whitespaces (space, multiple spaces, tab, newlines, etc). 



