Query: Python: Cut off the last word of a sentence?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6266841)
 You should definitely split and then remove the last word because a regex will have both more complications and unnecessary overhead. You can use the more Pythonic code (assuming content is a string): 

  ' '.join(content.split(' ')[:-1])
  

 This splits content into words, takes all but the last word, and rejoins the words with spaces. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47304388)
 Get last index of space and splice the string 

  >>> text = 'Python: Cut of the last word of a sentence?'
>>> text[:text.rfind(' ')]
'Python: Cut of the last word of a'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6266760)
  .join(words)  will put the list back together. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13806674)
  import collections

sentence = "No, I shouldn't be glad, YOU should be glad."

d = collections.defaultdict(list)
words = sentence.split()
for k, v in zip(words[:-1], words[1:]):
   d[k].append(v)
print(d)
  

 This produces 

  defaultdict(<type 'list'>, {'No,': ['I'], 'be': ['glad,', 'glad.'], 'glad,': ['YOU'], 'I': ["shouldn't"], 'should': ['be'], "shouldn't": ['be'], 'YOU': ['should']})
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6266815)
 If you want to keep your current method,  use  ' '.join(words)  to concatenate the list. 

 You also might want to replace  words = words[len[words -1]  with  words = words[:-1]  to make use of list slicing. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20542644)
 Maybe load the word/scores file once into memory as a dict of dicts, and then loop through each word in each sentence, checking the dict keys from your word file for each word in the sentence. 

 Would something like this work: 

  word_lookup = load_words(file)
for s in sentences:
    run_sentence(s)

def load_words(file):
    word_lookup = {}
    for line in file:
        (term,score,numPos,numNeg) = re.split("\t", line.strip())
        if not words.has_key(term):
            words[term] = {'score': score, 'numPos': numPos, 'numNeg': numNeg}
    return word_lookup

def run_sentence(s):
    s = standardize_sentence(s) # Assuming you want to strip punctuation, symbols, convert to lowercase, etc
    words = s.split(' ')
    first = words[0]
    last = words[-1]
    for word in words:
        word_info = check_word(word)
        if word_info:
            # Matched word, use your scores somehow (word_info['score'], etc)

def check_word(word):
    if word_lookup.has_key(word):
        return word_lookup[word]
    else:
        return None
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13806739)
 Using https://docs.python.org/2/library/stdtypes.html#dict.setdefault: 

  In [9]: strs = "No, I shouldn't be glad, YOU should be glad."


In [19]: dic = {}

In [20]: for x, y in zip(words, words[1:]):
      dic.setdefault(x, []).append(y)     
   ....:     

In [21]: dic
Out[21]: 
{'I': ["shouldn't"],
 'No,': ['I'],
 'YOU': ['should'],
 'be': ['glad,', 'glad.'],
 'glad,': ['YOU'],
 'should': ['be'],
 "shouldn't": ['be']}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3412646)
 If there can be other punctuation marks than the usual '.' 

  re.split('\W(?=[A-Z])',ss)
  

 This returns the list of the sentences. Of course, it does not treat correctly the cases mentioned by Paul. 



