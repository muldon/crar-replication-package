Query: How can I multiply all items in a list together with Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48244226)
 The simple way is: 

  import numpy as np
np.exp(np.log(your_array).sum())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33733338)
 I would like this in following way: 

      def product_list(p):
          total =1 #critical step works for all list
          for i in p:
             total=total*i # this will ensure that each elements are multiplied by itself
          return total
   print product_list([2,3,4,2]) #should print 48
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32426539)
 I would use the  numpy.prod  to perform the task. . 

  import numpy as np
mylist = [1, 2, 3, 4, 5, 6] 
result = np.prod(np.array(mylist))  
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13840436)
 You can use: 

  import operator
import functools
functools.reduce(operator.mul, [1,2,3,4,5,6], 1)
  

 See http://docs.python.org/2/library/functions.html#reduce and http://docs.python.org/2/library/operator.html#operator.mul documentations for an explanation. 

 You need the  import functools  line in Python 3+. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21250981)
 You are all complicating things unnecessarily... Since you have a single operation, multiplication, which is commutative, you can swap the order in which you perform them at will, i.e. you don't need to multiply items of  matrix1  with items of  matrix2 , and once you have computed all of them, multiply them together. Instead, you can first multiply all the relevant items of  matrix1  together, then all the relevant items of  matrix2  together, and then multiply the two resulting values. So you can write your function as the very simple: 

  def fast_geometric_matrix_multiplication(matrix1, matrix2):
    return np.prod(matrix1, axis=1)[:, None] * np.prod(matrix2, axis=0)
  

 It has the additional advantage that, if you are multiplying matrices of shapes  (m, k)  and  (k, n) , you would expect to be having to do  m*n*2*k  multiplications, while this method only requires  m*k + n*k + m*n , which is bound to be much smaller than what you presently are doing for almost any array shapes. 

 And of course: 

  In [24]: a = np.random.rand(100, 200)
    ...: b = np.random.rand(200, 50)
    ...: 

In [25]: np.allclose(geometric_matrix_multiplication(a, b),
    ...:             fast_geometric_matrix_multiplication(a, b))
Out[25]: True

In [26]: %timeit geometric_matrix_multiplication(a, b)
1 loops, best of 3: 1.39 s per loop

In [27]: %timeit fast_geometric_matrix_multiplication(a, b)
10000 loops, best of 3: 74.2 us per loop

In [28]: %timeit np.prod(a[:, None, :]*b[..., None].T, axis=2)
100 loops, best of 3: 5.97 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13840441)
 Python 3: use  functools.reduce : 

  >>> from functools import reduce
>>> reduce(lambda x, y: x*y, [1,2,3,4,5,6])
720
  

 Python 2: use  reduce : 

  >>> reduce(lambda x, y: x*y, [1,2,3,4,5,6])
720
  

 For compatible with 2 and 3 use  pip install six , then: 

  >>> from six.moves import reduce
>>> reduce(lambda x, y: x*y, [1,2,3,4,5,6])
720
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54731052)
  

  change = {'penny': [.01,57], 'nickel':[.05,34],'dime':[.1,42], 'quarter':  [.25,19],'half dallar':[.5,3],'one dollar bill':[1,24],'five dollar bill':[5,7],'ten dollar bill':[10,5],'twenty dollar bill':[20,3]}

def totalAmount(c):
   total = 0
   for k, v in c.items():
       sub = v[0] * v[1]
       total = total + sub
   return total


t = totalAmount(change)
print(t)
  

 output will be 

  181.72
  

 and the problem with your code is  v1= c.get(k,v[0]) .
you should change it to  v1= c.get(k)[0]  if you want to use  get , but when you use  .items()  you don't need to use  get .  v  will be that desired array in each iteration. 



