Query: Change directory to the directory of a Python script
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1432949)
 This will change your current working directory to so that opening relative paths will work: 

  import os
os.chdir("/home/udi/foo")
  

 However, you asked how to change into whatever directory your Python script is located, even if you don't know what directory that will be when you're writing your script.  To do this, you can use the  os.path  functions: 

  import os

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)
  

 This takes the filename of your script, converts it to an absolute path, then extracts the directory of that path, then changes into that directory. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31511182)
 You can change directory using os. The python script will remain in the folder it was created but will run processes based on the new directory.  

  import os

os.chdir()
os.chdir('filepath')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9130405)
 You can get a shorter version by using  sys.path[0] . 

  os.chdir(sys.path[0])
  

 From http://docs.python.org/library/sys.html#sys.path 

 
   As initialized upon program startup, the first item of this list,
   path[0] , is the directory containing the script that was used to
  invoke the Python interpreter 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45385011)
 You could use absolute paths to files, or  

 https://docs.python.org/3/library/os.html#os.chdir 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31025417)
 The working directory of the cron is different from the directory you run the script directly. 

 
  Make your bash script to use absolute path for python script files.  
  Or make the bash script to change directory to where you run the script directly.  
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33669495)
 on windows OS, if you call something like   python somefile.py   this   os.chdir(os.path.dirname(__file__))   will throw a WindowsError. But this should work for all cases:  

  import os
absFilePath = os.path.abspath(__file__)
os.chdir( os.path.dirname(absFilePath) )
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45385231)
 Sorry, you can't do that with a program that's launched in the normal way. .  

 When you run a script or program in the normal way it gets run in a new process, and of course any changes made in that new process don't affect the parent process: child processes inherit environment from their parent, the parent's environment can't by affected by any changes the child makes to its environment.  

 There's kind of a way around this: you can put a  cd  command into a script and then  source  that script, which executes the script in the current process rather than running it in a new process. I guess your Python code could create a tiny shell script that changes to the desired directory, but you will still need the user to  source  that script to make the actual directory change. When I need to do this for my own use, I just print the desired  cd  command to the shell so I can easily copy & paste it and then hit <kbd>Enter</kbd>. :) 

 Take a look https://unix.stackexchange.com/questions/38808/why-is-cd-not-a-program for more details about why  cd  is like this. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23595382)
  os.chdir(os.path.dirname(os.path.abspath(__file__)))  should do it.  

  os.chdir(os.path.dirname(__file__))  would not work if the script is run from the directory in which it is present. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9959391)
 Of course this can't work, because subprocess.call is spawning whole new process for your script. This executes the script in a completely separate environment. 



