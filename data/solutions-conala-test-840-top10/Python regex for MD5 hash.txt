Query: Python regex for MD5 hash
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/373206)
 How about "([a-fA-F\d]{32})" which requires it to be 32 characters long? 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2767033)
 Here's a function to decrypt an MD5 hash. . 

  import hashlib
import sys

def decryptMD5(testHash):
        s = []
        while True:
                m = hashlib.md5()
                for c in s:
                        m.update(chr(c))
                hash = m.hexdigest()
                if hash == testHash:
                        return ''.join([chr(c) for c in s])
                wrapped = True
                for i in range(0, len(s)):
                        s[i] = (s[i] + 1) % 256
                        if s[i] != 0:
                                wrapped = False
                                break
                if wrapped:
                        s.append(0)

print decryptMD5(sys.argv[1])
  

  

  $ python md5.py 47bce5c74f589f4867dbd57e9ca9f808
aaa
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42690530)
 To match md5 hash as a whole string use  start/end of the string  anchors  ^ ,  $ : 

  s = "3b4e1a15682994ef0bb2cbea8abfa105"
result = re.search(r'^[0-9a-fA-F]{32}$', s)

print result.group()   # 3b4e1a15682994ef0bb2cbea8abfa105
  

 

 To match md5 hash as a substring(part of the text) use word boundaries  \b : 

  s = "hash 3b4e1a15682994ef0bb2cbea8abfa105 some text"
result = re.search(r'\b[0-9a-fA-F]{32}\b', s)

print result.group()    # 3b4e1a15682994ef0bb2cbea8abfa105
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28191368)
 hashlib with  md5  might be of your interest. 

  import hashlib
hashlib.md5("Nobody inspects the spammish repetition").hexdigest()
  

 output:  

  bb649c83dd1ea5c9d9dec9a18df0ffe9
  

 Constructors for hash algorithms that are always present in this module are  md5(), sha1(), sha224(), sha256(), sha384(), and sha512() . 

 If you want more condensed result, then you may try  sha  series 

 output for  sha224 : 

  'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'
  

 For more details : https://docs.python.org/2/library/hashlib.html 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/373207)
 Well, since md5 is just a string of 32 hex digits, about all you could add to your expression is a check for "32 digits", perhaps something like this? 

  re.findall(r"([a-fA-F\d]{32})", data)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29769730)
 You can use the  hmac  module in python to key-hash a message. More info https://docs.python.org/2/library/hmac.html. 

 Here's a sample program: 

  import hmac
import md5

hash_key = 'secret hashing key'
hash = hmac.new(hash_key, 'this is the text to be hashed', md5)
value = hash.digest()
print hash.hexdigest()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8631696)
 You can use http://docs.python.org/library/stdtypes.html#file.seek to move the file pointer to the end of the file, and http://docs.python.org/library/hashlib.html for MD5: 

  import hashlib
with open('really-large-file', 'rb') as f:
    f.seek(- 4096 * 1024, 2)
    print (hashlib.md5(f.read()).hexdigest())
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9960932)
 Assuming that you're only being asked to  use  the hash functions, and not to implement the hash yourself, https://docs.python.org/3.4/library/hashlib.html has routines for md5 and sha1: 

 [Updated for Python 3, in which  hashlib  wants bytes, not strings:] 

  >>> import hashlib
>>> s = 'something to hash'
>>> sb = s.encode("utf8")
>>> hashlib.md5(sb)
<md5 HASH object @ 0x7f36f5ce3440>
>>> hashlib.md5(sb).hexdigest()
'6f4815fdf1f1fd3f36ac295bf39d26b4'
>>> hashlib.sha1(sb).hexdigest()
'72668bc961b0a78bfa1633f6141bcea69ca37468'
  

 [Legacy Python 2 version:] 

  >>> import hashlib
>>> s = 'something to hash'
>>> hashlib.md5(s)
<md5 HASH object @ 0xb7714ca0>
>>> hashlib.md5(s).hexdigest()
'6f4815fdf1f1fd3f36ac295bf39d26b4'
>>> hashlib.sha1(s).hexdigest()
'72668bc961b0a78bfa1633f6141bcea69ca37468'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/27387410)
 The most important thing to realize was that the openssl md5 hash is calculated the same way as the hashlib.md5(...hexdigest( method 

  import base64
import hashlib    
hex_hash = hashlib.md5(open("putty_upx.exe".read(.hexdigest(
>> '4bd2f7940a1ec86efe1d1178b4cb23b7'
hex_hash.decode("hex"
>> 'K\xd2\xf7\x94\n\x1e\xc8n\xfe\x1d\x11x\xb4\xcb#\xb7'    
b64_md5_hash = base64.b64encode(hex_hash.decode("hex"
>> 'S9L3lAoeyG7+HRF4tMsjtw=='
len(b64_md5_hash
>> 24 
  



