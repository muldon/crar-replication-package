Query: sorting list of nested dictionaries in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52142908)
 . This will sort your dict by keys.  This is work only on Python 2.7 

  newlist = sorted(list_to_be_sorted, key=lambda k: k.keys()) 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40784832)
 This should do : 

  from operator import itemgetter
PAE=[['a',0,8],
    ['b',2,1],
    ['c',4,3],
    ['d',7,2],
    ['e',8,4]]

split_index = 1

print PAE[:split_index]+sorted(PAE[split_index:],key=itemgetter(2))
#=> [['a', 0, 8], ['b', 2, 1], ['d', 7, 2], ['c', 4, 3], ['e', 8, 4]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48348678)
 It seems you wish to reverse the list of OrderedDicts as well as reverse any  nested lists.  We can do this by recreating the list in reverse. 

  Code  

  def reversed_nested_list(lst):
    """Return a reversed list of shallow nested OrderedDicts."""
    main_lst = []
    for od in lst[::-1]:
        replaced = ct.OrderedDict()
        for k, v in od.items():
            if not isinstance(v, list):
                replaced[k] = v
            else:
                replaced[k] = v[::-1]
        main_lst.append(replaced)
    return main_lst


reversed_nested_list(my_list)
  

 Output 

  [OrderedDict([('id', 2),
              ('events',
               [OrderedDict([('id', 6),
                             ('timestamp',
                              '2018-01-19T15:47:56.588413Z')])])]),
 OrderedDict([('id', 1),
              ('events',
               [OrderedDict([('id', 5),
                             ('timestamp', '2018-01-19T15:47:56.587761Z')]),
                OrderedDict([('id', 4),
                             ('timestamp',
                              '2018-01-19T15:47:56.587126Z')])])])]
  

 Since your events were already inserted in temporal order, we can simply iterate the main list and reassign any nested lists in reverse. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34751093)
 Provided you don't mind dealing with the sorted output being a  sequence  (dictionaries don't have any ordering), you can sort the contained key, values or key-value pairs just fine. 

 For example, to just get the nested dictionaries, sorted by name, is as simple as: 

  sorted(dict1.values(), key=lambda d: d['Name'])
  

 This produces a sorted list with the 2 nested dictionaries as elements. The  key  function just needs adjusting based on what sorted output you require; for keys, you need to look up the associated value: 

  sorted(dict1, key=lambda k: dict1[k]['Name'])
  

 Iteration over a dictionary produces keys, so all you need to pass to  sorted()  here is the dictionary itself. 

 Use  dict.items()  to produce a sequence of  (key, value)  pairs, and adjust the key again to extract the value-to-sort-on from that: 

  sorted(dict1.items(), key=lambda kv: kv[1]['Name'])
  

  

  >>> dict1 = dict(emp1={"Name": "McKay", "Job": "Developer"}, emp2={"Name": "Mandy", "Job": "Nurse"})
>>> for emp, info in sorted(dict1.items(), key=lambda kv: kv[1]['Name']):
...     print('{0}: {1[Name]} - {1[Job]}'.format(emp, info))
...
emp2: Mandy - Nurse
emp1: McKay - Developer
>>> for emp, info in sorted(dict1.items(), key=lambda kv: kv[1]['Job']):
...     print('{0}: {1[Name]} - {1[Job]}'.format(emp, info))
...
emp1: McKay - Developer
emp2: Mandy - Nurse
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53790827)
 From what I understand from your question, you can try sorting your T values like this: 

  T_values = {
    "T8": (0.3978349, 0),
    "T9": (0.84942997, 0),
    "T6": (1.1480641, 0),
    "T7": (2.1811862, 0),
    "T4": (2.016099, 0),
    "T5": (1.5923926, 0),
    "T2": (0.20877934, 0),
    "T3": (-0.095536113, 0),
    "T1": (0.89533514, 0),
    "T10": (0.11839861, 0),
}

result = {int(k[1:]): v for k, v in sorted(T_values.items(), key=lambda x: int(x[0][1:]))}

print(result)
# {1: (0.89533514, 0), 2: (0.20877934, 0), 3: (-0.095536113, 0), 4: (2.016099, 0), 5: (1.5923926, 0), 6: (1.1480641, 0), 7: (2.1811862, 0), 8: (0.3978349, 0), 9: (0.84942997, 0), 10: (0.11839861, 0)}
  

 Additionally, if you are using  Python3.6+ , dictionaries maintain insertion order, so you don't  need  to use  OrderedDict .  

 Otherwise, you can use  OrderedDict()  like this: 

  from collections import OrderedDict

OrderedDict((int(k[1:]), v) for k, v in sorted(T_values.items(), key=lambda x: int(x[0][1:])))
# OrderedDict([(1, (0.89533514, 0)), (2, (0.20877934, 0)), (3, (-0.095536113, 0)), (4, (2.016099, 0)), (5, (1.5923926, 0)), (6, (1.1480641, 0)), (7, (2.1811862, 0)), (8, (0.3978349, 0)), (9, (0.84942997, 0)), (10, (0.11839861, 0))])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/710301)
  ak.sort(cmp=lambda x, y: cmp(x[0].lower(), y[0].lower()))
  

 Did you forget the parens in  x[0].lower() ? 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40785268)
 Sort the slice  and write it back : 

  >>> PAE[1:4] = sorted(PAE[1:4], key=itemgetter(2))
>>> PAE
[['a', 0, 8], ['b', 2, 1], ['d', 7, 2], ['c', 4, 3], ['e', 8, 4]]
  



