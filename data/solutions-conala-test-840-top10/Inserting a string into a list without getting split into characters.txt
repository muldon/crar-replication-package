Query: Inserting a string into a list without getting split into characters
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8243232)
 To add to the end of the list: 

  list.append('foo')
  

 To insert at the beginning: 

  list.insert(0, 'foo')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8243245)
 You have to add another list: 

  list[:0]=['foo']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8243246)
>Sticking to the method you are using to insert it, use 

re> list[:0] = ['foo']
  

 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8243230)
 Don't use list as a variable name. It's a built in that you are masking. 

 To insert, use the insert function of lists. 

  l = ['hello','world']
l.insert(0, 'foo')
print l
['foo', 'hello', 'world']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43981786)
 best put brackets around foo, and use += 

  list+=['foo']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8243270)
 Another option is using the overloaded  + operator : 

  >>> l = ['hello','world']
>>> l = ['foo'] + l
>>> l
['foo', 'hello', 'world']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43962081)
 Instead of trying to split by non-word ( \W+ ) characters, you can use https://docs.python.org/3/library/re.html#re.findall with  \w+ : 

  >>> line = 'Hello world!'
>>> re.findall(r'\w+', line.lower(), flags=re.UNICODE)
['hello', 'world']
# `.strip()` was remove because `\w+` does not match whitespaces.
  

 SIDE NOTE: You'd better to use https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals to avoid backslashes to be used as escape sequences. 

 

 Alternative: Pass the string without trailing non-word chracters to the  re.split : 

  >>> re.split(r'\W+', re.sub(r'\W+$', '', line.lower().strip()), flags=re.UNICODE)
['hello', 'world']
  

 NOTE: You may also strip leading non-word characters. To handle both sides, use  ^\W+|\W+$  pattern. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26406336)
  words  is a string and can be considered as a list of characters.
 list(words)  changes the string into a list of it's characters. 

 If what you want is a list with only one element (the string), make a list with that element: 

  >>> words = "This is a Test."
>>> names = [words]
>>> print names
['This is a Test.']
  

 If what you want is a list of every words in the string, split the string: 

  >>> words = "This is a Test."
>>> names = words.split()
>>> print names
['This', 'is', 'a', 'Test.']
  

  .split()  splits the string at every space to make a list of strings. 

 EDIT: I just understood you wanted the string printed between brackets and without the quotes, Kasra's format string is good then. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37932173)
 You should limit the number of splits to one, using  maxsplit  in  re.split() : 

  import re

s1 = 'name1 = x1 and noise:noise=noise'
s2 = 'name2: x2 and noise:noise=noise'
print(re.split(':|=', s1, maxsplit=1)[-1].strip())
print(re.split(':|=', s2, maxsplit=1)[-1].strip())
  

 Output: 

  x1 and noise:noise=noise
x2 and noise:noise=noise
  



