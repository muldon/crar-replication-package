Query: Getting the nth element using BeautifulSoup
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32258932)
 This can be easily done with  select  in beautiful soup if you know the row numbers to be selected. (Note : This is in bs4) 

  row = 5
while true
    element = soup.select('tr:nth-of-type('+ row +')')
    if len(element) > 0:
        # element is your desired row element, do what you want with it 
        row += 5
    else:
        break
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8724972)
 Another option, if you prefer raw html... 

  """Build a small table with one column and ten rows, then parse it into a list"""
htstring = """<table> <tr> <td>foo1</td> </tr> <tr> <td>foo2</td> </tr> <tr> <td>foo3</td> </tr> <tr> <td>foo4</td> </tr> <tr> <td>foo5</td> </tr>  <tr> <td>foo6</td> </tr>  <tr> <td>foo7</td> </tr>  <tr> <td>foo8</td> </tr>  <tr> <td>foo9</td> </tr>  <tr> <td>foo10</td> </tr></table>"""
result = [html_tr for idx, html_tr in enumerate(soup.findAll('tr')) \
     if (idx+1)%5==0]
print result
  

 ...  

  [mpenning@Bucksnort ~]$ python testme.py
[<tr> <td>foo5</td> </tr>, <tr> <td>foo10</td> </tr>]
[mpenning@Bucksnort ~]$
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8724616)
 As a general solution, you can convert the table to a nested list and iterate... 

  import BeautifulSoup

def listify(table):
  """Convert an html table to a nested list""" 
  result = []
  rows = table.findAll('tr')
  for row in rows:
    result.append([])
    cols = row.findAll('td')
    for col in cols:
      strings = [_string.encode('utf8') for _string in col.findAll(text=True)]
      text = ''.join(strings)
      result[-1].append(text)
  return result

if __name__=="__main__":
    """Build a small table with one column and ten rows, then parse into a list"""
    htstring = """<table> <tr> <td>foo1</td> </tr> <tr> <td>foo2</td> </tr> <tr> <td>foo3</td> </tr> <tr> <td>foo4</td> </tr> <tr> <td>foo5</td> </tr>  <tr> <td>foo6</td> </tr>  <tr> <td>foo7</td> </tr>  <tr> <td>foo8</td> </tr>  <tr> <td>foo9</td> </tr>  <tr> <td>foo10</td> </tr></table>"""
    soup = BeautifulSoup.BeautifulSoup(htstring)
    for idx, ii in enumerate(listify(soup)):
        if ((idx+1)%5>0):
            continue
        print ii
  

 ... 

  [mpenning@Bucksnort ~]$ python testme.py
['foo5']
['foo10']
[mpenning@Bucksnort ~]$
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8724481)
 You could also use  findAll  to get all the rows in a list and after that just use the slice syntax to access the elements that you need: 

  rows = soup.findAll('tr')[4::5]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53124298)
 You can navigate from td with following xpath 

  driver.find_element_by_xpath("//td[text()='xxxxx']/preceding-sibling::td[1]/input[@type='checkbox']").click()
  

 or  you can try with parent tag and navigate nth td which has input tag like 

  driver.find_element_by_xpath("//td[text()='xxxxx']/parent::tr/td[1]/input[@type='checkbox']").click()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38234066)
 You can use  nth-of-type : 

  h = """<div>
     this is some text 
     ...and this is some other text 
</div>"""


soup = BeautifulSoup(h)

print(soup.select_one("div p:nth-of-type(2)").text)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25212319)
  nth-of-type  http://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors would help here: 

  from bs4 import BeautifulSoup


data = """
<table>
    <tr>
        <td>1</td>
        <td>2</td>
        <td>3</td>
    </tr>

    <tr>
        <td>4</td>
        <td>5</td>
        <td>6</td>
    </tr>

    <tr>
        <td>7</td>
        <td>8</td>
        <td>9</td>
    </tr>
</table>
"""


soup = BeautifulSoup(data)
for td in soup.select('table > tr > td:nth-of-type(2)'):
    print td.text
  

  

  2
5
8
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51449540)
  findElement()  is not a Python.  

  intro_text = hed_dek_wrapper.find_element_by_css_selector('p:nth-of-type(2)')
assert 'Over the past 20 years, we have seen an evolution.' in intro_text.text
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37059847)
 You can use a  css selector  getting all the a tags where the href starts with  ?Company : 

  from bs4 import BeautifulSoup

soup = BeautifulSoup(html)

a = soup.select("a[href^=?Company]")
  

 If you want them just from the sixth tr you can use  nth-of-type : 

   .select("tr:nth-of-type(6) a[href^=?Company]"))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30177865)
 You need to understand the concept of http://selenium-python.readthedocs.org/en/latest/waits.html#explicit-waits and Expected Conditions to wait for.  

 In your case, you can write a https://stackoverflow.com/a/29377790/771848 to wait for elements count found by a locator being equal to  n : 

  from selenium.webdriver.support import expected_conditions as EC

class wait_for_n_elements_to_be_present(object):
    def __init__(self, locator, count):
        self.locator = locator
        self.count = count

    def __call__(self, driver):
        try:
            elements = EC._find_elements(driver, self.locator)
            return len(elements) >= self.count
        except StaleElementReferenceException:
            return False
  

  

  n = 10  # specify how many elements to wait for

wait = WebDriverWait(driver, 10)
wait.until(wait_for_n_elements_to_be_present((By.CSS_SELECTOR, 'span.eN'), n))
  

 

 Probably, you could have also just used a built-in Expected Condition such as  presence_of_element_located  or  visibility_of_element_located  and wait for a single  span.eN  element to be present or visible, example: 

  wait = WebDriverWait(driver, 10)
wait.until(presence_of_element_located((By.CSS_SELECTOR, 'span.eN')))
  



