Query: Python regex findall numbers and dots
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54560330)
 It seems that you're trying to match phone numbers in  resume , for that you can use: 

  resume = '''
    (738) 383-5729
    (373) 577-0492
    (403) 443-2759
    (375) 880-8576
    (641) 576-2342
    (951) 268-8744
    '''

mo = re.findall(r'\(\d{3}\) \d{3}-\d{4}', resume)

for x in mo:
    print(x)
  

 

 Output: 

  (738) 383-5729
(373) 577-0492
(403) 443-2759
(375) 880-8576
(641) 576-2342
(951) 268-8744
  

 

 
  https://ideone.com/JPLOY2  
  https://regex101.com/r/hlqlfH/1  
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/356494)
  re.findall(r"Test([0-9.]*[0-9]+)", text)
  

 or, a bit shorter: 

  re.findall(r"Test([\d.]*\d+)", text)
  

 By the way - you must not escape the dot in a character class: 

  [\.0-9]  // matches: 0 1 2 3 4 5 6 7 8 9 . \
[.0-9]   // matches: 0 1 2 3 4 5 6 7 8 9 .
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50223631)
 While you may use your regex with  re.finditer  to get the first group with  each whole match value ( [x.group(0) for x in re.finditer(regex, numbers)] ), you may also get the values you need with 

  re.findall(r'(.\d)\d*\.\d*', s)
  

 See the https://regex101.com/r/NHR2Ve/2 

  Details  

 
  (.\d)  - a positive lookahead that requires an optional  .  followed with a digit immediately to the right of the current location 
  \d*  - 0+ digits 
  \.  - a dot 
  \d*  - 0+ digits 
 

 So, even though  \d*  in the consuming pattern can match 0 digits, the lookahead requires at least one there. 

 https://ideone.com/30gFbp: 

  import re
s=".42 5.42 5. ."
print(re.findall(r'(.\d)\d*\.\d*', s))
# => ['.42', '5.42', '5.']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54560521)
 Since (it looks like) you're just out for the numbers, you could do something like 

  >>> [''.join(c for c in l if c in '0123456789')  for l in resume.strip().splitlines()]
['7383835729', '3735770492', '4034432759', '3758808576', '6415762342', '9512688744']
  

 That might save you some trouble from internationally formed numbers (such as  +46-(0)7-08/123 456  and the like). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28426195)
 raw string is the recommended way to define  regex but the problem here is mainly because of the implementation of  findall  method. You need to  turn  capturing group  present in your regex to  non-capturing group . Because  re.findall  function gives the first preference to captures and then the matches. Your regex  \d{4}(\s\d{4}){3}  matches the 16 digit number but captures only the last four plus the preceding space. 

  p = re.compile(r'\d{4}(?:\s\d{4}){3}')
  

  Example:  

  >>> import re
>>> p = re.compile(r'\d{4}(\s\d{4}){3}')
>>> p.findall('test1234 message1234 5678 1234 5678')
[' 5678']
>>> p = re.compile(r'\d{4}(?:\s\d{4}){3}')
>>> p.findall('test1234 message1234 5678 1234 5678')
['1234 5678 1234 5678']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49637857)
 You need to escape all dots (since you want to match them as literal chars), only use capturing groups around those patterns that you want  re.findall  to return and use non-capturing groups around the patterns you do not need it to yield, and use word boundaries. 

  re.findall(r'\b((?:10|192|172)(?:\.\d{1,3}){3}\s*/(\d+))', s)
  

 See the https://regex101.com/r/d57ABN/2. 

 See the http://rextester.com/IBZP47677: 

  import re
rx = r"\b((?:10|192|172)(?:\.\d{1,3}){3}\s*/(\d+))"
ss = ["B    10.50.13.0 /26 blah foo", "O    192.169.5.0 /24 foo foo", "B    172.18.0.0/16 etc etc", "B    82.33.4.0/24 yak yak yak"]
for s in ss:
    print(s)
    m = re.findall(rx, s)
    if m:
        print(m)
    else:
        print("NO MATCH")
  

 Output: 

  B    10.50.13.0 /26 blah foo
[('10.50.13.0 /26', '26')]
O    192.169.5.0 /24 foo foo
[('192.169.5.0 /24', '24')]
B    172.18.0.0/16 etc etc
[('172.18.0.0/16', '16')]
B    82.33.4.0/24 yak yak yak
NO MATCH
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25651064)
 Simplify regex 

  In [5]: re.findall(r'\d{6,7}', ' f123456 f1234567 ')
Out[5]: ['123456', '1234567']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48597647)
 This should find all the phone numbers in a given string 

 re.findall(r'+?[1-9][0-9 .-()]{8,}[0-9]', Source) 

   >>> re.findall(r'[\+\(]?[1-9][0-9 .\-\(\)]{8,}[0-9]', Source)
 ['+60 (0)3 2723 7900', '+60 (0)3 2723 7900', '60 (0)4 255 9000', '+6 (03) 8924 8686', '+6 (03) 8924 8000', '60 (7) 268-6200', '+60 (7) 228-6202', '+601-4228-8055']
  

 Basically, the regex lays out these rules 

 
 The matched string may start with + or ( symbol 
 It has to be followed by a number between 1-9 
 It has to end with a number between 0-9 
 It may contain 0-9 (space) .. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/49430413)
 How about creating a pattern that said "Interface01", then skip all chars that are not digits, then get the digits and dots? 

  re.findall(r'Interface01[^0-9]+([0-9.]+)', text)
  

  

  ['192.168.0.1']
  

 Update 

 Thanks to @zipa, here is the updated regex: 

  re.findall(r'[iI]nterface01[^0-9]+([0-9.]+)', text)
  

  

  ['192.168.0.1', '172.123.456.123'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/16990235)
  

  import re
print re.findall(r'.(xd{2}yd{2}).', "name.x00y00.whatever")
# Prints ['x00y00']
  

 I've assumed that  name  and  whatever  can change too, and that the  x00y00  piece is always delimited by dots. 

  .  matches a dot, and  d{2}  means "two digits".  The parentheses capture the piece of the match that they surround. 

 I'm using  findall  in case there are multiple matches. 



