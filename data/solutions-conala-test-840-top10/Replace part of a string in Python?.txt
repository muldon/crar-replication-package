Query: Replace part of a string in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10037751)
 Use the  replace()  method on string: 

  >>> stuff = "Big and small"
>>> stuff.replace( " and ", "/" )
'Big/small'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2788856)
 since you do not have '\n', use it to replace any ';' that is not in a quote string 

  >>> new_s = ''
>>> is_open = False

>>> for c in s:
...     if c == ';' and not is_open:
...         c = '\n'
...     elif c in ('"',"'"):
...         is_open = not is_open
...     new_s += c

>>> result = new_s.split('\n')

>>> result
['part 1', '"this is ; part 2;"', "'this is ; part 3'", 'part 4', 'this "is ; part" 5']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42332032)
 It seems you need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html: 

  print (df)
              val
0  HF - Antartica
1    HF - America
2       HF - Asia

print (df.val.replace({'HF -':'Hi'}, regex=True))
0    Hi Antartica
1      Hi America
2         Hi Asia
Name: val, dtype: object
  

 Similar solution with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html: 

  print (df.val.str.replace('HF -', 'Hi'))
0    Hi Antartica
1      Hi America
2         Hi Asia
Name: val, dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27983105)
 Just transfer the capturing group to the other part and then replace the match with  \1  and you don't need to escape the forward slash if the pattern is defined as a raw string. 

  re.sub(r'^(/en/category.*)-\d{1,4}$', r'\1', string)
  

 https://regex101.com/r/dZ1pU2/2 

  >>> s = "/en/category/specials/men-2610"
>>> re.sub(r'^(/en/category.*)-\d{1,4}$', r'\1', s)
'/en/category/specials/men'
  

  

  >>> s.split('-')[0]
'/en/category/specials/men'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48271193)
  str.replace()  will replace  all  occurrences of the string you pass in as the first argument. It doesn't matter here that the first argument here is created from a slice, the  str.replace()  method is not given any information as to where that string came from. Instead, the  str.replace()  method starts at position 0 and searches forward, it doesn't matter where the substring is found in the input string. 

  

  string_to_replace = s[9:12]
s.replace(string_to_replace, '   ')
  

  

  s.replace('111', '   ')
  

 These all have the exact same effect. 

 Your second example only worked because the  s[9:12]  string value is unique in  s ; there is only one occurrence to replace, at exactly the right location. 

 Because  s[9:12]  is the string  '111' , you asked Python to replace all occurances of that string in  s  with spaces, and there are two such sequences to replace. 

 You are far better off explicitly slicing the input string: 

  s = s[:9] + '   ' + s[12:]
  

 That takes all text  before  the part you want to replace and all the text  after , and puts three spaces in between those two substrings. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27983123)
 As stated in the docs, the  matched part  is replaced.  Matched  is different from  captured . 

 You will have to capture the text you  don't  want to remove in a capture group like so: 

  (^/en/category.*)-\d{1,4}$
  

 and put it back into the string using the backreference  \1 : 

  re.sub(r'(^/en/category.*)-\d{1,4}$', r'\1', text)
  



