Query: Convert DataFrame column type from string to datetime
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36589071)
 I think you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.strftime.html, but  type  is not  datetime , but  string : 

  df1['Date'] = pd.to_datetime(df1['Date'], format='%Y%m%d').dt.strftime('%m/%d/%Y')
df2['Date'] = pd.to_datetime(df2['Date']).dt.strftime('%m/%d/%Y')
df3['Date'] = pd.to_datetime(df3['Date']).dt.strftime('%m/%d/%Y')
df4['Date'] = pd.to_datetime(df4['Date']).dt.strftime('%m/%d/%Y')

print df1
print df2
print df3
print df4
         Date
0  03/01/2016
1  03/01/2016
2  03/01/2016
3  03/01/2016
         Date
0  01/03/2016
1  01/03/2016
2  01/03/2016
         Date
0  03/31/2016
1  03/31/2016
2  03/31/2016
         Date
0  02/25/2016
1  02/25/2016
2  02/25/2016

print type(df1.at[0,'Date'])
<type 'str'>
  

 If you want  datetime , format is  YY-MM-DD : 

  df1['Date'] = pd.to_datetime(df1['Date'], format='%Y%m%d')
df2['Date'] = pd.to_datetime(df2['Date'])
df3['Date'] = pd.to_datetime(df3['Date'])
df4['Date'] = pd.to_datetime(df4['Date'])

print df1
print df2
print df3
print df4
        Date
0 2016-03-01
1 2016-03-01
2 2016-03-01
3 2016-03-01
        Date
0 2016-01-03
1 2016-01-03
2 2016-01-03
        Date
0 2016-03-31
1 2016-03-31
2 2016-03-31
        Date
0 2016-02-25
1 2016-02-25
2 2016-02-25

print type(df1.at[0,'Date'])
<class 'pandas.tslib.Timestamp'>
  

 More info about formating  datetime  is http://strftime.org/. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36778907)
 Just apply  pd.to_datetime  directly to (the string conversion of) the column, no need to use string slicing here: 

  Freshman['ADMIT_DATE'] = pd.to_datetime(Freshman['ADMIT_DATE'].astype(str), format='%Y%m')
  

 There is no requirement for there to be a delimiter between the digits: 

  >>> import pandas as pd
>>> df = pd.DataFrame({'ADMIT_DATE': [200110, 201604]})
>>> df['ADMIT_DATE'] = pd.to_datetime(df['ADMIT_DATE'].astype(str), format='%Y%m')
>>> df
  ADMIT_DATE
0 2001-10-01
1 2016-04-01
>>> df.dtypes
ADMIT_DATE    datetime64[ns]
dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50129940)
 You can use the following if you want to specify tricky formats: 

  df['date_col'] =  pd.to_datetime(df['date_col'], format='%d/%m/%Y')
  

 More details on  format  here: 

 
 Python 2 https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior 
 Python 3 https://docs.python.org/3.7/library/datetime.html#strftime-strptime-behavior 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50401062)
 You can change  Date  to string, concatenate it with time, and then convert to datetime: 

  df['Date'] = df['Date'].astype(str)

df['datetime'] = pd.to_datetime(df.Date+' '+df.Time)

>>> df
         Date   Time            datetime
0  2017-01-01  00:00 2017-01-01 00:00:00
1  2017-01-01  01:00 2017-01-01 01:00:00
2  2017-01-01  02:00 2017-01-01 02:00:00
3  2017-01-01  03:00 2017-01-01 03:00:00
4  2017-01-01  04:00 2017-01-01 04:00:00
  

 You can then drop the  Date  and  Time  column if you don't need them anymore 

  df.drop(['Date', 'Time'], axis=1, inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51421023)
 this should work 

  import dask.dataframe as dd
# note df is a dask dataframe 
df['New Column'] = dd.to_datetime(df.index, format='%Y/%m/%d %H:%M')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38242712)
 I think you need first convert column  date  http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html, because  type  od values in column  date  is  string : 

  buys['date_min'] = (pd.to_datetime(buys['date']) - MonthDelta(1))
buys['date_min'] = (pd.to_datetime(buys['date']) + timedelta(days=5))
  

 EDIT: 

 You need parameter http://strftime.org/ to http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html and then another solution is with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_timedelta.html 

  buys = pd.DataFrame({'date':['01.01.2016','20.02.2016']})
print (buys)
         date
0  01.01.2016
1  20.02.2016

buys['date']= pd.to_datetime(buys['date'],format='%d.%m.%Y') 
buys['date_min'] = buys['date'] + pd.to_timedelta(5,unit='d')
print (buys)
        date   date_min
0 2016-01-01 2016-01-06
1 2016-02-20 2016-02-25
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50664342)
 f-string in a comprehension (Python 3.6+) 

  pd.to_datetime([f'{y}-{m}-01' for y, m in zip(df.year, df.Months)])

DatetimeIndex(['2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01',
               '2018-05-01'],
              dtype='datetime64[ns]', freq=None)
  

 

  str.format  

  pd.to_datetime(['{}-{}-01'.format(y, m) for y, m in zip(df.year, df.Months)])

DatetimeIndex(['2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01',
               '2018-05-01'],
              dtype='datetime64[ns]', freq=None)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35538610)
 If type of column  Dates  is string, convert it by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html. Then you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.date.html, http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.time.html and last http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html original column  Dates : 

  print df['Dates'].dtypes
object
print type(df.at[0, 'Dates'])
<type 'str'>

df['Dates'] = pd.to_datetime(df['Dates'])

print df['Dates'].dtypes
datetime64[ns]

print df
                Dates
0 2015-05-13 23:53:00
1 2015-05-13 23:53:00
2 2015-05-13 23:33:00
3 2015-05-13 23:30:00
4 2015-05-13 23:30:00

df['Date'] = df['Dates'].dt.date
df['Time'] = df['Dates'].dt.time

df = df.drop('Dates', axis=1)
print df
         Date      Time
0  2015-05-13  23:53:00
1  2015-05-13  23:53:00
2  2015-05-13  23:33:00
3  2015-05-13  23:30:00
4  2015-05-13  23:30:00
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50663708)
 You can convert  year  column to string, add  Months  and use parameter  format  in http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html by http://strftime.org/: 

  print (pd.to_datetime(df_sub['year'].astype(str)  + df_sub['Months'], format='%Y%B'))
0   2018-01-01
1   2018-02-01
2   2018-03-01
3   2018-04-01
4   2018-05-01
dtype: datetime64[ns]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/38110324)
 Something like this should work 

  pd.to_datetime('2016-06-10 18:57:35:317', format="%Y-%m-%d %H:%M:%S:%f")
  

 You can look up datetime formats https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior 



