Query: How to check if a path is absolute path or relative path in cross platform way with Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3320427)
 Use http://docs.python.org/library/os.path.html#os.path.isabs. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3320458)
 And if what you  really want  is the absolute path, don't bother checking to see if it is, just get the  abspath : 

  import os

print os.path.abspath('.')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3320431)
 The  os.path  module will have everything you need. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3320429)
  os.path.isabs  returns  True  if the path is absolute,  False  if not. http://docs.python.org/library/os.path.html says it works in windows (I can confirm it works in Linux personally). 

  os.path.isabs(my_path)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41846670)
 Actually I think none of the above answers addressed the real issue: cross-platform paths. What os.path does is load the OS dependent version of 'path' library. so the solution is to explicitly load the relevant (OS) path library: 

  import ntpath
import posixpath

ntpath.isabs("Z:/a/b/c../../H/I/J.txt")
    True
posixpath.isabs("Z:/a/b/c../../H/I/J.txt")
    False
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17429444)
 So you can do a check for running os
by sys.platfrom 

 on windows 

  >>> sys.platform
'win32'
  

  

  >>> sys.platform
'linux2'
  

   

  if sys.platform == 'win32':
    ROOT = os.path.splitdrive(os.path.abspath('.'))[0]
elif sys.platform == 'linux2':
    ROOT = os.sep
  

 Please note that 'linux2' may not cover all linux distros 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1026516)
 It's better if you check which platform your script is running (using  sys.platform ) and do a test based on that, e.g. import some hasAdminRights function from another, platform-specific module. 

 On Windows you could check whether  Windows\System32  is writable using  os.access , but remember to try to retrieve system's actual "Windows" folder path, probably using pywin32. Don't hardcode one. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10296306)
 IMHO, code that acts differently depending from absolute paths is not a good solution.
It will be probably better a relative path solution. Use dirname to know the relative directory and os.sep for cross platform compatibility. 

  if hasattr(sys, "frozen"):
    main_dir = os.path.dirname(sys.executable)
    full_real_path = os.path.realpath(sys.executable)
else:
    script_dir = os.path.dirname(__file__)
    main_dir = os.path.dirname(os.path.realpath(sys.argv[0]))
    full_real_path = os.path.realpath(sys.argv[0])
  

 the frozen attribute is python standard. 

 Take a look also at Esky : 
http://pypi.python.org/pypi/esky 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1271580)
 I often use something similar to this: 

  import os
DATA_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), 'datadir'))

# if you have more paths to set, you might want to shorten this as
here = lambda x: os.path.abspath(os.path.join(os.path.dirname(__file__), x))
DATA_DIR = here('datadir') 

pathjoin = os.path.join
# ...
# later in script
for fn in os.listdir(DATA_DIR):
    f = open(pathjoin(DATA_DIR, fn))
    # ...
  

  

  __file__
  

 holds the file name of the script you write that code in, so you can make paths relative to script, but still written with absolute paths. It works quite well for several reasons: 

 
 path is absolute, but still relative 
 the project can still be deployed in a relative container 
 

 But you need to watch for platform compatibility - Windows' os.pathsep is different than UNIX. 



