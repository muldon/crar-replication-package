Query: How do you pick "x" number of unique numbers from a list in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6497043)
 Another way, of course with all the solutions you have to be sure that there are at least 3 unique values in the original list.   all_data = [1,2,2,3,4,5,6,7,8,8,9,10,11,11,12,13,14,15,15]
choices = []
while len(choices) < 3:
    selection = random.choice(all_data)
    if selection not in choices:
        choices.append(selection)
print choices    


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6498667)
 You can also generate a list of random choices, using  itertools.combinations  and  random.shuffle . 

  all_data = [1,2,2,3,4,5,6,7,8,8,9,10,11,11,12,13,14,15,15]

# Remove duplicates
unique_data = set(all_data)

# Generate a list of combinations of three elements
list_of_three = list(itertools.combinations(unique_data, 3))

# Shuffle the list of combinations of three elements
random.shuffle(list_of_three)
  

 Output: 

  [(2, 5, 15), (11, 13, 15), (3, 10, 15), (1, 6, 9), (1, 7, 8), ...]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52224525)
 You can use np.unique to get it done 

  np.unique(np.array(a),return_counts=True)
  

 You can also do it using counters from collections 

  from collections import Counter
Var=dict(Counter(a))
print(Var)
  

 The primitive way is to use loops 

  [[x,a.count(x)] for x in set(a)]
  

 If you are not familiar with list comprehensions, this is its explaination 

  ls=[]
for x in set(a):
    ls.append([x,a.count(x)])
print(ls)
  

  

  counter = dict()
for k in a:
    if not k in counter:
        counter[k] = 1
    else:
        counter[k] += 1
print(counter)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6494519)
 That's exactly what http://docs.python.org/library/random.html#random.sample does. 

  >>> random.sample(range(1, 16), 3)
[11, 10, 2]
  

  Edit : I'm almost certain this is not what you asked, but I was pushed to include this comment: If the population you want to take samples from contains duplicates, you have to remove them first: 

  population = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]
population = set(population)
samples = random.sample(population, 3)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13523339)
 This is a really tedious way of doing it, but it doesn't use lists. It will pick random and unique values. 

  def ballPickerTwo():

    a = random.randint(1, 59)

    b = a        
    while b == a:
        b = random.randint(1, 59)

    c = b
    while c == b or c == a:
        c = random.randint(1, 59)

    d = c
    while d == c or d == b or d == a:
        d = random.randint(1, 59)

    ...
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6494538)
  

  all_data = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
from random import shuffle
shuffle(all_data)
res = all_data[:3]# or any other number of items
  

  

  from random import sample
number_of_items = 4
sample(all_data, number_of_items)
  

 If all_data could contains duplicate entries than modify your code to remove duplicates first and then use shuffle or sample: 

  all_data = list(set(all_data))
shuffle(all_data)
res = all_data[:3]# or any other number of items
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51689176)
 Generate the numbers first, then shuffle them, and pick from that list. 

  import random

numbers = list(range(100))  # `numbers` is now a list [0, 1, ..., 99] 
random.shuffle(numbers)  # the list is now in random order

while numbers:  # While there are numbers left, 
    a = numbers.pop()  # take one from the list,
    print(a)  # and print it.
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6494561)
 Others have suggested that you use  random.sample . While this is a valid suggestion, there is one subtlety that everyone has ignored: 

 
   If the population contains repeats, 
  then each occurrence is a possible
  selection in the sample. 
 

 Thus, you need to turn your list into a set, to avoid repeated values: 

  import random
L = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
random.sample(set(L), x) # where x is the number of samples that you want
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53795844)
 generate a sorted list of 50 different random numbers between 0 and 100 (not included) like this: 

  sorted(random.sample(range(0,100),50))
  

 (pick 50 elements in the  range  object and sort them) 

 If you need/want repeats don't use  sample  just pick 50 numbers 

  sorted([random.randrange(0,100) for _ in range(50)])
  

 or from python 3.6:  sorted(random.choices(range(100),k=50))  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24066164)
 Instead of picking numbers from the entire range and then checking to see if the number you picked is already in the list, it will be more efficient to first filter out all of the numbers that already exist and then pick based on what is left.  For example: 

  import random

def app_rand(lista):
    options = set(range(1, 10)).difference(lista)
    lista.extend(random.sample(options, 2))
    print lista

app_rand([1,2,3,4,5,6,7])
  



