Query: Replace a substring when it is a separate word
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18785484)
 As others have said, this is a case when regexes are the proper tool. 

 You can replace only whole words by using  \b : 

  >>> text = 'H3 foo barH3 H3baz H3 quH3ux'
>>> re.sub(r'\bH3\b', 'H1', text)
'H1 foo barH3 H3baz H1 quH3ux'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28019950)
 You may play with the boundaries  \B  and  \b  

  >>> print re.sub(r'\B@\b', r'', '@Alice @ home')
Alice @ home
>>> print re.sub(r'\B@\b', r'', 'foo @Alice @ home')
foo Alice @ home
  

  \B  matches between two word characters or between two non-word characters. So  \B@  in the above regex matches the  @  before  Alice  and the another separate  @  symbol.  \b  matches between a word character and a non-word character ( vice versa ). So the following  \b  makes the pattern to match only the first because the first  @  itself followed by a word character ie,  A .   


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11407959)
 as the replacement string is same you can use  | . 

  >>> import re
>>> s="this is for testing"
>>> re.sub("this|for|test","REPLACED",s)
'REPLACED is REPLACED REPLACEDing'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28363873)
 You could use  re.sub  .  \b  word boundary which matches between a word character and a non-word character. We need to use word boundary to match an exact word string or otherwise, it would match also the  a  in  day   

  >>> word_dict = {'a': 'a1', 'winter': 'cold', 'summer': 'hot'}
>>> data = "It's winter not summer. Have a nice day"
>>> for word in word_dict:
        data = re.sub(r'\b'+word+r'\b', word_dict[word], data)


>>> data
"It's cold not hot. Have a1 nice day"
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18786323)
 Since I had been curious about doing this without regex, here's an version without: 

  MYSTR = ["H3", "H3b", "aH3", "H3 mmmoleculeH3 H3",
         "H3 mmmoleculeH3 H3b", "H3 mmmoleculeH3 H3b H3"]
FIND = "H3"
LEN_FIND = len( FIND )
REPLACE = "H1"

for entry in MYSTR:
    index = 0
    foundat = []
    # Get all positions where FIND is found
    while index < len( entry ):
        index = entry.find( FIND, index )
        if index == -1:
            break
        foundat.append( index )
        index += LEN_FIND

    print "IN: ", entry,
    for loc in foundat:
        # Check if String is starting with FIND
        if loc == 0:
            # Check if String only contains FIND
            if LEN_FIND == len( entry ):
                entry = REPLACE
            # Check if the character after FIND is blank
            elif entry[LEN_FIND] == " ":
                entry = entry[:loc] + REPLACE + entry[loc + LEN_FIND:]
        else:
            # Check if character before FIND is blank
            if entry[loc - 1] == " ":
                # Check if FIND is the last part of the string
                if loc + LEN_FIND + 1 > len( entry ):
                    entry = entry[:loc] + REPLACE + entry[loc + LEN_FIND:]
                # Check if character after FIND is blank
                elif entry[loc + LEN_FIND] == " ":
                    entry = entry[:loc] + REPLACE + entry[loc + LEN_FIND:]

    print " OUT: ", entry
  

 The output is: 

  IN:  H3  OUT:  H1
IN:  H3b  OUT:  H3b
IN:  aH3  OUT:  aH3
IN:  H3 mmmoleculeH3 H3  OUT:  H1 mmmoleculeH3 H1
IN:  H3 mmmoleculeH3 H3b  OUT:  H1 mmmoleculeH3 H3b
IN:  H3 mmmoleculeH3 H3b H3  OUT:  H1 mmmoleculeH3 H3b H1
  

 PS: I would prefer the solution from Daniel Roseman. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28020076)
 The simplest way working for me: 

  >>> s = '@Alice @ home'
>>> re.sub('\s@\s', ' at ', s).replace('@', '')
'Alice at home'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31697086)
 You can use regular expression  \bin\b .  \b  here means http://%3E%3E%3E%20import%20re%20%3E%3E%3E%20re.sub(r&#39;%5Cbin%5Cb&#39;,%20&#39;&#39;,%20&#39;office%20administration%20in%20delhi&#39;)%20&#39;office%20administration%20%20delhi&#39;.  \bin\b  will match  in  surrounded by word boundary (space, punctuation, ...), not  in  in other words. 

  >>> import re
>>> re.sub(r'\bin\b', '', 'office administration in delhi')
'office administration  delhi'
  

 See https://docs.python.org/2/library/re.html#re.sub. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44041071)
  Edit: added suggestions by Wiktor Stribi≈ºew  

 If you want to get all separate words of exactly length 6 starting with the letter m, you could use: 

  r = re.compile(r"(?<!\w)(m[a-z]{5})(?!\w)")
  

 This ensures a non-letter-char before and after the match (with negative lookback and lookahead), which consists of the letter  m  followed by 5 other letters. The negative lookahead can be simplified by using  \b  for word boundaries, as presented in the other answers. 

  >>> import re
>>> str1 = "mouseeee mother mouse is beautiful creation"
>>> r = re.compile("(?<= )(m[a-z]{5})(?= )")
>>> print(r.findall(str1))
['mother']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50999327)
 The problem is that https://docs.python.org/3/library/stdtypes.html#str.replace replaces one substring with a replacement substring. That's what the error means: it wants a substring, and you gave it a list of separate characters. 

 

 You could loop over the replacement pairs, calling  replace  for each one: 

  >>> s = '123'
>>> for search, replace in zip(search_array, replace_array):
...     s = s.replace(search, replace)
>>> s
'abc'
  

 

 Or you could just use https://docs.python.org/3/library/stdtypes.html#str.translate, which actually  does  do what you want, although it requires a bit of setup: 

  >>> search_array = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]
>>> replace_array = ["a", "b", "c", "d", "d", "e", "f", "g", "h", "i"]
>>> trans = str.maketrans(dict(zip(search_array, replace_array)))
>>> '123'.translate(trans)
'abc'
  

 Or, alternatively, and probably more readable: 

  >>> search = "1234567890"
>>> replace = "abcddefghi"
>>> trans = str.maketrans(search, replace)
>>> '123'.translate(trans)
'abc'
  

 

 By the way, if it isn't intentional that you specified  d  twice in a row, it might be clearer (and harder to make that typo!) to specify the letters like this: 

  >>> replace = string.ascii_lowercase[:10]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/28021177)
  (?:^|(?<=\s))@(?!\s)
  

 Try this.This will replace  @  only from the start of word.if  @  is in the middle of word like  as@sas  it will save it.See demo. 

 https://regex101.com/r/tX2bH4/44 

  re.sub(r'(?:^|(?<=\s))@(?!\s)','',s)
  



