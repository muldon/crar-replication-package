Query: How to reorder indexed rows based on a list in Pandas data frame
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53495841)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html with helper  DataFrame  created with list and counter column by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.cumcount.html: 

  Notice:  
 Dont use variable name  list , because python code word.   

  L = ['A', 'Z', 'Z', 'A', 'C', 'Z']

df1 = pd.DataFrame({'company':L})
df1['g'] = df1.groupby('company').cumcount()
df['g'] = df.groupby('company').cumcount()

df = df1.merge(df)
print (df)
  company  g  col1  col2  col3
0       A  0     0   130     0
1       Z  0     0     0   150
2       Z  1     0     0   140
3       A  1     0   145     0
4       C  0   173     0     0
5       Z  2     0     0   110
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30010004)
 You could set index on predefined order using  reindex  like 

  In [14]: df.reindex(["Z", "C", "A"])
Out[14]:
company  Amazon  Apple  Yahoo
Z             0      0    150
C           173      0      0
A             0    130      0
  

 However, if it's alphabetical order, you could use  sort_index(ascending=False)  

  In [12]: df.sort_index(ascending=False)
Out[12]:
company  Amazon  Apple  Yahoo
name
Z             0      0    150
C           173      0      0
A             0    130      0
  

 Like pointed below, you need to assign it to some variable 

  In [13]: df = df.sort_index(ascending=False)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51074512)
 You can using  reindex   

  frame.reindex(sort_list, level=0, axis=1)
Out[126]: 
    DARK   ANTS           TWO       
  thing1 thing1 thing3 thing1 thing4
0    0.1      a      a      1      1
1    0.2      e      e      2      2
2    1.0      i      i      3      3
3    2.0      o      o      4      4
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35220531)
 There is a very simple way: just create a new dataframe based on the original, with the correct order of multiindex columns: 

  multi_tuples = [('IWWGCW',24), ('IWWGCW',48), ('IWWGDW',24), ('IWWGDW',48)
    , ('BASE',24), ('BASE',48)]

multi_cols = pd.MultiIndex.from_tuples(multi_tuples, names=['Experiment', 'Lead Time'])

df_ordered_multi_cols = pd.DataFrame(df_ori, columns=multi_cols)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24763644)
 You could use indexing to reorder the columns. For example, 

  In [119]: df = pd.DataFrame(np.arange(24).reshape(6,4), columns=list('ABCD'))

In [120]: df
Out[120]: 
    A   B   C   D
0   0   1   2   3
1   4   5   6   7
2   8   9  10  11
3  12  13  14  15
4  16  17  18  19
5  20  21  22  23

In [121]: df[list('CDAB')]
Out[121]: 
    C   D   A   B
0   2   3   0   1
1   6   7   4   5
2  10  11   8   9
3  14  15  12  13
4  18  19  16  17
5  22  23  20  21
  

 So simply read in the data as usual using  pd.read_table , and then reorder the columns using  

  df = df[['col1', 'col2', ...]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33611953)
 You can use a list comprehension to reorder your dict into a list of tuples where each tuple is a row and then you can sort your dataframe 

  import pandas as pd

d = {'x': {'b': 10, 'c': 20}, 'y': {'b': '33', 'c': 44}}

df = pd.DataFrame([(k,k1,v1) for k,v in d.items() for k1,v1 in v.items()], columns = ['Col1','Col2','Val'])
print df.sort(['Col1','Col2','Val'], ascending=[1,1,1])

  Col1 Col2 Val
3    x    b  10
2    x    c  20
1    y    b  33
0    y    c  44
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28678556)
 You could use http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.reindex_like.html to reorder the rows/columns of one DataFrame to conform to another DataFrame. 

  >>> vals = np.arange(9).reshape(3,3)
>>> df1 = pd.DataFrame(vals, columns=list('def'), index=list('abc'))
>>> df2 = pd.DataFrame(vals, columns=list('efd'), index=list('bac'))
  

 Then to reorder  df1  so that it is the same as  df2 : 

  >>> df1.reindex_like(df2)
   e  f  d
b  4  5  3
a  1  2  0
c  7  8  6
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51074531)
 Option 1 

 You can sort the index then slice 

  frame.sort_index(axis=1, level=1)[['DARK', 'ANTS', 'TWO']]

    DARK   ANTS           TWO       
  thing1 thing1 thing3 thing1 thing4
0    0.1      a      a      1      1
1    0.2      e      e      2      2
2    1.0      i      i      3      3
3    2.0      o      o      4      4
  

 

 Option 2 

 Set the first level of the columns to be categorical that is ordered 

  frame.columns = frame.columns.set_levels(
    pd.CategoricalIndex(
        frame.columns.levels[0],
        ['DARK', 'ANTS', 'TWO'],
        ordered=True
    ), level=0
)

frame.sort_index(axis=1)

    DARK   ANTS           TWO       
  thing1 thing1 thing3 thing1 thing4
0    0.1      a      a      1      1
1    0.2      e      e      2      2
2    1.0      i      i      3      3
3    2.0      o      o      4      4
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36380391)
  >>> df.groupby(['FROM', 'CONT']).sum()
              ID1    ID2    ID3    ID4  ID5    ID6  ID7
FROM  CONT                                             
63309 89    101.3  102.3    NaN  104.0  109  107.1  111
      90      NaN    NaN  103.0  105.0  NaN    NaN  NaN
63310 92    109.0  105.1  105.3  789.1  104    NaN  NaN
63311 94    104.0  109.0  890.0    NaN  NaN    NaN  107
  

 If you don't want the data indexed: 

  >>> df.groupby(['FROM', 'CONT'], as_index=False).sum()
    FROM  CONT    ID1    ID2    ID3    ID4  ID5    ID6  ID7
0  63309    89  101.3  102.3    NaN  104.0  109  107.1  111
1  63309    90    NaN    NaN  103.0  105.0  NaN    NaN  NaN
2  63310    92  109.0  105.1  105.3  789.1  104    NaN  NaN
3  63311    94  104.0  109.0  890.0    NaN  NaN    NaN  107
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44887852)
 Try using the https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reindex.html function (note that this is not inplace): 

  >>import pandas as pd

>>df = pd.DataFrame({'col1':[1,2,3],'col2':['test','hi','hello']})
>>df 
    col1    col2
0   1   test
1   2   hi
2   3   hello


>>df = df.reindex([2,0,1])
>>df
    col1    col2
2   3   hello
0   1   test
1   2   hi
  



