Query: Sorting a dictionary of tuples in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51983768)
 With Python 3.7 I could do this: 

  >>> myDic={10: 'b', 3:'a', 5:'c'}
>>> sortDic = sorted(myDic.items())
>>> print(dict(sortDic))
{3:'a', 5:'c', 10: 'b'}
  

 If you want a list of tuples: 

  >>> myDic={10: 'b', 3:'a', 5:'c'}
>>> sortDic = sorted(myDic.items())
>>> print(sortDic)
[(3, 'a'), (5, 'c'), (10, 'b')]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17362960)
 Dictionaries in Python are orderless.  

 In order to actually store ordering, you will need to either have a list of tuples, or use a http://docs.python.org/2/library/collections.html#collections.OrderedDict. 

  >>> from collections import OrderedDict
>>> OrderedDict(sorted(d.items(), key=lambda item: len(item[1])))
OrderedDict([('category_3', ['z']), ('category_1', ['a', 'b']), ('category_2', ['c', 'd', 'e'])])
  

 The ordering is achieved here by using http://docs.python.org/3.3/library/functions.html#sorted, with a simple  key  function. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16868476)
  >>> d = {"one": [(1,3),(1,4)], "two": [(1,2),(1,2),(1,3)], "three": [(1,1)]}
>>> for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
  

 Here is a universal solution that works on Python 2 & Python 3: 

  >>> print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))
two one three
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18691307)
 I would convert the dictionary to a list of tuples and sort it based on weight (in reverse order for descending), then just remove the objects to get a list of the keys 

  l = documents.items()
l.sort(key=lambda x: x[1]['weight'], reverse=True)
result = [d[0] for d in l]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50445595)
 <div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"> dict= {'a': [9,2,3,4,5], 'b': [1,2,3,4, 5, 6], 'c': [], 'd': [1,2,3,4], 'e': [1,2]}
dict_temp = {'a': 'hello', 'b': 'bye', 'c': '', 'd': 'aa', 'e': 'zz'}

def sort_by_values_len(dict):
    dict_len= {key: len(value) for key, value in dict.items()}
    import operator
    sorted_key_list = sorted(dict_len.items(), key=operator.itemgetter(1), reverse=True)
    sorted_dict = [{item[0]: dict[item [0]]} for item in sorted_key_list]
    return sorted_dict

print (sort_by_values_len(dict))

output:
[{'b': [1, 2, 3, 4, 5, 6]}, {'a': [9, 2, 3, 4, 5]}, {'d': [1, 2, 3, 4]}, {'e': [1, 2]}, {'c': []}]  
</div>
</div>
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28839263)
 You can create a list of sorted tuples in this manner, but note that dictionaries themselves are unordered, so you cannot sort the dictionary itself (unless you use something like https://docs.python.org/2/library/collections.html#collections.OrderedDict 

  >>> d = {'a':10,'b':20,'c':5,'d':5,'e':5}
>>> list(sorted(d.items(), key = lambda i : (i[1],i[0]), reverse = True))
[('b', 20), ('a', 10), ('e', 5), ('d', 5), ('c', 5)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54871821)
 
   https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6 
  
   They are  insertion ordered . As of Python 3.6, for the CPython
  implementation of Python, dictionaries remember the order of items
  inserted. This is considered an implementation detail in Python 3.6;
  you need to use  OrderedDict  if you want insertion ordering that's
  guaranteed across other implementations of Python (and other ordered
  behavior). 
 

 i.e. 

 
  Pre-3.6: 

  >>> from collections import OrderedDict
...
>>> OrderedDict(sorted_li)
OrderedDict([('e', 5), ('l', 8), ('h', 10)])
   
  3.6+: 

  >>> dict(sorted_li)
{'e':5, 'l':8, 'h':10}
   
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1218570)
 As John Machlin said you can't actually sort a Python dictionary. 

 However, you can create an index of the keys which can be sorted in any order you like. 

 The preferred Python pattern (idiom) for sorting by any alternative criterium is called "decorate-sort-undecorate" (DSU).  In this idiom you create a temporary list which contains tuples of your key(s) followed by your original data elements, then call the normal  .sort()  method on that list (or, in more recent versions of Python simply wrap your decoration in a called to the  sorted()  built-in function).  Then you remove the "decorations." 

 The reason this is generally preferred over passing comparison function to the  .sort()  method is that Python's built-in default sorting code (compiled C in the normal C Python) is very fast and efficient in the default case, but much, much slower when it has to call Python object code many, many times in the non-default case.  So it's usually far better to iterate over the data creating data structures which can be passed to the default sort routines. 

 In this case you should be able to use something like: 

  [y[1] for y in sorted([(myDict[x][2], x) for x in myDict.keys()])]
  

 ... that's a list comprehension doing the undecorate from the sorted list of tuples which is being returned by the inner list comprehension.  The inner comprehension is creating a set of tuples, your desired sorting key (the 3rd element of the list) and the dictionary's key corresponding to the sorting key.  myDict.keys() is, of course, a method of Python dictionaries which returns a list of all valid keys in whatever order the underlying implementation chooses --- presumably a simple iteration over the hashes. 

 A more verbose way of doing this might be easier to read: 

  temp = list()
for k, v in myDict.items():
    temp.append((v[2],))
temp.sort()
results = list()
for i in temp:
    results.append(i[1])
  

 Usually you should built up such code iteratively, in the interpreter using small data samples.  Build the "decorate" expression or function.  Then wrap that in a call to  sorted() .  Then build the undecorate expression (which is usually as simple as what I've shown here). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53660134)
 That's because with a  key=itemgetter(1)  you are sorting  by value . 

 To sort by key, like you are requesting with your example, use  itemgetter(0) : 

  >>> "".join([v for k, v in sorted(data.items(), key=itemgetter(0))])
'100000testTokenExample1234561508852342226'
  

 Note that also simply sorting the item tuples (using their natural ordering), you get the same sorting: 

  >>> "".join([v for k, v in sorted(data.items())])
'100000testTokenExample1234561508852342226'
  



