Query: How to check if a value exists in a dictionary (python)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8215012)
 Use dictionary views: 

  if x in d.viewvalues():
    dosomething()..
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40734000)
 Python dictionary has https://docs.python.org/2/library/stdtypes.html#dict.get funcion 

  >>> d.get(key)
  

 For Example, 

  >>> d = {'1': 'one', '3': 'three', '2': 'two', '5': 'five', '4': 'four'}
>>> d.get('3')
'three'
>>> d.get('10')
none
  

 If your key does'nt exist, will return  none  value.
  

  foo = d[key] # raise error if key doesn't exist
foo = d.get(key) # return none if key doesn't exist
  

 
Content relevant to versions less than 3.0 and greater than 5.0.


. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8214966)
 You can use 

  "one" in d.itervalues()
  

 to test if  "one"  is among the values of your dictionary. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47524688)
 You can do something like this 

  dict_keys=yourdict.keys()
expected_keys=['a','b','c']

result= list(set(dict_keys).intersection(set(expected_keys)))
if result:
    for i in expected_keys:
        if i in result:
            yourdict.get(i)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42527405)
 Dictionary in python has a get('key', default) method. So you can just set a default value in case there is no key.  

  values = {...}
myValue = values.get('Key', None)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49911313)
 In Python 3 you can use the  values()  function of the dictionary. It returns a view object of the values. This, in turn, can be passed to the  iter  function which returns an iterator object. The iterator can be checked using  in , like this, 

<pre class="lang-py prettyprint-override"> 'one' in iter(d.values())
  

 Or you can use the view object directly since it is similar to a list  

  'one' in d.values()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34113921)
 You have a dictionary within a dictionary, so to check if any user (top level) has password (key 'pw') set to 'password', you can use: 

  return 'password' in (user['pw'] for user in users.itervalues())
  

 Also note that the boolean values in Python are  True  and  False . If you wanted to return strings  'true'  and  'false' , you can do: 

  return 'true' if 'password' in (user['pw'] for user in users.itervalues()) else 'false'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49488271)
 You'd check for the existence of header keys as you would with any standard python dictionary. 

  if 'Retry_After' in response.headers:
    ... # do something
  

 Alternatively, use  dict.get  to the same effect: 

  retry_after = response.headers.get('Retry_After')
  

 Which will assign  retry_after  to the value of the key if it exists, or  None  otherwise.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20554784)
 The syntax in  NameExists  seems wrong, you aren't using the  value  and  best_guess.values()  is returning an iterator, so  in  will only work once, unless we convert it to a list or a set (you are using Python 3.x, aren't you?). I believe this is what you meant: 

  def NameExists(best_guess, line):
    vals = set(best_guess.values())
    return all(value in vals for value in line['full name'])
  

 And the  CheckDuplicates  function can be written in a shorter way like this: 

  def CheckDuplicates(best_guess, line):
    return len(set(best_guess.values())) != len(best_guess)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44040069)
 IF you can't use an exception for some reason (eg. lambda func, list comprehension, generator expression etc) 

  value = a.get(b, {}).get(c, {}).get("z", None)
  

 But normally you should prefer to use the exception handler 



