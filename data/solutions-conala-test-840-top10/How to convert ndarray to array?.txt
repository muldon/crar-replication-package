Query: How to convert ndarray to array?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15111844)
  array.array  can change size dynamically. If you are collecting data from some source, it's better to use  array.array . But  array.array  is only one dimension, and there is no calculation functions to do with it. So, when you want to do some calculation with your data, convert it to  numpy.ndarray , and use functions in numpy. 

  numpy.frombuffer  can create a  numpy.ndarray  that shares the same data buffer with  array.array  objects, it's fast because it don't need to copy the data. 

 Here is a demo: 

  import numpy as np
import array
import random

a = array.array("d")
# a for loop that collects 10 channels data
for x in range(100):
    a.extend([random.random() for _ in xrange(10)])

# create a ndarray that share the same data buffer with array a, and reshape it to 2D
na = np.frombuffer(a, dtype=float).reshape(-1, 10)

# call some numpy function to do the calculation
np.sum(na, axis=0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11334950)
 They are the same:  numpy.array  is a function that constructs an object of type  numpy.ndarray . 

  >>> import numpy
>>> numpy.ndarray
<type 'numpy.ndarray'>
>>> numpy.array
<built-in function array>
>>> numpy.array([])
array([], dtype=float64)
>>> isinstance(numpy.array([]), numpy.ndarray)
True
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21088294)
 An  ndarray   is  a NumPy array. 

  >>> x = np.array([1, 2, 3])
>>> type(x)
<type 'numpy.ndarray'>
  

 The difference between  np.ndarray  and  np.array  is that the former is the actual type, while the latter is a flexible shorthand function for constructing arrays from data in other formats. The  TypeError  comes your use of  np.array  arguments to  np.ndarray , which takes completely different arguments (see docstrings). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8855645)
 Use  . . 

  >>> a = numpy.array([1, 2, 3, 4], dtype=numpy.float64)
>>> a
array([ 1.,  2.,  3.,  4.])
>>> a.(numpy.int64)
array([1, 2, 3, 4])
  

 See the http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray..html#numpy.ndarray. for more options. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22292088)
 You should set the  dtype  of the array when you assign it: 

  l = [pd.Series([1,2,3]),pd.Series([4,5,6])]
np.array(l, dtype=pd.Series)
  

 Though it is raises the question: why do you want an ndarray of series, and not an ndarray of the contents of the series? 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43992804)
  tt = array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])

oneDvector = tt.A1
  

 This is the only approach which solved the problem of double brackets, that is conversion to 1D array that nd matrix. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49787502)
 You can use https://docs.scipy.org/doc/numpy/reference/generated/numpy.expand_dims.html to create an array with an extra axis, 

  >>> np.expand_dims(li, -1)
array([[3],
       [2],
       [1],
       [4]])
  

 or if you prefer, add the axis after array creation. 

  np.array(li)[..., np.newaxis]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18200108)
 An alternative is to use http://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html: 

  >>> np.zeros((3,3)).ravel()
array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
  

 The importance of  ravel  over  flatten  is  ravel  only copies data if necessary and usually returns a view, while  flatten  will always return a copy of the data. 

 To use reshape to flatten the array: 

  tt = t.reshape(-1)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40250599)
 One way would be to use stacking operations with something like https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html - 

  np.vstack(arr[:, 1])
  

  

  In [234]: arr
Out[234]: 
array([[1, ['a', 'b', 'c']],
       [2, ['a', 'b', 'c']]], dtype=object)

In [235]: arr[:,1]
Out[235]: array([['a', 'b', 'c'], ['a', 'b', 'c']], dtype=object)

In [236]: np.vstack(arr[:, 1])
Out[236]: 
array([['a', 'b', 'c'],
       ['a', 'b', 'c']], 
      dtype='|S1')
  

 I believe  np.vstack  would internally use https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html#numpy.concatenate. So, to directly use it, we would have - 

  np.concatenate(arr[:, 1]).reshape(len(arr),-1)
  



