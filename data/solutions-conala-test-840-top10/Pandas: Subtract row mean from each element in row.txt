Query: Pandas: Subtract row mean from each element in row
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26084093)
 You could use DataFrame's  sub  method and specify that the subtraction should happen row-wise ( axis=0 ) as opposed to the default column-wise behaviour: 

  df.sub(df.mean(axis=1), axis=0)
  

 Here's an example: 

  >>> df = pd.DataFrame({'a': [1.5, 2.5], 'b': [0.25, 2.75], 'c': [1.25, 0.75]})
>>> df
     a     b     c
0  1.5  0.25  1.25
1  2.5  2.75  0.75
  

 The mean of each row is straightforward to calculate: 

  >>> df.mean(axis=1)
0    1
1    2
dtype: float64
  

 To de-mean the rows of the DataFrame, just subtract the mean values of rows from  df  like this: 

  >>> df.sub(df.mean(axis=1), axis=0)
     a     b     c
0  0.5 -0.75  0.25
1  0.5  0.75 -1.25
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30180018)
 You can use  df.<column>.map  to apply a function to each element in a column: 

  df = pd.DataFrame({'a': 
    [np.array([1, 2, 3]), 
     np.array([4, 5, 6, 7]), 
     np.array([7, 8])]
})

df
Out[8]: 
              a
0     [1, 2, 3]
1  [4, 5, 6, 7]
2        [7, 8]

df['a'].map(lambda x: x.mean())
Out[9]: 
0    2.0
1    5.5
2    7.5
Name: a, dtype: float64
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44241565)
 I think you need  sum  or maybe  mean  per rows ( axis=1 ) with division by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.div.html : 

  np.random.seed(123)
df = pd.DataFrame(np.random.randint(10, size=12).reshape(3,4),columns=list('abcd'))
print (df)
   a  b  c  d
0  2  2  6  1
1  3  9  6  1
2  0  1  9  0

print (df.sum(axis=1))
0    11
1    19
2    10
dtype: int64

print (df.div(df.sum(axis=1), axis=0))
          a         b         c         d
0  0.181818  0.181818  0.545455  0.090909
1  0.157895  0.473684  0.315789  0.052632
2  0.000000  0.100000  0.900000  0.000000
  

 

  print (df.mean(axis=1))
0    2.75
1    4.75
2    2.50
dtype: float64

print (df.div(df.mean(axis=1), axis=0))
          a         b         c         d
0  0.727273  0.727273  2.181818  0.363636
1  0.631579  1.894737  1.263158  0.210526
2  0.000000  0.400000  3.600000  0.000000
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35169530)
 You could simply use the  mean function of pandas  

  Code:  

  import pandas as pd
df = pd.DataFrame({'a': [1.5, 2.5], 'b': [0.25, 2.75], 'c': [1.25, 0.75]})

print "The data frame"
print df
print "The mean value"
print df.mean()
print "The value after subraction of mean"
print df -df.mean()
  

  Output:  

  The data frame

    a     b     c
0  1.5  0.25  1.25
1  2.5  2.75  0.75

The mean value

a    2.0
b    1.5
c    1.0
dtype: float64

The value after subraction of mean

    a     b     c
0 -0.5 -1.25  0.25
1  0.5  1.25 -0.25
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46248208)
 Pandas DataFrames have built in operations to get column and row means. The following code may help you: 

  import pandas and numpy
import pandas as pd
import numpy as np

# Define a DataFrame
df = pd.DataFrame([
np.arange(1,5), 
np.arange(6,10),
np.arange(11,15)
])

# Get column means by adding the '.mean' argument
# to the name of your pandas Data Frame
# and specifying the axis

column_means = df.mean(axis = 0)

'''
print(column_means)

0    6.0
1    7.0
2    8.0
3    9.0
dtype: float64
'''   

# Get row means by adding the '.mean' argument
# to the name of your pandas Data Frame
# and specifying the axis

row_means = df.mean(axis = 1)
'''
print(row_means)

0     2.5
1     7.5
2    12.5
dtype: float64
'''
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36483919)
 You can first count http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mean.html by rows, then comparing with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.ge.html and where http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mask.html add  1 : 

  print df
   a  b  c
0  0  1  2
1  0  1  2
2  1  1  2
3  1  0  1
4  1  1  2
5  0  0  1

mean_value = df.mean(axis=1)
print mean_value
0    1.000000
1    1.000000
2    1.333333
3    0.666667
4    1.333333
5    0.333333

mask = df.ge(mean_value, axis=0)
print mask
       a      b     c
0  False   True  True
1  False   True  True
2  False  False  True
3   True  False  True
4  False  False  True
5  False  False  True
print df.mask(mask, 1)
   a  b  c
0  0  1  1
1  0  1  1
2  1  1  1
3  1  0  1
4  1  1  1
5  0  0  1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50632150)
 You can just use  apply  in this way: 

  df = df.apply(lambda x: x - df.mean(axis = 1))
  

 Output: 

        A     B     C     D     E
0   1.8  25.8 -17.2  -0.2 -10.2
1   4.6   6.6 -33.4  30.6  -8.4
2  -2.0 -32.0  41.0  34.0 -41.0
3  19.2 -39.8  30.2  28.2 -37.8
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49083007)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.xs.html for select by second level of  MultiIndex , subtract by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sub.html and get  mean : 

  s = df.xs('high', axis=1, level=1).sub(df.xs('low', axis=1, level=1)).mean()
print (s)
BTC    2.5
ETH    2.5
dtype: float64
  

 If want one row  DataFrame  add http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.to_frame.html and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.T.html: 

  df = s.to_frame().T
print (df)
   BTC  ETH
0  2.5  2.5
  

 or http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.aggregate.html: 

  df = df.xs('high', axis=1, level=1).sub(df.xs('low', axis=1, level=1)).agg(['mean'])
print (df)
      BTC  ETH
mean  2.5  2.5
  

  Details : 

  print (df.xs('high', axis=1, level=1))
   BTC  ETH
1    3    4
2    4    4

print (df.xs('high', axis=1, level=1).sub(df.xs('low', axis=1, level=1)))
   BTC  ETH
1    2    2
2    3    3
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26110278)
 Additionally to @ajcr's excellent answer, you might want to consider rearranging how you store your data. 

 The way you're doing it at the moment, with different samples in different columns, is the way it would be represented if you were using a spreadsheet, but this might not be the most helpful way to represent your data. 

 Normally, each column represents a unique piece of information about  a single real-world entity . The typical example of this kind of data is a person: 

  id  name  hair_colour  Age
1   Bob   Brown        25
  

 Really, your different samples are  different real-world entities . 

 I would therefore suggest having a two-level index to describe each single piece of information. This makes manipulating your data in the way you want far more convenient. 

  

  >>> df = pd.DataFrame([['Sn',1,2,3],['Pb',2,4,6]],
                      columns=['element', 'A', 'B', 'C']).set_index('element')
>>> df.columns.name = 'sample'
>>> df # This is how your DataFrame looks at the moment
sample   A  B  C
element         
Sn       1  2  3
Pb       2  4  6
>>> # Now make those columns into a second level of index
>>> df = df.stack()
>>> df
element  sample
Sn       A         1
         B         2
         C         3
Pb       A         2
         B         4
         C         6
  

 We now have all the delicious functionality of  groupby  at our disposal: 

  >>> demean = lambda x: x - x.mean()
>>> df.groupby(level='element').transform(demean)
element  sample
Sn       A        -1
         B         0
         C         1
Pb       A        -2
         B         0
         C         2
  

 When you view your data in this way, you'll find that many, many use cases which used to be multi-column  DataFrames  are in fact MultiIndexed  Series , and you have much more power over how the data is represented and transformed. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47428843)
 You can convert to nested lists first and then to  array  and then calculate the https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.mean.html: 

  a = np.array(df_ex.tolist())
print (a)
[[1 2 3 4 5 6 7 8]
 [2 3 4 5 6 7 8 1]]

# All values
print (a.mean())
4.5

# Specifying axis
print (a.mean(axis=1))
[ 4.5  4.5]

print (a.mean(axis=0))
[ 1.5  2.5  3.5  4.5  5.5  6.5  7.5  4.5]
  



