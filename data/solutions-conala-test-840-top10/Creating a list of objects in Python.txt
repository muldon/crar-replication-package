Query: Creating a list of objects in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3182241)
 Storing a list of object instances is very simple 

  class MyClass(object):
    def __init__(self, number):
        self.number = number

my_objects = []

for i in range(100):
    my_objects.append(MyClass(i))

# later

for obj in my_objects:
    print obj.number
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3182194)
 The Python Tutorial discusses http://docs.python.org/tutorial/introduction.html#lists. 

 Storing a list of classes is no different than storing any other objects. 

  def MyClass(object):
    pass

my_types = [str, int, float, MyClass]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3182994)
 In Python, the name of the class refers to the class instance.   

  class A: pass
class B: pass
class C: pass

lst = [A, B, C]

# instantiate second class
b_instance = lst[1]()
print b_instance
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49146953)
 I think this simply demonstrates what you are trying to achieve: 

  # coding: utf-8

class Class():
    count = 0
    names = []

    def __init__(self,name):
        self.number = Class.count
        self.name = name
        Class.count += 1
        Class.names.append(name)

l=[]
l.append(Class("uno"))
l.append(Class("duo"))
print l
print l[0].number, l[0].name
print l[1].number, l[1].name
print Class.count, Class.names
  

 Run the code above and you get:- 

  [<__main__.Class instance at 0x6311b2c>, 
<__main__.Class instance at 0x63117ec>]
0 uno
1 duo
2 ['uno', 'duo']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10126809)
 If you have objects with the names  object_1 ,  object_2  etc.  and want to perform common operations on all these objects, this is a clear sign that you should actually be using a list  objects , and use loops to perform the common operations. 

  props = <some list here>
objects = [MyClass(property=foo, property2=prop) for prop in props]
for obj in objects:
    obj.do_stuff(variable=foobar)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5731941)
 Python doesn't do deep copying, unless you explicitly ask it to. So the result will be a new, mutable list, containing references to the exact same objects as those you put in the tuple. 

 Note that the objects in the tuple themselves were always mutable. It's only the tuple of strings that's immutable, i.e. you cannot add/remove objects to the tuple, but you can always access and change objects  inside  a tuple. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/348215)
 You demonstrate a fundamental misunderstanding. 

 You never created an instance of SimpleClass at all, because you didn't call it. 

  for count in xrange(4):
    x = SimpleClass()
    x.attr = count
    simplelist.append(x)
  

 Or, if you let the class take parameters, instead, you can use a list comprehension. 

  simplelist = [SimpleClass(count) for count in xrange(4)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15312133)
 A generator would do that for you in a jiffy: 

  def split_on_members(seq, s):
    s = set(s)
    chunk = []
    for i in seq:
        if i in s and chunk:
            yield chunk
            chunk = []
        chunk.append(i)
    if chunk:
        yield chunk
  

  

  >>> list(split_on_members(l, s))
[['x'], [1, 2, 3], ['a', 5, 6], [1, 7]]
  

 You could just loop over the generator without creating a full list of course: 

  >>> for group in split_on_members(l, s):
...     print group
... 
['x']
[1, 2, 3]
['a', 5, 6]
[1, 7]
  



