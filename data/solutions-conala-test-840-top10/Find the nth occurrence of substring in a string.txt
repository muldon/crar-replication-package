Query: Find the nth occurrence of substring in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13094326)
 This will find the second occurrence of substring in string. 

  def find_2nd(string, substring):
   return string.find(substring, string.find(substring) + 1)
  

 Edit: I haven't thought much about the performance, but a quick recursion can help with finding the nth occurrence: 

  def find_nth(string, substring, n):
   if (n == 1):
       return string.find(substring)
   else:
       return string.find(substring, find_nth(string, substring, n - 1) + 1)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35092436)
 You can use a while loop with  str.find  to find the nth occurrence if it exists and use that position to create the new string: 

  def nth_repl(s, sub, repl, nth):
    find = s.find(sub)
    # if find is not p1 we have found at least one match for the substring
    i = find != -1
    # loop util we find the nth or we find no match
    while find != -1 and i != nth:
        # find + 1 means we start at the last match start index + 1
        find = s.find(sub, find + 1)
        i += 1
    # if i  is equal to nth we found nth matches so replace
    if i == nth:
        return s[:find]+repl+s[find + len(sub):]
    return s
  

 Example: 

  In [14]: s = "foobarfoofoobarbar"

In [15]: nth_repl(s, "bar","replaced",3)
Out[15]: 'foobarfoofoobarreplaced'

In [16]: nth_repl(s, "foo","replaced",3)
Out[16]: 'foobarfooreplacedbarbar'

In [17]: nth_repl(s, "foo","replaced",5)
Out[17]: 'foobarfoofoobarbar'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1884216)
 Understanding that regex is not always the best solution, I'd probably use one here: 

  >>> import re
>>> s = "ababdfegtduab"
>>> [m.start() for m in re.finditer(r"ab",s)]
[0, 2, 11]
>>> [m.start() for m in re.finditer(r"ab",s)][2] #index 2 is third occurrence 
11
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46705963)
 The code you got from the previous question is a nice starting point, and only a minimal adaptation is required to have it change every nth occurence: 

  def nth_repl_all(s, sub, repl, nth):
    find = s.find(sub)
    # loop util we find no match
    i = 1
    while find != -1:
        # if i  is equal to nth we found nth matches so replace
        if i == nth:
            s = s[:find]+repl+s[find + len(sub):]
            i = 0
        # find + len(sub) + 1 means we start after the last match
        find = s.find(sub, find + len(sub) + 1)
        i += 1
    return s
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41626399)
 This will give you an array of the starting indices for matches to  yourstring : 

  import re
indices = [s.start() for s in re.finditer(':', yourstring)]
  

 Then your nth entry would be: 

  n = 2
nth_entry = indices[n-1]
  

 Of course you have to be careful with the index bounds. You can get the number of instances of  yourstring  like this: 

  num_instances = len(indices)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1884065)
 I'd probably do something like this, using the find function that takes an index parameter: 

  def find_nth(s, x, n):
    i = -1
    for _ in range(n):
        i = s.find(x, i + len(x))
        if i == -1:
            break
    return i

print find_nth('bananabanana', 'an', 3)
  

 . You could do it using recursion instead: 

  def find_nth(s, x, n, i = 0):
    i = s.find(x, i)
    if n == 1 or i == -1:
        return i 
    else:
        return find_nth(s, x, n - 1, i + len(x))

print find_nth('bananabanana', 'an', 3)
  

 It's a functional way to solve it, but I don't know if that makes it more Pythonic. 



