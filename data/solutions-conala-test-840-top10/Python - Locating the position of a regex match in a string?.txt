Query: Python - Locating the position of a regex match in a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2674416)
 http://docs.python.org/library/re.html#match-objects to help you with this: 

  >>> m = re.search("is", String)
>>> m.span()
(2, 4)
>>> m.start()
2
>>> m.end()
4
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2674405)
 You could use  .find("is") , it would return position of "is" in the string 

 or use . 

  >>> re.search("is", String).start()
2
  

 Actually its match "is" from "Th<b>is</b>" 

 If you need to match per word, you should use  \b  before and after "is",  \b  is the word boundary. 

  >>> re.search(r"\bis\b", String).start()
5
>>>
  

 for more info about python regular expressions, http://docs.python.org/library/re.html here 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46611686)
 Grab all matches, then find the longest one: 

  import re
s = "quality"
matches = re.findall(r"[aeiou]+", s) # Finds all chunks of vowel letters
print(max(matches, key=len))         # Gets the longest item in the list
# => ua
  

 See the https://ideone.com/yiw5LZ. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16360404)
 I don't think this question has been completely answered yet because all of the answers only give single match examples.  The OP's question demonstrates the nuances of having 2 matches as well as a substring match which should not be reported because it is not a word/token. 

 To match multiple occurrences, one might do something like this: 

  iter = re.finditer(r"\bis\b", String)
indices = [m.start(0) for m in iter]
  

 This would return a list of the two indices for the original string. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17809251)
 To check whether the string contains only digits you can use : 

  >>> bool(re.search(r'^[0-9]+$', '4444'))
True
>>> '4444'.isdigit()    #Doesn't work for floats
True
# This will work for floats as well
>>> bool(re.search(r'^[0-9]*(\.[0-9]+)?$', '4444.123'))
True
>>> bool(re.search(r'^[0-9]*(\.[0-9]+)?$', '.123'))
True
  

 For percentage you can use this  regex  

  >>> bool(re.search(r'^[0-9]+%$', '23%'))
True
#To handle floats as well use this:
>>> bool(re.search(r'^[0-9]*(\.[0-9]+)?%$', '23.15%'))
True
>>> bool(re.search(r'^[0-9]*(\.[0-9]+)?%$', '.150%'))
True
  

  

  >>> bool(re.search(r'^[a-z]$', 'a',re.I))
True
>>> bool(re.search(r'^[a-z]$', 'B',re.I))
True
  

 Here  ^  and  $  are http://docs.python.org/2/library/re.html#regular-expression-syntax: 

  ^  matches the start of the string and  $  matches the end of the string. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36429798)
  enumerate(text)  is an iterator over characters of  text . Since you want to find the line number, you'll have to iterate over lines. For example, you could split  text  into individual lines using  str.split('\n') . 

  >>> [i for i, x in enumerate(text.split('\n')) if x and re.search(pattern, x)]
[4]
  

 Considering that you only need to find the first matching line, it's possible to use https://docs.python.org/3/library/functions.html#next and a generator expression like this: 

  >>> next(i for i, x in enumerate(text.split('\n')) if x and re.search(pattern, x))
4
  

 

 To get the rest of the text you could concatenate the "remainder" of the iterator: 

  >>> it = enumerate(text.split('\n'))
>>> next(i for i, x in it if x and re.search(pattern, x))
4
>>> '\n'.join(x for _, x in it)
'\n> The prior email text\n'
  

 or alter the regular expression to match the whole line: 

  >>> match = re.search(r'On +([A-Z]+[a-z]{2}), +([A-Z]+[a-z]{2}) +([1-31]).*?\n', text)
>>> text[match.end():] # Don't forget to check if match is None
'\n> The prior email text\n'
  

 

 You'd avoid using regex, especially if all you need to find is the position of the  >  character. 

  >>> text[text.index('>'):]
'> The prior email text\n'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31569912)
 You can pass in a regular expression instead of a string according to the documentation here: http://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-keyword-arguments 

 So I would try this: 

  import re

soup = BeautifulSoup(open(extracted_html_file))
soup.find_all('div', style = re.compile('left:54px'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6127645)
 As other answers have said, you are looking for  re.MULTILINE , but even with that your regex won't work. 

  $  matches the position  before  the line break, and  ^  matches the start of a line, so  $^  in the middle of a regex will never match.  For example: 

  >>> re.search("^(.*)$^.*$", multiline_string, re.M)    # won't match
>>> re.search("^(.*)$\n^.*$", multiline_string, re.M)  # will match
<_sre.SRE_Match object at 0xb7f3e5e0>
  

 You need something to match the end of line characters between the  $  and the  ^ . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19331417)
  

  >>> import re
>>> re.findall(r'<=\s)m=\s)|^m|m$', "I'm a boy")
[]
>>> re.findall(r'<=\s)m=\s)|^m|m$', "I m a boy")
['m']
>>> re.findall(r'<=\s)m=\s)|^m|m$', "mama")
['m']
>>> re.findall(r'<=\s)m=\s)|^m|m$', "pm")
['m']
  

 
    =...)  
  
   Matches if  ...  matches next, but doesn’t consume any of the
  string. This is called a lookahead assertion. For example, Isaac
   =Asimov)  will match  'Isaac '  only if it’s followed by  'Asimov' . 
  
    <=...)  
  
   Matches if the current position in the string is preceded by a match
  for  ...  that ends at the current position. This is called a positive
  lookbehind assertion.  <=abc)def  will find a match in  abcdef , ... 
  
   from http://docs.python.org/2/library/re.html#regular-expression-syntax 
 

 BTW, using raw string ( r'this is raw string' ), you don't need to escape  \ . 

  >>> r'\s' == '\\s'
True
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18987446)
 
   . 
 

 . It prints an empty string which you just of course you didn't notice, as it's not visible. Try using this code instead: 

  l = re.findall(pat, sub)
print l
  

 this will print: 

  ['', 'ea', '', '']
  

<hr />

  Why this behaviour?  

 This is because when you use  *  quantifier -  [aeiou]* , this regex pattern also matches an empty string before every non-matching string and also the empty string at the end. So, for your string  dear , it matches like this: 

  *d*ea*r*  // * where the pattern matches.
  

 All the  *'s  denote the position of your matches.  

 
  d  doesn't match the pattern. So match is the empty string before it. 
  ea  matches the pattern. So next match is  ea . 
  r  doesn't match the pattern. So the match is empty string before  r . 
 The last empty string is the empty string after  r . 
 



