Query: Find dictionary items whose key matches a substring
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10484399)
 An  iteritems  and a generator expression will do this: 

  d={'New York':'some values',
    'Port Authority of New York':'some more values',
    'New York City':'lots more values'}

print list(v for k,v in d.iteritems() if 'new york' in k.lower())    
  

 Output: 

  ['lots more values', 'some more values', 'some values']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25423632)
 As the  keys  are string, you can use the  find  method to get the  substring  and  delete  them by keys. 

 If  d  is a dictionary, 

  d = {'hello': 1, 'he': 2, 'llo': 3, 'world': 4, 'wor': 5, 'ld': 6, 'python': 2.7}

for key in d.keys():
    for sub in d.keys():
        if key.find(sub) >= 0:
            if key == sub:
                continue
            else:
                del(d[sub])
  

  d  will be then, 

  {'python': 2.7, 'world': 4, 'hello': 1}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40495741)
 You may write  list comprehension  expression as: 

  >>> my_dict = {"color": ("red", "blue", "green"), "someothercolor": ("orange", "blue", "white")}

>>> my_color = "blue"
>>> [k for k, v in my_dict.items() if my_color in v]
['color', 'someothercolor']
  

 Note: Do not use  dict  as variable because https://docs.python.org/2/library/stdtypes.html#dict is built-in data type in Python 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28395164)
  def filter_dictionary(filter_data):
    dictionary_to_filter = {'car 1': 100, 'car 2': 200, 'car 3': 300, 'bus 1': 1000, 'bus 2': 2000, 'bus 3': 3000}
    spl = filter_data.split()
    dictionary_filtered = {k: v for (k, v) in dictionary_to_filter.items() if all(a in k for a in spl)}
    return dictionary_filtered

print(filter_dictionary('ca 1') )
{'car 1': 100}
  

 You need to check that  all  the substrings are in the dict key. 

 You are checking if either  1    or    ca  are in each key not both so you get  'bus 1'  because  "1"  is obviously a substring. 

  if all(a in k for a in spl)  checks that every substring from our split input string is equal to or a  substring of the key string. 

 I also changed your code to use lowercase and separate words using underscores which makes you code more readable and in line with the https://www.python.org/dev/peps/pep-0008/ style guide. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10485099)
 You could generate all substrings ahead of time, and map them to their respective keys. 

  #generates all substrings of s.
def genSubstrings(s):
    #yield all substrings that contain the first character of the string
    for i in range(1, len(s)+1):
        yield s[:i]
    #yield all substrings that don't contain the first character
    if len(s) > 1:
        for j in genSubstrings(s[1:]):
            yield j

keys = ["New York", "Port Authority of New York", "New York City"]
substrings = {}
for key in keys:
    for substring in genSubstrings(key):
        if substring not in substrings:
            substrings[substring] = []
        substrings[substring].append(key)
  

 Then you can query  substrings  to get the keys that contain that substring: 

  >>>substrings["New York"]
['New York', 'Port Authority of New York', 'New York City']
>>> substrings["of New York"]
['Port Authority of New York']
  

 Pros: 

 
 getting keys by substring is as fast as accessing a dictionary. 
 

 Cons: 

 
 Generating  substrings  incurs a one-time cost at the beginning of your program, taking time proportional to the number of keys in  programs . 
  substrings  will grow approximately linearly with the number of keys in  programs , increasing the memory usage of your script. 
  genSubstrings  has O(n^2) performance in relation to the size of your key. For example, "Port Authority of New York" generates 351 substrings. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23736314)
 This is usually called a relaxed dictionary and it can be implemented efficiently using a suffix tree. 

 The memory used by this approach is linear over the keys, which is optimal, and the time of search is linear over the substring length you are searching, which is also optimal. 

 I have found this library in python that implements this. 

 https://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/ 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27569649)
 You could sort the items and check if the first two elements are â‰¤2: 

  >>> for key, item in my_d.items():
...   i=sorted(item)
...   if all(map(lambda x:x<=2,i[:2])):
...     print key,
...
a c b d
  

 or, since you only have 2 elements to check: 

  >>> for key, item in my_d.items():
...   i=sorted(item)
...   if i[0]<=i[1]<=2:
...     print key,
...
a c b d
  



