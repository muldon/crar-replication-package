Query: Removing character in list of strings
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26927899)
 A faster way is to join the list, replace 8 and split the new string: 

  mylist = [("aaaa8"),("bb8"),("ccc8"),("dddddd8")]
mylist = ' '.join(mylist).replace('8','').split()
print mylist
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8282631)
 Beside using loop and for comprehension, you could also use map 

  lst = [("aaaa8"),("bb8"),("ccc8"),("dddddd8")]
mylst = map(lambda each:each.strip("8"), lst)
print mylst
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35348145)
 at index 9 in the list the element is a string  'LeftWheel_Speed,102\r' , [-1] will display the  '\r'  character, and thus [-2] will display the  2 .  A string in python is list type, so you are looking at the second to last character. you need to split the string for each data element like: 

  data[9].split(',')[1]
  

 which first splits the string into 2 strings at the comma and print  102 , but beware it still contains the  \r  character which you might want to remove: 

  data[9].split(',')[1][:-1]
  

  [:-1]  will slice off the last character of the string (which is a list so you can do list slicing) 

 EDIT: as commented below,  '102\r'.strip()  would be a more complete answer to removing special characters as it would remove them all 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27153761)
 You dont need  regex  , use  str.strip()  and  set  ( if you have not duplicated elements in your list (or you dont want duplicates) because  set  remove duplicates  ), first you  strip  all the element of  content  list (removing whitspaces at leading and trailing of the string ) and then use a logic and  &  that works between tow  set  between new striped list and first list to chose elements that are in both (elements that  strip()  function doesn't change them so those are in both list) :  

  >>> new=[i.strip() for i in content]
>>> set(content) & set(new) 
set(['*', 'in', 'ROM', 'HER', 'Solving', 'it', 'CALL', 'ADVENTURE', 'easy', 'DR.', 'steps', 'THE', 'FROM:'])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52764459)
 You could do this using a https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions combined with the built-in function https://docs.python.org/3/library/functions.html#any: 

  list1 = ['something', "somet'hing", 'somet"hing', 'some;thing', '']
list2 = [';', '"', "'"]

result = [s for s in list1 if s and not any(c in s for c in list2)]
print(result)
  

  Output  

  ['something']
  

 The list comprehension is equivalent to: 

  result = []
for s in list1:
    if s and not any(c in s for c in list2):
        result.append(s)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11833111)
 Is this what you mean: 

  >>> sites=['nosubdomain.net', 'ohcanada.ca', 'www.hattrick.com', 'www.google.com', 'www.wampum.net', 'www.newcom.com']
>>> print [x.split('.')[-2] for x in sites]
['nosubdomain', 'ohcanada', 'hattrick', 'google', 'wampum', 'newcom']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22131941)
 Python strings are immutable, but they do have methods that return new strings 

  'for example'.replace('for', 'an')
  

 returns  

  'an example'
  

 You can remove a substring by replacing it with an empty string: 

  'for example'.replace('for ', '')
  

 returns 

  'example'
  

 To emphasize how methods work, they are functions that are builtin to string objects. They are also available as classmethods: 

  str.replace('for example', 'for ', '')
  

 returns 

  'example'
  

 So if you have a list of strings: 

  list_of_strings = ['for example', 'another example']
  

 you can replace substrings in them with a  for  loop: 

  for my_string in list_of_strings:
    print(my_string.replace('example', 'instance'))
  

 prints out: 

  for instance
another instance
  

 Since strings are immutable, your list actually doesn't change (print it and see) but you can create a new list with a list comprehension: 

  new_list = [my_s.replace('example', 'instance') for my_s in list_of_strings]
print(new_list)
  

 prints: 

  ['for instance', 'another instance']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32766710)
 Not the most efficient, but a starting point: 

  >>> matrix = [
...     "AAAAAAAA",
...     "AAAXAAAA",
...     "AAAAAAAA"]
>>> x, y = 4, 2

>>> linear = list(itertools.chain.from_iterable(matrix))
>>> del linear[x - 1 + (y - 1) * 8]
>>> ''.join(linear)
'AAAAAAAAAAAAAAAAAAAAAAA'
  



