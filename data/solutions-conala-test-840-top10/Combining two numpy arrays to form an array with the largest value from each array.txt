Query: Combining two numpy arrays to form an array with the largest value from each array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28742482)
>You are looking for the element-wise maximum. 

> Example:  

re> >>> np.maximum([2, 3, 4], [1, 5, 2])
array([2, 5, 4])
  

 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28742526)
  inds =  b > a
a[inds] = b[inds]
  

 This modifies the original array  a  which is what  +=  is doing in your example which may or may not be what you want.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28742488)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum.html to compute the element-wise maximum of the two arrays: 

  >>> np.maximum(a, b)
array([[ 0. ,  0. ,  0.5],
       [ 0.5,  0.5,  0.5],
       [ 0.5,  0.1,  0. ]])
  

 This works with any two arrays, as long as they're the same shape or one can be http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html to the shape of the other. 

 To modify the array  a  in-place, you can redirect the output of  np.maximum  back to  a : 

  np.maximum(a, b, out=a)
  

 There is also http://docs.scipy.org/doc/numpy/reference/generated/numpy.minimum.html for calculating the element-wise minimum of two arrays. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21336552)
 You can use  numpy.vstack() : 

  a = np.array([1,2,3])

np.vstack((a,a,a))
#array([[1, 2, 3],
#       [1, 2, 3],
#       [1, 2, 3]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51523226)
 For  n-dimentional arrays , this function works well. The indecies are returned in a callable form. If you want a list of the indices to be returned, then you need to transpose the array before you make a list.   

 To retrieve the  k  largest, simply pass in  -k . 

  def get_indices_of_k_smallest(arr, k):
    idx = np.argpartition(arr.ravel(), k)
    return tuple(np.array(np.unravel_index(idx, arr.shape))[:, range(min(k, 0), max(k, 0))])
    # if you want it in a list of indices . . . 
    # return np.array(np.unravel_index(idx, arr.shape))[:, range(k)].transpose().tolist()
  

 Example: 

  r = np.random.RandomState(1234)
arr = r.randint(1, 1000, 2 * 4 * 6).reshape(2, 4, 6)

indices = get_indices_of_k_smallest(arr, 4)
indices
# (array([1, 0, 0, 1], dtype=int64),
#  array([3, 2, 0, 1], dtype=int64),
#  array([3, 0, 3, 3], dtype=int64))

arr[indices]
# array([ 4, 31, 54, 77])

%%timeit
get_indices_of_k_smallest(arr, 4)
# 17.1 µs ± 651 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29801088)
 I don't have access to  bottleneck , so in this example I am using  argsort , but you should be able to use it in the same way: 

  #!/usr/bin/env python
import numpy as np
N = 4
a = np.random.random(20).reshape(4, 5)
print(a)

# Convert it into a 1D array
a_1d = a.flatten()

# Find the indices in the 1D array
idx_1d = a_1d.argsort()[-N:]

# convert the idx_1d back into indices arrays for each dimension
x_idx, y_idx = np.unravel_index(idx_1d, a.shape)

# Check that we got the largest values.
for x, y, in zip(x_idx, y_idx):
    print(a[x][y])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13753506)
 The easiest way to do this is: 

 
 Stack the 2d arrays to form a 3d array 
 Compute the median using http://docs.scipy.org/doc/numpy/reference/generated/numpy.median.html passing  axis=0  to compute along the dimension of stacking. 
 

 You're essentially computing an element-wise median. Here's a simple example of what I would do: 

  >>> import numpy
>>> a = numpy.array([[1,2,3],[4,5,6]])
>>> b = numpy.array([[3,4,5],[6,7,8]])
>>> c = numpy.array([[9,10,11],[12,1,2]])
>>> d = numpy.array([a,b,c])
>>> d
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12,  1,  2]]])
>>> d.shape
(3, 2, 3)

>>> numpy.median(d, axis=0)
array([[ 3.,  4.,  5.],
       [ 6.,  5.,  6.]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10104312)
  np.vstack((a,b)).T
  

 returns 

  array([[1, 4],
       [2, 5],
       [3, 6]])
  

  

  np.vstack((a,b)).T.tolist()
  

 returns exactly what you need: 

  [[1, 4], [2, 5], [3, 6]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23815462)
 You can use  itertools.izip_longest() : 

  from itertools import izip_longest

import numpy as np

def mycombine(*args):
    return np.array(list(izip_longest(*args, fillvalue=0))).T
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44495515)
 You can first flatten your array  arr  into a list via  arr.flatten()  from numpy function. Then call the  max(arr.flatten())  to get the largest element. 

 Edit</h3>

 An example is following: Let's assume that you have a multi-dimensional array 'arr' as python nested-list. 

  import numpy as np

table = np.asarray(arr)
max_arr=max(table.flatten())
print(max_arr)
  



