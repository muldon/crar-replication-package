Query: How can I format a float using matplotlib's LaTeX formatter?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17307141)
 You can do something like: 

  ax.set_title( "${0} \\times 10^{{{1}}}$".format('3.5','+20'))
  

  

  ax.set_title( "$%s \\times 10^{%s}$" % ('3.5','+20'))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17307525)
  

  print r'$%s \times 10^{%s}$' % tuple('3.5e+20'.split('e+'))
  

 with new format: 

  print r'${} \times 10^{{{}}}$'.format(*'3.5e+20'.split('e+'))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54561413)
 Install the https://github.com/AndrewChap/num2tex package: 

  pip install num2tex
  

 and format your title as: 

  ax.set_title('${}$'.format(num2tex(3.5e20)))
  

 or use the  _repr_latex_()  method: 

  ax.set_title(num2tex(3.5e20)._repr_latex_())
  

 which will give you the same thing. 

  num2tex  inherits from  str  so the  format  function can be used as you would use it for a string: 

  ax.set_title('${:.2e}$'.format(num2tex(3.5e20)))
  

 Disclaimer: I (very recently) created  num2tex .  It works well for my workflow and I am now trying to get feedback from others who might be interested in using it. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40257428)
 For those who are looking for the quick one-liner: 

  plt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()]) 
  

 Or if you are using  Latex  as the axis text formatter, you have to add one backslash '\' 

  plt.gca().set_yticklabels(['{:.0f}\%'.format(x*100) for x in plt.gca().get_yticks()]) 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43253697)
 As said in the comments, this is rather an issue of ticklabels not obeying the font setting when used with latex.  

 This issue seems to only occur when using a  ScalarFormatter  (which is the default formatter for axes). I've posted https://github.com/matplotlib/matplotlib/issues/8436 about this on GitHub. 

 A workaround may be to use a different Formatter. E.g a  StrMethodFormatter : 

  import matplotlib.pyplot as plt 
import matplotlib.ticker

plt.rc( 'text', usetex=True ) 
plt.rc('font',family = 'sans-serif',  size=20)

fig , ax = plt.subplots(figsize=(5,3))

ax.set_xlabel( r'\textit{x} in a.u.' )
ax.set_ylabel( r'\textit{y} in a.u.' )

fmt = matplotlib.ticker.StrMethodFormatter("{x}")
ax.xaxis.set_major_formatter(fmt)
ax.yaxis.set_major_formatter(fmt)

plt.tight_layout()
plt.show()
  

 https://i.stack.imgur.com/9jGV6.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43216810)
 It seems that  plt.ticklabel_format  does not work correctly. However if you define the ScalarFormatter yourself  and  set the limits for scientific notation to the formatter, you can get the offset automatically in the mathtext format like so: 

  import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker

x = np.linspace(3,5)
y = np.sin(np.linspace(0,6*np.pi))*1e5

plt.plot(x,y)

mf = matplotlib.ticker.ScalarFormatter(useMathText=True)
mf.set_powerlimits((-2,2))
plt.gca().yaxis.set_major_formatter(mf)

plt.show()
  

 https://i.stack.imgur.com/o3KID.png 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25119872)
 You can use http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.FuncFormatter to choose the format of your ticks with a function as shown in the example code below. Effectively all the function is doing is converting the input (a float) into exponential notation and then replacing the 'e' with 'x10^' so you get the format that you want. 

  import matplotlib.pyplot as plt
import matplotlib.ticker as tick
import numpy as np

x = np.linspace(0, 10, 1000)
y = 0.000001*np.sin(10*x)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(x, y)

def y_fmt(x, y):
    return '{:2.2e}'.format(x).replace('e', 'x10^')

ax.yaxis.set_major_formatter(tick.FuncFormatter(y_fmt))

plt.show()
  

   

 If you're willing to use exponential notation (i.e. 5.0e-6.0) however then there is a much tidier solution where you use http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.FormatStrFormatter to choose a format string as shown below. The string format is given by the standard Python string formatting rules. 

  ...

y_fmt = tick.FormatStrFormatter('%2.2e')
ax.yaxis.set_major_formatter(y_fmt)

...
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35658924)
 It is normally best to first convert your data to  datetime  format. It can then be formatted using a  DateFormatter  as follows: 

  import matplotlib
import matplotlib.pyplot as plt
from datetime import datetime

x_orig = ['2015-12-29 15:01:25', '2015-12-29 15:02:08', '2015-12-29 15:02:13', '2015-12-29 15:04:18']
x = [datetime.strptime(d, '%Y-%m-%d %H:%M:%S') for d in x_orig]
y = ['7.1', '7.4', '9.4', '10.2']

xs = matplotlib.dates.date2num(x)
hfmt = matplotlib.dates.DateFormatter('%Y-%m-%d\n%H:%M:%S')

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.patch.set_facecolor('lightgrey')
ax.xaxis.set_major_formatter(hfmt)
ax.set_title('Titel des Reports')
ax.set_xlabel('datum')
ax.set_ylabel('2MTemperatur')
plt.setp(ax.get_xticklabels(), size=8)
ax.plot(xs, y, linewidth=2)
ax.scatter(xs, y)
plt.grid()
plt.show()
  

 This would give you the following: 

 https://i.stack.imgur.com/WXkUx.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52340666)
 You could subclass  LogFormatterExponent  to format the ticks with  "10\textsuperscript{x}"  where  x  is the exponent. This would not use math mode tex, i.e. no  $  signs around the text, and therefore would use the textfont specified in the preamble (in this case the font without serifs). 

  import matplotlib as mpl
from matplotlib.ticker import LogFormatterExponent

mpl.use('pgf')
pgf_with_latex = {
        "pgf.texsystem": "pdflatex",
        "font.family": "sans-serif",
        "text.usetex": False,
        "pgf.preamble": [
            r"\usepackage[utf8x]{inputenc}",
            r"\usepackage{tgheros}",  # TeX Gyre Heros sans serif
            r"\usepackage[T1]{fontenc}"
            ]
        }
mpl.rcParams.update(pgf_with_latex)
import matplotlib.pyplot as plt

class LogFormatterTexTextMode(LogFormatterExponent):
    def __call__(self, x, pos=None):
        x = LogFormatterExponent.__call__(self, x,pos)
        s = r"10\textsuperscript{{{}}}".format(x)
        return s

fig = plt.figure(figsize=[3, 2])
ax = fig.add_subplot(111)
ax.set_yscale("log")
ax.yaxis.set_major_formatter(LogFormatterTexTextMode())
ax.minorticks_off()
ax.set_xlabel("sans-serif font label")
ax.set_ylabel("text mode tex label")
plt.gca().set_ylim([0.01, 20000])
plt.gcf().tight_layout()


plt.savefig('{}.pdf'.format("test"))
  

 https://i.stack.imgur.com/fIGCO.png 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35418775)
 You can do this with a  FuncFormatter  from the  matplotlib.ticker  module. You need a condition on whether the tick's value is greater than or less than 1. So, if  log10(tick value)  is  >0 , then add the  +  sign in the label string, if not, then it will get its minus sign automatically. 

  import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np

# sample data
x = y = np.logspace(-3,3)

# create a figure
fig,ax = plt.subplots(1)

# plot sample data
ax.loglog(x,y)

# this is the function the FuncFormatter will use
def mylogfmt(x,pos):
    logx = np.log10(x) # to get the exponent
    if logx < 0:
        # negative sign is added automatically  
        return u"$10^{{{:.0f}}}$".format(logx)
    else:
        # we need to explicitly add the positive sign
        return u"$10^{{+{:.0f}}}$".format(logx)

# Define the formatter
formatter = ticker.FuncFormatter(mylogfmt)

# Set the major_formatter on x and/or y axes here
ax.xaxis.set_major_formatter(formatter)
ax.yaxis.set_major_formatter(formatter)

plt.show()
  

 https://i.stack.imgur.com/urYp1.png 

 Some explanation of the format string: 

  "$10^{{+{:.0f}}}$".format(logx)
  

 the double braces  {{  and  }}  are passed to  LaTeX , to signify everything within them should be raised as an exponent. We need double braces, because the single braces are used by python to contain the format string, in this case  {:.0f} . For more explanation of format specifications, see the https://docs.python.org/2/library/string.html#format-specification-mini-language, but the TL;DR for your case is we are formatting a float with a precision of 0 decimal places (i.e. printing it essentially as an integer); the exponent is a float in this case because  np.log10  returns a float. (one could alternatively convert the output of  np.log10  to an int, and then format the string as an int - just a matter of your preference which you prefer). 



