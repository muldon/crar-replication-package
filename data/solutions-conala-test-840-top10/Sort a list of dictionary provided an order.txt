Query: Sort a list of dictionary provided an order
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20531893)
 In Python (and most languages) http://en.wikipedia.org/wiki/Associative_array, so you can't "sort" a dictionary. 

 You can retrieve and sort the keys and iterate through those: 

  for key in sorted(product_list.keys()):
    item = product_list[key]
    item.doSomething()
  

 Or you can use a http://docs.python.org/2/library/collections.html#collections.OrderedDict, like so: 

   from collections import OrderedDict
  

 And then build the dictionary in the required order (which is up to you to determine) but below we sort using the keys: 

   product_list = OrderDict(sorted(product_list.items(), key=lambda k: k[0]))
  

 For reference,  Dict.items()  returns a list of tuples in the form: 

  [(key1, value1), (key2, value2) , ... , (keyN, valueN)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21773963)
 You could just retrieve the values in order of the keys provided by the list and make a new list out of the key-value pairs. 

 Example: 

  d = a      # dictionary containing key-value pairs that are to be ordered
l = a_list # list of keys that represent the order for the dictionary
# retrieve the values in order and build a list of ordered key-value pairs
ordered_dict_items = [(k,d[k]) for k in l]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4253834)
 dictionary.keys() return a list and you can sort list by your own function: 

  >>> a = [(u'we', 'PRP'), (u'saw', 'VBD'), (u'you', 'PRP'), (u'bruh', 'VBP'), (u'.', '.')]
>>> import operator
>>> a.sort(key = operator.itemgetter(1))
>>> a
[(u'.', '.'), (u'we', 'PRP'), (u'you', 'PRP'), (u'saw', 'VBD'), (u'bruh', 'VBP')]*
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31884476)
 Use list comprehension: 

  >>> [FruitValues[i] for i in SortOrder]
[4, 1, 3]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35078315)
 Use index of the  order  list to sort-Just try if every dictionary has one value and you want sorting by that value- 

  sorted(list_of_dct,key=lambda x:order.index(x.values()[0]))
  

 But if you have multiple values for one key then change the index (i.e  [0] ) on which you will sort. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24986004)
 You cannot sort a dictionary, but you can use https://docs.python.org/2/library/collections.html#collections.OrderedDict here: 

  >>> from collections import OrderedDict
>>> from operator import itemgetter
>>> lst = ['marie', 'jacob', 'james']
>>> d = {'james': 32, 'jacob': 43, 'marie': 3}
>>> OrderedDict(zip(lst, itemgetter(*lst)(d)))
OrderedDict([('marie', 3), ('jacob', 43), ('james', 32)])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35078317)
 Make a mapping of 8 to 0, 7 to 1, ..., 11 to 5 using https://docs.python.org/3/library/functions.html#enumerate: 

  >>> order = [8,7,5,9,10,11
>>> list_of_dct = [{'value':11}, {'value':8}, {'value':5},
                   {'value':7}, {'value':10}, {'value':9}
>>> sort_keys = {item: i for i, item in enumerate(order}
>>> sort_keys
{5: 2, 7: 1, 8: 0, 9: 3, 10: 4, 11: 5}
  

 And use it as a sorting key: 

  >>> list_of_dct.sort(key=lambda d: sort_keys.d['value', len(sort_keys
>>> list_of_dct
[{'value': 8}, {'value': 7}, {'value': 5}, {'value': 9},
 {'value': 10}, {'value': 11}
  

 use  sort_keys...  instead of  sort_keys[..  to prevent  KeyError  in case of value is misisng in  order . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20531894)
  from collections impt OrderedDict
new_dict = OrderedDict((k, old_dict[k]) f k in key_list)
  

 Having said that, there's probably a better way to solve your problem than using an OrderedDict 

 If some keys are missing, you'll need to use one of 

  new_dict = OrderedDict((k, old_dict.get(k)) f k in key_list)
  

  

  new_dict = OrderedDict((k, old_dict[k]) f k in key_list if k in old_dict)
  

 depending on how you want to handle the missing keys. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21770290)
 You can't sort the dictionary itself. Dictionary in python does not have an order. 

 
 Trying to sort dictionary will pass keys of the dictionary to the  key  function.  sub_links[x]  =>  sub_links['about-us'] ;  sub_links[x]['order']  fails because  sub_links[x]  returns a  list. 
 

 You can sort the list inside the dictionary:  d['about-us']  

 

 Also the usage of the  sorted  function should be changed: http://docs.python.org/3/library/functions.html#sorted passes each item to the key function, not the index of the item. 

  >>> sorted(d['about-us'], key=lambda x: int(x['order']))
[{'uri': 'about', 'name': 'ABOUT', 'order': u'1'},
 {'uri': 'constitution', 'name': 'CONSTITUTION', 'order': u'2'},
 {'uri': 'executive-committee', 'name': 'EXECUTIVE COMMITTEE', 'order': u'3'},
 {'uri': 'financial-info', 'name': 'FINANCIAL INFO', 'order': u'4'},
 {'uri': 'sponsors-and-affiliations', 'name': 'SPONSORS AND AFFILIATIONS', 'order': u'5'}]
  

 If you need to sort all the dictionary values in place, loop over the values. 

  for value in d.values(): # use `itervalues` In Python 2.x
    value.sort(key=lambda x: int(x['order']))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/50554874)
 Just learned relevant skill from https://www.coursera.org/learn/python-data/lecture/0ou0N/10-tuples. 

 You may use a temporary list to help you to sort the dictionary: 

  #Assume dictionary to be:
d = {'apple': 500.1, 'banana': 1500.2, 'orange': 1.0, 'pineapple': 789.0}

# create a temporary list
tmp = []

# iterate through the dictionary and append each tuple into the temporary list 
for key, value in d.items():
    tmptuple = (value, key)
    tmp.append(tmptuple)

# sort the list in ascending order
tmp = sorted(tmp)

print (tmp)
  

 If you want to sort the list in descending order, simply change the original sorting line to: 

  tmp = sorted(tmp, reverse=True)
  

 Using list comprehension, the one liner would be: 

  #Assuming the dictionary looks like
d = {'apple': 500.1, 'banana': 1500.2, 'orange': 1.0, 'pineapple': 789.0}
#One liner for sorting in ascending order
print (sorted([(v, k) for k, v in d.items()]))
#One liner for sorting in descending order
print (sorted([(v, k) for k, v in d.items()], reverse=True))
  

 Sample Output: 

  #Asending order
[(1.0, 'orange'), (500.1, 'apple'), (789.0, 'pineapple'), (1500.2, 'banana')]
#Descending order
[(1500.2, 'banana'), (789.0, 'pineapple'), (500.1, 'apple'), (1.0, 'orange')]
  



