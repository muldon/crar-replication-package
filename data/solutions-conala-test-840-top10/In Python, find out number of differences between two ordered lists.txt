Query: In Python, find out number of differences between two ordered lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14914635)
 The simplest way to do this is to use http://docs.python.org/3/library/functions.html#sum and a http://www.youtube.com/watch?v=pShL9DCSIUw: 

  def differences(a, b):
    if len(a) != len(b):
        raise ValueError("Lists of different length.")
    return sum(i != j for i, j in zip(a, b))
  

 We loop over the lists together using http://docs.python.org/3/library/functions.html#zip and then compare them. As  True == 1  and  False == 0 , we just sum this to get the number of differences. Another option would be to use the conditional part of the generator expression: 

  sum(1 for i, j in zip(a, b) if i != j)
  

 I can't really say I feel one is more readable than the other, and doubt there will be a performance difference. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1239697)
 if both lists are ordered, you can do: 

  import bisect
m[0][:bisect.bisect(m[0],n[0][-1])]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31320356)
 The following code might help you solve the problem. 

  list1=[1, 4, 10]
list2=[2, 3, 6]

n = len(list2)
sum_min = 0

for x in list1:

    diff=[abs(y-x) for y in list2]
    mindiff=min(int(s) for s in diff)

    sum_min += mindiff  # iterating will keep on adding min of differences 1 + 1 + 4

    print (mindiff)

print(sum_min/n)  # mean minimum difference
  

 I think in order to calculate the mean of minimum differences of the lists you need to divide the total sum of minimum differences by the number of differences in each set (i.e length of  list2 ).
If you want to modify the code, I think you have understood how to do it. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51018703)
 If you just want to find the symmetric differences between two of the OrderedDicts, 

  from collections import OrderedDict

>>> d1 = {'properties': OrderedDict([('KAEK', 'str:12'),
...               ('PROP_TYPE', 'str:4'),
...               ('ORI_TYPE', 'int:1')...

>>> d1 = d1['properties']

>>> d2 = {'properties': OrderedDict([('OBJECTID_1', 'int:9'),
...               ('OBJECTID', 'int:9'),
...               ('FID_PERIVL', 'int:9')...

>>> d2 = d2['properties']
  

 

  >>> from pprint import pprint
>>> pprint(d1)
OrderedDict([('KAEK', 'str:12'),
             ('PROP_TYPE', 'str:4'),
             ('ORI_TYPE', 'int:1')...

>>> pprint(d2)
OrderedDict([('OBJECTID_1', 'int:9'),
             ('OBJECTID', 'int:9'),
             ('FID_PERIVL', 'int:9')...
  

 

  pprint(set.symmetric_difference(set(d1.items()), set(d2.items())))
{('ADDRESS', 'int:4'),
 ('ADDRESS', 'str:254'),
 ('AREA', 'float:19.11'),
 ('DEC_ID', 'int:4'),
 ('DEC_ID', 'str:254'),
 ('DESC_', 'str:254'),
 ('FID_PERIVL', 'int:9'),
 ('KAEK', 'str:12'),
 ('KAEK', 'str:50'),
 ('LEN', 'float:19.11'),
 ('NUM', 'int:4'),
 ('NUM', 'str:9'),
 ('OBJECTID', 'int:9'),
 ('OBJECTID_1', 'int:9'),
 ('ORI_CODE', 'int:4'),
 ('ORI_CODE', 'str:100'),
 ('ORI_TYPE', 'int:1'),
 ('ORI_TYPE', 'int:4'),
 ('PARCEL_COD', 'str:254'),
 ('Shape_Area', 'float:19.11'),
 ('Shape_Le_1', 'float:19.11'),
 ('Shape_Leng', 'float:19.11')}
  

 Then just use the result in whichever way you want ? 

 Further edit OP requested, 

  >>> d3 = set.symmetric_difference(set(d1.items()), set(d2.items()))
>>> pprint(set(('d1', el) if el in d1.items() else ('d2', el) for el in d3))
{('d1', ('ADDRESS', 'str:254')),
 ('d1', ('AREA', 'float:19.11')),
 ('d1', ('DEC_ID', 'str:254')),
 ('d1', ('KAEK', 'str:12')),
 ('d1', ('LEN', 'float:19.11')),
 ('d1', ('NUM', 'str:9')),
 ('d1', ('ORI_CODE', 'str:100')),
 ('d1', ('ORI_TYPE', 'int:1')),
 ('d2', ('ADDRESS', 'int:4')),
 ('d2', ('DEC_ID', 'int:4')),
 ('d2', ('DESC_', 'str:254')),
 ('d2', ('FID_PERIVL', 'int:9')),
 ('d2', ('KAEK', 'str:50')),
 ('d2', ('NUM', 'int:4')),
 ('d2', ('OBJECTID', 'int:9')),
 ('d2', ('OBJECTID_1', 'int:9')),
 ('d2', ('ORI_CODE', 'int:4')),
 ('d2', ('ORI_TYPE', 'int:4')),
 ('d2', ('PARCEL_COD', 'str:254')),
 ('d2', ('Shape_Area', 'float:19.11')),
 ('d2', ('Shape_Le_1', 'float:19.11')),
 ('d2', ('Shape_Leng', 'float:19.11'))}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9323276)
 Whenever you think "http://docs.python.org/library/heapq.html#heapq.nlargest", think http://docs.python.org/library/heapq.html.  

  >>> import heapq
>>> import random
>>> l1 = [random.randrange(100) for _ in range(100)]
>>> l2 = [random.randrange(100) for _ in range(100)]
>>> heapq.nlargest(10, (((a - b), a, b) for a, b in zip(l1, l2)))
[(78, 99, 21), (75, 86, 11), (69, 90, 21), (69, 70, 1), (60, 86, 26), (55, 95, 40), (52, 56, 4), (48, 98, 50), (46, 80, 34), (44, 81, 37)]
  

 This will find the x largest items in O(n log x) time, where n is the total number of items in the list; sorting does it in O(n log n) time. 

 It just occurred to me that the above doesn't actually do what you asked for. You want an index! . I'll also use  abs  here in case you want the absolute value of the difference:  

  >>> heapq.nlargest(10, xrange(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
[91, 3, 14, 27, 46, 67, 59, 39, 65, 36]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16939984)
  from collections import OrderedDict
lis =  [['a','x','y',2], ['b','xx','yy',2], ['c','xxx','yyy',3],['a','yx','yx',2]]
dic = OrderedDict()
for x in lis:
   key = (x[0],x[-1])
   if key not in dic:
      dic[key] = x[1:-1]
   else:
      val =  dic[key]
      dic[key] = [a+b for a,b in zip(val,x[1:-1])]

print [[k[0]] + v + [k[1]] for k,v in dic.items()]
  

  output:            

  [['a', 'xyx', 'yyx', 2], ['b', 'xx', 'yy', 2], ['c', 'xxx', 'yyy', 3]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14914767)
 One-liner solution that also produces an error if the length is not equal: 

  >>> sum(map(lambda x,y: bool(x-y),a,b))
2
  

 Now try the input of different length: 

  >>> sum(map(lambda x,y: bool(x-y),[1,2],[1]))
TypeError
  

 How it works: bool(x,y) returns True if elements are different. Then we map this function on 2 lists and get the list [False, True, False, True, False]. 
If we put into the function map() the lists of different length, we get the TypeError 

 Finally, the function sum() of this boolean list gives 2. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7173431)
 Here's an example using the http://www.scipy.org/Numpy_Example_List#head-37c6c7ffae4e0925823e02735de299a00e413689 in  numpy . 

 e.g. 

  import numpy
numpy_array = numpy.zeros(10**6)
for i in xrange(10**6):
    numpy_array[i] = i
print numpy.any(numpy.diff(a) == 1)
  

 
   True 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9323304)
 Assuming the number of elements in the lists aren't huge, you could just difference all of them, sort, and pick the first  n : 

  print sorted((abs(x-y) for x,y in zip(old, new)), reverse=True)[:n]
  

 This would be  O(k log k)  where  k  is the length of your original lists. 

 If  n  is significantly smaller than  k , the best idea would be to use the http://docs.python.org/library/heapq.html#heapq.nlargest function provided by the  heapq  module: 

  import heapq
print heapq.nlargest(n, (abs(x-y) for x,y in zip(old, new))
  

 This will be  O(k log n)  instead of  O(k log k)  which can be significant for  k >> n . 
Also, if your lists are really big, you'd probably be better off using  itertools.izip  instead of the regular  zip  function. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/23529209)
 Use the index-method of lists as sort criterion: 

  l1 = [3, 2, 1]
l2 = [2, 3, 4]
sorted(set(l1) & set(l2), key = l1.index)
  

  

  [3, 2]
  



