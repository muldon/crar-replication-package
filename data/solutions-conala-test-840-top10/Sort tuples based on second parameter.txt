Query: Sort tuples based on second parameter
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8459243)


 You can use the  key  parameter to  list.sort() : 

<pre class="lang-py prettyprint-override"> my_list.sort(key=lambda x: x[1])
  

 or, slightly faster, 

<pre class="lang-py prettyprint-override"> my_list.sort(key=operator.itemgetter(1))
  

 (As with any module, you'll need to  import operator  to be able to use it.) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9133917)
 Sorting in Python is http://docs.python.org/howto/sorting.html#sort-stability-and-complex-sorts as of Python 2.2. 

 So, you can sort by the  second  value first with the  reverse  flag on: 

  >>> from operator import itemgetter
>>> l.sort(key=itemgetter(1), reverse=True)
>>> l
[('a', 'z'), ('b', 'z'), ('a', 'y'), ('b', 'y'), ('a', 'x'), ('b', 'x')]
  

 Then you can sort by the  first  value: 

  >>> l.sort(key=itemgetter(0))
>>> l
[('a', 'z'), ('a', 'y'), ('a', 'x'), ('b', 'z'), ('b', 'y'), ('b', 'x')]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9135369)
 The http://docs.python.org/howto/sorting.html recommends that you take advantage of http://en.wikipedia.org/wiki/Sorting_algorithm#Stability and do the sort in two passes: 

  >>> l.sort(key=lambda t: t[1], reverse=True)   # SECONDARY KEY: field 1 descending
>>> l.sort(key=lambda t: t[0])                 # PRIMARY KEY:   field 0 ascending
>>> l
[('a', 'z'), ('a', 'y'), ('a', 'x'), ('b', 'z'), ('b', 'y'), ('b', 'x')]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23107820)
 Use the  key  parameter in the https://docs.python.org/2/library/functions.html#sorted function. 

  sorted(result, key = lambda x:x[1], reverse = True)
  

 The  reverse = True  makes sure that the items are sorted in the descending order. The important thing to be noted here is the  key  parameter. 

  key = lambda x:x[1]
  

 We pass a lambda function to the  key  parameter, which accepts one parameter.  sorted  picks each element from  result  and pass that to the  key  function. In our case it is the tuples. The  key  function returns the second item in the tuples. So, the second item in the tuple will be used as the value of the tuple itself, while sorting. It means that when we comapre  [John,  0.32]  and  [Mikey, 1.90] , we will be actually comparing  0.32  and  1.90  only. 

  sorted  doesn't change the actual list, but creates a new sorted list. But, if you want to sort the list itself, then you can use  list.sort  method, like this 

  result.sort(key = lambda x:x[1], reverse = True)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21596288)
 Sort by length: 

  >>> L = [(u'Delhi NCR', 148, 'checked'),
...   (u'New Delhi', 51),
...   (u'Gurgaon', 20),
...   (u'Faridabad', 18),
...   (u'Ghaziabad', 17),
...   (u'Greater Noida', 16),
...   (u'Noida', 11, 'checked'),
...   (u'Sonepat', 7),
...   (u'Palwal', 5),
...   (u'Gautam Buddh Nagar', 2),
...   (u'Rewari', 1)]
>>> print sorted(L, key=len, reverse=True)
[(u'Delhi NCR', 148, 'checked'), (u'Noida', 11, 'checked'), (u'New Delhi', 51), (u'Gurgaon', 20), (u'Faridabad', 18), (u'Ghaziabad', 17), (u'Greater Noida', 16), (u'Sonepat', 7), (u'Palwal', 5), (u'Gautam Buddh Nagar', 2), (u'Rewari', 1)]
  

  

  >>> sorted(L, key=lambda x: x[-1] == 'checked', reverse=True)
[(u'Delhi NCR', 148, 'checked'), (u'Noida', 11, 'checked'), (u'New Delhi', 51), (u'Gurgaon', 20), (u'Faridabad', 18), (u'Ghaziabad', 17), (u'Greater Noida', 16), (u'Sonepat', 7), (u'Palwal', 5), (u'Gautam Buddh Nagar', 2), (u'Rewari', 1)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9134237)
  

  >>> l.sort(key=lambda t: (t[0], -ord(t[1])))
>>> l
[('a', 'z'), ('a', 'y'), ('a', 'x'), ('b', 'z'), ('b', 'y'), ('b', 'x')]
  

 Any time you need to sort on multiple keys you can make your key function a tuple since tuples are compared lexicographically.  If you need to reverse sort on one of the keys just make that element negative.  Obviously you can't just make the string negative so you first need to convert it to an integer with  ord . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22876437)
 You can use the  key  parameter of the  sort  function, to sort the tuples. The function of  key  parameter, is to come up with a value which has to be used to compare two objects. So, in your case, if you want the  sort  to use only the first element in the tuple, you can do something like this 

  self.gridKeys.sort(key=lambda x: x[0])
  

 If you want to use only the second element in the tuple, then 

  self.gridKeys.sort(key=lambda x: x[1])
  

  sort  function will pass each and every element in the list to the lambda function you pass as parameter to  key  and it will use the value it returns, to compare two objects in the list. So, in your case, lets say you have two items in the list like this 

  data = [(1, 3), (1, 2)]
  

 and if you want to sort by the second element, then you would do 

  data.sort(key=lambda x: x[1])
  

 First it passes  (1, 3)  to the lambda function which returns the element at index  1 , which is  3  and that will represent this tuple during the comparison. The same way,  2  will be used for the second tuple. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51691388)
 And if you are using python 3.X, you may apply the  sorted  function on the  mylist.   This is just an addition to the answer that @Sven Marnach has given above. 

  # using *sort method*
mylist.sort(lambda x: x[1]) 

# using *sorted function*
sorted(mylist, key = lambda x: x[1]) 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/222769)
  sorted(my_tuple, key=lambda tup: tup[1])
  

 In other words, when comparing two elements of the tuple you're sorting, sort based on the return value of the function passed as the key parameter. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/5233644)
 Lambda functions are not a Python specific concept, but are a general programming term for anonymous function, i.e. functions without a name. In Python they are commonly used where you need to pass a simple function as a parameter to another function. 

 The  sort  method on lists takes a parameter  key  which is a function that is used to calculate the value the list is sorted on. Imagine you are sorting a list of two element tuples, and you want to sort the list based on the first element. You need to pass a function to  key  which returns the first element.  

  def first_element(x):
    return x[0]
my_list.sort(key=first_element)
  

 or, much more concisely you can do: 

  my_list.sort(key=lambda x: x[0])
  



