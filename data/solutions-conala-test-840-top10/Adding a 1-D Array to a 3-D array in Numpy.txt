Query: Adding a 1-D Array to a 3-D array in Numpy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52379271)
 Use  array.sum(axis=0)  

  a = np.array([[10., 12., 15., 20., 24., 20.],
              [40., 48., 60. ,20., 24., 20.]])

a.sum(axis=0)
  

  

  np.sum(a,axis=0)
  

 Both gives 

  array([50., 60., 75., 40., 48., 40.])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2485724)
 Quick&dirty solution: 

  >>> a = numpy.arange(1,15)
>>> numpy.array([ a[i:i+4] for i in range(len(a)-3) ])
array([[ 1,  2,  3,  4],
       [ 2,  3,  4,  5],
       [ 3,  4,  5,  6],
       [ 4,  5,  6,  7],
       [ 5,  6,  7,  8],
       [ 6,  7,  8,  9],
       [ 7,  8,  9, 10],
       [ 8,  9, 10, 11],
       [ 9, 10, 11, 12],
       [10, 11, 12, 13],
       [11, 12, 13, 14]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54282926)
 It's important to remember with numpy arrays, you can't add elements like you can with lists.  So adding numbers to an array is not really the best thing to do. 

 Far better is to  start  with an array, and replace the elements with new data as it comes in.  For example: 

  import numpy as np
MY_SPECIAL_NUMBER = 100
my_array = np.array[3, 4, 5]
my_new_array = np.ones(100) * MY_SPECIAL_NUMBER
my_new_array[:my_array.size] = my_array
  

  my_new_array  is now what you want. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48732234)
 You can https://docs.scipy.org/doc/numpy-1.13.0/user/basics.indexing.html#index-arrays containing the indices: 

  a[[2,3]] += 7
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7332977)
  append()  creates a new array which can be the old array with the appended element. 

 I think it's more normal to use the proper method for adding an element: 

  a = numpy.append(a, a[0])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32283805)
 You can bring http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html into play after extending the dimensions of the second array with  None  or http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#numpy.newaxis, like so - 

  np.zeros((6,9,20))+np.array([1,2,3,4,5,6,7,8,9])[None,:,None]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38595430)
 Here is a way to pad 0 in the beginning of the array and then column stack them: 

  import numpy as np
n = 2
def mypad(myArr, n):
    if n == 0:
        return myArr
    else:
        return np.pad(myArr, ((n,0), (0,0)), mode = "constant")[:-n]

np.column_stack(mypad(arr, i) for i in range(n + 1))

# array([[ 1,  2,  0,  0,  0,  0],
#        [ 3,  4,  1,  2,  0,  0],
#        [ 5,  6,  3,  4,  1,  2],
#        [ 7,  8,  5,  6,  3,  4],
#        [ 9, 10,  7,  8,  5,  6],
#        [11, 12,  9, 10,  7,  8]]) 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34094026)
 Have you tried http://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html? 

  Powers = np.column_stack([Powers,Pname])
  

 However, the array is empty first, so make sure that the array isn't empty before concatenating or you will get a dimension mismatch error: 

  import numpy as np
Powers = np.array([])
with open('paths powers.tex', 'r') as paths_list:
    for file_path in paths_list:
        with open(file_path.strip(), 'r') as file:
            data = np.loadtxt(file_path.strip())
            Pname = data[0:32446,0]
            if len(Powers) == 0:
                Powers = Pname[:,None]
            else:
                Powers = np.column_stack([Powers,Pname])
            np.savetxt("Powers.txt", Powers)
  

  len(Powers)  will check the amount of rows that exist in  Powers .  At the start, this should be 0 so at the first iteration, this is true and we will need to explicitly make  Powers  equal to a one column 2D array that consists of the first column in your file.  Powers = Pname[:,None]  will help you do this, which is the same as  Powers = Pname[:,np.newaxis] .  This transforms a 1D array into a 2D array with a singleton column.  Now, the problem is that when you have 1D arrays in  numpy , they are agnostic of whether they are rows or columns.  Therefore, you must explicitly convert the arrays into columns before appending.   numpy.column_stack  takes care of that for you.   

 However, you'll also need to make sure that the  Powers  is a 2D matrix with one column the first time the loop iterates.   Should you not want to use  numpy.column_stack , you can still certainly use  numpy.append , but make sure that what you're concatenating to the array is a column.  The thing we talked about above should help you do this: 

  import numpy as np
Powers = np.array([])
with open('paths powers.tex', 'r') as paths_list:
    for file_path in paths_list:
        with open(file_path.strip(), 'r') as file:
            data = np.loadtxt(file_path.strip())
            Pname = data[0:32446,0]
            if len(Powers) == 0:
                Powers = Pname[:,None]
            else:      
                Pname = Pname[:,None]
                Powers = np.append(Powers, Pname, axis=1) 
            np.savetxt("Powers.txt", Powers)
  

 The second statement ensures that the array becomes a 2D array with a singleton column before concatenating. 



