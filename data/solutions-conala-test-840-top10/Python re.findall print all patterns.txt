Query: Python re.findall print all patterns
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17467876)
 You may use alternative https://pypi.python.org/pypi/regex/2013-06-26 module which allows overlapping matches: 

  >>> regex.findall('a.*?a', 'a 1 a 2 a 3 a 4 a', overlapped = True)
['a 1 a', 'a 2 a', 'a 3 a', 'a 4 a']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17467634)
  r = re.compile('a.*?a') # as we use it multiple times
matches = [r.match(s[i:]) for i in range(len(s))] # all matches, if found or not
matches = [m.group(0) for m in matches if m] # matching string if match is not None
print matches
  

  

  ['a 1 a', 'a 2 a', 'a 3 a', 'a 4 a']
  

 I don't know if it is the best solution, but here I test every substring reaching to the end of the string for matching with the given pattern. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17467703)
 I think using a positive lookahead assertion should do the trick: 

  >>> re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')
['a 1 a', 'a 2 a', 'a 3 a', 'a 4 a']
  

 http://docs.python.org/2/library/re.html#re.findall returns all the groups in the regex - including those in look-aheads. This works because the look-ahead assertion doesn't consume any of the string. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54752553)
 You can use  re.findall : 

  s = "vw xy zz (X, Y, Z)"
result = [i.strip() for i in re.findall('[\w\s]+', s)]
  

 Output: 

  ['vw xy zz', 'X', 'Y', 'Z']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14182462)
 Let's take a look at our output using  re.DEBUG . 

  branch 
  literal 40 
  subpattern 1 
    min_repeat 0 65535 
      any None 
  literal 41 
or
  in 
    category category_word
  

 Ouch, there's only one  subpattern  in there but  re.findall  only pulls out  subpattern s if one exists! 

  a = re.findall(r'\((.*?)\)|(.)', '(zyx)bc',re.DEBUG); a
[('zyx', ''), ('', 'b'), ('', 'c')]
branch 
  literal 40 
  subpattern 1 
    min_repeat 0 65535 
      any None 
  literal 41 
or
  subpattern 2 
    any None
  

 . :) 

 Now we just have to make this into the format you want. 

  [i[0] if i[0] != '' else i[1] for i in a]
['zyx', 'b', 'c']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36950792)
  import re

file = open('repCleanSubs2.txt')
for line in file:
    match = re.findall('^[a-zA-Z]+', line)
    if match:
        print line, match
  

 The  ^  sign means match from the beginning of the line, letters between  a-z  and  A-Z  

  +  means at least one or more characters in  [a-zA-Z]  must be found 

  re.findall  will return a list of all the patterns it could find in the string you supplied to it 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33429425)
 You can do a simple  split  without any use of  re . 

  input = raw_input()
ans = input.split("")
  

  

  ans = input.split("  ")
  

 If you want to use  findall  you can use 

  x="a  b*~c  27*y  5*~b"
print re.findall(r"(?:^|(?<=\b\b))\s*(.*?)\s*(?=\b\b|$)",x)
  

 F both  *  and    use 

  x="a  b*~c  27*y  5*~b"
print [i.split("*") f i in x.split("  ")]
  

 Output: [['a'], ['b', '~c'], ['27', 'y'], ['5', '~b']]  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14182389)
 From the documentation of  re.findall : 

 
   If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. 
 

 While your regexp is matching the string three times, the  (.  group is empty for the second two matches.  If you want the output of the other half of the regexp, you can add a second group: 

  >>> re.findall(r'\((.\)|(\w)', '(zyx)bc')
[('zyx', ''), ('', 'b'), ('', 'c')]
  

 Alternatively, you could remove all the groups to get a simple list of strings again: 

  >>> re.findall(r'\(.*?\)|\w', '(zyx)bc')
['(zyx)', 'b', 'c']
  

 You would need to manually remove the parentheses though. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52118799)
 You may use the following pattern: 

  user_b: (.*?)(?=^[0-9]{2}/[0-9]{2}/[0-9]{2})
  

 Regex demo https://regex101.com/r/rAvNHc/1. 

 Note the usage of  re.MULTILINE  and  re.DOTALL . The first flag is needed to match beginning of line patterns over multiline text, whereas  re.DOTALL  is needed to enable the  .  to match newlines too. 

 

 In Python: 

  import re
data = '''
27/07/18, 12:02 PM - user_a: https://www.youtube.com/
 Watch this
27/07/18, 12:15 PM - user_b: <Media omitted>
27/07/18, 12:52 PM - user_b: Read this fully
some text
some text
.
some text
27/07/18, 12:56 PM - user_c: text ..
'''
usern = 'user_b'

pattern = re.compile(r""+usern+r": (.*?)(?=^[0-9]{2}/[0-9]{2}/[0-9]{2})",re.DOTALL|re.MULTILINE)
print(re.findall(pattern,data))
  

  

  ['<Media omitted>\n', 'Read this fully\nsome text\nsome text\n.\nsome text\n']
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/11295365)
  re.findall(r'<HR>\s*<font size="\+1">(.*?)</font><BR>', html, re.DOTALL)
  

  findall  is returning a list with everything that is captured between the brackets in the regular expression. I used re.DOTALL so the dot also captures end of lines. 

 I used  \s*  because I was not sure whether there would be any whitespace. 



