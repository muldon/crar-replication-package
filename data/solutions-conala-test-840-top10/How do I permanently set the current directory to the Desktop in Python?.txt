Query: How do I permanently set the current directory to the Desktop in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34971949)
  import os
print os.getcwd()  # Prints the current working directory
  

 To set the working directory: 

  os.chdir('c:\\Users\\uname\\desktop\\python')  # Provide the new path here
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45975442)
 It work for  Mac  also  

  import os
path="/Users/HOME/Desktop/Addl Work/TimeSeries-Done"
os.chdir(path)
  

 To check working directory 

  os.getcwd()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30405876)
 You can add the line to your https://docs.python.org/2/using/cmdline.html#envvar-PYTHONSTARTUP file. So when you start an interpreter  os.chdir("C:/Users/Name/Desktop")  will be run.  

 I have a  startup.py  in my home directory file with the following content: 

  print("(.startup.py)")
import datetime, os, pprint, re, sys, time
print("(imported datetime, os, pprint, re, sys, time)")
  

 So every time I start ipython or a python shell those lines are executed. 

 Not 100 percent but I imagine setting the  PYTHONSTARTUP="path_to_script"  in your environment variables on windows should do the trick with the two lines in your question in the startup file. 

 So for your situation you can create a file lets call it  startup.py  and inside that file you put: 

  import os
os.chdir("C:/Users/Name/Desktop")
  

 Then the steps to add environment variable PYTHONSTARTUP: 

 For windows 8: 

 
   From the Desktop, right-click the very bottom left corner of the screen to get the Power User Task Menu. 
  
   From the Power User Task Menu, click System.
  Click the Advanced System Settings link in the left column. 
  
   Under System variables, click New. 
  
   Add PYTHONSTARTUP to Variable name. 
  
   Add the path of the Python file to Variable value and click OK. # <-path_to_startup.py 
  
   Click OK. 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11916749)
 The error is coming because your current working directory doesn't points to  'C:/Users/Any/Desktop/test' , by default it points to  c:\python27  if you're using  python 2.7, you can check yours by  os.getcwd() , so you should change your current working directory to  'C:/Users/Any/Desktop/test'  before applying that rename. 

 use  os.chdir()  to change the current working directory. 

  import os
import sys
words = os.listdir('C:/Users/Any/Desktop/test')
dirlist = os.listdir('C:/Users/Any/Desktop/test')

words = [w.replace('E', 'e') for w in words]
print words 

os.chdir('C:/Users/Any/Desktop/test')  #this changes the current working directory
os.rename(dirlist[1], words[1])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19206699)
 I used the following: 

  import os
desktop_file = os.path.expanduser("~/Desktop/myfile.txt")
  

 
   On Unix and Windows, return the argument with an initial component of
  ~ or ~user replaced by that userâ€˜s home directory. 
 

 Reference: os.path.http://docs.python.org/2/library/os.path.html#os.path.expanduser 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36085441)
 Probably because the current working directory is  /Users/abdulahmad/Desktop .  

 If you write for example  path/to/file  it means relative to current working directory and relative to  /Users/abdulahmad/Desktop  it would mean  /Users/abdulahmad/Desktop/path/to/file . 

 If you read the python3 manual it actually shows an implementation of  os.abspath(path)  as being the same as  os.path.normpath(os.path.join(os.getcwd(), path)) . This can be used to get a path relative to arbitrarily provided path. (It also shows that you actually basically joins the current working directory and the supplied (relative) path) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8247799)
 Since your file name includes no path component, it is implicitly assigned to be in the current directory. Unless your current directory is the desktop, you won't be able to find the file. 

 Either give it a full pathname, or move to the desktop and run your script from there. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45651898)
 If I had to guess based on your current path I would say you are ssh'd into a Linux computer or otherwise running the script remotely so you can't chdir into the Desktop folder on your local Mac. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42692802)
 The problem is with your CWD (Current Working Directory) because os.listdir() give you files whose are relative to provided path and it's inconsistent with CWD. Solution is to set your CWD before using os.listidr(): 

  dir_to_delete = '/home/user/Desktop/1'

os.chdir(dir_to_delete)

[f for f in os.listdir() if os.path.isfile(f)]
  

 or just repair path to files: 

  [f for f in os.listdir(dir_to_delete) if os.path.isfile(os.path.join(dir_to_delete, f))]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34361007)
 https://docs.python.org/3/library/os.path.html#os.path.dirname does not do what you expect it to do. It returns the directory name for the path you pass to it. So it interprets whatever string you pass as a path. As such, when you pass a path that has no directory part, it returns an empty string: 

  >>> os.path.dirname("gribs")
''
  

 So with  os.makedirs()  you are trying to create an empty directory, which of course will not create the path you are looking for. 

 Instead, you should just use  os.makedirs('gribs')  to create  gribs  folder relative to your current directory. 

 

 Furthermore,  open(path)  will not work when  path  is the path to the desktop directory. You will have to pass a path to a file there. You probably meant to use a file path relative to the folder you create there: 

  with open('gribs/something.txt', 'w+') as f:
    f.write('example content')
  



