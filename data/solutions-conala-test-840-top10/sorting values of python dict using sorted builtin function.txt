Query: sorting values of python dict using sorted builtin function
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9849213)
 They're sorted by the second letter in the name; iterating over a dict yields its keys. 

  sorteditems = sorted(mydict.iteritems(), key=itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9849262)
 Iterating over a dictionary (which is what the  sorted  function does) will give you only it's keys: 

  >>> sorted(mydict)
[u'den', u'jaime', u'jon', u'rob']
  

 Instead you want to sort both the keys and values - to do this, you would use  mydict.items()  (or  mydict.iteritems() , which is more efficient with large dicts): 

  >>> sorted(mydict.items())
[(u'den', 26), (u'jaime', 31), (u'jon', 30), (u'rob', 42)]
  

 Then your code would work as expected: 

  >>> from operator import itemgetter
>>> sorted(mydict.items(), key = itemgetter(1))
[(u'den', 26), (u'jon', 30), (u'jaime', 31), (u'rob', 42)]
  

 You may also want to sort with the dict's key as the secondary sort value, in case multiple keys have the same value: 

  >>> mydict={u'a': 1, 'z': 1, 'd': 1}
>>> sorted(mydict.items(), key = itemgetter(1))
[(u'a', 1), ('z', 1), ('d', 1)]
>>> sorted(mydict.items(), key = itemgetter(1, 0))
[(u'a', 1), ('d', 1), ('z', 1)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35789579)
 You can use  sorted()  with a key function which will sort your list based on your dictionary values: 

  >>> sorted(m, key= lambda x: -y.get(x))
[2, 3, 5]
  

 Note that since  sorted()  sorts the items in ascending mode you can use negative value of the dict values to make it sort your list descending.  Or you could change the  reverse  argument to  True : 

  >>> sorted(m, key= lambda x: y.get(x), reverse=True)
[2, 3, 5]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34965286)
 Don't use the name  dict , it will shadow the builtin dictionary. You can create a dictionary mapping your orignal keys to the maximum value of the sublists: 

  >>> d_max = {k:max(d[k]) for k in d}
>>> d_max
{'a': 5, 'c': 3, 'b': 7}
  

 And then iterate over the sorted items of that dictionary: 

  >>> for k, v in sorted(d_max.items(), key=lambda x: x[1], reverse=True):
...     print('{} : {}'.format(k,v))
... 
b : 7
a : 5
c : 3
  

  edit : If you never need the  d_max  dictionary in order to look up the max values, we can simplify a little further: 

  >>> for k,v in sorted(((max(d[k]), k) for k in d), reverse=True): 
...     print('{} : {}'.format(v,k))
... 
b : 7
a : 5
c : 3
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43164621)
 Use  items  instead of  keys : 

  print(sorted(dict.items(), key=lambda item: item[1][2], reverse=True)[:3])
  

 or save sorted keys, and use that to get items: 

  keys = sorted(dict, key=lambda key: dict[k][2], reverse=True)[:3]
items = [(key, dict[key]) for key in keys]
print(items)
  

 if you want values seaparately: 

  keys = sorted(dict, key=lambda k: dict[k][2], reverse=True)[:3]
values = [dict[key] for key in keys]
  

 BTW, don't use  dict  as a variable name; it shadows built-in function/type  dict . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10194770)
 A  defaultdict  doesn't hold order. You might need to use a http://docs.python.org/library/collections.html, or sort the keys each time as a list. 

 E.g: 

    from operator import itemgetter
  sorted_city_pop = OrderedDict(sorted(cityPopulation.items()))
  

 Edit: If you just want to print the order, simply use the  sorted  builtin: 

  for key, value in sorted(cityPopulation.items()):
    print(key, value)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9054871)
 Here is another, simpler idea: 

 
 You create a class that inherits from  dict . 
 You use a cache: you only sort the keys when iterating over the dictionary, and you mark the dictionary as being sorted; insertions should simply append to the list of keys. 
 

 kindall mention in a comment that sorting lists that are almost sorted is fast, so this approach should be quite fast. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31398886)
 Those are sorted. They are strings, and are sorted lexicographically: '1' is before '2', etc. 

 If you want to sort by numeric value, you'll need to convert to ints in the key function. For example: 

  sorted(temp_dict.items(), key=lambda x: int(x[1]))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21608318)
  dict.items()  returns a list of  (key, value)  pairs,  x[1]  is simply the  value  part of that pair: 

  >>> d = {'ann': 9, 'tom': 21, 'eddie': 12, 'fred': 5}
>>> d.items()
[('ann', 9), ('fred', 5), ('eddie', 12), ('tom', 21)]
>>> d.items()[0]
('ann', 9)
>>> d.items()[0][1]
9
>>> (lambda x: x[1])(d.items()[0])
9
  

  sorted()  passes each element in the input sequence (so  ('ann', 9) , etc.) into the  key  function.  x  is then  ('ann', 9)  and  x[1]  is  9 . 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/1217269)
 Here is one way to do this: 

  >>> sorted(myDict.items(), key=lambda e: e[1][2])
[('item2', [8, 2, 3]), ('item1', [7, 1, 9]), ('item3', [9, 3, 11])]
  

 The http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys of the  sorted  function lets you derive a sorting key for each element of the list. 

 To iterate over the keys/values in this list, you can use something like: 

  >>> for key, value in sorted(myDict.items(), key=lambda e: e[1][2]):
...   print key, value
... 
item2 [8, 2, 3]
item1 [7, 1, 9]
item3 [9, 3, 11]
  



