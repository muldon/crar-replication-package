Query: Slicing a multidimensional list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40853266)
 Try with nested list comprehension: 

  [[[x[0]] for x in y] for y in listD]
  

 

  In steps:  

 Look at each nested row in your  listD  and see how it corresponds to  outlist .  You can see that the first element of each of the 1-deep list is included in  outlist  

  >>> [x[0] for x in listD[0]] 
[[53, 54]]
>>> [x[0] for x in listD[1]] 
[[51, 51]]
>>> [x[0] for x in listD[2]] 
[[39, 39], [53, 54]]
  

 But in  outlist , these lists are then nested in one more 1-element list, so wrap each one of these into it's own list, e.g the next element would be: 

  >>> [[x[0] for x in listD[3]]]
[[[39, 39], [54, 54]]]
  

 then extend it for each index of  listD : 

  [[[x[0]] for x in listD[i]] for i in range(len(listD))]
  

 then simplify further by replacing  listD[i]  with just the elements of  listD : 

  [[[x[0]] for x in y] for y in listD]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47169253)
 So, you are trying to use multidimensional slicing on Python  list  objects, but fundamentally,  list  objects  do not have dimensions . They have no inherent knowledge of their contents, other than the total number of them. But, you *shouldn't be working with  list  objects at all! Instead, replace this: 

  scenarios = [[]]*10000
for i in range(10000):
    scenarios[i] = np.random.multivariate_normal(r, Q, size = 120) # monthly scenarios
  

  

  scenarios = np.random.multivariate_normal(r, Q, size=(1000, 120))
  

  

  >>> scenarios = np.random.multivariate_normal(r, Q, size=(1000, 120))
>>> scenarios.shape
(1000, 120, 4)
  

 Then, you can slice to your heart's content in N dimensions using: 

  scenarios[:, 0:60]
  

 Or, a more wieldy slice: 

  >>> scenarios[500:520, 0:60]
array([[[-0.05785267,  0.01122828,  0.00786622, -0.00204875],
        [ 0.01682276,  0.00163375,  0.00439909, -0.0022255 ],
        [ 0.02821342, -0.01634708,  0.01175085, -0.00194007],
        ...,
        [ 0.04918003, -0.02146014,  0.00071328, -0.00222226],
        [-0.03782566, -0.00685615, -0.00837397, -0.00095019],
        [-0.06164655,  0.02817698,  0.01001757, -0.00149662]],

       [[ 0.00071181, -0.00487313, -0.01471801, -0.00180559],
        [ 0.05826763,  0.00978292,  0.02442642, -0.00039461],
        [ 0.04382627, -0.00804489,  0.00046985,  0.00086524],
        ...,
        [ 0.01231702,  0.01872649,  0.01534518, -0.0022179 ],
        [ 0.04212831, -0.05289387, -0.03184881, -0.00078165],
        [-0.04361605, -0.01297212,  0.00135886,  0.0057856 ]],

       [[ 0.00232622,  0.01773357,  0.00795682,  0.00016406],
        [-0.04367355, -0.02387383, -0.00448453,  0.0008559 ],
        [ 0.01256918,  0.06565425,  0.05170755,  0.00046948],
        ...,
        [ 0.04457427, -0.01816762,  0.00068176,  0.00186112],
        [ 0.00220281, -0.01119046,  0.0103347 , -0.00089715],
        [ 0.02178122,  0.03183001,  0.00959293, -0.00057862]],

       ...,
       [[ 0.06338153,  0.01641472,  0.01962643, -0.00256244],
        [ 0.07537754, -0.0442643 , -0.00362656,  0.00153777],
        [ 0.0505006 ,  0.0070783 ,  0.01756948,  0.0029576 ],
        ...,
        [ 0.03524508, -0.03547517, -0.00664972, -0.00095385],
        [-0.03699107,  0.02256328,  0.00300107,  0.00253193],
        [-0.0199608 , -0.00536222,  0.01370301, -0.00131981]],

       [[ 0.08601913, -0.00364473,  0.00946769,  0.00045275],
        [ 0.01943327,  0.07420857,  0.00109217, -0.00183334],
        [-0.04481884, -0.02515305, -0.02357894, -0.00198166],
        ...,
        [-0.01221928, -0.01241903,  0.00928084,  0.00066379],
        [ 0.10871802, -0.01264407,  0.00601223,  0.00090526],
        [-0.02603179, -0.00413112, -0.006037  ,  0.00522712]],

       [[-0.02929114,  0.02188803, -0.00427137,  0.00250174],
        [ 0.02479416, -0.01470632, -0.01355196,  0.00338125],
        [-0.01915726, -0.00869161,  0.01451885, -0.00137969],
        ...,
        [ 0.05398784, -0.00834729, -0.00437888,  0.00081602],
        [ 0.00626345, -0.0261016 , -0.01484753,  0.00060499],
        [ 0.05427697,  0.04006612,  0.03371313, -0.00203731]]])
>>>
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40853537)
 It is unclear whether your list of lists has uniform depth or not. If it is variable depth, you are best approaching this recursively. 

  

  >>> listD = [[[[53, 54], [129, 130]]], 
...      [[[51, 51], [132, 132]]], 
...      [[[39, 39], 
...      [144, 144]], 
...     [[53, 54], 
...      [129, 130]]], 
...      [[[39, 39], [146, 146]], [[54, 54], [130, 130]]], 
...      [[[54, 53], [130, 129]]], 
...      [[[52, 52], [132, 132]]]
...     ]
>>> 
>>> outlist=[[[[53, 54]]], 
...      [[[51, 51]]], 
...      [[[39, 39]], 
...     [[53, 54]]], 
...      [[[39, 39]], 
...     [[54, 54]]], 
...      [[[54, 53]]], 
...      [[[52, 52]]]
...     ]  
  

 You can recursively traverse the list of lists until you find a list that has no lists in the first element. . . 

 Example: 

  def trav(x):
    result = []
    for el in x:
        if isinstance(el, list) and any(isinstance(e, list) for e in el[0]):
            result.append(trav(el))
        else:
            result.append([el[0]])
    return result


>>> trav(listD)
[[[[53, 54]]], [[[51, 51]]], [[[39, 39]], [[53, 54]]], [[[39, 39]], 
[[54, 54]]], [[[54, 53]]], [[[52, 52]]]]
>>> trav(listD)==outlist
True
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15945739)
 Slicing works differently with NumPy arrays. http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html  To highlight some points: 

 
 NumPy slices can slice through multiple dimensions 
 All arrays generated by NumPy basic slicing are always views of the original array, while slices of lists are shallow copies. 
 You can assign a scalar into a NumPy slice. 
 You can insert and delete items in a  list  by assigning a sequence of different length to a slice, whereas NumPy would raise an error. 
 

  

  >>> a = np.arange(4, dtype=object).reshape((2,2))
>>> a
array([[0, 1],
       [2, 3]], dtype=object)
>>> a[:,0]             #multidimensional slicing
array([0, 2], dtype=object)
>>> b = a[:,0]
>>> b[:] = True        #can assign scalar
>>> a                  #contents of a changed because b is a view to a
array([[True, 1],
       [True, 3]], dtype=object)    
  

 Also, NumPy arrays provide convenient mathematical operations with arrays of objects that support them (e.g.  fraction.Fraction ). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23903008)
  board = [[10*r + c for c in range(1,10)] for r in range(1,10)]
squares = [[board[3*r + i][3*c + j] for i,j in itertools.product(range(3), repeat=2)] for r,c in itertools.product(range(3), repeat=2)]
  

 Output: 

  In [18]: board = [[10*r + c for c in range(1,10)] for r in range(1,10)]

In [19]: board
Out[19]: 
[[11, 12, 13, 14, 15, 16, 17, 18, 19],
 [21, 22, 23, 24, 25, 26, 27, 28, 29],
 [31, 32, 33, 34, 35, 36, 37, 38, 39],
 [41, 42, 43, 44, 45, 46, 47, 48, 49],
 [51, 52, 53, 54, 55, 56, 57, 58, 59],
 [61, 62, 63, 64, 65, 66, 67, 68, 69],
 [71, 72, 73, 74, 75, 76, 77, 78, 79],
 [81, 82, 83, 84, 85, 86, 87, 88, 89],
 [91, 92, 93, 94, 95, 96, 97, 98, 99]]

In [20]: squares = [[board[3*r + i][3*c + j] for i,j in itertools.product(range(3), repeat=2)] for r,c in itertools.product(range(3), repeat=2)]

In [21]: squares
Out[21]: 
[[11, 12, 13, 21, 22, 23, 31, 32, 33],
 [14, 15, 16, 24, 25, 26, 34, 35, 36],
 [17, 18, 19, 27, 28, 29, 37, 38, 39],
 [41, 42, 43, 51, 52, 53, 61, 62, 63],
 [44, 45, 46, 54, 55, 56, 64, 65, 66],
 [47, 48, 49, 57, 58, 59, 67, 68, 69],
 [71, 72, 73, 81, 82, 83, 91, 92, 93],
 [74, 75, 76, 84, 85, 86, 94, 95, 96],
 [77, 78, 79, 87, 88, 89, 97, 98, 99]]
  

 Now, if you wanted the squares to also be two-dimensional, then you could do this: 

  squares = [[[board[3*r + i][3*c + j] for j in range(3)] for i in range(3)] for r,c in itertools.product(range(3), repeat=2)]
  

 Output: 

  Out[22]: 
[[[11, 12, 13], [21, 22, 23], [31, 32, 33]],
 [[14, 15, 16], [24, 25, 26], [34, 35, 36]],
 [[17, 18, 19], [27, 28, 29], [37, 38, 39]],
 [[41, 42, 43], [51, 52, 53], [61, 62, 63]],
 [[44, 45, 46], [54, 55, 56], [64, 65, 66]],
 [[47, 48, 49], [57, 58, 59], [67, 68, 69]],
 [[71, 72, 73], [81, 82, 83], [91, 92, 93]],
 [[74, 75, 76], [84, 85, 86], [94, 95, 96]],
 [[77, 78, 79], [87, 88, 89], [97, 98, 99]]]
  

 Thus,  squares[0]  is the following two-dimensional list: 

  [[11, 12, 13], 
 [21, 22, 23], 
 [31, 32, 33]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17882232)
 You are looking at http://www.numpy.org/ multidimensional array slicing. 

 The comma marks a tuple, read it as  [(:, i)] , which  numpy  arrays interpret as: first dimension to be sliced end-to-end (all rows) with  : , then for each row,  i  selects  one  column. 

 See http://wiki.scipy.org/Tentative_NumPy_Tutorial#head-864862d3f2bb4c32f04260fac61eb4ef34788c4c in the  numpy  tutorial. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37142042)
 Use the http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/: 

  b = a[numpy.ix_(*s)]
  

   

  b = a[numpy.ix_(s[0], s[1], ..., s[n])]
  

 

 For example, 

  import numpy as np

N = 3
M = 3
a = np.arange((M+1)**N).reshape([M+1]*N)
s = [np.ones(M).astype(int) for i in range(N)]
s[0] = [0,1,2]
s[1] = [1,2,3]
s[2] = [1,2,3]        
b = a[np.ix_(*s)]
print(b)
  

  

  [[[ 5  6  7]
  [ 9 10 11]
  [13 14 15]]

 [[21 22 23]
  [25 26 27]
  [29 30 31]]

 [[37 38 39]
  [41 42 43]
  [45 46 47]]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42449199)
 As mentioned by phihag in his answer, 

  b = a[:]
  

 will work for your case since slicing a list creates a new memory id of the list (meaning you are no longer referencing the same object in your memory and the changes you make to one will not be reflected in the other.) 

 However, there is a slight problem.  If your list is multidimensional, as in lists within lists, simply slicing will not solve this problem.  Changes made in the higher dimensions, i.e. the lists within the original list, will be shared between the two. 

 Do not fret, there is a solution.  The module copy has a nifty copying technique that takes care of this issue. 

  from copy import deepcopy

b = deepcopy(a)
  

 will copy a list with a new memory id no matter how many levels of lists it contains! 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13635654)
 Using a single list comprehension, with slicing by filtered generator comprehension: 

  new_list = [l[next((i for i, n in enumerate(l) if n != 0), 0):
              next((len(l) - i for i, n in enumerate(reversed(l)) if n != 0), 0)]
            for l in my_list]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48570668)
 First of all it is rather weird that you wrap the values (as string, which is already weird in another list. 

 A declarative approach is to use  numpy : 

  from numpy import array

array(fileArr[:, 1, 0].astype(int.mean(
  

 For your sample data, this will give: 

  >>> array(fileArr[:, 1, 0].astype(int.mean(
13111562.5
  

 Numpy is a way to construct multidimensional arrays. By using  array(..  we load the data into a numpy array. Then we use slicing  [:,1,0]  we obtain for every row the second item and then for that list the first element. Next we use  astype(int  to convert the items into integers, and then we call  .mean(  to calculate the average over that array of integers. 



