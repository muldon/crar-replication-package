Query: python dict comprehension with two ranges
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18789324)
 Using http://docs.python.org/2/library/functions.html#zip(or  itertools.izip ) and  itertools.count : 

  >>> from itertools import count, izip
  

 Dict-comprehension: 

  >>> {k:v for k,v in izip(xrange(1,5), count(7))}
{1: 7, 2: 8, 3: 9, 4: 10}
  

  dict() : 

  >>> dict(izip(xrange(1,5), count(7)))
{1: 7, 2: 8, 3: 9, 4: 10}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18791668)
 I would use http://docs.python.org/3.3/library/functions.html#enumerate: 

  >>> dict(enumerate(range(7, 11), 1))
{1: 7, 2: 8, 3: 9, 4: 10}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4638957)
 Just reverse the order of the two loops: 

  j = dict((a, i) for i, s in enumerate(l) for a in s)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18789293)
 Using http://docs.python.org/2/library/functions.html#zip: 

  >>> dict(zip(range(1,5), range(7,11)))
{1: 7, 2: 8, 3: 9, 4: 10}
  

 Using http://www.python.org/dev/peps/pep-0274/: 

  >>> {k:v for k, v in zip(range(1,5), range(7,11))}
{1: 7, 2: 8, 3: 9, 4: 10}

>>> {x:x+6 for x in range(1,5)}
{1: 7, 2: 8, 3: 9, 4: 10}
  

 Why your code does not work: 

 Your code is similar to following code: 

  ret = {}
for i in range(1,5):
    for j in range(7,11):
        ret[i] = j
    # ret[i] = 10 is executed at last for every `i`.
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25767727)
 In Python 3.4 you could use ranges as keys. But since you are using 2.7, this is not an option. But for other readers, maybe this is worth consideration. 

  d = {
  range(0, 5000): 1234,
  range(5001, 10000): 1231,
  range(10001, 20000): 3242
}

x = 6000
r = [i[1] for i in d.items() if x in i[0]][0]
# r == 1231
  

 You can improve this to catch the case that  x  is in none of the ranges. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51869222)
 First, store your ranges directly as range objects, rather than as endpoints: 

  >>> d = {'x': (0, 2), 'y': (2, 4), 'z': (3, 5)}
>>> d = {k: range(*v) for k, v in d.items()}
  

 Now you have simple list comprehension available: 

  >>> from itertools import product
>>> [dict(zip(d, p)) for p in product(*d.values())]
[{'x': 0, 'y': 2, 'z': 3},
 {'x': 0, 'y': 2, 'z': 4},
 {'x': 0, 'y': 3, 'z': 3},
 {'x': 0, 'y': 3, 'z': 4},
 {'x': 1, 'y': 2, 'z': 3},
 {'x': 1, 'y': 2, 'z': 4},
 {'x': 1, 'y': 3, 'z': 3},
 {'x': 1, 'y': 3, 'z': 4}]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/24023184)
  arr=[[0,0,0] for i in range(3)] # create a list with 3 sublists containing [0,0,0]
arr
Out[1]: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
  

 If you want an list with 5 sublists containing 4 0's: 

  In [29]: arr=[[0,0,0,0] for i in range(5)]

In [30]: arr
Out[30]: 
[[0, 0, 0, 0],
 [0, 0, 0, 0],
 [0, 0, 0, 0],
 [0, 0, 0, 0],
 [0, 0, 0, 0]]
  

 The range specifies how many sublists you want, ranges start at 0, so ranges 4 is  0,1,2,3,4 .
 gives you five  [0,0,0,0]  

 Using the list comprehension is the same as: 

  arr=[]
for i in range(5):
    arr.append([0,0,0,0])

arr
[[0, 0, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25767633)
 Can I assume that the ranges stored don't leave gaps between them? 

 I would: 

 
 store the mapping as a dict (range_start -> value) just like you did 
 to get a value for key K:
 
 do a binary search over the dict's keys to find the greatest key smaller or equal to K (O(logN)) 
 return the value for that key (O(1)). 
  
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2894279)
 I often use comprehensions to construct dicts: 

  my_dict = dict((k, some_func(k)) for k in input_list)
  

 Note Python 3 has dict comprehensions, so this becomes: 

  my_dict = {k:some_func(k) for k in input_list}
  

 For constructing CSV-like data from a list of tuples: 

  data = "\n".join(",".join(x) for x in input)
  

 Not actually a list comprehension, but still useful: Produce a list of ranges from a list of 'cut points': 

  ranges = zip(cuts, cuts[1:])
  



