Query: Execute Shell Script from python with variable
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20810485)
 To execute an arbitrary shell script given as a string, just add  shell=True  parameter. 

  #!/usr/bin/env python
from subprocess import call
from textwrap import dedent

call(dedent("""\
    #!/bin/bash
    echo Hello world
    """), shell=True)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43097536)
  

  subprocess.call('date', shell=True)
  

 Actually, Shell does allow you to access to global variable and programs that are in $PATH and your shell. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27676060)
 You need to use  shell=True  or add your file with full path  : 

  subprocecss.call("xrdb -load ~/.XDefaults",shell=True)
  

 from https://docs.python.org/2/library/subprocess.html#using-the-subprocess-module : 

 
   On Unix with shell=True, the shell defaults to /bin/sh. If args is a string, the string specifies the command to execute through the shell 
  
   On Windows with shell=True, the COMSPEC environment variable specifies the default shell. The only time you need to specify shell=True on Windows is when the command you wish to execute is built into the shell (e.g. dir or copy). 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19325812)
 you actually are sending the arguments ... if your shell script wrote a file instead of printing you would see it.  you need to communicate to see your printed output from the script ... 

  from subprocess import Popen,PIPE

Process=Popen(['./childdir/execute.sh',str(var1),str(var2)],shell=True,stdin=PIPE,stderr=PIPE)
print Process.communicate() #now you should see your output
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16180593)
  

  //xyz.py

name = 'FUnCOder'
filename1  = 'aaa.txt'
filename2 = 'bbb.txt'

process = subprocess.Popen(['abc.sh', name, filename1, filname2], stdout=PIPE)
process.wait()
  

 Notice that 'abc.sh' is in quotes because it's not a variable name, but the command you're calling. 

 I would also, in general, recommend using  shell=False , though in some cases it is necessary to use  shell=True . 

 To put output into a file try: 

  with open("logfile.log") as file:
    file.writelines(process.stdout)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5788946)
  execfile  runs a Python file, but by loading it, not as a script. You can only pass in variable bindings, not arguments. 

 If you want to run a program from within Python, use http://docs.python.org/library/subprocess.html#subprocess.call. E.g. 

  subprocess.call(['./abc.py', arg1, arg2])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16046836)
 No, that's not possible. You can  execute  a shell script, pass parameters on the command line, and it could print data out, which you could parse from Python. 

 But that's not really  calling  the function. That's still executing bash with options and getting a string back on stdio. 

 That might do what you want. But it's probably not the right way to do it. Bash can not do that many things that Python can not. Implement the function in Python instead. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2207293)
 I've finally found the answer to my question, thanks to  badp  and his suggestions f debugging. 

 From the python page on the http://docs.python.g/library/subprocess.html: 

 
   The  executable  argument specifies the program to execute. It is very seldom needed: Usually, the program to execute is defined by the args argument. If  shell=True , the  executable  argument specifies which shell to use. On Unix, the default shell is  /bin/sh . On Windows, the default shell is specified by the  COMSPEC  environment variable. The only reason you would need to specify  shell=True  on Windows is where the command you wish to execute is actually built in to the shell, eg  dir ,  copy . You donâ€™t need  shell=True  to run a batch file, n to run a console-based executable. 
 

 Since I am on Linux and using  shell=True , my command is in fact a list of arguments to be executed by  executable , which defaults to  /bin/sh . Thus the full command executed was:  /bin/sh /usr/bin/sh /tmp/run/launch.sh ... which did not wk so well. 

 And I should have used either: 

  subprocess.Popen('/tmp/run/launch.sh', shell=True)
  

  

  subprocess.Popen('/tmp/run/launch.sh', executable = '/usr/bin/sh', shell=True)
  

 It's tricky that  shell=True  would actually modify the default  executable  value on Linux only... 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38982936)
 Setting an environment variable sets it only for the current process and any child processes it launches. So using  os.system  will set it only for the shell that is running to execute the command you provided. When that command finishes, the shell goes away, and so does the environment variable. Setting it using  os.putenv  or  os.environ  has a similar effect; the environment variables are set for the Python process and any children of it. 

 I assume you are trying to have those variables set for the shell that you launch the script from, or globally. That can't work because the shell (or other process) is not a child of the Python script in which you are setting the variable. 

 You'll have better luck setting the variables in a shell script. If you then  source  that script (so that it runs in the current instance of the shell, rather than in a subshell) then they will remain set after the script ends. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4377147)
 Just make sure the python executable is in your PATH environment variable then add in your script 

  python path/to/the/python_script.py
  

 Details: 

 
 In the file job.sh, put this 
 

 
  #!/bin/sh
python python_script.py
  
 

 
 Execute this command to make the script runnable for you :  chmod u+x job.sh  
 Run it :  ./job.sh  
 



