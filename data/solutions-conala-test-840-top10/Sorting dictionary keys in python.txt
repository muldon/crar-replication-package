Query: Sorting dictionary keys in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18949174)
 You almost had it, but the key is the first item of the tuple: 

  sorted(dict.items(), key=lambda s: s[0])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1217269)
 Here is one way to do this: 

  >>> sorted(myDict.items(), key=lambda e: e[1][2])
[('item2', [8, 2, 3]), ('item1', [7, 1, 9]), ('item3', [9, 3, 11])]
  

 The http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys of the  sorted  function lets you derive a sorting key for each element of the list. 

 To iterate over the keys/values in this list, you can use something like: 

  >>> for key, value in sorted(myDict.items(), key=lambda e: e[1][2]):
...   print key, value
... 
item2 [8, 2, 3]
item1 [7, 1, 9]
item3 [9, 3, 11]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3977387)
 If you're using Python 2.7+ or 3.1+ you could create an http://docs.python.org/library/collections.html#collections.OrderedDict from a sort of your dictionary and then iterate through that. 

  ordered = OrderedDict(sorted(mydict.items(), key=lambda t: t[0]))
  

 However, depending on what you want to do it's probably easier to iterate over a sorted list of keys from your dict.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22700510)
 Use a sorting key: 

  sorted(yourdict, key=lambda k: int(k.split()[0]))
  

 This returns a list of  keys , sorted numerically on the first part of the key (split on whitespace). 

  

  >>> yourdict = {'666 -> 999': 4388, '4000 -> 4332': 4383, '1333 -> 1665': 7998, '5666 -> 5999': 4495, '3666 -> 3999': 6267, '3000 -> 3332': 9753, '6333 -> 6665': 7966, '0 -> 332': 877}
>>> sorted(yourdict, key=lambda k: int(k.split()[0]))
['0 -> 332', '666 -> 999', '1333 -> 1665', '3000 -> 3332', '3666 -> 3999', '4000 -> 4332', '5666 -> 5999', '6333 -> 6665']
  

 Sorting both keys and values together: 

  sorted(yourdict.items(), key=lambda item: int(item[0].split()[0]))
  

 This produces key-value pairs: 

  >>> sorted(yourdict.items(), key=lambda item: int(item[0].split()[0]))
[('0 -> 332', 877), ('666 -> 999', 4388), ('1333 -> 1665', 7998), ('3000 -> 3332', 9753), ('3666 -> 3999', 6267), ('4000 -> 4332', 4383), ('5666 -> 5999', 4495), ('6333 -> 6665', 7966)]
  

 You could produce an http://docs.python.org/2/library/collections.html#collections.OrderedDict with that: 

  >>> from collections import OrderedDict
>>> OrderedDict(sorted(yourdict.items(), key=lambda item: int(item[0].split()[0])))
OrderedDict([('0 -> 332', 877), ('666 -> 999', 4388), ('1333 -> 1665', 7998), ('3000 -> 3332', 9753), ('3666 -> 3999', 6267), ('4000 -> 4332', 4383), ('5666 -> 5999', 4495), ('6333 -> 6665', 7966)])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4253834)
 dictionary.keys() return a list and you can sort list by your own function: 

  >>> a = [(u'we', 'PRP'), (u'saw', 'VBD'), (u'you', 'PRP'), (u'bruh', 'VBP'), (u'.', '.')]
>>> import operator
>>> a.sort(key = operator.itemgetter(1))
>>> a
[(u'.', '.'), (u'we', 'PRP'), (u'you', 'PRP'), (u'saw', 'VBD'), (u'bruh', 'VBP')]*
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18152071)
 You could sort the keys like this: 

  sorted(dct, key=dct.get)
  

 See the http://wiki.python.org/moin/HowTo/Sorting/ for an explanation of this and other techniques for sorting. 



