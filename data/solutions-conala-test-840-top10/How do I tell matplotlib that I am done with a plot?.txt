Query: How do I tell matplotlib that I am done with a plot?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38976379)
 If you're using Matplotlib interactively, for example in a web application, (e.g. ipython) you maybe looking for 

  plt.show()
  

 instead of  plt.close()  or  plt.clf() . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/741884)
 You can use  figure  to create a new plot, for example, or use  close  after the first plot. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/742489)
 As stated from David Cournapeau, use figure(). 

  import matplotlib
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

plt.figure()
x = [1,10]
y = [30, 1000]
plt.loglog(x, y, basex=10, basey=10, ls="-")
plt.savefig("first.ps")


plt.figure()
x = [10,100]
y = [10, 10000]
plt.loglog(x, y, basex=10, basey=10, ls="-")
plt.savefig("second.ps")
  

 Or subplot(121) / subplot(122) for the same plot, different position. 

  import matplotlib
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

plt.subplot(121)
x = [1,10]
y = [30, 1000]
plt.loglog(x, y, basex=10, basey=10, ls="-")

plt.subplot(122)
x = [10,100]
y = [10, 10000]
plt.loglog(x, y, basex=10, basey=10, ls="-")
plt.savefig("second.ps")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21161986)
 This operation can be done cleanly after all plotting is done via the legend text getters/setters and axis line getters/setters. Set the legend text colors to be the same as the line colors in a for loop before plotting. 

  import matplotlib.pyplot as plt
import numpy as np

x = np.arange(10)

fig = plt.figure()
ax = plt.subplot(111)

for i in xrange(5):
    ax.plot(x, i * x, label='$y = %ix$' % i)

leg = ax.legend()

def color_legend_texts(leg):
    """Color legend texts based on color of corresponding lines"""
    for line, txt in zip(leg.get_lines(), leg.get_texts()):
        txt.set_color(line.get_color())  

color_legend_texts(leg)    

plt.show()
  

 The main difference to note in this answer is that formatting the plot can be completely decoupled from the plotting operation. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/742062)
 There is a clear figure command, and it should do it for you: 

  plt.clf()
  

 If you have multiple subplots in the same figure 

  plt.cla()
  

 clears the current axes. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9820820)
 Just enter  plt.hold(False)  before the first plt.plot, and you can stick to your original code. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30273178)
 You need to pass  col3  to scatter as an array of floats, not a tuple, and not ints 

 So, this should work: 

  import matplotlib.pyplot as plt
import csv
import matplotlib as m
import numpy as np

#read in the data
with open('data.csv', 'rb') as infile:
    data=[]
    r = csv.reader(infile)
    for row in r:
    data.append(row)

col1, col2, col3 = [el for el in zip(*data)]

#I'd like to have a colormap going from red to green:
cdict = {
    'red'  :  ( (0.0, 1.0, 1.0), (0.5, 0.0, 0.0), (1.0, 0.0, 0.0)),
    'green':  ( (0.0, 0.0, 0.0), (0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
    'blue' :  ( (0.0, 0.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0))}  

cm = m.colors.LinearSegmentedColormap('my_colormap', cdict)

#I got the following line from an example I saw; it works for me, but I don't really know how it works as an input to colorbar, and would like to know.
formatter = plt.FuncFormatter(lambda i, *args: ['0', '1'][int(i)])

plt.figure()
plt.scatter(col1, col2, c=np.asarray(col3,dtype=np.float32),lw=0,cmap=cm)
plt.colorbar(ticks=[0, 1], format=formatter, cmap=cm)
  

 As for  ticks , you are passing a list of where you want ticks on the colorbar. So, in your example, you have a tick at 0 and a tick at 1. 

 I've also fixed your cmap, to go from red to green. You need to tell scatter to use the cmap too. 

   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54650655)
 You can tell matplotlib to create a high dpi figure using 

  plt.figure(dpi=300)
  

 before creating your plot. You can save your plot in higher dpi using: 

  plt.savefig("figurename.png", dpi=300)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34549997)
 You would need to tell  matplotlib  through the  pandas.plot  interface that you want the plots on the same  axis  http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html: 

  ax = rawdat.plot(x='ts', y=['bid','ask'], marker='.', lw=0)
plot.hold()
rawdat.plot(x='lastTrade', y='last', marker='x', lw=0, ax=ax)
plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54261569)
 I don't know if it can be done using markers or MarkerStyle, the documentation only specifies how to fill the symbol divided by half. You can mimic that behavior by putting together 2 half circles and rotating them accordingly. 

  import matplotlib.pyplot as plt
import matplotlib as mpl

plt.figure(1)

x = [0,10,20,30,40,50,60,70,80,90]

ax=plt.gca()
rot=0

for i in x:

    HalfA=mpl.patches.Wedge((i, i+20), 5,theta1=0-rot,theta2=180-rot, color='r')
    HalfB=mpl.patches.Wedge((i, i+20), 5,theta1=180-rot,theta2=360-rot, color='b')

    rot=rot+360/len(x)

    ax.add_artist(HalfA)
    ax.add_artist(HalfB)

    ax.plot(i, i, marker=(2, 0, -i), c='k',markersize=30, linestyle='None')
    ax.plot(i, i, marker=(3, 0, -i), c='k',markersize=10, linestyle='None')


ax.set_xlim((-10, 110))
ax.set_ylim((-10, 130))
  

   



