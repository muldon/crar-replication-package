Query: python append to array in json object
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10895075)
 Just add the dictionary as a dictionary object not a string : 

  jsobj["a"]["b"]["e"].append(dict(f=var3))
  

  

  var1 = 11
var2 = 32
jsonobj = {"a":{"b":{"c": var1,
                     "d": var2,
                     "e": [],
                    },
               },
           }
var3 = 444
jsonobj["a"]["b"]["e"].append(dict(f=var3))
  

 jsonobj will contain : 

  {'a': {'b': {'c': 11, 'd': 32, 'e': [{'f': 444}]}}}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27431152)
 The error message is telling you exactly what's wrong. It's in this line 

  dataL2.append(dataL1['population']) 
  

 dataL2 is a dict(), and dict() does not have a method called append 

 What you want is 

  dataL2["population"] = dataL1['population']
  

 Basically, the call to  json.load()  for this file returns a list of dicts(). JSON arrays map to Python lists, JSON objects map to Python dictionaries. To add a new key to a dict, simply set a value on it. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41988277)
  Update  

 Well since I don't have access to your API I just placed some sample responses, in the format you supplied, inside an array. 

  import json

urls = ['{"attribute1":1, "attribute2":10}', '{"attribute1":67, "attribute2":32}', '{"attribute1":37, "attribute2":12}'];
json_arr = []

for url in urls:
    data = json.loads(url)
    json_arr.append(data)
    with open('data.json', 'w') as outfile:
        json.dump(json_arr, outfile)
  

 Basically we keep an array and append each API response to that array. Then, we can write the accumulative JSON to a file. Also if you want to update the same JSON file on different executions of the code, you can just read the existing output file into an array, in the beginning of the code, and then carry on with my example. 

  
 
Change write mode to append 

 Try changing this: 

  with open('data.json', 'w') as outfile:
  

   

  with open('data.json', 'a') as outfile:
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11313014)
 As explained by others (in answers) you should create a new dictionary for each item on the list elsewhere you reference always the same dictionary 

  import json
part_nums = ['ECA-1EHG102','CL05B103KB5NNNC','CC0402KRX5R8BB104']

def json_list(list):
    lst = []
    for pn in list:
        d = {}
        d['mpn']=pn
        lst.append(d)
    return json.dumps(lst)

 json_list(part_nums)
  

   

  [{"mpn": "ECA-1EHG102"}, {"mpn": "CL05B103KB5NNNC"}, {"mpn": "CC0402KRX5R8BB104"}]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40057410)
 In python, JSON object is converted into  dict  and JSON list is converted into  list  datatypes. 

 So, if you want to check the line content which should be valid  JSON , is  JSON Object  or  JSON Array , then this code will helps you:- 

  import json

# assume that, each line is valid json data
obj = json.loads(line)

# if returns true, then JSON Array
isinstance(obj, list)

# if returns true, then JSON Object.
isinstance(obj, dict)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49797251)
 The type of each element in  diseaseArray  is a  np.int32  as defined by the line: 

  diseaseArray=np.array(diseaseArray,dtype=int)  # Elements are int32
  

  int32  cannot be serialized to JSON by the  JsonResponse  being returned from the view. 

 To fix, convert the id value to a regular  int : 

  def predict(request):
    ...
    for i in diseaseArray:
        if i not in sym:
            dict={'id': int(i)}  # Convert the id to a regular int
            dictArray.append(dict)
            print(dictArray)
    ...
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11312799)
 You are adding the exact same dictionary to the list. You should create a new dictionary for each item in the list: 

  json.dumps([dict(mpn=pn) for pn in lst])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15010525)
 Assuming, you are using json to load the data, I would use a list of namedtuple here to store the data under the key 'metro' 

  >>> from collections import namedtuple
>>> metros = []
>>> for e in data[u'metros']:
    metros.append(namedtuple('metro', e.keys())(*e.values()))


>>> metros
[metro(code=u'SCL', name=u'Santiago', country=u'CL', region=1, coordinates={u'S': 33, u'W': 71}, timezone=-4, continent=u'South America', population=6000000), metro(code=u'LIM', name=u'Lima', country=u'PE', region=1, coordinates={u'S': 12, u'W': 77}, timezone=-5, continent=u'South America', population=9050000)]
>>> 
  



