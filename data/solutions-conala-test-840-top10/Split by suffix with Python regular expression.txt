Query: Split by suffix with Python regular expression
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10697801)
 You may simply specify a number of splits: 

  s.split(' ', 4)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31372685)
 If you're wondering why your original approach didn't work, 

  re.split(r'\wd',"dord word")
  

 It finds all instances of a letter/number/underscore before a "d" and splits on what it finds. So it did this: 

 do[rd] wo[rd] 

 and split on the strings in brackets, removing them. 

 Also note that this could split in the middle of words, so: 

  re.split(r'\wd', "said tendentious")
  

 would split the second word in two. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5894446)
 You can use the regular expression module's split function: 

  re.split("['-]", "pete - he's a boy")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10697862)
 The second argument to  split()  is the maximum number of splits to perform.  If you set this to 4, the remaining string will be item 5 in the list. 

   sp = s.split(' ', 4)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31371916)
 As a better way you can use  re.findall  and use  r'\b(\w+)d\b'  as your regex to find the rest of word before  d : 

  >>> re.findall(r'\b(\w+)d\b',s)
['dor', 'wor']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/514045)
 Use a regular expression: 

  import re 
s = "name[id]"
re.find(r"\[(.*?)\]", s).group(1) # = 'id'
  

  str.split()  takes a string on which to split input.   

  "i,split,on commas".split(',') # = ['i', 'split', 'on commas']
  

 The  re  module also allows you to split by regular expression, which can be  very  useful, and I think is what you meant to do. 

  import re
s = "name[id]"

# split by either a '[' or a ']'
re.split('\[|\]', s) # = ['name', 'id', '']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31371939)
 Since  \w  also captures digits and underscore, I would define a word consisting of just letters with a  [a-zA-Z]  character class: 

  print [x.group(1) for x in re.finditer(r"\b([a-zA-Z]+)d\b","dord word")]
  

 See http://ideone.com/eTNa9f 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34170405)
 You can use regular expression, https://docs.python.org/3/library/re.html#re.split: 

  >>> import re
>>> re.split('\|| A=', '1|2|234 A=Jim 33')
['1', '2', '234', 'Jim 33']
  

  \|| A=  will match  |  or  A= . The first  |  was escaped because  |  has special meaning in regular expression (meaning OR). 



