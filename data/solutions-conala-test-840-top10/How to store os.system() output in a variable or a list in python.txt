Query: How to store os.system() output in a variable or a list in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46550572)
 you can use  os.popen().read()  

  import os
out = os.popen('date').read()

print out
Tue Oct  3 10:48:10 PDT 2017
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36226723)
 To add to Paul's answer (using subprocess.check_output): 

 I slightly rewrote it to work easier with commands that can throw errors (e.g. calling "git status" in a non-git directory will throw return code 128 and a CalledProcessError) 

 Here's my working Python 2.7 example: 

  import subprocess

class MyProcessHandler( object ):
    # *********** constructor
    def __init__( self ):
        # return code saving
        self.retcode = 0

    # ************ modified copy of subprocess.check_output()

    def check_output2( self, *popenargs, **kwargs ):
        # open process and get returns, remember return code
        pipe = subprocess.PIPE
        process = subprocess.Popen( stdout = pipe, stderr = pipe, *popenargs, **kwargs )
        output, unused_err = process.communicate( )
        retcode = process.poll( )
        self.retcode = retcode

        # return standard output or error output
        if retcode == 0:
            return output
        else:
            return unused_err

# call it like this
my_call = "git status"
mph = MyProcessHandler( )
out = mph.check_output2( my_call )
print "process returned code", mph.retcode
print "output:"
print out
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43756703)
 The  os.system  return the exit code of the command. 

 To capture the output of the command, you can use https://docs.python.org/2/library/subprocess.html#subprocess.check_output 

  output = subprocess.check_output('users', shell=True)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19275432)
 There are many good SO links on this one.  try https://stackoverflow.com/questions/4760215/running-shell-command-from-python-and-capturing-the-output  or https://stackoverflow.com/questions/3503879/assign-output-of-os-system-to-a-variable-and-prevent-it-from-being-displayed-on  for starters.   

  import subprocess
direct_output = subprocess.check_output('ls', shell=True) #could be anything here.
  

 The shell=True flag should be used with caution: 

 From the docs:
Warning 

 Invoking the system shell with shell=True can be a security hazard if combined with untrusted input. See the warning under Frequently Used Arguments for details. 

 See for much more info: http://docs.python.org/2/library/subprocess.html 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6276635)
  import os
from subprocess import *

def run_cmd(cmd):
        p = Popen(cmd, shell=True, stdout=PIPE)
        output = p.communicate()[0]
        return output
  

 As for the second question, see http://www.cyberciti.biz/tips/read-unixlinux-system-ip-address-in-a-shell-script.html 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8537931)
  a=os.popen("your command").read()
  

 new result stored at variable  a  :) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32433981)
 i do it with os.system temp file: 

  import tempfile,os
def readcmd(cmd):
    ftmp = tempfile.NamedTemporaryFile(suffix='.out', prefix='tmp', delete=False)
    fpath = ftmp.name
    if os.name=="nt":
        fpath = fpath.replace("/","\\") # forwin
    ftmp.close()
    os.system(cmd + " > " + fpath)
    data = ""
    with open(fpath, 'r') as file:
        data = file.read()
        file.close()
    os.remove(fpath)
    return data
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2817500)
  popen  is deprecated. Use http://docs.python.org/library/subprocess.html instead. For example, in your case: 

  p1 = Popen(["cat", "log.txt"], stdout=PIPE)
p2 = Popen(["grep", "ERROR"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
  



