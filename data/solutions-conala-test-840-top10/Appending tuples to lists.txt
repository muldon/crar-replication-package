Query: Appending tuples to lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4126275)
 Your problem is this: 

  b.append((a[0][0],a[0,2]))
                     ^
  

 You try to use the nonexistent tuple index  [0, 2]  when you mean  [0][2]  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44270826)
 Using  zip  is the right approach. You just need to add the elements from the tuples  zip  produces. 

  >>> my_list = [[1,2,3,4], [5,6,7,8]]
>>> my_list2 = [['a', 'b', 'c'], ['d', 'e', 'f']]
>>> [x+y for x,y in zip(my_list, my_list2)]
[[1, 2, 3, 4, 'a', 'b', 'c'], [5, 6, 7, 8, 'd', 'e', 'f']]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4126270)
      

  (a[0][0],a[0,2])
           ^^^
  

 this is like doing: 

  (a[0][0],a[(0,2)])
  

 which like the error said : list indices must be integers, not tuple 

 if i'm not mistaken, i think you wanted to do: 

  b.append((a[0][0],a[0][2]))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54227562)
 You can swap the key-value pairs in  d  for more efficient solution: 

  f = [('str1',7.0), ('str2',2.8), ('str3',11.2)]
d = {'aa':'str2', 'bb':'str3', 'cc':'str1'}
new_d = {b:a for a, b in d.items()}
new_f = [[a, b, new_d[a]] for a, b in f]
  

 Output: 

  [['str1', 7.0, 'cc'], ['str2', 2.8, 'aa'], ['str3', 11.2, 'bb']]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45153288)
 You create an empty list each iteration: 

  for i in range(numOfFeeds):
    list_of_tuples = []   # <-- this creates the empty list in each iteration
    ...
    list_of_tuples.append((startPosOfFeeds[i],endPosOfFeeds[i]))
  

 The solution is quite simple: Put the  list_of_tuples = []  in front of the loop: 

  list_of_tuples = []
for i in range(numOfFeeds):
    ...
    list_of_tuples.append((startPosOfFeeds[i],endPosOfFeeds[i]))
  

 

 Note that you could also use  zip  and a list-comprehension instead: 

  list_of_tuples = [(startpos, endpos) for startpos, endpos in zip(startPosOfFeeds, endPosOfFeeds)]
  

 Or just cast the  zip  to a  list : 

  list_of_tuples = list(zip(startPosOfFeeds, endPosOfFeeds))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5378250)
  from collections import defaultdict

d1 = defaultdict(list)

for k, v in l:
    d1[k].append(v)

d = dict((k, tuple(v)) for k, v in d1.iteritems())
  

  d  contains now  {1: ('A', 'B'), 2: ('C',)}  

  d1  is a temporary defaultdict with lists as values, which will be converted to tuples in the last line. This way you are appending to lists and not recreating tuples in the main loop. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37008652)
 Instead of comparing the lists against each other with two  for  loops you could convert them to tuples and use https://docs.python.org/2/library/collections.html#collections.Counter to see how many instances there are. Then you could iterate over the list and pick the first occurrence of every sublist that has multiple instances. 

  from collections import Counter

c = Counter(tuple(l) for l in big_list)
new_list = []
for l in big_list:
    t = tuple(l)
    if c[t] > 1:
        new_list.append(l)
        c[t] = 0
  

 This has  O(n)  time complexity and it will result to the same ordering as original code. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31861705)
 group based on the second and third elements of each tuple, appending the first element to a list then filter out the lists that have a length  < 1: 

  from collections import defaultdict

d = defaultdict(list)
for a,b,c in l:
    d[b,c].append(a)

print([tuple(val) for val in d.values() if len(val)>1])
[('a', 'h'), ('d', 'g')]
  

 To guarantee first match order use an OrderedDict: 

  from collections import OrderedDict
d = OrderedDict()
for a,b,c in l:
    d.setdefault((b,c),[]).append(a)

print([tuple(val) for val in d.values() if len(val)>1])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45145984)
 You can use  operator.itemegetter  to fetch the items from  subList , returning a tuple. You can afterwards cast to a list before appending: 

  from operator import itemgetter

f = itemgetter(2,3,4,5,7)

for subList in file:
    mainList.append(list(f(subList)))
  

 You may drop the list call if your sublist could also pass as tuples. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52563315)
 Create a new dictionary  dic  having for keys the keys of  dic1  and  dic2  and value an empty list, then iterate over  dic1  and  dic2  appending values to  dic : 

  dic1 =  { "first":1, "second":4, "third":8} 
dic2 =  { "first":9, "second":5, "fourth":3}

dic = {key:[] for key in list(dic1.keys()) + list(dic2.keys())}

for key in dic1.keys():
    dic[key].append(dic1[key])

for key in dic2.keys():
    dic[key].append(dic2[key])
  



