Query: How to unzip a list of tuples into individual lists?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12974500)
 If you want a list of lists: 

  >>> [list(t) for t in zip(*l)]
[[1, 3, 8], [2, 4, 9]]
  

 If a list of tuples is OK: 

  >>> zip(*l)
[(1, 3, 8), (2, 4, 9)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11601991)
  

  zipped = zip(filename, human_rating, …)
zipped.sort()
for row in zipped:
     print "{:>6s}{:>5.1f}…".format(*row)
  

 If you really want to get the individual lists back, I would sort them as above, then unzip them: 

  filename, human_rating, … = zip(*zipped)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17238827)
 What you have there is a list of tuples, access them like a list of lists 

  L[3][2]
  

 will get the second element from the 3rd tuple in your list L 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12974504)
 Use  zip(*list) : 

  >>> l = [(1,2), (3,4), (8,9)]
>>> list(zip(*l))
[(1, 3, 8), (2, 4, 9)]
  

 The https://docs.python.org/3/library/functions.html#zip pairs up the elements from all inputs, starting with the first values, then the second, etc. By using  *l  you https://stackoverflow.com/questions/36901, so  zip()  pairs up  1  with  3  with  8  first, then  2  with  4  and  9 . Those happen to correspond nicely with the columns, or the  transposition  of  l . 

  zip()  produces tuples; if you must have mutable list objects, just  map()  the tuples to lists or use a list comprehension to produce a list of lists: 

  map(list, zip(*l))          # keep it a generator
[list(t) for t in zip(*l)]  # consume the zip generator into a list of lists
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11602029)
 How about this:  zip  into a list of tuples, sort the list of tuples, then "unzip"? 

  l = zip(filename, human_rating, ...)
l.sort()
# 'unzip'
filename, human_rating ... = zip(*l)
  

  

  filename, human_rating, ... = zip(*sorted(zip(filename, human_rating, ...)))
  

  

  foo = ["c", "b", "a"]
bar = [1, 2, 3]
foo, bar = zip(*sorted(zip(foo, bar)))
print foo, "|", bar # prints ('a', 'b', 'c') | (3, 2, 1)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22115957)
 I like to use  zip(*iterable)  (which is the piece of code you're looking for) in my programs as so: 

  def unzip(iterable):
    return zip(*iterable)
  

 I find  unzip  more readable. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35813331)
  >>> original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
>>> tuple([list(tup) for tup in zip(*original)])
(['a', 'b', 'c', 'd'], [1, 2, 3, 4])
  

 Gives a tuple of lists as in the question. 

  list1, list2 = [list(tup) for tup in zip(*original)]
  

 Unpacks the two lists. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51627243)
 That's what iterables are for. If you do not know in advance how many objects (of any kind) you expect, do not work with individually named variables, but put them all in a  list ,  tuple  or generator: 

  z = ['abcd', 'efgh']
transposed = list(zip(*z))
# [('a', 'e'), ('b', 'f'), ('c', 'g'), ('d', 'h')]
  

 Now you can iterate and process  whatever number of tuples there are in the transposed matrix. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34668437)
 You can simply use https://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable to flatten the inner tuples, like this 

  for product in p:
    print tuple(itertools.chain.from_iterable(product))
  

 For example, 

  >>> from itertools import chain, product
>>> [tuple(chain.from_iterable(prod)) for prod in product(*lists)]
[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/14060100)
 The available commands are as of pip 1.1 are: 

 
 bundle: Create pybundles (archives containing multiple packages) 
 freeze: Output all currently installed packages (exact versions) to stdout 
 help: Show available commands 
 install: Install packages 
 search: Search PyPI 
 uninstall: Uninstall packages 
 unzip: Unzip individual packages 
 zip: Zip individual packages 
 

 For a list of installed packages, try http://pypi.python.org/pypi/yolk/0.4.3. 



