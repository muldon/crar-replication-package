Query: How to make List from Numpy Matrix in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5183572)
 Use the http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.tolist.html method on the matrix object : 

  >>> import numpy
>>> m = numpy.matrix([1, 2, 3])
>>> type(m)
<class 'numpy.core.defmatrix.matrix'>
>>> m.tolist()
[[1, 2, 3]]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5183720)
 Another way: 

  >>> import numpy as np
>>> m = np.matrix([1,2,3])
>>> np.array(m).flatten().tolist()
[1,2,3]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36973161)
  

  list(a.flat)
  

 for example: 

  >>> import numpy as np
>>> a = np.matrix([[ 0.16666667, 0.66666667, 0.16666667]])
>>> a
matrix([[ 0.16666667,  0.66666667,  0.16666667]])
>>> a.flat
<numpy.flatiter object at 0x0000000002DE8CC0>
>>> a.flat.tolist()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.flatiter' object has no attribute 'tolist'
>>> list(a.flat)
[0.16666666999999999, 0.66666667000000002, 0.16666666999999999]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5183583)
 If  a  is your matrix, try 

  a.ravel().tolist()
  

 but you don't need to turn it into a list to iterate over it. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5183592)
 May not be the optimal way to do this but the following wks: 

  a = numpy.matrix([[ 0.16666667, 0.66666667, 0.16666667]])
list(numpy.array(a).reshape(-1,))
  

  

  numpy.array(a).reshape(-1,).tolist()
  

  

  numpy.array(a)[0].tolist()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27429907)
 Try this simplistic approach. It works with 1D arrays, do not know with higher dimensions. 

  import mumpy as np         # to create a numpy array example
a = np.array([1,2.5,3])    # your 1D numpy array
b = [i for i in a]        # your list out of the original numpy array
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42375410)
 This is not a matrix of type list, it is a list that contains lists.  You may think of it as matrix, but to Python it is just a list 

  alist = [[0.0, 0.0, 0.0, 0.0], [0.02, 0.04, 0.0325, 0.04], [1, 2, 3, 4]]

arr = np.array(alist)
  

  

  arr = np.array([[0.0, 0.0, 0.0, 0.0], [0.02, 0.04, 0.0325, 0.04], [1, 2, 3, 4]])
  

 This creates 2d array, with shape (3,4) and dtype float 

  In [212]: arr = np.array([[0.0, 0.0, 0.0, 0.0], [0.02, 0.04, 0.0325, 0.04], [1, 2, 3, 4]])

In [213]: arr
Out[213]: 
array([[ 0.    ,  0.    ,  0.    ,  0.    ],
       [ 0.02  ,  0.04  ,  0.0325,  0.04  ],
       [ 1.    ,  2.    ,  3.    ,  4.    ]])
In [214]: print(arr)
[[ 0.      0.      0.      0.    ]
 [ 0.02    0.04    0.0325  0.04  ]
 [ 1.      2.      3.      4.    ]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53460888)
 You can index into the  alp  list with your  matrix , you need to make  alp  a numpy array first: 

  numpy.array(alp)[matrix]
  

 Output: 

  array([['l', 'i', 'a'],
       ['a', 'f', 'b'],
       ['u', 'e', 'k']], dtype='<U1')
  

 This uses numpy's advanced indexing. You can find more details https://docs.scipy.org/doc/numpy-1.15.4/reference/arrays.indexing.html#integer-array-indexing if you want to read up on it. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14681777)
 I think you should use numpy, which is purpose-built for working with matrices/arrays, rather than a list of lists.  That would look like this: 

  >>> import numpy as np
>>> list_ = [0,1,2,3]
>>> a = np.array(list_).reshape(2,2)
>>> a
array([[0, 1],
       [2, 3]])
>>> a.shape
(2, 2)
  

 Avoid calling a variable  list  as it shadows the built-in name.   



