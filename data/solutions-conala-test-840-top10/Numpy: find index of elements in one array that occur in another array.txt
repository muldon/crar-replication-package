Query: Numpy: find index of elements in one array that occur in another array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28901411)
 You could use  np.where  and  np.in1d : 

  >>> np.where(np.in1d(A, B))[0]
array([2, 3, 4])
  

  np.in1d(A, B)  returns a boolean array indicating whether each value of  A  is found in  B .  np.where  returns the indices of the  True  values. (This will also work if your arrays are not sorted.) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28901361)
 You should start with  np.intersect1d , which finds the set intersection (common elements) between arrays. 

  In [5]: np.intersect1d(A, B)
Out[5]: array([50, 78, 85])
  

 To get the desired output from your question, you can then use  np.searchsorted  with just those items: 

  In [7]: np.searchsorted(A, np.intersect1d(A, B))
Out[7]: array([2, 3, 4])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36640724)
 I want to suggest one-line solution: 

  indices = np.where(np.in1d(x, y))[0]
  

 The result is an array with indices for x array which corresponds to elements from y which were found in x. 

 One can use it without numpy.where if needs. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42442435)
 You can use  numpy.in1d  to find out the elements of  b  also in  a , logical indexing and  numpy.where  can get the elements and index correspondingly: 

  logic = np.in1d(b, a)    
list(zip(b[logic], np.where(logic)[0]))
# [(4.0, 0), (5.0, 2), (6.0, 4), (7.0, 6)]

b[logic], np.where(logic)[0]
# (array([ 4.,  5.,  6.,  7.]), array([0, 2, 4, 6]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8251757)
 As Joe Kington said, http://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html can search element very quickly. To deal with elements that are not in x, you can check the searched result with original y, and create a masked array: 

  import numpy as np
x = np.array([3,5,7,1,9,8,6,6])
y = np.array([2,1,5,10,100,6])

index = np.argsort(x)
sorted_x = x[index]
sorted_index = np.searchsorted(sorted_x, y)

yindex = np.take(index, sorted_index, mode="clip")
mask = x[yindex] != y

result = np.ma.array(yindex, mask=mask)
print result
  

 the result is: 

  [-- 3 1 -- -- 6]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21885679)
 I'd like to use  np.argsort  to get the indices of the non-zero elements: 

  In [351]: a=np.array([0,1,0,1,0,0,1])

In [352]: from random import choice
     ...: idx=choice(np.where(a)[0]) #or np.nonzero instead of np.where

In [353]: b=np.zeros_like(a)
     ...: b[idx]=1
     ...: b
Out[353]: array([0, 1, 0, 0, 0, 0, 0])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19547199)
 I think this would be the easiest way, although it doesn't use any fancy numpy function 

  a       = np.array([1,2,3,4,5,1,6,1])                                        
min_val = a.min()                                                            

print "min_val = {0}".format(min_val)                                        

# Find all of them                                                           
min_idxs = [idx for idx, val in enumerate(a) if val == min_val]              
print "min_idxs = {0}".format(min_idxs)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47194040)
 If you store  a  as a two-dimensional numpy array: 

  >>> a = np.array([[0.1, 0.1, 0.1], [0.2, 0.2, 0.2]])
# result: array([[ 0.1,  0.1,  0.1],
#                [ 0.2,  0.2,  0.2]])
  

 or even convert  a  to a numpy array via  a = np.array(a) ,
then you can use the list b to access the elements as desired: 

  >>> b = [0,0,0,1]
>>> print(a[b])
array([[ 0.1,  0.1,  0.1],
       [ 0.1,  0.1,  0.1],
       [ 0.1,  0.1,  0.1],
       [ 0.2,  0.2,  0.2]])
  

 and if you need a  list  as output then use  tolist()  method of the  numpy  arrays: 

  >>> (np.asarray(a)[b]).tolist()
[[0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.2, 0.2, 0.2]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8251668)
   

 It does assume that every element of y is in x, (and will return results even for elements that aren't!) . 

  import numpy as np

# Generate some example data...
x = np.arange(1000)
np.random.shuffle(x)
y = np.arange(100)

# Actually preform the operation...
xsorted = np.argsort(x)
ypos = np.searchsorted(x[xsorted], y)
indices = xsorted[ypos]
  



