Query: How to remove parentheses only around single words in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31405452)
  re.sub(r'\((\w+)\)',r'\1',s)
  

 Use  \1  or backreferencing. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41650135)
 This will remove spaces in front and behind the words inside the parenthesis. 

  import re
my_string = 'abcd (   ef dfg dfg  ) gh'
print re.sub('\(\s*(.*?)\s*\)', lambda x: ''.join(x.group().split()), my_string, re.DOTALL)
  

 Output: 

  abcd (efdfgdfg) gh
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41650186)
 Here is one general way that will work for nested parenthesis as well: 

  In [27]: my_string = 'abcd (  ()e(e w  )f ) gh'

In [28]: re.sub(r' \(\s+|\s+\)', lambda x: x.group().strip(), my_string)
Out[28]: 'abcd(()e(e w)f) gh'
  

 If you want to remove spaces even between words you can play around with  http://www.regular-expressions.info/lookaround.html ;-): 

  In [40]: my_string = 'abcd (  ()e(e w  )f ) gh'

In [41]: re.sub(r'\s+(?=[^[\(]*\))|((?<=\()\s+)', '', my_string)
Out[41]: 'abcd (()e(ew)f) gh'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17353587)
 Your problem is not well defined.  

 Your description of the rules is 

 
   In other words if it is one word seperated by a space then split it
  from the next word, if it is in parentheses then split the whole group
  of words in the parentheses and remove them. Same goes for the commas. 
 

 I guess with commas you mean inverted commas == quotation marks.  

  

  strs = "Hello (Test1 test2) (Hello1 hello2) other_stuff"
  

   

  ["Hello (Test1 test2) (Hello1 hello2) other_stuff"]
  

 since everything is surrounded by inverted commas. Most probably, you want to work with no care of largest inverted commas. 

 I propose this, although a bot ugly 

  import re, itertools
strs = raw_input("enter a string list ")

print [ y for y in list(itertools.chain(*[re.split(r'\"(.*)\"', x) 
        for x in re.split(r'\((.*)\)', strs)])) 
        if y <> '']
  

  

  >>> 
enter a string list here there (x y ) thereagain "there there"
['here there ', 'x y ', ' thereagain ', 'there there']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31405470)
 You can use back-reference (actually in  sub  function they called group reference numbers): 

  >>> s='((Xyz_lk) some stuff (XYZ_l)) (and even more stuff (XyZ))'
>>> 
>>> re.sub(r'\((\w+)\)',r'\1',s)
'(Xyz_lk some stuff XYZ_l) (and even more stuff XyZ)'
>>> 
  

 For more info read the following explanation about backreferences from http://www.regular-expressions.info/backref.html: 

 
   Backreferences match the same text as previously matched by a capturing group. Suppose you want to match a pair of opening and closing HTML tags, and the text in between. By putting the opening tag into a backreference, we can reuse the name of the tag for the closing tag. Here's how:  <([A-Z][A-Z0-9]*)\b[^>]*>.</\1> . This regex contains only one pair of parentheses, which capture the string matched by  [A-Z][A-Z0-9]* . This is the opening HTML tag. (Since HTML tags are case insensitive, this regex requires case insensitive matching.) The backreference  \1  (backslash one) references the first capturing group.  \1  matches the exact same text that was matched by the first capturing group. The  /  before it is a literal character. It is simply the forward slash in the closing HTML tag that we are trying to match. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26588446)
 You can use a character class to specify all of the characters you  don't  want for the split.   [^\w@#]  -- this means every character except letters/numbers/underscore/@/# 

 Then you can capture the special characters as well using capturing parentheses in  re.split . 

  filter(None, re.split(r'\s|([^\w@#])', message))
  

 The  filter  is done to remove empty strings from splitting between special characters.  The  \s|  part is so that spaces are not captured. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7752661)
  import re
regex = ur"\[P\] (.) \[/P\]"
line = "President [P] Barack Obama [/P] met Microsoft founder [P] Bill Gates [/P], yesterday."
person = re.findall(regex, line)
print(person)
  

  

  ['Barack Obama', 'Bill Gates']
  

 

 The regex  ur"[\u005B1P\u005D.\u005B\u002FP\u005D]"  is exactly the same
unicode as  u'[[1P].[/P]]'  . 

 The first bracketed group  [[1P]  tells http://docs.python.org/library/re.html#module-re that any of the characters in the list  ['[', '1', 'P']  should match, and similarly with the second bracketed group  [/P]] .That's not what you want at all. So, 

 
 Remove the outer enclosing square brackets. (Also remove the
stray  1  in front of  P .) 
 To protect the literal brackets in  [P] , escape the brackets with a
backslash:  \[P\] . 
 To return only the words inside the tags, place grouping parentheses
around  . . 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54363352)
 You can use  re.findall  with a pattern that optionally matches a number enclosed in parentheses: 

  corrected_string = re.findall(r'[^,()]+(?:\([^)]*\d[^)]*\))?', my_string)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17359498)
 This is doing what you expect 

  import re, itertools
strs = raw_input("enter a string list ")

res1 = [ y for y in list(itertools.chain(*[re.split(r'\"(.*)\"', x) 
        for x in re.split(r'\((.*)\)', strs)])) 
        if y <> '']

set1 = re.search(r'\"(.*)\"', strs).groups()
set2 = re.search(r'\((.*)\)', strs).groups()

print [k for k in res1 if k in list(set1) or k in list(set2) ] 
   + list(itertools.chain(*[k.split() for k in res1 if k 
   not in set1 and k not in set2 ]))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53844479)
 You can use regex here and reduce this to a single  replace  call. 

  words = ["Washington Times", "Washington Post", "Mail The Globe"]
p = '|'.join(words)

finaldata['keyword'] = finaldata['keyword'].str.replace(p, '')
  

 

 For performance, if the data has no NaNs, you should consider using a list comprehension. 

  import re

p2 = re.compile(p)
finaldata['keyword'] = [p2.replace('', text) for text in finaldata['keyword']]
  

 If there are NaNs, you can use select and use  loc  to reassign: 

  m = finaldata['keyword'].notna()
finaldata.loc[m, 'keyword'] = [
    p2.replace('', text) for text in finaldata.loc[m, 'keyword'].tolist()]
  



