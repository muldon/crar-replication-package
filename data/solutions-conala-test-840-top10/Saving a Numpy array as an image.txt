Query: Saving a Numpy array as an image
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43733016)
 Assuming you want a grayscale image: 

  im = Image.new('L', (width, height))
im.putdata(an_array.flatten().tolist())
im.save("image.tiff")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52697225)
 Use  cv2.imwrite . 

  import cv2
assert mat.shape[2] == 1 or mat.shape[2] == 3, 'the third dim should be channel'
cv2.imwrite(path, mat) # note the form of data should be height - width - channel  
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/977040)
 If you have matplotlib, you can do: 

  import matplotlib.pyplot as plt
plt.imshow(matrix) #Needs to be in row,col order
plt.savefig(filename)
  

 This will save the plot (not the images itself). 
https://i.stack.imgur.com/khOOb.jpg 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27115931)
 There's  opencv  for python (https://docs.opencv.org/4.0.1/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce). 

  import cv2
import numpy as np

cv2.imwrite("filename.png", np.zeros((10,10)))
  

 useful if you need to do more processing other than saving. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27600955)
 Try transposing  arr  which gives you an  (256, 256, 3)  array: 

  arr = np.random.uniform(size=(3,256,256))*255
img = Image.fromarray(arr.T, 'RGB')
img.save('out.png')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51266549)
 Convert the numpy arrays to PIL Image structure, then use BytesIO to store the encoded image.                

  img_crop_pil = Image.fromarray(numpy_image)
byte_io = BytesIO()
img_crop_pil.save(byte_io, format="JPG")
png_buffer = byte_io.getvalue()
byte_io.close()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49220832)
 You can use 'skimage' library in Python 

 Example: 

  from skimage.io import imsave
imsave('Path_to_your_folder/File_name.jpg',your_array)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8538444)
 An answer using http://www.pythonware.com/products/pil/ (just in case it's useful). 

 given a numpy array "A": 

  from PIL import Image
im = Image.fromarray(A)
im.save("your_file.jpeg")
  

 you can replace "jpeg" with almost any format you want. More details about the formats http://www.pythonware.com/library/pil/handbook/index.htm 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48478093)
 You can use https://github.com/drj11/pypng/ Library. It can be very simple with this library like 

  import png
png.from_array(X, 'L').save("file.png")
  

 You can also use  scipy  like following 

  import scipy.misc
scipy.misc.imsave('file.png', X)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44057304)
 I found a solution that circumvents writing to disk:  

  from io import BytesIO
import requests
import numpy as np 
from PIL import Image
def load_image(url): 
    res = requests.get(url)
    if res == 200 and 'jpeg' in res.headers['content-type']:
        img_arr = np.array(Image.open(BytesIO(res.content)))
        return img_arr
    else: 
        return None
  

 As far as I can tell, I'm converting between three different representations:  bytes -> BytesIO -> PIL.Image -> np.array  

 is there a more performant way to do it?  



