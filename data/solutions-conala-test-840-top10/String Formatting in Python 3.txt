Query: String Formatting in Python 3
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25441669)
 It is mentioned in the documentation: 

 
   The conversion field causes a type coercion before formatting.
  Normally, the job of formatting a value is done by the  __format__() 
  method of the value itself. However, in some cases it is desirable to
  force a type to be formatted as a string, overriding its own
  definition of formatting. By converting the value to a string before
  calling  __format__() , the normal formatting logic is bypassed. 
  
   Two conversion flags are currently supported: ' !s ' which calls
   str()  on the value, and ' !r ' which calls  repr() . 
 

 An example can be taken (again from https://docs.python.org/2/library/string.html#formatexamples) to show the difference: 

  >>> "repr() shows quotes: {!r}; str() doesn't: {!s}".format('test1', 'test2')
"repr() shows quotes: 'test1'; str() doesn't: test2"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20586044)
 I would use the modern http://docs.python.org/2/library/string.html#string.Formatter.format method: 

  >>> '{}'.format(38.2551994324)
'38.2551994324'
  

 The modulo method for string formatting is now deprecated as per http://www.python.org/dev/peps/pep-3101 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17537283)
 You can do this (using http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html#format%28java.lang.String,%20java.lang.Object...%29: 

  int x = 4;
int y = 5;

String res = String.format("%d + %d = %d", x, y, x+y);
System.out.println(res); // prints "4 + 5 = 9"

res = String.format("%d %d", x, y);
System.out.println(res); // prints "4 5"
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1455623)
  >>> thetuple = (1, 2, 3)
>>> print "this is a tuple: %s" % (thetuple,)
this is a tuple: (1, 2, 3)
  

 Making a singleton tuple with the tuple of interest as the only item, i.e. the  (thetuple,)  part, is the key bit here. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32782053)
 No need to do that. The  %s  is a string formatting syntax used for printing. This might help add some more context:  

 https://stackoverflow.com/questions/997797/what-does-s-mean-in-python 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1455620)
 This doesn't use string formatting, but you should be able to do: 

  print 'this is a tuple ', (1, 2, 3)
  

 If you really want to use string formatting: 

  print 'this is a tuple %s' % str((1, 2, 3))
# or
print 'this is a tuple %s' % ((1, 2, 3),)
  

 Note, this assumes you are using a Python version earlier than 3.0. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28747429)
 I think that this combination is missing :P 

  "[{0}, {1}, {2}]".format(*[1, 2, 3])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17537310)
 The http://docs.oracle.com/javase/7/docs/api/java/text/MessageFormat.html class looks like what you're after. 

  System.out.println(MessageFormat.format("{0} + {1} = {2}", x, y, x + y));
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14506440)
 Yes, that is exactly what  %s   means ; convert the argument to a string and interpolate it. 

 You can also specify other forms of conversion, such as  %d  and  %f  to convert values to different types of representations. See http://docs.python.org/2/library/stdtypes.html#string-formatting-operations for more details. 

 As an alternative, as of Python 2.6 and up you can also use a different form of string formatting http://docs.python.org/2/library/stdtypes.html#str.format: 

  print 'Integer: {0}; Float: {1}; String: {2}'.format(a, b, c)
  

 That method offers some extra features, such as referring to attributes of objects, keys in a mapping or indexes in a list to refer to values. 



