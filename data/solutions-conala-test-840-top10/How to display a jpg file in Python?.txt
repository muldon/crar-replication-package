Query: How to display a jpg file in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52496689)
 Running through this for loop, you're checking each file in the directory against a very specific file name (first  out1*.jpg , then  out2*.jpg ) with no guarantee that the order of these files matches. When I tried to run the code locally for example, it first compared out2a.jpg with the pattern  out1*.jpg , then out2b.jpg with  out2*.jpg , then  test.py  (the script) with  out3*.jpg . 

 You'd be better off using a module like  glob  (https://docs.python.org/3/library/glob.html) to search for 'out*.jpg':  glob.glob('out[0-9]*.jpg') . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5333263)
  

  import Image
  

 In order to show it use this : 

  Image.open('pathToFile').show()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52017659)
 I was getting the same issue. I have windows and Python 3.6. So I found two solutions for this either you use/convert to  .png  image (with the same function you have used): 

<pre class="lang-py prettyprint-override"> photo = PhotoImage('xyz.png')
l = Label(image = photo)
l.pack()
  

 or  if you want to read  .jpg  file only then use PIL library to read and display an image like this: 

<pre class="lang-py prettyprint-override"> from PIL import ImageTk, Image
img = ImageTk.PhotoImage(Image.open("xyz.jpg"))  
l=Label(image=img)
l.pack()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35004818)
 Python is case-sensitive. You are importing  Image  so use it. 

 Change  image  to  Image  in  im = image("image.jpg") 
It'll become: 

  from PIL import Image
import picamera
camera = picamera.PiCamera()
camera.capture("image.jpg")
im = Image.open("image.jpg")
im.show()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12429550)
 As always, http://docs.python-requests.org to the rescue: 

  >>> r = requests.get('http://www.solarspace.co.uk/PlanetPics/Neptune/NeptuneAlt1.jpg')
>>> i = Image.open(StringIO.StringIO(r.content))
>>> i.size
(262, 299)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1356598)
 you can modify http://www.daniweb.com/code/snippet622.html using  urllib.urlopen() . But I don't know (as I haven't tested it) if you can make this step without saving the (image) file locally. But IMHO  urlopen  returns a file handle that is usable in  tk.PhotoImage() . 

 For jpg files in PhotoImage you need http://www.pythonware.com/products/pil/: 

  from PIL import Image, ImageTk
image = Image.open("test.jpg")
photo = ImageTk.PhotoImage(image)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42567537)
 Ok, I have exactly the same problem as apler details above.  I am going thru a detailed example, where IPython is used to create an image.  .jpg image from a file, and  confirmed Mac OSX Yosemite can use Python+PIL  to display an image. 

 I had to uninstall PIL, and use Pillow instead, in order for the libjpeg library to be recognized correctly. The Python code  creates  an image - but it will not  display  the image. 

 I try to create the image with:  

  f = BytesIO()
PIL.Image.fromarray(a).save(f, 'jpeg')
clear_output(wait = True)
display(Image(data=f.getvalue()))
  

 What I see when I run the little program in Python is:  

  <IPython.core.display.Image object> 
In : 
  

 This In : looks to be an IPython prompt.   

 It appears that the code example I am working through is specifically designed to use IPython  Notebook  which is  not  the same as IPython, or interactive Python. 

 To use the code above, which is from the Google TensorFlow tutorial, one needs to configure an "IPython Notebook Server" and run something called "Jupyter".  The documentation for Jupyter stuff is at:
http://jupyter-notebook.readthedocs.io/en/latest/ 

 The point apler makes is good.  We should just be able to use plain Python to create a .jpg file, and display it on a Mac running OSX.  I've pulled some code togther to show how to do this.   .jpg image, writes it out to a file, and then displays it using Pillow version of PIL.  (Note: I had to use pip to uninstall original PIL, then pip install Pillow, and I picked up the "libjpeg" library as a .dmg file from the Ethan.Tira-Thompson.com/Mac_OS_X_Ports.html site).  You also need numpy and scipy.misc modules. 

  #
# --- Make+Show immediately a simulated Moire pattern as a .jpg file
#
# --- start Python and import this file with: import MakeShowMoire
# --- or use: execfile ("MakeShowMoire.py")
#
# --- import modules we need 
from PIL import Image, ImageDraw
import numpy as np
import scipy.misc
#
# --- Ok, lets go..
width = 1020
height = 710
channels = 3
#
img = np.zeros((height, width, channels), dtype=np.uint8)
xx, yy = np.mgrid[:height, :width]
circle = (xx - 100) ** 2 + (yy - 100) ** 2
for y in range(img.shape[0]):
    for x in range(img.shape[1]):
        r, g, b = circle[y][x], circle[y][x], circle[y][x]
        img[y] [x] [0] = r
        img[y] [x] [1] = g
        img[y] [x] [2] = b

#
# --- now, we have made the image, lets save it
scipy.misc.imsave("testimg.jpg", img)
#
# --- Since we have saved it, we should be able to display it
image = Image.open("testimg.jpg")
image.show()
  

 Save this file as MakeShowMoire.py.  To run this, start a terminal session, and run Python. I am using Python 2.7.10 [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang 600.0.39)] on darwin, and  Mac OSX is 10.10.5 Yosemite.  When Python runs, just enter: 

  >>> execfile ("MakeShowMoire.py")
  

 And the example should display on your Mac, in a window called "tmpblahblah.BMP", which will be pitched when you close the window, but your testimg.jpg is retained, of course.
I was using "import MakeShowMoire" at Python prompt to run the file, but the namespace does not map to the interactive Python session.  If you use the execfile function, you can re-display the file contents with image.show() again.  Hope this is useful. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23461805)
  import urllib

urllib.urlretrieve("http://8020.photos.jpgmag.com/3670771_314453_2ee7120da5_m.jpg",   "my.jpg")
  

 The "my.jpg" is the path to save the file. It can be "/home/user/pics/my.jpg" etc.. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52496639)
 You are increasing  c  on each iteration (well, on each iteration that found a match but anyway...), so it cannot obviously match "out2a.jpg" AND "out2b.jpg". Assuming you want all file names that match "out" + some number + eventually something else, you can use character ranges instead; ie: 

  for file in os.listdir('.'):
    if fnmatch.fnmatch(file, 'out[0-9]*.jpg'):
        print(file)
  

 NB : you might have to adjust the exact fnmatch pattern according to your needs and what you have in your directory. 

 You can also use  glob.glob  instead, which is both simpler and (according to the doc) more efficient: 

  import glob
for file in glob("out[0-9]*.jpg"):
    print(file)
  

 EDIT : 

 
   I totally understand why it does not display out2a.jpg and out2b.jpg together, but I didn't get why out4.jpg is not displayed!  
 

 Quite simply because  os.listdir()  does not necessarily returns the filenames in the same order as you seemed to expect (on my linux station here, "out4.jpg" comes before the other "outXXX.jpg" files). You can inspect what's happening just by adding a couple prints: 

  c = 1
for file in os.listdir('.'):
    exp = 'out{}*.jpg'.format(c)
    print("file: {} - c : {} - exp : {}".format(file, c, exp))
    if fnmatch.fnmatch(file, exp):
        print(file)
        c +=1
  

  

  file: sofnm.py~ - c : 1 - exp : out1*.jpg
file: out4.jpg - c : 1 - exp : out1*.jpg
file: out2b.jpg - c : 1 - exp : out1*.jpg
file: out1.jpg - c : 1 - exp : out1*.jpg
out1.jpg
file: out2a.jpg - c : 2 - exp : out2*.jpg
out2a.jpg
file: sofnm.py - c : 3 - exp : out3*.jpg
file: out42a.jpg - c : 3 - exp : out3*.jpg
file: out3.jpg - c : 3 - exp : out3*.jpg
out3.jpg
  

 As you can see, your assumption that  os.listdir()  would return the files in a given order (starting with "out1.jpg" and ending with "out4.jpg") was wrong. As a general rule, when your code don't behave as you expect, tracing the code execution (and the relevant values) is most often the simplest way to find out why. 



