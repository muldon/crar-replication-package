Query: Python Add Comma Into Number String
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5180405)
 In Python 2.7 or above, you can use 

  print ("Total cost is: ${:,.2f}".format(TotalAmount))
  

 This is documented in http://www.python.org/dev/peps/pep-0378/. 

 (From your code, I can't tell which Python version you are using.) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35994766)
 A function that works in python2.7+ or python3.1+ 

  def comma(num):
    '''Add comma to every 3rd digit. Takes int or float and
    returns string.'''
    if type(num) == int:
        return '{:,}'.format(num)
    elif type(num) == float:
        return '{:,.2f}'.format(num) # Rounds to 2 decimal places
    else:
        print("Need int or float as input to function comma()!")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25281291)
 if you are using  Python 3  or above, here is an easier way to insert a comma: 

 First way 

  value = -12345672
print (format (value, ',d'))
  

  

  value = -12345672
print ('{:,}'.format(value)) 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5180734)
 This is not particularly elegant but should work too : 

  a = "1000000.00"
e = list(a.split(".")[0])
for i in range(len(e))[::-3][1:]:
    e.insert(i+1,",")
result = "".join(e)+"."+a.split(".")[1]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18915404)
 If you only need to add comma as thousand separator and are using Python 3: 

  print("{0:,g}".format(number))
  

 This uses the format-method of the str-objects. the {0} is a place holder in string, the : says that stuff should be modified. The comma , states that a comma should be used as thousands separator and g is for general number. 

 The 68,471,24,3 seems a bit odd to me.  

 http://docs.python.org/3/library/stdtypes.html#str.format 

 http://docs.python.org/3/library/string.html#format-string-syntax 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19544706)
 Here is a simple solution: 

  >>> a = 12345678
>>> "{:,}".format(a)
'12,345,678'
>>> "{:,}".format(a).replace(",", ".")
'12.345.678'
>>>
  

 This uses the http://docs.python.org/2.7/library/stdtypes.html#str.format method of a string to add the comma separators and then the http://docs.python.org/2.7/library/stdtypes.html#str.replace method to change those commas to periods. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52551622)
 An integer won't include a comma. It's only for making the number readable that you add commas to it. 

 If you meant you want to parse the string into an integer, you should do the following: 

  num = int(a.replace(',', ''))
  

 Afterwards if you want to present this integer with a comma again, you should just: 

  print "{:,}".format(num)
  

 For back and fourth conversion in execution:
https://stackoverflow.com/questions/20686629/how-to-convert-an-integer-to-a-comma-separated-string and https://stackoverflow.com/questions/9452108/how-to-use-string-replace-in-python-3-x can help 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5180615)
 You could use http://docs.python.org/library/locale.html#locale.currency if  TotalAmount  represents money. It works on Python <2.7 too: 

  >>> locale.setlocale(locale.LC_ALL, '')
'en_US.utf8'
>>> locale.currency(123456.789, symbol=False, grouping=True)
'123,456.79'
  

 Note: it doesn't work with the  C  locale so you should set some other locale before calling it. 



