Query: Zip with list output instead of tuple
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41016636)
 You almost had the answer yourself. Don't use  map  instead of  zip . Use  map   AND   zip . 

 You can use map along with zip for an elegant, functional approach: 

  list(map(list, zip(a, b)))
  

  zip  returns a list of tuples.  map(list, [...])  calls  list  on each tuple in the list.  list(map([...])  turns the map object into a readable list. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19747941)
  

  >>> def list_(*args): return list(args)

>>> map(list_, range(5), range(9,4,-1))
[[0, 9], [1, 8], [2, 7], [3, 6], [4, 5]]
  

 Or even better: 

  >>> def zip_(*args): return map(list_, *args)
>>> zip_(range(5), range(9,4,-1))
[[0, 9], [1, 8], [2, 7], [3, 6], [4, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41117984)
 You're wrongly applying  zip  on one list.  zip  doesn't complain, but it just adds one tuple dimension to your list, not of much use: 

  >>> list (zip([1,2,3,4]))
[(1,), (2,), (3,), (4,)]
  

 You need to expand the sublists as positional arguments (using  *  operator) to pass to  zip : 

  z = [['0/1:7,3:10:99', '0/0:3:3:99'], ['0/0:12:12:99', '0/1:11,7:18:99'], ['0/1:8,7:15:99', '0/1:14,4:18:99']]

print(list(zip(*z)))   # convert to list for python 3 compat.
  

 result: 

  [('0/1:7,3:10:99', '0/0:12:12:99', '0/1:8,7:15:99'), ('0/0:3:3:99', '0/1:11,7:18:99', '0/1:14,4:18:99')]
  

 note that  zip  issues tuples by default. To create  list  types instead: 

  print([list(x) for x in zip(*z)])
  

 result: 

  [['0/1:7,3:10:99', '0/0:12:12:99', '0/1:8,7:15:99'], ['0/0:3:3:99', '0/1:11,7:18:99', '0/1:14,4:18:99']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8372442)
 If you are zipping more than 2 lists (or even only 2, for that matter), a readable way would be: 

  [list(a) for a in zip([1,2,3], [4,5,6], [7,8,9])]
  

 This uses list comprehensions and converts each element in the list (tuples) into lists. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22304900)
 I love the elegance of the zip function, but using the itemgetter() function in the operator module appears to be much faster.  I wrote a simple script to test this: 

  import time
from operator import itemgetter

list1 = list()
list2 = list()
origlist = list()
for i in range (1,5000000):
        t = (i, 2*i)
        origlist.append(t)

print "Using zip"
starttime = time.time()
list1, list2 = map(list, zip(*origlist))
elapsed = time.time()-starttime
print elapsed

print "Using itemgetter"
starttime = time.time()
list1 = map(itemgetter(0),origlist)
list2 = map(itemgetter(1),origlist)
elapsed = time.time()-starttime
print elapsed
  

 I expected zip to be faster, but the itemgetter method wins by a long shot: 

  Using zip
6.1550450325
Using itemgetter
0.768098831177
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14046629)
 You are looping over the result rows, not a series of numbers. Use  .append()  to add items to  latitudes  and  longitudes  instead: 

  for i in output:
    latitudes.append(i[0])
    longitudes.append(i[1])  
  

 The  for  loop takes each item of  output  and assigns it to the variable  i , so  i  is a result row tuple, not an integer. It might be easier to understand if you renamed the variable: 

  for row in output:
    latitudes.append(row[0])
    longitudes.append(row[1])  
  

 If your result rows contain only 2 columns per row, you can also use a  zip()  trick to split out the columns into separate lists: 

  latitudes, longitudes = zip(*output)
  

  *output  means: apply each element from  output  as a separate argument to the  zip()  built-in function, so  zip()  is called with  zip(output[0], output[1], output[2], ...) .  zip()  takes each element from those individual rows, and combines those into new output lists. Two columns per row means  zip(*output)  produces two output lists. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31349563)
  >>> exampleList = [['A', 'B', 'C', 'D'], [1, 2, 3, 4], [10, 20, 30, 40]]
>>> list(zip(*exampleList))
[('A', 1, 10), ('B', 2, 20), ('C', 3, 30), ('D', 4, 40)]
  

 Edit: 

 If you want your output to be a list of lists, instead of a list of tuples, 

  [list(i) for i in zip(*empampleList)]
  

 should do the trick 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29482145)
 You can transpose a matrix using the built-in function https://docs.python.org/2/library/functions.html?highlight=zip%20function#zip: 

  def transpose(m):
    return zip(*m)
  

 From the docs: 

 
   This function returns a list of tuples, where the i-th tuple contains
  the i-th element from each of the argument sequences or iterables. The
  returned list is truncated in length to the length of the shortest
  argument sequence. When there are multiple arguments which are all of
  the same length,  zip()  is similar to  map()  with an initial argument of
   None . With a single sequence argument, it returns a list of 1-tuples.
  With no arguments, it returns an empty list. 
  
   The left-to-right evaluation order of the iterables is guaranteed.
  This makes possible an idiom for clustering a data series into
  n-length groups using  zip(*[iter(s)]*n) . 
 

 To make this return a list of lists instead of a list of tuples, return the following list comprehension: 

  [list(r) for r in zip(*m)]
  

 Here's how to do it using append: 

  def transpose(m):
    transposed = [[] for _ in range(len(m[0]))]
    for i in range(len(m)):
        for j in range(len(m[0])):
            transposed[j].append(m[i][j])
    return transposed
  

 As you can see, using  zip  is much easier.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54116807)
 You can use a nested list comprehension to flatten the output instead: 

  shuffled = [
    i
    for t in zip(lhand_deck, rhand_deck)
    for i in t
]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/46690539)
  args  is a tuple containing the passed parameters. You should  unpack  using the 'splat' operator so  zip  works on the items in the tuple (the parameters) and not  args  itself: 

  def zippy(*args):
    return list(zip(*args))
#                   ^
  



