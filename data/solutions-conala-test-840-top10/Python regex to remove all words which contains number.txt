Query: Python regex to remove all words which contains number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18082370)
 Here's my approach: 

  >>> import re
>>> s = "ABCD abcd AB55 55CD A55D 5555"
>>> re.sub("\S*\d\S*", "", s).strip()
'ABCD abcd'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18082240)
 Do you need a regex? You can do something like 

  >>> words = "ABCD abcd AB55 55CD A55D 5555"
>>> ' '.join(s for s in words.split() if not any(c.isdigit() for c in s))
'ABCD abcd'
  

 If you really want to use regex, you can try  \w*\d\w* : 

  >>> re.sub(r'\w*\d\w*', '', words).strip()
'ABCD abcd'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40020376)
 You can use this regex: 

  >>> s = "12 word word2"
>>> print re.sub(r'\b[0-9]+\b\s*', '', s)
word word2
  

  \b  is used for word boundary and  \s*  will remove 0 or more spaces after your number word. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39418787)
  

  \s*\b(?=[a-zA-Z\d]*([a-zA-Z\d])\1{3}|\d+\b)[a-zA-Z\d]+
  

 See the https://regex101.com/r/qA0aS0/1 

 Only alphanumeric words are matched with this pattern: 

 
  \s*  - zero or more whitespaces 
  \b  - word boundary 
  (?=[a-zA-Z\d]*([a-zA-Z\d])\1{3}|\d+\b)  - there must be at least 4 repeated consecutive letters or digits in the word OR the whole word must consist of only digits 
  [a-zA-Z\d]+  - a word with 1+ letters or digits. 
 

 http://ideone.com/5OiEtS 

  import re
p = re.compile(r'\s*\b(?=[a-z\d]*([a-z\d])\1{3}|\d+\b)[a-z\d]+', re.IGNORECASE)
s = "df\nAll aaaaaab the best 8965\nUS issssss is 123 good \nqqqq qwerty 1 poiks\nlkjh ggggqwe 1234 aqwe iphone5224s"
strs = s.split("\n")                   # Split to test lines individually
print([p.sub("", x).strip() for x in strs])
# => ['df', 'All the best', 'US is good', 'qwerty poiks', 'lkjh aqwe iphone5224s']
  

 Note that  strip()  will remove remaining whitespaces at the start of the string. 

 A similar solution in R with a TRE regex: 

  x <- c("df", "All aaaaaab the best 8965", "US issssss is 123 good ", "qqqq qwerty 1 poiks", "lkjh ggggqwe 1234 aqwe iphone5224s")
p <- " *\\b(?:[[:alnum:]]*([[:alnum:]])\\1{3}[[:alnum:]]*|[0-9]+)\\b"
gsub(p, "", x)
  

 See a http://ideone.com/k51nyu 

  Pattern details  and <a href="https://regex101.com/r/sL0wE8/1" : 

 
  \s*  - 0+ whitespaces 
  \b  - a leading word boundary 
  (?:[[:alnum:]]*([[:alnum:]])\1{3}[[:alnum:]]*|[0-9]+)  - either of the 2 alternatives:

 
  [[:alnum:]]*([[:alnum:]])\1{3}[[:alnum:]]*  - 0+ alphanumerics followed with the same 4 alphanumeric chars, followed with 0+ alphanumerics 
  |   - or 
  [0-9]+  - 1 or more digits 
  
  \b  - a trailing word boundary 
 

 UPDATE: 

 To also add an option to remove 1-letter words you may use 

 
  R  (add  [[:alpha:]]|  to the alternation group):  \s*\b(?:[[:alpha:]]|[[:alnum:]]*([[:alnum:]])\1{3}[[:alnum:]]*|[0-9]+)\b  (see <a href="https://regex101.com/r/sL0wE8/3" ) 
  Python  lookaround based regex (https://regex101.com/r/qA0aS0/2  [a-zA-Z]\b|  to the lookahead group):  *\b(?=[a-zA-Z]\b|\d+\b|[a-zA-Z\d]*([a-zA-Z\d])\1{3})[a-zA-Z\d]+  
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13454280)
 Depends on what a 'word' is I guess, but if we're talking whitespace as separators and if it doesn't have to be a regex: 

  >>> ' '.join(filter(str.isalpha, a.split()))
'London String'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53845846)
 You can use this regex to match and replace it with empty string, 

  \|[^|]*\|
  

  Explanation of this regex:  This regex basically captures a  |  followed by any character (except  | ) zero or more times and finally captures a  |  character and then stops capturing and replaces all matched characters with empty string. 

  https://regex101.com/r/1PZXHe/1  

 Here is the python code for same, 

  import re

s = '2018-01-31 05:29:37 | Jan Pong Lee | [Number of contacts]:1'
ret = re.sub(r'\|[^|]*\|', '', s)
print (ret)
  

 Which prints the remaining string after removal of  | Jan Pong Lee | . This will work no matter whatever number of words you have inside those pipes. 

  2018-01-31 05:29:37  [Number of contacts]:1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50721919)
 Or, without regex: 

  def remove_digits(s):
    return ''.join([x for x in s if not x.isdigit()])

def is_combined(s):
    return any(x.isalpha() for x in s) and any(x.isdigit() for x in s)

' '.join([remove_digits(x) if is_combined(x) else x for x in test.split()])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18752448)
 I would prefer to have 2 passes to simplify the regex. First pass removes non-alphas, second removes multiple spaces. 

  pass1 = re.sub(r'[^A-Za-z\s]','',str)    # remove non-alpha
pass2 = re.sub(r'\s+',' ',pass1);       # collapses spaces to 1
  



