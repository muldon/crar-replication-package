Query: Replace the single quote (') character from a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18051682)
 According to http://docs.python.org/2/reference/lexical_analysis.html: 

 
   The backslash (\) character is used to escape characters that
  otherwise have a special meaning, such as newline, backslash itself,
  or the quote character. 
 

 You need to escape backslash with another backslash: 

  x.replace('\\', '-')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31220284)
 Escape the quote: 

  mystring.replace('\'"', '"')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3151171)
 As for how to represent a single apostrophe as a string in Python, you can simply surround it with double quotes ( "'" ) or you can escape it inside single quotes ( '\'' ). 

 To remove apostrophes from a string, a simple approach is to just replace the apostrophe character with an empty string: 

  >>> "didn't".replace("'", "")
'didnt'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7395881)
 You can do  string.replace('\xe2', "'")  to replace them with the normal single-quote. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7396665)
 The problem here is with the encoding  of the file you downloaded  ( aa_meetings.csv ).  The server doesn't declare an encoding in its HTTP headers, but the only non-ASCII<sup>1</sup> octet in the file has the value 0x92.  You say that this is supposed to be "the dreaded weird single-quote character", therefore the file's encoding is http://en.wikipedia.org/wiki/Windows-1252.  But you're trying to search and replace for the UTF-8 encoding of U+2019, i.e.  '\xe2\x80\x99' , which is not what is in the file. 

 Fixing this is as simple as adding appropriate calls to  encode  and  decode : 

  # encoding: utf-8
import urllib2

# read raw CSV data from URL
url = urllib2.urlopen('http://www.aaphoenix.org/meetings/aa_meetings.csv')
raw = url.read().decode('windows-1252')

# replace bad characters
raw = raw.replace(u'’', u"'")

print(raw.encode("ascii"))
  

 <sup>1</sup> by "ASCII" I mean "the character encoding which maps single octets with values 0x00 through 0x7F directly to U+0000 through U+007F, and does not define the meaning of octets with values 0x80 through 0xFF". 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1907017)
 In Python, there is no difference between strings that are single or double quoted, so I don't know why you would  want to do this. However, if you actually mean single quote characters inside a string, then to replace them with double quotes, you would do this:  mystring.replace('\'', '"')  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7396659)
 This file is encoded in Windows-1252. The apostrophe  U+2019  encodes to  \x92  in this encoding. The proper thing is to decode the file to Unicode for processing: 

  data = open('aa_meetings.csv').read()
assert '\x92' in data
chars = data.decode('cp1252')
assert u'\u2019' in chars
fixed = chars.replace(u'\u2019', '')
assert u'\u2019' not in fixed
  

 The problem was you were searching for a UTF-8 encoded  U+2019 , i.e.  \xe2\x80\x99 , which was not in the file. Converting to Unicode solves this. 

 Using unicode literals as I have here is an easy way to avoid this mistake. However, you can encode the character directly if you write it as  u'’' : 

  Python 2.7.1
>>> u'’'
u'\u2019'
>>> '’'
'\xe2\x80\x99'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14635374)
 The reason you are encountering this is because of the behavior of the  r""  syntax, Taking some explanation from the http://docs.python.org/2/reference/lexical_analysis.html#string-literals 

 
   r"\"" is a valid string literal consisting of two characters: a backslash and a double quote; r"\" is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw string cannot end in a single backslash (since the backslash would escape the following quote character). 
 

 So you will need to use a normal escaped string for the last argument. 

  >>> foo = "/DIR/abc"
>>> print foo.replace(r"/DIR/", "\\\\MYDIR\\data\\")
\\MYDIR\data\abc
  



