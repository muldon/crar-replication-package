Query: What is the best way to sort list with custom sorting parameters in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7997011)
 Python's sorting is stable, so you will maintain the order after the first item regardless. 

  li1.sort(key=lambda x: not x.startswith('b.'))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7997008)
 You can use  sorted , that accepts a  key  argument, and returns a list: 

  >>> li1 = ['a.1', 'b.2', 'c.8']
>>> def k(s):
...     if s.startswith('b.'):
...         return 1
...     else:
...         return 2
...
>>> sorted(li1, key=k)
['b.2', 'a.1', 'c.8']
  

  k  shall return something that can be compared between iterable items. 

 Note:  sort  change the input in-place and returns nothing, when  sorted  returns the sorted list and does not modify your list. Both work the same way. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8108722)
 This worked for me.  Note that  sort()  does not return the sorted list, but  sorted()  does, so if you want to pass this to a template, you should use  sorted  in the parameters, or  sort  before you pass the list as a parameter. 

  itemized_action_list = list(chain(detection_point.insertbodyaction_set.all(),
                                  detection_point.insertheaderaction_set.all(),
                                  detection_point.modifybodyaction_set.all(),
                                  detection_point.modifyheaderaction_set.all(),
                                  detection_point.removebodyaction_set.all(),
                                  detection_point.removeheaderaction_set.all(),
                                  detection_point.redirectaction_set.all()))

sorted(itemized_action_list, key=attrgetter('priority'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11111149)
 Walk through the elements of your dictionary.  For each value, run  sorted  on your list of lists, and tell the sorting algorithm to use the third field of the list as the "key" element.  This key element is what is used to compare values to other elements in the list in order to ascertain sort order.  To tell  sorted  which element of your lists to sort with, use  operator.itemgetter  to specify the third element. 

 Since your timestamps are rigidly structured and each character in the timestamp is more temporally significant than the next one, you can sort them naturally, like strings - you don't need to convert them to times. 

  # Dictionary stored in d
from operator import itemgetter
# Iterate over the elements of the dictionary; below, by
# calling items(), k gets the key value of an entry and 
# v gets the value of that entry
for k,v in d.items():
    if v and isinstance(v[0], list):
        v.sort(key=itemgetter(2)) # Start with 0, so third element is 2
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11850552)
 As a side note, here is a better alternative to implement the same sorting: 

  alist.sort(key=lambda x: x.foo)
  

 Or alternatively: 

  import operator
alist.sort(key=operator.attrgetter('foo'))
  

 Check out the http://wiki.python.org/moin/HowTo/Sorting/, it is very useful.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49328978)
 Use the  key  argument and a list with the custom sorting order. 

  sort_order = [30, 883, 547, 898]
items.sort(key=lambda d: sort_order.index(d['id']))
  

 Using @Sphinx 's recommendation, you could index the list beforehand for some added speed improvement  O(1)  instead of  O(n)  

  sort_order_index = {val: i for i, val in enumerate(sort_order)}
items.sort(key=lambda d: sort_order_index.get(d['id'], 0))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/440611)
 To do so, you need to implement a custom compare: 

  def myCompare(x, y):
   x_name = " ".join(x.split()[2:])
   y_name = " ".join(y.split()[2:])
   return cmp(x_name, y_name)
  

 Then you use that compare definition as the input to your sort function: 

  myList.sort(myCompare)
  



