Query: How do I split a multi-line string into multiple lines?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/172454)
  inputString.splitlines()
  

 Will give you a list with each item, the http://docs.python.org/2/library/stdtypes.html#str.splitlines method is designed to split each line into a list element. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18369530)
 Assuming you are using windows if you do a print of the file to your screen you will see 

  '123 ABCDEF ST\nAPT 456\n'
  

 the  \n  represent the line breaks.     

 so there are a number of ways to get rid of the new lines in the file.  One easy way is to split the string on the newline characters and then rejoin the items from the list that will be created when you do the split 

   myList = [item for item in myFile.split('\n')]
 newString = ' '.join(myList)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32292676)
 If it's just a single string, I would approach this using split: 

  >>> s = 'track-12-29'
>>> s.split('-')[1:]
['12', '29']
  

 If it is a multi-line string, I would use the same approach ... 

  >>> s = 'track-12-29\ntrack-1-210\ntrack-56-1'
>>> results = [x.split('-')[1:] for x in s.splitlines()]
[['12', '29'], ['1', '210'], ['56', '1']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18369533)
 if you want to remove newlines: 

  "".join( my_string.splitlines())
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22233816)
 The best way to do this is to  simply use  str.splitlines  . 

   splitlines()  handles newlines properly, unlike  split("\n")  . 

 It also has the the advantage mentioned by @efotinis of optionally including the newline character in the split result when called with a  True  argument. 

 

  Detailed explanation on why you shouldn't use  split("\n") :  

  \n , in Python, represents a Unix line-break (ASCII decimal code 10), independently from the platform where you run it. However, https://en.wikipedia.org/wiki/Newline#Representations. On Windows,  \n  is two characters,  CR  and  LF  (ASCII decimal codes 13 and 10, AKA  \r  and  \n ), while on any modern Unix (including OS X), it's the single character  LF . 

  print , for example, works correctly even if you have a string with line endings that don't match your platform: 

  >>> print " a \n b \r\n c "
 a 
 b 
 c
  

 However, explicitly splitting on "\n", will yield platform-dependent behaviour: 

  >>> " a \n b \r\n c ".split("\n")
[' a ', ' b \r', ' c ']
  

 Even if you use  os.linesep , it will only split according to the newline separator on your platform, and will fail if you're processing text created in other platforms, or with a bare  \n : 

  >>> " a \n b \r\n c ".split(os.linesep)
[' a \n b ', ' c ']
  

  splitlines  solves all these problems: 

  >>> " a \n b \r\n c ".splitlines()
[' a ', ' b ', ' c ']
  

 

 https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files partially mitigates the newline representation problem, as it converts Python's  \n  into the platform's newline representation.
However, text mode only exists on Windows.  On Unix systems, all files are opened in binary mode, so using  split('\n')  in a UNIX system with a Windows file will lead to undesired behavior. Also, it's not unusual to process strings with potentially different newlines from other sources, such as from a socket. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18369706)
 To replace the newlines with a space: 

  address = '123 ABCDEF ST\nAPT 456\n'
address.replace("\n", " ")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/172468)
 Like the others said: 

  inputString.split('\n')  # --> ['Line 1', 'Line 2', 'Line 3']
  

 This is identical to the above, but the string module's functions are deprecated and should be avoided: 

  import string
string.split(inputString, '\n')  # --> ['Line 1', 'Line 2', 'Line 3']
  

 Alternatively, if you want each line to include the break sequence (CR,LF,CRLF), use the  splitlines  method with a  True  argument: 

  inputString.splitlines(True)  # --> ['Line 1\n', 'Line 2\n', 'Line 3']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46234886)
 I'm hoping I get your logic right - If you want a list of string, each with  at most one  newline delimiter, then the following code snippet will work: 

  # Newline-delimited string
a = "Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7"
# Resulting list
b = []

# First split the string into "1-line-long" pieces
a = a.split("\n")

for i in range(1, len(a), 2):

    # Then join the pieces by 2's and append to the resulting list
    b.append(a[i - 1] + "\n" + a[i]) 

    # Account for the possibility of an odd-sized list
    if i == len(a) - 2: 
        b.append(a[i + 1])

print(b)

>>> ['Line 1\nLine 2', 'Line 3\nLine 4', 'Line 5\nLine 6', 'Line 7']
  

 Although this solution isn't the fastest nor the best, it's easy to understand and it does not involve extra libraries. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52282723)
 The original post requested for code which prints some rows (if they are true for some condition) plus the following row. 
My implementation would be this: 

  text = """1 sfasdf
asdfasdf
2 sfasdf
asdfgadfg
1 asfasdf
sdfasdgf
"""

text = text.splitlines()
rows_to_print = {}

for line in range(len(text)):
    if text[line][0] == '1':
        rows_to_print = rows_to_print | {line, line + 1}

rows_to_print = sorted(list(rows_to_print))

for i in rows_to_print:
    print(text[i])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32994003)
 A simpler way to do it (but I don't know if it is acceptable in your situation) would be: 

  import re

nextline = "DD:MM:YYYY INFO - 'WeeklyMedal: Hole = 1; Par = 4; Index = 2; Distance = 459; Score = { Player1 = 4; Player2 = 6; Player3 = 4 };"

# compiles the regular expression to get the info you want
my_regex = re.compile(r'\w+ \= \w+')

# builds the structure of the dict you expect to get 
final_dict = {'Hole':0, 'Par':0, 'Index':0, 'Distance':0, 'Score':{}}

# uses the compiled regular expression to filter out the info you want from the string
filtered_items = my_regex.findall(nextline)

for item in filtered_items:
    # for each filtered item (string in the form key = value)
    # splits out the 'key' and handles it to fill your final dictionary
    key = item.split(' = ')[0]
    if key.startswith('Player'):
        final_dict['Score'][key] = int(item.split(' = ')[1])
    else:
        final_dict[key] = int(item.split(' = ')[1])
  



