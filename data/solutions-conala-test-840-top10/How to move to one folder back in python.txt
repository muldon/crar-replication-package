Query: How to move to one folder back in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12280309)
 think about using absolute paths 

  import os
pwd = '/home/Desktop/folder'

if some_condition == true :
    path = os.path.join(pwd, "nodes/hellofolder")
    os.chdir(path)
    print os.getcwd()
if another_condition  == true:
    path = os.path.join(pwd, "nodes")
    os.chdir(path) 
    print os.getcwd()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17726833)
 Here is a very platform independent way to do it.  

  In [1]: os.getcwd()
Out[1]: '/Users/user/Dropbox/temp'

In [2]: os.path.normpath(os.getcwd() + os.sep + os.pardir)
Out[2]: '/Users/user/Dropbox/'
  

 Then you have the path, and you can chdir or whatever with it. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15015882)
 For either the os.rename or shutil.move you will need to import the module. 
No * character is necessary to get all the files moved.   

 We have a folder at /opt/awesome called source with one file named awesome.txt.   

  in /opt/awesome
○ → ls
source
○ → ls source
awesome.txt

python 
>>> source = '/opt/awesome/source'
>>> destination = '/opt/awesome/destination'
>>> import os
>>> os.rename(source, destination)
>>> os.listdir('/opt/awesome')
['destination']
  

 We used os.listdir to see that the folder name in fact changed.
Here's the shutil moving the destination back to source.   

  >>> import shutil
>>> shutil.move(destination, source)
>>> os.listdir('/opt/awesome/source')
['awesome.txt']
  

 This time I checked inside the source folder to be sure the awesome.txt file I created exists.  It is there :)  

 Now we have moved a folder and its files from a source to a destination and back again.   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41876691)
 You need to assign path to exact file ( f ) to  filescr  variable on each loop iteration, but not path to  files  ( files  - is a  list !) 

 Try below code 

  import os
from os import path
import shutil

src = "C:\\Users\\****\\Desktop\\test1\\"
dst = "C:\\Users\\****\\Desktop\\test2\\"

files = [i for i in os.listdir(src) if i.startswith("CTASK") and path.isfile(path.join(src, i))]
for f in files:
    shutil.copy(path.join(src, f), dst)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9037651)
 Here's a way to import a file from one level above, using the relative path. 

 Basically, just move the working directory up a level (or any relative location), add that to your path, then move the working directory back where it started. 

  #to import from one level above:
cwd = os.getcwd()
os.chdir("..")
below_path =  os.getcwd()
sys.path.append(below_path)
os.chdir(cwd)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48571873)
 This one should do the job. I created two lists, one of the xmls, one of the jpgs. Then I check, whether a filename exists in both lists. If yes: move! 

 For readability, I added a new function to create the lists. 

  import os
import glob
import shutil

def remove_ext(list_of_pathnames):
    """
    removes the extension from each filename
    """
    return [os.path.splitext(filename)[0] for filename in list_of_pathnames]

path = os.getcwd()
os.chdir("path\\to\\folder\\")   
os.mkdir("image_with_xml")     # create a new folder
newpath = os.path.join("path\\to\\folder\\","image_with_xml") # made it os independent... 

list_of_jpgs = glob.glob(path+"\\*.jpg")
list_of_xmls = glob.glob(path+"\\*.xml")

print(list_of_jpgs, "\n\n", list_of_xmls) #remove

jpgs_without_extension = remove_ext(list_of_jpgs)
xmls_without_extension = remove_ext(list_of_xmls)

print(jpgs_without_extension, "\n\n", xmls_without_extension) #remove

for filename in jpgs_without_extension:
    if filename in xmls_without_extension:
        print("moving", filename) #remove
        shutil.move(filename + '.jpg'), newpath)   # move image to new path.
        shutil.move(filename + '.xml'), newpath)   # move image to new path.
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42354631)
 Since your files and folders are on the same level, you don't need to use  os.walk()  to traverse the directory tree.  os.listdir()  will do instead, as you noted in the comments. One solution would be to get the directory and file lists with  os.listdir()  and find the  new_loc  name in the same way you did before, using  in  instead of regex. 

  folders = [d for d in os.listdir('.') if os.path.isdir(d)]
files = [f for f in os.listdir('.') if os.path.isfile(f)]
for d in folders:
   for f in files:
      if d in f:
          new_loc = subdir + '\\' + d + '\\' + file
          os.rename(the_file, new_loc)
  

 The logic here is about the same as yours, just with a different way of getting your directories and files! 



