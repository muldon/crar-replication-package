Query: Averaging the values in a dictionary based on the key
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29565747)
 Use a dictionary comprehension, where  items  in the list of tuple pairs: 

  data = {i:[int(b) for a, b in items if a == i] for i in set(a for a, b in items)}
data = {a:int(float(sum(b))/float(len(b))) for a, b in data.items()} # averages
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29565828)
  import itertools,csv
from dateutil.parser import parse as dparse

def make_tuples(fname='file.csv'):
    with open(fname, 'rb') as csvfile:
        rows = list(csv.reader(csvfile))
        for month,data in itertools.groupby(rows,lambda x:dparse(x[3]).strftime("%b")):
             data = zip(*data)
             yield (month,sum(data[5])/float(len(data[5])))

print dict(make_tuples('some_csv.csv'))
  

 is one way to do it ... 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29565591)
 You can use https://docs.python.org/2/library/collections.html#collections.defaultdict to create a dictionary with unique keys and lists of values: 

  >>> l=[(3, '655'),(3, '645'),(3, '641'),(4, '602'),(4, '674'),(4, '620')]
>>> from collections import defaultdict
>>> d=defaultdict(list)
>>> 
>>> for i,j in l:
...    d[i].append(int(j))
... 
>>> d
defaultdict(<type 'list'>, {3: [655, 645, 641], 4: [602, 674, 620]})
  

 Then use a list comprehension to create the expected pairs: 

  >>> [(i,sum(j)/len(j)) for i,j in d.items()]
[(3, 647), (4, 632)]
  

 And within your code you can do: 

  with open('file.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        date = time.strptime(row[3], "%a %b %d %H:%M:%S %Z %Y")
        data = date, row[5]

        month = data[0][1]
        avg = data[1]
        d[month].append(int(avg))

     print [(i,sum(j)/len(j)) for i,j in d.items()]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40695988)
  

  print([v for k,v in d.items() if k[0]==7])
  

 result: 

  [[6, 1], [5, 2], [4, 3]]
  

 but you're not taking advantage of the dictionary. For your task I would suggest  collections.defaultdict  with  list  as default argument 

 Demo: 

  import collections

d = collections.defaultdict(list)

d[7].append([6,1])
d[7].append([5,2])
d[7].append([4,3])

print(d[7])
  

 result: 

  [[6, 1], [5, 2], [4, 3]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40695963)
 Your approach for creating a dict is not Good. Instead of doing this, you should create a dict which holds values of all your items as  list .   

 Hence, your dictionary structure should be like: 

  my_dict = {
    7: [[6, 1], [5, 2], [4, 3]],
...
}
  

 Then you can simply access all the values of  7  with: 

  my_dict[7]
  

 Take a look at https://docs.python.org/2/library/collections.html#collections.defaultdict. 

 

 If you still want to go with your approach, you may use  list comprehension  to fetch the values as: 

  key = 7

[v for k , v in my_dict.items() if k[0]==key]
#                                   ^  matches 0th index of key and returns
#                                      returns all the values as list     
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10743213)
 You'll want to use  .items()  rather than  .values() , for example: 

  def keyFromItem(func):
    return lambda item: func(*item)

sorted(
    dict.items(), 
    key=keyFromItem( lambda k,v: (v['total'], k) )
)
  

 The above will sort first based on total, and for items with equal total, will sort them alphabetically by key. It will return items as  (key,value)  pairs, which you could just do  [x[1] for x in sorted(...)]  to get the values. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40695974)
 I would actually change the structure of your dictionary a bit to make it a dictionary that had numbers for keys (i.e., your 6 and 7 that you're talking about here) and then list of tuples for the values.  

  {7: [(6, 1), (5, 2), (4, 3)], 6: ... }
  

 You could also have a list of lists if you wanted. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38858868)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html to perform the  averaging  of both dictionary values, then convert the series back to a dictionary: 

  import pandas as pd

a = pd.Series({'A': 2.0, 'B': 1.2, 'C': 3.0, 'D': 1.0, 'E': 3.0})
b = pd.Series({'A': 0.0, 'B': 1.0, 'C': 1.0, 'D': 1.0, 'E': 1.0})
c = ((a+b)/2).round(1)
print(c.to_dict())
# {'A': 1.0, 'B': 1.1, 'D': 1.0, 'E': 2.0, 'C': 2.0}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53377102)
 If the total revenue is called  a  and the count  b  and they both have the same keys (which they have to), you can use a dict comprehension to calculate the average revenue  c : 

  c = {key: value/b[key] for key, value in a.items()}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52042604)
 You can use the operator to sort the dictionary by values in descending order. 

  import operator

d = {"a":1, "b":2, "c":3}
cd = sorted(d.items(),key=operator.itemgetter(1),reverse=True)
  

 The Sorted dictionary will look like, 

  cd = {"c":3, "b":2, "a":1}
  

 Here, operator.itemgetter(1) takes the value of the key which is at the index 1. 



