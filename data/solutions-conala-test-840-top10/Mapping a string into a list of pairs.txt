Query: Mapping a string into a list of pairs
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41923916)
 You can  zip   word  and  word[1:]  and then use map to join adjacent letters: 

  >>> word = 'abcdef'
>>> map(lambda x: ''.join(x), zip(word, word[1:]))    
# zip function goes as far as the shortest argument, so there is no need to remove the last 
# element from word here             

# ['ab', 'bc', 'cd', 'de', 'ef']
  

 

 The extra  lambda  can be removed with just the join function as commented by @Chepner: 

  >>> map(''.join, zip(word, word[1:]))

# ['ab', 'bc', 'cd', 'de', 'ef']
  

 

 You can also use list-comprehension with the  zip  function: 

  [x + y for x, y in zip(word, word[1:])]

# ['ab', 'bc', 'cd', 'de', 'ef']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19452568)
 Store these string-value pairs in a  dictionary : 

  weights = {'A': 137.05, 'B': 128.09, 'C': 131.04, 'D': 147.06}
  

 and look them up: 

  for chr in peptide:
    sum += weights[chr]
  

 You can use dictionaries whenever you have pairs of names and values, or more generally whenever you want to be able to store and look up some information based on a  key . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7802002)
 Python 3 

 
    urllib.parse.   urlencode   (query, doseq=False, [...])  
  
   Convert  a mapping object  or a sequence of two-element tuples, which may contain str or bytes objects, to a percent-encoded ASCII text string.  
  
   &mdash; https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode 
 

 A  dict  is a mapping. 

 Legacy Python 

 
    urllib.urlencode ( query [,  doseq ]) 
      Convert  a mapping object  or a sequence of two-element tuples to a “percent-encoded” string... a series of  key=value  pairs separated by  '&'  characters... 
  
   &mdash; https://docs.python.org/2.7/library/urllib.html#urllib.urlencode 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41923929)
 This solves your problem: 

  list(map(lambda x, y: x+y, word[:-1], word[1:]))
  

 Just ignoring the last element of word for the first iterable (word[:-1]) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21341208)
 You could make the second mapping automatically from the first: 

  d2 = {v:k for k, v in d1.items()}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10427792)
 Is this what you want?
  

  from pylab import *

L1 = ['London', 'Paris', 'Tokio', 'Berlin', 'Barcelona', 'Reykjavik']
pos = arange(len(L1))
yticks(pos, L1)

I1 = [['London',0],['Paris',10],['Barcelona',23]]
I2 = [['Paris',10],['Tokio',19],['Berlin',21],['Reykjavik',23]]

I1_y = [L1.index(el[0]) for el in I1]
I1_x = [el[1] for el in I1]

I2_y = [L1.index(el[0]) for el in I2]
I2_x = [el[1] for el in I2]

plot(I1_x, I1_y, 'o-')
plot(I2_x, I2_y, 'x-')
grid(True)
savefig('countries.png')
show()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38326239)
 Here's a technique using Perl which may help: 

  my %map = (
    'the'   => 'a',
    'fox'   => 'frog',
    'jumps' => 'somersaults'
);

my $line = "the quick bown fox jumps over the lazy dog";

$line =~ s{\b(\w+)\b}{$map{$1} // $1}eg;

say $line;
  

 This example uses a hard-coded hash mapping orig_strings to replacement_strings - in your case you would populate this mapping hash by reading the file of mapping pairs. 

 Then the regular expression uses  \b(\w+)\b  to capture each word in the line and pass to the replacement side via  $1 .  Because the  /e  option is specified, the right-hand side of the substitution is treated as a Perl expression, and the result of evaluating the expression is the replacement text.   $map{$1}  uses the original word as a key to the mapping hash to look up the replacement text.  The  // $1  part is saying if the hash lookup returns  undef  (i.e. there is no replacement for this word) then just use the original text. 

 The  \w+  part will match a string of word or digit or underscore characters.  You might want only alphabetic characters and perhaps apostrophes and hyphens.  To achieve this, use  [a-zA-Z'-]+  instead of  \w+ . 

 This should be very fast because there's only one regex run across each line and only one hash lookup for each word in each line. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21341231)
 You can use bidict https://pypi.python.org/pypi/bidict to do this. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30863640)
 This can also be done using https://docs.python.org/2/library/re.html. 

 The items you are looking for inside the input string consist of 

 
 two numbers  \d+  
 separated by a semicolon  ;  
 enclosed in curly braces  \{ ,  \} . 
 

 The complete pattern looks like this: 

  pattern = r'\{(\d+);(\d+)\}'
  

 The additional parentheses  ()  define  groups  which allow extracting the numbers, for example with https://docs.python.org/2/library/re.html#re.findall: 

  >>> for item in re.findall(pattern, a):
>>>     print item
('1', '5')
('2', '7')
('3', '9')
('4', '8')
  

 Then it is a simple matter of mapping  int  over the items to get the desired result: 

  >>> [map(int, item) for item in re.findall(pattern, a)]
[[1, 5], [2, 7], [3, 9], [4, 8]]
  

 Some prefer list comprehensions over  map : 

  >>> [[int(x) for x in item] for item in re.findall(pattern, a)]
[[1, 5], [2, 7], [3, 9], [4, 8]]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13761086)
 There is a much better way to generate JSON strings: the http://docs.python.org/2/library/json.html. 

  import json
rs = json.dumps(dict(lst))
  

 This takes advantage of the fact that  dict()  can take a sequence of key-value pairs (two-value tuples) and turn that into a mapping, which the  json  module directly translates to a JSON object structure. 

  

  >>> import json
>>> lst = [("name", "value"), ("name2", "value2")]
>>> rs = json.dumps(dict(lst))
>>> print rs
{"name2": "value2", "name": "value"}
  



