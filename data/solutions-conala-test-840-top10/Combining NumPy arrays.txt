Query: Combining NumPy arrays
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18595575)
 A solution using numpy http://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html: 

  >>> import numpy as np
>>> np.dstack((a,b,c)).swapaxes(1,2)
array([[[ 1,  0,  0],
        [ 5,  9,  9],
        [ 0,  0,  0]],

       [[ 3,  0,  0],
        [37,  8,  9],
        [ 0,  6,  0]],

       [[ 5,  2,  0],
        [49,  8,  3],
        [ 1,  4,  6]],

       [[ 2,  0,  0],
        [ 3,  3,  1],
        [ 6,  2,  0]],

       [[ 1,  2,  1],
        [ 4,  4,  5],
        [ 0,  5,  4]]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6740350)
 I believe it's vstack you want 

  p=array_2
q=array_2
p=numpy.vstack([p,q])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12395487)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html: 

  >>> import numpy as np
>>> a = np.random.random((11, 13))
>>> b = np.random.random((11, 13))
>>> c = np.random.random((11, 13))
>>> 
>>> d = np.dstack([a,b,c])
>>> 
>>> d.shape
(11, 13, 3)
>>> 
>>> a[1,5], b[1,5], c[1,5]
(0.92522736614222956, 0.64294050918477097, 0.28230222357027068)
>>> d[1,5]
array([ 0.92522737,  0.64294051,  0.28230222])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6770852)
 By the way, there is also  r_ : 

  >>> from scipy import *
>>> a = rand(20,100,3)
>>> b = rand(20,100,3)
>>> a.shape
(20, 100, 3)
>>> b.shape
(20, 100, 3)
>>> r_[a,b].shape
(40, 100, 3)
>>> (r_[a,b] == vstack([a,b])).all()
True
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1708874)
 Use  numpy.hstack() : 

  >>> import numpy
>>> desc = {'names': ('gender','age','weight'), 'formats': ('S1', 'f4', 'f4')} 
>>> a = numpy.array([('M',64.0,75.0),('F',25.0,60.0)], dtype=desc)
>>> numpy.hstack((a,a))
array([('M', 64.0, 75.0), ('F', 25.0, 60.0), ('M', 64.0, 75.0),
       ('F', 25.0, 60.0)], 
      dtype=[('gender', '|S1'), ('age', '<f4'), ('weight', '<f4')])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18595635)
 I think I got something that works : 

  >>> print np.hstack([A[:, None, :], B[:, None, :], C[:, None, :]])
[[[ 1  0  0]
  [ 5  9  9]
  [ 0  0  0]]

 [[ 3  0  0]
  [37  8  9]
  [ 0  6  0]]

 [[ 5  2  0]
  [49  8  3]
  [ 1  4  6]]

 [[ 2  0  0]
  [ 3  3  1]
  [ 6  2  0]]

 [[ 1  2  1]
  [ 4  4  5]
  [ 0  5  4]]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39649751)
 Using http://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html makes this trivial: 

  >>> np.stack([A, B, C], axis=1)  # stack along a new axis in axis 1 of the result
array([[[ 1,  0,  0],
        [ 5,  9,  9],
        [ 0,  0,  0]],

       [[ 3,  0,  0],
        [37,  8,  9],
        [ 0,  6,  0]],

       [[ 5,  2,  0],
        [49,  8,  3],
        [ 1,  4,  6]],

       [[ 2,  0,  0],
        [ 3,  3,  1],
        [ 6,  2,  0]],

       [[ 1,  2,  1],
        [ 4,  4,  5],
        [ 0,  5,  4]]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21336552)
 You can use  numpy.vstack() : 

  a = np.array([1,2,3])

np.vstack((a,a,a))
#array([[1, 2, 3],
#       [1, 2, 3],
#       [1, 2, 3]])
  



