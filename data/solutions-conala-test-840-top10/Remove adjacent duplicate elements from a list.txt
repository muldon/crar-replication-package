Query: Remove adjacent duplicate elements from a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51190328)
 
   I need to create a list that removes the adjacent duplicate elements 
 

 Note that your  for  loop based solution will remove ALL duplicates, not only adjacent ones.  

  rand_list = [1, 2, 2, 3, 4, 4, 2, 5, 1]
  

 according to your spec the result should be: 

  [1, 2, 3, 4, 2, 5, 1]
  

   

  [1, 2, 3, 4, 5]
  

 . 

 A working solution to only remove  adjacent  duplicates is to use a generator: 

  def dedup_adjacent(seq):
    prev = seq[0]
    yield prev
    for current in seq[1:]:
        if current == prev:
            continue
        yield current
        prev = current

rand_list = [1, 2, 2, 3, 4, 4, 2, 5, 1]
list(dedup_adjacent(rand_list))
  

 => [1, 2, 3, 4, 2, 5, 1] 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6490520)
 You can do it easily with sets as below: 

  li = list(set(li))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27351413)
 Extremely elegant solution from  Google (source is here: https://developers.google.com/edu/python/exercises/basic): 

  def remove_adjacent(nums):
    result = []
    for num in nums:
        if len(result) == 0 or num != result[-1]:
            result.append(num)
    return result
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38066375)
  import numpy as np
a = np.array([0,0,1,1,1,2,2,0,1,3,3,3])
  

 Use http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing to choose the non-zero elements 

  b = a[a.nonzero()]

>>> b
array([1, 1, 1, 2, 2, 1, 3, 3, 3])
>>>
  

 Shift the array to the left and add an element to the end to compare each element with its neighbor.  Use zero since you know there aren't any in  b . 

  b1 = np.append(b[1:], 0)

>>> b1
array([1, 1, 2, 2, 1, 3, 3, 3, 0])
>>>
  

 Use http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#boolean-array-indexing to get the values you want. 

  c = b[b != b1]

>>> c
array([1, 2, 1, 3])
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51190257)
 Using https://docs.python.org/3/library/itertools.html#itertools.groupby is the simplest approach to remove  adjacent  (and only adjacent) duplicates, even for unsorted input: 

  >>> from itertools import groupby
>>> [k for k, _ in groupby(randList)]
[1, 2, 3, 4, 5]
  

 Removing  all  duplicates while maintaining the order of occurence can be efficiently achieved with an https://docs.python.org/3/library/collections.html#collections.OrderedDict. This, as well, works for ordered and unordered input: 

  >>> from collections import OrderedDict
>>> list(OrderedDict.fromkeys(randList))
[1, 2, 3, 4, 5]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38066090)
 Here's one way: 

  In [62]: x
Out[62]: array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3])

In [63]: selection = np.ones(len(x), dtype=bool)

In [64]: selection[1:] = x[1:] != x[:-1]

In [65]: selection &= x != 0

In [66]: x[selection]
Out[66]: array([1, 2, 1, 3])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34985999)
 You could use a less verbose loop solution: 

  >>> result = xs[:1]
>>> for e in xs:
        if e != result[-1]:
            result.append(e)
  

  

  >>> result = []
>>> for e in xs:
        if e not in result[-1:]:
            result.append(e)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3462493)
 You can use list comprehension. For example something like this should do the job: 

  def remove_adjacent(L):
  return [elem for i, elem in enumerate(L) if i == 0 or L[i-1] != elem]
  

  

  def remove_adjacent(L):
  return [L[i] for i in xrange(len(L)) if i == 0 or L[i-1] != L[i]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34986201)
  

  >>> l = [1,1,2,3,4,4,4,4,5,6,3,3,5,5,7,8,8,8,9,1,2,3,3,3,10,10]
>>> 
>>> o = []
>>> p = None
>>> for n in l:
        if n == p:
            continue
        o.append(n)
        p = n    

>>> o
[1, 2, 3, 4, 5, 6, 3, 5, 7, 8, 9, 1, 2, 3, 10]
  

 Apparently, above solution is more verbose than OP's, so here is an alternative to that using https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.zip_longest from  itertools  module: 

  >>> l
[1, 1, 2, 3, 4, 4, 4, 4, 5, 6, 3, 3, 5, 5, 7, 8, 8, 8, 9, 1, 2, 3, 3, 3, 10, 10]
>>> from itertools import zip_longest
>>> o = [p for p,n in zip_longest(l,l[1:]) if p != n] #By default fillvalue=None
>>> o
[1, 2, 3, 4, 5, 6, 3, 5, 7, 8, 9, 1, 2, 3, 10]
  



