Query: get keys correspond to a value in dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8650438)
  key = 'a'
return [item[0] for item in self.items() if item[1] == key]
  

 This will find all keys with value 'a' and return a list of them. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8650431)
 You could create a new dictionary from the keys and values in the initial one: 

  >>> d2 = dict((v, k) for k, v in d.iteritems())
>>> d2
{'a': 1, 'c': 3, 'b': 2}
>>> d2['a']
1
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8650437)
 You want to invert the mapping: 

 As shown in https://stackoverflow.com/questions/483666/python-reverse-inverse-a-mapping 

  dict((v,k) for k, v in map.iteritems())
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6768549)
 You could run the following, for example: 

  max_value = max(scores.values())
keys = [ i for (i,v) in scores.iteritems() if v == max_value ]
  

 "keys" would now hold all the keys which correspond to the maximum value. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20817872)
 If there are different integers in  dict1 , you can make value->key dictionary from  dict1  and then use it to find corresponding keys from  dict1  for  dict2 : 

  >>> dict1_inverse = dict((v,k) for (k,v) in dict1.iteritems())
>>> dict((k, dict1_inverse[v]) for k,v in dict2.iteritems())
{'a': 'd', 'c': 'f', 'b': 'e'}
  

 But if there are several keys in  dict1  mapping for the same integer, you might get not what you want, e.g.: 

  >>> dict1 = {'a':0, 'b':1, 'c':4,'d':3,'e':4,'f':5}
>>> dict1_inverse = dict((v,k) for (k,v) in dict1.iteritems())
>>> dict((k, dict1_inverse[v]) for k,v in dict2.iteritems())
{'a': 'd', 'c': 'f', 'b': 'e'}
  

 Here  b  could map to  c  or  e , and the result may be different depending on where in the hash-table these keys are in the  dict1 . 

 In this case you may want something like this: 

  >>> dict1 = {'a':0, 'b':1, 'c':4,'d':3,'e':4,'f':5}
>>> dict1_inverse = {}
>>> for k,v in dict1.iteritems():
    dict1_inverse.setdefault(v, []).append(k)


>>> dict1_inverse
{0: ['a'], 1: ['b'], 3: ['d'], 4: ['c', 'e'], 5: ['f']}
>>> dict((k, dict1_inverse[v]) for k,v in dict2.iteritems())
{'a': ['d'], 'c': ['f'], 'b': ['c', 'e']}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43690117)
  

  d = {}; [d.setdefault(i,[]).append(k) for k,v in key_to_list.items() for i in v]
print d
  

 this results in  

  {1: ['three', 'one'],
 2: ['four', 'three', 'two'],
 3: ['one'],
 4: ['two'],
 5: ['four', 'three', 'one'],
 6: ['three', 'two'],
 7: ['four', 'one'],
 8: ['four', 'two']}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30974573)
 In the case you are looking for getting  only one value , there's probably a faster way to do that. If you are sure that the value exists in your dictionnary, then : 

  my_value = 'a'
return next(key for key, value in d.iteritems() if value == my_value)
  

 If you are not sure about getting a result, you can surround that by a try/except catching the  StopIteration  exception. 

 Here, dictionnary's items are generated until the value match. If you have a very large dictionnary, this trick may be faster in some cases. 

<hr />

 Using a large set of data : 

  d1={1: 1, 2: 2, 3: 8, 4: 3, 5: 6, 6: 9, 7: 17, 8: 4, 9: 20, 10: 7, 11: 15,
    12: 10, 13: 10, 14: 18, 15: 18, 16: 5, 17: 13, 18: 21, 19: 21, 20: 8,
    21: 8, 22: 16, 23: 16, 24: 11, 25: 24, 26: 11, 27: 112, 28: 19, 29: 19,
    30: 19, 3077: 36, 32: 6, 33: 27, 34: 14, 35: 14, 36: 22, 4102: 39, 38: 22,
    39: 35, 40: 9, 41: 110, 42: 9, 43: 30, 44: 17, 45: 17, 46: 17, 47: 105, 48: 12,
    49: 25, 50: 25, 51: 25, 52: 12, 53: 12, 54: 113, 1079: 50, 56: 20, 57: 33,
    58: 20, 59: 33, 60: 20, 61: 20, 62: 108, 63: 108, 64: 7, 65: 28, 66: 28, 67: 28,
    68: 15, 69: 15, 70: 15, 71: 103, 72: 23, 73: 116, 74: 23, 75: 15, 76: 23, 77: 23, 
    78: 36, 79: 36, 80: 10, 81: 23, 82: 111, 83: 111, 84: 10, 85: 10, 86: 31, 87: 31, 
    88: 18, 89: 31, 90: 18, 91: 93, 92: 18, 93: 18, 94: 106, 95: 106, 96: 13, 9232: 35, 
    98: 26, 99: 26, 100: 26, 101: 26, 103: 88, 104: 13, 106: 13, 107: 101, 1132: 63, 
    2158: 51, 112: 21, 113: 13, 116: 21, 118: 34, 119: 34, 7288: 45, 121: 96, 122: 21, 
    124: 109, 125: 109, 128: 8, 1154: 32, 131: 29, 134: 29, 136: 16, 137: 91, 140: 16, 
    142: 104, 143: 104, 146: 117, 148: 24, 149: 24, 152: 24, 154: 24, 155: 86, 160: 11, 
    161: 99, 1186: 76, 3238: 49, 167: 68, 170: 11, 172: 32, 175: 81, 178: 32, 179: 32, 
    182: 94, 184: 19, 31: 107, 188: 107, 190: 107, 196: 27, 197: 27, 202: 27, 206: 89, 
    208: 14, 214: 102, 215: 102, 220: 115, 37: 22, 224: 22, 226: 14, 232: 22, 233: 84, 
    238: 35, 242: 97, 244: 22, 250: 110, 251: 66, 1276: 58, 256: 9, 2308: 33, 262: 30, 
    263: 79, 268: 30, 269: 30, 274: 92, 1300: 27, 280: 17, 283: 61, 286: 105, 292: 118, 
    296: 25, 298: 25, 304: 25, 310: 87, 1336: 71, 319: 56, 322: 100, 323: 100, 325: 25, 
    55: 113, 334: 69, 340: 12, 1367: 40, 350: 82, 358: 33, 364: 95, 376: 108, 
    377: 64, 2429: 46, 394: 28, 395: 77, 404: 28, 412: 90, 1438: 53, 425: 59, 430: 103, 
    1456: 97, 433: 28, 445: 72, 448: 23, 466: 85, 479: 54, 484: 98, 485: 98, 488: 23, 
    6154: 37, 502: 67, 4616: 34, 526: 80, 538: 31, 566: 62, 3644: 44, 577: 31, 97: 119, 
    592: 26, 593: 75, 1619: 48, 638: 57, 646: 101, 650: 26, 110: 114, 668: 70, 2734: 41, 
    700: 83, 1732: 30, 719: 52, 728: 96, 754: 65, 1780: 74, 4858: 47, 130: 29, 790: 78, 
    1822: 43, 2051: 38, 808: 29, 850: 60, 866: 29, 890: 73, 911: 42, 958: 55, 970: 99, 
    976: 24, 166: 112}
  

 I compared the following functions in order to check which one was the fastest. 

  def f1():  
    return next(key for key, value in d1.iteritems() if value == 55)

def f2a():
    return [item[0] for item in d1.items() if item[1] == 55][0]

def f2b():
    return [item[0] for item in d1.iteritems() if item[1] == 55][0]

def f3():
    return dict((v, k) for k, v in d1.iteritems())[55]

tl=["f1", "f2a", "f2b", "f3"]
from timeit import Timer
cmpthese(1000, tl)
  

 And here are the results : 

  f3   21182/s  --   -39%   -40%   -56%
f2a  34450/s    63%  --    -3%   -29%
f2b  35368/s    67%     3%  --   -27%
f1   48367/s   128%    40%    37%  --
  

  f1  is faster that any other one. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16569825)
 Use  max()  and list comprehension: 

  >>> dic = {'a' : 10, 'x' : 44, 'f': 34, 'h':89, 'j': 90, 'd': 28,"k":90}
>>> maxx = max(dic.values())             #finds the max value
>>> keys = [x for x,y in dic.items() if y ==maxx]  #list of all 
                                                   #keys whose value is equal to maxx
>>> keys
['k', 'j']
  

  

  >>> def solve(dic):
    maxx = max(dic.values())
    keys = [x for x,y in dic.items() if y ==maxx] 
    return keys[0] if len(keys)==1 else keys
... 
>>> solve({'a' : 10, 'x' : 44, 'f': 34, 'h':89, 'j': 90, 'd': 28})
'j'
>>> solve({'a' : 10, 'x' : 44, 'f': 34, 'h':89, 'j': 90, 'd': 28, 'g' : 90})
['g', 'j']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30024736)
 The obvious solution is to just use  iterkeys  and  itervalues  instead of  iteritems : 

  key_string = ','.join(d.iterkeys())
val_string = ','.join(d.itervalues())
  

 If you're worried about the keys and values showing up in different orders, while Python allows dicts to iterate in any order they want, it does document https://docs.python.org/2/library/stdtypes.html#dict.items that if you iterate them over and over without doing anything else between you will get the same order: 

 
   If  items() ,  keys() ,  values() ,  iteritems() ,  iterkeys() , and  itervalues()  are called with no intervening modifications to the dictionary, the lists will directly correspond. 
 

 (The 2.7 docs were never updated to say so, but it's also true for  viewitems ,  viewkeys , and  viewvalues .) 

 

 At least in CPython, it will probably be slightly more efficient to use  keys  and  values  instead of  iterkeys  and  itervalues  (because, when given an iterator, the CPython implementation of  str.join  just makes a list out of it), but I doubt that matters. As Padraic Cunningham points out in the comments, for the keys (but not the values), you may be able to get the same list even faster with just  list(d)  instead of  d.keys()  (although maybe notâ€”it avoids a  LOAD_ATTR  call, but at the cost of a  LOAD_NAME , unless you've first copied  list  to a local so it can be  LOAD_FAST ed). 

 

 Finally, if you want to do it with  iteritems  (let's say you're using a broken not-quite-compliant Python interpreter that randomizes the iteration order each time), you can use  zip  for that: 

  keys, values = zip(*d.iteritems())
  

 That turns a sequence of pairs into a pair of sequences. 



