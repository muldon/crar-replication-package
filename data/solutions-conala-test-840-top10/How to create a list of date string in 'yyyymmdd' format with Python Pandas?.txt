Query: How to create a list of date string in 'yyyymmdd' format with Python Pandas?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18684207)
 Or using  list comprehension: 

  [d.strftime('%Y%m%d') for d in pandas.date_range('20130226','20130302')]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18684173)
 Using  format : 

  >>> r = pandas.date_range('20130226','20130302')
>>> r.format(formatter=lambda x: x.strftime('%Y%m%d'))
['20130226', '20130227', '20130228', '20130301', '20130302']
  

 or using  map : 

  >>> r.map(lambda x: x.strftime('%Y%m%d'))
array(['20130226', '20130227', '20130228', '20130301', '20130302'], dtype=object)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18684452)
 For Just a  daterange ,  pandas  would be an overkill when you actually again have to reformat the date using  datetime . The following solution simply uses  datetime  to serve your purpose 

  import datetime
def date_range(start_dt, end_dt = None):
    start_dt = datetime.datetime.strptime(start_dt, "%Y%m%d")
    if end_dt: end_dt = datetime.datetime.strptime(end_dt, "%Y%m%d")
    while start_dt <= end_dt:
        yield start_dt.strftime("%Y%m%d")
        start_dt += datetime.timedelta(days=1)


[e for e in date_range('20130226','20130302')]
['20130226', '20130227', '20130228', '20130301', '20130302']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43133837)
 You can use  datetime  methods. 

  from datetime import datetime
a = '20160228'
date = datetime.strptime(a, '%Y%m%d').strftime('%m/%d/%Y')
  

  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11617682)
 If you pass a list to  index_col , it means you want to create a hierarchical index out of the columns in the list. 

 In addition, the  parse_dates  keyword can be set to either True or a list/dict. If True, then it tries to parse individual columns as dates, otherwise it combines columns to parse a single date column. 

 In summary, what you want to do is: 

  from datetime import datetime
import pandas as pd
parse = lambda x: datetime.strptime(x, '%Y%m%d %H')
pd.read_csv("..\\file.csv",  parse_dates = [['YYYYMMDD', 'HH']], 
            index_col = 0, 
            date_parser=parse)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38873515)
 This is what you need, to specify the format in which you're providing the date. 

   df['date'] = pd.to_datetime(df['date'],format='%Y%m%d')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2380078)
 No need to import  time ; http://docs.python.org/library/datetime.html#datetime.datetime.strptime can do it by itself. 

  import datetime
dt=datetime.datetime.strptime(data[4]+data[5],'%Y%m%d%H%M%S')
print(dt)
# 2010-03-04 08:28:35
  

 For information on the format codes (e.g.  %Y%m%d%H%M%S ) available, see the http://docs.python.org/library/datetime.html#strftime-behavior for  strftime . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46834881)
 If your column is a string, you will need to first use `pd.to_datetime', 

  df['Date'] = pd.to_datetime(df['Date'])
  

 Then, use  .dt  datetime accessor with  strftime : 

  df = pd.DataFrame({'Date':pd.date_range('2017-01-01', periods = 60, freq='D')})

df.Date.dt.strftime('%Y%m%d').astype(int)
  

 Or use lambda function: 

  df.Date.apply(lambda x: x.strftime('%Y%m%d')).astype(int)
  

 Output: 

  0     20170101
1     20170102
2     20170103
3     20170104
4     20170105
5     20170106
6     20170107
7     20170108
8     20170109
9     20170110
10    20170111
11    20170112
12    20170113
13    20170114
14    20170115
15    20170116
16    20170117
17    20170118
18    20170119
19    20170120
20    20170121
21    20170122
22    20170123
23    20170124
24    20170125
25    20170126
26    20170127
27    20170128
28    20170129
29    20170130
30    20170131
31    20170201
32    20170202
33    20170203
34    20170204
35    20170205
36    20170206
37    20170207
38    20170208
39    20170209
40    20170210
41    20170211
42    20170212
43    20170213
44    20170214
45    20170215
46    20170216
47    20170217
48    20170218
49    20170219
50    20170220
51    20170221
52    20170222
53    20170223
54    20170224
55    20170225
56    20170226
57    20170227
58    20170228
59    20170301
Name: Date, dtype: int32
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54786068)
 In python 3.7, you can use isoformat() 

  >>> from datetime import datetime
>>> datetime.today().date().isoformat().replace("-", "")
'20190220'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/49997171)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html with parameter  format : 

  dti = pd.to_datetime(dates, format='%Y%m%d')
print (dti)

DatetimeIndex(['2018-04-01', '2018-04-02', '2018-04-03'], dtype='datetime64[ns]', freq=None)
  

 If input data is  csv  use parameter  parse_dates  in http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html: 

  import pandas as pd

temp=u"""Date
20180401
20180402
20180403"""
#after testing replace 'pd.compat.StringIO(temp)' to 'filename.csv'
df = pd.read_csv(pd.compat.StringIO(temp), parse_dates=[0])

print (df)
        Date
0 2018-04-01
1 2018-04-02
2 2018-04-03

print (df.dtypes)
Date    datetime64[ns]
dtype: object
  



