Query: Sorting dictionary keys based on their values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35789579)
 You can use  sorted()  with a key function which will sort your list based on your dictionary values: 

  >>> sorted(m, key= lambda x: -y.get(x))
[2, 3, 5]
  

 Note that since  sorted()  sorts the items in ascending mode you can use negative value of the dict values to make it sort your list descending.  Or you could change the  reverse  argument to  True : 

  >>> sorted(m, key= lambda x: y.get(x), reverse=True)
[2, 3, 5]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52042604)
 You can use the operator to sort the dictionary by values in descending order. 

  import operator

d = {"a":1, "b":2, "c":3}
cd = sorted(d.items(),key=operator.itemgetter(1),reverse=True)
  

 The Sorted dictionary will look like, 

  cd = {"c":3, "b":2, "a":1}
  

 Here, operator.itemgetter(1) takes the value of the key which is at the index 1. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40653766)
 List 

  dict = {'Neetu':22,'Shiny':21,'Poonam':23}
print sorted(dict.items())
sv = sorted(dict.values())
print sv
  

 Dictionary 

  d = []
l = len(sv)
while l != 0 :
    d.append(sv[l - 1])
    l = l - 1
print d`
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17395692)
  

  sorted(l, key=lambda k: (l[k], k))
  

 for just the keys, or 

  sorted(l.items(), key=lambda i: i[::-1])
  

 for key-value pairs; the  [::-1]  negative-step slice reverses the value and the key for sorting. 

 This sorts first on the value, then uses the key if the values are equal. 

  

  >>> l = {'a': 5, 'aa': 5, 'c': 1, 'b': 7}
>>> sorted(l, key=lambda k: (l[k], k))
['c', 'a', 'aa', 'b']
>>> sorted(l.items(), key=lambda i: i[::-1])
[('c', 1), ('a', 5), ('aa', 5), ('b', 7)]
  

 For a mixed direction sort,  negate  the values, and reverse the sort: 

  >>> sorted(d.items(), key=lambda i: (-i[1], i[0]), reverse=True)
[('c', 1), ('aa', 5), ('a', 5), ('b', 7)]
  

 Negating the numbers causes them to be sorted in descending order while the keys retain ascending order; reversing then swaps that to ascending and descending, respectively.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10743212)
 Use  items  instead of  values  - and a just use a lambda to fecth the sorting key itself, since there won't be a ready made  operator   for it: 

  sorted = dict.items()
sorted.sort(key = lambda item: item[1].total, reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43164621)
 Use  items  instead of  keys : 

  print(sorted(dict.items(), key=lambda item: item[1][2], reverse=True)[:3])
  

 or save sorted keys, and use that to get items: 

  keys = sorted(dict, key=lambda key: dict[k][2], reverse=True)[:3]
items = [(key, dict[key]) for key in keys]
print(items)
  

 if you want values seaparately: 

  keys = sorted(dict, key=lambda k: dict[k][2], reverse=True)[:3]
values = [dict[key] for key in keys]
  

 BTW, don't use  dict  as a variable name; it shadows built-in function/type  dict . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52142908)
 . This will sort your dict by keys.  This is work only on Python 2.7 

  newlist = sorted(list_to_be_sorted, key=lambda k: k.keys()) 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33995266)
 you can make use of the below code for sorting in descending order and storing to a dictionary: 

          listname = []  
        for key, value in sorted(dictionaryName.iteritems(), key=lambda (k,v): (v,k),reverse=True):  
            diction= {"value":value, "key":key}  
            listname.append(diction)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31562925)
 First, separate keys and values in the dict 

  >>> keys, values = zip(*d.items())
  

 Now,  zip  the values, adding the key-list as the first column 

  >>> zip(d[u"d"], *values)
[(5, 1, 'g', 9, 5), (1, 4, 'a', 9, 1), (10, 6, 'b', 9, 10), (2, 7, '9', 8, 2)]
  

 Sort the values by first column (the key-list) 

  >>> sorted(_)
[(1, 4, 'a', 9, 1), (2, 7, '9', 8, 2), (5, 1, 'g', 9, 5), (10, 6, 'b', 9, 10)]
  

 Then  zip  the result of the sort back and strip the key-column 

  >>> zip(*_)[1:]
[(4, 7, 1, 6), ('a', '9', 'g', 'b'), (9, 8, 9, 9), (1, 2, 5, 10)]
  

  zip  again with the keys to reconstruct the dictionary. 

  >>> dict(zip(keys, _))
{u'a': (4, 7, 1, 6),
 u'b': (9, 8, 9, 9),
 u'c': ('a', '9', 'g', 'b'),
 u'd': (1, 2, 5, 10)}
  

 Everything put together: 

  keys, values = zip(*d.items())
new_d = dict(zip(keys, zip(*sorted(zip(d[u"d"], *values)))[1:]))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/17395696)
 If I correctly understood your question, you're searching for something like that: 

  d = {'a': 5, 'aa': 5, 'c': 1, 'b': 7}
result = sorted(d.items(), key=lambda x: (x[1], x[0]))
print(result)
  

 Output: 

  [('c', 1), ('a', 5), ('aa', 5), ('b', 7)]
  

 

 If you want the values to be ascending order and the second sort to be in descending order, you can do something like that: 

  d = {'a': 5, 'aa': 5, 'c': 1, 'b': 7}
result = sorted(d.items(), reverse=True, key=lambda x: (-x[1], x[0]))
print(result)
  

 Output: 

  [('c', 1), ('aa', 5), ('a', 5), ('b', 7)]
  

 For more information about sorting, see the http://wiki.python.org/moin/HowTo/Sorting/ 

 

 If you have a list of tuples that contains only strings, you can do something like that: 

  l = [('foo', 'bar'), ('foo', 'spam'), ('baz', 'egg')]

result = sorted(l, key=lambda x: (x[0], [-ord(c) for c in x[1]]))
print(result)
  

 Output: 

  [('baz', 'egg'), ('foo', 'spam'), ('foo', 'bar')]
  



