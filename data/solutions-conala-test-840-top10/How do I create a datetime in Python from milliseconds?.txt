Query: How do I create a datetime in Python from milliseconds?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31685557)
 You can create timedeltas https://docs.python.org/3.4/library/datetime.html#datetime.timedelta: 

  datetime.timedelta(milliseconds=2588832)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31625298)
   I presume it can be counted on to handle dates before 1970 and after 2038.         

     target_date_time_ms = 200000 # or whatever
   base_datetime = datetime.datetime( 1970, 1, 1 )
   delta = datetime.timedelta( 0, 0, 0, target_date_time_ms )
   target_date = base_datetime + delta
  

 as mentioned in the Python standard lib: 

 
   fromtimestamp() may raise ValueError, if the timestamp is out of the
  range of values supported by the platform C localtime() or gmtime()
  functions. Itâ€™s common for this to be restricted to years in 1970
  through 2038. 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42836586)
 Have a look at the Python datetime and time modules. 

  from datetime import datetime
d = datetime.strptime("2017_03_16-14:08:10", "%Y_%m_%d-%H:%M:%S")
  

 This will create a datetime object of d 

 Then use mktime from Python's time module to get your timestamp 

  import time
time.mktime(d.timetuple())*1000
  

 The  *1000  is required to convert from seconds to milliseconds.  

 Also, do you mean 1971 or the Unix epoch (Jan 01 1970)? 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31026852)
 Microseconds consist of six digits. 95 milliseconds = 95000 microseconds.
So to get datetime with 95 milliseconds like  datetime.datetime(2013, 6, 29, 11, 9, 24, 95000)  write: 

  datetime.strptime('20130629110924095000','%Y%m%d%H%M%S%f')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14583130)
 This is how I do it: 

  from datetime import datetime
from time import mktime

dt = datetime.now()
sec_since_epoch = mktime(dt.timetuple()) + dt.microsecond/1000000.0

millis_since_epoch = sec_since_epoch * 1000
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24274452)
 Since Python 2.7 there's the timedelta.total_seconds() method. So, to get the elapsed milliseconds: 

  >>> import datetime
>>> a = datetime.datetime.now()
>>> b = datetime.datetime.now()
>>> delta = b - a
>>> print delta
0:00:05.077263
>>> int(delta.total_seconds() * 1000) # milliseconds
5077
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41636149)
 For Python2.7 

 You can format it into seconds and then multiply by 1000 to convert to millisecond. 

  from datetime import datetime

d = datetime.strptime("20.12.2016 09:38:42,76", "%d.%m.%Y %H:%M:%S,%f").strftime('%s')
d_in_ms = int(d)*1000
print(d_in_ms)

print(datetime.fromtimestamp(float(d)))
  

 Output: 

  1482206922000
2016-12-20 09:38:42
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14978116)
 If you want a simple method in your code that returns the milliseconds with datetime: 

  from datetime import datetime
from datetime import timedelta

start_time = datetime.now()

# returns the elapsed milliseconds since the start of the program
def millis():
   dt = datetime.now() - start_time
   ms = (dt.days * 24 * 60 * 60 + dt.seconds) * 1000 + dt.microseconds / 1000.0
   return ms
  



