Query: Creating a 2d matrix in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4230008)
 Using nested comprehension lists : 

  x = [[None for _ in range(5)] for _ in range(6)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27156971)
 If you have not only the 2D histogram matrix but also the underlying  (x, y)  data, then you could make a scatter plot of the  (x, y)  points and color each point according to its binned count value in the 2D-histogram matrix: 

  import numpy as np
import matplotlib.pyplot as plt

n = 10000
x = np.random.standard_normal(n)
y = 2.0 + 3.0 * x + 4.0 * np.random.standard_normal(n)
xedges, yedges = np.linspace(-4, 4, 42), np.linspace(-25, 25, 42)
hist, xedges, yedges = np.histogram2d(x, y, (xedges, yedges))
xidx = np.clip(np.digitize(x, xedges), 0, hist.shape[0]-1)
yidx = np.clip(np.digitize(y, yedges), 0, hist.shape[1]-1)
c = hist[xidx, yidx]
plt.scatter(x, y, c=c)

plt.show()
  

 

   


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4230573)
 If you aren't going the numpy route, you can fake 2D arrays with dictionaries: 

  >>> x = dict( ((i,j),None) for i in range(5) for j in range(6) )
>>> print x[3,4]
None
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27156707)
 If you have the raw data from the counts, you could use  plt.hexbin  to create the plots for you (IMHO this is better than a square lattice): Adapted from the example of http://matplotlib.org/1.4.0/examples/pylab_examples/hexbin_demo.html: 

  import numpy as np
import matplotlib.pyplot as plt

n = 100000
x = np.random.standard_normal(n)
y = 2.0 + 3.0 * x + 4.0 * np.random.standard_normal(n)
plt.hexbin(x,y)

plt.show()
  

   

 If you already have the Z-values in a matrix as you mention, just use  plt.imshow  or  plt.matshow : 

  XB = np.linspace(-1,1,20)
YB = np.linspace(-1,1,20)
X,Y = np.meshgrid(XB,YB)
Z = np.exp(-(X**2+Y**2))
plt.imshow(Z,interpolation='none')
  

   


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46238371)
 https://stackoverflow.com/a/27156971/2173516 contains a mistake:  xidx  and  yidx  are calculated the wrong way (at least on my data sample). The correct way should be: 

  xidx = np.clip(np.digitize(x, xedges) - 1, 0, hist.shape[0] - 1)
yidx = np.clip(np.digitize(y, yedges) - 1, 0, hist.shape[1] - 1)
  

 As the return dimension of  np.digitize  that we are interested in is between  1  and  len(xedges) - 1 , but the  c = hist[xidx, yidx]  needs indices between  0  and  hist.shape - 1 . 

 

 Below is the comparison of results. As you can see you get similar but not the same result. 

  import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

n = 10000
x = np.random.standard_normal(n)
y = 2.0 + 3.0 * x + 4.0 * np.random.standard_normal(n)
xedges, yedges = np.linspace(-4, 4, 42), np.linspace(-25, 25, 42)
hist, xedges, yedges = np.histogram2d(x, y, (xedges, yedges))

xidx = np.clip(np.digitize(x, xedges), 0, hist.shape[0] - 1)
yidx = np.clip(np.digitize(y, yedges), 0, hist.shape[1] - 1)
c = hist[xidx, yidx]
old = ax1.scatter(x, y, c=c, cmap='jet')

xidx = np.clip(np.digitize(x, xedges) - 1, 0, hist.shape[0] - 1)
yidx = np.clip(np.digitize(y, yedges) - 1, 0, hist.shape[1] - 1)

c = hist[xidx, yidx]
new = ax2.scatter(x, y, c=c, cmap='jet')


plt.show()
  

 https://i.stack.imgur.com/hdwzy.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17528966)
 Do you just want to form a symmetric array? You can skip the diagonal indices completely. 

  m=np.array(m)
inds = np.triu_indices_from(m,k=1)
m[(inds[1], inds[0])] = m[inds]

m

array([[11, 12, 13],
       [12, 22, 23],
       [13, 23, 33]])
  

 Creating a symmetric array from a: 

  new = np.zeros((3,3))
vals = np.array([11, 12, 13, 22, 23, 33])
inds = np.triu_indices_from(new)
new[inds] = vals
new[(inds[1], inds[0])] = vals
new
array([[ 11.,  12.,  13.],
       [ 12.,  22.,  23.],
       [ 13.,  23.,  33.]])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44812448)
 I found these two python repositories very useful, might wanna have a look at it...  

  python  https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder 

  ipython  :  https://timsainb.github.io/spectrograms-mfccs-and-inversion-in-python.html 

 [EDIT] As pointed out, here is an explanational of the two links  

  python  one seems to have an error, but many people were able to make it run, so I'm not sure.  ipython   worked like a charm, so I hope you can run it. 

 Both of the links are supposed to take an audio as an input, preferably  .wav  file. Featurize it ( USE FFT : 512, step size = 512/8 ) to obtain spectrograms ( you can even visualize it ), it's a 2D matrix, and then train your Machine learning objects or do whatever you want using a matrix that represents the original audio. If you want, at anypoint, what those vectors represent you can resynthesize audio back as well.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25022522)
 You code fails because you append 6 references to the same array. See Kevin's answer for a more detailed explanation.  

 A more "pythonic" way to create your array: 

  array = [[None]*n for x in range(n)]
  

 This uses a http://www.secnetix.de/olli/Python/list_comprehensions.hawk. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13684107)
 Use  * , the element-wise product with the appropriate broadcasting: 

  >>> b = array([1,2,3])
>>> C = arange(9).reshape(3,3)
>>> dot(diag(b), C)
array([[ 0,  1,  2],
       [ 6,  8, 10],
       [18, 21, 24]])
>>> atleast_2d(b).T * C
array([[ 0,  1,  2],
       [ 6,  8, 10],
       [18, 21, 24]])
  

  atleast_2d(b).T  (or  b.reshape(-1,1) ) reshapes the vector  b  to a column vector. 



