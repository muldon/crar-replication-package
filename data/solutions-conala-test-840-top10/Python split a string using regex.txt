Query: Python split a string using regex
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5226262)
 You can use the split method of the  regex object, just split on  /  which isn't following a  \  (using negative lookbehind): 

  import re
str = u'1\\/2/CD' 
re.split(r'(?<!\\)/',str)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54558241)
 You can do it with regex but how about with non-regex way using  split()  and  join()  

  str = 'Opzione - AAAA-11';
df = ' '.join(str.split(' - '))
print(df)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16331532)
 Use the regex  (?<=\d) |=\d)  to split: 

  >>> text = "s:11011 i:11010 ::110011  :110010 d:11000"
>>> result = re.split(r"(?<=\d) |=\d)", text)
>>> result
['s', '11011', 'i', '11010', ':', '110011', ' ', '110010', 'd', '11000']
  

 This will split on: 

  (?<=\d)  a space, when there is a digit on the left. To check this I use a http://www.regular-expressions.info/lookaround.html. 

  =\d)  a colon, when there is a digit on the right. To check this I use a http://www.regular-expressions.info/lookaround.html. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47920256)
 Use https://docs.python.org/3/library/re.html#re.split -  

  >>> import re
>>> re.split(r'(?<!\+)\+', '3/num++/sign+2/num')
['3/num', '+/sign', '2/num']
  



 The regex pattern will split on a  +  sign as long as no other  +  precedes it. 

  (?<!   # negative lookbehind
\+     # plus sign
)     
\+     # plus sign
  

 Note that lookbehinds (in general) do not support varying length patterns. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15676262)
 According to the http://docs.python.org/2/library/re.html, you can provide a  max_split  argument also. (3rd argument, or keyword  maxsplit . 

  >>> import re
>>> aa = 'nilesh-sharma-is-learning-python'
>>> re.split('-',aa,3)
['nilesh', 'sharma', 'is', 'learning-python']
>>>Â 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42369829)
 Using  split()  will be the most  Pythonic  way of splitting on a string. 

 It's also useful to remember that if you use  split()  on a string that does not have a whitespace then that string will be returned to you in a list. 

 Example: 

  >>> "ark".split()
['ark']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8994027)
 Create a  re.RegexObject  using  re.compile()   and then call it's  split()  method. 

 Example: 

  >>> re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')
['foo', 'bar']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19894514)
 Using  string.punctuation  and character class: 

  >>> from string import punctuation
>>> r = re.compile(r'[\s{}]+'.format(re.escape(punctuation)))
>>> r.split('dss!dfs^  #$% jjj^')
['dss', 'dfs', 'jjj', '']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4996083)
 You can also use 're..  

  \>>> val  
'Friday 1Friday 11 JAN 11 '  
\>>> pat = re.compile(r'(\w+\s*\d*)')  
\>>> m=re.findall(pat,val)  
\>>> m  
['Friday 1', 'Friday 11', 'JAN 11']
  



