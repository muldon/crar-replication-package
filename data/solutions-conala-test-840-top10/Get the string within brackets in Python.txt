Query: Get the string within brackets in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8569256)
 You could use http://docs.python.org/library/stdtypes.html#str.split to do this. 

  s = "<alpha.Customer[cus_Y4o9qMEZAugtnW] active_card=<alpha.AlphaObject[card]\
 ...>, created=1324336085, description='Customer for My Test App',\
 livemode=False>"
val = s.split('[', 1)[1].split(']')[0]
  

  

  >>> val
'cus_Y4o9qMEZAugtnW'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22507726)
 Using  re  seems to be the solution: 

  >>> import re
>>> r = re.compile(r'(?:[^.(]|\([^)]*\))+')
>>> r.findall('(1.2).(2.1)')
['(1.2)', '(2.1)']
>>> r.findall('(1.2).2')
['(1.2)', '2']
>>> r.findall('1.(1.2)')
['1', '(1.2)']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22507627)
 This doesn't answer the general problem, but works for your examples: 

  >>> import re
>>> re.split(r'(?<=\))\.', '(1.2).(2.1)')
['(1.2)', '(2.1)']
>>> re.split(r'(?<=\))\.', '(1.2).2')
['(1.2)', '2']
  

 This splits the string on any period  after  a closing parenthesis. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8569270)
 This should do the job: 

  re.match(r"[^[]*\[([^]]*)\]", yourstring).groups()[0]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38871907)
  your_string = "lnfgbdgfi343456dsfidf[my data] ljfbgns47647jfbgfjbgskj"
your_string[your_string.find("[")+1 : your_string.find("]")]
  

 courtesy: https://stackoverflow.com/questions/4894069/regular-expression-to-return-text-between-parenthesis 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54192415)
 Try  re  

  >>> import re
>>> re.sub(r'\(.*?\)', '', 'nonsense (nonsense, 2015)')
'nonsense '
>>> re.sub(r'\(.*?\)', '', 'qwerty (qwerty) dkjah (Smith, 2018)')
'qwerty  dkjah '

import re
def remove_bracketed_words(text_from_file: string) -> string:
    """Remove all occurrences of words with brackets surrounding them, 
    including the brackets.

    >>> remove_bracketed_words("nonsense (nonsense, 2015)")
    "nonsense "
    >>> remove_bracketed_words("qwerty (qwerty) dkjah (Smith, 2018)")
    "qwerty  dkjah "
    """
    with open('random_text.txt', 'r') as file:
       wholefile = file.read()
    # Be care for use 'w', it will delete raw data.
    whth open('random_text.txt', 'w') as file:
        file.write(re.sub(r'\(.*?\)', '', wholefile))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30706518)
 As you may have a lot of nested string within brackets you can use a recursion function and  re.sub  that replace the outer brackets in each call : 

  >>> def spliter(s):
...     new=re.sub(r"\([^()]*?\)|\[([^\[\]]*?)\]","",s)
...     if any(i in new for i in ')[]('):
...        return spliter(re.sub(r"\([^()]*?\)|\[([^\[\]]*?)\]","",new))
...     else : 
...        return new
... 
>>> s="I(have[to]re(m[ov]e)all)value(in)[bracket]"
>>> spliter(s)
'Ivalue'
>>> s="I(have[to]re(m[ov]e)all(asfref)(efsf[ekjfrehf]sef)(dfsd))value(in)[bracket]"
>>> spliter(s)
'Ivalue'
>>> s="I(have[to]re(m[ov]e)all(asfref)(efsf[ekj(9387jjdf)frehf]sef)(dfsd))value(in)[bracket]"
>>> spliter(s)
'Ivalue'
  

 the following regex : 

  r"\([^()]*?\)|\[([^\[\]]*?)\]"
  

 will replace any thing except brackets and parenthesis within them with an empty string.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17285014)
 If there are no nested brackets, you can just do this: 

  re.findall(r'(.\[.\]', example_str)
  

 

 However, you don't even really need a regex here. Just split on brackets: 

  (s.split(']')[-1] for s in example_str.split('['))
  

 

 The only reason your attempt didn't work: 

  re.findall(r"(.\[.*\]+", example_str)
  

 … is that you were doing a non-greedy match within the brackets, which means it was capturing everything from the first open bracket to the last close bracket, instead of capturing just the first pair of brackets. 

 

 Also, the  +  on the end seems wrong. If you had  'abc [def][ghi] jkl[mno]' , would you want to get back  ['abc ', '', ' jkl'] , or  ['abc ', ' jkl'] ? If the former, don't add the  + . If it's the latter, do—but then you need to put the whole bracketed pattern in a non-capturing group:  r'(.:\[.\])+ . 

 

 If there might be additional text after the last bracket, the  split  method will work fine, or you could use  re.split  instead of  re.findall … but if you want to adjust your original regex to work with that, you can. 

 In English, what you want is any (non-greedy) substring before a bracket-enclosed substring  or  the end of the string, right? 

 So, you need an alternation between  \[.\]  and  $ . Of course you need to group that in order to write the alternation, and you don't want to capture the group.  

  re.findall(r"(.:\[.\]|$)", example_str)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42012824)
 This works: 

  re.sub(r"\[[^]]*\]", "", test)
  

 Starts with the opening bracket, takes everything within it that is not a closing bracket, takes the closing bracket. Replace it all with an empty string. 

 Much more efficient than . (doesn't require what's called "Backtracking") and works with newlines within the brackets too. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22019793)
  import random
import string

def randomGen(N):
    return random.randint(1,N)

length_to_generate = randomGen(99)
finalist = []
for i in range(length_to_generate):
    if random.randint(0, 1):
        finalist.append("[")
    else:
        finalist.append("]") 

for everChar in finalist:
    print everChar,
  

 You can also generate a string rather than a list: 

  length_to_generate = randomGen(99)
finalist = ""
for i in range(length_to_generate):
    if random.randint(0, 1):
        finalist += "]"
    else:
        finalist += "["

print finalist
  



