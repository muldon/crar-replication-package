Query: How to use a dot in Python format strings?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29035334)
 The minimal change is to use square brackets in your template, rather than a period: 

                # v Note
>>> 'Hello {user[name]}'.format(**{'user': {'name': 'Markus'}})
'Hello Markus'
  

 Alternatively, put objects that  actually have that attribute  in the dictionary, e.g. a custom class or https://docs.python.org/2/library/collections.html#collections.namedtuple: 

  >>> class User(object):
    def __init__(self, name):
        self.name = name


>>> 'Hello {user.name}'.format(**{'user': User('Markus')})
'Hello Markus'
  

 Note also that if you're writing out the literal you can just use a keyword argument: 

  >>> 'Hello {user.name}'.format(user=User('Markus'))
'Hello Markus'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17953802)
 Python 3.3+ only: 

  def f(x, parent=''):
    if isinstance(x, dict):
        if parent:
            parent += '.'
        for key in x:
            yield parent + key
            yield from f(x[key], parent + key)
    elif isinstance(x, list):
        for idx, subx in enumerate(x):
            yield from f(subx, '{}[{}]'.format(parent, idx))
  

 Python 2.x ~ Python 3.2 

  def f(x, parent=''):
    if isinstance(x, dict):
        if parent:
            parent += '.'
        for key in x:
            yield parent + key
            for y in f(x[key], parent + key): yield y
    elif isinstance(x, list):
        for idx, subx in enumerate(x):
            for y in f(subx, '{}[{}]'.format(parent, idx)): yield y
  

 

  >>> x = {'a': 'meow', 'b': {'c': 'asd'}, 'd':[{"e":"stuff","f":1}, {"e":"more stuff","f":2}]}
>>> list(f(x))
['d', 'd[0].e', 'd[0].f', 'd[1].e', 'd[1].f', 'a', 'b', 'b.c']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47267913)
 You could use  return [z for z in np.dot(h, x) / 2. ]  instead of  return np.dot(h, x) / 2.   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29035333)
 Python  dict  objects are unfortunately not attribute accessible (i.e. with the dot notation) by default. So you can either resign yourself to the uglier brackets notation: 

  'Hello {user[name]}'.format( **{'user': { 'name': 'Markus' } } )
  

 Or you can wrap your data in a dot-accessible object. There are a handful of attribute-accessible dictionary classes you can install from https://pypi.python.org/pypi, such as https://pypi.python.org/pypi/stuf.  

  from stuf import stuf

'Hello {user.name}'.format( **stuf({'user': { 'name': 'Markus' } }) )
  

 I tend to keep my collections in  stuf  objects so that I can easily access them by attribute. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23909682)
 . The https://docs.python.org/2/library/string.html#format-string-syntax supports  only  integers or  valid Python identifiers  as keys.  

 
  arg_name          ::=  [identifier | integer]
  
 

 where  identifier  is https://docs.python.org/2/reference/lexical_analysis.html#grammar-token-identifier: 

 
   Identifiers (also referred to as names) are described by the following lexical definitions: 

  identifier ::=  (letter|"_") (letter | digit | "_")*
  
 

 No dots (or semicolons) allowed. 

 You could use your dictionary as a  second level  object: 

  "{v[hello.world]}".format(v={ 'hello.world' : '2' })
  

 Here we assigned the dictionary to the name  v , then index into it using a key name. These can be any string, not just identifiers. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30464196)
 Just translate format strings? 

  def translate(fmt):
    # escape their markers
    fmt = fmt.replace('{', '{{').replace('}', '}}')

    # translate our markers
    fmt = re.sub(r'\$\((.+?)\)', r'{\1}', fmt)

    # unescape out markers
    fmt = fmt.replace('$$', '$')

    return fmt

obj = lambda: this_is_a_hack
obj.it = 123
translate("$(testing.it)").format(testing=obj)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25404855)
 Just use capturing groups in the same regex, 

  >>> import re
>>> s = "00:00:01,478 --> 00:00:04,020"
>>> m = re.sub(r'([0-9]{2}:[0-9]{2}:[0-9]{2}),([0-9]{3})', r'\1.\2', s)
                 ^                          ^ ^        ^
>>> m
'00:00:01.478 --> 00:00:04.020'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21098415)
 You need to put the dot in the format string instead of using a decimal value in the assignment to  precision . 

  >>> '{text:{fill}{align}{width}.{precision}}'.format(text = 'abcdef', width=8, fill = '~', align = '^', precision = 4)
'~~abcd~~'
>>> '{num:{fill}{align}{width}.{precision}{type}}'.format(num = 12.34, width=12, fill = '~', align = '^', type = 'f', precision = 4)
'~~12.3400~~~'
  

 Otherwise, without the dot,  width  and the string representation of  precision  (.4 becomes '0.4') get concatenated as strings and the integer portion of the result is used as the width. So, in one of your examples where width is 8 and precision is .4, the resulting width becomes 80 (from truncating 80.4). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29021202)
 When microseconds are zero (yes, this is possible once in a while) you don't have a dot in the string representation of seconds. 

 You can use the Python date/time properties instead of parsing the string representation: 

  from datetime import datetime
time = datetime.now().time()
hour, min, sec, micro = time.hour, time.minute, time.second, time.microsecond
  

 If you have to have zero padded (02 instead of 2) strings, you can use string formatting: 

  hour, min, sec, micro = '{:02d}'.format(time.hour), '{:02d}'.format(time.minute), '{:02d}'.format(time.second), '{:06d}'.format(time.microsecond)
  



