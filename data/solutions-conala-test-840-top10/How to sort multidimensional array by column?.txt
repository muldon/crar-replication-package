Query: How to sort multidimensional array by column?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20183097)
 You can use the sorted method with a key. 

  sorted(a, key=lambda x : x[1])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20183124)
 You can use  list.sort  with its optional https://wiki.python.org/moin/HowTo/Sorting#Key_Functions and a http://docs.python.org/2/tutorial/controlflow.html#lambda-expressions: 

  >>> lst = [
...     ['John',2],
...     ['Jim',9],
...     ['Jason',1]
... ]
>>> lst.sort(key=lambda x:x[1])
>>> lst
[['Jason', 1], ['John', 2], ['Jim', 9]]
>>>
  

 This will sort the list in-place. 

 

 Note that for large lists, it will be faster to use http://docs.python.org/2/library/operator.html#operator.itemgetter instead of a  lambda : 

  >>> from operator import itemgetter
>>> lst = [
...     ['John',2],
...     ['Jim',9],
...     ['Jason',1]
... ]
>>> lst.sort(key=itemgetter(1))
>>> lst
[['Jason', 1], ['John', 2], ['Jim', 9]]
>>>
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38670975)
  sorted(list, key=lambda x: x[1])
  

 Note: this works on time variable too. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14635118)
 You could http://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html the second column, then use so-called "fancy-indexing" on the rows: 

  import numpy as np
count_array = np.array([('foo',2),('bar',5),('baz',0)], dtype = np.object)
print(count_array)
# [[foo 2]
#  [bar 5]
#  [baz 0]]

idx = np.argsort(count_array[:, 1])
print(idx)
# [2 0 1]

print(count_array[idx])
# [[baz 0]
#  [foo 2]
#  [bar 5]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20183121)
 .  The  sorted  built-in accepts a  key  argument: 

  sorted(li,key=lambda x: x[1])
Out[31]: [['Jason', 1], ['John', 2], ['Jim', 9]]
  

 note that  sorted  returns a new list.  If you want to sort in-place, use the  .sort  method of your list (which also, conveniently, accepts a  key  argument). 

 or alternatively, 

  from operator import itemgetter
sorted(li,key=itemgetter(1))
Out[33]: [['Jason', 1], ['John', 2], ['Jim', 9]]
  

 https://wiki.python.org/moin/HowTo/Sorting/. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29072427)
 You can use  numpy.column_stack  to do that: 

  a = np.array([[1,3,5],[2,4,6]])
b = np.array([9,11])
np.column_stack((b, a))

array([[ 9,  1,  3,  5],
       [11,  2,  4,  6]])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20183235)
 The optional  key  parameter to  sort / sorted  is a function. The function is called for each item and the return values determine the ordering of the sort 

  >>> lst = [['John', 2], ['Jim', 9], ['Jason', 1]]
>>> def my_key_func(item):
...     print("The key for {} is {}".format(item, item[1]))
...     return item[1]
... 
>>> sorted(lst, key=my_key_func)
The key for ['John', 2] is 2
The key for ['Jim', 9] is 9
The key for ['Jason', 1] is 1
[['Jason', 1], ['John', 2], ['Jim', 9]]
  

 taking the  print  out of the function leaves 

  >>> def my_key_func(item):
...     return item[1]
  

 This function is simple enough to write "inline" as a lambda function 

  >>> sorted(lst, key=lambda item: item[1])
[['Jason', 1], ['John', 2], ['Jim', 9]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27349775)
 Try it with numpy. 

  >>> import numpy as np
>>> a = np.array([['M', 'A', 'R', 'K'],
... [1,    3,   5,    4],
... [2,    6,   7,    8]], dtype=object)
>>> a[:,np.argsort(a[0])]
array([['A', 'K', 'M', 'R'],
       [3, 4, 1, 5],
       [6, 8, 2, 7]], dtype=object)
  

  

  >>> map(list,zip(*sorted(zip(*a))))
[['A', 'K', 'M', 'R'], [3, 4, 1, 5], [6, 8, 2, 7]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14635239)
 Consider making your array a  structured array  instead: 

  count_array = np.empty((len(list),), dtype=[('str', 'S10'), ('num', int)])
  

 Then you can just sort by a specific key: 

  np.sort(arr, order='num')
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45961338)
 Still a novice when it comes to  lambdas , but from what little I understand from your code - It seems in your  lambda  method, you are using  x[0]  to get the sort keys and then using those to pull values  off each element in  aa . In NumPy terms, that translates to getting the sort indices for the first row in the array version and then indexing into each row (since each element of  aa  becomes each row of array  a ). That's basically column-indexing. Also, it seems  sorted  maintains order for identical elements. So, we need to use  argsort(kind='mergesort') . 

  

  a[:, a[0].argsort(kind='mergesort')] # a = np.array(aa) 
  

 In your NumPy code, you are doing nothing of those sorts, so not giving the correct results. 



