Query: How can i list only the folders in zip archive in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6510636)
 One way might be to do: 

  >>> [x for x in file.namelist() if x.endswith('/')]
<<< ['folder/', 'folder2/']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49177783)
 In python 3, this assumes absolute paths are fed to  ZipFile : 

  from zipfile import ZipFile

zip_f = ZipFile("./Filename.zip")

# All directories:
for f in zip_f.namelist():
    zinfo = zip_f.getinfo(f)
    if(zinfo.is_dir()):
        print(f)

# Only root directories:
root_dirs = []
for f in zip_f.namelist():
    zinfo = zip_f.getinfo(f)
    if zinfo.is_dir():
        # This is will work in any OS because the zip format
        # specifies a forward slash.
        r_dir = f.split('/')
        r_dir = r_dir[0]
        if r_dir not in root_dirs:
            root_dirs.append(r_dir)
for d in root_dirs:
    print(d)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30591949)
 UPDATE: 

 Finally, this code worked for me: 

  import zipfile,fnmatch,os

rootPath = r"C:\Project"
pattern = '*.zip'
for root, dirs, files in os.walk(rootPath):
    for filename in fnmatch.filter(files, pattern):
        print(os.path.join(root, filename))
        zipfile.ZipFile(os.path.join(root, filename)).extractall(os.path.join(root, os.path.splitext(filename)[0]))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31779538)
 Yes , you can remove elements from the subdirs , that would make sure that os.walk() does not into those directories. Example - 

  for dirname, subdirs, files in os.walk("D:\\review docs"):
    if 'exclude directory' in subdirs:
        subdirs.remove('exclude directory')
    zf.write(dirname)
    for filename in files:
        zf.write(os.path.join(dirname, filename))
zf.close()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36186422)
 I don't think the previous answers are cross-platform compatible since they're assuming the pathsep is  /  as noted in some of the comments.  Also they ignore subdirectories (which may or may not matter to https://stackoverflow.com/users/819645/pythonpadavan ... wasn't totally clear from question).   

  import os
import zipfile

z = zipfile.Zipfile('some.zip', 'r')
dirs = list(set([os.path.dirname(x) for x in z.namelist()]))
  

 If you really just want top-level directories, then combine this with https://stackoverflow.com/users/1665189/agroszer's answer for a final step: 

  topdirs = [os.path.split(x)[0] for x in dirs]
  

 (Of course, the last two steps could be combined :) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32904890)
 I have another code example that may help, using python3, pathlib and zipfile.
It should work in any OS. 

  from pathlib import Path
import zipfile
from datetime import datetime

DATE_FORMAT = '%y%m%d'


def date_str():
    """returns the today string year, month, day"""
    return '{}'.format(datetime.now().strftime(DATE_FORMAT))


def zip_name(path):
    """returns the zip filename as string"""
    cur_dir = Path(path).resolve()
    parent_dir = cur_dir.parents[0]
    zip_filename = '{}/{}_{}.zip'.format(parent_dir, cur_dir.name, date_str())
    p_zip = Path(zip_filename)
    n = 1
    while p_zip.exists():
        zip_filename = ('{}/{}_{}_{}.zip'.format(parent_dir, cur_dir.name,
                                             date_str(), n))
        p_zip = Path(zip_filename)
        n += 1
    return zip_filename


def all_files(path):
    """iterator returns all files and folders from path as absolute path string
    """
    for child in Path(path).iterdir():
        yield str(child)
        if child.is_dir():
            for grand_child in all_files(str(child)):
                yield str(Path(grand_child))


def zip_dir(path):
    """generate a zip"""
    zip_filename = zip_name(path)
    zip_file = zipfile.ZipFile(zip_filename, 'w')
    print('create:', zip_filename)
    for file in all_files(path):
        print('adding... ', file)
        zip_file.write(file)
    zip_file.close()


if __name__ == '__main__':
    zip_dir('.')
    print('end!')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39229094)
 You can grab all files from a folder without going into the subfolders using: 

  import os
def getfilesfrom(directory):
    return filter(lambda x:
                  not os.path.isdir(os.path.join(directory, x)),
                  os.listdir(directory))

# or alternatively, using generators (as suggested in the comments):
def getfilesfrom(directory):
    for x in os.listdir(directory):
        if not os.path.isdir(os.path.join(directory, x)):
            yield x  # or yield os.path.join(directory, x) for full path.
  

 You can then simply run (as described in the https://pymotw.com/2/zipfile/): 

  import datetime
import zipfile

def print_info(archive_name):
""" Print information from zip archive"""
zf = zipfile.ZipFile(archive_name)
for info in zf.infolist():
    print info.filename
    print '\tComment:\t', info.comment
    print '\tModified:\t', datetime.datetime(*info.date_time)
    print '\tSystem:\t\t', info.create_system, '(0 = Windows, 3 = Unix)'
    print '\tZIP version:\t', info.create_version
    print '\tCompressed:\t', info.compress_size, 'bytes'
    print '\tUncompressed:\t', info.file_size, 'bytes'
    print

print 'creating archive'
zf = zipfile.ZipFile('debug.zip', mode='a', compression=zipfile.ZIP_DEFLATED)
inputdir = '/sample/debug/'
filestozip = getfilesfrom(inputdir)
for afile in filestozip:
    print('adding ' + afile + ' to zipfile debug.zip')
    zf.write(os.path.join(inputdir, afile), afile)

print 'closing'
zf.close()

print
print_info('debug.zip')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32367158)
 You must be on windows machine. Error is because of os.listdir(). os.listdir() is not getting correct path. 

 And in line number 3, you are doing os.path.join("archive", directories). 
You should join complete path including drive (C: or D:) like "c:/archive/foo: or on linux
"home/root/archive/foo"   

 Read - https://stackoverflow.com/questions/2422798/python-os-path-join-on-windows 

 https://docs.python.org/2/library/os.path.html#os.path.join -  

 
   On Windows, the drive letter is not reset when an absolute path
  component (e.g., r'\foo') is encountered. If a component contains a
  drive letter, all previous components are thrown away and the drive
  letter is reset. Note that since there is a current directory for each
  drive, os.path.join("c:", "foo") represents a path relative to the
  current directory on drive C: (c:foo), not c:\foo. 
 

  Edit:  

 You are passing list  corpus_path  to  [os.path.join][2]  in line 6. That causes error! Replace  corpus_path  with  items . 

 I created archive folder in my 'D:' Drive. Under archive folder I created 3 folders foo1, foo2 and foo3. Each folder contains 1 or 2 text file. Then I tested your code after modification. Code work fine.
Here is the code: 

  import os
startpath = "d:archive"
corpus_path = sorted([os.path.join("d:", "archive", directories) for directories in os.listdir(startpath)])

filenames = []
for items in corpus_path:
    print items
    path = [os.path.join(items, fn) for fn in os.listdir(items)]
    print path
  

 output: 

  d:archive\foo1
['d:archive\\foo1\\foo1.txt.txt', 'd:archive\\foo1\\foo11.txt']
d:archive\foo2
['d:archive\\foo2\\foo2.txt.txt']
d:archive\foo3
['d:archive\\foo3\\foo3.txt.txt']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52091287)
 This is indeed a bug of the https://github.com/python/cpython/blob/master/Lib/zipfile.py, where it has the following line in  ZipFile._extract_member()  to blindly replace  '/'  in the file names with the OS-specific path separator, when it should also look for  '\\' : 

  arcname = member.filename.replace('/', os.path.sep)
  

 You can fix this by overriding  ZipFile._extract_member()  with a version that's directly copied from the source code but with the above line corrected: 

  from zipfile import ZipFile, ZipInfo
import shutil
import os
def _extract_member(self, member, targetpath, pwd):
    """Extract the ZipInfo object 'member' to a physical
       file on the path targetpath.
    """
    if not isinstance(member, ZipInfo):
        member = self.getinfo(member)

    if os.path.sep == '/':
        arcname = member.filename.replace('\\', os.path.sep)
    else:
        arcname = member.filename.replace('/', os.path.sep)

    if os.path.altsep:
        arcname = arcname.replace(os.path.altsep, os.path.sep)
    # interpret absolute pathname as relative, remove drive letter or
    # UNC path, redundant separators, "." and ".." components.
    arcname = os.path.splitdrive(arcname)[1]
    invalid_path_parts = ('', os.path.curdir, os.path.pardir)
    arcname = os.path.sep.join(x for x in arcname.split(os.path.sep)
                               if x not in invalid_path_parts)
    if os.path.sep == '\\':
        # filter illegal characters on Windows
        arcname = self._sanitize_windows_name(arcname, os.path.sep)

    targetpath = os.path.join(targetpath, arcname)
    targetpath = os.path.normpath(targetpath)

    # Create all upper directories if necessary.
    upperdirs = os.path.dirname(targetpath)
    if upperdirs and not os.path.exists(upperdirs):
        os.makedirs(upperdirs)

    if member.is_dir():
        if not os.path.isdir(targetpath):
            os.mkdir(targetpath)
        return targetpath

    with self.open(member, pwd=pwd) as source, \
            open(targetpath, "wb") as target:
        shutil.copyfileobj(source, target)

    return targetpath
ZipFile._extract_member = _extract_member
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/9390232)
 ZipFile only zip one file to an archive once. 

 You can find how to adding folders to a zip file here:
https://stackoverflow.com/questions/458436/adding-folders-to-a-zip-file-using-python 



