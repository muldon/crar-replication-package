Query: Python Regex - checking for a capital letter with a lowercase after
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21805543)
 You can also use match like this : 

  >>> import re
>>> s = 'AASKH317298DIUANFProgramming is fun'
>>> r = r'^.*([A-Z][a-z].*)$'
>>> m = re.match(r, s)
>>> if m:
...     print(m.group(1))
... 
Programming is fun
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21805505)
 Use a negative look-ahead: 

  re.sub(r'^[A-Z0-9]*(?![a-z])', '', string)
  

 This matches any uppercase character or digit that is  not  followed by a lowercase character. 

  

  >>> import re
>>> string = 'AASKH317298DIUANFProgramming is fun'
>>> re.sub(r'^[A-Z0-9]*(?![a-z])', '', string)
'Programming is fun'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21698832)
 Use a capture group to get the letters after the extra capitals. 

  re.sub(r'^[A-Z]+([A-Z][a-z])', r'\1', string)
  

 This matches a sequence of uppercase letters, followed by an uppercase and then lowercase letter. The parentheses cause the match for the last two letters to be put in a capture group. In the replacement  \1  is replaced with the contents of the first capture group. 

 Or you can use lookahead: 

  re.sub(r'^[A-Z]+(?=[A-Z][a-z])', '', string)
  

 A lookahead specifies that the pattern matches only if it's followed by a match for the sub-pattern, but that sub-pattern isn't included in the match. So this matches a sequence of uppercase letters that must be followed by an uppercase and then lowercase letter. But only the initial sequence of uppercase letters is included in the match, which then gets replaced by the empty string. 

 Go to http://regular-expressions.info to learn all about regexp. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6377316)
 I shouldn't have taken comments on merit without checking if they work. . your regex does not work as written. You are looking for something like this: 

  message = re.findall(r'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]', data)
  

 which would capture the letter you are looking for. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14456323)
 I'll be providing boolean indicators for you to play around with (rather than actual  if  blocks for the sake of conciseness. 

 Using Regex: 

  import re
bool(re.match('[F|f]',<your string>)) #if it matched, then it's true.  Else, false.
  

 if the string could be anywhere in your output (I assume string) 

  import re
bool(re.search('[F|f]ile system full',<your string>))
  

 Other options: 

 checking for 'f' and 'F' 

  <your string>[0] in ('f','F')

<your string>.startswith('f') or <your string>.startswith('F')
  

 And there's the previously suggested  lower  method: 

  <your string>.lower() == 'f'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49050951)
 Here is a non-regex solution. 

  def shorten(i):
    abr_list = []
    abrev = ''
    parts = i.split('.')
    for word in parts:
        for x in range(len(word)):
            if x == 0 and word[x].isupper() or word[x].isupper() and not word[x + 1].isupper() or word[x].isnumeric():
                abrev += word[x]
        abr_list.append(abrev)
        abrev = ''
    return join_parts(abr_list)


def join_parts(part_list):
    ret = part_list[0]
    for part in part_list[1:]:
        if not part.isnumeric():
            ret += '.%s' % part
        else:
            ret += part
    return ret
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18315937)
 Maybe this will do? 

  import re

re.findall(r'\b[^A-Z\s\d]+\b', u'Rob Alsod is normal (Ã©ternel)', re.UNICODE)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49050827)
  import re
def foo(s):
    print(''.join(list(map(
        lambda matchobj: matchobj[0], re.finditer(
            r'(?<![A-Z])[A-Z]|[A-Z](?![A-Z])|\.', s)))))
foo('InternetGatewayDevice.DeviceInfo.Description')
foo('WANDevice')
# output: 
# IGD.DI.D
# WD
  

 There's three major parts to the regex: 

 
 match if it's a capital letter with no capital letter in front of it  (?<![A-Z])[A-Z]  or 
 match if it's a capital letter with no capital letter after it  [A-Z](?![A-Z])  or 
 if it's a literal period 
 

 https://docs.python.org/3.6/library/re.html 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18834533)
 You probably want to add a white space character in your city name group, like this: 

  re.findall('((?:[A-Z][\w]+\s*){1,2}),[\s]([A-Z]{2})', input)
  

 This will match a capital Latin letter followed by one or more word characters and zero or more white space characters, all of which may be appear one or two times, captured in group 1, followed by a comma, a white space character, and two capital Latin letters, captured in group 2. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47151742)
 You are checking isdigit and isupper methods on the entire password string object not on each character of the string. The following is a function which checks if the password meets your specific requirements. It does not use any regex stuff. It also prints all the defects of the entered password. 

  #!/usr/bin/python3
def passwd_check(passwd):
    """Check if the password is valid.

    This function checks the following conditions
    if its length is greater than 6 and less than 8
    if it has at least one uppercase letter
    if it has at least one lowercase letter
    if it has at least one numeral
    if it has any of the required special symbols
    """
    SpecialSym=['$','@','#']
    return_val=True
    if len(passwd) < 6:
        print('the length of password should be at least 6 char long')
        return_val=False
    if len(passwd) > 8:
        print('the length of password should be not be greater than 8')
        return_val=False
    if not any(char.isdigit() for char in passwd):
        print('the password should have at least one numeral')
        return_val=False
    if not any(char.isupper() for char in passwd):
        print('the password should have at least one uppercase letter')
        return_val=False
    if not any(char.islower() for char in passwd):
        print('the password should have at least one lowercase letter')
        return_val=False
    if not any(char in SpecialSym for char in passwd):
        print('the password should have at least one of the symbols $@#')
        return_val=False
    if return_val:
        print('Ok')
    return return_val

print(passwd_check.__doc__)
passwd = input('enter the password : ')
print(passwd_check(passwd))
  



