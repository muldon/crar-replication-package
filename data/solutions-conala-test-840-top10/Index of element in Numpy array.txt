Query: Index of element in Numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49744054)
  You can convert a numpy array to list and get its index .  

 for example 

  tmp = [1,2,3,4,5] #python list
a = numpy.array(tmp) #numpy array
i = list(a).index(2) # i will return index of 2, which is 1
  

 i is just what you want. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35375982)
 Don't use equal to float values, use  isclose() : 

  import numpy as np

np.random.seed(1)
a = np.random.rand(1000)

np.where(np.isclose(a, 0.3, atol=1e-4))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54193696)
 You can use the function  numpy.nonzero() , or the  nonzero()  method of an array 

  import numpy as np

A = np.array([[2,4],
          [6,2]])
index= np.nonzero(A>1)
       OR
(A>1).nonzero()
  

  Output : 

  (array([0, 1]), array([1, 0]))
  

 First array in output depicts the  row index  and second array depicts the corresponding  column index . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37486119)
 I'm torn between these two ways of implementing an index of a NumPy array: 

  idx = list(classes).index(var)
idx = np.where(classes == var)
  

 Both take the same number of characters, but the first method returns an  int  instead of a  numpy.ndarray . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43707764)
 You can slice the array and find the maximum yourself and then query its index: 

  np.where(a==a[a<v].max())
Out: (array([3]),)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35181688)
 I think you want  numpy.unravel_index  

  In [3]: import numpy as np
In [4]: p = np.array([ 1,2,3,4,5,6,7,8,9,10,11,12])

In [5]: p_reshape = p.reshape(4,3)

In [6]: p_reshape
Out[6]:
array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])

In [7]: np.unravel_index(5, p_reshape.shape)
Out[7]: (1, 2)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/24692461)
 You can do something like this: 

  >>> A[np.arange(len(A)), B.ravel()].reshape(B.shape)
array([[2],
       [4],
       [8]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50182686)
 I think this does what you want. 

 Here's your sample data: 

  In [98]: a
Out[98]: 
array([[1, 2, 3, 4],
       [1, 2, 3, 4],
       [1, 2, 3, 4]])

In [99]: array_index
Out[99]: 
array([[0, 0, 1, 2],
       [0, 1, 2, 2],
       [0, 1, 1, 3]])
  

 Create  b  to hold the result, and do the sum using  np.add.at .   row_index  is just the 3x1 array  [[0], [1], [2]] . 

  In [100]: b = np.zeros_like(a)

In [101]: row_index = np.arange(array_index.shape[0]).reshape(-1, 1)

In [102]: np.add.at(b, (row_index, array_index), a)

In [103]: b
Out[103]: 
array([[3, 3, 4, 0],
       [1, 2, 7, 0],
       [1, 5, 0, 4]])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35380862)
 Do you need all the close elements or just the best matching one?
I usually do something like this to get the closest index for a value 

  def nearest_arg(array, value):
    idx = (np.abs(array - value)).argmin()
    return idx
  



