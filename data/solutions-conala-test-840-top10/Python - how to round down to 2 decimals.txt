Query: Python - how to round down to 2 decimals
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35805562)
 You could format your output like this; 

  a=1
for x in range(5):
    a += 0.1
    print("{:.9f}".format(a) )
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49604531)
 Not sure why, but '{:0.2f}'.format(0.5357706) gives me '0.54'.
The only solution that works for me (python 3.6) is the following: 

  def ceil_floor(x):
    import math
    return math.ceil(x) if x < 0 else math.floor(x)

def round_n_digits(x, n):
    import math
    return ceil_floor(x * math.pow(10, n)) / math.pow(10, n)

round_n_digits(-0.5357706, 2) -> -0.53 
round_n_digits(0.5357706, 2) -> 0.53
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40551638)
 Here is my solution for the round up/down problem 

 < .5  round down 

 
   = .5  round up 
 

 

  import math

def _should_round_down(val: float):
    if val < 0:
        return ((val * -1) % 1) < 0.5
    return (val % 1) < 0.5

def _round(val: float, ndigits=0):
    if ndigits > 0:
        val *= 10 ** (ndigits - 1)

    is_positive = val > 0
    tmp_val = val
    if not is_positive:
        tmp_val *= -1

    rounded_value = math.floor(tmp_val) if _should_round_down(val) else    math.ceil(tmp_val)
    if not is_positive:
        rounded_value *= -1

    if ndigits > 0:
        rounded_value /= 10 ** (ndigits - 1)

    return rounded_value

# test
# nr = 12.2548
# for digit in range(0, 4):
#     print("{} decimals : {} -> {}".format(digit, nr, _round(nr, digit)))

# output
# 0 decimals : 12.2548 -> 12
# 1 decimals : 12.2548 -> 12.0
# 2 decimals : 12.2548 -> 12.3
# 3 decimals : 12.2548 -> 12.25
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1598583)
 To round x to n decimal places use: 

  "{0:.{1}f}".format(x,n)
  

 where 0 and 1 stand for the first and second arguments of the str.format() method, respectively. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19119772)
 0.4 and 0.40 are mathematically equivalent. 

 If you want to display them with two decimal places, use  {:.2f}  formatting: 

  >>> '{:.2f}'.format(0.4)
'0.40'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38629025)
 I just found out that it is possible to combine both the  {0}  and the  {digits}  notation. This is especially useful when you want to round all variables to a pre-specified number of decimals  with 1 declaration : 

  sName = 'Nander'
fFirstFloat = 1.12345
fSecondFloat = 2.34567
fThirdFloat = 34.5678
dNumDecimals = 2

print( '{0} found the following floats: {1:.{digits}f}, {2:.{digits}f}, {3:.{digits}f}'.format(sName, fFirstFloat, fSecondFloat, fThirdFloat, digits=dNumDecimals))
# Nander found the following floats: 1.12, 2.35, 34.57
  



