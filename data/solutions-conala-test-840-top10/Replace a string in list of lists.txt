Query: Replace a string in list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13781853)
 Well, think about what your original code is doing: 

  example = [x.replace('\r\n','') for x in example]
  

   .replace()  method on each element of the list as though it were a string. But each element of this list is another list!   .replace()  on the child list, you want to call it on each of its contents. 

 For a nested list, use nested list comprehensions! 

  example = [["string 1", "a\r\ntest string:"],["string 1", "test 2: another\r\ntest string"]]
example = [[x.replace('\r\n','') for x in l] for l in example]
print example
  

 

  [['string 1', 'atest string:'], ['string 1', 'test 2: anothertest string']]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45584577)
 This creates a list of strings: 

  lines = file.read().splitlines()
  

 And then this creates a list of lists of strings: 

  lines = [lines[x:x+2] for x in range(0, len(lines), 3)]
  

 Replace works on a string, not a list. There are many ways to solve this: 

  # 1. do replace on original string, before splitting.
lines = file.read().replace("->", ",") 

# 2. or do replace on elements of list, before creating list of lists
lines = file.read().splitlines()
lines = [i.replace("->",",") for i in lines]

# 3. or replace on each element in list of lists 
# (not implemented)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13782720)
 In case your lists get more complicated than the one you gave as an example, for instance if they had three layers of nesting, the following would go through the list and all its sub-lists replacing the \r\n with space in any string it comes across. 

  def replace_chars(s):
    return s.replace('\r\n', ' ')

def recursively_apply(l, f):
    for n, i in enumerate(l):
        if type(i) is list:
            l[n] = recursively_apply(l[n], f)
        elif type(i) is str:
            l[n] = f(i)
    return l
example = [[["dsfasdf", "another\r\ntest extra embedded"], 
         "ans a \r\n string here"],
        ['another \r\nlist'], "and \r\n another string"]
print recursively_apply(example, replace_chars)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10328337)
 You can also use  map  and  lambda : 

  map(lambda a: a.replace("\'",""),s)  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44308130)
  list = ['happy','angry','sad','emotion']
new_list = [int(y) if y.isdigit() else y for y in [x.replace('happy', '1').replace('angry', '0').replace('sad', '0').replace('emotion', 'happy') for x in list]]
  

 If you want to replace more than these 4 values, it would make sense to make a generalized replace-function which takes several replacements, e.g. two lists. 

  EDIT : Fixed in case you absolutely want numbers and not strings as output 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39149180)
 You can use  replace  +  eval : 

  value = "[[1 0 0 0] [0 1 0 0] [0 0 1 0] [0 0 0 1]]"
result = eval(value.replace(" ", ","))
result
#output:
[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]
  

 And to convert the integers to floats: 

  [list(map(float, l)) for l in result] #if you're using python 2 you can remove the "list" wrapping the "map" 
#output
[[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10328450)
 Sam, 

 This is the closest way I can think of to do it without iteration. Ultimately it is iterating in some fashion at a very atomic level. 

  s = ["sam1", "s'am2", "29"]
x = ','.join(s).replace("'","").split(",")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42749923)
 The fact that this is a dictionary of lists is irrelevant. There are strings which have to be modified depending on other strings. 

 These are the strings: 

  all_strings = [s for string_list in my_dict.values() for s in string_list]
  

 To replace a string: 

  def expand_string(s, all_strings):
    # compare words
    matches = [s2 for s2 in all_strings
               if all(word in s2.split() for word in s.split())]
    if matches:
        # find longest result
        return sorted(matches, key=len, reverse=True)[0]
    else:
        # this wont't really happen, but anyway
        return s
  

 To replace everything: 

  result = {k: [expand_string(s, all_strings) for s in v]
          for k, v in my_dict.items()}
  



