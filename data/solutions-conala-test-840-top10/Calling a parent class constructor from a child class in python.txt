Query: Calling a parent class constructor from a child class in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15777486)
 You need to explicity call the parent constructor in the http://docs.python.org/2/reference/datamodel.html#object.__init__ method of the child class.  

  class Child(Parent): # define child class
   def __init__(self):
      Parent.__init__(self)
      print "Calling child constructor"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12557639)
 Python recommends using  super() . 

 Python 2: 

  super(Instructor, self).__init__(name, year)
  

 Python 3: 

  super().__init__(name, year)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15777488)
 From the http://www.python.org/dev/peps/pep-0020/: 

 
   Explicit is better than implicit. 
 

 Should Python call the parent constructor before or after the child constructor?    . 

  class Child(Parent): # define child class
    def __init__(self):
        super(Child, self).__init__()  # call the appropriate superclass constructor
        print "Calling child constructor"
  

 See also https://stackoverflow.com/q/576169/1558890 for the benefits of using  super() . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49853154)
 You need to define  Parent  as a new-style class:  Parent(object)  and use  super(Child, self).myMethod()  in  Child . https://pyfiddle.io/fiddle/b6ee2520-9c42-4a81-ab8f-9f4d340ee991/?m=Saved%20fiddle 

  class Parent(object):      
   def myMethod(self):
      print 'Calling parent method'

class Child(Parent):
   def myMethod(self):
      super(Child, self).myMethod()
      print 'Calling child method'

c = Child()
c.myMethod()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43714313)
 This can be done with: 

  Code:  

  class Parent(object):

    def clone(self):
        return type(self)(self._a)
  

  Test Code:  

  class Parent(object):
    def __init__(self, ctype, a):
        print('This is the parent constructor')
        self._ctype = ctype
        self._a = a

    @property
    def a(self):
        return self._a

    @property
    def ctype(self):
        return self._ctype

    def clone(self):
        return type(self)(self._a)


class ChildOne(Parent):
    def __init__(self, a):
        super(ChildOne, self).__init__('one', a)
        print('This is the child One constructor')
        self.one = 1

class ChildTwo(Parent):
    def __init__(self, a):
        super(ChildTwo, self).__init__('two', a)
        print('This is the child Two constructor')
        self.two = 2

k = ChildOne(42)
print(k.ctype)
l = k.clone()
print(l.a)
print(type(l))
  

  Results:  

  This is the parent constructor
This is the child One constructor
one
This is the parent constructor
This is the child One constructor
42
<class '__main__.ChildOne'>
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15777618)
 If you have Python 3.x, you can run this instead (it is nearly what you are doing in your own code): 

  #! /usr/bin/env python3

def main():
    c = Child()
    c.method_a()
    c.method_b()
    c.get_attr()
    c.set_attr(200)
    Child().get_attr()

class Parent:

    static_attr = 100

    def __init__(self):
        print('Calling parent constructor')

    def method_a(self):
        print('Calling parent method')

    def set_attr(self, value):
        type(self).static_attr = value

    def get_attr(self):
        print('Parent attribute:', self.static_attr)

class Child(Parent):

    def __init__(self):
        print('Calling child constructor')
        super().__init__()

    def method_b(self):
        print('Calling child method')

if __name__ == '__main__':
    main()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16281115)
  

  class BaseTask:
    def __init__(self, settings):
        self.settings = settings[self.__class__]

class SomeTask(BaseTask):
    pass

class SomeOtherTask(BaseTask):
    pass
  

 When you initialise one of the child classes with the settings, they will do what you expect. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12103554)
 What is wrong with just using  self.x ? 

  class Parent(object):
    x = None  # default value
    def __init__(self):
        print self.x

class someChild(Parent):
    x = 10
    def __init__(self):
        Parent.__init__(self)

class otherChild(Parent):
    x = 20
    def __init__(self):
        Parent.__init__(self)

a = someChild()
# output: 10
b = otherChild()
# output: 20
  

 Note how this works even if  Parent  has a class attribute  x  as well ( None  in the above example)- the child's takes precedence. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1081280)
 You don't define a constructor (init) for Child, so the Parent constructor is called, expecting 4 arguments while only 2 are passed in (from new).  Here's one way to accomplish what you want: 

  class Child(Parent):
    def __init__(self, *args, **kwargs):
        if len(args) == 1 and isinstance(args[0], Parent):
            Parent.__init__(self, args[0].x, args[0].y, args[0].z)

        else:
            # do something else
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/904081)
 Python 3 includes an improved super() which allows use like this: 

  super().__init__(args)
  



