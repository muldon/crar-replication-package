Query: How to get a 16bit Unsigned integer in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19547143)
 Here is a solution with structs since I do not know how python represents negative numbers binarily. 

  import struct
struct.unpack('H', struct.pack('h', number))
  

 It packs it as a short (2 bytes) and unpacks it as an unsigned short. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19547075)
  >>> import numpy as np
>>> np.array([-20357],dtype="uint16")
array([45179], dtype=uint16)
  

 in your case when you are done looping over everything and you have it in a list 

 just call  np.array(my_list,dtype="uint16")  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3669832)
 http://www.imagemagick.org/script/index.php supports 16bit Tiffs, and they have a wrapper for Python called http://www.imagemagick.org/download/python/. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34871758)
 It looks like your library only understands unsigned 16-bit numbers.  If you bitwise-AND the signed value with 0xFFFF (a 16-bit mask) in Python, you'll get the same result: 

 What you're doing: 

  >>> import struct
>>> struct.unpack('<H',struct.pack('<h',-100))[0]
65436
  

  

  >>> -100 & 0xFFFF
65436
  

  

  context[0x00].setValues(4, 0x10, -100 & 0xFFFF)
  

 Positive values will be unaffected, and negative values result in the unsigned 16-bit 2's complement value. 

 To convert an unsigned 2's complement 16-bit value back to signed, test for the sign bit (2<sup>15</sup>) and subtract 2<sup>16</sup> if present: 

  value = value-2**16 if value & 2**15 else value
  

  

  value = value-0x10000 if value & 0x8000 else value
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51899727)
 just use abs for converting unsigned to signed in python  

   a=-12
b=abs(a)
print(b)
  

 Output:
   12 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1887570)
 Use the http://docs.python.org/3.1/library/struct.html#module-struct module. 

  import struct
value = struct.unpack('B', data[0])[0]
  

 Note that unpack always returns a tuple, even if you're only unpacking one item. 

 Also, have a look at https://stackoverflow.com/questions/1591920/python-binary-data-reading. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1887569)
 bytes/bytearray is a sequence of integers. If you just access an element by its index you'll have an integer: 

  >>> b'abc'
b'abc'
>>> _[0]
97
  

 By their very definition, bytes and bytearrays contain integers in the  range(0, 256) . So they're "unsigned 8-bit integers". 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14910365)
 You can use the  struct  module to convert between integers and representation as bytes. In your case, to convert from a Python integer to two bytes and back, you'd use: 

  >>> import struct
>>> struct.pack('>H', 12345)
'09'
>>> struct.unpack('>H', '09')
(12345,)
  

 The first argument to  struct.pack  and  struct.unpack  represent how you want you data to be formatted. Here, I ask for it to be in big-ending mode by using the  >  prefix (you can use  <  for little-endian, or  =  for native) and then I say there is a single unsigned short (16-bits integer) represented by the  H . 

 Other possibilities are  b  for a signed byte,  B  for an unsigned byte,  h  for a signed short (16-bits),  i  for a signed 32-bits integer,  I  for an unsigned 32-bits integer. You can get the complete list by looking at the documentation of the  struct  module. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20766849)
 Python doesn't have builtin unsigned types.  You can use mathematical operations to compute a  new  int representing the value you would get in C, but there is no "unsigned value" of a Python int.  The Python int is an abstraction of an integer value, not a direct access to a fixed-byte-size integer. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/20746862)
 specify dtype as  >H  (http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html#built-in-scalar-types) or  >u2  (http://docs.scipy.org/doc/numpy/reference/arrays.interface.html#python-side): 

  np.memmap('test.bin', dtype=np.dtype('>u2'), mode='r')
  



