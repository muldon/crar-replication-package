Query: Splitting a semicolon-separated string to a dictionary, in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40329965)
 Add a  if  condition in your generator expression.  

  >>> s = 'SEQ(A=1%B=2)OPS(CC=0%G=2)T1(R=N)T2(R=Y)'
>>> s.split(')')
['SEQ(A=1%B=2', 'OPS(CC=0%G=2', 'T1(R=N', 'T2(R=Y', '']
>>> d = dict(item.split('(') for item in s.split(')') if item!='')
>>> d
{'T1': 'R=N', 'OPS': 'CC=0%G=2', 'T2': 'R=Y', 'SEQ': 'A=1%B=2'}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40330060)
 Alternatively, this could be solved with a regular expression: 

  >>> import re
>>> s = 'SEQ(A=1%B=2)OPS(CC=0%G=2)T1(R=N)T2(R=Y)'
>>> print dict(match.groups() for match in re.finditer('([^(]+)\(([^)]+)\)', s))
{'T1': 'R=N', 'T2': 'R=Y', 'SEQ': 'A=1%B=2', 'OPS': 'CC=0%G=2'}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52648415)
 you need to hierarchize your split operations: 

  s = "username:password;username1:password1;username2:password2"

d = dict(v.split(":") for v in s.split(";"))

print(d)
  

 result: 

  {'username2': 'password2', 'username': 'password', 'username1': 'password1'}
  

 for a multi-line file, just add one more loop: 

  d = dict(v.split(":") for s in f for v in s.strip().split(";"))
  

 It's worthy to add that: 

 
 such a format is short-lived if password contains  ;  or  : . Using the  csv  module and proper quoting could solve the issue 
 duplicate usernames are ignored: only the last entry is considered because of dictionary key unicity. 
  dict(v.split(":") ...)  construct is the old way to create a dictionary without dictionary comprehension, particularly useful here since  split  returns a  list  of  exactly  2 values (key/value). 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54494474)
 You can use  re.split : 

  import re
re.split('[,;/ ]+', names)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6962425)
 Split returns a list as follows 

  >>> a="08-26-2009;08-27-2009;08-29-2009"
>>> a_split = a.split(';')
>>> a_split
['08-26-2009', '08-27-2009', '08-29-2009']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23027484)
 Use the https://docs.python.org/2/library/stdtypes.html#dict with a generator expression: 

  dict(v.split(':') for v in lst)
  

 This works because  dict()  accepts a sequence of (key, value) pairs as input; each  str.split()  call produces these from the elements in your list. 

  

  >>> lst = ['1:A', '2:B', '3:C', '4:A']
>>> dict(v.split(':') for v in lst)
{'1': 'A', '3': 'C', '2': 'B', '4': 'A'}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54494720)
 You can use a gencomp to replace delimeters and then split: 

  names = "John, Paul; Sally/Frank"

''.join(',' if i in ';/' else i for i in names).split(',')
# ['John', ' Paul', ' Sally', 'Frank']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5149981)
 This comes close to doing what you wanted: 

  >>> import urlparse
>>> urlparse.parse_qs("Name1=Value1;Name2=Value2;Name3=Value3")
{'Name2': ['Value2'], 'Name3': ['Value3'], 'Name1': ['Value1']}
  



