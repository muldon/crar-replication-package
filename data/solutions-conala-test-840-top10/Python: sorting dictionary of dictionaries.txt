Query: Python: sorting dictionary of dictionaries
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47891763)
 You need to use all items of each dict while sorting, and  d.items()  iterates items in arbitrary order, so they need to be sorted. And this is your sorting key: 

  a = [{1: 2, 7: 8}, {7: 8, 3: 4}, {5: 6}]
b = [{3: 4, 7: 8}, {7: 8, 1: 2}, {5: 6}]
sorted(a, key=lambda d: sorted(d.items()))
Out: [{1: 2, 7: 8}, {3: 4, 7: 8}, {5: 6}]

sorted(b, key=lambda d: sorted(d.items()))
Out: [{1: 2, 7: 8}, {3: 4, 7: 8}, {5: 6}]

x = [{1: 2},{1: 3}]
y = [{1: 3},{1: 2}]
sorted(x, key=lambda d: sorted(d.items()))
Out: [{1: 2}, {1: 3}]

sorted(y, key=lambda d: sorted(d.items()))
Out: [{1: 2}, {1: 3}]
  

 Note that  sorted(a, key=...)  creates a new list, while  a.sort(key=...)  makes sorting in place. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42399018)
 You can use OrderedDict 

  from collections import OrderedDict

dic = { 'abc': { 'name': 'Joey', 'order': 3 }, 'def': { 'name': 'Allen', 'order': 2 }, 'ghi': { 'name': 'Tim', 'order': 1 } }

order_dic = OrderedDict(sorted(dic.items(), key=lambda x: x[1]['order'], reverse=False))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42398994)
  from _collections import OrderedDict
d = {"abc":{"name":"Joey","order":3},
     "def":{"name":"Allen","order":2},
     "ghi":{"name":"Tim","order":1}}
_sorted = OrderedDict(sorted(d.items(), key=lambda x: x[1]["order"]))
  

  

  print(_sorted)
OrderedDict([('ghi', {'order': 1, 'name': 'Tim'}), ('def', {'order': 2, 'name': 'Allen'}), ('abc', {'order': 3, 'name': 'Joey'})])
  

   

  print(_sorted["ghi"])
{'order': 1, 'name': 'Tim'}
  

 dictionaries are unordered, if you want one that is ordered you have to use  OrderedDict . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42398814)
 Use https://docs.python.org/2/library/functions.html#sorted to sort by "order" and https://docs.python.org/2/library/collections.html#collections.OrderedDict to store the result, 

  import collections

d = {
    "abc": {
        "name": "Joey",
        "order": 3
        },
    "def": {
        "name": "Allen",
        "order": 2
        },
    "ghi": {
        "name": "Tim",
        "order": 1
        }
    }

result = collections.OrderedDict(sorted(d.items(), key=lambda t:t[1]["order"]))

# Output
print(result)
OrderedDict([('ghi', {'name': 'Tim', 'order': 1}), 
            ('def', {'name': 'Allen', 'order': 2}), 
            ('abc', {'name': 'Joey', 'order': 3})])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17362960)
 Dictionaries in Python are orderless.  

 In order to actually store ordering, you will need to either have a list of tuples, or use a http://docs.python.org/2/library/collections.html#collections.OrderedDict. 

  >>> from collections import OrderedDict
>>> OrderedDict(sorted(d.items(), key=lambda item: len(item[1])))
OrderedDict([('category_3', ['z']), ('category_1', ['a', 'b']), ('category_2', ['c', 'd', 'e'])])
  

 The ordering is achieved here by using http://docs.python.org/3.3/library/functions.html#sorted, with a simple  key  function. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47796302)
 Sorting on all  keys  in the dictionaries can be done with: 

  a.sort(key=lambda d: d.keys())
b.sort(key=lambda d: d.keys())
  

 To get the result you want we need to sort the keys on ascending order as follows: 

  a.sort(key=lambda d: sorted(list(d.keys()), reverse=True))
b.sort(key=lambda d: sorted(list(d.keys()), reverse=True))
  

 This gives the following result: 

  >>> a
[{5: 6}, {1: 2, 7: 8}, {3: 4, 7: 8}]
>>> b
[{5: 6}, {1: 2, 7: 8}, {3: 4, 7: 8}]
  

 Edit: In order to sort based on the values as well (asked in the comments) the following might work: 

  a.sort(key=lambda d: sorted(list(d.keys()) + sorted(list(d.values())), reverse=True))
b.sort(key=lambda d: sorted(list(d.keys()) + sorted(list(d.values())), reverse=True))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52142908)
 . This will sort your dict by keys.  This is work only on Python 2.7 

  newlist = sorted(list_to_be_sorted, key=lambda k: k.keys()) 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28839263)
 You can create a list of sorted tuples in this manner, but note that dictionaries themselves are unordered, so you cannot sort the dictionary itself (unless you use something like https://docs.python.org/2/library/collections.html#collections.OrderedDict 

  >>> d = {'a':10,'b':20,'c':5,'d':5,'e':5}
>>> list(sorted(d.items(), key = lambda i : (i[1],i[0]), reverse = True))
[('b', 20), ('a', 10), ('e', 5), ('d', 5), ('c', 5)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18691307)
 I would convert the dictionary to a list of tuples and sort it based on weight (in reverse order for descending), then just remove the objects to get a list of the keys 

  l = documents.items()
l.sort(key=lambda x: x[1]['weight'], reverse=True)
result = [d[0] for d in l]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/27414492)
 You can do as follows: 

  d1 = {'PersonA': 87.0, 'PersonB': 89.0, 'PersonC': 101, 'PersonD': 94, 'PersonE': 112}
print([n for n,s in sorted(d1.items(), key=lambda v:v[1], reverse=True)])
  

  

  ['PersonE', 'PersonC', 'PersonD', 'PersonB', 'PersonA']
  



