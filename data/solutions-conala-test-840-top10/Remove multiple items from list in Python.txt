Query: Remove multiple items from list in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18433)
 Using http://docs.python.org/tut/node7.html#SECTION007140000000000000000 

  list = [x for x in list if x[-5:] != "smith"]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36269020)
 
   But what if I don't know the indices of the items I want to remove? 
 

  .remove but to get the first index corresponding to a value use .index(value): 

  ind=item_list.index('item')
  

  .pop to remove the corresponding value: 

  item_list.pop(ind)
  

 .index(value) gets the first occurrence of value, and .remove(value) removes the first occurrence of value 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18497)
 Both solutions,  filter  and  comprehension  requires building a new list. I don't know enough of the Python internals to be sure, but I  think  that a more traditional (but less elegant) approach could be more efficient: 

  names = ['Jones', 'Vai', 'Smith', 'Perez']

item = 0
while item <> len(names):
    name = names [item]
    if name=='Smith':
        names.remove(name)
    else:
        item += 1

print names
  

 Anyway, for short lists, I stick with either of the two solutions proposed earlier. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42243963)
  item_list = ['item', 5, 'foo', 3.14, True]
list_to_remove=['item', 5, 'foo']
  

 final list after removing should be as follow 

  final_list=[3.14, True]
  

 Single Line Code 

  final_list= list(set(item_list).difference(set(list_to_remove)))
  

 output would be as follow  

  final_list=[3.14, True]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/181062)
 You can also iterate backwards over the list: 

  for name in reversed(names):
    if name[-5:] == 'Smith':
        names.remove(name)
  

 This has the advantage that it does not create a new list (like  filter  or a list comprehension) and uses an iterator instead of a list copy (like  [:] ). 

 Note that although removing elements while iterating backwards is safe, inserting them is somewhat trickier. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15434620)
 Here is my  filter_inplace  implementation that can be used to filter items from a list in-place, I came up with this on my own independently before finding this page. It is the same algorithm as what PabloG posted, just made more generic so you can use it to filter lists in place, it is also able to remove from the list based on the  comparisonFunc  if reversed is set  True ; a sort-of of reversed filter if you will. 

  def filter_inplace(conditionFunc, list, reversed=False):
    index = 0
    while index < len(list):
        item = list[index]

        shouldRemove = not conditionFunc(item)
        if reversed: shouldRemove = not shouldRemove

        if shouldRemove:
            list.remove(item)
        else:
            index += 1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23478530)
 If you know the array location you can can pass it into itself. If you are removing multiple items I suggest you remove them in reverse order. 

  #Setup array
array = [55,126,555,2,36]
#Remove 55 which is in position 0
array.remove(array[0])
  



