Query: Make dictionary from list with python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51983768)
 With Python 3.7 I could do this: 

  >>> myDic={10: 'b', 3:'a', 5:'c'}
>>> sortDic = sorted(myDic.items())
>>> print(dict(sortDic))
{3:'a', 5:'c', 10: 'b'}
  

 If you want a list of tuples: 

  >>> myDic={10: 'b', 3:'a', 5:'c'}
>>> sortDic = sorted(myDic.items())
>>> print(sortDic)
[(3, 'a'), (5, 'c'), (10, 'b')]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44479882)
 I found better do the opposite, instead of make a list and then a dictionary I made dictionary and then a list. 

  

  in_list = [[1, 'A'], [1, 'B'],[1, 'D'], [2, 'A'],[2,'D'], [3, 'C'], [4, 'D'], [5, 'B'], [6, 'D']]
  

 Code: 

  mydict = {}
for sublist in in_list:
    if sublist[0] in mydict.keys():
        mydict[sublist[0]] = [*mydict[sublist[0]],sublist[1]]
    else:
        mydict[sublist[0]] = sublist[1]
  

 Output: 

  >>> mydict
{1: ['A', 'B', 'D'], 2: ['A', 'D'], 3: 'C', 4: 'D', 5: 'B', 6: 'D'}
  

 Make an easy list with the dictionary: 

  mylist = list(mydict.items())
  

 Output: 

  >>> mylist
[(1, ['A', 'B', 'D']), (2, ['A', 'D']), (3, 'C'), (4, 'D'), (5, 'B'), (6, 'D')]
  

 Make another list with the dictionary: 

  mylist = = [[k,v] for k,v in mydict.items()]
  

    

  mylist = []
for key, value in mydict.items():
  

 Output: 

  >>> mylist
[[1, ['A', 'B', 'D']], [2, ['A', 'D']], [3, 'C'], [4, 'D'], [5, 'B'], [6, 'D']]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4460510)
 If all elements of the list may be used as dictionary keys (i.e. they are all hashable) this is often faster. http://docs.python.org/faq/programming.html#how-do-you-remove-duplicates-from-a-list 

  d = {}
for x in mylist:
    d[x] = 1
mylist = list(d.keys())
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11089708)
  dict  does not keep its elements' order. What you need is an OrderedDict: http://docs.python.org/library/collections.html#collections.OrderedDict 

  edit  

 Usage example: 

  >>> from collections import OrderedDict
>>> a = {'foo': 1, 'bar': 2}
>>> a
{'foo': 1, 'bar': 2}
>>> b = OrderedDict(sorted(a.items()))
>>> b
OrderedDict([('bar', 2), ('foo', 1)])
>>> b['foo']
1
>>> b['bar']
2
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10942760)
 Assuming x is your list, do  dict((a, '') for a in x) . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34233304)
 Assuming you have the dictionary Dd. You want to prepare a list of lists with key and value pair we can make use of comprehensions.  

 Here is the one line solution: 

  [ [x,y] for x in Dd.keys() for y in Dd.values() if Dd[x] == y ]
  

 Or even better: 

  [[x, y] for x, y in Dd.items()]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11069701)
 The tools in collections make short work of this problem: 

  >>> from collections import defaultdict, Counter
>>> d = defaultdict(Counter)
>>> for ip, code in [['ip1',404], ['ip1',200], ['ip1',200],
                     ['ip2',200], ['ip2',200], ['ip2',504]]:
        d[ip][code] += 1

>>> dict(d)
{'ip2': Counter({200: 2, 504: 1}), 'ip1': Counter({200: 2, 404: 1})}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15803143)
 . You can call  items  on the dictionary to get a list of pairs of (key, value). Then you can reverse the tuples and pass the new list into  dict : 

  transposed = dict((value, key) for (key, value) in my_dict.items())
  

 Python 2.7 and 3.x also have dictionary comprehensions, which make it nicer: 

  transposed = {value: key for (key, value) in my_dict.items()}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4208221)
 A http://docs.python.org/library/collections.html#collections.defaultdict is a subclass of  dict  which would be useful here: 

  import collections
result=collections.defaultdict(list)
for n,e in zip(N,E):
    result[n].append(e)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54488192)
 Make lists of keys and values: 

  dict={'a':'b'}

keys = list(dict.keys())
values = list(dict.values())
  

 then make variables: 

  key = keys[0]
value = values[0]
  



