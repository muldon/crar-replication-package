Query: How to check if a dictionary is in another dictionary in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33459086)
 There must be more to a Python dictionary than a table lookup on hash(). By brute experimentation I found this  hash collision : 

  >>> hash(1.1)
2040142438
>>> hash(4504.1)
2040142438
  

 Yet it doesn't break the dictionary: 

  >>> d = { 1.1: 'a', 4504.1: 'b' }
>>> d[1.1]
'a'
>>> d[4504.1]
'b'
  

 Sanity check: 

  >>> for k,v in d.items(): print(hash(k))
2040142438
2040142438
  

 Possibly there's another lookup level beyond hash() that avoids collisions between dictionary keys. Or maybe dict() uses a different hash. 

 (By the way, this in Python 2.7.10. Same story in Python 3.4.3 and 3.5.0 with a collision at  hash(1.1) == hash(214748749.8) .) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20554784)
 The syntax in  NameExists  seems wrong, you aren't using the  value  and  best_guess.values()  is returning an iterator, so  in  will only work once, unless we convert it to a list or a set (you are using Python 3.x, aren't you?). I believe this is what you meant: 

  def NameExists(best_guess, line):
    vals = set(best_guess.values())
    return all(value in vals for value in line['full name'])
  

 And the  CheckDuplicates  function can be written in a shorter way like this: 

  def CheckDuplicates(best_guess, line):
    return len(set(best_guess.values())) != len(best_guess)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14615925)
 Make  A  and  B  into dictionaries: 

  dA = dict(A)
dB = dict(B)
  

 Then, just check that the keys and values match: 

  count = 0
for k,v in dA.iteritems():
    if dB.get(k) == v:
        count += 1
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18170481)
 You can make sets from the lists and see if one set is a subset of another: 

  >>> list1 = [('a', 1), ('c', 3)]
>>> list2 = [('a', 1)]
>>> set(list2).issubset(list1)
True
  

  

  set(L[0].f.items()).issubset(set(a3.f.items()))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15775229)
 Inside your first loop, you're iterating over the  (key, value)  pairs. Changing the value of the  key  variable will not update it on the dictionary. 

 What you have to do instead is reassign the  value  to the new  key  ( values ) and  del  the old key. This example creates a new copy so it doesn't modify the dict in place. I've also removed the inner  for loop , since in python you can just check if the key is in the dict without iterating over all of them by using  if key in dictionary . 

  def convert(items, id):
    new_dict = items.copy()
    for key, value in items.items():
        if key in id:
            new_key = id[key]
            new_dict[new_key] = items[key] # Copy the value
            del new_dict[key]
    return new_dict
  

 Example ipython session: 

  In [1]: items = {'apple': 42, 'orange': 17}

In [2]: new_keys = {'apple': 'banana', 'orange': 'tangerine'}

In [3]: def convert(items, ID):
            ...

In [13]: convert(items, new_keys)
Out[13]: {'banana': 42, 'tangerine': 17} # Updated dict returned

In [14]: items
Out[14]: {'apple': 42, 'orange': 17} # Original dict stays untouched
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18170471)
 You're checking if the actual list is in there, not the tuple. Here, you can use http://docs.python.org/2/library/functions.html#all: 

  all(i in a3.f.items() for i in L[0].f.items())
  

  

  >>> set(L[0].f.items()) & set(a3.f.items())) == set(L[0].f.items())
True # Note that without the bool call this returns set([('a', 1)]), which can
     # be useful if you have more than one sublist tuples.
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20554860)
 As error is about generator exit, I guess you use python 3.x. So  best_guess.values()  is a generator, which exhaust for the first  value in line['full name']  for which a match will not be found. 

 Also, I guess  all  usage is incorrect, if you look for  any  value to exist (not sure, from which one dictinary though). 

 You can use something like follows, providing  line  is the second dictionary: 

  def NameExists(best_guess, line):
    vals = set(best_guess.values())
    return bool(set(line.values()).intersection(vals))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34415949)
 One way: 

      >>> d = {
     (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Me'): 300, 
     (u'A_String_0', u'B_String_4'): 301, 
     (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Key'): 301,
    }
    >>> 
    >>> 
    >>> d_out = {k:v for k,v in d.items() if not any(x.startswith('Remove_') for x in k)}
    >>> d_out
{(u'A_String_0', u'B_String_4'): 301}
  

 EDIT: In case you wanted to check if  Remove_  is part of any item of the tuple key, then you are better with: 

  >>> d_out = {k:v for k,v in d.items() if not any('Remove_' in x for x in k)}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6755668)
 In your particular case, you should probably do this instead of comparing with  None : 

  "not_in_dictionary" in c
  

 If you were literally using this code, it will not work: 

  c[:not_in_dictionary] is not None
  

 Python doesn't have special  : keywords for dictionary keys; ordinary strings are used instead. 

 

 The ordinary behaviour in Python is to raise an exception when you request a missing key, and let you handle the exception. 



<pre class="lang-python prettyprint-override"> d = {"a": 2, "c": 3}

try:
    print d["b"]
except KeyError:
    print "There is no b in our dict!"
  

 If you want to get  None  if a value is missing you can use the  dict 's  .get  method to return a value ( None  by default) if the key is missing. 

<pre class="lang-python prettyprint-override"> print d.get("a") # prints 2
print d.get("b") # prints None
print d.get("b", 0) # prints 0
  

 To just check if a key has a value in a  dict , use the  in  or  not in  keywords. 

<pre class="lang-python prettyprint-override"> print "a" in d # True
print "b" in d # False
print "c" not in d # False
print "d" not in d # True
  

 

 Python includes a module that allows you to define dictionaries that return a default value instead of an error when used normally: http://docs.python.org/library/collections.html#defaultdict-objects. You could use it like this: 

<pre class="lang-python prettyprint-override"> import collections

d = collections.defaultdict(lambda: None)
print "b" in d # False
print d["b"] # None
print d["b"] == None # True
print "b" in d # True
  

 Notice the confusing behaviour with  in . When you look up a key for the first time, it adds it pointing to the default value, so it's now considered to be  in  the  dict . 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/8817113)
 "from  key4  to  key7 " is  not a meaningful concept . A dictionary is fundamentally  unordered . There is no sensible way to say that one key comes before or after another. 

 Determine all the keys you want to check, and check them. 



