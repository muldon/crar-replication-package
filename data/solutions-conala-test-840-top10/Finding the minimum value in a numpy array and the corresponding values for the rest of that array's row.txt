Query: Finding the minimum value in a numpy array and the corresponding values for the rest of that array's row
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14956718)
  

  a[np.argmin(a[:, 1]), 0]
  

  Break-down  

 a. Grab the second column 

  >>> a[:, 1]
array([ 4,  1, 10,  8])
  

 b. Get the index of the minimum element in the second column 

  >>> np.argmin(a[:, 1])
1
  

 c. Index  a  with that to get the corresponding row 

  >>> a[np.argmin(a[:, 1])]
array([2, 1])
  

 d. And take the first element 

  >>> a[np.argmin(a[:, 1]), 0]
2
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31733793)
 Here's the  numpy  idiom for doing the same thing: 

  b[np.arange(len(a)), np.argmax(a, axis=1)]
  

 For example: 

  >>> a = np.array([
    [1, 2, 0],
    [2, 1, 0],
    [0, 1, 2]
    ])
>>> b = np.array([
    [1, 2, 3],
    [1, 2, 3],
    [1, 2, 3]
    ])
>>> b[np.arange(len(a)), np.argmax(a, axis=1)]
array([2, 1, 3])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14957122)
 Using  np.argmin  is probably the best way to tackle this.  To do it in pure python, you could use: 

  min(tuple(r[::-1]) for r in a)[::-1]  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49226649)
 You can do this using  np.argmin  and  np.sum : 

  array_minimum_index = np.argmin([np.sum(x, axis=1) for x in mat])
array_maximum_index = np.argmax([np.sum(x, axis=1) for x in mat])
  

 For your array, this results in  array_minimum_index = 0  and  array_maximum_index = 7 , as your sums at those indices are  -1404.55157  and  5566.0  

 To simply print out the values of the min and max sum, you can do this: 

  array_sum_min = min([np.sum(x,axis=1) for x in mat])
array_sum_max = max([np.sum(x,axis=1) for x in mat])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29301948)
 You just need to specify the axis across which you want to take the minimum. To find the minimum value in each row, you need to specify axis 1: 

  >>> numbers.min(axis=1)
array([ 0,  4,  8, 12, 16])
  

 For a 2D array,  numbers.min()  finds the  single  minimum value in the array,  numbers.min(axis=0)  returns the minimum value for each column and  numbers.min(axis=1)  returns the minimum value for each row. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18165372)
 If you can flatten the whole list into a numpy array, then use argsort, the first row of argsort will tell you which array contains the minimum value: 

  a = [1,2,3,4]
b = [3,-4,5,8]
c = [6,1,-7,12]
S = [a,b,c]
S2 = np.array(S)
S2.argsort(axis=0)
array([[0, 1, 2, 0],
       [1, 2, 0, 1],
       [2, 0, 1, 2]])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35955079)
 I am in EST timezone, so at the time this answer is written, it is 2:40am. But I am taking time to answer, basically to repay your willingness to improve. 

 We will use a library called  numpy . If you don't have  numpy  on your machine, please Google-Search how you can install it on your OS. It is important for your career onwards, and you will see why. 

 First, create your  numpy  array: 

  >>> import numpy as np
>>> l = np.array([[3, 0, 2, -8, -8], [5, 3, 2, 2, 3], [2, 5, 2, 1, 4]])
>>> l
array([[ 3,  0,  2, -8, -8],
       [ 5,  3,  2,  2,  3],
       [ 2,  5,  2,  1,  4]])
  

 Now you can access the first column by doing 

  >>> l[:, 0]
array([3, 5, 2])
  

 The first row can be accessed by 

  >>> l[0, :]
array([ 3,  0,  2, -8, -8])
  

 The first row from the second element to the fourth element by 

  >>> l[0, 1:4]
array([ 0,  2, -8])
  

 Based on all the features above, the target function you want is basically this: 

  >>> d = 1
>>> np.abs(np.sum(l[:, 0:d]) - np.sum(l[:, d:]))
2
  

  d  is your dividing index. Now you can iterate over  d  in a for loop. 

 I suggest you learn about at least  numpy  and  scipy  if you plan to carry on your career with  Python . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3499042)
 If you want to use numpy, you must define  darr  to be a numpy array, not a  list : 

  import numpy as np
darr = np.array([1, 3.14159, 1e100, -2.71828])
print(darr.min())
  

  darr.argmin()  will give you the index corresponding to the minimum. 

 The reason you were getting an error is because  argmin  is a method understood by numpy arrays, but not by Python  lists . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43481819)
 If you want to use comparison against the minimum value, we need to use  np.min  and keep the dimensions with  keepdims  set as  True  to give us a boolean array/mask. To select the first occurance, we can use  argmax  along each row of the mask and thus have our desired output. 

 Thus, the implementation to get the corresponding column indices would be - 

  (C==C.min(1, keepdims=True)).argmax(1)
  

  

  In [114]: C   # Input array
Out[114]: 
array([[1, 2, 4],
       [2, 2, 5],
       [4, 3, 3]])

In [115]: C==C.min(1, keepdims=1) # boolean array of min values
Out[115]: 
array([[ True, False, False],
       [ True,  True, False],
       [False,  True,  True]], dtype=bool)

In [116]: (C==C.min(1, keepdims=True)).argmax(1) # argmax to get first occurances
Out[116]: array([0, 0, 1])
  

 The first output of row indices would simply be a range array - 

  np.arange(C.shape[0])
  

 

 To achieve the same column indices of first occurance of minimum values, a direct way would be to use  np.argmin  - 

  C.argmin(axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/49226651)
  x = np.sum(x,axis=1)
min_x = x.min()
max_x = x.max()
  

 presuming x is 4,2 array use np.sum to sum across the rows, then .min() returns the min value of your array and .max() returns the max value 



