Query: Using BeautifulSoup to select div blocks within HTML
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19012021)
 The correct use would be: 

  soup.find_all('div', class_="crBlock ")
  

 By default, beautiful soup will return the entire tag, including contents. You can then do whatever you want to it if you store it in a variable. If you are only looking for one div, you can also use  find()  instead.  

  div = soup.find('div', class_="crBlock ")
print(div.find_all(text='foobar'))
  

 Check out the http://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class for more info on all the filters you can use. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35893380)
 You can use  soup.find('div', {'itemprop': 'datePublished'})  to select the  div  element with  itemprop   datePublished . 

    

  from bs4 import BeautifulSoup

content = '''<div class="details-wrapper apps-secondary-color">
    <div class="details-section metadata">
        <div class="details-section-heading">
         <div class="details-section-contents">
             <div class="meta-info">
                 <div class="title">Updated</div>
                 <div class="content" itemprop="datePublished">March 7, 2016</div>
                 </div>
                 <div class="meta-info">
                 <div class="meta-info">
                 <div class="meta-info">
<div class="meta-info">
<div class="meta-info contains-text-link">
<div class="meta-info">
<div class="meta-info">
<div class="meta-info">
<div class="meta-info contains-text-link">
<div class="meta-info">
<div class="meta-info meta-info-wide">
<div class="details-sharing-section">
</div>
<div class="details-section-divider"></div>
</div>
</div>
</div>'''

soup = BeautifulSoup(content)
date = soup.find('div', {'itemprop':'datePublished'})
print(date.text)
  

  Output  

  March 7, 2016
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42184073)
 You can use https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors with BeautifulSoup4: 

  >>> from bs4 import BeautifulSoup
>>> html = ...  # the html provided in the question
>>> soup = BeautifulSoup(html, 'lxml')
>>> name, size = soup.select('div.cb-hmscg-bat-txt.cb-ovr-flo div')
>>> name.text
u'BAN'
>>> size.text
u'322/6 (104.0 Ovs)'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29503514)
 There are relevant http://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-sibling-and-previous-sibling, http://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-siblings-and-previous-siblings, http://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-next-siblings-and-find-next-sibling methods that can help you to locate the  div  and  p  siblings: 

  div = soup.find("div", id="test")
p = div.find_next_sibling("p") 
  

 You can also use the https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_selectors: 

  soup.select("div#test + p")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36671201)
  BeautifulSoup()  would return you the "soup" object. You need to find the  div  element using  find()  or  find_all()  or  select()  or other method. Example using  find() :  

  div = soup.find("div")
  

  div  would be a https://www.crummy.com/software/BeautifulSoup/bs4/doc/#tag in this case. There is a https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attributes: 

  if div.get("id") == "foo":
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31997747)
 
   Beautiful Soup supports the most commonly-used CSS selectors. Just pass a string into the http://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors method 
 

  In [25]: soup = BS("""  ...  
  ...  
<div class="one">
    <ul class = "two">
          ...  
          ...  
          ...  
          ...  
     
</div>""")

In [26]: soup.select("div  ul")
Out[26]: 
[<ul class="two">
   ...  
   ...  
   ...  
   ...  
  ]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17388130)
 Use http://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-previous-siblings-and-find-previous-sibling: 

  >>> for divtag in div_Blocks:
...     print divtag.find_previous_sibling('img')
... 
 
 
 
 
 
 
 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19014350)
  import urllib2
from bs4 import BeautifulSoup
from time import sleep

def getData():
    htmlfile = open('C:/html.html', 'rb')
    html = htmlfile.read()
    soup = BeautifulSoup(html)
    items = soup.find_all('div', class_="blocks")
    for item in items:
        links = item.find_all('a')
        for link in links:
            if link.parent.name == 'h3':
                print(link.text)

getData()
  

 You can also just find all the links from the very beginning and check both the parent is h3 and the parent's parent is a div with class blocks 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52659852)
 Looks like you need  findNext  method. 

    

  from bs4 import BeautifulSoup


html = """<div class = "some class">
    <h4>X1</h4>
    www.someurl.com
</div>"""

soup = BeautifulSoup(html, "html.parser")
for tag in soup.find_all("h4", text="X1"):     #Find all h4 with required text. 
    print(tag.findNext("a").text)
  

  Output:  

 <code
  



