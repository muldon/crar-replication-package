Query: What does a for loop within a list do in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51036059)
 Well the elements within list 2 are the first element of the list within a list within a list. 

 So they are both of type list, however in the first you are printing the length of three indexed values hence 3. 

 In the second for loop you are printing the length of the inner list within a list, that only has one element in it (another list, which contains a list that contains the list of numbers within that) 

 Basically you have embedded the list of numbers 4 fold as the first element
within the original list 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32752221)
 This solution will require you to loop through each list contained in your top level list. 

  def avg(lsts):
    for lst in lsts:
        print(sum(lst)/len(lst))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13620540)
 I dont't know about list comprehensions in 2.4. But a classical for loop will do in any case. 

  l = []
for x in ["1","2","3"]:
    if x != "3":
        l.append(x)
    else:
        l.append("1" + "3")
print l
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/30860565)
 The problem was that you attempted to modify the list you were referencing within the loop that used the list  len() . When you remove the item from the list, then the new  len()  is calculated on the next loop. 

 For example, after the first run, when you removed  (i)  using  l.pop(i) , that happened successfully but on the next loop the length of the list has changed so all index numbers have been shifted. To a certain point the loop attempts to run over a shorted list throwing the error. 

 Doing this outside the loop works, however it would be better to build and new list by first declaring and empty list before the loop, and later within the loop append everything you want to keep to the new list. 

 For those of you who may have come to the same problem. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8544593)
 If you are ok with creating a copy of the list you can do it like this (http://www.python.org/dev/peps/pep-0202/): 

  [s for s in list if s != 'b' and s != 'c']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1931428)
  # Answer to question 1 - just use the built-in functionality of lists.
#
# There is no need to use variables when lists let you do so much more
#   in a quick and organised fashion.
lines = []
for line in open_file:
   lines.append(line)
  

 Since https://stackoverflow.com/questions/1931380/python-assign-lists-within-nest-to-variable/#1931393, I'd just like to add a recommendation regarding question 3.  You really don't need to make a copy of the list via i[:] since you're just testing a value in the list. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31267522)
 You can use https://docs.python.org/2/library/functions.html#enumerate within a list comprehension : 

  >>> centroids = [[320, 240], [400, 200], [450, 600]]
>>> index = [0,2]
>>> [element for i,element in enumerate(centroids) if i not in index]
[[400, 200]]
  

 Note that finally you have to loop over your list to find the special indices and there is no way that do this without loop. but you can use list comprehension that performs in C language and is faster (some time 2 time faster) than python loops! 

 Also for getting more performance you can put your indices within a  set  container that has O(1) for checking membership. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23181920)
 The nested structure here is good for being traversed by a recursive algorithm: 

  x = ['a', '1', ['c', 'd', ['e', ['f', '123']]]]

def recurse(y):
    left,right = [],None

    # Here we loop over the elements and whenever we encounter
    # another list, we recurse.  
    for elem in y:
        if isinstance(elem,list):
            right = recurse(elem)
        else:
            left.append(elem)

    # If there is no further nested list, return only the 
    # concatenated values, else return the concatenated values 
    # and the next list in the nest.
    if right is None:
        return ["".join(left)]
    else:
        return ["".join(left),right]

print recurse(x)
  

 The output from this is: 

  ['a1', ['cd', ['e', ['f123']]]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3162287)
 The pythonic way is to use http://docs.python.org/library/functions.html#enumerate: 

  for idx,item in enumerate(list):
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53281986)
 https://docs.python.org/2/library/collections.html#collections.defaultdict and https://docs.python.org/2/library/itertools.html#itertools.groupby</h3>

  from itertools import groupby
from collections import defaultdict

listy = ['A','A','A','B','B','C','A','A']

d = defaultdict(list)

for k, v in groupby(listy):
  d[k].append(len([*v]))

d

defaultdict(list, {'A': [3, 2], 'B': [2], 'C': [1]})
  

 

 
   groupby  will loop through an iterable and lump contiguous things together. 

  [(k, [*v]) for k, v in groupby(listy)]

[('A', ['A', 'A', 'A']), ('B', ['B', 'B']), ('C', ['C']), ('A', ['A', 'A'])]
   
  So I loop through those results and append the length of each grouped thing to the values of a  defaultdict   
 



