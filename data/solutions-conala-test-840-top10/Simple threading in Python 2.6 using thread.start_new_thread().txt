Query: Simple threading in Python 2.6 using thread.start_new_thread()
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19558570)
 Is there a reason you're using  thread  instead of the recommended http://docs.python.org/2/library/threading.html module? If not, you should rather use the  threading.Thread  objects which have a join method: 

  from threading import Thread


def check_url(url):
    # some code

threads = []
for url in url_ip_hash.keys():
    t = Thread(target=check_url, args=(url, ))
    t.start()
    threads.append(t)

# join all threads
for t in threads:
    t.join()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/849896)
 You need to wait until your Thread finishes its work, so you have to use Thread.join() : 

  from threading import Thread

def myfunction(mystring,*args):
    print mystring

if __name__ == '__main__':

    try:
        t = Thread(None,myfunction,None,('MyStringHere',1))
        t.start()
        t.join()
    except Exception as errtxt:
        print errtxt
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5882469)
 The  thread  module is the low-level threading API of Python. Its direct usage isn't recommended, unless you really need to. The  threading  module is a high-level API, built on top of  thread . The  Thread.start  method is actually implemented using  thread.start_new_thread . 

 The  daemon  attribute of  Thread  must be set before calling  start , specifying whether the thread should be a daemon. The entire Python program exits when no alive non-daemon threads are left. By default,  daemon  is  False , so the thread is not a daemon, and hence the process will wait for all its non-daemon thread to exit, which is the behavior you're observing. 

 

 P.S.  start_new_thread  really is very low-level. It's just a thin wrapper around the Python core thread launcher, which itself calls the OS thread spawning function. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15064436)
 The key is to start the thread using threading, not thread: 

  t1 = threading.Thread(target=my_function, args=())
t1.start()
  

 Then use 

  z = t1.isAlive()
  

  

  l = threading.enumerate()
  

 You can also use join(): 

  t1 = threading.Thread(target=my_function, args=())
t1.start()
t1.join()
# Will only get to here once t1 has returned.
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/849759)
 The problem is that your main thread has quit before your new thread has time to finish. The solution is to wait at your main thread. 

  import thread, time

def myfunction(mystring,*args):
    print mystring


if __name__ == '__main__':

    try:

        thread.start_new_thread(myfunction,('MyStringHere',1))

    except Exception, errtxt:
        print errtxt

    time.sleep(5)
  

 As a side note, you probably want to use the threading module. Your main thread will wait for all of those types of threads to be closed before exiting: 

  from threading import Thread

def myfunction(mystring,*args):
    print mystring


if __name__ == '__main__':

    try:
        Thread(target=myfunction, args=('MyStringHere',1)).start()
    except Exception, errtxt:
        print errtxt
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31321180)
 The new module is destinated to OOP, so a example with  threading  would be: 

  import time
from threading import Thread

def sleeper(i):
    print "thread %d sleeps for 5 seconds" % i
    time.sleep(5)
    print "thread %d woke up" % i

for i in range(10):
    t = Thread(target=sleeper, args=(i,))
    t.start()
  

 Changing  import thread  to  from threading import Thread , and  start_new_thread(func, (args,)  to  Thread(target=func, args=(args,).start()  does the trick. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52300647)
 Here's a simple example showing several threads being started, each of which will terminate itself at a different time and how the main thread can determine when each has terminated. 

  #!/usr/bin/env python3
import threading
import time
import queue

class Worker(threading.Thread):
    def __init__(self, duration, tqueue):
        self.duration = duration
        self.tqueue = tqueue
        super().__init__()
    def run(self):
        # Do real work here instead of just sleeping
        time.sleep(self.duration)
        # Tell parent we are gone by putting our instance to the queue
        self.tqueue.put(self)

def main():
    thr_duration = [2.0, 1.5, 0.5, 2.7, 1.25]
    workers = []
    thr_queue = queue.Queue()

    # Start all threads
    for dur in thr_duration:
        worker = Worker(dur, thr_queue)
        worker.start()
        workers.append(worker)
        print("Started thread {}, duration {}".format(worker.name, dur))

    # Wait for all threads to terminate
    while workers:
        worker = thr_queue.get()
        worker.join()
        print("Reaped thread {}".format(worker.name))
        workers.remove(worker)

if __name__ == '__main__':
    main()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30063721)
 The issue with your examples that lock the GUI is that rather than passing a reference to the function when creating the thread, you are actually running the function immediately and the thread is never created. For example, you should be doing: 

  server_thread=threading.Thread(target=start_server)
  

 Note that I drop the brackets on  start_server  otherwise the code waits for  start_server()  to finish executing before creating the  threading.Thread  object, and uses the return value from  start_server()  as the value for the  target  attribute. 

 A final suggestion, you should really store the created thread as  self.server_thread  to prevent it from being garbage collected.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32383044)
 The documentation for https://docs.python.org/2/library/threading.html says that you should override the  run()  method, and then use the  start()  method to begin execution on a new thread. In your case, your code should be: 

  class Hello(threading.Thread):
    def __init__(self, min, max):
        self.min, self.max = min, max
        threading.Thread.__init__(self)

    def run(self):
        time.sleep(self.max)

        for i in range(1000):
            print random.choice(range(self.min, self.max))

# This creates the thread objects, but they don't do anything yet
h = Hello(3,5)
k = Hello(0,3)

# This causes each thread to do its work
h.start()
k.start()
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43686996)
 To terminate an  Thread  controlled, using a threadsafe  threading.Event() :   

  import threading, time

def Thread_Function(running):
    while running.is_set():
        print('running')
        time.sleep(1)

if __name__ == '__main__':
    running = threading.Event()
    running.set()

    thread = threading.Thread(target=Thread_Function, args=(running,))
    thread.start()

    time.sleep(1)
    print('Event running.clear()')
    running.clear()

    print('Wait until Thread is terminating')
    thread.join()
    print("EXIT __main__")
  

 
    Output : 
  running 
  running 
  Event running.clear() 
  Wait until Thread is terminating 
  EXIT  main  
 

   Tested with Python:3.4.2   



