Query: in Numpy, how to zip two 2-D arrays?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/44409128)
 You can use  zip  

  np.array(list(zip(a,b)))
array([[ 1,  6],
   [ 2,  7],
   [ 3,  8],
   [ 4,  9],
   [ 5, 10]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44409182)
 If you have numpy arrays you can use https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html: 

  import numpy as np

a = np.array([1,2,3,4,5])
b = np.array([6,7,8,9,10])

c = np.dstack((a,b))
#or
c = np.column_stack((a,b))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17960617)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html:  

  >>> np.dstack((a,b))
array([[[0, 0],
        [1, 1],
        [2, 2],
        [3, 3]],

       [[4, 4],
        [5, 5],
        [6, 6],
        [7, 7]]])
  

 If you must have tuples: 

  >>> np.array(zip(a.ravel(),b.ravel()), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '<i4'), ('f1', '<i4')])
  

 

 For Python 3+ you need to expand the  zip  iterator object. Please note that this is horribly inefficient: 

  >>> np.array(list(zip(a.ravel(),b.ravel())), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '<i4'), ('f1', '<i4')])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16338152)
  >>> A = [[1, 2], [3, 4]]
>>> B = [[5, 6], [7, 8]]
>>> [[c+d for c, d in zip(a, b)] for a, b in zip(A,B)]
[[6, 8], [10, 12]]
  

 with  numpy  

  >>> import numpy as np
>>> A = np.array([[1, 2], [3, 4]])
>>> B = np.array([[5, 6], [7, 8]])
>>> A + B
array([[ 6,  8],
       [10, 12]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35092621)
  In [469]: x = np.array([-1, 0, 1, 2])
In [470]: y = np.array([-2, -1, 0, 1])
  

 join them into 2d array: 

  In [471]: np.array((x,y))
Out[471]: 
array([[-1,  0,  1,  2],
       [-2, -1,  0,  1]])
  

  

  In [472]: np.array((x,y)).T
Out[472]: 
array([[-1, -2],
       [ 0, -1],
       [ 1,  0],
       [ 2,  1]])
  

 or use the standard Python zip - this treats the arrays as lists 

  In [474]: zip(x,y)   # list(zip in py3
Out[474]: [(-1, -2), (0, -1), (1, 0), (2, 1)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44409124)
 The answer lies in your question: 

  np.array(list(zip(a,b)))
  

   

  Edit:  

 Although my post gives the answer as requested by the OP, the conversion to list and back to NumPy array takes some overhead (noticeable for large arrays).  

 Hence,  dstack  would be a computationally efficient alternative  (ref. @zipa's answer).  I was unaware of  dstack  at the time of posting this answer so credits to @zipa for introducing it to this post.  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52885182)
 You could use https://docs.python.org/3.7/library/itertools.html#itertools.zip_longest from itertools: 

  import numpy as np
from itertools import zip_longest

a = np.array([11, 12])
b = np.array([9])

result = np.array([ai - bi for ai, bi in zip_longest(a, b, fillvalue=0)])
print(result)
  

  Output  

  [ 2 12]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26193431)
 Just use 

  x1, x2, x3 = np.vstack([x,y]).T
  



