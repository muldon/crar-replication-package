Query: Convert string into datetime.time object
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26154047)
  print then.date()
  

 What you want is a datetime.date object. What you have is a datetime.datetime object. You can either change the object when you print as per above, or do the following when creating the object: 

  then = datetime.datetime.strptime(when, '%Y-%m-%d').date()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2317046)
 For  datetime  objects,  strptime  is a http://docs.python.org/library/datetime.html#datetime.datetime.strftime of the  datetime  class, not a free function in the  datetime  module: 

  >>> import datetime
>>> s = datetime.datetime.strptime("20091229050936", "%Y%m%d%H%M%S")
>>> print s.strftime('%H:%M %d %B %Y (UTC)')
05:09 29 December 2009 (UTC)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35357691)
 Use time module to convert data. 

 Code snippet: 

  import time 
tring='20150103040500'
var = int(time.mktime(time.strptime(tring, '%Y%m%d%H%M%S')))
print var
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29238720)
 You can convert the datetime object to a timetuple, and then use the time.mktime function 

<pre class="lang-python prettyprint-override"> import time
from datetime import datetime
timestamp = int(time.mktime(datetime.now().timetuple()))
  

 Convert it back with: 

<pre class="lang-html prettyprint-override"> now = datetime.fromtimestamp(timestamp)
  




-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13356706)
 Try using  dateutil . It has a parse that will attempt to convert your string back into a  datetime  object. 

  >>> from dateutil import parser
>>> strtime = str(datetime.now())
>>> strtime
'2012-11-13 17:02:22.395000'
>>> parser.parse(strtime)
datetime.datetime(2012, 11, 13, 17, 2, 22, 395000)
  

 You can then subtract one  datetime  from another and get a  timedelta  object detailing the difference in time. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44098262)
 If you are trying to convert the datetime.datetime() object into string, you could just do this, 

  >>> datetime.datetime.strftime(timezone.now() + timedelta(days=14), '%Y-%m-%dT%H:%M:%S.%f%z')
'2017-06-04T14:45:23.621658+0000'
  

 Or if you want it as the datetime object, 

  >>> datetime.datetime.strptime(str(timezone.now() + timedelta(days=14))[:26], '%Y-%m-%d %H:%M:%S.%f')
datetime.datetime(2017, 6, 4, 14, 50, 26, 5649)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46715977)
 https://stackoverflow.com/a/466376/3286487 to parse a string to date time, then you can: 

  def convert(s):
    return datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')

someobject = convert('2017-08-15T13:34:35Z')
print(someobject.isoformat())
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15661036)
 Use http://docs.python.org/2/library/datetime.html#datetime.datetime.combine with a time object,  datetime.time.min  represents  00:00  and would match the output of your date-string-datetime path: 

  datetime.datetime.combine(my_date, datetime.time.min)
  

  

  >>> import datetime
>>> my_date = datetime.date.today()
>>> datetime.datetime.combine(my_date, datetime.time.min)
datetime.datetime(2013, 3, 27, 0, 0)
  



