Query: Creating a JSON response using Django and Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12832214)
 https://stackoverflow.com/questions/5106306/how-to-use-google-app-engine-with-ajax-json 

 Code Javascript with JQuery: 

  $.ajax({
    url: '/ajax',
    dataType : 'json',
    cache: false,
    success: function(data) {
        alert('Load was performed.'+data.ajax_resp);
    }
});
  

 Code Python 

  class Ajax(webapp2.RequestHandler):
def get(self):
    my_response = {'ajax_resp':'Hello, webapp World!'}
    datos = json.dumps(my_response)

    self.response.headers.add_header('content-type', 'application/json', charset='utf-8')
    self.response.out.write(datos)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27599604)
 Django code  views.py :    

  def view(request):
    if request.method == 'POST':
        print request.body
        data = request.body
        return HttpResponse(json.dumps(data))
  

 HTML code  view.html : 

  <!DOCTYPE html>
<html>
<head>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("#mySelect").change(function(){
        selected = $("#mySelect option:selected").text()
        $.ajax({
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            url: '/view/',
            data: {
                    'fruit': selected
                  },
            success: function(result) {
                        document.write(result)
                    }
    });
  });
});
</script>
</head>
<body>

<form>
    {{data}}
     
Select your favorite fruit:
<select id="mySelect">
  <option value="apple" selected >Select fruit</option>
  <option value="apple">Apple</option>
  <option value="orange">Orange</option>
  <option value="pineapple">Pineapple</option>
  <option value="banana">Banana</option>
</select>
</form>
</body>
</html>
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32466453)
 For those who use Django 1.7+ 

  from django.http import JsonResponse

def your_view(request):
    json_object = {'key': "value"}
    return JsonResponse(json_object)
  

 https://docs.djangoproject.com/en/1.8/ref/request-response/#jsonresponse-objects 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2428119)
 I usually use a dictionary, not a list to return JSON content.  

  import json

from django.http import HttpResponse

response_data = {}
response_data['result'] = 'error'
response_data['message'] = 'Some error message'
  

 Pre-Django 1.7 you'd return it like this: 

  return HttpResponse(json.dumps(response_data), content_type="application/json")
  

 For Django 1.7+, use https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects as shown in https://stackoverflow.com/a/24411716/7376 like so :  

  from django.http import JsonResponse
return JsonResponse({'foo':'bar'})
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48130216)
 Its very convenient with Django version 1.7 or higher as you have the JsonResponse class, which is a subclass of HttpResponse. 

  from django.http import JsonResponse
    def profile(request):
        data = {
            'name': 'Raghav',
            'location': 'India',
            'is_active': False,
            'count': 28
        }
        return JsonResponse(data)
  

 For older versions of Django, you must use an HttpResponse object. 

  import json
from django.http import HttpResponse

def profile(request):
    data = {
        'name': 'Raghav',
        'location': 'India',
        'is_active': False,
        'count': 28
    }
    dump = json.dumps(data)
    return HttpResponse(dump, content_type='application/json')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11470298)
 You'll want to use the django serializer to help with unicode stuff: 

  from django.core import serializers

json_serializer = serializers.get_serializer("json")()
    response =  json_serializer.serialize(list, ensure_ascii=False, indent=2, use_natural_keys=True)
    return HttpResponse(response, mimetype="application/json")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2428192)
 I use this, it works fine. 

  from django.utils import simplejson
from django.http import HttpResponse

def some_view(request):
    to_json = {
        "key1": "value1",
        "key2": "value2"
    }
    return HttpResponse(simplejson.dumps(to_json), mimetype='application/json')
  

 Alternative: 

  from django.utils import simplejson

class JsonResponse(HttpResponse):
    """
        JSON response
    """
    def __init__(self, content, mimetype='application/json', status=None, content_type=None):
        super(JsonResponse, self).__init__(
            content=simplejson.dumps(content),
            mimetype=mimetype,
            status=status,
            content_type=content_type,
        )
  

 In Django 1.7 https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects objects have been added to the Django framework itself which makes this task even easier: 

  from django.http import JsonResponse
def some_view(request):
    return JsonResponse({"key": "value"})
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24411716)
 New in django 1.7 

 you could use https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects objects.  

  

  from django.http import JsonResponse
return JsonResponse({'foo':'bar'})
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12865351)
 This is my preferred version using a class based view.
Simply subclass the basic View and override the get()-method. 

  import json

class MyJsonView(View):

    def get(self, *args, **kwargs):
        resp = {'my_key': 'my value',}
        return HttpResponse(json.dumps(resp), mimetype="application/json" )
  



