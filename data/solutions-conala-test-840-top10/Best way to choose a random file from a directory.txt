Query: Best way to choose a random file from a directory
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/701488)
 If you want directories included, Yuval A's answer.  

  import os, random

random.choice([x for x in os.listdir("C:\\") if os.path.isfile(os.path.join("C:\\", x))])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41627291)
  _files = os.listdir('.')
number = random.randint(0, len(_files) - 1)
file_ = _files[number]
  

 Line by line order: 

 
 It puts all the files in the directory into a list 
 Chooses a random number between 0 and the length of the directory - 1 
 Assigns _file to a random file 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52586317)
 The simplest solution is to make use of  os.listdir  &  random.choice  methods 

  random_file=random.choice(os.listdir("Folder_Destination"))
  

 

 Let's take a look at it step by step :- 

 
   1}  os.listdir  method returns the list containing the name of
  entries (files) in the  path specified. 
  
   2} This list is then passed as a parameter to  random.choice  method
  which returns a random file name from the list. 
  
   3} The file name is stored in  random_file  variable. 
 

 

   Considering a real time application    

  Here's a sample python code which will move random files from one directory to another  

  import os, random, shutil

#Prompting user to enter number of files to select randomly along with directory
source=input("Enter the Source Directory : ")
dest=input("Enter the Destination Directory : ")
no_of_files=int(input("Enter The Number of Files To Select : "))

print("%"*25+"{ Details Of Transfer }"+"%"*25)
print("\n\nList of Files Moved to %s :-"%(dest))

#Using for loop to randomly choose multiple files
for i in range(no_of_files):
    #Variable random_file stores the name of the random file chosen
    random_file=random.choice(os.listdir(source))
    print("%d} %s"%(i+1,random_file))
    source_file="%s\%s"%(source,random_file)
    dest_file=dest
    #"shutil.move" function moves file from one directory to another
    shutil.move(source_file,dest_file)

print("\n\n"+"$"*33+"[ Files Moved Successfully ]"+"$"*33)
  

 You can check out the whole  project on github
  https://github.com/THE-PHOENIX-777-TDW/Random-File-Picker.git   

 

 For addition reference about  os.listdir  &  random.choice  method you can refer to  tutorialspoint learn python  

 os.listdir :- https://www.tutorialspoint.com/python/os_listdir.htm 

 random.choice :- https://www.tutorialspoint.com/python/number_choice.htm 

 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/701428)
 If you don't know before hand what files are there, you will need to get a list, then just pick a random index in the list. 

 Here's one attempt: 

  import os
import random

def getRandomFile(path):
  """
  Returns a random filename, chosen among the files of the given path.
  """
  files = os.listdir(path)
  index = random.randrange(0, len(files))
  return files[index]
  

  EDIT : The question now mentions a fear of a "race condition", which I can only assume is the typical problem of files being added/removed while you are in the process of trying to pick a random file. 

 I don't believe there is a way around that, other than keeping in mind that any I/O operation is inherently "unsafe", i.e. it can fail. So, the algorithm to open a randomly chosen file in a given directory should: 

 
 Actually  open()  the file selected, and handle a failure, since the file might no longer be there 
 Probably limit itself to a set number of tries, so it doesn't die if the directory is empty or if none of the files are readable 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41626978)
 Another option is to use globbing, especially if you want to choose from some files, not all files: 

  import random, glob
pattern = "*" # (or "*.*")
filename = random.choice(glob.glob(pattern))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41626832)
 You can use 

  import random
import os
# random.choice selects random element
# os.listdir lists in current directory
filename=""
# filter out directories
while not os.path.isfile(filename):
    filename=random.choice(os.listdir(directory_path))
with open(filename,'r') as file_obj:
    # do stuff with file
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/701424)
 Independant from the language used, you can read all references to the files in a directory into a datastructure like an array (something like 'listFiles'), get the length of the array. calculate a random number in the range of '0' to 'arrayLength-1' and access the file at the certain index. This should work, not only in python. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/701448)
 Language agnostic solution: 

 1) Get the total no. of files in specified directory. 

 2) Pick a random number from 0 to [total no. of files - 1]. 

 3) Get the list of filenames as a suitably indexed collection or such. 

 4) Pick the nth element, where n is the random number. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41911914)
 The problem with most of the solutions given is you load all your input into memory, which can become a problem for large inputs/hierarchies. Here's a solution adapted from http://docstore.mik.ua/orelly/perl/cookbook/ch08_07.htm by Tom Christiansen and Nat Torkington. To get a random file anywhere beneath a directory: 

  #! /usr/bin/env python
import os, random
n=0
random.seed();
for root, dirs, files in os.walk('/tmp/foo'):
  for name in files:
    n=n+1
    if random.uniform(0, n) < 1: rfile=os.path.join(root, name)
print rfile
  

 Generalizing a bit makes a handy script: 

  $ cat /tmp/randy.py
#! /usr/bin/env python
import sys, random
random.seed()
n=1
for line in sys.stdin:
  if random.uniform(0, n)<1: rline=line
  n=n+1
sys.stdout.write(rline)

$ /tmp/randy.py < /usr/share/dict/words 
chrysochlore

$ find /tmp/foo -type f | /tmp/randy.py
/tmp/foo/bar
  



