Query: printing double quotes around a variable
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49497471)
 How about  json.dumps  

  >>> import json
>>> print(json.dumps("hello world"))
"hello world"
  

 The advantage over other approaches mentioned here is that it escapes quotes inside the string as well (take that  str.format !), always uses double quotes and is actually intended for reliable serialization (take that  repr() !) 

  >>> print(json.dumps('hello "world"!'))
"hello \"world\"!"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20056615)
  Update :  

 From https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498, you can use https://docs.python.org/3/reference/lexical_analysis.html#f-strings 

  >>> print(f'"{word}"')
"Some Random Word"
  

  Original Answer :  

 You can try https://pyformat.info/ 

  >>> print('"%s"' % word)
"Some Random Word"
  

 OR https://docs.python.org/3.6/library/string.html#format-examples 

  >>> print('"{}"'.format(word))
"Some Random Word"
  

 OR escape the quote character with https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals 

  >>> print("\"%s\"" % word)
"Some Random Word"
  

 And, if the double-quotes is not a restriction (i.e. single-quotes would do) 

  >>> from pprint import pprint, pformat
>>> print(pformat(word))
'Some Random Word'
>>> pprint(word)
'Some Random Word'
  

 OR like others have already said (include it in your declaration) 

  >>> word = '"Some Random Word"'
>>> print(word)
"Some Random Word"
  

 Use whichever  you  feel to be better or less confusing. 

 And, if you need to do it for multiple words, you might as well create a function 

  def double_quote(word):
    return '"%s"' % word

print(double_quote(word), double_quote(word2))
  

 And (if you know what you're doing &) if you're concerned about performance of these, see https://stackoverflow.com/a/48465349/2689986. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43045936)
 This did the job for me. 

  s.replace('"', '\\"')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9999369)
 The reason for your problem is that GPS is a variable name, so it prints the content of the variable, which is a string. When you encase it in quotes, you instead give the literal string  "GPS" . 

 You need to concatenate the strings together. E.g: 

  print('"'+GPS+'"')
  

 Note my use of single quotes to contain the strings, so the double quote characters didn't conflict. If you wanted to use double quotes, you would need to escape the double quotes that are a part of the string, for example: 

  print("\""+GPS+"\"")
  

 In python,  a backslash escapes the double quotes character, so it is treated as content of the string, not an end to it. 

 For more complicated strings, you might want to use the http://docs.python.org/release/3.1.3/library/string.html#format-examples function: 

  print('"{0}"'.format(GPS))
  

 It is also worth noting that http://www.python.org/dev/peps/pep-0008/ recommends  lowercase_with_underscores  for variable names, so  GPS  would normally denote a class, and  gps  might be more suitable. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6294528)
 You should use a JSON module to do that. To Python, double- and single-quotes are interchangeable. 

 http://docs.python.org/release/3.1.3/library/json.html. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43664127)
 With subprocess, you're better off passing a list of strings rather than a string to be evaluated by the shell. This way you don't need to worry about balancing your double quotes (and escaping potentially executable values). 

 The curly braces can be https://docs.python.org/3/library/string.html#format-string-syntax by doubling them. 

  

  committerUser = 'alice'
reviewerUser = 'joe'
branchName = 'testdevbranch'
cmd = ["gitlab",
    "create_merge_request",
    "5",
    f"{committerUser} - New merge request - {reviewerUser}",
    f"{{source_branch: '{branchName}', target_branch: 'dev', assignee_id: 1}}",
    "--json"]
subprocess.Popen(cmd, â€¦)
  

 I'm using Python 3.6's https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep498 here, but it could also be done with the  str.format()  method 

  "{} - New merge request - {}".format(committerUser, reviewerUser),
"{{source_branch: '{}', target_branch: 'dev', assignee_id: 1}}".format(branchName),
  

 Or explicitly by concatenation, which might be more readable than trying to remember what the double curly braces are for. 

  committerUser + " - New merge request - " + reviewerUser,
"{source_branch: '" + branchName + "', target_branch: 'dev', assignee_id: 1}",
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46765883)
 You can try  repr  

 Code: 

  word = "This is a random text"
print repr(word)
  

 Output: 

  'This is a random text'  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10954710)
 Use custom string formatting: 

  print '"{}"'.format(str([]))
  

  

  "[]"
  

 This won't affect strings nested in containers, though: 

  print '"{}"'.format(str(["a"]))
  

  

  "['a']"
  



