Query: Import module in another directory from a "parallel" sub-directory
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8396595)
 I'm using Cython 0.15+ 

 cython.parallel exists in Shadow.py: 

  import sys
sys.modules['cython.parallel'] = CythonDotParallel()
  

 And the  Shadow.py  can be located in your Python's dist-packages directory like  /usr/local/lib/python2.6/dist-packages/  in Linux 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40612922)
 When modules are in parallel locations, as in the question: 

  application/app2/some_folder/some_file.py
application/app2/another_folder/another_file.py
  

 This shorthand makes one module visible to the other: 

  import sys
sys.path.append('../')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9153630)
 You asked the difference in the import statements. Its partially a matter of the namespace for which the object will be imported under, and also a way to limit the exact amount of code that is imported. 

  import os
from os import path
  

 Both os and os.path are modules. The first imports the entire os module and all its submodules. This could be more than you need, and for big libraries might be unneeded overhead. Though you can still access path via  os.path  

 The second form is a way to selectively only import the path module. Additionally, instead of coming into your code under the  os  namespace, it now lives at the root level as just  path .  

 While this link https://stackoverflow.com/questions/8951255/import-script-from-a-parent-directory does tell you everything you need to know, here is some more specific info: 

  # this will make your package available on your pythonpath
sys.path.append("/path/to/main_folder")
  

 Then your various scripts can reference other module all relative to under main_folder, such as: 

  from ui_sub_direcotory import menu

from domain_sub_directory import domain

import main
  

 These are all valid imports inside your package. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31248746)
 You will need to add the directory  Testing  into your  PYTHONPATH  env variable, to be able to import  Developing.algorithms  directly (or the directory above  Testing  to be able to import  Testing.Developing.algorithms  ). 

 In windows, you can set the PYTHONPATH variable as - 

  set PYTHONPATH=\path\to\Testing\;%PYTHONPATH%
  

  

  export PYTHONPATH=/path/to/testing/:$PYTHONPATH
  

 Programatically (from python) , you can do the following before you try to import  Developing.algorithms  - 

  import sys
sys.path.append('/path/to/Testing/')
from Developing import algorithms # or how ever you want to import.
  

 Also, you do not need to do all of the above, any one would do - either setting PYTHONPATH env variable, or using  sys.path  . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47949179)
  

  from d1.s1 impt a
  

 Python will start by looking f a module named d1, and then inside that a module named s1, and then inside that f an object named a(which may be a regular python object,  another module). 

  

  from d1.s1 impt a
  

 could wk in a few different ways: 

  -- d1/
    -- __init__.py
      -- s1.py          <-- contains a variable called "a"
  

  

  - d1/
    -- __init__.py
    -- s1/
        -- __init__.py
        -- a.py
  

  

  -- d1/
|    -- __init__.py
    -- s1/
        -- __init__.py     <-- contains a variable called "a"
  

 in your case  init .py wks only when d1 and s1 and s2 are in same directies. 

 If you want to impt module s1 from another sub directy d1, make sure the directy d1 in sys path. 

 To add d1 to sys path  

  sys.path.append('path_to_directy/d1') 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/620364)
 Add the parent directory to your path: 

  import sys
sys.path.append('../')
import settings
  

  Update from comments:  

 
   Don't forget the  __init__.py  file in
  the directory that has your
  settings.py â€“ S.Lott 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46606179)
 You need to add the path of "hello.py" to  sys.path  

  import sys
sys.path.append('../sub_project1')

from hello import say_hello

print(say_hello() + "world!")
  

 Output: 

  Hello world!
  

 Source is https://stackoverflow.com/a/11158224/6900838. This discussion is really helpful. 

  EDIT:  Because "sub_project1" has  __init__.py , you can use: 

  import sys
sys.path.append('..') #Adds upper directory sys.path

from sub_project1.hello import say_hello

print(say_hello() + "world!")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21034793)
 If you have  __init__.py  files in each of those sub-directories then all import statements should work correctly. 
 Assuming that's not the problem, here's an excellent guide to importing best practices: 

 http://blog.habnab.it/blog/2013/07/21/python-packages-and-you/ 

 In summary, never use relative imports - always absolute (see the link above for why).  

 Second (and I'm not entirely sure why), always keep your py2exe setup.py script in the exact folder where your main script is. I've tried modifying py2exe's 'script' option to allow my script to be somewhere else... but your exact problem happened to me. So, try making sure it is right where the main script is. 

 Finally, you can always give py2exe a little help. I usually have to add the root directory to the system path so the import statements are valid. Note, I'm not modifying  sys.path  in  any  of my application's code - only the py2exe script I use to build the exe. 

 At the top of my py2exe setup script: 

  import sys
sys.path.append(PATH_WHERE_PACKAGES_ARE)
# add any packages that need explicit importing here located in root directory:
import package1 # apparently it wasn't found...
import package2 # apparently same thing
  

 Generally I don't import packages though, adding the project root where they exist usually is enough. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47645630)
 Once you've cloned the repo, cd to top level directory `cmake_example' 

 Change ./src/ma.cpp to clude a "mult" function: 

  #clude <bd11/bd11.h>

t add(t i, t j) {
    return i + j;
}

t mult(t i, t j) {
   return i * j;
}

namespace  = bd11;

PYBIND11_MODULE(cmake_example, m) {
    m.doc() = R"pbdoc(
        Pybd11 example plug
        -----------------------

        .. currentmodule:: cmake_example

        .. autosummary::
           :toctree: _generate

           add
           subtract
           mult

    )pbdoc";

    m.def("add", &add, R"pbdoc(
        Add two numbers

        Some other explanation about the add function.
    )pbdoc");

   m.def("mult", &mult, R"pbdoc(
        Multiply two numbers

        Some other explanation about the mult function.
    )pbdoc");
  

 (the rest of the file is the same) 

 Now make it: 

  $ cmake -H. -Bbuild
$ cmake --build build -- -j3
  

 The module for import will be created  the ./build directory. Go to it, then with a thon shell your example should work. 

 For the namespace import, you could do somethg with  pkgutil : 

 create the directory structure: 

  ./my_mod
    __it__.
    cmake_example.***.so
  

 and another parallel structure 

  ./extensions
    /my_mod
        __it__.
        cmake_example_.
  

   ..  

  import pkgutil
__path__ = pkgutil.extend_path(__path__, __name__)

from .cmake_example import add, subtract
from .cmake_example_ import mult
  

   ./extensions.  

  from cmake_example_ import mult
  

 Then append both . ./extensions/my_mod to your $PYTHONPATH, it just might work (it does  my example) 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/14517156)
 If you can import lib.sub_lib, it means your PYTHONPATH points to subpackage1. It should point to the directory containing package, then you'll be able to import package.cpackage, package.subpackage1.lib.sub_lib, etc. 

 You can also point your PYTHONPATH to cpackage, then remove  init .py in this directory as it's useless, and you can import cpackage, subpackage1.lib.sub_lib, etc. 

 The basic rule is: if PYTHONPATH=dir, then 

  dir\
  bob.py
  sub\
    __init__.py
    bib.py
    inner\
      __init__.py
      bub.py

import bob
import sub       (will import sub\__init__.py)
import sub.bib   (will import sub\__init__.py then bib.py)
import sub.inner (will import sub\__init__.py then sub\inner\__init__.py)
import sub.inner.bub (will import sub\__init__.py then sub\inner\__init__.py
                      and finally bub.py)
  



