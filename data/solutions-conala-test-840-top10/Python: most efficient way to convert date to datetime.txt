Query: Python: most efficient way to convert date to datetime
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15661036)
 Use http://docs.python.org/2/library/datetime.html#datetime.datetime.combine with a time object,  datetime.time.min  represents  00:00  and would match the output of your date-string-datetime path: 

  datetime.datetime.combine(my_date, datetime.time.min)
  

  

  >>> import datetime
>>> my_date = datetime.date.today()
>>> datetime.datetime.combine(my_date, datetime.time.min)
datetime.datetime(2013, 3, 27, 0, 0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40769845)
 Alternatively, as suggested https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python, this might be more readable: 

  datetime(date.year, date.month, date.day)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38572645)
 You can use the https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior and https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior methods of the  datetime  module. The following does what you want: 

  from datetime import datetime as dt

s = "July 25, 2016 - 11:51:32 PM"
old_format = '%B %d, %Y - %H:%M:%S %p'
new_format = '%Y%m%d'
r = dt.strptime(s, old_format).strftime(new_format)
print(r)
# '20160725'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38491452)
 Use datetime module: 

  import datetime
print datetime.datetime.strptime("07/18/2013", '%m/%d/%Y').strftime('%m/%Y')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40711383)
  >>> from datetime import datetime
>>> date = datetime.strptime("1/4/2014", "%m/%d/%Y")    
>>> datetime.strftime(date, "%Y-%m-%d")
'2014-01-04'
  

 https://docs.python.org/2/library/datetime.html#datetime.date.strftime  

 https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14291826)
 Happy to update this if I'm not properly understanding, but here are a few examples which may help. Note that this uses the  datetime  module instead of  time . 

  >>> import datetime
  

 Here we set up an example timestamp  ts  and a format  f : 

  >>> ts = '2013-01-12 15:27:43'
>>> f = '%Y-%m-%d %H:%M:%S'
  

 Similar to what you did above, we use the  strptime  function (from  datetime.datetime ) to convert our string into a  datetime  object based on the formatting parameter: 

  >>> datetime.datetime.strptime(ts, f)
datetime.datetime(2013, 1, 12, 15, 27, 43)
  

 Now in reverse - here we use  datetime.datetime.now()  to get the current time as a  datetime  object: 

  >>> now = datetime.datetime.now()
>>> now
datetime.datetime(2013, 1, 12, 0, 46, 54, 490219)
  

 In the  datetime  case, the  strftime  method is actually called on the  datetime  object itself, with the formatting parameter as an argument: 

  >>> now.strftime(f)   
'2013-01-12 00:46:54'
  

 In your situation, the reason you were getting an error is because  time.time()  returns a float: 

  >>> time.time()
1357980846.290231
  

 But  time.strftime  needs a  time  tuple, similar to what you had above. Without getting into the maddening spiral that is time, a function such as  time.localtime()  will return the aforementioned  time  tuple and will return as you expect: 

  >>> now = time.localtime()
>>> now
time.struct_time(tm_year=2013, tm_mon=1, tm_mday=12, tm_hour=0, tm_min=55, tm_sec=55, tm_wday=5, tm_yday=12, tm_isdst=0)
>>> f = '%Y-%m-%d %H:%M:%S'
>>> time.strftime(f, now)
'2013-01-12 00:55:55'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14518097)
 You can convert it by using the  datetime module of python 

  from datetime import datetime
t = '08:00:00'
t = datetime.strptime(t, '%H:%M:%S')
print t, type(t)
>>> 1900-01-01 08:00:00 <type 'datetime.datetime'>
  

 Note the year, month, day will start from  1900-01-01  because there is no date information available in the string. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36699433)
  

  import datetime as dt

vals = [1, 2, 3, 4]
dates = [dt.date(2016,1,n) for n in range(1, 5)]
vals_2 = [1, 1, 2, 2]
dates_2 = [dt.date(2016,1,n) for n in range(3, 7)]

df1 = pd.DataFrame({'date': dates, 'vals': vals})
df2 = pd.DataFrame({'date': dates_2, 'vals': vals_2})

>>> df1.merge(df2, on='date', suffixes=['_1', '_2'])

         date  vals_1  vals_2
0  2016-01-03       3       1
1  2016-01-04       4       1
  

 You can also convert the dates into Timestamps and then do the comparison, which should be slightly faster: 

  df1['date'] = pd.to_datetime(df1.date)
df2['date'] = pd.to_datetime(df2.date)
  

  Timings with 40k records  

 Pandas using datetime objects. 

  %timeit df1.merge(df2, on='date', suffixes=['_1', '_2'])
1 loops, best of 3: 10.2 s per loop
  

 Pandas using timestamps. 

  %timeit df1.merge(df2, on='date', suffixes=['_1', '_2'])
1 loops, best of 3: 9.1 s per loop
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52474003)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_timedelta.html and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pop.html for extract column  time : 

  df['Date'] = pd.to_datetime(df['Date']) + pd.to_timedelta(df.pop('Hour'), unit='H')
print (df)
                 Date  Actual
0 2018-06-01 00:00:00   0.000
1 2018-06-01 01:00:00   0.012
2 2018-06-01 02:00:00   0.065
3 2018-06-01 03:00:00   0.560
  



