Query: python How do you sort list by occurrence with out removing elements from the list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42394790)
 You can use the  Counter  class from  collections  as sorting key. Since you may have multiple elements with the same number of occurrences, you can use the value itself as a secondary sorting key so that identical elements are grouped together: 

  >>> from collections import Counter
>>> lst = [5,6,8,9,8,8,3,4,4,6,6] 
>>> c = Counter(lst)
>>> sorted(lst, key = lambda x : (c[x], x), reverse = True)
[8, 8, 8, 6, 6, 6, 4, 4, 9, 5, 3]
  

 EDIT:
As MSeifert commented, ties should be broken by the order of first appearance, not the value of the element. This can be done using the  index  function on the original list: 

  >>> sorted(lst, key = lambda x : (-1 * c[x], lst.index(x)))
[6, 6, 6, 8, 8, 8, 4, 4, 5, 9, 3]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45701475)
 You can use a list filter and slices: 

  def preserve_first(letters, elem):
    if elem in letters:
        index = letters.index(elem)
        return letters[:index + 1] + filter(lambda a: a != 'c', letters[index + 1:])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42395091)
 To do this kind of sorting you need to find the first indices and the counts of each item. I'll use one function to do both but there are also other approaches: 

  def count_and_first_index(it):
    dct_counts = {}
    dct_first = {}
    for idx, item in enumerate(it):
        if item in dct_counts:
            dct_counts[item] += 1
        else:
            dct_counts[item] = 1
            dct_first[item] = idx

    return dct_counts, dct_first
  

 Then sorting is simple using a  key -argument: 

  >>> lst = [5,6,8,9,8,8,3,4,4,6,6]

>>> counts, firstidx = count_and_first_index(lst)

>>> sorted(lst, key=lambda x: (counts[x], -firstidx[x]), reverse=True)
[6, 6, 6, 8, 8, 8, 4, 4, 5, 9, 3]
  

 I negated the  index  because it sorts reversed and you wanted the first item first. However you could also negate  counts  and remove  reverse : 

  >>> sorted(lst, key=lambda x: (-counts[x], firstidx[x]))
[6, 6, 6, 8, 8, 8, 4, 4, 5, 9, 3]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21667799)
 If you're looking for words sorted by occurrence you really want to be using a  Counter , which is basically a prebuilt histogram that will handle all of this for you, and even let you call the function  most_common  to get the most common elements from that dictionary. 

  from colletions import Counter

string = "There there are some some words here here"
test = Counter(string.split())
>>> test.most_common(2)
[('some', 2), ('here', 2)]
  

 If that doesn't fit your application for some reason, you can (as other have suggested), sort your dictionary as follows: 

  sorted_words = sorted(words.iteritems(), key=lambda value: float(value[1]))
  

 But a  Counter  does seem to be a much closer fit for your application. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4772404)
 . 

 If you just want to find index of first occurrence of specific element, you should use http://docs.python.org/tutorial/datastructures.html#more-on-lists method: 

  index = s.index(3)
  

 But if you  

 
   want to find a number that appears
  more than once in the list 
 

 in general (without element value given), seems you can 

 
 either do simple O(N^2) search in array (check all elements of the list for each element, till duplication is found) 
 or do sort, find duplicated element in sorted list and then find index of duplicated element in the original array with list.index() method - this will take O(N*log(N)) because of sort. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54653967)
 Use  set()  to eliminate the duplicates, and then use  sorted()  to sort it with the original list order. 

  l = ['0007', '0016', '0025', '0034', '0043', '0052', '0061', '0070', '0106', '0115',  '0124', '0133', '0142', '0151', '0160', '0205', '0214', '0223', '0232', '0241', '0250', '0304', '0313', '0322', '0331', '0340', '0403', '0412', '0421', '0430', '0502', '0511', '0520', '0601', '0610', '0700', '1006', '1015', '1024', '1033', '1042', '1051', '1060', '1105', '1114', '1123', '1132', '1141', '1150', '1204', '1213', '1222', '1231', '1240', '1303', '1312', '1321', '1330', '1402', '1411', '1420', '1501', '1510', '1600', '2005', '2014', '2023', '2032', '2041', '2050', '2104', '2113', '2122', '2131', '2140', '2203', '2212', '2221', '2230', '2302', '2311', '2320', '2401', '2410', '2500', '3004', '3013', '3022', '3031', '3040', '3103', '3112', '3121', '3130', '3202', '3211', '3220', '3301', '3310', '3400', '4003', '4012', '4021', '4030', '4102', '4111', '4120', '4201', '4210', '4300', '5002', '5011', '5020', '5101', '5110', '5200', '6001', '6010', '6100', '7000']

sorted(list(set(''.join(sorted(x)) for x in l)), key=lambda x: l.index(x))

# ['0007', '0016', '0025', '0034', '0115', '0124', '0133', '0223', '1114', '1123', '1222']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45701251)
 You can try this using generators: 

  def conserve_first(l, s):
     last_seen = False
     for i in l:
         if i == s and not last_seen:
               last_seen = True
               yield i

         elif i != s:
               yield i

letters = ['a', 'b', 'c', 'c', 'c', 'd', 'c', 'a', 'a', 'c']
print(list(conserve_first(letters, "c")))
  

 Output: 

  ['a', 'b', 'c', 'd', 'a', 'a']
  



