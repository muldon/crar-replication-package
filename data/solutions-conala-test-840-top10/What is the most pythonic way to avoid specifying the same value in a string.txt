Query: What is the most pythonic way to avoid specifying the same value in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11921695)
  "hello %(name)s , how are you %(name)s, welcome %(name)s" % {"name": "john"}
'hello john, how are you john, welcome john'
  

 This is another way to do this without using format. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11921989)
 99% likely you should use .format() 

 It's unlikely but if you had a series of greetings you could try this: 

  >>> greetings = ["hello", "how are you", "welcome"]
>>> ", ".join(" ".join((greet, "John")) for greet in greetings)
'hello John, how are you John, welcome John'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11921716)
 This works also: 

  "hello %s , how are you %s, welcome %s"%tuple(["john"]*3)
  

  

  "hello %s , how are you %s, welcome %s"%(("john",)*3)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11921662)
 I wouldn't use  %  formatting,  .format  has many advantages. Also  %  formatting was originally planned to be removed with  .format  replacing it, although apparently this hasn't actually happened. 

 
   A new system for built-in string formatting operations replaces the  %  string formatting operator. (However, the  %  operator is still supported; it will be deprecated in Python 3.1 and removed from the language at some later time.) Read http://www.python.org/dev/peps/pep-3101 for the full scoop. 
 

  >>> "hello {name}, how are you {name}, welcome {name}".format(name='john')
'hello john, how are you john, welcome john'
  

 I prefer the first way since it is explicit, but here is a reason why  .format  is superior over  %  formatting 

  >>> "hello {0}, how are you {0}, welcome {0}".format('john')
'hello john, how are you john, welcome john'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51065374)
 You can replace  isSign(value)  with  (value > 0) * "+" . 

 This works because  True == 1  and  False == 0 , and a number  n  times a string is that string repeated  n  times, so  0 * "+"  is the empty string  "" . 

 However, some may find it unreadable, as evidenced by the fact that I have to explain how it works. 

 Using an f-string: 

  f"My total gain is {(value > 0) * '+'}{value}"
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51065411)
 String formatting provides a  +  flag for this: 

  >>> "{:+}".format(3)
'+3'
>>> "{:+}".format(-3)
'-3'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14227532)
 That could work if you convert your list to tuple like this: 

  t = ["a", "b", "c"]
s = "%s.%s.%s" % tuple(t)
  

 But, python strings has the built in method .join, so, if your list grows, you can handle it like this: 

  '.'.join(t)
  

 That's the "pythonic way", you also should avoid using the + operator with strings, always use .join and format strings. This is because Python Strings (and tuples) are not mutable objects, so, when you're doing 

  "abc" + "cde"
  

 Python has to allocate new memory to store the new string. 

 I hope this solved your question 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30642051)
 As a more pythonic way you can first convert your string to byte array then use  bin  function within  map  : 

  >>> st = "hello world"
>>> map(bin,bytearray(st))
['0b1101000', '0b1100101', '0b1101100', '0b1101100', '0b1101111', '0b100000', '0b1110111', '0b1101111', '0b1110010', '0b1101100', '0b1100100']
  

  

  >>> ' '.join(map(bin,bytearray(st)))
'0b1101000 0b1100101 0b1101100 0b1101100 0b1101111 0b100000 0b1110111 0b1101111 0b1110010 0b1101100 0b1100100'
  

 Note that in  python3  you need to specify an encoding for  bytearray  function : 

  >>> ' '.join(map(bin,bytearray(st,'utf8')))
'0b1101000 0b1100101 0b1101100 0b1101100 0b1101111 0b100000 0b1110111 0b1101111 0b1110010 0b1101100 0b1100100'
  

 You can also use  binascii  module in python 2: 

  >>> import binascii
>>> bin(int(binascii.hexlify(st),16))
'0b110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
  

  hexlify  return the hexadecimal representation of the binary data then you can convert to int by specifying 16 as its base then convert it to binary with  bin . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51065378)
 f-strings are a good way to do this: 

  print(f'My total gain is {"+" if value > 0 else ""}{value}') 
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45996759)
 Here's another solution, with some iteration magic to avoid building unnecessary containers. But also note my comment. 

  >>> from itertools import izip, chain
>>> date = '170901'
>>> ''.join((chain.from_iterable((x if x != '0' else ' ', y) for x,y in izip(*[iter(date)]*2))))
'17 9 1'
  



