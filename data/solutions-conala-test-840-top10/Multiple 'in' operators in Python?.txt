Query: Multiple 'in' operators in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20799383)
 This may be because https://stackoverflow.com/a/3654936/ is looking at the matter as in comparison with other languages, but in Python, you do things the python way. It's not a 'why' question. It's there and you can do things to the same effect with  x+= . In https://www.python.org/dev/peps/pep-0020/, it is given: "there should only be one way to solve a problem." Multiple choices are great in art (freedom of expression) but lousy in engineering. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7809749)
 Python replaces the usual C-style boolean operators ( && ,  || ,  ! ) with words:  and ,  or , and  not  respectively. 

 So you can do things like: 

  if (isLarge and isHappy) or (isSmall and not isBlue):
  

 which makes things more readable. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34694162)
 You can create special function for it: 

  def inc(value, *args):
    for i in args:
        yield i+value
  

 And use it: 

  value1 = value2 = value3 = 0
value4 = 100
value1, value2, value3 = inc(value4, value1, value2, value3)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4740496)
 In Python and many other programming languages, parentheses are not required for every expression with multiple operators. This is because operators have a defined precedence. See the table http://docs.python.org/reference/expressions.html (Section 5.15) for information on operator precedence in Python.  

 You can draw an analogy to arithmetic. These expressions are equivalent: 

  5 * 5 + 3

(5 * 5) + 3
  

 If you mean to add three first, then you need to use the parentheses like this: 

  5 * (5 + 3)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54215423)
 With Python 3.x, for integers you can use  all  with  range : 

  if all(x in range(7) for x in (a, b, c)):
    # your logic
  

 For non-integers or Python 2.x, you can use chained operations: 

  if all(0 <= x <= 6 for x in (a, b, c)):
    # your logic
  

 The problem with your logic is Python does not implement vectorised operations with comparison operators. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15890787)
 You  can use  dis  here to see how the expression was actually evaluated: 

  In [29]: def func():
   ....:     return 5 -+-+-+ 2
   ....: 

In [30]: import dis

In [31]: dis.dis(func)
  2           0 LOAD_CONST               1 (5)
              3 LOAD_CONST               2 (2)
              6 UNARY_POSITIVE      
              7 UNARY_NEGATIVE      
              8 UNARY_POSITIVE      
              9 UNARY_NEGATIVE      
             10 UNARY_POSITIVE      
             11 BINARY_SUBTRACT     
             12 RETURN_VALUE        
  

 So that expression is equivalent to this: 

  In [32]: 5 - (+(-(+(-(+(2))))))
Out[32]: 3
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1309759)
 You are experiencing  operator precedence . 

 In python  %  has the same precedence as  *  so they group left to right. 

  

  print('%d' % 2 * 4)
  

  

  print( ('%d' % 2) * 4)
  

 Here is the python http://docs.python.org/reference/expressions.html#summary. 

 Since it is difficult to remember operator precedence rules, and the rules can be subtle, it is often best to simply use explicit parenthesis when chaining multiple operators in an expression. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34694027)
 Tuple and generator unpacking can be useful here: 

  value1, value2, value3 = 0, 0, 0
value4 = 100
value1, value2, value3 = (value4 + x for x in (value1, value2, value3))
  



