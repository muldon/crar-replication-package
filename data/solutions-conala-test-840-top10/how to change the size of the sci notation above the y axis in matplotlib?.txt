Query: how to change the size of the sci notation above the y axis in matplotlib?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14161228)
 adding this line: 

  plt.rc('font', **{'size':'30'})
  

 changes the font size above the y axis. 30 makes the text visibly bigger but I assume you want to match with the axis labels etc so you'll need something around 6-8 I expect. This will in fact change other text font size (not the axis labels or tick  labels though).  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29002767)
 http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.ticklabel_format is probably what you are looking for: 

 import matplotlib.pyplot as plt
... 

  plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))   

 style sci for scientific notation, 
axis y to format y axis only, 
m,n to include all numbers for which scientific notation should be applied (0,0 for all)   


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21512503)
 According to http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.ticklabel_format, the function does not accept  labelsize  parameter. 

 You can change the font size using http://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.rc: 

  plt.rc('font', size=7)
  

   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19175976)
 You should also specify axis and threshold limits: 

  ax1.ticklabel_format(axis='y', style='sci', scilimits=(-2,2))
  

 This would use sci format on  y  axis when figures are out of the  [0.01, 99]  bounds. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21512672)
 I guess it's because that scientific representation is not treated as tick label, you can use: 

  impt matplotlib
matplotlib.rc('font', size=7)
  

  

  matplotlib.rcParams['font.size']=7
  

 and remove  labelsize=7  in  ax.tick_params   


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11579834)
 Try using http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.ticklabel_format: 

  import matplotlib.pyplot as plt
...
plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
  

 This applies scientific notation (i.e.  a x 10^b ) to your x-axis tickmarks 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10705608)
 You can use  pyplot.ticklabel_format  to set the label style to scientific notation.  

  import pylab as plt
import numpy as np

# Create some random data over a large interval
N = 200
X = np.random.random(N) * 10 ** 6
Y = np.sqrt(X)

# Draw the figure to get the current axes text
fig, ax = plt.subplots()
plt.scatter(X,Y)
ax.axis('tight')
plt.draw()

plt.ticklabel_format(style='sci',axis='x',scilimits=(0,0))

# Edit the text to your liking
#label_text   = [r"$%i \cdot 10^4$" % int(loc/10**4) for loc in plt.xticks()[0]]
#ax.set_xticklabels(label_text)

# Show the figure
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43216810)
 It seems that  plt.ticklabel_format  does not work correctly. However if you define the ScalarFormatter yourself  and  set the limits for scientific notation to the formatter, you can get the offset automatically in the mathtext format like so: 

  import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker

x = np.linspace(3,5)
y = np.sin(np.linspace(0,6*np.pi))*1e5

plt.plot(x,y)

mf = matplotlib.ticker.ScalarFormatter(useMathText=True)
mf.set_powerlimits((-2,2))
plt.gca().yaxis.set_major_formatter(mf)

plt.show()
  

 https://i.stack.imgur.com/o3KID.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7873567)
 First up, I would use a  figure  object to work on: this makes it easier to construct the plot to your liking. To construct your graph, the following should do: 

  fig = plt.figure()
fig.subplots_adjust(bottom=0.2)          # Remark 1
ax = fig.add_subplot(111)
ax.bar(arange(len(grosses)), grosses)
ax.ticklabel_format(style='plain')       # Remark 2
ax.set_xticks(arange(len(genres)))
ax.set_xticklabels(genres, rotation=80)
savefig('barchart.png', dpi=500)
  

 Along with the following remarks: 

 
 This adjusts the size of your image, in this case it enlarges the bottom to be able to fit your labels. In most cases you roughly know the data you are going to put in, so that should suffice. If you are using matplotlib version 1.1 or higher, you could use the http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.tight_layout function to do this automatically for you. The alternative is to calculate the needed size by yourself based on the bounding boxes of all axes labels as shown http://matplotlib.sourceforge.net/faq/howto_faq.html#automatically-make-room-for-tick-labels, but you need a renderer for this to be able to determine the sizes of all labels. 
 By specifying the label format (using either  sci  or  plain ), you can change the rendering of the values. When using  plain , it will just render the value as is. See the http://matplotlib.sourceforge.net/api/axes_api.html#matplotlib.axes.Axes.ticklabel_format on this function for more info. Note that you can also use the http://matplotlib.sourceforge.net/api/axes_api.html#matplotlib.axes.Axes.set_yticklabels function's  text  argument to control the formatting further (of course that function is also available for the x axis. 
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/33751494)
 you can use  ax.yaxis.get_offset_text()  to access the offset text. You can then set the size and color on that  Text  object. For example: 

  import matplotlib.pyplot as plt
import numpy as np

fig,ax = plt.subplots()
ax.plot(range(10),np.linspace(0,1e11,10))

offset_text = ax.yaxis.get_offset_text()

offset_text.set_size(20)
offset_text.set_color('red')

plt.show()
  

 https://i.stack.imgur.com/X68s0.png 



