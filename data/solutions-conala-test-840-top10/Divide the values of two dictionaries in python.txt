Query: Divide the values of two dictionaries in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11840146)
  d1 = { 'a':12 , 'b':10 , 'c':2 }
d2 = { 'a':0 , 'c':2 , 'b':5}
d3={x:float(d2[x])/d1[x] for x in d1}
print d3
  

  output:  

  {'a': 0.0, 'c': 1.0, 'b': 0.5}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11840191)
 in 3.2 you use the . .get(key). 
http://www.tutorialspoint.com/python/python_dictionary.htm 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11840128)
 Using viewkeys (python2.7): 

  {k: float(d2[k])/d1[k] for k in d1.viewkeys() & d2}
  

 Same in python 3 (where we can drop the  float()  call altogether): 

  {k: d2[k]/d1[k] for k in d1.keys() & d2}
  

 Yes, I am using a key intersection here; if you are absolutely sure your keys are the same in both, just use  d2 : 

  {k: float(d2[k])/d1[k] for k in d2}
  

 And to be complete, In Python 2.6 and before you'll have to use a  dict()  constructor with a generator expression to achieve the same: 

  dict((k, float(d2[k])/d1[k]) for k in d2)
  

 which generates a sequence of key-value tuples. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11840138)
 This works for all pythons, I would however recommend the solution by https://stackoverflow.com/a/11840128/1219006 if have Py 2.7+ 

  >>> d1 = { 'a':12 , 'b':10 , 'c':2 }
>>> d2 = { 'a':0 , 'c':2 , 'b':5}
>>> d3 = dict((k, float(d2[k]) / d1[k]) for k in d2)
>>> d3
{'a': 0.0, 'c': 1.0, 'b': 0.5}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46863404)
 you can use a dict comprehension i.e  

  def to_sex_dicts(names_dict: dict) -> tuple:
    """Divide the names by sex to 2 different dictionaries."""
    m = {i : names_dict.get(i) for i in names_dict.keys() if ':M' in i}
    f = {i : names_dict.get(i) for i in names_dict.keys() if ':F' in i}
    return m,f

male_names, female_names = to_sex_dicts(people)
print(male_names)
{'Artyom:M': 400, 'Alex:M': 800}

print(female_names)
{'Marina:F': 600, 'Kate:F': 1000}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30097435)
 Here is the function which can be used to split a dictionary to any divisions. 

  import math

def linch_dict_divider(raw_dict, num):
    list_result = []
    len_raw_dict = len(raw_dict)
    if len_raw_dict > num:
        base_num = len_raw_dict / num
        addr_num = len_raw_dict % num
        for i in range(num):
            this_dict = dict()
            keys = list()
            if addr_num > 0:
                keys = raw_dict.keys()[:base_num + 1]
                addr_num -= 1
            else:
                keys = raw_dict.keys()[:base_num]
            for key in keys:
                this_dict[key] = raw_dict[key]
                del raw_dict[key]
            list_result.append(this_dict)

    else:
        for d in raw_dict:
            this_dict = dict()
            this_dict[d] = raw_dict[d]
            list_result.append(this_dict)

    return list_result

myDict = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}
print myDict
myList = linch_dict_divider(myDict, 2)
print myList
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19871093)
 As noted by Martijn in comments, you would be able to use  Counter()  objects for your values, here is one way to do this that changes your values to dictionaries with tuples as values: 

  from collections import Counter

data = {'Paul ': [5, Counter({'i': 1, 'in': 1, 't': 1, 'fa': 1, 'cr': 1})],
        'Lisa ': [4, Counter({'f': 3, 'bo': 1})],
        'Tracy ': [6, Counter({'sl': 3, 'fi': 1, 'an': 1, 'piz': 1})],
        'Maria': [2, Counter({'t': 2})]}

for lst in data.values():
    lst[1] = {k: (lst[0], float(v)/lst[0]) for k, v in lst[1].items()}
  

  

  >>> data
{'Lisa ': [4, {'bo': (4, 0.25), 'f': (4, 0.75)}],
 'Maria': [2, {'t': (2, 1.0)}],
 'Paul ': [5, {'cr': (5, 0.2), 'fa': (5, 0.2), 'i': (5, 0.2), 'in': (5, 0.2), 't': (5, 0.2)}],
 'Tracy ': [6, {'an': (6, 0.16666666666666666), 'fi': (6, 0.16666666666666666), 'piz': (6, 0.16666666666666666), 'sl': (6, 0.5)}]}
  

 Note that this modifies your current dictionary in place, here is how you could create a new dictionary instead: 

  result = {}
for key, lst in data.items():
    result[key] = [lst[0], {k: (lst[0], float(v)/lst[0]) for k, v in lst[1].items()}]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50169189)
 You can achieve this using dictionary comprehension. 

  dict3 = {} # create a new dictionary


# iterate dict1 keys, to get value from dict2, which will be used to divide dict 1 values

for d in dict1:
       y  = dict2[d] 
       dict3[d] = {k:(v/y) for k, v in dict1[d].items() }
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38899628)
 Here's one option: 

  from collections import namedtuple                                         

trained = {'Dog': 4, 'Cat': 3, 'Bird': 1, 'Fish': 12, 'Mouse': 19}         
untrained = {'Cat': 2, 'Mouse': 7, 'Dog': 4}                               

Score = namedtuple('Score', ('total', 'percent', 'name'))                  

trained_scores = []                                                        
for t in trained:                                                          
    trained_scores.append(                                                 
        Score(total=trained[t],                                            
              percent=(trained[t]/(trained[t]+untrained.get(t, 0)))*100,   
              name=t)                                                      
    )                                                                      

untrained_scores = []                                                      
for t in untrained:                                                        
    untrained_scores.append(                                               
        Score(total=untrained[t],                                          
              percent=(untrained[t]/(untrained[t]+trained.get(t, 0)))*100, 
              name=t)                                                      
    )                                                                      

trained_scores.sort(reverse=True)                                          
untrained_scores.sort(reverse=True)                                        
import pprint; pprint.pprint(trained_scores)                               
import pprint; pprint.pprint(untrained_scores)

# I might name these something different.
row_template = '{:<30} {:<30}'                                          
item_template = '{0.name:<10} {0.total:>3} ({0.percent:>6.2f}%)'        
print('='*61)                                                           
print(row_template.format('Trained', 'Untrained'))                      
print('='*61)   

for trained, untrained in zip_longest(trained_scores, untrained_scores):
    print(row_template.format(                                          
        '' if trained is None else item_template.format(trained),       
        '' if untrained is None else item_template.format(untrained),   
    ))                                                                  
  

 Outputs: 

  =============================================================
Trained                        Untrained                     
=============================================================
Mouse       19 ( 73.08%)       Mouse        7 ( 26.92%)      
Fish        12 (100.00%)       Dog          4 ( 50.00%)      
Dog          4 ( 50.00%)       Cat          2 ( 40.00%)      
Cat          3 ( 60.00%)                                     
Bird         1 (100.00%)                                     
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12988463)
 Here's a way to do it using an iterator over the items in the dictionary and  itertools.islice : 

  import itertools

def splitDict(d):
    n = len(d) // 2          # length of smaller half
    i = iter(d.items())      # alternatively, i = d.iteritems() works in Python 2

    d1 = dict(itertools.islice(i, n))   # grab first n items
    d2 = dict(i)                        # grab the rest

    return d1, d2
  



