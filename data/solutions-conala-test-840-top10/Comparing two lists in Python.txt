Query: Comparing two lists in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45836163)
 This way: 

   list1 = [1,2,3,'a','b']
 list2 = [1,2,3,'c','d']

 list1[:-2] == list2[:-2] => True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50621142)
  a = ['a1','b2','c3']
b = ['a1','b2','c3']
c = ['b2','a1','c3']

# if you care about order
a == b # True
a == c # False

# if you don't care about order
set(a) == set(b) # True
set(a) == set(c) # True
  

 By casting  a ,  b  and  c  as a set, you remove duplicates and order doesn't count. Comparing sets is also much faster and more efficient than comparing lists. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49715263)
 You can use zip : 

  a = [0, 1, 1, 0, 0, 0, 1, 0, 1]
b = [0, 1, 1, 0, 1, 0, 1, 0, 0]

count=0
indices=[]
for i in zip(a,b):
    if i[0]!=i[1]:
        indices.append(count)

    count+=1

print(indices)
  

 output: 

  [4, 8]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33147207)
 While a list comprehension was specified in the question and the answers above are probably better, I thought I'd chime in with a recursive solution: 

  def compare_lists(a, b, res=[]):
    if len(a) == len(b):
        if a == []:
            return res
        else:
            if a[0] == b[0]:
                res.append(1)
            else:
                res.append(0)
            return compare_lists(a[1:], b[1:])
    else:
        return "Lists are of different length."
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45836414)
 If your lists are very large and you want to avoid duplicating them with  list1[:-2]==list2[:-2] , you can use a generator expression for a more memory-efficient solution: 

  all(a==b for a,b,_ in zip(list1, list2, range(len(list1)-2)))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16113750)
 Is this what you want? I'm assuming that  a  and  b  each only occur once in  list1  and  list2  respectively. 

  def corresponding(list1,list2,a,b):
     return list1.index(a) == list2.index(b)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11697721)
 If the two lists are the same length, you can do a side-by-side iteration, like so: 

  list_common = []
for a, b in zip(list_a, list_b):
    if a == b:
        list_common.append(a)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32996375)
 You can change it a little bit and do: 

  [x[i] == y[i] for i in xrange(len(x))]
  

 If you use Python3 - change  xrange  to  range  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/49712373)
 You could also just use a simple loop which scans the lists, item by item: 

  a = [0, 1, 1, 0, 0, 0, 1, 0, 1]
b = [0, 1, 1, 0, 1, 0, 1, 0, 0]

diff=[]

for i in range(0,len(a)):
    if a[i]!=b[i]:
        diff.append(i)

print diff
  

 A list comprehension could also do the same thing: 

  diff=[i for i in range(len(a)) if a[i]!=b[i]]
print diff
  



