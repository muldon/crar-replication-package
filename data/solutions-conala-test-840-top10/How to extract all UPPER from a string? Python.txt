Query: How to extract all UPPER from a string? Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15886463)
 You could use a more functional approach 

  >>> s = 'abcdefgABCDEFGHIJKLMNOP'
>>> filter(str.isupper, s)
'ABCDEFGHIJKLMNOP'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15886375)
 Using list comprehension: 

  >>> s = 'abcdefgABCDEFGHIJKLMNOP'
>>> ''.join([c for c in s if c.isupper()])
'ABCDEFGHIJKLMNOP'
  

 Using generator expression: 

  >>> ''.join(c for c in s if c.isupper())
'ABCDEFGHIJKLMNOP
  

 You can also do it using regular expressions: 

  >>> re.sub('[^A-Z]', '', s)
'ABCDEFGHIJKLMNOP'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15886424)
 or use regex ... this is an easy answer 

  import re
print ''.join(re.findall('[A-Z]+',my_string))
  

  

  In [6]: %timeit filter(str.isupper,my_list)
1000 loops, best of 3: 774 us per loop

In [7]: %timeit ''.join(re.findall('[A-Z]+',my_list))
1000 loops, best of 3: 563 us per loop

In [8]: %timeit re.sub('[^A-Z]', '', my_list)
1000 loops, best of 3: 869 us per loop

In [10]: %timeit ''.join(c for c in my_list if c.isupper())
1000 loops, best of 3: 1.05 ms per loop
  

 so this join plus findall is the fastest method (per ipython %timeit  (python 2.6)) , using a 10000 character long identical string 

  edit : Or not 

  In [12]: %timeit  my_list.translate(None,string.ascii_lowercase)
10000 loops, best of 3: 51.6 us per loop
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9429431)
  "to use regex to remove @tags from a string"  

  import re

text = ' you @warui  and @madawar '
stripped_text = re.sub(r'@\w+', '', text)
# stripped_text == ' you   and  '
  

 or do you want to  extract  them? 

  import re

text = ' you @warui  and @madawar '
tags = re.findall(r'@\w+', text)
# tags == ['@warui', '@madawar']
  

 A @tag is defined as  @  followed by  at least  one alphanumeric character, that's why  @\w+  is better than  @\w* . Also you don't need to modify the case-sensitiveness, because  \w  matches both lower and upper characters. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25722607)
 You can to this using  ord  offset by the  ord  of  A : 

  def class_string_to_vector(class_str):
    _idx = ord(class_str.strip()[-1].upper()) - ord('A')
    _vec = [0] * 8
    _vec[_idx] = 1
    return vec
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8905529)
 Try http://docs.scipy.org/doc/numpy/reference/generated/numpy.triu.html (triangle-upper) and http://docs.scipy.org/doc/numpy/reference/generated/numpy.tril.html (triangle-lower). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20645761)
 You can use Numpy's http://docs.scipy.org/doc/numpy/reference/generated/numpy.triu_indices.html to extract the upper triangular of  A  into a flat array: 

  >>> A[np.triu_indices(3)]
array([ 4,  0,  3,  4, -2,  7])
  

 And can easily convert this to a Python list: 

  >>> list(A[np.triu_indices(3)])
[4, 0, 3, 4, -2, 7]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15886411)
  import string
s = 'abcdefgABCDEFGHIJKLMNOP'
s.translate(None,string.ascii_lowercase)
  

 http://docs.python.org/2/library/string.html#string.translate function will delete all characters from the string that are in  deletechars , a list of characters. Then, the string will be translated using table  (we are not using it in this case) . 

 To remove only the lower case letters, you need to pass http://docs.python.org/2/library/string.html#string.ascii_lowercase as the list of letters to be deleted. 

 The  table  is None because when the table is  None , only the character deletion step will be performed. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20947613)
 I would like to propose a non-regex solution: 

  string = 'LAST LAST2 First First2'
words = string.split(' ') # equals ['LAST', 'LAST2', 'First', 'First2']
result = []
for word in words:
    if not word.isupper():
        result.append(word)
print(' '.join(result))
  

  

  First First2
  



