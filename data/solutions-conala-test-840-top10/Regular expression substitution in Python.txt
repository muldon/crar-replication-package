Query: Regular expression substitution in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2480873)
 Python does not simultaneously return a match and a substitution. Calling  group(0)  on a returned Match object will find the matched substring: 

  >>> r=re.compile('(b+)')
>>> r.search('abbbc')
<_sre.SRE_Match object at 0x7f04af497af8>
>>> r.search('abbbc').group(0)
'bbb'
>>> r.sub('z', 'abbbc')
'azc'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16720705)
  str.replace()  <sup>https://docs.python.org/2/library/stdtypes.html#str.replace|https://docs.python.org/3/library/stdtypes.html#str.replace</sup> does not recognize regular expressions.  

 To perform a substitution using a regular expression, use  re.sub()  <sup><a href="https://docs.python.org/2/library/re.html#re.sub" |<a href="https://docs.python.org/3/library/re.html#re.sub" </sup>. 

 For example: 

  import re

line = re.sub(
           r"(?i)^.*interfaceOpDataFile.*$", 
           "interfaceOpDataFile %s" % fileIn, 
           line
       )
  

 In a loop, it would be better to compile the regular expression first: 

  import re

regex = re.compile(r"^.*interfaceOpDataFile.*$", re.IGNORECASE)
for line in some_file:
    line = regex.sub("interfaceOpDataFile %s" % fileIn, line)
    # do something with the updated line
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/547817)
 Right from http://docs.python.org/library/re.html#re.sub: 

  >>> def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'
>>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37998896)
 Python has no strange language syntax related to regular expressions - they are performed in well-behaved function calls. 

 So instead of a part of the call arguments that are executed on match, what you have is a callback function: all you have to do is to put a callable object as the second argument, instead of the substitution string. The callable receives the match object as its sole argument. 

 In this case, all you need is an inline  if  - so you can even define the callable as a lambda expression: 

  t = "this this that"
m = re.sub(r"(this)|(that)", lambda x: "ONE" if x.group() == "this" else "TWO", t   )
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36411484)
  replace()  cannot do regular expression substitution. Use https://docs.python.org/2/library/re.html#re.sub instead: 

  >>> import re
>>> s = "hostname <20>  UNIQUE      Registered"
>>> re.sub(r"<\d{2}>\s+UNIQUE\s+Registered", "", s)
'hostname '
  

 where  \d{2}  would match 2 subsequent digits,  \s+  - one or more space characters. 

 As a side note, could not you just split the string by space and get the first item: 

  >>> s.split()[0]
'hostname'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34246006)
 Python has a powerful module for regular expressions,  re , featuring a substitution method: 

  >>> import re
>>> a = '2+(2)-(5-2/5)'
>>> re.sub('\((\d+)\)', r'\1', a)
'2+2-(5-2/5)'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11701871)
 You can use regular expression substitution passing a function as replacement... for example 

  s = "abcde+3fghijkl-1mnopqr+12abcdefghijklmnoprstuvwxyz"

import re

def dump(match):
    start, end = match.span()
    print s[start:end + int(s[start+1:end])]

re.sub(r'[-+]\d+', dump, s)

#output
# +3fgh
# -1m
# +12abcdefghijkl
  



