Query: Remove all special characters, punctuation and spaces from string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25183802)
 Shorter way  : 

  import re
cleanString = re.sub('\W+','', string )
  

 If you want spaces between words and numbers substitute '' with ' ' 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/23853882)
  #!/usr/bin/python
import re

strs = "how much for the maple syrup? $20.99? That's ricidulous!!!"
print strs
nstr = re.sub(r'[?|$|.|!]',r'',strs)
print nstr
nestr = re.sub(r'[^a-zA-Z0-9 ]',r'',nstr)
print nestr
  

 you can add more special character and that will be replaced by '' means nothing i.e they will be removed. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5843547)
 Here is a regex to match a string of characters that are not a letters or numbers: 

  [^A-Za-z0-9]+
  

 Here is the Python command to do a regex substitution: 

  re.sub('[^A-Za-z0-9]+', '', mystring)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36187228)
 Use translate: 

  import string

def clean(instr):
    return instr.translate(None, string.punctuation + ' ')
  

 Caveat: Only works on ascii strings. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52913879)
 You can remove punctuation by retaining only alphanumeric characters and spaces: 

  s = 'a dog    barks    meow!   @  â€¦'
print(''.join(c for c in s if c.isalnum() or c.isspace()).split())
  

 This outputs: 

  ['a', 'dog', 'barks', 'meow']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5844618)
 Assuming you want to use a regex and you want/need Unicode-cognisant 2.x code that is 2to3-ready: 

  >>> import re
>>> rx = re.compile(u'[\W_]+', re.UNICODE)
>>> data = u''.join(unichr(i) for i in range(256))
>>> rx.sub(u'', data)
u'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\xaa\xb2 [snip] \xfe\xff'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33470249)
   I added some punctuation examples: 

  import re

sen = r'this is \re\store and b\\fre'
sen1 = r'this i\s /re/store and b//fre/'
sen2 = r'this is \re\store, and b\\fre!'
sen3 = r'this i\s /re/store, and b//fre/!'

slash_back =  r'\s*(?:[\w_]*\\(?:[\w_]*\\)*[\w_]*)'
slash_fwd = r'\s*(?:[\w_]*/(?:[\w_]*/)*[\w_]*)'
slash_all = r'\s*(?:[\w_]*[/\\](?:[\w_]*[/\\])*[\w_]*)'

strt = re.sub(slash_back,"",sen)
strt1 = re.sub(slash_fwd,"",sen1)
strt2 = re.sub(slash_all,"",sen1)
strt3 = re.sub(slash_back,"",sen2)
strt4 = re.sub(slash_fwd,"",sen3)
strt5 = re.sub(slash_all,"",sen3)
print(strt)
print(strt1)
print(strt2)
print(strt3)
print(strt4)
print(strt5)
  

 Output: 

  this is and
this i\s and
this and
this is, and!
this i\s, and!
this, and!
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20298672)
 Several characters in  string.punctuation  have special meaning in regular expression. . 

  >>> import re
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
>>> import re
>>> re.escape(string.punctuation)
'\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~'
  

 And if you want to match any one of them, use character class ( [...] ) 

  >>> '[{}]'.format(re.escape(string.punctuation))
'[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~]'
  

 

  >>> import re
>>> pattern = '[{}]'.format(re.escape(string.punctuation))
>>> re.sub(pattern, '', 'Hell,o World.')
'Hello World'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15740656)
 Assuming you consider wds as groups of characters separated by spaces: 

  >>> from string impt punctuation
>>> line = "Isn't ., stackoverflow the - best ?"
>>> ' '.join(wd.strip(punctuation) f wd in line.split() 
             if wd.strip(punctuation))
"Isn't stackoverflow the best"
  

  

  >>> line = "Isn't ., stackoverflow the - best ?"
>>> ' '.join(filter(None, (wd.strip(punctuation) f wd in line.split())))
"Isn't stackoverflow the best"
  



