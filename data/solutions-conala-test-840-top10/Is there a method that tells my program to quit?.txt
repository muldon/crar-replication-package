Query: Is there a method that tells my program to quit?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2823563)
 In Python 3 there is an  exit()  function: 

  elif choice == "q":
    exit()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2823482)
 See http://docs.python.org/library/sys.html#sys.exit. That function will quit your program with the given exit status. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26025582)
  pygame.QUIT  is simply a constant, while  pygame.quit()  is a function within the  pygame  module that uninitializes it. The fragment of code: 

  for event in pygame.event.get():
    if event.type == pygame.QUIT:
        ...
  

 is part of the typical control loop of a  pygame  program. The method  pygame.event.get()  returns the next event. If the type of event (an attribute of the event object) is  pygame.QUIT  then the application should do what is necessary to exit, including possibly calling  pygame.quit() . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12483998)
 Try the following: 

  import pygame, sys

pygame.init()
pygame.mixer.init(22050, -16, 2, 3072)
pygame.mixer.music.load("Kundara_Lake-of-Dust-320.mp3")
pygame.mixer.music.play(1, 0.0)

running = 1
while(running):
   for event in pygame.event.get():
      if event.type == pygame.KEYDOWN:
         if event.key == pygame.K_ESCAPE:
             pygame.mixer.music.stop()
             pygame.quit()
             running = 0
  

 From http://www.pygame.org/docs/ref/pygame.html 

 
    pygame.quit  
  
   Uninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once: repeated calls have no effect. 
  
   Note, that pygame.quit will not exit your program. Consider letting your program end in the same way a normal python program will end. 
 

 You are looping infinitely calling  pygame.quit()  due to  while(1) . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37619763)
 Figured out an alternative. Although this uses the OS module (and a protected method which I personally recommend against), it does the job pretty well. 

  while True:
for event in pygame.event.get():
    if event.type == pygame.QUIT:
        os._exit(0) # Forcibly exit the program
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2823480)
 One way is to do: 

  sys.exit(0)
  

 You will have to  import sys  of course. 

 Another way is to  break  out of your infinite loop. For example, you could do this: 

  while True:
    choice = get_input()
    if choice == "a":
        # do something
    elif choice == "q":
        break
  

 Yet another way is to put your main loop in a function, and use  return : 

  def run():
    while True:
        choice = get_input()
        if choice == "a":
            # do something
        elif choice == "q":
            return

if __name__ == "__main__":
    run()
  

 The only reason you need the  run()  function when using  return  is that (unlike some other languages) you can't directly  return  from the main part of your Python code (the part that's not inside a function). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19846358)
 Please note that the solutions based on sys.exit() or any Exception may not work in a multi-threaded environment. 

 
   Since exit() ultimately “only” raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted. (http://docs.python.org/3.3/library/sys.html#sys.exit) 
 

 https://stackoverflow.com/a/1635084/777285 for more details. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38229597)
 You need to modify your  createWidgets()  method this way: 

   def createWidgets(self):
     self.QUIT = Button(self, text='QUIT', bg='red', command=quit)         
     self.QUIT.pack(side=LEFT)    
     self.DATA_READ = Button(self, text='Data Read', command=self.feed_data)  
     self.DATA_READ.pack(side=LEFT)
  

  Note  that according to https://www.python.org/dev/peps/pep-0008/, you need to rename your variables this way: 

 
 self.DATA_READ &#x2192; self.read_data 
 self.QUIT &#x2192; self.quit 
 

 But in order not to confuse yourself or the maintainer of your program, avoid using reserved keywords. This means you need to rename  self.quit  to something like  self.quit_program  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3013190)
 The actual way to end a program, is to call 

  raise SystemExit
  

 It's what  sys.exit  http://docs.python.org/library/exceptions.html#exceptions.SystemExit. 

 A plain  SystemExit , or with  None  as a single argument, sets the process' exit code to zero. Any non-integer exception value ( raise SystemExit("some message") ) prints the exception value to  sys.stderr  and sets the exit code to 1. An integer value sets the process' exit code to the value: 

  $ python -c "raise SystemExit(4)"; echo $?
4
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/111011)
 The usual method to exit a Python program: 

  sys.exit()
  

 (to which you can also pass an exit status) or  

  raise SystemExit
  

 will work fine in a Tkinter program. 



