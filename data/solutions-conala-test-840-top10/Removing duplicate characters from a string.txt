Query: Removing duplicate characters from a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9841401)
 If order  does   matter, how about: 

  >>> foo = 'mppmt'
>>> ''.join(sorted(set(foo), key=foo.index))
'mpt'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9841349)
 If order is not the matter: 

  >>> foo='mppmt'
>>> ''.join(set(foo))
'pmt'
  

 To keep the order: 

  >>> foo='mppmt'
>>> ''.join([j for i,j in enumerate(foo) if j not in foo[:i]])
'mpt'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53378152)
 Here's an attempt with  itertools.groupby . I'm not sure if it can be done with better time complexity. 

  from itertools import groupby

def rm_even(s):
    to_join = []
    for _, g in groupby(s):
        chars = list(g)
        if len(chars) % 2:
            to_join.extend(chars)
    if to_join == s:
        return ''.join(to_join)
    return rm_even(to_join)
  

  

  >>> rm_even('azxxzyyyddddyzzz')
>>> 'azzz'
>>> rm_even('xAAAAx')
>>> ''
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4575626)
 In case you are also interested in removing duplicates of  non-contiguous  occurrences  you have to wrap things in a loop, e.g. like this 

   s="ababacbdefefbcdefde"

 while re.search(r'([a-z])(.*)\1', s):
     s= re.sub(r'([a-z])(.*)\1', r'\1\2', s)

 print s  # prints 'abcdef'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39742140)
  

  def duplicate_encode(word):

    return (lambda w: ''.join(('(', ')')[c in w[:i] + w[i+1:]] for i, c in enumerate(w)))(word.lower())

print(duplicate_encode("rEcede"))
  

 OUTPUT 

  > python3 test.py
()()()
>
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53378072)
 Count the letters with  Counter  and remove the ones that have even count: 

  from collections import Counter

word = 'azxxzyyyddddyzzz'
count = Counter(word) # Counter({'z': 5, 'y': 4, 'd': 4, 'x': 2, 'a': 1})
for key, value in count.items():
  if value%2 == 0:
    word = word.replace(key, "")

print(word) # 'azzzzz'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9841328)
 If order does not matter, you can use 

  "".join(set(foo))
  

  set()  will create a set of unique letters in the string, and  "".join()  will join the letters back to a string in arbitrary order. 

 If order  does  matter, you can use  collections.OrderedDict  in Python 2.7 or above: 

  from collections import OrderedDict
foo = "mppmt"
result = "".join(OrderedDict.fromkeys(foo))
  

 resulting in the string  "mpt" . 



