Query: extract digits in a simple way from a python string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13518908)
 Nice and simple with  findall : 

  import re

s=r"""99-my-name-is-John-Smith-6376827-%^-1-2-767980716"""

print re.findall('^.*-([0-9]+)$',s)

>>> ['767980716']
  

  

  ^         # Match the start of the string
.*        # Followed by anthing
-         # Upto the last hyphen
([0-9]+)  # Capture the digits after the hyphen
$         # Upto the end of the string
  

  Or more simply just match the digits followed at the end of the string   '([0-9]+)$'   


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13518898)
 Your  Regex  should be  (\d+)$ .  

 
  \d+  is used to match digit (one or more) 
  $  is used to match at the end of string. 
 

 So, your code should be: - 

  >>> s = "99-my-name-is-John-Smith-6376827-%^-1-2-767980716"
>>> import re
>>> re.compile(r'(\d+)$').search(s).group(1)
'767980716'
  

 And you don't need to use  str  function here, as  s  is already a string. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36167504)
 You may use a simple  (\d+)M  regex ( 1+ digit(s) followed with  M   where the digits are captured into a capture group) with  re.findall . 

 See http://ideone.com/DTDsPw: 

  import re
s = "107S33M15H\n33M100S\n12M100H33M"
print(re.findall(r"(\d+)M", s))
  

 And here is a https://regex101.com/r/vY9eY5/1 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10365472)
 Without using  regex , you can just do: 

  def get_num(x):
    return int(''.join(ele for ele in x if ele.isdigit()))
  

  

  >>> get_num(x)
120
>>> get_num(y)
90
>>> get_num(banana)
200
>>> get_num(orange)
300
  

  EDIT :  

 Answering the follow up question. 

 If we know that the only period in a given string is the decimal point, extracting a float is quite easy: 

  def get_num(x):
    return float(''.join(ele for ele in x if ele.isdigit() or ele == '.'))
  

  

  >>> get_num('dfgd 45.678fjfjf')
45.678
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10365251)
 The simplest way to extract a number from a string is to use regular expressions and  findall .  

  >>> import re
>>> s = '300 gm'
>>> re.findall('\d+', s)
['300']
>>> s = '300 gm 200 kgm some more stuff a number: 439843'
>>> re.findall('\d+', s)
['300', '200', '439843']
  

 It might be that you need something more complex, but this is a good first step. 

 Note that you'll still have to call  int  on the result to get a proper numeric type (rather than another string): 

  >>> map(int, re.findall('\d+', s))
[300, 200, 439843]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13520331)
 Save the regular expressions for something that requires more heavy lifting. 

  >>> def parse_last_digits(line): return line.split('-')[-1]
>>> s = parse_last_digits(r"99-my-name-is-John-Smith-6376827-%^-1-2-767980716")
>>> s
'767980716'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13518900)
 Try using  \d+$  instead. That matches one or more numeric characters followed by the end of the string. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45132922)
 The  \w  pattern matches letters, digits  and   _  symbol. Depending on the Python version and options used, the letters and digits it can match may be from the whole Unicode range or just ASCII. 

 So, the best way to fix the issue is by replacing  \w  with  [^\W_] : 

  import re
string = '''aaaa_1y345_xyz_orange_bar_1
aaaa_123a5542_xyz_orange_bar_1
bbbb_1z34512_abc_purple_bar_1'''
print(re.findall(r'_[^\W_]+_[^\W_]+_bar_[0-9]+', string))
# => ['_xyz_orange_bar_1', '_xyz_orange_bar_1', '_abc_purple_bar_1']
  

 See the http://ideone.com/wkuxkQ. 

  Details : 

 
  _  - an underscore 
  [^\W_]+  - 1 or more chars that are either digits or letters (a  [^  starts the negated character class,  \W  matches any non-word char, and  _  is added to match any word chars other than  _ ) 
  _[^\W_]+  - same as above 
  _bar_  - a literal substring  _bar_  
  [0-9]+  - 1 or more ASCII digits. 
 

 See the https://regex101.com/r/7o6mNj/2. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13467687)
 You can use a pretty simple regex to split the numbers off from the letters, but like people have said in the comments, there's no way to know when those b's should be part of the number and when they're part of the text. 

  import re
text = """12buixuongtrach 
34btrannhatduat 
25bachmai 
78bhoangquocviet"""

unmatched = text.split()
matched = [re.sub('(\d+)(.*)', '\\1 \\2', s) for s in unmatched]
  

 Which gives: 

  >>> matched
['12 buixuongtrach', '34 btrannhatduat', '25 bachmai', '78 bhoangquocviet']
  

 The regex is just grabbing one or more digits at the start of the string and putting them into group  \1 , then putting the rest of the string into group  \2 . 



