Query: Python ASCII to binary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37591617)
 If you want to decode and encode, have this solutions 

 Encode ascii to bin 

  def toBinary(string):
    return "".join([format(ord(char),'#010b')[2:] for char in string])
  

 Encode bin to ascii 

  def toString(binaryString):
    return "".join([chr(int(binaryString[i:i+8],2)) for i in range(0,len(binaryString),8)])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37591388)
  # Lets say your filename is stored in fname

def binary(n):
    return '{0:08b}'.format(n)

with open(fname) as f:
    content = f.readlines()
    for i in content:
        print(binary(ord(i)), end='')
    print('')
  

 This will give you the integer value(from ascii) of each character in the file, line by line 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29151248)
 I think you don't necessarily understand what binary/ascii is ... all files are binary in the sense that its just bits.  ascii is just a representation of some bits... 99.9999 % of file editors will display your bits as ascii if they can , and if there is no other encoding declared in the file itself ...  

  fp.write("abcd") 
  

 is  exactly equivelent  to  

  fp.write("\x61\x62\x63\x64")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8445492)
 Is this what you're searching f? 

  hex_string = '0A'
'{0:b}'.fmat(int(hex_string, 16))
# returns '1010'
  

  

  ''.join('{0:04b}'.fmat(int(c, 16)) f c in hex_string)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30124887)
 Use the built-in ASCII codec and tell it to ignore any errors, like: 

  with open(filename, 'rb') as fobj:
   text = fobj.read().decode('utf-16-le')
   file = open("text.txt", "w")
   file.write("{}".format(text.encode('ascii', 'ignore')))
   file.close()
  

 

 You can test & play around with this in the Python interpreter: 

  >>> s = u'hello \u00a0 there'
>>> s
u'hello \xa0 there'
  

 Just trying to convert to a string throws an exception. 

  >>> str(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 6: ordinal not in range(128)
  

 ...as does just trying to encode that unicode string to ASCII: 

  >>> s.encode('ascii')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 6: ordinal not in range(128)
  

 ...but telling the codec to ignore the characters it can't handle works okay: 

  >>> s.encode('ascii', 'ignore')
'hello  there'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4904247)
 Does something like this work:   

  with open('some_file','rb') as f:
  binary_data = f.read().split('\0',1)[1]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8445751)
 I'm not quite sure what you mean by a "binary string".  If you mean a string storing the binary data you can use http://docs.python.org/library/binascii.html. 

  >>> data = "01000001B8000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435362021222324"
>>> import binascii
>>> binary = binascii.a2b_hex(data)
>>> binary
'\x01\x00\x00\x01\xb8\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456 !"#$'
  

 However, if you really want a string containing lots of  "0" s and  "1" s you need to go one stage further: 

  >>> "".join("{:08b}".format(ord(i)) for i in binary)

  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31501596)
 To read binary data, you should use a binary stream e.g., using https://docs.python.org/3/library/io.html#io.TextIOBase.detach: 

  #!/usr/bin/env python3
import sys

sys.stdin = sys.stdin.detach() # convert to binary stream
header = sys.stdin.readline().decode('ascii') # b'\n'-terminated
print(header, end='')
print(repr(sys.stdin.read()))
  



