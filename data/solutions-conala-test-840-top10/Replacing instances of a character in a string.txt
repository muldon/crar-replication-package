Query: Replacing instances of a character in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21793853)
  for i in range(s1):
  

 Here  s1  is a string and you are passing it to  range  function, which expects only numbers as parameters. That is the problem. You should be using the length of the string instead 

  for i in range(len(s1)):
  

 But, your actual problem can be solved with http://docs.python.org/2/library/stdtypes.html#str.replace, like this 

  s='IS GOING GO'
x='I'
y='a'
print(s.replace(x, y))
  

 If you want to solve without  str.replace , you can do it like this 

  s, result, x, y ='IS GOING GO', "", "I", "a"
for char in s:
    if char == x:
        result += y
    else:
        result += char
print(result)
  

  Output  

  aS GOaNG GO
  

 The same program can be written like this as well 

  s, result, x, y ='IS GOING GO', "", "I", "a"
for char in s:
    result += y if char == x else char
print(result)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46628359)
 You would need to use the https://docs.python.org/3/library/re.html#re.sub method of Python strings with a regular expression for symbolizing a NOT character set such as 

  import re
line = re.sub(r"[^S]", "_", line)
  

 This replaces any non S character with the desired character. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3878622)
 Well regular expressions wise I would do exactly as JoshD has suggested. .  

 Use -  

  regex  = re.compile('\*+')
result = re.sub(regex, "*", string)
  

 This would essentially cache your regex. So subsequent usage of this in a loop would make your regex operations fast.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21178673)
 You were telling it to replace only 2 instances: 

  >>> re.I
2
>>> re.sub(r'\b\s+\b', '.', string)
'a.b.c.d.e.f.g'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17644326)
 . It looks like I can get it to work if I used both lookahead and lookbehind. Seems like there should be an easier way, though. 

  >>> re.sub('(?<!\$)\$(?!\$)','z',s)
'za $$b $$$c zd'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37440730)
 If you are replacing by an index value specified in variable 'n', then try the below: 

  def missing_char(str, n):
 str=str.replace(str[n],":")
 return str
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12723941)
 Turn the string into a list; then you can change the characters individually.   .join : 

  s = 'a;b;c;d'
slist = list(s)
for i, c in enumerate(slist):
    if slist[i] == ';' and 0 <= i <= 3: # only replaces semicolons in the first part of the text
        slist[i] = ':'
s = ''.join(slist)
print s # prints a:b:c;d
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47833716)
 You cannot simply assign value to a character in the string. 
Use this method to replace value of a particular character: 

  name = "India"
result=name .replace("d",'*')
  

 Output: In*ia 

 Also, if you want to replace say * for all the occurrences of the first character except the first character, 
eg. string = babble output = ba**le 

 Code: 

  name = "babble"
front= name [0:1]
fromSecondCharacter = name [1:]
back=fromSecondCharacter.replace(front,'*')
return front+back
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17644632)
 notes, if not using a callable for the replacement function: 

 
 you would need look-ahead because you must not match if followed by  $  
 you would need look-behind because you must not match if preceded by  $  
 

 not as elegant but this is very readable: 

  >>> def dollar_repl(matchobj):
...     val = matchobj.group(0)
...     if val == '$':
...         val = 'z'
...     return val
... 
>>> import re
>>> s = '$a $$b $$$c $d'
>>> re.sub('\$+', dollar_repl, s)
'za $$b $$$c zd'
  



