Query: how to get the index of dictionary with the highest value in a list of dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7248403)
 <b>Create a list of namedtuples</b> 

 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of 'name' as keys and 'score' as values like: 

  d = {'John':5, 'Alex':10, 'Richard': 7}
  

 You can list the items as tuples, sorted if you like, and get the name and score of, let's say the player with the highest score (index=0) very Pythonically like this: 

  >>> player = best[0]

>>> player.name
        'Alex'
>>> player.score
         10
  

 How to do this: 

 <b>list in random order or keeping order of http://docs.python.org/library/collections.html#collections.OrderedDict:</b> 

  import collections
Player = collections.namedtuple('Player', 'name score')
players = list(Player(*item) for item in d.items())
  

 <b> in order, sorted by value ('score'):</b> 

  import collections
Player = collections.namedtuple('Player', 'score name')
  

 sorted with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorted with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6561668)
 My preferred way would be to use a lambda to extract the score: 

  >>> lst= [{'name':'tom','score':5},{'name':'jerry','score':10},{'name':'jason','score':8}]
>>> max(lst, key=lambda d: d['score'])
{'score': 10, 'name': 'jerry'}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7237524)
 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score': 

  import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
  

 sorting with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorting with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  

 Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this: 

  player = best[1]
player.name
    'Richard'
player.score
    7
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7235661)
 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of name and score and you want to sort on 'score': 

  import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
  

 sorting with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorting with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  

 The order of 'key' and 'value' in the listed tuples is (value, key), but now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this: 

      player = best[1]
    player.name
        'Richard'
    player.score
         7
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28841171)
  

  averagescores = {}
for k, v in highscores.items():
    averagescores[k] = float(sum(v))/float(len(v))
  

 The above code will average out all the scores and put them in a new dictionary called 'averagescores'. 

 As for your second question, dictionaries by default are  orderless . You can, though, get an ordered  representation  of the dictionary as tuples: 

  import operator
sortedscores = sorted(averagescores.items(), key=operator.itemgetter(1))
  

 This will sort the scores from least to most by value. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21856190)
 A list does not save the names of variables. Use a dictionary or http://docs.python.org/2/library/collections.html#collections.namedtuple: 

  In [296]: d=dict(x=1, y=2, z=3)

In [297]: from operator import itemgetter
     ...: max(d.items(), key=itemgetter(1))[0]
     ...: 
Out[297]: 'z'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6561703)
 An alternative to using a  lambda  for the  key  argument to  max , is  operator.itemgetter : 

  from operator import itemgetter
max(lst, key=itemgetter('score'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54186303)
 You can use https://docs.python.org/3.7/library/collections.html#collections.defaultdict for an O( n ) solution: 

  from collections import defaultdict

L = [['Location 1', 5],['Location 2', 5],['Location 3', 5],['Location 1', 4],
     ['Location 2', 6],['Location 3', 5],['Location 1', 5],['Location 2', 5]]

dd = defaultdict(int)

for location, value in L:
    dd[location] = max(dd[location], value)

print(dd)
# defaultdict(int, {'Location 1': 5, 'Location 2': 6, 'Location 3': 5})
  

 This gives a dictionary mapping. If you are keen on a list of lists: 

  res = list(map(list, dd.items()))

print(res)
# [['Location 1', 5], ['Location 2', 6], ['Location 3', 5]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53313660)
 You are searching for max value in each list, but it is present in third list only, this will throw  ValueError  for all other lists unless max value is present in first list itself. 

  

  max_list = list()
for i, sub_list in enumerate(Value):
    max_list.append((max(sub_list), i))

index_of_max = max(max_list)[1]
  

  index_of_max  provides index of list containing max value. 



