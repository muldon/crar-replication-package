Query: Delete a dictionary item if the key exists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15411146)
 You can use http://docs.python.org/3/library/stdtypes.html#dict.pop: 

   mydict.pop("key", None)
  

 Note that if the second argument, i.e.  None  is not given,  KeyError  is raised if the key is not in the dictionary. Providing the second argument prevents the conditional exception. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28811205)
 Simply call del d['key']. 

 However, in production, it is always a good practice to check if 'key' exists in d. 

  if 'key' in d:
    del d['key']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11277439)
 Use http://docs.python.org/library/stdtypes.html#dict.pop: 

  .pop('key', None)
  

 This will return  [key]  if  key  exists in the dictionary, and  None  otherwise. If the second parameter is not specified (ie.  .pop('key') ) and  key  does not exist, a  KeyError  is raised. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15411148)
 There is also: 

  try:
    del mydict[key]
except KeyError:
    pass
  

 This only does 1 lookup instead of 2.  However,  except  clauses are expensive, so if you end up hitting the except clause frequently, this will probably be less efficient than what you already have. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12906043)
 You can use a http://docs.python.org/library/collections.html#collections.defaultdict for this.  

  from collections import defaultdict
d = defaultdict(list)
d['key'].append('mykey')
  

 This is slightly more efficient than  setdefault  since you don't end up creating new lists that you don't end up using. Every call to  setdefault  is going to create a new list, even if the item already exists in the dictionary. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15411416)
 Approach: calculate keys to remove, mutate dict 

 Let's call  keys  the list/iterator of keys that you are given to remove.  

  keys_to_remove = set(keys).intersection(set(mydict.keys()))
for key in keys_to_remove:
    del mydict[key]
  

 You calculate up front all the affected items and operate on them. 

 Approach: calculate keys to keep, make new dict with those keys 

 I prefer to create a new dictionary over mutating an existing one, so I would probably also consider this: 

  keys_to_keep = set(mydict.keys()) - set(keys)
new_dict = {k: v for k, v in mydict.iteritems() if k in keys_to_keep}
  

  

  keys_to_keep = set(mydict.keys()) - set(keys)
new_dict = {k: mydict[k] for k in keys_to_keep}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53026448)
 Use https://docs.python.org/2.7/library/stdtypes.html#dict.get: 

  my_dict = {}
my_dict[100] =  my_dict.get(100, 0) +  1
  

  Output  

  {100: 1}
  

  Explanation   (from the documentation)  

 
   Return the value for key if key is in the dictionary, else default 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5713303)
 Use  d.pop  if you want to capture the removed item, like in  item = d.pop("keyA") . 

 Use  del  if you want to delete an item from a dictionary. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45526235)
 nice one-liner to check if the key is present, delete it, return the value, or default: 

  ret_val = ('key' in body and body.pop('key')) or 5
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52136585)
 You can convert your list of dict into direct month: total mapping with    

  monthly_totals = {item['month']: item['total'] for item in data_list}
  

 and use a simple list comprehension with  dict.get  to handle missing values:   

  new_list = [{'month': i, 'total': monthly_totals.get(i, 0)} for i in range(1, 13)]
  



