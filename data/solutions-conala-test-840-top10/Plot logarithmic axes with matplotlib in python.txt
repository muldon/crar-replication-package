Query: Plot logarithmic axes with matplotlib in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/773850)
 You simply need to use http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.semilogy instead of plot: 

  from pylab import *
import matplotlib.pyplot  as pyplot
a = [ pow(10,i) for i in range(10) ]
fig = pyplot.figure()
ax = fig.add_subplot(2,1,1)

line, = ax.semilogy(a, color='blue', lw=2)
show()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47968372)
 if you want to change the base of logarithm, just add: 

  plt.yscale('log',basey=2) 
# where basex or basey are the bases of log
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21922236)
 As others have answered,  scatter()  or  plot()  will generate the plot you want. I suggest two refinements to answers that are already here: 

 
  Use numpy to create the x-coordinate list and y-coordinate list. Working with large data sets is faster in numpy than using the iteration in Python suggested in other answers.  
  Use pyplot to apply the logarithmic scale rather than operating directly on the data, unless you actually want to have the logs. 

  import matplotlib.pyplot as plt
import numpy as np

data = [(2, 10), (3, 100), (4, 1000), (5, 100000)]
data_in_array = np.array(data)
'''
That looks like array([[     2,     10],
                       [     3,    100],
                       [     4,   1000],
                       [     5, 100000]])
'''

transposed = data_in_array.T
'''
That looks like array([[     2,      3,      4,      5],
                       [    10,    100,   1000, 100000]])
'''    

x, y = transposed 

# Here is the OO method
# You could also the state-based methods of pyplot
fig, ax = plt.subplots(1,1) # gets a handle for the AxesSubplot object
ax.plot(x, y, 'ro')
ax.plot(x, y, 'b-')
ax.set_yscale('log')
fig.show()
   
 

   

 I've also used  ax.set_xlim(1, 6)  and  ax.set_ylim(.1, 1e6)  to make it pretty. 

 I've used the object-oriented interface to matplotlib. Because it offers greater flexibility and explicit clarity by using names of the objects created, the OO interface is preferred over the interactive state-based interface. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1183415)
 You can use the http://matplotlib.sourceforge.net/api/axes_api.html#matplotlib.axes.Axes.set_yscale method. That allows you to change the scale after the  Axes  object is created. That would also allow you to build a control to let the user pick the scale if you needed to. 

 The relevant line to add is: 

  ax.set_yscale('log')
  

 You can use  'linear'  to switch back to a linear scale. Here's what your code would look like: 

  import pylab
import matplotlib.pyplot as plt
a = [pow(10, i) for i in range(10)]
fig = plt.figure()
ax = fig.add_subplot(2, 1, 1)

line, = ax.plot(a, color='blue', lw=2)

ax.set_yscale('log')

pylab.show()
  

 https://i.stack.imgur.com/CmQwl.png 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3513577)
 First of all, it's not very tidy to mix  pylab  and  pyplot  code. What's more, http://matplotlib.org/faq/usage_faq.html#matplotlib-pyplot-and-pylab-how-are-they-related. 

 Here is a slightly cleaned up code, using only  pyplot  functions: 

  from matplotlib import pyplot

a = [ pow(10,i) for i in range(10) ]

pyplot.subplot(2,1,1)
pyplot.plot(a, color='blue', lw=2)
pyplot.yscale('log')
pyplot.show()
  

 The relevant function is http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.yscale. If you use the object-oriented version, replace it by the method http://matplotlib.sourceforge.net/api/axes_api.html#matplotlib.axes.Axes.set_yscale. Remember that you can also change the scale of X axis, using http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.xscale (or http://matplotlib.sourceforge.net/api/axes_api.html#matplotlib.axes.Axes.set_xscale). 

 Check my question https://stackoverflow.com/questions/3305865/what-is-the-difference-between-log-and-symlog to see a few examples of the graph scales that matplotlib offers. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51184222)
 I was having an issue with the x-label overlapping a subplot title; this worked for me: 

  import matplotlib.pyplot as plt
fig, ax = plt.subplots(2, 1)
ax[0].scatter(...)
ax[1].scatter(...)
plt.tight_layout()
.
.
.
plt.show()
  

 before 

 https://i.stack.imgur.com/mZusF.png 

 after 

 <a href="https://i.stack.imgur.com/Re5SH.png"  

 reference: 

 
 https://matplotlib.org/users/tight_layout_guide.html 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39132775)
 I think you want  ax.xaxis.set_major_formatter(FormatStrFormatter("%g")) , as in: 

  x=[0.1,1,10,100,1000]
y=[-1,0,1,2,3]
fig,ax=plt.subplots()
ax.plot(x,y,'.-')
ax.set_xscale('log')
ax.xaxis.set_major_formatter(FormatStrFormatter("%g"))
  

 Example output:
https://i.stack.imgur.com/I541U.png 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21358950)
 This seems to be a bit tricker than it should.  There are ways to center the spines (axis lines), and ways to rotate them, but those do not work together.  Adding a normal axis on a line (a la mpl demos) results in a curved axis (because it is logarithmic).  Here is a [poor] example of how to draw -- as in, like you would with Inkscape something to look like an additional pair of axis spines with the example data. 

  import matplotlib.pyplot as plt
import numpy as np

#data
b = np.logspace(-1, 1, 500)
Rd = {}
for zeta in [0.01, 0.1, 0.2, 0.7, 1]:
    Rd[zeta] = b / np.sqrt((1 - b * b) ** 2 + (2 * b * zeta) ** 2)

#plot
fig = plt.figure()   
ax1 = fig.add_subplot(111)

for z in Rd:  
    ax1.loglog(b, Rd[z])

ax1.set_xlim([0.1, 10])
ax1.set_ylim([0.1, 10])
ax1.set_aspect(1.)

#draw lines to look like diagonal spines (axes)
xmin, xmax = ax1.get_xlim()  # xlim == ylim

a = np.log10(xmin)
b = np.log10(xmax)
span = b - a
period_points = 3  # number of points/ticks per decade
npts = (span * period_points) + 1  # +1 for even powers of 10
x1 = np.logspace(a, b, num=npts)
x2 = np.logspace(b, a, num=npts)

ax1.plot(x1, x1, color='k', marker='x', ms='9')
ax1.plot(x1, x2, color='k', marker='x', ms='9')
#NOTE: v1.2.1 lacks 'TICKUP' and similar - these may be
#   a better choice in v1.3x and beyond

ax1.text(0.97, 0.9,
         "axis label: A",
         size='large',
         horizontalalignment='right',
         verticalalignment='top',
         rotation=45,
         transform=ax1.transAxes,
         #bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10},
         )

ax1.text(0.03, 0.9,
         "axis label: B",
         size='large',
         horizontalalignment='left',
         verticalalignment='top',
         rotation=-45,
         transform=ax1.transAxes,
         #bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10},
         )

plt.savefig("example.pdf")
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21506398)
 Here is a partial solution.  I am still working on how to do all of this in a natural  loglog()  plot rather than scaling the data.  (To complete this example you would have to define custom tick-lables so that they display  10**x  rather than  x .) 

  %matplotlib inline                   # I am doing this in an IPython notebook.
from matplotlib import pyplot as plt
import numpy as np
from numpy import log10

# Generate the data
beta = np.logspace(-1, 1, 500)[:, None]
zeta = np.array([0.01,0.1,0.2,0.7,1])[None, :]
Rd = beta/np.sqrt((1 - beta*beta)**2 + (2*beta*zeta)**2)

def draw(beta=beta, Rd=Rd):
    plt.plot(log10(beta), log10(Rd))
    plt.ylim([log10(0.1), log10(10)])
    plt.xlim([log10(0.1), log10(10)])
    plt.grid('on',which='minor')
    ax = plt.gca()
    ax.set_aspect(1)

from mpl_toolkits.axisartist import GridHelperCurveLinear
from matplotlib.transforms import Affine2D
from mpl_toolkits.axisartist import SubplotHost
from mpl_toolkits.axisartist import Subplot

#tr = Affine2D().rotate(-np.pi/2)
#inv_tr = Affine2D().rotate(np.pi/2)

class Transform(object):
    """Provides transforms to go to and from rotated grid.

    Parameters
    ----------
    ilim : (xmin, xmax, ymin, ymax)
       The limits of the displayed axes (in physical units)
    olim : (xmin, xmax, ymin, ymax)
       The limits of the rotated axes (in physical units)
    """
    def __init__(self, ilim, olim):
        # Convert each to a 3x3 matrix and compute the transform
        # [x1, y1, 1] = A*[x0, y0, 1]
        x0, x1, y0, y1 = np.log10(ilim)
        I = np.array([[x0, x0, x1],
                      [y0, y1, y1],
                      [ 1,  1,  1]])

        x0, x1, y0, y1 = np.log10(olim)
        x_mid = (x0 + x1)/2
        y_mid = (y0 + y1)/2
        O = np.array([[   x0, x_mid, x1],
                      [y_mid,    y1, y_mid],
                      [    1,     1,     1]])
        self.A = np.dot(O, np.linalg.inv(I))
        self.Ainv = np.linalg.inv(self.A)

    def tr(self, x, y):
        """From "curved" (rotated) coords to rectlinear coords"""
        x, y = map(np.asarray, (x, y))
        return np.dot(self.A, np.asarray([x, y, 1]))[:2]

    def inv_tr(self, x, y):
        """From rectlinear coords to "curved" (rotated) coords"""
        x, y = map(np.asarray, (x, y))
        return np.dot(self.Ainv, np.asarray([x, y, 1]))[:2]

ilim = (0.1, 10)
olim = (0.01, 100)
tr = Transform(ilim + ilim, olim + olim)

grid_helper = GridHelperCurveLinear((tr.tr, tr.inv_tr))

fig = plt.gcf()
ax0 = Subplot(fig, 1, 1, 1)
ax1 = Subplot(fig, 1, 1, 1, grid_helper=grid_helper, frameon=False)
ax1.set_xlim(*np.log10(olim))
ax1.set_ylim(*np.log10(olim))
ax1.axis["left"] = ax1.new_floating_axis(0, 0.)
ax1.axis["bottom"] = ax1.new_floating_axis(1, 0.0)
fig.add_subplot(ax0)
fig.add_subplot(ax1)
ax0.grid('on', which='both')
ax1.grid('on', which='both')

plt.plot(log10(beta), log10(Rd))
plt.ylim(np.log10(ilim))
plt.xlim(np.log10(ilim))
  

   


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51061094)
 After you create the plot, you can set the axes to be log scale, using matplotlib's https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_xscale.html and https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_yscale.html.  

 In this case, we need to get the axis from the  JointGrid  created by  jointplot . If you catch the  JointGrid  returned as  g , then the joint axis is  g.ax_joint . 

 For example: 

  g = sns.jointplot(x="predictions",
              y="targets",
              data = calibration_data,
              kind="reg",
              logx=True,
              )

g.ax_joint.set_xscale('log')
g.ax_joint.set_yscale('log')
  



