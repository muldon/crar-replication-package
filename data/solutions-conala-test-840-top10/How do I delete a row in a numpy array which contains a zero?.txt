Query: How do I delete a row in a numpy array which contains a zero?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18397909)
 Looks like  np.delete  does't change the array, just returns a new array, so 

 Instead of 

  x = np.delete(a,zero_row, 0)
  

  

  a = np.delete(a,zero_row, 0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11663150)
 The simplest way to delete rows and columns from arrays is the  numpy.delete  method. 

 Suppose I have the following array  x : 

  x = array([[1,2,3],
        [4,5,6],
        [7,8,9]])
  

 To delete the first row, do this: 

  x = numpy.delete(x, (0), axis=0)
  

 To delete the third column, do this: 

  x = numpy.delete(x,(2), axis=1)
  

 So you could find the indices of the rows which have a 0 in them, put them in a list or a tuple and pass this as the second argument of the function. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18398144)
 I  think I have found the answer: 

 as @tuxcanfly said I changed x to a.
Also I have now removed the for loop as it removed the row with index 2 for some reason.  

 Instead I now just chose to delete the rows using b as the delete function with use the elements in the list to remove the row with that index. 

 the new code:  

  import numpy as np
a=np.array(([7,1,2,8],[4,0,3,2],[5,8,3,6],[4,3,2,0]))
b=[]

for i in range(len(a)):
    for j in range (len(a[i])):
        if a[i][j]==0:
            b.append(i)
print 'b=',b
for zero_row in b:
    a=np.delete(a,b, 0)

print 'a=',a
  

 and the output: 

  b= [1, 3]
a= [[7 1 2 8]
 [5 8 3 6]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3877578)
 This is similar to your original approach, and will use less space than https://stackoverflow.com/questions/3877491/deleting-rows-in-numpy-array/3877542#3877542, but I suspect it will be slower. 

  >>> import numpy as np
>>> p = np.array([[1.5, 0], [1.4,1.5], [1.6, 0], [1.7, 1.8]])
>>> p
array([[ 1.5,  0. ],
       [ 1.4,  1.5],
       [ 1.6,  0. ],
       [ 1.7,  1.8]])
>>> nz = (p == 0).sum(1)
>>> q = p[nz == 0, :]
>>> q
array([[ 1.4,  1.5],
       [ 1.7,  1.8]])
  

 By the way, your line  p.delete()  doesn't work for me -  ndarray s don't have a  .delete  attribute. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18398979)
 
   I'm trying to write a function to delete all rows in which have a zero value in. 
 

 You don't need to write a function for that, it can be done in a single expression: 

  >>> a[np.all(a != 0, axis=1)]
array([[7, 1, 2, 8],
       [5, 8, 3, 6]])
  

 Read as: select from  a  all rows that are entirely non-zero. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42388298)
 You can't use  np.isnan  because the  NaN s are strings in your array but you can use boolean indexing by comparing with the string:  "nan" : 

  >>> import numpy as np
>>> np_array = np.array(["123","pqr","123",np.nan,"avb", np.nan])
>>> np_array[np_array != 'nan']
array(['1234', 'pqr', '123', 'avb'], 
      dtype='<U4')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50653614)
 Delete both the column and row and add back in a row of zeros. 

 This works for your example: 

  import numpy as np
a =  np.array([[0. , 2.8, 3.5, 0. , 2.5, 1. , 0.8],
   [0. , 0. , 0. , 0. , 0. , 0. , 0. ],
   [3.5, 2.5, 0. , 0. , 2.8, 1.3, 1.1],
   [3.6, 3.8, 3.3, 0. , 2.5, 0.6, 0.4],
   [2.5, 1.5, 2.8, 0. , 0. , 3.1, 1.9],
   [1. , 0.8, 1.3, 0. , 3.1, 0. , 2.8],
   [0.8, 1.6, 1.1, 0. , 1.9, 2.8, 0. ]])

def remove_column_of_zeros_and_shift_row(a, row, col):
    without_row = np.delete(a, row, axis=0)
    without_row_and_col = np.delete(without_row, col, axis=1)
    z = np.zeros((1, len(without_row_and_col[0])))
    without_col_shifted_row = np.append(z, without_row_and_col, axis=0)
    return without_col_shifted_row

my_result = remove_column_of_zeros_and_shift_row(a, 1, 3)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3878477)
 Here's a one liner (yes, it is similar to user333700's, but a little more straightforward): 

  >>> import numpy as np
>>> arr = np.array([[ 0.96488889, 0.73641667, 0.67521429, 0.592875, 0.53172222], 
                [ 0.78008333, 0.5938125, 0.481, 0.39883333, 0.]])
>>> print arr[arr.all(1)]
array([[ 0.96488889,  0.73641667,  0.67521429,  0.592875  ,  0.53172222]])
  

 By the way, this method is much, much faster than the masked array method for large matrices. For a 2048 x 5 matrix, this method is about 1000x faster. 

 By the way, user333700's method (from his comment) was slightly faster in my tests, though it boggles my mind why. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11811361)
 Here is a non-numpy solution in very general terms: 

  import random
to_keep = set(random.sample(range(total_rows), keep_ratio * total_rows))

#do this for each array:
new_array = np.array(item for index, item in enumerate(old_array) if index in to_keep)
  

 
   total_rows  is the number of rows in each array (I think you said this was 20,000)  
   keep_ratio  is the percentage of rows to keep, which according to you is  1 - 0.25 = 0.75   
 

  EDIT  

 You can also use numpy's  compress()  method. 

  import random
to_keep = set(random.sample(range(total_rows), keep_ratio * total_rows))
kompressor = (1 if i in to_keep else 0 for i in xrange(total_rows))

new_array = numpy.compress(kompressor, old_array, axis=1)
kompressor
  



