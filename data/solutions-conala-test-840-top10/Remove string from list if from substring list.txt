Query: Remove string from list if from substring list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28657080)
 Using https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions 

  >>> [l for l in list_dirs if l.split('\\')[-1] not in unwanted_files]
['C:\\bar\\foo\\.world.txt']
  

 Use  split  to get filename 

  >>> [l.split('\\')[-1] for l in list_dirs]
['hello.txt', '.world.txt', 'yellow.txt']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28657498)
 you also could use a filter function with lambda 

  print filter(lambda x: x.split('\\')[-1] not in unwanted_files, list_dirs)
#['C:\\bar\\foo\\.world.txt']
  

 or if you don't mind to import  os  (imo this is cleaner then splitting the string) 

  print filter(lambda x: os.path.basename(x) not in unwanted_files, list_dirs)
  

 In a list comprehension it would look like this 

  [l for l in list_dirs if os.path.basename(l) not in unwanted_files]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44734018)
 If you want to  remove the substring only from the end , the correct way to achieve this will be: 

  >>> ab = ['abc.SI','SIV.SI','ggS.SI']
>>> sub_string = '.SI'

#       checks the presence of substring at the end
#                                   v
>>> [s[:-len(sub_string)] if s.endswith(sub_string) else s for s in ab]
['abc', 'SIV', 'ggS']
  

 Because  str.replace()  (as mentioned in https://stackoverflow.com/a/44733877/2063361 removes the substring even if it is within the middle of string. For example: 

  >>> 'ab.SIrt'.replace('.SI', '')
'abrt'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48748185)
 Here is a solution without regex: 

  l = ['firm incorp', 'firm2 inc']
l2 = [' '.join(j for j in i.split(' ') if j != 'inc') for i in l]

# ['firm incorp', 'firm2']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39931663)
 . 

 But first, let's also add ' Donald Trump ',  'Donald'  and  'Trump'  in the end to make it a better test case. 

  >>>  = "\nX08y6\n" # choose a text that will hardly appear in any sensible string
>>> the_list = ['Donald Trump has', 'Donald Trump has small fingers', 'What is going on?',
        'Donald Trump', 'Donald', 'Trump']
>>> new_list = [item for item in the_list if .join(the_list).count(item) == 1]
>>> new_list
['Donald Trump has small fingers', 'What is going on?']
  

 Logic: 

 
 Concatenate all list element to form a single string.
  .join(the_list) .  
 Search if an item in the list has occurred only once. If it occurs more than once it is a sub-string.  count(item) == 1   
 

 
   https://docs.python.org/2/library/stdtypes.html#str.count 
  
   Return the number of non-overlapping occurrences of substring  sub  in the range  [start, end] . Optional arguments  start  and  end  are interpreted as in slice notation. 
 

 

    is used instead of   ""  (blank string), to handle a case like these : 

  >>> the_list = ['DonaldTrump', 'Donald', 'Trump']  

 

 As correctly pointed by Nishant, above code fails for  the_list = ['Donald', 'Donald']  

 Using a  set(the_list)  instead of  the_list  solves the problem. 
 >>> new_list = [item for item in the_list if .join(set(the_list)).count(item) == 1]  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26932668)
  >>> A = [ 'cat', 'doXXXg', 'monkey', 'hoBBBrse', 'fish', 'snake']
>>> B = ['XXX', 'BBB']
  

 The following list comprehension will work 

  >>> [word for word in A if not any(bad in word for bad in B)]
['cat', 'monkey', 'fish', 'snake']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21720517)
 First building block: substring. 

 You can use  in  to check: 

  >>> 'rest' in 'resting'
True
>>> 'sing' in 'resting'
False
  

 Next, we're going to choose the naive method of creating a new list. We'll add items one by one into the new list, checking if they are a substring or not. 

  def substringSieve(string_list):
    out = []
    for s in string_list:
        if not any([s in r for r in string_list if s != r]):
            out.append(s)
    return out
  

 You can speed it up by sorting to reduce the number of comparisons (after all, a longer string can never be a substring of a shorter/equal length string): 

  def substringSieve(string_list):
    string_list.sort(key=lambda s: len(s), reverse=True)
    out = []
    for s in string_list:
        if not any([s in o for o in out]):
            out.append(s)
    return out
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48748129)
 Remove the string only found at word boundaries using regular expression: 

  import re

l_r = [re.sub(r'\binc$', '', s) for s in l]
  

  \b  is special character matching word boundaries,  $  means the end of the string or just before the newline at the end of the string. For further information read the https://docs.python.org/2/library/re.html. 



