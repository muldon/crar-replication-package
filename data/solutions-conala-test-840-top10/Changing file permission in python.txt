Query: Changing file permission in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51878322)
 Simply include permissions integer in octal (works for both python 2 and python3): 

  os.chmod(path, 0o444)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16249475)
  os.chmod(path, 0444)   is  the Python command for changing file permissions in Python 2.x. For a combined Python 2 and Python 3 solution, change  0444  to  0o444 . 

 You could always use Python to call the chmod command using http://docs.python.org/2/library/subprocess.html. I think this will only work on Linux though. 

  import subprocess

subprocess.call(['chmod', '0444', 'path'])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34741410)
 Script has no permission to write into log file. Changing  chmod  of  tmp/anpr_log  should fix your issue: 

  sudo chmod +rw /tmp/anpr_log
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16249655)
  os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
  

 http://docs.python.org/2/library/stat.html 

 
   The following flags can also be used in the mode argument of
  os.chmod(): 
  
   <code.S_ISUID  Set UID bit. 
  
   <code.S_ISGID  Set-group-ID bit. This bit has several special uses. For
  a directory it indicates that BSD semantics is to be used for that
  directory: files created there inherit their group ID from the
  directory, not from the effective group ID of the creating process,
  and directories created there will also get the S_ISGID bit set. For a
  file that does not have the group execution bit (S_IXGRP) set, the
  set-group-ID bit indicates mandatory file/record locking (see also
  S_ENFMT). 
  
   <code.S_ISVTX  Sticky bit. When this bit is set on a directory it means
  that a file in that directory can be renamed or deleted only by the
  owner of the file, by the owner of the directory, or by a privileged
  process. 
  
   <code.S_IRWXU  Mask for file owner permissions. 
  
   <code.S_IRUSR  Owner has read permission. 
  
   <code.S_IWUSR  Owner has write permission. 
  
   <code.S_IXUSR  Owner has execute permission. 
  
   <code.S_IRWXG  Mask for group permissions. 
  
   <code.S_IRGRP  Group has read permission. 
  
   <code.S_IWGRP  Group has write permission. 
  
   <code.S_IXGRP  Group has execute permission. 
  
   <code.S_IRWXO  Mask for permissions for others (not in group). 
  
   <code.S_IROTH  Others have read permission. 
  
   <code.S_IWOTH  Others have write permission. 
  
   <code.S_IXOTH  Others have execute permission. 
  
   <code.S_ENFMT  System V file locking enforcement. This flag is shared
  with S_ISGID: file/record locking is enforced on files that do not
  have the group execution bit (S_IXGRP) set. 
  
   <code.S_IREAD  Unix V7 synonym for S_IRUSR. 
  
   <code.S_IWRITE  Unix V7 synonym for S_IWUSR. 
  
   <code.S_IEXEC  Unix V7 synonym for S_IXUSR. 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44909974)
 Changing the owner of  ~/.python_history  from  root  to  my_user_account  solved the problem. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4125758)
 It could be your user and/or root have a specific  umask  which creates files with those permissions such as  0027 . 

  % umask
027
% sudo touch /tmp/foo
% ls -l /tmp/foo
-rw-r-----  1 root  wheel  0 Nov  8 08:19 /tmp/foo
% umask 002
% touch /tmp/bar
% ls -al /tmp/bar
-rw-r--r--  1 root  wheel  0 Nov  8 08:23 /tmp/bar
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29681751)
  $ /tmp/myscript.py  creates a file owned by you. 

 and  $ sudo -u other_user /tmp/myscript.py  means  other_user  is going to change the file permission owned by you. 

 same as the following situation: 

  account1$ touch /tmp/test.txt
account1$ chmod 777 /tmp/test.txt
su account2
account2$ chmod 777  /tmp/test.txt 
#chmod: changing permissions of `test.txt': Operation not permitted
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11568440)
 Shell error 126 is an execution error. 

 The permission denied implies that you have a "permission issue" specifically. 

 Go to the file and make sure R/Python is able to access it. 
 

  $sudo chmod 777 /.../plottingfile.R
  

 If the code runs, give it the correct but less accessible permission. 

 If this doesn't work, try changing R to Rscript. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16928146)
 Try changing the port to 8080.  You didn't say which OS, but most UNIX derivatives will only allow  root  to listen on ports below 1,024 or 4,096 depending on the OS and its configuration. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35531319)
 I had a similar problem. I was attempting to have a file written every time a user visits a website. 

 The problem ended up being twofold. 

 1: the permissions were not set correctly 

 2: I attempted to use  
 f = open(r"newfile.txt","w+")  (Wrong)  

 After changing the file to 777 (all users can read/write) 
 chmod 777 /var/www/path/to/file  
and changing the path to an absolute path, my problem was solved  
 f = open(r"/var/www/path/to/file/newfile.txt","w+")  (Right) 



