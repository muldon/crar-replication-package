Query: How to remove all integer values from a list in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3159166)
 To remove all integers, do this: 

  no_integers = [x for x in mylist if not isinstance(x, int)]
  

 However, your example list does not actually contain integers.  It contains only strings, some of which are composed only of digits.  To filter those out, do the following: 

  no_integers = [x for x in mylist if not (x.isdigit() 
                                         or x[0] == '-' and x[1:].isdigit())]
  

  

  is_integer = lambda s: s.isdigit() or (x[0] == '-' and x[1:].isdigit())
no_integers = filter(is_integer, mylist)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3159206)
 None of the items in your list are integers. They are strings which contain only digits. So you can use the  isdigit  string method to filter out these items.   

  items = ['1','introduction','to','molecular','8','the','learning','module','5']

new_items = [item for item in items if not item.isdigit()]

print new_items
  

 Link to documentation: http://docs.python.org/library/stdtypes.html#str.isdigit 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3159442)
  

  def int_filter( someList ):
    for v in someList:
        try:
            int(v)
            continue # Skip these
        except ValueError:
            yield v # Keep these

list( int_filter( items ))
  

   Because  int  is better than trying to write rules or regular expressions to recognize string values that encode an integer.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24860848)
 Use regular expression to replace digit characters, e.g. 

  import re
re.sub(r'\d+', '', input_str)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22803614)
 I prefer this method: 

  >>> import re
>>> re.sub(r"\D", "", "123asdf")
'123'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3159699)
 You can also use lambdas (and, obviously, recursion), to achieve that (Python 3 needed): 

   isNumber = lambda s: False if ( not( s[0].isdigit() ) and s[0]!='+' and s[0]!='-' ) else isNumberBody( s[ 1:] )

 isNumberBody = lambda s: True if len( s ) == 0 else ( False if ( not( s[0].isdigit() ) and s[0]!='.' ) else isNumberBody( s[ 1:] ) )

 removeNumbers = lambda s: [] if len( s ) == 0 else ( ( [s[0]] + removeNumbers(s[1:]) ) if ( not( isInteger( s[0] ) ) ) else [] + removeNumbers( s[ 1:] ) )

 l = removeNumbers(["hello", "-1", "2", "world", "+23.45"])
 print( l )
  

 Result (displayed from 'l') will be:  ['hello', 'world']  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22803504)
  

  ''.join(x for x in your_string if x.isdecimal())
  

 This takes those characters which are digits and adds them to a string. 

 Examples 

  >>> your_string = 'asd8asdf798fad'
>>> print ''.join(x for x in your_string if x.isdecimal())
8798

>>> '1'.isdecimal()
True

>>> 'a'.isdecimal()
False
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3159848)
 . I think it can help keep code readable and conceptually simple if used in a judicious way: 

  x = ['1','introduction','to','molecular','8','the','learning','module','5'] 
x = filter(lambda i: not str.isdigit(i), x)
  

  

  from itertools impt ifilterfalse
x = ifilterfalse(str.isdigit, x)
  

 Note the second returns an iterat. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47183687)
 First, group keys that have the same value in a second dictionary. Then, use a dictionary comprehension to get the minimum key for all values that have duplicate keys. 

  >>> import collections
>>> my_data = {5:1,2:2,3:2,4:2,1:1}
>>> d = collections.defaultdict(list)
>>> for k, v in my_data.items():
...    d[v].append(k)
>>> {min(keys): value for value, keys in d.items() if len(keys) > 1}
{1: 1, 2: 2}
  

 (Not sure about the  if len(key) > 1 . If that's not what you meant with "among the duplicated values", then just remove that part.) 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/17616341)
 you  a  object is a float, not a list 

  >>> a=[1,2,3,0,4]
>>> a=[x for x in a if x!=0]
>>> a
[1, 2, 3, 4]
  



