Query: Limiting floats to two decimal points
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46037257)
  orig_float = 232569 / 16000.0
  

 
   14.5355625 
 

  short_float = float("{:.2f}".format(orig_float)) 
  

 
   14.54 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53881062)
  from decimal import Decimal


def round_float(v, ndigits=2, rt_str=False):
    d = Decimal(v)
    v_str = ("{0:.%sf}" % ndigits).format(round(d, ndigits))
    if rt_str:
        return v_str
    return Decimal(v_str)
  

 Results: 

  Python 3.6.1 (default, Dec 11 2018, 17:41:10)
>>> round_float(3.1415926)
Decimal('3.14')
>>> round_float(3.1445926)
Decimal('3.14')
>>> round_float(3.1455926)
Decimal('3.15')
>>> round_float(3.1455926, rt_str=True)
'3.15'
>>> str(round_float(3.1455926))
'3.15'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49318930)
 In Python 2.7: 

  a = 13.949999999999999
output = float("%0.2f"%a)
print output
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18438167)
 Try the code below: 

  >>> a = 0.99334
>>> a = int((a * 100) + 0.5) / 100.0 # Adding 0.5 rounds it up
>>> print a
0.99
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54547936)
 You can use  format  operator for rounding the value up to 2 decimal places in python: 

  print(format(14.4499923, '.2f')) // output is 14.45
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/455658)
 You can modify the output format: 

  >>> a = 13.95
>>> a
13.949999999999999
>>> print "%.2f" % a
13.95
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/455634)
 You are running into the old problem with floating point numbers that all numbers cannot be represented. The command line is just showing you the full floating point form from memory. 

 In floating point your rounded version is the same number. Since computers are binary, they store floating point numbers as an integer and then divide it by a power of two so 13.95 will be represented in a similar fashion to 125650429603636838/(2**53). 

 Double precision numbers have 53 bits (16 digits) of precision and regular floats have 24 bits (8 digits) of precision. The http://docs.python.org/tutorial/floatingpoint.html to store the values. 

 For example, 

    >>> 125650429603636838/(2**53)
  13.949999999999999

  >>> 234042163/(2**24)
  13.949999988079071

  >>> a=13.946
  >>> print(a)
  13.946
  >>> print("%.2f" % a)
  13.95
  >>> round(a,2)
  13.949999999999999
  >>> print("%.2f" % round(a,2))
  13.95
  >>> print("{0:.2f}".format(a))
  13.95
  >>> print("{0:.2f}".format(round(a,2)))
  13.95
  >>> print("{0:.15f}".format(round(a,2)))
  13.949999999999999
  

 If you are after only two decimal places as in currency then you have a couple of better choices: 1) Use integers and store values in cents, not dollars and then divide by 100 to convert to dollars. 2) Or use a fixed point number like http://docs.python.org/library/decimal.html. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45502081)
 Use 

  print"{:.2f}".format(a)
  

  

  print"{0:.2f}".format(a)
  

 Because the latter may lead to output errors when trying to output multiple variables (see comments). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20512207)
 With Python < 3 (e.g. 2.6 or 2.7), there are two ways to do so. 

  # Option one 
older_method_string = "%.9f" % numvar

# Option two (note ':' before the '.9f')
newer_method_string = "{:.9f}".format(numvar)
  

 But note that for Python versions above 3 (e.g. 3.2 or 3.3), option two is http://docs.python.org/2/library/stdtypes.html#str.format. 

 For more information on option two, I suggest this link on http://docs.python.org/2/library/string.html#formatstrings. 

 And for more information on option one, http://docs.python.org/2/library/stdtypes.html#string-formatting. 

 Reference:  https://stackoverflow.com/questions/15263597/convert-floating-point-number-to-certain-precision-then-copy-to-string  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48268223)
 This is the way python shows floats 

  price = 0.00000026
print(price)
  

 outputs: 2.6e-07
you can print it this way if you want to see it normal: 

  print('{0:.8f}'.format(price))
  

 ouputs: 0.00000026 



