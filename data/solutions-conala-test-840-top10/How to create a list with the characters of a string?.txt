Query: How to create a list with the characters of a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5501658)
  list('5+6')
  

 returns 

  ['5', '+', '6']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/870559)
  s = 'Agh#$%#%2341- -!zdrkfd'  
print ''.join(c for c in s if c.islower())
  

 String objects are iterable; there is no need to "explode" the string into a list. You can put whatever condition you want in the list comprehension, and it will filter characters accordingly. 

 You could also implement this using a regex, but this will only hide the loop. The regular expressions library will still have to loop through the characters of the string in order to filter them. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2257449)
    

  ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
  

 or even shorter starting with Python 3.6 using https://docs.python.org/3/library/random.html#random.choices: 

  ''.join(random.choices(string.ascii_uppercase + string.digits, k=N))
  

  A cryptographically more secure version; see https://stackoverflow.com/a/23728630/2213647:  

  ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
  

  In details, with a clean function for further reuse:  

  >>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, "6793YUIO")
'Y3U'
  

    

 We import  string , a module that contains sequences of common ASCII characters, and  random , a module that deals with random generation. 

  string.ascii_uppercase + string.digits  just concatenates the list of characters representing uppercase ASCII chars and digits: 

  >>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  

 Then we use a list comprehension to create a list of 'n' elements: 

  >>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']
  

 In the example above, we use  [  to create the list, but we don't in the  id_generator  function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855). 

 Instead of asking to create 'n' times the string  elem , we will ask Python to create 'n' times a random character, picked from a sequence of characters: 

  >>> random.choice("abcde")
'a'
>>> random.choice("abcde")
'd'
>>> random.choice("abcde")
'b'
  

 Therefore  random.choice(chars) for _ in range(size)  really is creating a sequence of  size  characters. Characters that are randomly picked from  chars : 

  >>> [random.choice('abcde') for _ in range(3)]
['a', 'b', 'b']
>>> [random.choice('abcde') for _ in range(3)]
['e', 'b', 'e']
>>> [random.choice('abcde') for _ in range(3)]
['d', 'a', 'c']
  

 Then we just join them with an empty string so the sequence becomes a string: 

  >>> ''.join(['a', 'b', 'b'])
'abb'
>>> [random.choice('abcde') for _ in range(3)]
['d', 'c', 'b']
>>> ''.join(random.choice('abcde') for _ in range(3))
'dac'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2612587)
 You can convert a string to a list of characters by using  list , and to go the other way use  join : 

  >>> s = 'Hello, world!'
>>> l = list(s)
>>> l[7] = 'f'
>>> ''.join(l)
'Hello, forld!'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28933106)
 Just  list(s)  will return the list of characters in string  s . 

  >>> s = "Hello world"
>>> list(s)
['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
>>>
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10944488)
 Python has regex as well: 

  import re
if re.match('^[\w-]+$', s):
    ...
  

 Or you could create a list of  allowed  characters: 

  from string import ascii_letters
if all(c in ascii_letters+'-' for c in s):
    ...
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25954716)
 As you correctly state, strings are immutable and can't be modified in-place - but we can create a new string with the swapped characters. Here's one idea: let's convert the string into a list, swap the elements in the list and then convert the list back into a string: 

  def swap(s, i, j):
    lst = list(s)
    lst[i], lst[j] = lst[j], lst[i]
    return ''.join(lst)
  

 Another possible implementation would be to manipulate the string using slices and indexes: 

  def swap(s, i, j):
    return ''.join((s[:i], s[j], s[i+1:j], s[i], s[j+1:]))
  

 Either way, it works as expected: 

  swap('abcde', 1, 3)
=> 'adcbe'
  



