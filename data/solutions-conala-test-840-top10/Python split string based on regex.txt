Query: Python split string based on regex
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13209300)
 You don't need split, but rather findall: 

   re.findall(r'[A-Z]+[^A-Z]*', str)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13209453)
  

  l = re.compile("(?<!^)\s+(?=[A-Z])(?!.\s)").split(s)
  

 Check  http://ideone.com/qoaTqr . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33429419)
 Just do splitting accding to the sub-string    

  re.split(r'  ', s)
  

  

  re.split(r'\s+\s+', s)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33429425)
 You can do a simple  split  without any use of  re . 

  input = raw_input()
ans = input.split("")
  

  

  ans = input.split("  ")
  

 If you want to use  findall  you can use 

  x="a  b*~c  27*y  5*~b"
print re.findall(r"(?:^|(?<=\b\b))\s*(.*?)\s*(?=\b\b|$)",x)
  

 F both  *  and    use 

  x="a  b*~c  27*y  5*~b"
print [i.split("*") f i in x.split("  ")]
  

 Output: [['a'], ['b', '~c'], ['27', 'y'], ['5', '~b']]  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10260372)
  >>> from string import punctuation
>>> text = 'i like: a, b, 007 and c!!'
>>> re.findall('\w+|[{0}]+'.format(punctuation),text)
['i', 'like', ':', 'a', ',', 'b', ',', '007', 'and', 'c', '!!']
  

 This also works but finds any non-whitespace character if it doesn't find alphanumeric characters 

  >>> re.findall('\w+|\S+',text)
['i', 'like', ':', 'a', ',', 'b', ',', '007', 'and', 'c', '!!']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23559928)
 may be u can try using re.split('your patter, string) , which should give you proper list based on your regex. 

  import re
d = re.split('\s+',s,3)
print d
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51395834)
  re.split  is meant for cases where you have a certain delimiter pattern. Use  re.findall  with a lookahead pattern instead: 

  import re
data="2018-03-14 06:08:18, he went on \n2018-03-15 06:08:18, lets play"
d = r'\d{4}-\d?\d-\d?\d (?:2[0-3]|[01]?[0-9]):[0-5]?[0-9]:[0-5]?[0-9]'
print(re.findall(r'{0}.*?(?=\s*{0}|$)'.format(d), data, re.DOTALL))
  

 This outputs: 

  ['2018-03-14 06:08:18, he went on', '2018-03-15 06:08:18, lets play']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34082697)
 Use regex and lookbehind/lookahead assertion 

  >>> re.split(r'(?<=\D\D),\s*|,\s*(?=\D\D)', s)
['2,4-D', 'Benzo(a)pyrene', 'Dioxin', 'PCP', '2,4,5-TP']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42420693)
 You can use  regex  module here. 

  import regex
s = 'This is a test'
print regex.split('(?<= )', s,flags=regex.VERSION1)
  

 Output: 

  ['This ', 'is ', 'a ', 'test']  

 or 

  import re
s = 'This is a test'
print [i for i in re.split(r'(\w+\s+)', s,) if i]
  

 Note:  0 width assertions are not supported in re module for split  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51396086)
 You want to split with at least 1 whitespace followed with a date like pattern, thus, you may use 

  re.split(r'\s+(?=\d{2}(?:\d{2})?-\d{1,2}-\d{1,2}\b)', s)
  

 See the https://regex101.com/r/k339Yt/2 

  Details  

 
  \s+  - 1+ whitespace chars 
  (?=\d{2}(?:\d{2})?-\d{1,2}-\d{1,2}\b)  - a  positive lookahead  that makes sure,  that immediately to the left of the current location, there are

 
  \d{2}(?:\d{2})?  - 2 or 4 digits 
  -  - a hyphen 
  \d{1,2}  - 1 or 2 digits 
  -\d{1,2}  - again a hyphen and 1 or 2 digits 
  \b   -  a word boundary (if not necessary, remove it, or replace with  (?!\d)  in case you may have dates glued to letters or other text) 
  
 

 https://ideone.com/9ybxff: 

  import re
rex = r"\s+(?=\d{2}(?:\d{2})?-\d{1,2}-\d{1,2}\b)"
s = "2018-03-14 06:08:18, he went on 2018-03-15 06:08:18, lets play"
print(re.split(rex, s))
# => ['2018-03-14 06:08:18, he went on', '2018-03-15 06:08:18, lets play']
  

  NOTE  If there can be no whitespace before the date, in Python 3.7 and newer you may use  r"\s*(?=\d{2}(?:\d{2})?-\d{1,2}-\d{1,2}\b)"  (note the  *  quantifier with  \s*  that will allow zero-length matches). For older versions, you will need to use a solution https://stackoverflow.com/a/51395834/3832970 or install https://pypi.org/project/regex/ and use  r"(?V1)\s*(?=\d{2}(?:\d{2})?-\d{1,2}-\d{1,2}\b)"  with  regex.split . 



