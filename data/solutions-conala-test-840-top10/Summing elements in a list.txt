Query: Summing elements in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11344864)
 Python iterable can be summed like so - http://docs.python.org/library/functions.html#sum . This sums all elements from the list except the first element. 

  >>> atuple = (1,2,3,4,5)
>>> sum(atuple)
15
>>> alist = [1,2,3,4,5]
>>> sum(alist)
15
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11344878)
 You can use  sum  to sum the elements of a list, however if your list is coming from  raw_input , you probably want to convert the items to  int  or  float  first: 

  l = raw_input().split(' ')
sum(map(int, l))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52267290)
 Will this work? 

  L = [[0.5, 2], [0.5, 5], [2, 3], [2, 6], [2, 0.6], [7, 1]]
nums = []
d = {}
for lst in L:
    if lst[0] not in d:
        d[lst[0]] = []
        nums.append(lst[0])
    d[lst[0]].append(lst[1])

for key in nums:
    print [key, sum(d[key])]
  

 Output: 

  [0.5, 7]
[2, 9.6]
[7, 1]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52267110)
 Using Pandas, you can retain the original 'order' of the data: 

  pairs = [[0.5, 2], [0.5, 5], [2, 3], [2, 6], [2, 0.6], [7, 1]]
df = pd.DataFrame(pairs)
>>> [tup[0] for tup in zip(df.groupby(0, sort=False, as_index=False).sum().values.tolist())]
[[0.5, 7.0], [2.0, 9.6], [7.0, 1.0]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47620298)
 Using  zip(*([iter(onetonine)]*3))   which splits the list into 3 sub-lists 

  onetonine = [1,2,3,4,5,6,7,8,9]
[sum(i) for i in zip(*([iter(onetonine)]*3))]
#[6, 15, 24]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40823235)
 Zip the lists, then sum only values where the first element is  1 : 

  s = sum(b for a, b in zip(list_1, list_2) if a)
  

 Another zip approach would be an element-wise multiplication between the lists (thus eliminating elements whose parallel is  0 ): 

  s = sum(a * b for a, b in zip(list_1, list_2))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47620295)
 The following list comprehension of the sums of the appropriate slices will work: 

  >>> [sum(onetonine[i:i+3]) for i in range(0, len(onetonine), 3)]
[6, 15, 24]
  

 Note: this will not discard any rest if the length of the original list is not divisible by the chunk length but just add the sum of the last (shorter) chunk. 



