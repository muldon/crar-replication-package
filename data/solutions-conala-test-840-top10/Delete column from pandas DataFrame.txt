Query: Delete column from pandas DataFrame
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36958937)
 from version 0.16.1 you can do  

  df.drop(['column_name'], axis = 1, inplace = True, errors = 'ignore')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53100902)
 you can use df.loc accessor 

  df=df.loc[:,['bob']]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44606544)
 you can do it this way: 

  df = df[~df.select_dtypes(['object']).eq('d').any(1)]
  

  

  In [23]: df
Out[23]:
   A  B  C  D
2  1  3  4  0
4  3  2  1  7
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18145399)
 The best way to do this in pandas is to use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html: 

  df = df.drop('column_name', 1)
  

 where  1  is the  axis  number ( 0  for rows and  1  for columns.) 

 To delete the column without having to reassign  df  you can do: 

  df.drop('column_name', axis=1, inplace=True)
  

 Finally, to drop by column  number  instead of by column  label , try this to delete, e.g. the 1st, 2nd and 4th columns: 

  df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20230859)
 use  drop  method: 

  df.drop(column_name, axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20301769)
 You can delete column on  i  index like this: 

  df.drop(df.columns[i], axis=1)
  

 It could work strange, if you have duplicate names in columns, so to do this you can rename column you want to delete column by new name. Or you can reassign DataFrame like this: 

  df = df.iloc[:, [j for j, c in enumerate(df.columns) if j != i]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45884190)
 This works, but it is not random: 

  for currentID in idsToDelete:
    df = df.drop(df[df.id == currentID].index[0])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50717986)
 Using  pd.DataFrame.apply  with  set  to create a Boolean mask: 

  res = df[~(df.apply(set, axis=1) <= set('NnVv'))]

print(res)

      A    B  C     D
0   BUY  150  Q  2018
1  SELL   63  Q  2018
4  SELL   53  Q  2018
  

 Note  <=  is syntactic sugar for https://docs.python.org/3.6/library/stdtypes.html?highlight=issubset#frozenset.issubset. 

 . Use @jezrael's  pd.DataFrame.all  https://stackoverflow.com/a/50717966/9209546 for a large number of rows. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53821216)
        

  np.random.seed(0)
df = pd.DataFrame(np.random.choice(10, (3, 3)), columns=list('ABC'))
df

   A  B  C
0  5  0  3
1  3  7  9
2  3  5  2
  

 

  np.column_stack  /  stack(axis=1)  /  hstack </h3>

  pd.DataFrame(pd.np.column_stack([df, np.zeros((df.shape[0], 3), dtype=int)]))

   0  1  2  3  4  5
0  5  0  3  0  0  0
1  3  7  9  0  0  0
2  3  5  2  0  0  0
  

 Useful (and performant), but does not retain the column names from  df . If you really want to slice out the last column, use  iloc  and slice it out: 

  pd.DataFrame(pd.np.column_stack([
    df.iloc[:, :-1], np.zeros((df.shape[0], 3), dtype=int)]))

   0  1  2  3  4
0  5  0  0  0  0
1  3  7  0  0  0
2  3  5  0  0  0
  

 

  pd.concat </h3>

 You will need to convert the array to a DataFrame. 

  df2 = pd.DataFrame(np.zeros((df.shape[0], 3), dtype=int), columns=list('DEF'))
pd.concat([df, df2], axis=1)

   A  B  C  D  E  F
0  5  0  3  0  0  0
1  3  7  9  0  0  0
2  3  5  2  0  0  0
  

 

  DataFrame.assign </h3>

 If it's only adding constant values, you can use  assign : 

  df.assign(**dict.fromkeys(list('DEF'), 0))

   A  B  C  D  E  F
0  5  0  3  0  0  0
1  3  7  9  0  0  0
2  3  5  2  0  0  0
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44606616)
 Another way you could do it to use  astype ,  ne  and  all : 

  df[df.astype(str).ne('d').all(axis=1)]
  

 Output: 

     A  B  C  D
2  1  3  4  0
4  3  2  1  7
  

 Another way: 

  df.where(df.values != 'd').dropna()
  

 Output: 

     A  B  C  D
2  1  3  4  0
4  3  2  1  7
  



