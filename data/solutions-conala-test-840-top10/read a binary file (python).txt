Query: read a binary file (python)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39683695)
 Python 3, read all of the file at once: 

  with open("filename", "rb") as binary_file:
    # Read the whole file at once
    data = binary_file.read()
    print(data)
  

 You can iterate whatever you want using  data  variable. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31632193)
 Binary mode means that the line endings aren’t converted and that  bytes  objects are read (in Python 3); the file will still be read by “line” when using  for line in f . I’d use  read  to read in consistent chunks instead, though. 

  with open(image_filename, 'rb') as f:
    # iter(callable, sentinel) – yield f.read(4096) until b'' appears
    for chunk in iter(lambda: f.read(4096), b''):
        …
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32282458)
 In Python 3, if you want to read binary data from  stdin , you need to use its  buffer  attribute: 

  import sys

data = sys.stdin.buffer.read()
  

 On Python 2,  sys.stdin.read()  already returns a byte string; there is no need to use  buffer . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25465950)
  ""  will signify the end of the file    

  with open(filename, 'rb') as f:
    for ch in iter(lambda: f.read(1),""): # keep calling f.read(1) until end of the data
        print ch
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28776057)
 Python does not support binary128s natively, hence you won't find support for them in the standard library. You will need to use NumPy (specifically http://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html) to convert from bytes to a binary128. 

  f128 = numpy.frombuffer(file.read(16), dtype=numpy.float128)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43642998)
 Read the file in binary mode: 

  def read_stuff(fname='test_file.binary'):
    with open(fname, mode='rb') as f:
        while True:
            data = f.read(16)
            if len(data) < 16:
                # end of file
                return
            yield struct.unpack("<idi", data)
  

 This is a generator.  To consume it: 

  for l1, value, l2 in read_stuff():
    ...
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/632673)
 First, have you tried http://www.python.org/doc/1.5.2p2/lib/module-pickle.html? 
No one has shown any Python code yet...  Here is some code for reading in binary in python: 

  import Numeric as N
import array
filename = "tmp.bin"
file = open(filename, mode='rb')
binvalues = array.array('f')
binvalues.read(file, num_lon * num_lat) 
data = N.array(binvalues, typecode=N.Float)   

file.close()
  

 Where the f here specified single-precision, 4-byte floating, numbers.  Find whatever size your data is per entry and use that.  

 For non binary data you could do something simple like this: 

     tmp=[]
   for line in open("data.dat"):
                tmp.append(float(line))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8710995)
 You could use http://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html, which can read data from both text and binary files. You would first construct a data type, which represents your file format, using http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html, and then read this type from file using  numpy.fromfile . 



