Query: Creating a dictionary from a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52860885)
 Those who came here with following problem : 

 convert string  a = '{"a":1,"b":2}'  to dictionary object. 

 you can simply use  a = eval(a)  to get  a  as object of dictionary from a string object. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31421074)
 Use https://docs.python.org/2/library/stdtypes.html#str.split: 

  In [1]: lst = ['111,"A","yes"','112,"B","no"','113,C,"maybe"']

In [2]: dict((int(s[0]), s[1].split(',')) for s in (grp.split(',', 1)
                                          for grp in lst))
Out[2]: {111: ['"A"', '"yes"'],
         112: ['"B"', '"no"'],
         113: ['C', '"maybe"']}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4628011)
  >>> s = 'A - 13, B - 14, C - 29, M - 99'
>>> dict(e.split(' - ') for e in s.split(','))
{'A': '13', 'C': '29', 'B': '14', 'M': '99'}
  

 EDIT: The next solution is for when you want the values as integers, which I think is what you want. 

  >>> dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))
{'A': 13, ' B': 14, ' M': 99, ' C': 29}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4628281)
 Here's an answer that doesn't use generator expressions and uses  replace  rather than  strip . 

  >>> s = 'A - 13, B - 14, C - 29, M - 99'
>>> d = {}
>>> for pair in s.replace(' ','').split(','):
...     k, v = pair.split('-')
...     d[k] = int(v)
...
>>> d
{'A': 13, 'C': 29, 'B': 14, 'M': 99}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4628007)
 To solve your example you can do this: 

  mydict = dict((k.strip(), v.strip()) for k,v in 
              (item.split('-') for item in s.split(',')))
  

 It does 3 things: 

 
 split the string into  "<key> - <value>"  parts:  s.split(',')  
 split each part into  "<key> ", " <value>"  pairs:  item.split('-')  
 remove the whitespace from each pair:  (k.strip(), v.strip())  
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4764592)
  

  >>> import re
>>> dict(re.findall(r'(\S+)=(".*?"|\S+)', s))
{'key3': '"SrtingWithoutSpace"', 'key2': '"string with space"', 'key1': '1234'}
  

 If you also want to strip the quotes: 

  >>> {k:v.strip('"') for k,v in re.findall(r'(\S+)=(".*?"|\S+)', s)}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31421096)
  

  strings = ['111,"A","yes"','112,"B","no"','113,C,"maybe"']

# now get rid of the superfluous double quotes with str.replace
# and str.split on the commas to make a list of lists
strings = [s.replace('"', '').split(',') for s in strings]

>>> print strings
[['111', 'A', 'yes'], ['112', 'B', 'no'], ['113', 'C', 'maybe']]

# make the dict with a dict comprehension
d = {int(s[0]):(s[1], s[2]) for s in strings}

>>> print d
{111: ('A', 'yes'), 112: ('B', 'no'), 113: ('C', 'maybe')}
  

  Relevant links:  

 https://docs.python.org/2/library/string.html#string.split 

 https://docs.python.org/2/library/string.html#string.replace 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7016735)
  

  x = x[2:]
  

 does is creating the string slice  x[2:]  and rebinding the name  x  to point to this new string.  It does not change the string  x  pointed to before.  (Strings are immutable in Python, they can't be changed.) 

 To achieve what you actually want, you need to make the dictionary entry point to the new string object created by the slicing: 

  for k, v in my_dict.iteritems():
    my_dict[k] = v[2:] 
  



