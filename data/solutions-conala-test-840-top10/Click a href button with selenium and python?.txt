Query: Click a href button with selenium and python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19601155)
 Using selenium you could use the following code: 

  driver.find_element_by_link_text("Send InMail").click()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35015882)
 The above answer  driver.findElement(By.linkText("Send InMail")).click();  is in Java. In python, use  find_element_by_link_text : 

  driver.find_element_by_link_text('Send InMail').click()
  

 or something like this is sometimes helpful 

  driver.find_element_by_partial_link_text('Send').click()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44508215)
 For each element  l  in  csvList , get the parent element by xpath and then get that element's  href : 

  csvList = browser.find_elements_by_class_name("csv")
for l in csvlist:
       if 'error' not in l.text and 'after' not in l.text:
           currentLink = l.find_element_by_xpath("..")
           href = currentLink.get_attribute("href")
  

  Note : If you do a .click() in this loop and the link takes you to a new page, you will get a StaleElementException for each click after the first. In that case, extract each href and save to a collection. Then navigate to each href (URL) in the collection. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33887572)
  

  from selenium.webdriver.common.by impt By
...
driver.find_element(By.PARTIAL_LINK_TEXT, 'text').click()
  

  

  from selenium impt webdriver
...
driver.find_element_by_partial_link_text("text").click()
  

  EDIT:  F partial text search on the href itself try: 

  from selenium impt webdriver
...
driver.find_element_by_xpath("//a[contains(@href,'text')]").click()
  

 Sources: 

 http://selenium-python.readthedocs.g/faq.html?highlight=click#how-to-auto-save-files-using-custom-firefox-profile 

 http://selenium-python.readthedocs.g/locating-elements.html#locating-elements 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27867767)
 Use  explicit wait  and relative xpath  

 like  //a[@href='/login/clear']/i  

  from xatu.tests.base import login
from xatu.tests.bagon import BagonBaseTestCase  

class BasicTestCase(BagonBaseTestCase):

    @login
    def test_logout(self):
        self._wait_until_id_presents("quotes-form")
        WebDriverWait(self, 10).until(
        EC.presence_of_element_located((By.XPATH, "//a[@href='/login/clear']/i")))      
        self.browser.find_element_by_xpath("//a[@href='/login/clear']/i").click()
        self.browser.implicitly_wait(2)
        self._title_check("Login")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25989282)
 You can also do it by xpath: 

  Browser.find_element_by_xpath("//a[@href='you_link']").click()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42783015)
 This might not be the perfect solution, but it will simulate the job.
You can use actionchains to open the right click menu. 

  from selenium import webdriver
from selenium.webdriver import ActionChains
driver = webdriver.Chrome()
driver.get(link)
elem = driver.find_element_by_css_selector('a[target="_blank"]')
actionChain = ActionChains(driver)
actionChain.context_click(elem).perform()
  

 I have used "target" attribute to select the tag.
But now the problem is the access to that menu is out of the scope of selenium. So, here I used pyautogui to simulate 4 down arrow keys and the enter button press.(4 down arrow keys as "save link" option is 4th in every anchor tag) 

  import pyautogui
pyautogui.typewrite(['down','down','down','down','enter'])
  

 Hope this helps. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27868177)
 You need an explicit wait.  http://selenium-python.readthedocs.org/en/latest/waits.html#explicit-waits.  Example code: 

  element = WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,'//a[@href="/login/clear"]')))
  

 And then just click the element. 

  element.click()
  

 Note I added my answer b/c -- in my tests at least -- you don't need to worry about the  italics  tag.  That's for the text, not the button -- and you're not clicking the text.  So find  By.XPATH  and select a unique attribute (i.e., the  href  in this case and  very likley  not the  class  attr), and then click your element. 

 EDIT: 

 please try this line: 

  element = WebDriverWait(self.browser, 30).until(EC.visibility_of_element_located((By.XPATH,'//a[@class="btn" and @href="/login/clear"]')))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40476675)
 You should try using http://selenium-python.readthedocs.io/waits.html#explicit-waits to wait until  Documents  link  visible and enable to click as below :- 

  from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

wait = WebDriverWait(driver, 10)

download_menu = driver.find_element_by_id("DownloadMenu")

action = ActionChains(driver)
#hover on download_menu first
action.move_to_element(download_menu).perform()

#now find Documents link and click
documents = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Documents")))
documents.click()
  



