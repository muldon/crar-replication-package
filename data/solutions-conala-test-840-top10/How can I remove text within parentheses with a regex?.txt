Query: How can I remove text within parentheses with a regex?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/640054)
 I would use: 

  \([^)]*\)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37528524)
 If you are sure that the parentheses are initially balanced, just use the  greedy  version: 

  re.sub(r'\(.*\)', '', s2)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37528473)
  re  matches are eager so they try to match as much text as possible, for the simple test case you mention just let the regex run: 

  >>> re.sub(r'\(.*\)', '', 'stuff(remove(me))')
'stuff'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41650135)
 This will remove spaces in front and behind the words inside the parenthesis. 

  import re
my_string = 'abcd (   ef dfg dfg  ) gh'
print re.sub('\(\s*(.*?)\s*\)', lambda x: ''.join(x.group().split()), my_string, re.DOTALL)
  

 Output: 

  abcd (efdfgdfg) gh
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/640250)
 If a path may contain parentheses then the  r'\(.\)'  regex is not enough: 

  import os, re

def remove_parenthesized_chunks(path, safeext=True, safedir=True):
    dirpath, basename = os.path.split(path) if safedir else ('', path)
    name, ext = os.path.splitext(basename) if safeext else (basename, '')
    name = re.sub(r'\(.\)', '', name)
    return os.path.join(dirpath, name+ext)
  

 By default the function preserves parenthesized chunks in directory and extention parts of the path. 

 Example: 

  >>> f = remove_parenthesized_chunks
>>> f("Example_file_(extra_descriptor).ext")
'Example_file_.ext'
>>> path = r"c:\dir_(important)\example(extra).ext(untouchable)"
>>> f(path)
'c:\\dir_(important)\\example.ext(untouchable)'
>>> f(path, safeext=False)
'c:\\dir_(important)\\example.ext'
>>> f(path, safedir=False)
'c:\\dir_\\example.ext(untouchable)'
>>> f(path, False, False)
'c:\\dir_\\example.ext'
>>> f(r"c:\(extra)\example(extra).ext", safedir=False)
'c:\\\\example.ext'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41650186)
 Here is one general way that will work for nested parenthesis as well: 

  In [27]: my_string = 'abcd (  ()e(e w  )f ) gh'

In [28]: re.sub(r' \(\s+|\s+\)', lambda x: x.group().strip(), my_string)
Out[28]: 'abcd(()e(e w)f) gh'
  

 If you want to remove spaces even between words you can play around with  http://www.regular-expressions.info/lookaround.html ;-): 

  In [40]: my_string = 'abcd (  ()e(e w  )f ) gh'

In [41]: re.sub(r'\s+(?=[^[\(]*\))|((?<=\()\s+)', '', my_string)
Out[41]: 'abcd (()e(ew)f) gh'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9351543)
  

  return re.sub('\(.*?\)','', myResultStats.text)
  

 Parentheses denote capture groups, so you have to escape them. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49917176)
 You may check if a string contains  [ ,  ] ,  (<no_parentheses_here>)  or  [no_brackets_here]  substrings and remove them while there is a match. 

  import re                                    # Use standard re
s='{[a] abc (b(c)d)}'
rx = re.compile(r'\([^()]*\)|\[[^][]*]|[{}]')
while rx.search(s):                          # While regex matches the string
    s = rx.sub('', s)                        # Remove the matches
print(s.strip())                             # Strip whitespace and show the result
# => abc
  

 See the https://ideone.com/xL1oC4 

 It will also work with paired nested  (...)  and  [...] , too. 

  Pattern details  

 
  \([^()]*\)  -  ( , then any 0+ chars other than  (  and  ) , and then  )  
  |  - or 
  \[[^][]*]  -  [ , then any 0+ chars other than  [  and  ] , and then  ]  
  |  - or 
  [{}]  - a character class matching  {  or  } . 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37528585)
 https://regex101.com/r/kQ2jS3/1 

  '(\(.*\))'
  

 This captures the  furthest  parentheses, and everything in between the parentheses. 

 Your old regex captures the first parentheses, and everything between to the  next  parentheses. 



