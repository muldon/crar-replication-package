Query: Using Python's datetime module, can I get the year that UTC-11 is currently in?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14043246)
 The easiest would be to skip the timezone processing entirely, and just use  timedelta(hours=11)  to subtract from the  datetime  and look at the  year  attribute. 

  >>> (datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year
2012
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14043267)
 Actually, timezones are a bit trickier than that... You may have timezones with the same offset but with different settings when it comes to power saving dates and such (or even nastier behaviours: https://stackoverflow.com/a/6841479/289011) 

 I think for this specific case, you may be better off with: 

  >>> "%s" % (datetime.datetime.utcnow() - datetime.timedelta(hours=11))
'2012-12-26 00:25:30.029864'
  

 Just for the year: 

  >>> "%s" % (datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year
'2012'
  

 Edit:
Yeah, and it's good idea using  datetime.utcnow() , not  datetime.now() ... (my bad) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39430270)
 Use  datetime.astimezone  to get the same datetime in UTC (or any other timezone). 

  dt = datetime.datetime(year, month, day, hour, minute, tzinfo=pytz.timezone('US/Pacific'))
dt_utc = dt.astimezone(pytz.timezone('UTC'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12015245)
 You can use the http://labix.org/python-dateutil/ module for this. To get the local timezone right now: 

  >>> import dateutil.tz
>>> import datetime
>>> localtz = dateutil.tz.tzlocal()
>>> localtz.tzname(datetime.datetime.now(localtz))
'EDT'
  

 I am currently in Eastern Daylight Time. You can see it change back to EST in the future, after daylight savings switches back: 

  >>> localtz.tzname(datetime.datetime.now(localtz) +
                   datetime.timedelta(weeks=20))
'EST'
  

 If you want the offset from UTC, you can use the utcoffset function. It returns a timedelta: 

  >>> localtz.utcoffset(datetime.datetime.now(localtz))
datetime.timedelta(-1, 72000)
  

 In this case, since I'm UTC-4, it returns -1 days + 20 hours. You can convert it to hours if that's what you need: 

  >>> localoffset = localtz.utcoffset(datetime.datetime.now(localtz))
>>> localoffset.total_seconds() / 3600
-4.0
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5537942)
 Because of DST (Daylight Saving Time), the result depends on the time of the year: 

  import datetime, pytz

datetime.datetime.now(pytz.timezone('Asia/Jerusalem')).strftime('%z')

# returns '+0300' (because 'now' they have DST)


pytz.timezone('Asia/Jerusalem').localize(datetime.datetime(2011,1,1)).strftime('%z')

# returns '+0200' (because in January they didn't have DST)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11718969)
 The http://pypi.python.org/pypi/iso8601/ module is built with a wonderful parse_date method that can handle timezone info : 

  >>> import iso8601
>>> iso8601.parse_date("2007-01-25T12:00:00Z")
datetime.datetime(2007, 1, 25, 12, 0, tzinfo=<iso8601.iso8601.Utc ...>)

>>> iso8601.parse_date("2011-08-18T10:29:47+03:00")
datetime.datetime(2011, 8, 18, 10, 29, 47, tzinfo=<FixedOffset '+03:00'>)
  

 If you want to convert it in another timezone, use the http://docs.python.org/library/datetime.html?highlight=datetime#datetime.datetime.astimezone method 

 If you need to get the UTC datetime you can use the http://docs.python.org/library/datetime.html?highlight=datetime#datetime.datetime.utctimetuple method. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13346065)
  localize()  attaches the timezone to a naive  datetime.datetime  instance in the  local  timezone. 

 If you have datetime values in a local timezone, localize to that timezone, then use http://docs.python.org/2/library/datetime.html#datetime.datetime.astimezone to cast the value to UTC: 

  >>> localdt = local_tz.localize(datetime.datetime(year, month, day, hour, min))
>>> localdt.astimezone(pytz.UTC)
datetime.datetime(2012, 12, 2, 12, 1, tzinfo=<UTC>)
  

 Note that you don't  need  to do this,  datetime  objects  with a timezone  can be compared; they'll both be normalized to UTC for the test: 

  >>> localdt.astimezone(pytz.UTC) == localdt
True
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7577611)
 The problem is that Daylight Savings time is being applied twice. 

 A trivial example: 

  >>> time_tuple = datetime(2011,3,13,2,1,1).utctimetuple()
time.struct_time(tm_year=2011, tm_mon=3, tm_mday=13, tm_hour=2, tm_min=1, tm_sec=1, tm_wday=6, tm_yday=72, tm_isdst=0)
>>> datetime.fromtimestamp(time.mktime(time_tuple))
datetime.datetime(2011, 3, 13, 3, 1, 1)
  

 I am fairly certain that the fault lies within  time.mktime() .  As it says in its http://docs.python.org/library/time.html#time.mktime: 

 
   This is the inverse function of localtime(). Its
  argument is the struct_time or full 9-tuple (since the dst flag is
  needed; use -1 as the dst flag if it is unknown) which expresses the
  time in local time, not UTC. It returns a floating point number, for
  compatibility with time(). If the input value cannot be represented as
  a valid time, either OverflowError or ValueError will be raised (which
  depends on whether the invalid value is caught by Python or the
  underlying C libraries). The earliest date for which it can generate a
  time is platform-dependent. 
 

 When you pass a time tuple to  time.mktime() , it expects a flag on whether the time is  in daylight savings time  or not.  As you can see above,  utctimetuple()  returns a tuple with that flag marked  0 , as it says it will do in its <a href="http://docs.python.org/library/datetime.html" : 

 
   If datetime instance d is naive, this is the same as d.timetuple()
  except that tm_isdst is forced to 0 regardless of what d.dst()
  returns. DST is never in effect for a UTC time. 
  
   If d is aware, d is normalized to UTC time, by subtracting
  d.utcoffset(), and a time.struct_time for the normalized time is
  returned. tm_isdst is forced to 0. Note that the result’s tm_year
  member may be MINYEAR-1 or MAXYEAR+1, if d.year was MINYEAR or MAXYEAR
  and UTC adjustment spills over a year boundary. 
 

 Since you have told  time.mktime()  that your time is not DST, and its job is to convert all times into local time, and it is currently daylight savings time in your area, it  adds an hour  to make it daylight savings time.  . 

 

 While I don't have the post handy, I came across a method a couple of days ago to convert timezone-aware datetimes into naive ones in your local time.  This might work much better for your application than what you are currently doing (uses the excellent http://pytz.sourceforge.net/ module): 

  import pytz
def convert_to_local_time(dt_aware):
    tz = pytz.timezone('America/Los_Angeles') # Replace this with your time zone string
    dt_my_tz = dt_aware.astimezone(tz)
    dt_naive = dt_my_tz.replace(tzinfo=None)
    return dt_naive
  

 Replace 'America/LosAngeles' with your own timezone string, which you can find somewhere in  pytz.all_timezones . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6847352)
 To quote the PyMongo documentation: 

 
   All datetimes retrieved from the server (no matter what version of the driver you’re using) will be naive and represent UTC. 
 

 i.e.  v.tzinfo is None .  You would have been warned about this if you'd tried to convert them to another timezone: 

  >>> v.astimezone(pytz.timezone("US/Eastern"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: astimezone() cannot be applied to a naive datetime
  

 However, you can get a timezone aware datetime by doing  datetime(v.year, v.month, v.day, v.hour, v.minute, v.second, v.microsecond, pytz.utc) .  In this case, your original code would work: 

  v = datetime(2010, 12, 19, 5, 35, 55, 286000, pytz.utc)
v.tzinfo == pytz.utc # Returns True
  



