Query: Decode Hex String in Python 3
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45575207)
 In Python 3.6 there is no need to decode strings (of type  str ), since they are already utf-8. Further, the normal  decode  function, allows only "standard" string decodings. That is, this function cannot decode hex. 

 Instead, this "special" decoding functionality is moved to  codecs.decode . Thus, you want to rewrite your code as: 

  import codecs
x = "01008C647620302E31302E372070762039393130333120736E20333137337C6661336232653863206D7A20313778313720736B6620343235357C34376330643162302073706620333237397C363236373361376520627066203332363137307C61653138366364642073746620323538397C623634383035633220616D66203335333230357C633736333133626200"
codecs.decode(x, 'hex')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28100102)
 Use  str.replace  to replace that character with the hex representation of its ordinal value. And to get the actual string back you can decode it using  string-decode . 

  >>> s = 'banana'
>>> print s.replace('a', '\\x' + format(ord('a'), 'x'))
b\x61n\x61n\x61
>>> print s.replace('a', '\\x' + format(ord('a'), 'x')).decode('string-escape')
banana
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29030784)
 You cannot decode string objects; they are  already  decoded. You'll have to use a different method. 

 You can use the https://docs.python.org/3/library/codecs.html#codecs.decode to apply  hex  as a codec: 

  >>> import codecs
>>> codecs.decode('ab', 'hex')
b'\xab'
  

 This applies a https://docs.python.org/3/library/codecs.html#binary-transforms codec; it is the equivalent of using the https://docs.python.org/3/library/base64.html#base64.b16decode, with the input string converted to uppercase: 

  >>> import base64
>>> base64.b16decode('AB')
b'\xab'
  

 You can also use the https://docs.python.org/3/library/binascii.html#binascii.unhexlify to 'decode' a sequence of hex digits to bytes: 

  >>> import binascii
>>> binascii.unhexlify('ab')
b'\xab'
  

 Either way, you'll get a  bytes  object. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49995305)
 Try(Python 3.x): 

  import codecs
codecs.decode("707974686f6e2d666f72756d2e696f", "hex").decode('utf-8')
  

 From https://python-forum.io/Thread-convert-hex-encoded-string-to-ASCII. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6754507)
 If you have a string of hex, you can decode it using the  decode  method.  

  >>> s = '0001020304'
>>> s.decode('hex')
'\x00\x01\x02\x03'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3045959)
 Assuming Python 2.6, 

  >>> print('kitap ara\xfet\xfdrmas\xfd'.decode('iso-8859-9'))
kitap araştırması
>>> 'kitap ara\xfet\xfdrmas\xfd'.decode('iso-8859-9').encode('utf-8')
'kitap ara\xc5\x9ft\xc4\xb1rmas\xc4\xb1'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27988264)
 You should  not  decode the string from hex; drop the  .decode('hex')  call. You need to pass in actual hex  digits , not a bytestring with codepoints based on those digits. 

  

  >>> hex(1094795584)[2:]
'41414140'
>>> hex(1094795584)[2:].decode('hex')
'AAA@'
  

 By decoding you are already producing the very bytes you wanted  bytesarray.fromhex()  to produce; you could just use  bytesarray(hex_string.decode('hex'))  in that case. 

 You can use  format()  to produce a hex format for your number that doesn't include the  0x  prefix, nor a  L  postfix for long integers: 

  import math

def number_to_bytes(number):
    byte_count = int(math.log(number, 256)) + 1
    hex_string = '{:0{}x}'.format(number, byte_count * 2)
    return bytearray.fromhex(hex_string)
  

  

  >>> import math
>>> def number_to_bytes(number):
...     nibble_count = int(math.log(number, 256)) + 1
...     hex_string = '{:0{}x}'.format(number, nibble_count * 2)
...     return bytearray.fromhex(hex_string)
...
>>> number_to_bytes(1094795585)
bytearray(b'AAAA')
>>> number_to_bytes(1094795584)
bytearray(b'AAA@')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11384599)
 In Python 3, the  bytes.decode()  method is used to decode raw bytes to Unicode, so you have to get the decoder from the  codecs  module using  codecs.getdecoder()  or  codecs.decode()  for  bytes -to- bytes  encodings: 

  >>> codecs.decode(b"4f6c6567", "hex_codec")
b'Oleg'
>>> codecs.getdecoder("hex_codec")(b"4f6c6567")
(b'Oleg', 8)
  

 The latter function seems to be missing from the documentation, but has a useful docstring. 

 You might also want to have a look at  binascii.unhexlify() . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46878633)
  

  import base64
import codecs

encoded="/6o="
decoded = base64.b64decode(encoded)
b_string = codecs.encode(decoded, 'hex')
print(b_string.decode('utf-8').upper())
  

 it will give you: 

 FFAA 

 This works both for Python 2.7 and Python 3.6. 



