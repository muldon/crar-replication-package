Query: Is there a cleaner way to iterate through all binary 4-tuples?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32294617)
 If it's  clarity  you're after: 

  for  a in range(2):
  for b in range(2):
    for c in range(2):
      for d in range(2):
        tup = (a,b,c,d)
        print(tup)
  

 And if you don't like nesting but do like list comprehensions: 

  [ (d,c,b,a) for d in range(2) for c in range(2) for b in range(2) for a in range(2) ]
  

 And if you want to emphasize  binary  

  for i in range(16):
    t=(1 if (i & 8) else 0, 
       1 if (i & 4) else 0, 
       1 if (i & 2) else 0, 
       (i & 1)
      )
    print( t) 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32292573)
 Well, there's this: 

  import itertools
list(itertools.product((0, 1), repeat=4))
  

 Output: 

  [(0, 0, 0, 0),
 (0, 0, 0, 1),
 (0, 0, 1, 0),
 (0, 0, 1, 1),
 (0, 1, 0, 0),
 (0, 1, 0, 1),
 (0, 1, 1, 0),
 (0, 1, 1, 1),
 (1, 0, 0, 0),
 (1, 0, 0, 1),
 (1, 0, 1, 0),
 (1, 0, 1, 1),
 (1, 1, 0, 0),
 (1, 1, 0, 1),
 (1, 1, 1, 0),
 (1, 1, 1, 1)]
  

 Can't get much simpler than that :). 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8898977)
 There's a trick for just getting the 1's out of the binary representation without having to iterate over all the intervening 0's: 

  def bits(n):
    while n:
        b = n & (~n+1)
        yield b
        n ^= b


>>> for b in bits(109):
    print(b)


1
4
8
32
64
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19256326)
 Cleaner version: 

  >>> test_string = '1101100110000110110110011000001011011000101001111101100010101000'
>>> print ('%x' % int(test_string, 2)).decode('hex').decode('utf-8')
نقاب
  

 Inverse (from @Robᵩ's comment): 

  >>> '{:b}'.format(int(u'نقاب'.encode('utf-8').encode('hex'), 16))
1: '1101100110000110110110011000001011011000101001111101100010101000'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13663331)
 Solution 

 Probably the easiest way is not to use http://docs.python.org/2/library/functions.html#bin and string slicing, but use features of http://docs.python.org/2.7/library/stdtypes.html#str.format: 

  '{:b}'.format(some_int)
  

  

  >>> print '{:b}'.format(6)
110
>>> print '{:b}'.format(123)
1111011
  

 In case of http://docs.python.org/2/library/functions.html#bin you just get the same string, but prepended with " 0b ", so you have to remove it. 

 Getting list of  int s from binary representation 

  EDIT : Ok, so do not want just a string, but rather a list of integers.  

  your_list = map(int, your_string)
  

 Combined solution for edited question 

 So the whole process would look like this: 

  your_list = map(int, '{:b}'.format(your_int))
  

 A lot cleaner than using  bin()  in my opinion. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14931808)
 Use http://docs.python.org/2/library/itertools.html#itertools.product 

  import itertools
lst = list(itertools.product([0, 1], repeat=3))
  

 This will yield a list of tuples (see http://ideone.com/rXZsIG) 

 You can easily change this to use a variable  repeat : 

  n = 3
lst = list(itertools.product([0, 1], repeat=n))
  

 If you need a list of lists, then you can use the  map  function (thanks @Aesthete). 

  lst = map(list, itertools.product([0, 1], repeat=n))
  

 Or in Python 3: 

  lst = list(map(list, itertools.product([0, 1], repeat=n)))
# OR
lst = [list(i) for i in itertools.product([0, 1], repeat=n)]
  

 Note that using  map  or a list comprehension means you don't need to convert the product into a list, as it will iterate through the  itertools.product  object and produce a list. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8898898)
 Python 2.7: 

  def binary_decomposition(x):
    p = 2 ** (int(x).bit_length() - 1)
    while p:
        if p & x:
            yield p
        p //= 2
  

 Example: 

  >>> list(binary_decomposition(109))
[64, 32, 8, 4, 1]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32292572)
  itertools.product  takes a  repeat  argument which simplifies it a bit as it avoids the argument unpacking and therefor the list multiplication: 

  itertools.product(range(2), repeat=4)
  

 This is even called out in the https://docs.python.org/2/library/itertools.html#itertools.product<sup>1</sup> (though the example uses  repeat=3 ). 

 <sup><sup>1</sup>Note, I used  range(2)  rather than  (0, 1)  or  [0, 1]  since that's how it's written in the documentation.  Either way will work :) (obviously)</sup> 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41408938)
 There are multiple problems here. 

 You are iterating over bytes of data, but interpreting that data as 2 byte units.  The  offset  is the offset in bytes, not the offset in units of  fmt .  So the data is laid out like so (number being the index of the integer): 

  1 1 2 2 3 3 4 4 5 5 6 6
  

 But you are reading the data like this: 

  1 1  
  1 2
    2 2
      2 3
        3 3
          3 4
            4 4
              4 5
                5 5
                  5 6
                    6 6
  

  

  1 1
    2 2
        3 3
            4 4
                5 5
                    6 6
  

 You would need to use  range(0, length-size, 2)  to iterate in steps of 2. 

 However, Python ranges are half-open, they exclude the last value.  So you are dropping the last sample currently.  If you don't mean to, leave off the  -size . 

 This is not the idiomatic way to loop over bytes, however.  The better way would be to iterate over them directly: 

  for idata in rawdata[::2]:
  

 This would iterate over pairs of bytes. 

 But this is a roundabout way to do this if you are already using numpy.  numpy has a very fast way to unpack an entire array from binary data: https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromstring.html.  You can just read in the data all at once like so: 

  unpack = np.fromstring(data.read(), dtype=np.int16)
  

 Also, your  size  or format is wrong,  h  is 2 bytes but  size  is 4.  Also, you are shadowing the builtin  size  function.  Use a different variable name. 

 Also, this is being handled as binary data, so you should open the file as binary.  If you do this, you can use numpy's https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html#numpy.fromfile in the same way, but without having to do the  read  first, which would be even faster: 

  unpack = np.fromfile(data, dtype=np.int16)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34144446)
 It's nice to have when you need to use the index for some kind of manipulation and having the current element doesn't suffice. Take for instance a binary tree that's stored in an array. If you have a method that asks you to return a list of tuples that contains each nodes direct children then you need the index. 

  #0 -> 1,2 : 1 -> 3,4 : 2 -> 5,6 : 3 -> 7,8 ...
nodes = [0,1,2,3,4,5,6,7,8,9,10]
children = []
for i in range(len(nodes)):
  leftNode = None
  rightNode = None
  if i*2 + 1 < len(nodes):
    leftNode = nodes[i*2 + 1]
  if i*2 + 2 < len(nodes):
    rightNode = nodes[i*2 + 2]
  children.append((leftNode,rightNode))
return children
  

 Of course if the element you're working on is an object, you can just call a get children method. But yea, you only really need the index if you're doing some sort of manipulation. 



