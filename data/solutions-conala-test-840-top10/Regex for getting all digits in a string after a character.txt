Query: Regex for getting all digits in a string after a character
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45132922)
 The  \w  pattern matches letters, digits  and   _  symbol. Depending on the Python version and options used, the letters and digits it can match may be from the whole Unicode range or just ASCII. 

 So, the best way to fix the issue is by replacing  \w  with  [^\W_] : 

  import re
string = '''aaaa_1y345_xyz_orange_bar_1
aaaa_123a5542_xyz_orange_bar_1
bbbb_1z34512_abc_purple_bar_1'''
print(re.findall(r'_[^\W_]+_[^\W_]+_bar_[0-9]+', string))
# => ['_xyz_orange_bar_1', '_xyz_orange_bar_1', '_abc_purple_bar_1']
  

 See the http://ideone.com/wkuxkQ. 

  Details : 

 
  _  - an underscore 
  [^\W_]+  - 1 or more chars that are either digits or letters (a  [^  starts the negated character class,  \W  matches any non-word char, and  _  is added to match any word chars other than  _ ) 
  _[^\W_]+  - same as above 
  _bar_  - a literal substring  _bar_  
  [0-9]+  - 1 or more ASCII digits. 
 

 See the https://regex101.com/r/7o6mNj/2. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40053690)
  [\d+]  = one digit ( 0-9 ) or  +  character. 

  \d+  = one or more digits. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34338609)
 You can rather find all digits in the substring after the last  [  bracket: 

  >>> s = 'C9: Title of object (fo[ 123o, bar) [ch1, CH12,c03,4]'
>>> # Get substring after the last '['.
>>> target_string = s.rsplit('[', 1)[1]
>>>
>>> re.findall(r'\d+', target_string)
['1', '12', '03', '4']
  

 If you can't use split, then this one would work with look-ahead assertion: 

  >>> s = 'C9: Title of object (fo[ 123o, bar) [ch1, CH12,c03,4]'
>>> re.findall(r'\d+(?=[^[]+$)', s)
['1', '12', '03', '4']
  

 This finds all digits, which are followed by only non- [  characters till the end. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24490231)
 Your regex would be, 

  (\d+)\s(\d+)\s([^\.]*)
  

 http://regex101.com/r/hX6xA9/2 

 Your python code would be, 

  >>> s = "STRING 1 160 Some descriptor information. /Uselessstuff.; STRING 161 274 Some other descriptor information. /Moreuselessstuff.; STRING 275 1070 Last descriptor info. /Lastuselesspart."
>>> m = re.findall(r'(\d+)\s(\d+)\s([^\.]*)', s)
>>> m
[('1', '160', 'Some descriptor information'), ('161', '274', 'Some other descriptor information'), ('275', '1070', 'Last descriptor info')]
  

  Explanation:  

 
  (\d+)  Captures one or more digits into a group. 
  \s  Above captured digits would be followed by a space. 
  (\d+)  Again one or more digits are captured into second group. 
  \s  Followed by a single space. 
  ([^\.]*)  Captures any character not of a literal dot zero or more times. 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17711632)
  >>> import re
>>> a = ["SDFSD_SFSDF234234","SDFSDF_SDFSDF_234324","TSFSD_SDF_213123"]
>>> c = [re.sub('_?\d+','',x) for x in a]
>>> c
['SDFSD_SFSDF', 'SDFSDF_SDFSDF', 'TSFSD_SDF']
>>>
  

 .  Basically, it's saying "replace everything that is a stream of digits or a stream of digits preceded by an _". 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36333464)
 Your regex is not appropriate because  [^\d{4}\-\d{2}\-\d{2}]\d+   matches any character but a digit,  { ,  4 ,  } ,  - ,  2  and then 1 or more digits. In other words, you turned a  sequence  into a  character set . And that  negated character class  can match a newline. It can match any letter, too. .   strip  will not help in other contexts, you need to fix the regular expression.  

 Use 

  r'(?<!-)\b\d+\b(?!-)'
  

 See the https://regex101.com/r/pB4uM4/1 and https://ideone.com/Tx7S0C  

 This pattern will match 1+ digits ( \d+ ) that are not preceded with a hyphen ( (?<!-) ) or any word characters ( \b ) and is not followed with a word character ( \b ) or a hyphen ( - ). 

 You code will look like: 

  import requests
import re

url = 'http://app.lotto.pl/wyniki/?type=dl'
p = re.compile(r'(?<!-)\b\d+\b(?!-)')

response = requests.get(url)
data = p.findall(response.text)
print(data)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32977356)
 You're getting empty result because you  don't  have any capturing groups, refer to the https://docs.python.org/3/library/re.html#re.match for details.  

 You should change it to  group()  instead, now you'll get the first digit as a match. But this is  not  what you want because the engine stops when it encounter a non digit character and return the match until there. 

 You can simply  remove  all non-numeric characters: 

  re.sub('[^0-9]', '', '(555)-555-5555')
  

 The range 0-9 is negated, so the regex matches anything that's  not  a digit, then it replaces it with the empty string. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15622865)
 You data does not match your pattern: 

  57867983 - 87995423 
  

 is 8 digits,  followed by a space , followed by a hyphen,  followed by a space  followed by 8 digits. 

 So your pattern should be: 

  r"\d{8} - \d{8}"
  

 If the spaces are optional, then: 

  r"\d{8} *- *\d{8}"
  

 which means "zero or more spaces".  By the way, the hyphen is not a special character outside  [ ] , so does not need to be escaped. 

 EDIT:
Here is a more complete example: 

  import re

regex = re.compile(r"(\d{8}) - (\d{8})")

outuput = "Hash\r\n\t\t01773857 - 90349912\r\n\tWork with"

m = re.search(regex, outuput)

if m: print("Found:",m.groups())
  

  

  Found: ('01773857', '90349912')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52411730)
 Try to match: Boundary  5  followed by   6  digits and after that match non-digit character in a non-capturing group. 

  \b5  looks  5  at start of numbers  

  \d{6}  matches 6 digits 
 (?:\D|$)  non-capturing group: ignores non-digit or  $   

  \b5\d{6}(?:\D|$)
  

 https://regex101.com/r/EYZbK5/6 

  import re

string = "234324, 5604020, 45309, 45, 55, 5102903"
re.findall(r'\b5\d{6}(?:\D|$)', string)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12718523)
 Don't use  .*  to match the ID.  .  will match any character (except for line breaks, unless you use the DOTALL option). Just match a bunch of digits:  (.*)  -->  (\d+)  



