Query: Removing letters from a list of both numbers and letters
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18116283)
 You can use a http://docs.python.org/3.2/tutorial/classes.html#generator-expressions and put it in the  sum . 

  >>> import string
>>> s
'6483A2'
>>> sum(int(x) for x in list(s) if x in string.digits)
23
  

 If no other module want to import, use  isdigit : 

  sum(int(x) for x in list(s) if x.isdigit())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18116263)
 You can use  str.translate  to filter out letters: 

  >>> from string import letters
>>> strs = "6483A2"
>>> strs.translate(None, letters)
'64832'
  

 There's no need to convert a string to a list, you can iterate over the string itself. 

 Using  str.join ,  str.isdigit  and list comprehension: 

  >>> ''.join([c for c in strs if c.isdigit()])
'64832'
  

 or this as you want the  sum  of digits: 

  sum(int(c) for c in strs if c.isdigit())
  

 Timing comparisons: 

  Tiny string:  

  >>> strs = "6483A2"
>>> %timeit sum(int(c) for c in strs.translate(None, letters))
100000 loops, best of 3: 9.19 us per loop
>>> %timeit sum(int(c) for c in strs if c.isdigit())
100000 loops, best of 3: 10.1 us per loop
  

  Large string:  

  >>> strs = "6483A2"*1000
>>> %timeit sum(int(c) for c in strs.translate(None, letters))
100 loops, best of 3: 5.47 ms per loop
>>> %timeit sum(int(c) for c in strs if c.isdigit())
100 loops, best of 3: 8.54 ms per loop
  

  Worst case, all letters:  

  >>> strs = "A"*100
>>> %timeit sum(int(c) for c in strs.translate(None, letters))
100000 loops, best of 3: 2.53 us per loop
>>> %timeit sum(int(c) for c in strs if c.isdigit())
10000 loops, best of 3: 24.8 us per loop
>>> strs = "A"*1000
>>> %timeit sum(int(c) for c in strs.translate(None, letters))
100000 loops, best of 3: 7.34 us per loop
>>> %timeit sum(int(c) for c in strs if c.isdigit())
1000 loops, best of 3: 210 us per loop
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18116282)
 You can do this with a comprehension: 

  >>> s = "6483A2"
>>> [int(c) for c in s if c.isdigit()]
[6, 4, 8, 3, 2]
>>> sum(int(c) for c in s if c.isdigit())
23
  

 This approach is good if you want to go straight from the mixed string to a list of only the integers, which is presumably your goal. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43023827)
 This will remove any characters that ARE NOT letters, by going through each character and only adding it to the output if it is a letter: 

  output_string = ""

for char in Comp_String:
    if char.isalpha():
        output_string = output_string + char
  

 This will remove any characters that ARE numbers, by going through each character and only adding it to the output if it is not a number: 

  output_string = ""

for char in Comp_String:
    if not char.isdigit():
        output_string = output_string + char
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4371272)
 To make a new list: 

  [re.sub(r'[^A-Za-z0-9]+', '', x) for x in list_of_strings]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18116403)
 Just to contribute a little, if you want the  aggregated sum  you can do it all like this: 

  x = "6483A2"
sum(map(int, filter(str.isdigit, x)))
>>>23
  

 If you need the list of integers only for other purposes or other kind of  sum  then just leave it in  map : 

  map(int, filter(str.isdigit, x))
>>>[6, 4, 8, 3, 2]
  

  Note:  About the  string.letters  approach.  letters  is  locale  dependent so this: 

  import locale, string
locale.setlocale(locale.LC_ALL, 'es_ES') # or 'esp_esp' if you're on Windows
string.letters
>>> "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzŠŚŽšśžźŞµşŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőöřůúűüýţ˙"
  

 Although I would recommend  regex  for this case as suggested above :) 

 Nice to collaborate :D 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4371263)
 Assuming that your initial list is stored in a variable x, you can use this: 

  >>> x = [''.join(c for c in s if c not in string.punctuation) for s in x]
>>> print(x)
['hello', '', 'h3a', 'ds4']
  

 To remove the empty strings: 

  >>> x = [s for s in x if s]
>>> print(x)
['hello', 'h3a', 'ds4']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18116278)
 You can filter things out of any iterable (including a string) with the  filter  function, or a comprehension. For example, either of these: 

  digits = filter(str.isdigit, input_string)
digits = (character for character in input_string if character.isdigit())
  

 … will give you an iterable full of digits. If you want to convert each one to a number, either of these will do it: 

  numbers = map(int, filter(str.isdigit, input_string))
numbers = (int(character) for character in input_string if character.isdigit())
  

 So, to get the sum of all the digits, skipping the letters, just pass either of those to the  sum  function: 

  total = sum(map(int, filter(str.isdigit, input_string)))
total = sum(int(character) for character in input_string if character.isdigit())
  

 

 From your last paragraph: 

 
   I can't check to see if an element is a digit with isDigit because the elements apparently have to be integers first, and I can't convert the elements in the list to integers 
 

 First, it's  isdigit , not  isDigit . Second,  isdigit  is a method on strings, not integers, so you're wrong in thinking that you can't call it on the strings. In fact, you  must  call it on the strings before converting them to integers. 

 But this does bring up another option. In Python, it's often http://docs.python.org/3.3/glossary.html#term-eafp. Instead of figuring out whether we can convert each letter to an int, and then doing it, we can just try to convert it to an int, and then deal with the possible failure. For example: 

  def get_numbers(input_string):
    for character in input_string:
        try:
            yield int(character)
        except TypeError:
            pass
  

  

  total = sum(get_numbers(input_string))
  



