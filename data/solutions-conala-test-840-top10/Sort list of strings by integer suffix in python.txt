Query: Sort list of strings by integer suffix in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4287233)
 . 

  sorted(the_list, key = lambda x: int(x.split("_")[1]))
  

 . This splits on the underscore, takes the second part (i.e. the one after the first underscore), and converts it to integer to use as a key. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4287244)
 Well, you want to sort by the filename first, then on the int part: 

  def splitter( fn ):
    try:
        name, num = fn.rsplit('_',1)  # split at the rightmost `_`
        return name, int(num)
    except ValueError: # no _ in there
        return fn, None

sorted(the_list, key=splitter)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20863007)
 You could try something like this: 

  >>> t = ['100-200','1000-1100','1100-1200','200-300']
>>> t.sort(key=lambda x: [int(y) for y in x.split('-')])
>>> t
['100-200', '200-300', '1000-1100', '1100-1200']
  

 This would allow you to sort on integers, and if a hyphen exists, it will sort first by the first integer in the key list and then by the second. If no hyphen exists, you will sort just on the integer equivalent of the string: 

  >>> t = ['100-200','1000-1100','1100-1200','200-300', '100']
>>> t.sort(key=lambda x: [int(y) for y in x.split('-')])
>>> t
['100', '100-200', '200-300', '1000-1100', '1100-1200']
  

 If you have any  float  equivalents in any strings, simply change  int  to  float  like this: 

  >>> t = ['100-200.3','1000.5-1100','1100.76-1200','200-300.75', '100.35']
>>> t.sort(key=lambda x: [float(y) for y in x.split('-')])
>>> t
['100-200.3', '100.35', '200-300.75', '1000.5-1100', '1100.76-1200']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7795714)
 The following works in both Python 2 and Python 3: 

  l = ['1','2','3','4','10','102','14','Alice','John','Sally','33']
num, alpha = [], []
[num.append(elem) if elem.isdigit() else alpha.append(elem) for elem in l]
result = sorted(num, key=int) + sorted(alpha)
print(result)
  

 It avoids comparing strings to ints by partitioning the list. The reason to avoid such a comparison is that it's either https://stackoverflow.com/questions/3270680/how-does-python-compare-string-and-int/3270689#3270689 (Python 2) or prohibited (Python 3). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50641533)
 You could do in one sort provided you write a custom function for comparision.
The idea is to sort the words in ascending order and integer in descending order in the same list . Incase of word and integer is compared then treat the word as smaller compared to word. 

 And then for printing the final result increment the index for word if a word is found , decrement the index for integer if digit is found. 

 The below code works in python2: 

  a = "12 I have car 8 200 a"

def custom_compare(x,y):
    if x.isdigit() and y.isdigit():
        return int(y) - int(x) #do a descending order
    if x.isdigit() and y.isdigit() == False:
        return 1
    if x.isdigit() == False and y.isdigit():
        return -1
    if x.isdigit() == False and y.isdigit() == False:
        # do ascending order
        if x.lower() == y.lower():
            return 0
        elif x.lower() < y.lower():
            return -1
        else:
            return 1

original_list = a.split(" ")
sorted_list = sorted(original_list, cmp=custom_compare)

result = []
integer_index = -1
string_index = 0
for word in original_list:
    if word.isdigit():
        result.append(sorted_list[integer_index])
        integer_index = integer_index - 1
    else:
        result.append(sorted_list[string_index])
        string_index = string_index + 1

result
['8', 'a', 'car', 'have', '12', '200', 'I']
  

 Python 3:
    import functools 

  a = "12 I have car 8 200 a"

def custom_compare(x,y):
    if x.isdigit() and y.isdigit():
        return int(y) - int(x) #do a descending order
    if x.isdigit() and y.isdigit() == False:
        return 1
    if x.isdigit() == False and y.isdigit():
        return -1
    if x.isdigit() == False and y.isdigit() == False:
        # do ascending order
        if x.lower() == y.lower():
            return 0
        elif x.lower() < y.lower():
            return -1
        else:
            return 1

original_list = a.split(" ")
sorted_list = sorted(original_list, key=functools.cmp_to_key(custom_compare))

result = []
integer_index = -1
string_index = 0
for word in original_list:
    if word.isdigit():
        result.append(sorted_list[integer_index])
        integer_index = integer_index - 1
    else:
        result.append(sorted_list[string_index])
        string_index = string_index + 1

result
  

 PS:The word comparison could be efficiently written. 
 I am from C background and I am not sure of the pythonic way of comparison. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49626190)
  code:  

  import re, os
PATH = "C:\Temp"
lst = ['tmp_1483228800-1485907200_1', 'tmp_1483228800-1485907200_0', 'tmp_1483228800-1485907200_2']

def stringSplitByNumbers(x):
    l = re.findall('\d$', x)[0]
    return [int(y) if y.isdigit() else y for y in l]

print [ os.path.join(PATH, _) for _ in sorted(lst, key=stringSplitByNumbers)]
  

 output: 

  ['C:\\Temp\\tmp_1483228800-1485907200_0', 'C:\\Temp\\tmp_1483228800-1485907200_1', 'C:\\Temp\\tmp_1483228800-1485907200_2']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42472037)
 It can be done more elegantly by using the  key  argument of  sorted : 

  data = [
    '9,11',
    '70,10',
    '10,8,1',
    '10,70'
]

print sorted(data, key=lambda s: map(int, s.split(',')))
  

  

  ['9,11', '10,8,1', '10,70', '70,10']
  

 With the above code we convert each string of our list to a list of integer values and we use this list of integer values as our sorting key 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32807885)
 Perhaps the simplest way would be have  key  return a tuple and multiply the score by -1. For example: 

  >>> tuples.sort(key=lambda x: (-x[1], x[0]))
>>> tuples
[('bbb', 6), ('zzz', 6), ('aaa', 5), ('ggg', 5)]
  

 This will sort the integers in descending order and then the strings in ascending order. 



