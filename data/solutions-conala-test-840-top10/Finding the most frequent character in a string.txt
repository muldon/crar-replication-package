Query: Finding the most frequent character in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50886165)
 Question :
Most frequent character in a string 
The maximum occurring character in an input string 

 Method 1 : 

  a = "GiniGinaProtijayi"

d ={}
chh = ''
max = 0 
for ch in a : d[ch] = d.get(ch,0) +1 
for val in sorted(d.items(),reverse=True , key = lambda ch : ch[1]):
    chh = ch
    max  = d.get(ch)


print(chh)  
print(max)  
  

 Method 2 : 

  a = "GiniGinaProtijayi"

max = 0 
chh = ''
count = [0] * 256 
for ch in a : count[ord(ch)] += 1
for ch in a :
    if(count[ord(ch)] > max):
        max = count[ord(ch)] 
        chh = ch

print(chh)        
  

 Method 3 : 

  import collections

a = "GiniGinaProtijayi"

aa = collections.Counter(a).most_common(1)[0]
print(aa)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20025334)
 Here is way to find the most common character using a dictionary 

  message = "hello world"
d = {}
letters = set(message)
for l in letters:
    d[message.count(l)] = l

print d[d.keys()[-1]], d.keys()[-1]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47216982)
  To get the corresponding character in the  nth  value, just use this function:  

  def getchar(string, n):
    return str(string)[n - 1]
  

  Example usage:  

  >>> getchar('Hello World', 5)
'o'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11843610)
 strings are like lists. so you can access them the same way, 

  >>> a = "fkjdlfjzgjkdsheiwqueqpwnvkasdakpp"
>>> print a[10]
k
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11843583)
 Strings are iterable and indexable (since it is a http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange), so you can just use: 

  "fkjdlfjzgjkdsheiwqueqpwnvkasdakpp"[10]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47252278)
 You can use  sorted : 

  class String:
    def __init__(self, s):   
       self.s = s
    def findMostFrequentChar(self):
       return sorted([(a, self.s.count(a)) for a in self.s], key=lambda x:x[-1])[-1]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53037075)
 You can sort  c.most_common()  with a custom key that considers descending order of frequency first and then the alphabetical order second (note  lambda x: (-x[1], x[0]) ): 

  from collections import Counter

def ordered_letters(s, n=3):
    c = Counter(s.replace(' ', ''))
    top_n = sorted(c.most_common(), key=lambda x: (-x[1], x[0]))[:n]
    for i, t in enumerate(top_n):
        c, f = t
        if i == 0: print('1st most frequent', c + '.', 'Appearances:', f)
        elif i == 1: print('2nd most frequent', c + '.', 'Appearances:', f)
        elif i == 2: print('3rd most frequent', c + '.', 'Appearances:', f)
        else: print(str(i + 1) + 'th most frequent', c + '.', 'Appearances', f)

sent = "china construction bank"
ordered_letters(sent, 5)
# 1st most frequent n. Appearances: 4                                                                                                                       
# 2nd most frequent c. Appearances: 3                                                                                                                       
# 3rd most frequent a. Appearances: 2                                                                                                                       
# 4th most frequent i. Appearances 2                                                                                                                        
# 5th most frequent o. Appearances 2  
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4131173)
 There are many ways to do this shorter. For example, you can use the http://docs.python.org/py3k/library/collections.html#counter-objects class (in Python 2.7 or later): 

  import collections
s = "helloworld"
print(collections.Counter(s).most_common(1)[0])
  

 If you don't have that, you can do the tally manually (2.5 or later has  defaultdict ): 

  d = collections.defaultdict(int)
for c in s:
    d[c] += 1
print(sorted(d.items(), key=lambda x: x[1], reverse=True)[0])
  

 Having said that, there's nothing too terribly wrong with your implementation. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53037131)
 You can use https://docs.python.org/2.7/library/heapq.html#heapq.nlargest with a custom sort key. We use  -ord(k)  as a secondary sorter to sort by ascending letters. Using a heap queue is better than https://docs.python.org/2/library/functions.html#sorted as there's no need to sort all items in your  Counter  object. 

  from collections import Counter
from heapq import nlargest

def ordered_letters(s, n=3):
    ctr = Counter(c.lower() for c in s if c.isalpha())

    def sort_key(x):
        return (x[1], -ord(x[0]))

    for idx, (letter, count) in enumerate(nlargest(n, ctr.items(), key=sort_key), 1):
        print('#', idx, 'Most frequent:', letter, '.', 'Appearances:', count)

ordered_letters("china construction bank")

# 1 Most frequent: n . Appearances: 4
# 2 Most frequent: c . Appearances: 3
# 3 Most frequent: a . Appearances: 2
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/31495549)
  import collections
import itertools

a = [
['John', 'Mark', 'Jennifer'],
['John'],
['Joe', 'Mark'],
['John', 'Anna', 'Jennifer'],
['Jennifer', 'John', 'Mark']
]


counts = collections.defaultdict(int)
for collab in a:
    collab.sort()
    for pair in itertools.combinations(collab, 2):
        counts[pair] += 1

for pair, freq in counts.items():
    print(pair, freq)
  

 Output: 

  ('John', 'Mark') 2
('Jennifer', 'Mark') 2
('Anna', 'John') 1
('Jennifer', 'John') 3
('Anna', 'Jennifer') 1
('Joe', 'Mark') 1
  



