Query: Python Regex - Remove special characters but preserve apostraphes
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11403649)
 I was able to parse your sample into a list of words using this regex:  [a-z]*'? . 

 Then you can just join the elements of the list back with a space. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5843547)
 Here is a regex to match a string of characters that are not a letters or numbers: 

  [^A-Za-z0-9]+
  

 Here is the Python command to do a regex substitution: 

  re.sub('[^A-Za-z0-9]+', '', mystring)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45835990)
 Add them like this: 

  import re
msg = "Hi! I'm Mike, I like M&M. How are you?"
pattern = re.compile(r"[^\s\w'&%-]")
print(pattern.sub ('', msg)) # => Hi I'm Mike I like M&M How are you
  

 See the https://ideone.com/4qz3Lp 

  Details  

 
  [^  - start of a  negated  character class matching any char but...

 
  \s  - whitespace 
  \w  - word char (letter, digit or/and  _ ) 
  '  - a single quote 
  &  - a  &  symbol
- %  - a  %  symbol 
  -  - a hyphen (since it is at the end, it will be parsed as a literal  - ) 
  
  ]  - end of the character class. 
 

 Note you may escape the hyphen to make sure it will be parsed as a literal  -  even if you add more chars after it and forget to escape it:  r"[^\s\w'&%\-]" . 

 See https://stackoverflow.com/questions/43352618/python-split-on-multiple-delimiters-bug/43352657#43352657 to learn more how to use a  literal  hyphen inside a Python regex character class. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43239890)
 I suggest matching and  capturing  these characters in between digits (to restore them later in the output), and just match  them in other contexts. 

 In Python 2, it will look like 

  import re
s = u"中国，中，。》％国foo中¥国bar@中123=国％中国12-34中国"
pat_block = u'[^\u4e00-\u9fff0-9a-zA-Z]+';
pattern = u'([0-9]+{0}[0-9]+)|{0}'.format(pat_block)
res = re.sub(pattern, lambda x: x.group(1) if x.group(1) else u"" ,s)
print(res.encode("utf8")) # => 中国中国foo中国bar中123国中国12-34中国
  

 See the http://ideone.com/8v1ufA 

 If you need to preserve those symbols inside any Unicode digits, you need to replace  [0-9]  with  \d  and pass the  re.UNICODE  flag to the regex. 

 The regex will look like 

  ([0-9]+[^\u4e00-\u9fff0-9a-zA-Z]+[0-9]+)|[^\u4e00-\u9fff0-9a-zA-Z]+
  

 It will works like this: 

 
  ([0-9]+[^\u4e00-\u9fff0-9a-zA-Z]+[0-9]+)  - Group 1 capturing

 
  [0-9]+  - 1+ digits  
  [^\u4e00-\u9fff0-9a-zA-Z]+   - 1+ chars other than those defined in the specified ranges 
  [0-9]+  - 1+ digits  
  
  |   - or 
  [^\u4e00-\u9fff0-9a-zA-Z]+  - 1+ chars other than those defined in the specified ranges 
 

 In Python 2.x, when a group is not matched in  re.sub , the backreference to it is  None , that is why a lambda expression is required to check if Group 1 matched first. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25991827)
 I would use a regex like this: 

  import re
string = "↵                        tryit1.tar↵                        "
print re.sub(r'[^\w.]', '', string)     #  tryit1.tar
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25991795)
 A regex would be good here: 

  re.sub('[^a-zA-Z0-9-_*.]', '', my_string)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21199152)
 You don't need regex for this.
You could use the  replace  method from string class. 

<pre class="lang-py prettyprint-override"> string = 'abc\r\n\r\n\\\\'
string = string.replace('\r', '')
string = string.replace('\n', '')
string = string.replace('\\', '')
  

 But if you really want to use regex, a possible approach would be: 

<pre class="lang-py prettyprint-override"> string = re.sub('\\r*\\n*\\\\*', '', string)
  

 When matching special characters, they need to be escaped with a backslash. When matching a backslash, though, you need to use four backslashes. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10643601)
  

  import re
s = re.sub('{{.*?}}', '', s)
  

 Note that  {  and  }  are usually special characters in regular expressions and should usually be escaped with a backslash to get their literal meaning. However in this context they are interpreted as literals. 

 See it working online: http://ideone.com/EzQJJ 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44811298)
 In that case  str.strip()  won't help you (even if you use  " "  as an argument because it won't remove the spaces inside, only at the start/end of your string, and it would remove the single space before  "and"  as well. 

 Instead, use regex to remove 2 or more spaces from your strings: 

  l= ['\n                        \n                    ',
         '\n                        ',
         'Some text',
         ' and some more text\n',
  ' and on another a line some more text']

import re

result = "".join([re.sub("  +","",x) for x in l])

print(repr(result))
  

 prints: 

  '\n\n\nSome text and some more text\n and on another a line some more text'
  

 EDIT: if we apply the regex to each line, we cannot detect  \n  in some cases, as you noted. So, the alternate and more complex solution would be to join the strings  before  applying regex, and apply a more complex regex (note that I changed the test list of strings to add more corner cases): 

  l= ['\n                        \n                    ',
         '\n                        ',
         'Some text',
         ' and some more text \n',
  '\n and on another a line some more text ']

import re

result = re.sub("(^ |(?<=\n) |  +| (?=\n)| $)","","".join(l))

print(repr(result))
  

 prints: 

  '\n\n\nSome text and some more text\n\nand on another a line some more text'
  

 There are 5 cases in the regex now that will be removed: 

 
 start by one space 
 space following a newline 
 2 or more spaces 
 space followed by a newline 
 end by one space 
 

 Aftertought: looks (and is) complicated. There  is  a non-regex solution after all which gives exactly the same result (if there aren't multiple spaces between words): 

  result = "\n".join([x.strip(" ") for x in "".join(l).split("\n")])
print(repr(result))
  

 just join the strings, then split according to newline, apply  strip  with  " "  as argument to preserve tabs, and join again according to newline. 

 Chain with  re.sub("  +"," ",x.strip(" "))  to take care of possible double spaces between words: 

  result = "\n".join([re.sub("  +"," ",x.strip(" ")) for x in "".join(l).split("\n")])
  



