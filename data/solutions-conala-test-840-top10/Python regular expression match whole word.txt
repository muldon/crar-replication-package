Query: Python regular expression match whole word
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28888023)
 Yes, with a regex and http://www.regular-expressions.info/wordboundaries.html: 

  >>> import re
>>> s = "rebar bar barbed"
>>> regex = re.compile(r"\bbar\b")
>>> for match in regex.finditer(s):
...     print(match.group(), match.start(), match.end())
...
bar 6 9
  

 The  \b  anchors make sure that only entire words can match. If you're dealing with non-ASCII words, use  re.UNICODE  to compile the regex, otherwise  \b  won't work as expected, at least not in Python 2. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48205793)
 Try using the "word boundary" character class in the regex module,  re : 

  x="this is a sample"
y="this isis a sample."
regex=re.compile(r"\bis\b")  # For ignore case: re.compile(r"\bis\b", re.IGNORECASE)

regex.findall(y)
[]

regex.findall(x)
['is']
  

 From the documentation of https://docs.python.org/2/library/re.html#re.search. 

 
    \b  matches the empty string, but only at the beginning or end of a word 
  
   ... 
  
   For example  r'\bfoo\b'  matches  'foo' ,  'foo.' ,  '(foo)' ,  'bar foo baz'  but not  'foobar'  or  'foo3'  
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29917479)
 A way consists to describe all you don't want: 

  [^(\d]*(?:\([^)]*\)[^(\d]*)*
  

 Then you can use an always true assertion:  a digits are always preceded by zero or more characters that are not digits and characters between quotes.  

 You only need to capture the digits in a group: 

  p = re.compile(r'[^(\d]*(?:\([^)]*\)[^(\d]*)*(\d+-\d+)')
  

 The advantage of this way is that you don't need to test a lookahead at each position in the string, so it is a fast pattern. The inconvenient is that it consumes a little more memory, because the whole match produces more long strings. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15863102)
  

  re.search(r'\bis\b', your_string)
  

 From http://docs.python.org/2/library/re.html: 

 
   \b Matches the empty string, but only at the beginning or end of a word.  
 

 Note that the  re  module uses a naive definition of "word" as a "sequence of alphanumeric or underscore characters", where "alphanumeric" depends on locale or unicode options. 

 Also note that without the raw string prefix,  \b  is seen as "backspace" instead of regex word boundary. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28030782)
 Simply add  \d  to the lookahead and lookbehind patterns: 

  import re

int_regex = re.compile("(?<!\.)[0-9]+(?!\.)")
re2 = re.compile("(?<![\.\d])[0-9]+(?![\.\d])")

text = "1 + 2 + 3.0 + .4 + 5. - .45 + 66 + 777 - 12.3"
print "int_regex:", int_regex.findall(text)
print "re2      :", re2.findall(text)

int_regex: ['1', '2', '5', '66', '777', '1']
re2      : ['1', '2', '66', '777']
  

 The lookahead/behind patterns define a number boundary (much like  \b  defines a word boundary) and the only thing you are allowing in the number is digits. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29917171)
 You can use a negative look-ahead to get only those values you need like this: 

  (?![^()]*\))(\d+-\d+)
  

 The  (?![^()]*\))  look-ahead actually checks that there are no closing round brackets after the hyphenated numbers. 

 See https://regex101.com/r/aN5wN1/1 

 Sample code: 

  import re
p = re.compile(ur'(?![^()]*\))(\d+-\d+)')
test_str = u"Word word word; 123-125\nWord word (1000-1000)\nWord word word (1000-1000); 99-999\nWord word word word"
re.findall(p, test_str)
  

 Output of the http://www.tutorialspoint.com/execute_python_online.php?PID=0Bw_CjBb95KQMdFJUcUZoZ1FrOVE: 

  [u'123-125', u'99-999'] 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52955434)
  [?.!]
  

 This will allow you to only match with ? . and/or ! 

 So if you add a few more  Counter(re.finall(  you will be able to do something like this 

  #This will only match 
count[j] = Counter(re.findall(r'\s' ,text))

#This will only match ?
count[j] = Counter(re.findall(r'\?' ,text))

#This will only match .
count[j] = Counter(re.findall(r'\.' ,text))

#This will only match !
count[j] = Counter(re.findall(r'\!' ,text))
  

 You need to use the  \  to escape the special characters 

 Also this is a good resource when you are experimenting with python regular expressions: https://pythex.org/ The site also has a regular expression cheat sheet 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23031401)
 . From your question title It looks you wants to find "All words in a string e.g 'line' those doesn't starts with {", but you are using re.search() function that confuses me. 

  re.search()  and  re.findall() </h3>

 The function https://docs.python.org/2/library/re.html#re.RegexObject.search return  a  corresponding MatchObject instance, re.serach is usually used to match and return a patter in a long string.  It doesn't return all possible matches . See below a simple example:   

  >>> re.search('a', 'aaa').group(0) # only first match
'a'
>>> re.search('a', 'aaa').group(1) # there is no second matched
Traceback (most recent call last):
  File "<console>", line 1, in <module>
IndexError: no such group
  

 With regex  'a'  search returns  only one  patters  'a'  in string  'aaa' , it doesn't returns all possible matches.  

 If your objective to find – "all words in a string those doesn't starts with  { ". You should use https://docs.python.org/2/library/re.html#re.findall function:- that matches all occurrences of a pattern, not just the first one as re.search() does. See example: 

  >>> re.findall('a', 'aaa')
['a', 'a', 'a']
  

  Edit:  On the basis of comment adding one more example to demonstrate use of re.search and re.findall:   

  >>> re.search('a+', 'not itnot baaal laaaaaaall ').group()
'aaa'                 # returns ^^^   ^^^^^ doesn't 
>>> re.findall('a+', 'not itnot baaal laaaaaaall ')
['aaa', 'aaaaaaa']    #          ^^^   ^^^^^^^ match both                 
  

 Here is a good tutorial for Python re module: http://pymotw.com/2/re/index.html#module-re     

 Additionally, there is concept of group in Python-regex – "a matching pattern within parenthesis". If more than one groups are present in your regex patter then re.findall()  return a list of groups; this will be a list of tuples if the pattern has more than one group.  

  >>> re.findall('(a(b))', 'abab') # 2 groups according to 2 pair of ( )
[('ab', 'b'), ('ab', 'b')] # list of tuples of groups captured
  

 In Python regex  (a(b))  contains two groups; as two pairs of parenthesis (this is unlike regular expression in formal languages – regex are not exactly same as regular 
expression in formal languages but that is different matter).  

 

  Answer : The words in sentence  line  are separated by spaces (other either at starts of string) regex should be:  

  ur"(^|\s)(\w+)
  

 Regex description:  

 
  (^|\s+)  means: either word at start or start after some spaces.  
  \w* :  Matches an alphanumeric character, including "_". 
 

 On applying regex  r  to your line:  

  >>> import pprint    # for pretty-print, you can ignore thesis two lines
>>> pp = pprint.PrettyPrinter(indent=4)

>>> r = ur"(^|\s)(\w+)"
>>> L = re.findall(r, line)
>>> pp.pprint(L)
[   (u'', u'I'),
    (u' ', u'need'),
    (u' ', u'to'),
    (u' ', u'match'),
    (u' ', u'the'),
    (u' ', u'whole'),
    (u' ', u'line'),
    (u' ', u'except'),
    (u' ', u'for'),   # notice 'for' after 'for'
    (u' ', u'for'),   # '{thisword' is not included
    (u' ', u'example')]
>>> 
  

 To find all words in a single line use: 

  >>> [t[1] for t in re.findall(r, line)]
  

 Note: it will avoid { or any other special char from line because \w only pass alphanumeric and '_' chars.  

 

 If you specifically only avoid  {  if it appears at start of a word (in middle it is allowed) then use regex:  r = ur"(^|\s+)(P<word>[^{]\S*)" .  

 To understand diffidence  between this regex and other is check this example: 

  >>> r = ur"(^|\s+)(P<word>[^{]\S*)"
>>> [t[1] for t in re.findall(r, "I am {not yes{ what")]
['I', 'am', 'yes{', 'what']
  

 

  Without Regex:   

 You could achieve same thing simply without any regex as follows: 

  >>> [w for w in line.split() if w[0] != '{']
  

 

  re.sub() to replace pattern  

 If you wants to just replace one (or more) words starts with  {  you should use https://docs.python.org/2/library/re.html#re.sub to replace patterns start with  {  by emplty string  ""  check following code:  

  >>> r = ur"{\w+"
>>> re.findall(r, line)
[u'{thisword']
>>> re.sub(r, "", line)
u'I need to match the whole line except for  for example'
  

 

  Edit  Adding Comment's reply:   

 The  (P<name>...)  is Python's Regex extension: (it has meaning in Python) -   (P<name>...)  is similar to regular parentheses - create a group (a named group).  The group is accessible via the symbolic group name. Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression. example-1:   

  >>> r = "(P<capture_all_A>A+)"
>>> mo = re.search(r, "aaaAAAAAAbbbaaaaa")
>>> mo.group('capture_all_A')
'AAAAAA'
  

 example-2: suppose you wants to filter name from a name-line that may contain title also e.g mr use regex:  name_re = "(P<title>(mr|ms)\. (P<name>[a-z ]*)"  

 we can read name in input string using  group('name') :   

  >>> re.search(name_re, "mr grijesh chauhan").group('name')
'grijesh chauhan'
>>> re.search(name_re, "grijesh chauhan").group('name')
'grijesh chauhan'
>>> re.search(name_re, "ms. xyz").group('name')
'xyz'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21483653)
 I think your problem may be with the square brackets []
they indicate a set of single characters to match. So your expression would match a single instance of any of the following chars: "()ofn" 

 So for the string  "word1.word2 (on)" , you are matching only this part:  "word1.word2 ("  

 Try using this one instead: 

  re.search(r'\w+\.\w+\s+\((on|off)\)', analyzed_string)
  

 This match assumes that the () will be there, and looks for either "on" or "off" inside the parenthesis. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/7999687)
 You need to limit matches to whole words. So use  \b  to match the beginning or end of a word: 

  re.findall(r"\b[a-zA-Z]+\b(?!\()", "movav(x/2, 2)*movsum(y, 3)*z")
  



