Query: Python: for loop in index assignment
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31492524)
 If the loop doesn't executes,  x_index  is never initialized. 

 I believe x_index is a vector, so try this:  

  x_index=[]
def scatter_x_y(self,filtered_data,x_parameter,y_parameter):
    for i in range(len(filtered_data)):
        if filtered_data[i].name==x_parameter:
            x=filtered_data[i]
            x_index=list(x.keys())
        elif filtered_data[i].name==y_parameter:
            y=filtered_data[i]
            y_index=list(y.keys())
    print x_index
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48044422)
 The problem is not that  filter  is not iterable, but rather the fact that you do  iterable unpacking  in the head of the for loop: 

  for <b>index, item</b> in arr:
  # do something  

 Since the elements of  arr  are integers, you can not unpack them in two values (you write  index, item  as the "target" of the assignment, but how should Python solve  index, item = 1 ?. You can use https://docs.python.org/3.6/library/functions.html#enumerate to keep track of the index: 

  for index, item in <b></b>arr<b></b>:
  # do something  

  ..  takes as input an iterable, and produces an iterable of tuples where each tuple contains the  index  (as first item, and the element as second item. So  [1, 'a', 25]  will produce  (0, 1, (1, 'a', (2, 25 . 

 

 If you do not need the index, you can iterate over the  item s without an  index : 

  for <b>item</b> in arr:
  # do something  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7768885)
 The latter is equivalent to: 

  normalizedscores = {}
for u, l in linkscores.items():
    normalizedscores[u] = float(l) / maxscore
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17901248)
  [2, 3, 1, 0]  indicates that the smallest element is at index 2, the next smallest at index 3, then index 1, then index 0. 

 There are https://stackoverflow.com/q/5284646/190597 to get the result you are looking for: 

  import numpy as np
import scipy.stats as stats

def using_indexed_assignment(x):
    "https://stackoverflow.com/a/5284703/190597 (Sven Marnach)"
    result = np.empty(len(x), dtype=int)
    temp = x.argsort()
    result[temp] = np.arange(len(x))
    return result

def using_rankdata(x):
    return stats.rankdata(x)-1

def using_argsort_twice(x):
    "https://stackoverflow.com/a/6266510/190597 (k.rooijers)"
    return np.argsort(np.argsort(x))

def using_digitize(x):
    unique_vals, index = np.unique(x, return_inverse=True)
    return np.digitize(x, bins=unique_vals) - 1
  

 

 For example, 

  In [72]: x = np.array([1.48,1.41,0.0,0.1])

In [73]: using_indexed_assignment(x)
Out[73]: array([3, 2, 0, 1])
  

 

 This checks that they all produce the same result: 

  x = np.random.random(10**5)
expected = using_indexed_assignment(x)
for func in (using_argsort_twice, using_digitize, using_rankdata):
    assert np.allclose(expected, func(x))
  

 These IPython  %timeit  benchmarks suggests for large arrays  using_indexed_assignment  is the fastest: 

  In [50]: x = np.random.random(10**5)
In [66]: %timeit using_indexed_assignment(x)
100 loops, best of 3: 9.32 ms per loop

In [70]: %timeit using_rankdata(x)
100 loops, best of 3: 10.6 ms per loop

In [56]: %timeit using_argsort_twice(x)
100 loops, best of 3: 16.2 ms per loop

In [59]: %timeit using_digitize(x)
10 loops, best of 3: 27 ms per loop
  

 For small arrays,  using_argsort_twice  may be faster: 

  In [78]: x = np.random.random(10**2)

In [81]: %timeit using_argsort_twice(x)
100000 loops, best of 3: 3.45 µs per loop

In [79]: %timeit using_indexed_assignment(x)
100000 loops, best of 3: 4.78 µs per loop

In [80]: %timeit using_rankdata(x)
100000 loops, best of 3: 19 µs per loop

In [82]: %timeit using_digitize(x)
10000 loops, best of 3: 26.2 µs per loop
  

 

 Note also that http://docs.scipy.org/doc/scipy-0.16.0/reference/generated/scipy.stats.rankdata.html gives you more control over how to handle elements of equal value.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4185488)
 An empty list doesn't have any index yet, it's an empty list! If you want to fill it, you have to do something like this : 

  while count < 10:
    nameList.append(raw_input("Enter a name: "))
    count += 1
  

 This way, your condition will be evaluated and with the append method, you will be able to add new items in your list. 

 There are a few advanced tricks to do this easily, but considering your level, I think it's better that you understand this code before moving on. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27646949)
 may be you want: 

  fourier = []
  

 you decleared it as integer, you need to declear as list. 

 your fourior type is integer and you need to make it as list so it can support index assignment 

 also remove long(fourier) from your code 

  for i in range(1,126):
    fourier[i] = sum(cos(2*pi*i*t/2001)*Trace)
  

 this will give you index out of index error 

 correct would be: 

  for i in range(1,126):    # you dont need last option as 1, because range step is one by default
    fourier.append(sum(cos(2*pi*i*t/2001)*Trace))
 OR
    fourier.insert(i,sum(cos(2*pi*i*t/2001)*Trace))
  

 its better to use list comprehension and you need to set range to 126 to match the dimensions of  f  for plotting:    

  fourier = [sum(cos(2*pi*i*t/2001)*Trace) for i in range(1,126)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7768971)
 Here is an example of the first...example 

  >>> wordids = [1,2,4,3,10,7]
>>> createkey='_'.join(sorted([str(wi) for wi in wordids]))
>>> print createkey
1_10_2_3_4_7
  

 What it is doing is iterating through the list with a for loop, sorting the list, then joins all of the sorted values into a string, separating values with '_'  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34957212)
 The problem is that you have an empty list originally: 

  highest_list = []
  

 And then in the loop you try to access it at index 0: 

  highest_list[0] = ...
  

 It's impossible, because it's an empty list and so is not indexable at position 0.   

 A better way to find the mode of a list is to use a  collections.Counter  object: 

  >>> from collections import Counter
>>> L = [1,2,3,3,4]
>>> counter = Counter(L)
>>> max(counter, key=counter.get)
3
>>> [(mode, n_occurrences)] = counter.most_common(1)
>>> mode, n_occurrences
(3, 2)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4185476)
  count = 0
while listOfNames[count] < 10:
    nameList.append(raw_input("Enter a name: "))
    count += 1
  

 Use append for quick n easy... 

 Alternatively: 

  nameList[len(nameList):] = [raw_input("Enter a name: ")]
  

  Edit:  Did you mean listOfNames to be appended as opposed to nameList? 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/21390791)
 You are presumably trying to build a list of length  lenp  here. You'd need to create a list by multiplication here: 

  Temp = [None] * lenp
  

 but you'd be better off building the list by appending to it: 

  Temp = []
for i in p:
    Temp.append(T * (i / po) ** rp)
  

 where you don't use  p[i]  but  i   directly ; Python  for  loops are  for each  loops really.  

 Your  range()  produces values in the series  [0, 10, 20, ... 1200)  and the  for  loop assigns each of those values to  i  per iteration. If you use  i  to index into  p  again you'd run into problems;  p[0]  would still be  0 , but  p[10]  would then be  100 ,  p[20]  is  200 , etc. until  p[120]  throws an  IndexError  because there are only 119 different values in that range. 

 You can collapse the  for  loop appending to  Temp  into a list comprehension to build the list in one go: 

  rp=1.331
po=1000
T=280

Temp = [T * (i / po) ** rp for i in range(0, 1200, 10)]
  



