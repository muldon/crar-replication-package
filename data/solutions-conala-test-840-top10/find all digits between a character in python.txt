Query: find all digits between a character in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10260372)
  >>> from string import punctuation
>>> text = 'i like: a, b, 007 and c!!'
>>> re.findall('\w+|[{0}]+'.format(punctuation),text)
['i', 'like', ':', 'a', ',', 'b', ',', '007', 'and', 'c', '!!']
  

 This also works but finds any non-whitespace character if it doesn't find alphanumeric characters 

  >>> re.findall('\w+|\S+',text)
['i', 'like', ':', 'a', ',', 'b', ',', '007', 'and', 'c', '!!']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13518896)
 Use the below regex 

  \d+$
  

  $  depicts the end of string.. 

  \d  is a digit 

  +  matches the preceding character 1 to many times 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34338609)
 You can rather find all digits in the substring after the last  [  bracket: 

  >>> s = 'C9: Title of object (fo[ 123o, bar) [ch1, CH12,c03,4]'
>>> # Get substring after the last '['.
>>> target_string = s.rsplit('[', 1)[1]
>>>
>>> re.findall(r'\d+', target_string)
['1', '12', '03', '4']
  

 If you can't use split, then this one would work with look-ahead assertion: 

  >>> s = 'C9: Title of object (fo[ 123o, bar) [ch1, CH12,c03,4]'
>>> re.findall(r'\d+(?=[^[]+$)', s)
['1', '12', '03', '4']
  

 This finds all digits, which are followed by only non- [  characters till the end. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22741396)
 You can use  (.(\d+)(.*)  regular expression, that will save 3 groups: everything before digits, digits and everything after: 

  >>> import re
>>> pattern = ur'(.(\d+)(.*)'
>>> s = u"ரூ.100"
>>> match = re.match(pattern, s, re.UNICODE)
>>> print match.group(1)
ரூ.
>>> print match.group(2)
100
  

 Or, you can unpack matched groups into variables, like this: 

  >>> s = u"100ஆம்"
>>> match = re.match(pattern, s, re.UNICODE)
>>> before, digits, after = match.groups()
>>> print before

>>> print digits
100
>>> print after
ஆம்
  

 Hope that helps. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53386376)
 Try regex  \d+K?= |$)  

 This will check a space or an End of the line after K. 

 https://regex101.com/r/c3SFT9/1 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36167504)
 You may use a simple  (\d+)M  regex ( 1+ digit(s) followed with  M   where the digits are captured into a capture group) with  re.findall . 

 See http://ideone.com/DTDsPw: 

  import re
s = "107S33M15H\n33M100S\n12M100H33M"
print(re.findall(r"(\d+)M", s))
  

 And here is a https://regex101.com/r/vY9eY5/1 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39754501)
 You can also remove all non-digits and non-dot characters, then convert the result to float: 

  In [1]: import re
In [2]: s = [
   ...:       "12.45-280", # need to convert to 12.45280
   ...:       "A10.4B2", # need to convert to 10.42
   ...: ]

In [3]: for item in s:
   ...:     print(float(re.sub(r"[^0-9.]", "", item)))
   ...:     
12.4528
10.42
  

 Here  [^0-9.]  would match any character except a digit or a literal dot.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53269298)
 You can use this regex and find all numbers, that appear after colon in your string. 

  \d+(?!.*:)
  

  Explanation:  

 
  \d+  --> Matches one or more digits 
  (?!.*:)  --> Negative look aheads to ensures colon does not appear ahead of numbers where we are not interested to capture 
 

 https://regex101.com/r/cS6Asq/1 

 Here is a sample python code, 

  import re
s = '(rating 1-10, 56 details): 9 is my 22 jj 45 score'
numbers = re.findall('\d+(?!.*:)', s)
print(numbers)
  

 This prints following output, 

  ['9', '22', '45']
  

 And does not capture 1, 10 and 56 as they occur before colon. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51449111)
 In this particular example, another option is to split the string on the character  "X" . Then find the last set of consecutive digits in the left half of the split and the first set of consecutive digits in the right half of the split. 

 For example: 

  import re
f = "abc_xyz1024X137M4B4abc_xyz"

left, right = f.split("X")
print(right)
#137M4B4abc_xyz

print(left)
#abc_xyz1024

print((re.findall('\d+', left)[-1], re.findall('\d+', right)[0]))
#('1024', '137')
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51882663)
 To get the tel and the fax for your given example you might use a positive lookbehind  (?<=  to assert that what is on the left is either tel or fax part. 

 https://regex101.com/r/F0j7CF/1 

  Explanation  

 
  (?<=(?:tel|fax): )  Positive lookbehind to match either tel or fax followed by a colon and a whitespace 
  \(\d{3}\)  match an opening parenthesis, 3 digits and a closing parenthesis 
  \s*  Match zero or more times a whitespace character 
  \d{3}  Match 3 digits 
  [—»]  Match one of the specified characters using a character class 
  \s*  Match zero or more times a whitespace character 
  \d{4}\b  Match 4 digits followed by a word boundary 
 

 Instead of  [—»]\s*  you could also use https://regex101.com/r/F0j7CF/2 to match not a digit one or more times. 

 For example: 

  import re
string = """350 tel: (650) 725—9327 fax: (650) 723» 1882"""
print(re.findall(r'(?<=(?:tel|fax): )\(\d{3}\)\s*\d{3}[—»]\s*\d{4}\b', string))
  

 http://rextester.com/OZXCZ57716 



