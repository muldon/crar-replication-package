Query: Numpy array dimensions
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45887254)
 You can use . 

  In: a = np.array([[1,2,3],[4,5,6]])
In: a.
Out: (2, 3)
In: a.[0] # x axis
Out: 2
In: a.[1] # y axis
Out: 3
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22811285)
 The  shape  of an array is a tuple of its dimensions. An array with one dimension has a shape of (n,). A two dimension array has a shape of (n,m) and a three dimension array has a shape of (n,m,k) and so on. 

 When you change from  (3,)  to  (3,1)  you are changing from 1 dimension to 2 dimension.  

 You can keep adding dimensions in this way (You can check the number of dimensions of an array using  .ndim ): 

 One dimension: 

  >>> a = np.zeros((2))
array([ 0.,  0.])
>>> a.shape
(2,)
>>> a.ndim
1
  

 Two dimensions: 

  >>> b = np.zeros((2,2))
array([[ 0.,  0.],
       [ 0.,  0.]])
>>> b.shape
(2,2)
>>> b.ndim
2
  

 Three dimensions: 

  >>> c = np.zeros((2,2,2))
array([[[ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.]]])
>>> c.shape
(2,2,2)
>>> c.ndim
3
  

 Four dimensions: 

  >>> d = np.zeros((2,2,2,2))
array([[[[ 0.,  0.],
         [ 0.,  0.]],

        [[ 0.,  0.],
         [ 0.,  0.]]],


       [[[ 0.,  0.],
         [ 0.,  0.]],

        [[ 0.,  0.],
         [ 0.,  0.]]]])
>>> d.shape
(2,2,2,2)
>>> d.ndim
4
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51852403)
 You can use  .ndim  for dimension and  .shape  to know the exact dimension 

  var = np.array([[1,2,3,4,5,6], [1,2,3,4,5,6]])

var.ndim
# displays 2

var.shape
# display 6, 2
  

 You can change the dimension using  .reshape  function 

  var = np.array([[1,2,3,4,5,6], [1,2,3,4,5,6]]).reshape(3,4)

var.ndim
#display 2

var.shape
#display 3, 4
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3061789)
 It is http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape: 

 
   ndarray. shape  
  Tuple of array dimensions. 
 

  

  >>> a.shape
(2, 2)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47408952)
 I think this one is very simple: 

 If a is a 3D array (a.shape == (5, 4, 3)) filled with values, and b is a 2D array (b.shape == (5, 4)) filled with 1 and 0, then reshape b and multiply them: 

  a = a * b.reshape(5, 4, 1)
  

 Numpy will automatically expand the arrays as needed. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47968846)
 If you build a 2D list and convert it to numpy with  np.array()  it will return a numpy array with 2 dimensions. 

 If you build a 3D list and convert it to numpy with  np.array()  it will return a numpy array with 3 dimensions. 

 Minimal working example: 

  my_list = [[[0,1,2],[0,1,2]],[[0,1,2],[0,1,2]]]
my_list
  

 
   [[[0, 1, 2], [0, 1, 2]], [[0, 1, 2], [0, 1, 2]]] 
 

  my_np_array = np.array(my_list)
my_np_array.shape
  

 
   (2, 2, 3) 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18758049)
 Take a look at http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html . 

  >>> arr = numpy.zeros((50,100,25))
>>> arr.shape
# (50, 100, 25)

>>> new_arr = arr.reshape(5000,25)
>>> new_arr.shape   
# (5000, 25)

# One shape dimension can be -1. 
# In this case, the value is inferred from 
# the length of the array and remaining dimensions.
>>> another_arr = arr.reshape(-1, arr.shape[-1])
>>> another_arr.shape
# (5000, 25)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32594143)
 Create a new empty array using  numpy.zeros , its size is going to be ( arr.size ,  arr.max() ), now fill the items on those positions using multi-dimensional indexing: 

  >>> arr = np.array([[9], [2], [4], [1], [8]])
>>> arr_ = np.zeros((arr.size, arr.max()))
>>> arr_[np.arange(arr.size), arr[:,0]-1] = 1
>>> arr_
array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.],
       [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50136184)
 One way is to use  numpy.hstack  with  ravel  to flatten the various dimensions. 

  import numpy as np

l = (np.array([0.08]), np.array([ 0.56, -0.01, 0.46]),
     np.array([[ 0.60], [0.07], [0.03]]), np.array([[0., 0., 0., 0.]]),
     np.array([[0.]]))

res = np.hstack(i.ravel() for i in l)

array([ 0.08,  0.56, -0.01,  0.46,  0.6 ,  0.07,  0.03,  0.  ,  0.  ,
        0.  ,  0.  ,  0.  ])
  

 

 Or if you want a functional approach: 

  from operator import methodcaller

res = np.hstack(list(map(methodcaller('ravel'), l)))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/33088216)
  import numpy as np   
>>> np.shape(a)
(2,2)
  

 Also works if the input is not a numpy array but a list of lists 

  >>> a = [[1,2],[1,2]]
>>> np.shape(a)
(2,2)
  

  

  >>> a = ((1,2),(1,2))
>>> np.shape(a)
(2,2)
  



