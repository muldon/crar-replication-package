Query: Subtracting the current and previous item in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48378306)
 First item is as in  l  then iterate with zip. 

  l[:1] + [i+j for i, j in zip(l, l[1:])]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4029484)
  l = [(0,3), (3,4), (4,10), (10,2), (2,3)]
print [(y-x) for (x,y) in l]
  

 Outputs: [3, 1, 6, -8, 1] 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4029611)
 http://docs.python.org/library/itertools.html#recipes: 

  from itertools import izip, tee
def pairwise(iterable):
    "s -> (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
  

  

  >>> L = [0, 3, 4, 10, 2, 3]
>>> [b - a for a, b in pairwise(L)]
[3, 1, 6, -8, 1]
  

 [EDIT] 

 Also, this works (Python < 3): 

  >>> map(lambda(a, b):b - a, pairwise(L))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48378202)
 If you don't mind sticking to plain python: 

  >>> [sum(l[max(i-1, 0):i+1]) for i in range(len(l))]
[4, 6, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48380487)
 A couple ways you can do this with  numpy : 

 Use  np.cumsum , subtract out the previous terms 

  l=[4,2,1,3]
c = np.cumsum(l)
c[2:] -= c[:-2]
c

Out: array([4, 6, 3, 4], dtype=int32)
  

 Pad with  0  and do broadcast addition: 

  l = [4,2,1,3]
l_ = np.r_[0, l]
l_[1:] + l_[:-1]

Out: array([4, 6, 3, 4])
  

 or do boradcast addition and then pad with the initial value 

  l = np.array([4,2,1,3])
np.r_[l[0], l[1:] + l[:-1]]

Out: array([4, 6, 3, 4])
  

 All of these will be much faster for large datasets than doing list comprehension 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48378329)
 You can achieve this using plain python code. Using https://docs.python.org/3.4/library/functions.html#zip to yield consecutive elements and using the first element of list unchanged 

  >>> l = [4,2,1,3]
>>> l[:1] + [i+j for i,j in zip(l,l[1:])]
>>> [4, 6, 3, 4]
  

 Or another one using  map  and  lambda  

  >>> l[:1] + list(map(lambda x,y: x+y, l, l[1:]))
>>> [4, 6, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34582841)
 If you don't care about the order of the items, you can use a  set  based approach: 

  last = set(lst[0])
res = [lst[0]]
for item in lst[1:]:
    last &= set(item)
    res.append(list(last))
  

 Here,  res  contains the resulting list of lists. The important line is  last &= set(item)  which calculates the intersection between the previous and the current item. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48378159)
 If you don't want to use plain python (you'd better go the vectorization approach, in most cases, numpy is more performant), you could use https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.roll.html: 

  In[12]: np.roll(l, 1) + l
Out[12]: array([7, 6, 3, 4])
  

 With that, you can simply achieve your result with two lines: 

  In [14]: new_l = np.roll(l, 1) + l
In [15]: new_l[0] = l[0]
In [16]: new_l
Out[16]: array([4, 6, 3, 4])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21567729)
 Use https://doc.qt.io/qt-4.8/qlistwidget.html#currentRow-prop to get the index of the current item: 

  def print_info():
    print myListWidget.currentRow()
    print myListWidget.currentItem().text()
  

 A https://doc.qt.io/qt-4.8/qlistwidgetitem.html does not know its own index: it's up to the list-widget to manage that. 

 You should also note that https://doc.qt.io/qt-4.8/qlistwidget.html#currentItemChanged sends the current and previous items as arguments, so you could simplify to: 

  def print_info(current, previous):
    print myListWidget.currentRow()
    print current.text()
    print current.isSelected()
    ...
  



