Query: Get the indexes of truthy elements of a boolean list as a list/tuple
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13077075)
 If there is a way to convert the list to a numpy array, using numpy.where() should be faster: 

  > python -m timeit -s "import numpy" -s "values = numpy.array([True, False]*10000)" "numpy.where(values)"
1000 loops, best of 3: 392 usec per loop

> python -m timeit -s "import itertools" -s "values = [True, False]*10000" "[index for index, value in enumerate(values, 1) if value]"
100 loops, best of 3: 2.1 msec per loop
  

 But I may be cheating here by doing the conversion in the setup. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13076590)
 Switch the parentheses to square brackets to return a list instead of a generator: 

  def get_truthy_ones(self, bool_list):
    return [idx for idx, value in enumerate(bool_list, 1) if value]
  

 Or use your original function and then create a list from the generator: 

  list(get_truthy_ones(self, bool_list))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13076670)
 Just because it can be done, an alternative version with  itertools.compress() . I would argue this is less readable than the other examples, so I wouldn't recommend it. 

  >>> list(itertools.compress(*zip(*enumerate([True, False, False, True, False, True], 1))))
[1, 4, 6]
  

  

  python -m timeit -s "import itertools" -s "values = [True, False]*10000" "list(itertools.compress(*zip(*enumerate(values, 1))))"
100 loops, best of 3: 2.88 msec per loop

python -m timeit -s "import itertools" -s "values = [True, False]*10000" "[index for index, value in enumerate(values, 1) if value]"
1000 loops, best of 3: 1.11 msec per loop
  

 Significantly slower, in fact, so definitely not one to use. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40894658)
 One way is to use a boolean mask and just invert the indices to be false: 

  mask = np.ones(a.size, dtype=bool)
mask[indxs] = False
a[mask]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54380514)
 Truthy values refer to the objects used in a boolean context and not so much the boolean value that returns true or false.Take these as an example: 

  >>> bool([])
False
>>> bool([1])
True
>>> bool('')
False
>>> bool('hello')
True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48987071)
 You could  enumerate()  to get the indexes,  itertools.groupby()  to group falsy ( 0 ) and truthy values together, and extract the start and end indexes with  operator.itemgetter(0, -1) : 

  from operator import truth, itemgetter
from itertools import groupby

[itemgetter(0,-1)([i for i,v in g]) for _, g in groupby(enumerate(a), key = lambda x: truth(x[1]))]
# [(0, 9), (10, 101), (102, 128), (129, 217), (218, 252), (253, 338), (339, 362), (363, 447), (448, 490), (491, 580), (581, 581)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47419399)
 Your lists aren't comparing each individual value, they're comparing the existence of values in the list. 

 For any truthy variables  a  and  b : 

  a and b
> b #The program evaluates a, a is truthy, it evaluates b, b is truthy, so it returns the last evaluated value, b.
a or b
> a #The program evaluates a, a is truthy, so the or statement is true, so it returns the last evaluated value, a.
  

 Now, truthy depends on the type. For example, integers are truthy for  my_int != 0 , and are falsy for  my_int == 0 .  

  a = 0
b = 1
a or b
> b #The program evaluates a, a is falsy, so the or statement goes on to evaluate b, b is truthy, so the or statement is true and it returns the last evaluated value b.
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/39984051)
 All values are considered "truthy" except for the following, which are "falsy": 

 
  None  
  False  
  0  
  0.0  
  0j  
  Decimal(0)  
  Fraction(0, 1)  
  []  - an empty  list  
  {}  - an empty  dict  
  ()  - an empty  tuple  
  ''  - an empty  str  
  b''  - an empty  bytes  
  set()  - an empty  set  
 an empty  range , like  range(0)  
 objects for which 

 
  obj.__bool__()  returns  False  
  obj.__len__()  returns  0   
  
 

 A "truthy" value will satisfy the check performed by  if  or  while  statements.  We use "truthy" and "falsy" to differentiate from the  bool  values  True  and  False . 

 https://docs.python.org/3/library/stdtypes.html#truth-value-testing 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8202345)
 Yes, in python any value is either truthy or falsy. Every integer is truthy except for 0. With the boolean operators  or  and  and , python returns the last expression it evaluates, for example  3 or 5  will return 3 as python first sees that 3 is truthy and does not have to evaluate 5 and returns 3. 

 In 0 and 5, 0 is falsy and so python does not evaluate the next expression and returns 0. 

 The reason  5 == True  gives  False  as 5 does not equal true, it just acts truthy in boolean expressions.  bool(5) == True  gives  True  as this explicitly converts the integer to a boolean. 



