Query: Convert generator object to a dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40752364)
  list()  can't convert an infinite sequence. You need to add an upper limit to your generator: 

  def fib(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b

print list(fib(10))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17815968)
 You can use a http://www.python.org/dev/peps/pep-0274/: 

  cdict = {c.name: c.value for c in cj}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10687284)
 Using dictionary comprehensions: 

  { k : str(v) for k, v in d.iteritems() }
  

 The above will work in Python 2.7+, and it will generate the new dictionary using a generator. For Python 3, this will work similarly: 

  { k : str(v) for k, v in d.items() }
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40752347)
 The problem is your generator -  list(fib())  basically goes through all iterations of the generator and places them in a list. Since your generator is an infinite loop, the iterations never stop. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17815965)
 Use http://www.python.org/dev/peps/pep-0274/:  {c.name:c.value for c in cj}  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40752342)
 The problem is that your generator has no end condition ( while True  and no  break ) 

 Even if it could make sense to write such a generator (ex: yield all the decimals of  Pi  or the Fibonacci sequence I just recognized in your code :)), when you convert it to a list, it loops forever (and eats all the memory too) 

 BTW:  list()  is of course the best way to turn a (finite :)) generator to a  list  object. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40752488)
 As others have said, your generator will run infinitely. If you tried to convert an infinite generator to a list, it would run ou of memory. The reason you're getting the output you are is because you need to use  next() (which was  .__next__  in Python 2) to get the next element from the generator. . 

  >>> def gen():
    for i in range(100):
        yield i


>>> g = gen()
>>> next(g)
0
>>> next(g)
1
>>> next(g)
2
>>> 
  

 But you seem to want to create an entire iterable from your generator, in which case you cannot. Python will run out of memory. If you want to convert your generator to a list, it must have an upper limit. 

  >>> def gen():
    while True:
        yield 0


>>> g = gen()
>>> list(g)
# it gets stuck forever 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40752468)
 Since your generator does not have an upper limit, asking a list of it is like asking to list all the numbers of the Fibonacci sequence (which, as was pointed before, is infinite, so it might take some time :)). 

 So, either put an argument in your fib() generator as explained in another post too, or use something like that for the, say, 10 next values: 

  b = fib()
[next(b) for _ in range(10)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32492136)
 Here is one way, example shown for the first dictionary key: 

  data = {
    0: (6, 192, 365, 172, 388, 115, 378, 127, 311, 142, 305, 192, 334), 
    1: (4, 172, 688, 115, 678, 105, 650, 107, 634), 
    2: (6, 242, 294, 215, 278, 205, 250, 242, 205, 284, 221, 292, 234)
}

it = iter(data[0][1:])
result = dict(enumerate(zip(it, it)))
from pprint import pprint
pprint(result)
  

  Output  

 
{0: (192, 365),
 1: (172, 388),
 2: (115, 378),
 3: (127, 311),
 4: (142, 305),
 5: (192, 334)}
 

 You can do all keys in  data  like this: 

  results = {}
for k, v in data.items():
    it = iter(v[1:])
    results.update({k: dict(enumerate(zip(it, it)))})
pprint(results)
  

  Output  

 
{0: {0: (192, 365),
     1: (172, 388),
     2: (115, 378),
     3: (127, 311),
     4: (142, 305),
     5: (192, 334)},
 1: {0: (172, 688), 1: (115, 678), 2: (105, 650), 3: (107, 634)},
 2: {0: (242, 294),
     1: (215, 278),
     2: (205, 250),
     3: (242, 205),
     4: (284, 221),
     5: (292, 234)}}
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/23098482)
 Since your data is nested, you can flatten it with  chain.from_iterable  like this 

  from itertools import chain
from collections import Counter
print Counter(chain.from_iterable(x))
# Counter({'doing': 2, 'Kyle': 2, 'what': 1, 'timeis': 1, 'am': 1, 'Hey': 1, 'I': 1, 'are': 1, 'it': 1, 'you': 1, 'fine': 1})
  

 If you want to use generator expression, then you can do 

  from collections import Counter
print Counter(item for items in x for item in items)
  

 If you want to do this without using Counter, then you can use a normal dictionary like this 

  my_counter = {}
for line in x:
    for word in line:
        my_counter[word] = my_counter.get(word, 0) + 1
print my_counter
  

 You can also use  collections.defaultdict , like this 

  from collections import defaultdict
my_counter = defaultdict(int)
for line in x:
    for word in line:
        my_counter[word] += 1

print my_counter
  

 Okay, if you simply want to convert the  Counter  object to a  dict  object (which I believe is not necessary at all since  Counter  is actually a dictionary. You can access key-values, iterate, delete update the  Counter  object just like a normal dictionary object), you can use https://stackoverflow.com/questions/23098468/computing-frequencies-in-a-nested-list/23098482?noredirect=1#comment35307265_23098482, 

  print dict(Counter(chain.from_iterable(x)))
  



