Query: Sum all values of a counter in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18593560)
 Sum the values: 

  sum(some_counter.values())
  

  

  >>> from collections import Counter
>>> c = Counter([1,2,3,4,5,1,2,1,6])
>>> sum(c.values())
9
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32511500)
  >>> from collections import Counter
>>> sum(Counter({'a': 2, 'b': 2, 'c': 2, 'd': 1}).values())
7
  

 
   Common patterns for working with Counter objects: sum(c.values()) 
  # total of all counts 
 

 Source: https://docs.python.org/2/library/collections.html 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22428868)
 You need to sum the values, then divide each count by the sum: 

  total = sum(x.values(), 0.0)
for key in x:
    x[key] /= total
  

 By starting the sum with  0.0  we make sure  total  is a floating point value, avoiding the Python 2 floor division behaviour of  /  with integer operands. 

  

  >>> from collections import Counter
>>> x = Counter(['abc','abc','def','jkl'])
>>> total = sum(x.values(), 0.0)
>>> for key in x:
...     x[key] /= total
... 
>>> x
Counter({'abc': 0.5, 'jkl': 0.25, 'def': 0.25})
>>> y = Counter(['abc','def','def','pqr', 'pr', 'foo', 'bar'])
>>> total = sum(y.values(), 0.0)
>>> for key in y:
...     y[key] /= total
... 
>>> y
Counter({'def': 0.2857142857142857, 'pr': 0.14285714285714285, 'abc': 0.14285714285714285, 'bar': 0.14285714285714285, 'pqr': 0.14285714285714285, 'foo': 0.14285714285714285})
  

 If you need to sum the counters, you'd need to re-normalize the resulting counter separately; summing two normalized counters means you have a new counter whole values sum to 2, for example. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18593563)
 The code you have adds up the keys (i.e. the unique values in the list:  1+2+3+4+5+6=21 ). 

 To add up the counts, use: 

  In [4]: sum(Counter([1,2,3,4,5,1,2,1,6]).values())
Out[4]: 9
  

 This idiom is mentioned in the http://docs.python.org/2/library/collections.html#collections.Counter, under "Common patterns". 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17043256)
 You can use  collections.Counter : 

  >>> from collections import Counter
>>> d =Counter()
>>> d.update({'key1':10,'key2':14,'key3':47})
>>> d['key1'] += 20
>>> d['key4'] += 50  # Also works for keys that are not present
>>> d
Counter({'key4': 50, 'key3': 47, 'key1': 30, 'key2': 14})
  

 Counter has some advantages: 

  >>> d1 = Counter({'key4': 50, 'key3': 4})
#You can add two counters
>>> d.update(d1)
>>> d
Counter({'key4': 100, 'key3': 51, 'key1': 30, 'key2': 14})
  

 You can get a list of sorted items(based on the value) using  most_common() : 

  >>> d.most_common()
[('key4', 100), ('key3', 51), ('key1', 30), ('key2', 14)]
  

  

  >>> keys = [ random.randint(0,1000) for _ in xrange(10**4)]
>>> def dd():                             
    d = defaultdict(int)
    for k in keys:
        d[k] += 10
...         
>>> def count():                             
    d = Counter()
    for k in keys:
        d[k] += 10
...         
>>> def simple_dict():
...     d = {}
...     for k in keys:
...         d[k] = d.get(k,0) + 10
...         
>>> %timeit dd()
100 loops, best of 3: 3.47 ms per loop
>>> %timeit count()
100 loops, best of 3: 10.1 ms per loop
>>> %timeit simple_dict()
100 loops, best of 3: 5.01 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49978788)
 From documentation https://docs.python.org/3.1/library/collections.html, you can use  sum(Counter.values())  

  d = {'women':Counter()}    
sum(d['women'].values())
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32432571)
  >>> for sublist in List1:
        c = Counter(sublist)
        print(c['A'] / sum(c.values()))

0.75
0.0
0.25
  

 

 All values at once: 

  >>> for sublist in List1:
        c = Counter(sublist)
        s = sum(c.values())
        print(c['A'] / s, c['B'] / s, c['C'] / s)

0.75 0.25 0.0
0.0 0.5 0.5
0.25 0.5 0.25
  

 If you want to get a list of all items in a sublist with their respective percentages, you need to iterate the counter: 

  >>> for sublist in List1:
        c = Counter(sublist)
        s = sum(c.values())
        for elem, count in c.items():
            print(elem, count / s)
        print()

A 0.75
B 0.25

B 0.5
C 0.5

A 0.25
B 0.5
C 0.25
  

 Or use a dictionary comprehension: 

  >>> for sublist in List1:
        c = Counter(sublist)
        s = sum(c.values())
        print({ elem: count / s for elem, count in c.items() })

{'A': 0.75, 'B': 0.25}
{'B': 0.5, 'C': 0.5}
{'A': 0.25, 'B': 0.5, 'C': 0.25}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33695301)
  collections.Counter()  is a subclass of  dict . Just use  Counter().values()  to get a list of the counts: 

  counts = Counter(some_iterable_to_be_counted)
mean = numpy.mean(counts.values())
  

 Note that I did  not  call  Counter.most_common()  here, which would produce the list of  (key, count)  tuples you posted in your question. 

 If you must use the output of  Counter.most_common()  you can filter out just the counts with a list comprehension: 

  mean = numpy.mean([count for key, count in most_common_list])
  

 If you are using Python 3 (where  dict.values()  returns a dictionary view), you could either pass in  list(counts.values()) , or use the standard library https://docs.python.org/3/library/statistics.html#statistics.mean, which takes an iterable (including  dict.values()  dictionary view). 

 If you meant to calculate the mean  key value  as weighted by their counts, you'd do your own calculations directly from the counter values. In Python 2 that'd be: 

  from __future__ import division

mean = sum(key * count for key, count in counter.iteritems()) / sum(counter.itervalues())
  

 The  from __future__  import should be at the top of your module and ensures that you won't run into overflow issues with large floating point numbers. In Python 3 that'd be simplified to: 

  mean = sum(key * count for key, count in counter.items()) / sum(counter.values())
  

 The median could be calculated with bisection; sort the  (key, count)  pairs by key, sum the counts, and bisect the half-way point into a accumulated sum of the counts. The index for the insertion point points to the median key in the sorted keys list. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/10900355)
 Why are you using a http://docs.python.org/dev/library/collections.html#collections.Counter for summing values in files?  Its stated purpose is "for counting hashable objects" (i.e. if you have multiple <i>discrete</i> objects that you want to count instances of). 

 If you want to store a sum floating point values from each file, try a regular dictionary: 

  floatsums = {}
floatsums['file1.txt'] = ... // insert code to sum the floats

total = sum(floatsums.values())
numfiles = len(floatsums)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/29569064)
 If you want a count, use a Counter dict: 

  from collections import Counter

inp = input("Please enter your sentence: ").lower()
cn = Counter(inp)
vowels = {v: cn[v] for v in "aeiou" if v in cn}
cons = {c: cn[c] for c in "bcdfghjklmnpqrstvwxyz" if c in cn}
  

 if you want the total count just sum the values: 

   print(sum(vowels.values()))

 print(sum(cons.values()))
  

 If you just want the sums: 

  vowels = sum(cn[v] for v in "aeiou")
cons = sum(cn[c] for c in  "bcdfghjklmnpqrstvwxy")
  



