Query: python, locating and clicking a specific button with selenium
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20457255)
 I think you should use .find_element_by_xpath().
For example: 

  next = driver.find_element_by_xpath("//li[@class='next']/a")
prev = driver.find_element_by_xpath("//li[@class='previous']/a")
  

  

  next = driver.find_element_by_xpath("//a[text()='Next']")
prev = driver.find_element_by_xpath("//a[text()='Previous']")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20462096)
  

  next = driver.find_element_by_css_selector('li.next>a')
  

 CSS Selectors are cool and useful: http://www.w3schools.com/cssref/css_selectors.asp 

 XPATH, not so much - it should be used only as a last resort. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19100736)
 You can use  WebDriverWait , Documentation http://docs.seleniumhq.org/docs/04_webdriver_advanced.jsp, 

  from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0

ff = webdriver.Firefox()
ff.get("http://somedomain/url_that_delays_loading")
try:
    element = WebDriverWait(ff, 10).until(EC.presence_of_element_located((By.ID, "myDynamicElement")))
finally:
    ff.quit()
  

 Also, take a look at a similiar question, https://stackoverflow.com/questions/16927354/how-can-i-make-selenium-python-wait-for-the-user-to-login-before-continuing-to-r 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46399346)
 You can use like this in Google page , it is just a demo 

  driver = driver.Firefox()
driver.get("https://www.google.co.in/?gws_rd=ssl")
element = driver.find_element_by_partial_link_text("Gmail")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42149578)
 Hard to say for you exact situation but I know a workaround to the question in the summary and bold 

 
   send the left-click in a web browser window in a specific point 
 

 You just use execute_script and do the clicking using javascript.  

  self.driver.execute_script('el = document.elementFromPoint(47, 457); el.click();')
  

 It's convenient in a pinch because you can debug find the coordinates of an element in a browser by opening console and using querySelector (works the same as Webdriver's By.CSS_SELECTOR): 

  el = document.querySelector('div > h1');
var boundaries = el.getBoundingClientRect();
console.log(boundaries.top, boundaries.right, boundaries.bottom, boundaries.left);
  

 That being said, it's a really bad idea to write your tests to click a specific point. But I have found that sometimes even when el.click() or an https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html aren't working, execute script will still work using a querySelector which is about as good as what you would be doing in Selenium. 

  self.driver.execute_script('el = document.querySelector('div > h1'); el.click();')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45558763)
 You need to wait for the  iframe  to be available and when it's available switch to it. 

  ...
wait = WebDriverWait(driver, 10)
element = wait.until(EC.presence_of_all_elements_located((By.TAG_NAME, 'iframe')))
driver.switch_to.frame(driver.find_element_by_tag_name("iframe"))
driver.find_element_by_id("s_addr").click()
driver.find_element_by_name('stnum').send_keys('8227')
driver.find_element_by_name('stname').send_keys('FINDLAY ST')
...
  

 Also, using xpath seems like a more convenient way to select the search button. 

  driver.find_element_by_xpath("//input[@value='Search']").click()
driver.quit()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53493672)
 You need to switch to iframe before clicking button: 

  browser.get("https://www.cbsl.gov.lk/rates-and-indicators/exchange-rates/daily-buy-and-sell-exchange-rates")
wait = WebDriverWait(browser, 20)
wait.until(EC.frame_to_be_available_and_switch_to_it('iFrameResizer2'))
element = wait.until(EC.element_to_be_clickable((By.NAME, 'select_button')))
element.location_once_scrolled_into_view
element.click()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37174801)
 The payment form is  wrapped inside an iframe element . Switch to it before locating the element: 

  wait = WebDriverWait(driver, 10)
driver.switch_to.frame("billingFormFrame") 

cc = wait.until(EC.element_to_be_clickable((By.ID, "creditCardNumber"))
cc.click()
# ...
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37571578)
  The "by link text" locator would only work with links -  a  elements . Here you can use an XPath to check the text of the button: 

  driver.find_element_by_xpath("//button[. = 'Log out']").click()
  

 

 As a side note, in this code: 

 
    elem = driver.find_element_by_link_text("Log out").click()  
 

 there is not much sense in assigning the result of  click()  to a variable - it'd always be  None .  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43023812)
 You should use  find_elements   for finding all elements with same class
Try this to get all elements: 

  elements = driver.find_elements_by_class_name("mn-person-card__person-btn-ext.button-secondary-medium")
  

 then use a for loop to click each of them. For example: 

  for e in elements:
    e.click()
  



