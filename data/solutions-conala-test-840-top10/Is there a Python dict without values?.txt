Query: Is there a Python dict without values?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12118700)
 Python 2.X 

  dict((k, v) for k, v in metadata.iteritems() if v)
  

 

 Python 2.7 - 3.X 

  {k: v for k, v in metadata.items() if v is not None}
  

 Note that all of your keys have values.  It's just that some of those values are the empty string.  There's no such thing as a key in a dict without a value; if it didn't have a value, it wouldn't be in the dict. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9907162)
 Since the key/value pairs must already be in the first dict, you can iterate over this dict's items. 

  dict(pair for pair in dicts[0].items() 
     if all((pair in d.items() for d in dicts[1:])))
  

 Looks less elegant than interjay's answer, but works without the restriction of hashable values. 

 Edit: Changed the  all  expression to a generator expression for speed improvement 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15882327)
 If your dict is coming from  json.loads() , you can turn it into an object instead (rather than a dict) in one line: 

  import json
from collections import namedtuple

json.loads(data, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
  

 See also https://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object/15882054#15882054. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16772355)
 I also think it is important to note that Python  dict  object type is a hash table (http://mail.python.org/pipermail/python-list/2000-March/048085.html), and thus is not capable of being sorted without converting its keys/values to lists. What this allows is  dict  item retrieval in constant time  O(1) , no matter the size/number of elements in a dictionary. 

 Having said that, once you sort its keys -  sorted(data.keys()) , or values -  sorted(data.values()) , you can then use that list to access keys/values in design patterns such as these: 

  for sortedKey in sorted(dictionary):
    print dictionary[sortedKeY] # gives the values sorted by key

for sortedValue in sorted(dictionary.values()):
    print sortedValue # gives the values sorted by value
  

 Hope this helps. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46921730)
 I think the one liner version is succinct without being unreadable: 

  my_list = [{0: 0, 1: 1.4589, 4: 2.4879},
           {0: 1.4589, 1: 0, 2: 2.1547},
           {1: 2.1547, 2: 0, 3: 4.2114},
           {2: 4.2114, 3: 0},
           {0: 2.4879, 4: 0}]
print(max(max(part.values()) for part in my_list))
  

 Python 3 code. Use  dict.itervalues()  for Python 2. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21058312)
  >>> d1 = dict(a=1, b=2, c=3, d=4)
>>> d2 = dict(a=1, b=2)
>>> set(d2.items()).issubset( set(d1.items()) )
True
  

 And the other way around: 

  >>> set(d1.items()).issubset( set(d2.items()) )
False
  

  Limitation:   the dictionary values have to be hashable. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35758978)
 Without dict comprehension: 

  >>> d = {'C  14': ['15263808', '13210478'], 'W   1': ['13122205']}
>>> dict(((k.replace(' ',''),v) for k,v in d.items()))
{'W1': ['13122205'], 'C14': ['15263808', '13210478']}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36850247)
  from collections import defaultdict

input_list=[{"id":1, ...}, {...}]

result_dict=defaultdict(dict)
for d in input_list:
    result_dict[d['id']].update(d)

output_list=result_dict.values()
  

  result_dict  is a https://docs.python.org/2/library/collections.html#collections.defaultdict which uses a  dict  for every access without a available key. So we iterate through the input_list and update our result_dict with key equals  id  with the new values from the corresponding dictionary. 

 The output list is a transformation of the  result_dict  and uses only its values. 

 Use the https://docs.python.org/2/library/json.html to work directly with the json data. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21820470)
 Works ok in Python2 or Python3 

  >>> x = {'a':[{'p':1, 'q':2}, {'p':4, 'q':5}], 'b':[{'p':6, 'q':1}, {'p':10, 'q':12}]}
>>> next(len(i) for i in x.values())
2
  

 This is better for Python2 as it avoids making a list of the values. Works well in Python3 too 

  >>> next(len(x[k]) for k in x)
2
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/15146385)
  config = {
    "a": {
        "hello": 1,
        "goodbye": 2,
    }
}
  

  

  config['a']['hello'] = 10
  

 The updated  config : 

  config = {
    "a": {
        "hello": 10,
        "goodbye": 2,
    }
}
  



