Query: how to sort 2d array by row in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2173841)
 Well, if you're talking about standard python lists, this is easy:  mylist[1].sort() . For example: 

  >>> from random import randint
>>> a_list = [[randint(1,15) for _ in range(10)] for _ in range(3)]
>>> print a_list
[[3, 12, 3, 12, 13, 5, 12, 2, 1, 13], [3, 8, 7, 4, 6, 11, 15, 12, 4, 6], [15, 3, 8, 15, 1, 6, 4, 7, 15, 14]]
>>> a_list[1].sort()
>>> print a_list
[[3, 12, 3, 12, 13, 5, 12, 2, 1, 13], [3, 4, 4, 6, 6, 7, 8, 11, 12, 15], [15, 3, 8, 15, 1, 6, 4, 7, 15, 14]]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2173873)
 How does your "2D array" look like? 

 For example: 

  >>> a = [
     [12, 18, 6, 3], 
     [ 4,  3, 1, 2], 
     [15,  8, 9, 6]
]
>>> a.sort(key=lambda x: x[1])
>>> a
[[4,  3,  1, 2], 
 [15, 8,  9, 6], 
 [12, 18, 6, 3]]
  

 But I guess you want something like this: 

  >>> a = [
     [12, 18, 6, 3], 
     [ 4,  3, 1, 2], 
     [15,  8, 9, 6]
]
>>> a = zip(*a)
>>> a.sort(key=lambda x: x[1])
>>> a
[(6,  1,  9), 
 (3,  2,  6), 
 (18, 3,  8), 
 (12, 4, 15)]
>>> a = zip(*a)
>>> a
[(6, 3, 18, 12), 
 (1, 2,  3,  4), 
 (9, 6,  8, 15)
]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22699957)
 Use  .argsort()  it returns an  numpy.array  of indices that sort the given  numpy.array .  You call it as a function or as a method on your array.  For example, suppose you have 

  import numpy as np

arr = np.array([[-0.30565392, -0.96605562],
                [ 0.85331367, -2.62963495],
                [ 0.87839643, -0.28283675],
                [ 0.72676698,  0.93213482],
                [-0.52007354,  0.27752806],
                [-0.08701666,  0.22764316],
                [-1.78897817,  0.50737573],
                [ 0.62260038, -1.96012161],
                [-1.98231706,  0.36523876],
                [-1.07587382, -2.3022289 ]])
  

   .argsort()  on the column you want to sort, and it will give you an array of row indices that sort that particular column which you can pass as an index to your original array. 

  >>> arr[arr[:, 1].argsort()]
array([[ 0.85331367, -2.62963495],
       [-1.07587382, -2.3022289 ],
       [ 0.62260038, -1.96012161],
       [-0.30565392, -0.96605562],
       [ 0.87839643, -0.28283675],
       [-0.08701666,  0.22764316],
       [-0.52007354,  0.27752806],
       [-1.98231706,  0.36523876],
       [-1.78897817,  0.50737573],
       [ 0.72676698,  0.93213482]])
  

 You can equivalently use  numpy.argsort()  

  >>> arr[np.argsort(arr[:, 1])]
array([[ 0.85331367, -2.62963495],
       [-1.07587382, -2.3022289 ],
       [ 0.62260038, -1.96012161],
       [-0.30565392, -0.96605562],
       [ 0.87839643, -0.28283675],
       [-0.08701666,  0.22764316],
       [-0.52007354,  0.27752806],
       [-1.98231706,  0.36523876],
       [-1.78897817,  0.50737573],
       [ 0.72676698,  0.93213482]])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22698775)
  sorted(Data, key=lambda row: row[1])  should do it.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2173843)
 Python, per se, has no "2d array" -- it has (1d) lists as built-ins, and (1d) arrays in standard library module http://docs.python.org/library/array.html?highlight=array#module-array.  There are third-party libraries such as  numpy  which do provide Python-usable multi-dimensional arrays, but of course you'd be mentioning such third party libraries if you were using some of them, rather than just saying "in Python",  right ?-) 

 So I'll assume that by "2d array" you mean a list of lists, such as: 

  lol = [ range(10), range(2, 12), range(5, 15) ]
  

 or the like -- i.e. a list with 3 items, each item being a list with 10 items, and the "second row" would be the sublist item  lol[1] .  Yeah, lots of assumptions, but your question is so maddeningly vague that there's no way to avoid making assumptions - edit your Q to clarify with more precision, and an example!, if you dislike people trying to read your mind (and probably failing) as you currently make it impossible to avoid. 

 So under these assumptions you can sort each of the 3 sublists in the order required to sort the second one, for example: 

  indices = range(10)
indices.sort(key = lol[1].__getitem__)
for i, sublist in enumerate(lol):
  lol[i] = [sublist[j] for j in indices]
  

 The general approach here is to sort the range of indices, then just use that appropriately sorted range to reorder all the sublists in play. 

 If you actually have a different problem, there will of course be different solutions;-). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37858024)
 in this particular requirement you can use python's  sorted  which is https://en.wikipedia.org/wiki/Sorting_algorithm#Stability: 

  a =  np.array([[2, 3], [1998,5], [1998,7]])
res = np.array(sorted(a, key= lambda x: -x[0]))
  

 it does: use the first element of each row for comparison (by  lambda  accessor) and negate it for decreasing order. By stability, the rows will preserve order if the first element is the same 

 ouput: 

  [[1998    5]
 [1998    7]
 [   2    3]]
  

 EDIT: btw if you wanted to sort by the following columns whenever the preceeding ones are identical (all of the same ordering): 

  a =  np.array([[2, 3], [1998,5], [1998,7]])
res = np.array(sorted(a, key=lambda x:(-x).tolist()))
  

 this converts the rows to lists and then uses https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types. Note in this example it will be sorted decreasingly (hence  (-x) ) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7901924)
  import numpy as np
a = np.array([[4,9,2],[5,1,3]])
idx = np.argsort(a[1])
  

 Now you can use idx to index your array: 

  b=a[:,idx]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29549212)
 First you can use  np.argsort  to get the indices of  X  elements based on those position after sorting,then you can get the elements from  Y  based on the indices of  X  with  np.take() :   

  >>> s=np.argsort(X)
>>> np.take(Y,s)
array([['A', 'B', 'C'],
       ['C', 'A', 'B']], 
      dtype='|S1')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16865398)
 python sort is https://en.wikipedia.org/wiki/Sorting_algorithm#Stability, so you can sort in multiple passes (in reverse order): 

  data.sort(key=second criteria)
data.sort(key=first criteria)
  

 This is the simplest option and can also be faster than generating a synthetic key on the fly.  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30577520)
 Apply  numpy.argsort  on flattened array and then unravel the indices back to (3, 3) shape: 

  >>> arr = np.array([[5, 2, 4],
[3, 3, 3],
[6, 1, 2]])
>>> np.dstack(np.unravel_index(np.argsort(arr.ravel()), (3, 3)))
array([[[2, 1],
        [0, 1],
        [2, 2],
        [1, 0],
        [1, 1],
        [1, 2],
        [0, 2],
        [0, 0],
        [2, 0]]])
  



