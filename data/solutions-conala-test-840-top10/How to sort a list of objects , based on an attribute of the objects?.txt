Query: How to sort a list of objects , based on an attribute of the objects?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/403426)
  # To sort the list in place...
ut.sort(key=lambda x: x.count, reverse=True)

# To return a new list, use the sorted() built-in function...
newlist = sorted(ut, key=lambda x: x.count, reverse=True)
  

 More on http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19497334)
 Use  operator.attrgetter  and  .sort : 

  from operator import attrgetter
your_list.sort(key=attrgetter('age'), reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36076412)
 A simple key wrapper will do the job: 

  class DateKey(object):
    def __init__(self, invoice):
        self.value = invoice.date
    def __lt__(self, other):
        if not isinstance(other, (datetime.date, type(None))):
            return NotImplemented
        elif self.value is None:
            return True
        elif other.value is None:
            return False
        else:
            return self.value < other.value
  

 and then to use it: 

  invoices_list.sort(key=lambda i: DateKey(i))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39235748)
 You can instead use a lambda in order to access the exact value you want on which to sort: 

  car_list.sort(key=lambda x: x.depreciation_values[1])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/403496)
 It looks much like a list of Django ORM model instances. 

 Why not sort them on query like this: 

  ut = Tag.objects.order_by('-count')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/403607)
 A way that can be fastest, especially if your list has a lot of records, is to use  operator.attrgetter("count") . However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then: 

  try: import operator
except ImportError: keyfun= lambda x: x.count # use a lambda if no operator module
else: keyfun= operator.attrgetter("count") # use operator since it's faster than lambda

ut.sort(key=keyfun, reverse=True) # sort in-place
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17038658)
  your_list.sort(key = lambda x : x.anniversary_score)
  

 or if the attribute name is a string then you can use : 

  import operator
your_list.sort(key=operator.attrgetter('anniversary_score'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17618423)
 Call the object list  objects  and the other list  sort_keys . If you can compute  sort_keys[i]  from just the value of  objects[i] , you don't even need to build  sort_keys .  

  objects.sort(key=compute_sort_key_for_object)
  

 where  compute_sort_key_for_object  is the function you would use to compute  sort_keys[i]  from  objects[i] . . 

 If the processing to compute  sort_keys  is more complex, you'll want Rohit's answer: 

  import operator
[k for k, v in sorted(zip(objects, sort_keys), key=operator.itemgetter(1))]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5295116)
 Use  operator.attrgetter  to sort your objects by the value of an attribute: 

  import operator

class Foo:
    def __init__(self, name):
        self.name = name

l = [Foo('AA'), Foo('a'), Foo('AB')]
l.sort(key=operator.attrgetter('name'))
print [o.name for o in l]
['AA', 'AB', 'a']
  

 Here is another answer I provided https://stackoverflow.com/questions/5254021/python-human-sort-of-numbers-with-alpha-numeric-but-in-pyqt-and-a-lt-opera/5254534#5254534 to perform alpha-numeric sort in "human" order.  Merging the  _human_key  function into the example above, you could do: 

  l.sort(key=lambda x: _human_key(x.name))
print [o.name for o in l]
['a', 'AA', 'AB']
  



