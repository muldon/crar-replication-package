Query: Split dictionary of lists into list of dictionaries
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11963757)
 You can do with a simple list comprehension 

  >>> [dict(x.split(':') for x in parts.split(',')) 
     for parts in given_string.split('|')]
[{'age': '58', 'name': 'mickey'}, {'age': '47', 'name': 'minnie', 'weight': '60'}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4019648)
 Not that hard, try  help(dict)  in a console for more info :) 

  keys = dictionary.keys()
values = dictionary.values()
  

  

  items = dictionary.items()
  

 Which can be used to split them as well: 

  keys, values = zip(*dictionary.items())
  

 Note that the order of all of these is consistent within the same dictionary instance. The order of dictionaries in Python is arbitrary but constant for an instance. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54117684)
 Here's one way I might approach it: 

  result = {}
for x in zip(data['x'], data['y'], data['legend']):
    result.setdefault(x[2], []).append(x[:2])

# result will look like the following:
# {
#    'active': [(1, 10), (4, 40), (8, 80), ...],
#    ...
# }
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1780208)
 If there are always two keys you can use: 

  [{'key1':a, 'key2':b} for (a,b) in zip(d['key1'], d['key2'])]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53480504)
 You can use https://docs.python.org/3.6/library/collections.html#collections.defaultdict for an O( n ) solution, remembering to use  tuple  keys, as  list  is not hashable: 

  from collections import defaultdict

d = {85992: ['teardrop', 'list2015'], 86107: ['teardrop', 'list2015'],
     82364: ['macron', 'paris', 'palace'], 516253: ['liberia', 'vietnam'],
     746235: ['democratic', 'national'], 861073: ['macron', 'paris', 'palace']}

dd = defaultdict(list)

for k, v in d.items():
    dd[tuple(v)].append(k)

print(dd)

defaultdict(list,
            {('democratic', 'national'): [746235],
             ('liberia', 'vietnam'): [516253],
             ('macron', 'paris', 'palace'): [82364, 861073],
             ('teardrop', 'list2015'): [85992, 86107]})
  

 
   draw up a CSV file for each individual set of values 
 

 For this part of your problem, just iterate your  defaultdict : 

  for k, v in dd.items():
    df = pd.DataFrame(v)
    df.to_csv('_'.join(k) + '.csv', index=False)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54041017)
 Use the  csv  module. Read first row and store in the master key 

 Then read the rest of the rows and build a list of dictionaries using list slicing. To create the list, apply  split  on each cell value to create the 2-element lists. 

  import csv

with open("input.csv") as f:
    cr = csv.reader(f,delimiter=";")
    master_key = next(cr)[0]
    dict_list = [{row[0]:[x.split(",") for x in row[1:]]} for row in cr]

result = {master_key:dict_list}

>>> result
{'Playername1': [{'A': [['0', '1'], ['0', '2'], ['0', '3']]},
             {'B': [['1', '1'], ['1', '2'], ['1', '3']]}]}
  



