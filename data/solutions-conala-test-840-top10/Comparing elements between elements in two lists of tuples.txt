Query: Comparing elements between elements in two lists of tuples
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45836163)
 This way: 

   list1 = [1,2,3,'a','b']
 list2 = [1,2,3,'c','d']

 list1[:-2] == list2[:-2] => True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13168341)
 I think you want to use http://docs.python.org/2/library/stdtypes.html#sets here: 

  set(x[0] for x in list1).intersection(y[0] for y in list2)
  

 or using syntactic sugar: 

  {x[0] for x in list1} & {y[0] for y in list2}
  

 Both of which result in: 

  set(['a', 'b'])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13168356)
 I think it is probably clearer to use sets here (since you have no duplicate elements): 

  set1 = set( el[0] for el in list1 )
set2 = set( el[0] for el in list2 )
set3 = set1 & set2 # set intersection
# list3 = list(set3)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50486270)
 The fastest and most comprehensive way would be, to use two  sets  of  tuples : 

  set_list1 = set(tuple(sorted(d.items())) for d in list1)
set_list2 = set(tuple(sorted(d.items())) for d in list2)
  

 Find  overlapping  using  intersection : 

  set_overlapping = set_list1.intersection(set_list2)
  

 Find  difference  using  symmetric_difference  

  set_difference = set_list1.symmetric_difference(set_list2)
  

  Convert   tuple  back to  dict  

   for tuple_element in set_difference:
     list_dicts_difference.append(dict((x, y) for x, y in tuple_element))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13168383)
 Assuming that you want the set intersection of the first elements of the tuples, you can use the dictionary key views introduced in Python 2.7: 

  dict(list1).viewkeys() & dict(list2).viewkeys()
  

 This will be much more efficient than your solution for long lists, since it has linear runtime (as opposed to O(mn) for your solution), but returns the result in arbitrary order (as opposed to the order defined by  list1 ). 

 In Python 3.x, this would be 

  dict(list1).keys() & dict(list2).keys()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13168274)
 I'd use  zip() : 

  In [25]: l1 = [('a', 2), ('b', 3), ('z', 5)]

In [26]: l2 = [('a', 1), ('b', 2), ('c', 3)]

In [27]: [x[0] for x,y in zip(l1,l2) if x[0]==y[0]]
Out[27]: ['a', 'b']
  

  EDIT:  After reading your comment above it looks like you're looking for something like this: 

  In [36]: [x[0] for x in l1 if any(x[0]==y[0] for y in l2)]
Out[36]: ['a', 'b']
  

 or using  sets : 

  In [43]: from operator import itemgetter

In [44]: set(map(itemgetter(0),l1)) & set(map(itemgetter(0),l2))
Out[44]: set(['a', 'b'])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53274955)
 You can collect your tuples in a https://docs.python.org/3/library/collections.html#collections.defaultdict, then report the lists that have more than one duplicate: 

  from collections import defaultdict

lst = [(0, 2), (1, 0), (2, 1), (3, 2), (2, 0)]

dups = defaultdict(list)
for fst, snd in lst:
   dups[snd].append((fst, snd))

print([v for k, v in dups.items() if len(v) > 1])
# [[(0, 2), (3, 2)], [(1, 0), (2, 0)]]
  

 Or keep the duplicates in a dictionary for easy lookups: 

  print({k: v for k, v in dups.items() if len(v) > 1})
# {2: [(0, 2), (3, 2)], 0: [(1, 0), (2, 0)]}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41685508)
 Sort both the  tuple  and compare them. For example: 

  >>> tuple_1 = (('a',5),('n',4),('c',8))
>>> tuple_2 = (('c',8),('n',4),('a',5))

# Non-sorted --> unequal; issue you are currently facing
>>> tuple_1 == tuple_2
False

# comparing sorted tuples -- equal 
>>> sorted(tuple_1) == sorted(tuple_2)
True
  

 If the elements of both the tuples are  unique , you may also compare them via using  set  as: 

  >>> set(tuple_1) == set(tuple_2)
True
  

 

 As a side note, you do not have to convert the  dict  to  tuple  in order to compare the content of dictionaries. You may directly compare the  dict  objects as: 

  >>> {1: 2, 3: 4} == {3: 4, 1: 2}
True
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45836414)
 If your lists are very large and you want to avoid duplicating them with  list1[:-2]==list2[:-2] , you can use a generator expression for a more memory-efficient solution: 

  all(a==b for a,b,_ in zip(list1, list2, range(len(list1)-2)))
  



