Query: How to reverse a dictionary in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10729907)
 use a dict comprehension (Python  2.7+  and  3.0+ ): 

  D = {'a':1,'b':2,'c':3}
inverse = {v: k for k, v in D.items()}
print(inverse)
# {1: 'a', 2: 'b', 3: 'c'}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15743140)
 To sort in reverse order: 

  collections.OrderedDict(sorted(tempdict.items(), reverse=True))
  

 To reverse an existing dict: 

  collections.OrderedDict(reversed(list(tempdict.items())))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21848238)
 You can create  reverse  dict: 

  >>> d = {i:k for k,v in dictionary_1.items() for i in v}
>>> d
{1: 'ABC', 2: 'ABC', 3: 'ABC', 4: 'DEF', 5: 'DEF', 6: 'DEF'}
>>> d[5]
'DEF'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5455636)
 Dictionaries are unordered so you cannot reverse them. The order of the current output is arbitrary. 

 That said, you can order the keys of course: 

  for i in sorted(a.keys(), reverse=True):
    print a[i];
  

 but this gives you the reverse order of the  sorted  keys, not necessarily the reverse order of the keys how they have been added. I.e. it won't give you  1 0 3  if your dictionary was: 

  a = {3:'3', 0:'0', 1:'1'}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5455643)
 Python dictionaries don't have any 'order' associated with them. It's merely a 'coincidence' that the dict is printing the same order. There are no guarantees that items in a dictionary with come out in any order. 

 If you want to deal with ordering you'll need to convert the dictionary to a list. 

  a = list(a) # keys in list
a = a.keys() # keys in list
a = a.values() # values in list
a = a.items() # tuples of (key,value) in list
  

 Now you can sort the list as normal, e.g.,  a.sort()  and reverse it as well, e.g.,  a.reverse()    


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3221483)
 You can make a reverse dictionary: 

  revdict = dict((v,k) for k,v in ref.items())
  

 then look up what you want: 

  assert revdict["def"] == "abc"
  

 Note this won't work if two keys map to the same value. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26582231)
 Another way: 

  list2 = []
for e in reversed(list1):
   list2.append(e)
  

 list1.reverse() reverses the original list. rather you could do in a for loop. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7361008)
 
 Convert dict to a list of (key, value) pairs with http://docs.python.org/library/stdtypes.html#dict.items 
 Reversing each element of list with http://docs.python.org/library/functions.html#reversed and http://docs.python.org/library/functions.html#map:  map(reversed, ... )  
  Convert list of (key, value) pairs to dictionary:  dict( ... )  

  >>> d = {'a': 1, 'b': 2}
>>> dict(map(reversed, d.items()))
{1: 'a', 2: 'b'}
   
 



