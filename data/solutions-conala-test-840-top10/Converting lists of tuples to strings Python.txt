Query: Converting lists of tuples to strings Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30196644)
 If you're happy that the level of recursion isn't going to get horrible (and you're using an up to date version of Python): 

  def unpack(obj):
    for x in obj:
        if isinstance(x, str):
            yield x
        elif isinstance(x, tuple):
            yield from unpack(x)
        else:
            raise TypeError

x = ('text', ('othertext', ('moretext', ('yetmoretext',))))
result = list(unpack(x))
print(result)
  

 Will give you: 

  ['text', 'othertext', 'moretext', 'yetmoretext']
  

 This will also work if there are more than 1 strings before the next tuple, or if there are tuples directly in tuples, or strings after tuples etc. You can also easily modify it to work with other types if you need, I've probably unnecessarily erred on the side of caution. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30196783)
 I've found the answer myself, I'll provide it here for future reference: 

  stringvar = []
while type(tuplevar) is tuple:
        stringvar.append(tuplevar[0])
        tuplevar=tuplevar[1]
stringvar.append(tuplevar)  # to get the last element. 
  

 Might not be the cleanest/shortest/most elegant solution, but it works and it seems quite "Pythonic". 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30197162)
 This is how I would approach it.  This is very similar to a previous answer, however it's more general in application, as it allows any type of iterable to be flattened, except for string-type objects (i.e., lists and tuples), and it also allows for the flattening of lists of non-string objects. 

  # Python 3.
from collections import abc

def flatten(obj):
    for o in obj:
        # Flatten any iterable class except for strings.
        if isinstance(o, abc.Iterable) and not isinstance(o, str):
            yield from flatten(o)
        else:
            yield o

data = ('a', ('b', 'c'), [1, 2, (3, 4.0)], 'd')
result = list(flatten(data))
assert result == ['a', 'b', 'c', 1, 2, 3, 4.0, 'd']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4284683)
 You could convert the tuples to strings by using the % operator with a list comprehension or generator expression, e.g.  

  ll = [(1,1), (2,2), (3,3)]
['%d@%d' % aa for aa in ll]
  

 This would return a list of strings like: 

  ['1@1', '2@2', '3@3']
  

 You can concatenate the resulting list of strings together for output.  http://skymind.com/~ocrow/python_string/ describes half a dozen different approaches with benchmarks and analysis of their relative merits. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11696333)
 This does it: 

  >>> l=[('this', 'is'), ('is', 'the'), ('the', 'first'), 
('first', 'document'), ('document', '.')]
>>> ['{} {}'.format(x,y) for x,y in l]
['this is', 'is the', 'the first', 'first document', 'document .']
  

 If your tuples are variable length (or not even), you can also do this: 

  >>> [('{} '*len(t)).format(*t).strip() for t in [('1',),('1','2'),('1','2','3')]]
['1', '1 2', '1 2 3']   #etc
  

  

  >>> [' '.join(t) for t in [('1',),('1','2'),('1','2','3'),('1','2','3','4')]]
['1', '1 2', '1 2 3', '1 2 3 4']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10775909)
  >>> fruits = "['apple', 'orange', 'banana']"
>>> import ast
>>> fruits = ast.literal_eval(fruits)
>>> fruits
['apple', 'orange', 'banana']
>>> fruits[1]
'orange'
  

 As pointed out in the comments http://docs.python.org/library/ast.html is  safe . From the docs: 

 
   Safely evaluate an expression node or a string containing a Python
  expression. The string or node provided may only consist of the
  following Python literal structures: strings, numbers, tuples, lists,
  dicts, booleans, and None. 
  
   This can be used for safely evaluating strings containing Python
  expressions from untrusted sources without the need to parse the
  values oneself. 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5506527)
 To convert  list_of_lists  to a tuple of tuples, use 

  tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11696117)
 Using  map()  and  join() : 

  tuple_list = [('this', 'is'), ('is', 'the'), ('the', 'first'), ('first', 'document'), ('document', '.')]

string_list = map(' '.join, tuple_list) 
  

 As inspectorG4dget pointed out, list comprehensions are the most pythonic way of doing this: 

  string_list = [' '.join(item) for item in tuple_list]
  



