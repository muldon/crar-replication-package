Query: Is there a function in python to split a word into a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/113681)
 The list function will do this 

  >>> list('foo')
['f', 'o', 'o']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/743922)
 
   I want my python function to split a sentence (input) and store each word in a list 
 

 The  str().split()  method does this, it takes a string, splits it into a list: 

  >>> the_string = "this is a sentence"
>>> words = the_string.split(" ")
>>> print(words)
['this', 'is', 'a', 'sentence']
>>> type(words)
<type 'list'> # or <class 'list'> in Python 3.0
  

 The problem you're having is because of a typo, you wrote  print(words)  instead of  print(word) : 

 Renaming the  word  variable to  current_word , this is what you had: 

  def split_line(text):
    words = text.split()
    for current_word in words:
        print(words)
  

 .. 

  def split_line(text):
    words = text.split()
    for current_word in words:
        print(current_word)
  

 If for some reason you want to manually construct a list in the for loop, you would use the list  append()  method, perhaps because you want to lower-case all words (for example): 

  my_list = [] # make empty list
for current_word in words:
    my_list.append(current_word.lower())
  

 Or more a bit neater, using a http://docs.python.org/tutorial/datastructures.html#list-comprehensions: 

  my_list = [current_word.lower() for current_word in words]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20270958)
 https://docs.python.org/library/shlex.html has a https://docs.python.org/library/shlex.html#shlex.split function. It differs from  str.split()  in that it does not preserve quotes and treats a quoted phrase as a single word: 

  >>> import shlex
>>> shlex.split("sudo echo 'foo && bar'")
['sudo', 'echo', 'foo && bar']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/743807)
 Splits the string in  text  on any consecutive runs of whitespace. 

  words = text.split()      
  

 Split the string in  text  on delimiter:  "," . 

  words = text.split(",")   
  

 The words variable will be a  list  and contain the words from  text  split on the delimiter. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30229184)
 You will need to call  split : 

  for element in words:
    for word in element.split(' '):
        print word
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22749723)
 Try this, using http://docs.python.org/2.7/library/functions.html#map for applying http://docs.python.org/2.7/library/functions.html#len over each word in the sentence, understanding that https://docs.python.org/2/library/string.html#string.split creates a list with each word in the sentence: 

  s = "python is pretty fun to use"
map(len, s.split())       # assuming Python 2.x
list(map(len, s.split())) # assuming Python 3.x
  

 Or alternatively, you can use a http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions for the same effect: 

  [len(x) for x in s.split()]
  

 In both cases the result is a list with the length of each word in the sentence: 

  [6, 2, 6, 3, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12684122)
 The most Pythonic solution would be to use  collections.Counter : 

  >>> from collections import Counter
>>> Counter("this one and that one for one time".split()).items()
[('and', 1), ('for', 1), ('that', 1), ('this', 1), ('one', 3), ('time', 1)]
  

 If you want to write your own solution, I would try something like this: 

 
 Split up the string into a list of words. You can use  .split()  for this. 
 Construct a dictionary where each key is one word and the value is  0 . 
 Iterate over your list of words. For every word, add  1  to  your_dict[word] . 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17951315)
  Split text on whitespace, then trim punctuation. This carefully removes punctuation from the edge of words, without harming apostrophes inside words such as  we're . 

  >>> text
"'Oh, you can't help that,' said the Cat: 'we're all mad here. I'm mad. You're mad.'"

>>> text.split()
["'Oh,", 'you', "can't", 'help', "that,'", 'said', 'the', 'Cat:', "'we're", 'all', 'mad', 'here.', "I'm", 'mad.', "You're", "mad.'"]

>>> import string
>>> [word.strip(string.punctuation) for word in text.split()]
['Oh', 'you', "can't", 'help', 'that', 'said', 'the', 'Cat', "we're", 'all', 'mad', 'here', "I'm", 'mad', "You're", 'mad']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/28546820)
 You can split your file to words using the following command : 

  words=reduce(lambda x,y:x+y,[line.split() for line in f])
  

 Then count the number of words in your word list with loop over it and using  count  function : 

  w_list = ['hi', 'how', 'are', 'you']
with open("hi.txt", "r") as f :
    words=reduce(lambda x,y:x+y,[line.split() for line in f])
    for w in w_list:
         print "your file has {} {}".format(words.count(w),w)
  



