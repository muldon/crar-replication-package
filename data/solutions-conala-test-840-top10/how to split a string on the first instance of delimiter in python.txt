Query: how to split a string on the first instance of delimiter in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11009314)
 From the http://docs.python.org/library/stdtypes.html#str.split 

 
   str.split([sep[, maxsplit]]) 
  
   Return a list of the words in the string, using sep as the delimiter string. 
  If maxsplit is given, at most maxsplit splits are done (thus, the list will have at
  most maxsplit+1 elements) 
 

  >>> 'jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,'.split('=',1)
['jvm.args', ' -Dappdynamics.com=true, -Dsomeotherparam=false,']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11009216)
 I think this should work : 

  lineSplit = line.split("=")
key = lineSplit[0]
value = "=".join(lineSplit[1:])
  

 As someone suggested in comments: you can just parse through string once and locate "=" ,  followed by splitting it from that point. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6903597)
 From http://docs.python.org/library/stdtypes.html#str.split: 

 
    str.split([<i>sep</i>[, <i>maxsplit</i>]])  
  
   Return a list of the words in the string, using  sep  as the delimiter string. If  maxsplit  is given, at most  maxsplit  splits are done (thus, the list will have at most  maxsplit+1  elements). 
 

  s.split('mango', 1)[1]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11009205)
 This is what http://docs.python.org/library/stdtypes.html#str.partition is for: 

  >>> 'jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,'.partition('=')
('jvm.args', '=', ' -Dappdynamics.com=true, -Dsomeotherparam=false,')
  

 From the docs: 

 
    str.partition(sep)  
  
   Split the string at the first occurrence of sep,
  and return a 3-tuple containing the part before the separator, the
  separator itself, and the part after the separator. If the separator
  is not found, return a 3-tuple containing the string itself, followed
  by two empty strings. 
  
   New in version 2.5. 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54299007)
 I'd just split then rejoin: 

  text = "The cat jumped over the moon very quickly"
words = text.split()
first_half = " ".join(words[:len(words)//2])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49581153)
 If you put the pattern in a capture group, the delimiters appear in the results: 

  >>> string = '$aText$bFor$cStack$dOverflow'
>>> re.split(r'(\$\w)', string)
['', '$a', 'Text', '$b', 'For', '$c', 'Stack', '$d', 'Overflow']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4095669)
  split  actually splits on one or more occurrences of the delimiter. So  " a   b        c ".split()  and "a b c".split() both result in the same  list  i.e.  ['a','b','c'] .  join  only adds a single instance of the delimiter in between consecutive elements of the  list . " ".join(['a','b','c']) gives us "a b c"`, which matches out second string but not the first string. 

  >>> original="     a        b           c    "
>>> " ".join(original.split())
'a b c'
  

 BTW, using  string.split  and  string.join  is deprecated. Simply call them as methods of the string you are working on (as in my examples).  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48424275)
 There is no point to use the  csv.reader  function if you intend to delimitate manually. You can instead use  open  and split the line at the first instance of '|' as shown below: 

  with open('actions2.csv', 'r') as csvfile_actions2:
    for row in csvfile_actions2:
        row2 = row[0:23].split('|',1)
        print(row2)
  

 The  split('|',1)  function will split the string only at the first '|' character. If you wish to remove the whitespace, you can also add  .replace(' ','')  before  split . 

 Alternatively, if your csv file is only 3 columns and the extra '|' characters only appear in column 2 as shown in your example, then you can recombine them after using  csv.reader  

  with open('actions2.csv', 'r') as csvfile_actions2:
    reader = csv.reader(csvfile_actions2, delimiter='|')
    for row in reader:
        if len(row) == 4:
            row = [row[0], row[1] + '|' + row[2], row[3]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43855232)
 Nobody mentions that the https://docs.python.org/3.6/library/stdtypes.html?highlight=split#str.split function can have an  maxsplit  argument: 

 
   str.split(sep=None, maxsplit=-1) 
  
   return a list of the words in the string, using  sep  as the delimiter string. If  maxsplit  is given, at most  maxsplit  splits are done (thus, the list will have at most  maxsplit +1 elements). 
 

 So the solution is only: 

  table.split('_', 1)[1]
  



