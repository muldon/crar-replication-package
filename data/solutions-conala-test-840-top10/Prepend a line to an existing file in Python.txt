Query: Prepend a line to an existing file in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4454341)
 You can save one write call with this: 

  f.write('#testfirstline\n' + temp)
  

 When using 'r+', you would have to rewind the file after reading and before writing. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10850588)
 This does the job without reading the whole file into memory, though it may not work on Windows 

  def prepend_line(path, line):
    with open(path, 'r') as old:
        os.unlink(path)
        with open(path, 'w') as new:
            new.write(str(line) + "\n")
            shutil.copyfileobj(old, new)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4454470)
 Other approach: 

  with open("infile") as f1:
    with open("outfile", "w") as f2:
        f2.write("#test firstline")
        for line in f1:
            f2.write(line)
  

  

  open("outfile", "w").write("#test firstline\n" + open("infile").read())
  

 Thanks for the opportunity to think about this problem :) 

 Cheers 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42311753)
 To put code to NPE's answer, I think the most efficient way to do this is: 

  def insert(originalfile,string):
    with open(originalfile,'r') as f:
        with open('newfile.txt','w') as f2: 
            f2.write(string)
            f2.write(f.read())
    os.rename('newfile.txt',originalfile)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49546923)
 Different Idea: 

 (1) You save the original file as a variable. 

 (2) You overwrite the original file with new information. 

 (3) You append the original file in the data below the new information. 

 Code: 

  with open(<filename>,'r') as contents:
      save = contents.read()
with open(<filename>,'w') as contents:
      contents.write(< New Information >)
with open(<filename>,'a') as contents:
      contents.write(save)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4454598)
 I would stick with separate reads and writes, but we certainly can express each more concisely: 

 Python2: 

  with file('filename', 'r') as original: data = original.read()
with file('filename', 'w') as modified: modified.write("new first line\n" + data)
  

 Python3:   

  with open('filename', 'r') as original: data = original.read()
with open('filename', 'w') as modified: modified.write("new first line\n" + data)
  

 Note: file() function is not available in python3. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20923090)
 Here's a 3 liner that I think is clear and flexible. It uses the list.insert function, so if you truly want to prepend to the file use l.insert(0, 'insert_str'). When I actually did this for a Python Module I am developing, I used l.insert(1, 'insert_str') because I wanted to skip the '# - - coding: utf-8 - -' string at line 0. Here is the code. 

  f = open(file_path, 'r'); s = f.read(); f.close()
l = s.splitlines(); l.insert(0, 'insert_str'); s = '\n'.join(l)
f = open(file_path, 'w'); f.write(s); f.close()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5914741)
 There's no way to do this with any built-in functions, because it would be terribly inefficient. You'd need to shift the existing contents of the file down each time you add a line at the front. 

 There's a Unix/Linux utility  tail  which can read from the end of a file. Perhaps you can find that useful in your application. 



