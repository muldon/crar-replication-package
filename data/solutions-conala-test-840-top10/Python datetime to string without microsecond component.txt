Query: Python datetime to string without microsecond component
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41584336)
 In Python 3.6: 

  from datetime import datetime
datetime.datetime.now().isoformat(' ', 'seconds')
'2017-01-11 14:41:33'
  

 https://docs.python.org/3.6/library/datetime.html#datetime.datetime.isoformat 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48559441)
 We can try something like below 

  import datetime

date_generated = datetime.datetime.now()
date_generated.replace(microsecond=0).isoformat(' ').partition('+')[0]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8000814)
 Since not all  datetime.datetime  instances have a microsecond component (i.e. when it is zero), you can partition the string on a "." and take only the first item, which will always work: 

  unicode(datetime.datetime.now()).partition('.')[0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54169505)
  

  import datetime
now = datetime.datetime.now()
now = now.replace(microsecond=0)  # To print now without microsecond.

# To print now:
print(now)
  

 output: 

  2019-01-13 14:40:28
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41814672)
 This is the way I do it.  

  import datetime
datetime.datetime.now().replace(microsecond=0).isoformat()
# Returns: '2017-01-23T14:58:07'
  

 You can replace the 'T' if you don't want  

  datetime.datetime.now().replace(microsecond=0).isoformat(' ')
# Returns: '2017-01-23 15:05:27'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8000168)
 Keep the first 19 characters that you wanted via slicing: 

  >>> str(datetime.datetime.now())[:19]
'2011-11-03 14:37:50'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8000106)
  

  >>> import time
>>> time.strftime("%Y-%m-%d %H:%M:%S")
'2011-11-03 11:31:28'
  

 By default this uses local time, if you need UTC you can use the following: 

  >>> time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
'2011-11-03 18:32:20'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7999977)
 If you want to format a  datetime  object in a specific format that is different from the standard format, it's best to explicitly specify that format: 

  >>> datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
'2011-11-03 18:21:26'
  

 See https://docs.python.org/3/library/datetime.html?highlight=strftime#strftime-and-strptime-behavior for an explanation of the  %  directives. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13838577)
 You can clear down the second and microsecond component of a datetime value like so: 

  dt = datetime.datetime.now()
#Now get rid of seconds and microseconds component:
dt = dt.replace(second=0, microsecond=0)
  

 This would allow you to compare datetimes to minute granularity. 

 If you just want to print the date without a second/microsecond component, then use the appropriate format string: 

  dt = datetime.datetime.now()
print dt.strftime("%Y/%m/%d %H:%M")

>>> '2012/12/12 12:12'
  



