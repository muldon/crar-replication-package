Query: How do I coalesce a sequence of identical characters into just one?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2814003)
 If you really only want to coalesce hyphens, use the other suggestions.  Otherwise you can write your own function, something like this: 

  >>> def coalesce(x):
...     n = []
...     for c in x:
...         if not n or c != n[-1]:
...             n.append(c)
...     return ''.join(n)
...
>>> coalesce('My---sun--is------very-big---.')
'My-sun-is-very-big-.'
>>> coalesce('aaabbbccc')
'abc'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2814090)
 If you want to replace  any  run of consecutive characters, you can use 

  >>> import re
>>> a = "AA---BC++++DDDD-EE$$$$FF"
>>> print(re.sub(r"(.)\1+",r"\1",a))
A-BC+D-E$F
  

 If you only want to coalesce non-word-characters, use 

  >>> print(re.sub(r"(\W)\1+",r"\1",a))
AA-BC+DDDD-EE$FF
  

 If it's really just hyphens, I recommend unutbu's solution. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2813862)
  

  >>> import re
>>> re.sub("-+", "-", "My---sun--is------very-big---.")
'My-sun-is-very-big-.'
  

 the regular expression  "-+"  will look for 1 or more  "-" . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2814063)
 As usual, there's a nice  itertools  solution, using  groupby : 

  >>> from itertools import groupby
>>> s = 'aaaaa----bbb-----cccc----d-d-d'
>>> ''.join(key for key, group in groupby(s))
'a-b-c-d-d-d'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2814601)
  

  '-'.join(filter(lambda w: len(w) > 0, 'My---sun--is------very-big---.'.split("-")))
  

 Or going with Tim and FogleBird's previous suggestion, here's a more general method: 

  def coalesce_factory(x):
    return lambda sent: x.join(filter(lambda w: len(w) > 0, sent.split(x)))

hyphen_coalesce = coalesce_factory("-")
hyphen_coalesce('My---sun--is------very-big---.')
  

 Though personally, I would use the re module first :) 

 
 mcpeterson 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45710109)
 Seems like the  convert_value  of the https://github.com/django/django/blob/master/django/contrib/gis/db/models/aggregates.py#L39 method doesn't get called during the  Coalesce  call, like it returns the first not null objects from the left without letting it finish the whole process...  
This is very strange indeed and probably the @django team should be notified (it maybe by design, so at least they can clarify on the subject!) 

 

 In the mean time you can work around the issue with one of the following ways: 

 
  Create your own  convert_value  function: 

  def my_convert_value(value):
    value = value[4:-1] 
    box_min, box_max = value.split(',') 
    xmin, ymin = map(int, box_min.split())
    xman, ymax = map(int, box_max.split())
    return (xmin, ymin, xmax, ymax)
  

 and that: 

  my_convert_value(
    Community.objects.annotate(
        extent=Coalesce(
            Extent('potential__geometry'), 
            Extent('geometry')
    )).get(...).extent
)
  

  

  (2726687.04049593, 1221917.0, 2732056.725, 1223760.94563836)
   
  Omit the usage of  Coalesce  and replace it with this: 

  from django.db.models import CharField, Case, Value, When

Community.objects.annotate(
    extent=Extent(
        Case(
            When(
                potential__geometry__isnull=False,
                then=Value('potential__geometry'),
            ),
            When(
                geometry__isnull=False,
                then=Value('geometry'),
            ),
            default=Value('geometry'),
            output_field=CharField(),
        )
    )
).get(...).extent
  

  Explanation:     

 
  The  Extent()  method expects as argument the name of a geometry
column.  
   Coalesce  returns the value of the first not null field from left to right.  
  Utilizing django https://docs.djangoproject.com/en/1.11/ref/models/conditional-expressions/ we create a  Coalesce -like method  which returns the name of the first column that is not null , or  'geometry'  as a default.  
  Finally we apply  Extent  on the column that the previous returns.  
  
 

 If I find anything else I will let you know! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7941173)
 If you want a general format to replace any sequence of repeated characters with just one of those characters: 

  >>> import re
>>> s='aaa,,bb,c'
>>> re.sub(r'(.)(\1+)', r'\1', s)
'a,b,c'
  

 If you want to limit by only certain characters: 

  >>> re.sub(r'([\w])(\1+)', r'\1', s)
'a,,b,c'
>>> re.sub(r'([,])(\1+)', r'\1', s)
'aaa,bb,c'
  

 And your example: 

  >>> s='A..a.b.c'
>>> re.sub(r'([.])(\1+)', r'\1', s)
'A.a.b.c'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37075948)
 I know you asked for Python, but maybe the equivalent in Scala will help. Basically, you want to use the  Window  function  rank  along with the function  coalesce . First we define some test data: 

  val df = Seq(
  (Option(623), "cat"),
  (Option(245),"dog"),
  (None, "horse"),
  (None, "pig"),
  (Option(331), "narwhal"),
  (None, "snake")
).toDF("key","value")
  

 Then we will  rank  all the instances of a  key , then we will use  coalesce  to choose either the original  key  or the new  rank , then drop the  rank  column we created just to clean it up: 

  import org.apache.spark.sql.expressions._
import org.apache.spark.sql.functions._

val window = Window.partitionBy(col("key")).orderBy(col("value"))
df.withColumn("rank", rank.over(window))
  .withColumn("key", coalesce(col("key"),col("rank")))
  .drop("rank")
  



