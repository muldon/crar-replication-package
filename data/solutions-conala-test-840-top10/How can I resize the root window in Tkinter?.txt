Query: How can I resize the root window in Tkinter?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2261082)
 For a 500x500 window you would use 

  root.geometry("500x500")
  

 As for image resizing, I do not believe Tkinter supports it. You would have to use a library such as http://www.pythonware.com/products/pil/ to resize the image to the window resolution. - http://www.daniweb.com/code/snippet216637.html# - 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10465176)
 Add a root window and columnconfigure it so that your Frame widget expands too.  That's the problem, you've got an implicit root window if you don't specify one and the frame itself is what's not expanding properly. 

  root = Tk()
root.columnconfigure(0, weight=1)
app = Application(root)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49855040)
 if you use root.config(background="black") and your resize the window, you can see the black background. 

  import tkinter
import tkinter.ttk as tk
from tkinter import * 

root = tkinter.Tk()

frame= tk.Frame(root)
frame.grid(column=0, row=0)

Button(frame, text="Open file", command=None).grid(column=0, row=1 )
Label(frame, bg='black', fg="white", text="test test test test test test ").grid(column=0, row=2 )

root.config(background="blue")
root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36918534)
 If you know the size you want and have it you do: 

  root = # Your root window
myFrame = ttk.Frame(root, height=desiredHeight, width=desiredWidth)
myFrame.pack()
  

 So if you want it relative to the root: 

  root = # Your root window
rootHeight = root.winfo_height()
rootWidth = root.winfo_width()
# Say you want it to be 20 pixels smaller
myFrame = ttk.Frame(root, height=rootHeight-20, width=rootWidth-20)
myFrame.pack()
# OR
myFrame = ttk.Frame(root) # No set dimensions
myFrame.pack(padx=20, pady=20)
# This will make it have a padding of 20 pixels on height and width,
# with respect to parent rather than itself
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47934714)
 You need  sticky="ns"  to resize  Frame  in window and  fill='y', expand=True  to resize  Treeview  in  Frame  

  import tkinter as tk
from tkinter.ttk import Treeview

root = tk.Tk()

f1 = tk.Frame(root)
f2 = tk.Frame(root)

f1.grid(column=0, row=0, sticky="ns")
f2.grid(column=1, row=0, sticky="n")
root.rowconfigure(0, weight=1)

Treeview(f1).pack(expand=True, fill='y')
tk.Button(f2, text="DAT BUTTON IS IN F2").pack()
tk.Button(f2, text="DAT BUTTON IS IN F2").pack()
tk.Button(f2, text="DAT BUTTON IS IN F2").pack()

root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36333014)
 I have modified the above code so it is not in a class 

  #!/usr/bin/python3.5

from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk

root = Tk()
root.title("Title")
root.geometry('600x600')

def resize_image(event):
    new_width = event.width
    new_height = event.height
    image = copy_of_image.resize((new_width, new_height))
    photo = ImageTk.PhotoImage(image)
    label.config(image = photo)
    label.image = photo #avoid garbage collection

image = Image.open('image.gif')
copy_of_image = image.copy()
photo = ImageTk.PhotoImage(image)
label = ttk.Label(root, image = photo)
label.bind('<Configure>', resize_image)
label.pack(fill=BOTH, expand = YES)

root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6763807)
 I have the same problem on my system (Ubuntu 10.10, Python 2.6) and I think it has to do with the window manager and not Tkinter. When I use Openbox, I don't have the problem, and when I use root.overrideredirect(1), I don't have the problem either. 

 What you can do is make a ttk.Label themed to look like a sizegrip. Bind it to  and resize the window accordingly. Here's a window with a sizegrip made this way: 

  from tkinter import *
from tkinter import ttk

#
# Callbacks:
#
# Change "bottom_right_corner" to "size_nw_se" and
# "arrow" to "left_ptr" if running on Windows.
#

def button_press(event):
    sizegrip["cursor"] = "bottom_right_corner"

def resize(event):
    deltax = event.x_root - root.winfo_rootx()
    deltay = event.y_root - root.winfo_rooty()
    if deltax < 1:
        deltax = 1
    if deltay < 1:
        deltay = 1
    root.geometry("%sx%s" % (deltax, deltay))

def button_release(event):
    sizegrip["cursor"] = "arrow"

# Widget Creation
root = Tk()                    
sizegrip = ttk.Label(root, style="Sizer.TLabel")

# Styling
style = ttk.Style()
style.layout("Sizer.TLabel", [("Sizegrip.sizegrip",
                               {"side": "bottom", "sticky": "se"})])

# Geometry Management
sizegrip.pack(side="bottom", anchor="se")

# Bindings
sizegrip.bind("<ButtonPress-1>", button_press)
sizegrip.bind("<B1-Motion>", resize)
sizegrip.bind("<ButtonRelease-1>", button_release)

root.mainloop()
  

 I am used to Python 2, so sorry if I've messed up a bit on the syntax. I tested it with Python 2 imports ("from Tkinter import *", and "import ttk") and it works. Let's just hope the imports are all that's different in Python 3. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7966437)
 This creates a fullscreen window. Pressing  Escape  resizes the window to '200x200+0+0' by default. If you move or resize the window,  Escape  toggles between the current geometry and the previous geometry. 

  import Tkinter as tk

class FullScreenApp(object):
    def __init__(self, master, **kwargs):
        self.master=master
        pad=3
        self._geom='200x200+0+0'
        master.geometry("{0}x{1}+0+0".format(
            master.winfo_screenwidth()-pad, master.winfo_screenheight()-pad))
        master.bind('<Escape>',self.toggle_geom)            
    def toggle_geom(self,event):
        geom=self.master.winfo_geometry()
        print(geom,self._geom)
        self.master.geometry(self._geom)
        self._geom=geom

root=tk.Tk()
app=FullScreenApp(root)
root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/24074612)
 This is example application that uses Pillow to resize image on the Label as the label changes size: 

  from tkinter import *

from PIL import Image, ImageTk

root = Tk()
root.title("Title")
root.geometry("600x600")
root.configure(background="black")



class Example(Frame):
    def __init__(self, master, *pargs):
        Frame.__init__(self, master, *pargs)



        self.image = Image.open("./resource/Background.gif")
        self.img_copy= self.image.copy()


        self.background_image = ImageTk.PhotoImage(self.image)

        self.background = Label(self, image=self.background_image)
        self.background.pack(fill=BOTH, expand=YES)
        self.background.bind('<Configure>', self._resize_image)

    def _resize_image(self,event):

        new_width = event.width
        new_height = event.height

        self.image = self.img_copy.resize((new_width, new_height))

        self.background_image = ImageTk.PhotoImage(self.image)
        self.background.configure(image =  self.background_image)



e = Example(root)
e.pack(fill=BOTH, expand=YES)


root.mainloop()
  

 This is how it works using http://en.wikipedia.org/wiki/Lenna image as example: 

   



