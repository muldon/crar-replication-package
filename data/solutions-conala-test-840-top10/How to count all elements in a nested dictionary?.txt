Query: How to count all elements in a nested dictionary?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47404565)
 For arbitrary depth nested dictionaries: 

  def num_elements(x):
  if isinstance(x, dict):
    return sum([num_elements(_x) for _x in x.values()])
  else: return 1
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37893794)
 You could do this with a recursive function. 

  >>> x
{'a': 1, 'b': 2, 'c': 3, 'd': {'I': 1, 'II': 2, 'III': 3}, 'e': 5}
>>> def test(d):
...   cnt = 0
...   for e in d:
...     if type(d[e]) is dict:
...       cnt += test(d[e])
...     else:
...       cnt += 1
...   return cnt
...
>>> test(x)
7
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4581711)
 Do you only want the immediate children? If so, this is probably the best: 

  sum(len(x) for x in fc.values())
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52615309)
 If you convert to  tuples  you can use  dictionary comprehension  

  count_list = [tuple(i) for i in count_list]

d = {i: count_list.count(i) for i in set(count_list)}
  

 
  {('a', 'b'): 2, ('d', 'e'): 1, ('c',): 2, ('e',): 1}
  
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32432571)
  >>> for sublist in List1:
        c = Counter(sublist)
        print(c['A'] / sum(c.values()))

0.75
0.0
0.25
  

 

  

  >>> for sublist in List1:
        c = Counter(sublist)
        s = sum(c.values())
        print(c['A'] / s, c['B'] / s, c['C'] / s)

0.75 0.25 0.0
0.0 0.5 0.5
0.25 0.5 0.25
  

 If you want to get a list of all items in a sublist with their respective percentages, you need to iterate the counter: 

  >>> for sublist in List1:
        c = Counter(sublist)
        s = sum(c.values())
        for elem, count in c.items():
            print(elem, count / s)
        print()

A 0.75
B 0.25

B 0.5
C 0.5

A 0.25
B 0.5
C 0.25
  

 Or use a dictionary comprehension: 

  >>> for sublist in List1:
        c = Counter(sublist)
        s = sum(c.values())
        print({ elem: count / s for elem, count in c.items() })

{'A': 0.75, 'B': 0.25}
{'B': 0.5, 'C': 0.5}
{'A': 0.25, 'B': 0.5, 'C': 0.25}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42125287)
 Yeah, but using a dictionary comprehension makes no sense: 

  >>> sum(1 for v in data.values() if v['sector1'] == 'finance')
2
  



