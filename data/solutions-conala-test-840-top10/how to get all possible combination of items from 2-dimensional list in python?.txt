Query: how to get all possible combination of items from 2-dimensional list in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8249850)
 You need http://docs.python.org/library/itertools.html#itertools.product: 

  >>> list(itertools.product(*a))
[('a', 1), ('a', 2), ('b', 1), ('b', 2)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5688274)
 There may be a more efficient way, but this should work... 

  import itertools
import numpy as np

a = np.arange(24)
a = a.reshape(2,3,4)

colon = slice(None)
dimensions = [range(dim) + [colon] for dim in a.shape]

for dim in itertools.product(*dimensions):
    if dim.count(colon) == 1:
        print a[dim]
  

 This yields (I'm leaving out a trivial bit of code to print the left hand side of this...): 

  a[0,0,:] -->  [0 1 2 3]
a[0,1,:] -->  [4 5 6 7]
a[0,2,:] -->  [ 8  9 10 11]
a[0,:,0] -->  [0 4 8]
a[0,:,1] -->  [1 5 9]
a[0,:,2] -->  [ 2  6 10]
a[0,:,3] -->  [ 3  7 11]
a[1,0,:] -->  [12 13 14 15]
a[1,1,:] -->  [16 17 18 19]
a[1,2,:] -->  [20 21 22 23]
a[1,:,0] -->  [12 16 20]
a[1,:,1] -->  [13 17 21]
a[1,:,2] -->  [14 18 22]
a[1,:,3] -->  [15 19 23]
a[:,0,0] -->  [ 0 12]
a[:,0,1] -->  [ 1 13]
a[:,0,2] -->  [ 2 14]
a[:,0,3] -->  [ 3 15]
a[:,1,0] -->  [ 4 16]
a[:,1,1] -->  [ 5 17]
a[:,1,2] -->  [ 6 18]
a[:,1,3] -->  [ 7 19]
a[:,2,0] -->  [ 8 20]
a[:,2,1] -->  [ 9 21]
a[:,2,2] -->  [10 22]
a[:,2,3] -->  [11 23]
  

 The key here is that indexing  a  with (for example)  a[0,0,:]  is equivalent to indexing a with  a[(0,0,slice(None))] .  (This is just generic python slicing, nothing numpy-specific. To prove it to yourself, you can write a dummy class with just a  __getitem__  and print what's passed in when you index an instance of your dummy class.). 

 So, what we want is every possible combination of 0 to nx, 0 to ny, 0 to nz, etc and a  None  for each axis.  

 However, we want 1D arrays, so we need to filter out anything with more or less than one  None  (i.e. we don't want  a[:,:,:] ,  a[0,:,:] ,  a[0,0,0]  etc). 

 Hopefully that makes some sense, anyway... 

 Edit: I'm assuming that the exact order doesn't matter... If you need the exact ordering you list in your question, you'll need to modify this... 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10215797)
  def allOnes2d(L):
    return all(allOnes(a) for a in L)
  

 And to do an array of any dimension, use http://docs.python.org/library/itertools.html#itertools.chain to reduce the N-dimensional array to a regular one, then give it to your allOnes function.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10215864)
 For fast rectangular array use numpy. 

  import numpy
table= numpy.array([[1,1,1], [1,1,1], [1,1,1]])
print numpy.all( table == 1 )
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15150740)
 Use http://www.numpy.org/ arrays. 

 If you have an ordinary Python array, you can turn it into a numpy array and access its elements like you described: 

  a = [[1,2,3],[4,5,6],[7,8,9]]
A = numpy.array(a)
print A[1,1]
  

  

  5
  

 Another example: 

  A = numpy.zeros((3, 3))
for i in range(3):
    for j in range(3):
        A[i,j] = i*j
print A
  

 will give you: 

  [[ 0.  0.  0.]
 [ 0.  1.  2.]
 [ 0.  2.  4.]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21688531)
 Expanding my comment, a  list  of  dict s: 

  >>> list_of_dicts = [{'first_name':'greg', 'last_name':'schlaepfer'},
...                  {'first_name':'michael', 'last_name':'lester'}]
>>>
>>> list_of_dicts[0]['first_name']
'greg'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10216594)
 I like recursion for this kind for thing: 

  from collections import Iterable
def allOnes(I):
    if isinstance(I, Iterable):
        return all(allOnes(i) for i in I)
    else:
        return I == 1
  

 an example: 

  >>> L = [[1,1,1], (1,1,1), 1]
>>> allOnes(L)
True
>>> L = [[1,1,1], (1,0,1), 1]
>>> allOnes(L)
False
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31736748)
 As you indicated in the comments, what is happening is that  tag_train  is a one dimensional array with length 2059 , whereas  l2  is supposedly a 2 dimensional array with 2059 rows and 1 column. 

 So when you try to do subtraction it leads to a 2 dimensional array with 2059 rows and 2059 columns.  

 If you are 100% sure that l2 would only be one column then you can reshape that array to make it one dimensional before doing the subtraction.  

  l2.reshape((l2.shape[0],))
  

 

 Example/Demo - 

  In [1]: import numpy as np

In [2]: l1 = np.array([1,2,3,4])

In [3]: l2 = np.array([[5],[6],[7],[8]])

In [7]: l2.shape
Out[7]: (4, 1)

In [8]: l2-l1
Out[8]:
array([[4, 3, 2, 1],                 #Just to show that you get the behaviour when arrays are in 
       [5, 4, 3, 2],                 #different dimensions.
       [6, 5, 4, 3],
       [7, 6, 5, 4]])

In [19]: l2 = l2.reshape((l2.shape[0],))

In [25]: l2 = l2.reshape((l2.shape[0],))

In [26]: l2-l1
Out[26]: array([4, 4, 4, 4])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50163907)
 You can use  product  method by importing it from  itertools . 

  my_list = ['a', ['a', 'b'], ['c', 'd', 'e']]
list = list(itertools.product(*my_list))
print(list)
  

 Output 

  [('a', 'a', 'c')
('a', 'a', 'd')
('a', 'a', 'e')
('a', 'b', 'c')
('a', 'b', 'd')
('a', 'b', 'e')]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36224378)
 Just for the sake of showing a much simpler way of doing this using  list comprehensions , the  sorted  method and <code : 

  d = [[1, 3, 4], [2, 4, 4], [3, 4, 5]]

n = [sorted(l)[1:-1] for l in d]

print(n)

# [[3], [4], [4]]
  

 Some reading material on each of the items used to solve this problem:  

 
 https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions 
 https://docs.python.org/3/library/functions.html#sorted 
 https://stackoverflow.com/a/509295/1832539 
 

 To take care of duplicates, https://stackoverflow.com/a/36224499/1832539 answer by Padraic is very well done.  



