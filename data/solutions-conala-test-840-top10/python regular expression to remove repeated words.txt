Query: python regular expression to remove repeated words
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17238732)
  text = re.sub(r'\b(\w+)( \1\b)+', r'\1', text) #remove duplicated words in row
  

 The  \b  matches the empty string, but only at the beginning or end of a word. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13433616)
 for example: 

  >>> import re
>>> s = "`...```.....``...`....`````...`"
>>> re.sub(r'((?<!`)(``)*`(?!`))', r'\1\1', s)
'``...``````.....``...``....``````````...``'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42662229)
 You can use back reference in the pattern to match repeated characters and then replace it with two instances of the matched character, here  (.)\1+  will match a pattern that contains the same character two or more times, replace it with only two instances by  \1\1 : 

  import re
re.sub(r"(.)\1+", r"\1\1", s)
# "heyy how are youu, it's so cool here, cool."
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38862495)
 Note that, since the desired output includes  meat  but not  fleece , desired words are allowed to have repeated vowels, just not the same vowel repeated. 

 To select lines with no repeated vowel: 

  >>> [w for w in open('file.txt') if not re.search(r'([aeiou])\1', w)]
['eggs\n', 'meat\n', 'potato\n']
  

 The regex  [aeiou]  matches any vowel (you can include  y  if you like).  The regex  ([aeiou])\1  matches any vowel followed by the same vowel.  Thus,  not re.search(r'([aeiou])\1', w)  is true only for strings  w  that contain no repeated vowels. 

 Addendum</h3>

 If we wanted to exclude  meat  because it has two vowels in a row, even though they are not the  same  vowel, then: 

  >>> [w for w in open('file.txt') if not re.search(r'[aeiou]{2}', w)]
['eggs\n', 'potato\n']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8270124)
 To remove  only spaces  use http://docs.python.org/2/library/stdtypes.html#str.replace: 

  sentence = sentence.replace(' ', '')
  

 To remove  all whitespace characters  (space, tab, newline, and so on) you can use http://docs.python.org/2/library/stdtypes.html#str.split then http://docs.python.org/2/library/stdtypes.html#str.join: 

  sentence = ''.join(sentence.split())
  

 or a regular expression: 

  import re
pattern = re.compile(r'\s+')
sentence = re.sub(pattern, '', sentence)
  

 If you want to only remove whitespace from the beginning and end you can use http://docs.python.org/2/library/stdtypes.html#str.strip: 

  sentence = sentence.strip()
  

 You can also use http://docs.python.org/2/library/stdtypes.html#str.lstrip to remove whitespace only from the beginning of the string, and http://docs.python.org/2/library/stdtypes.html#str.rstrip to remove whitespace from the end of the string. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49101106)
 Here is a simple solution not using RegEx. 

  sentence = 'I am struggling to to make this this work'

def find_duplicates_in_string(words):
    """ Takes in a string and returns any duplicate words
        i.e. "this this"
    """
    duplicates = []
    words = words.split()

    for i in range(len(words) - 1):
        prev_word = words[i]
        word = words[i + 1]
        if word == prev_word:
            duplicates.append(word)
    return duplicates

print(find_duplicates_in_string(sentence)) 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31002654)
 Remove the '?' in your group, it makes the + qualifier eager, but you want a greedy one that matches as many repetitions as possible. 

  In [1]: re.match(r'(.+)\1+', 
         'qqqqgtcgagagagctacgagaqqqqgtcgagagagctacgagaqqqqgtcgagagagctacgaga').groups()
Out[1]: ('qqqqgtcgagagagctacgaga',)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49100846)
 This should work:  \b([A-Za-z0-9]+)\s+\1\b  

  \b  matches a word boundary,  \s  matches whitespace and  \1  specifies the first capture group. 

  >>> s = 'I am struggling to to make this this work'
>>> re.findall(r'\b([A-Za-z0-9]+)\s+\1\b', s)
['to', 'this']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35226372)
 If it's only repeated letters you want to strip then using the regular expression module  re  might help: 

  >>> import re
>>> re.sub(r'(.)\1+$', r'\1', 'cool')
'cool'
>>> re.sub(r'(.)\1+$', r'\1', 'coolllll')
'cool'
  

 (It leaves 'cool' untouched.) 

 For leading repeated characters the correct substitution would be: 

  >>> re.sub(r'^(.)\1+', r'\1', 'mmmmonday')
'monday'
  

 Of course this fails for words that legitimately start or end with repeated letters ...  



