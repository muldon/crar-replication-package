Query: How to split a word into letters in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26548800)
  s = 'Our lives begin to end the day we become silent about things that matter'
words = s.split() # get whitespace-separated words
print([w for w in words if is_vowel_word(w)]) # result
  

 where  is_vowel_word()  could be: 

  def is_vowel_word(word, vowels=set('aeiou')):
    """Whether half of the letters in a word are vowels."""
    letters = set(word.lower()) # count each distinct letter in the word once
    return len(vowels & letters) >= len(letters - vowels)
  

 Output</h3>

  ['Our', 'to', 'we', 'about']
  

 Or we count duplicate letters in the word too: 

  def is_vowel_word_dups(word, vowels='aeiou'):
    """Whether half of the letters (counting duplicates) in a word are vowels.

    """
    return 2*sum(c in vowels for c in word.lower()) >= len(word)
  

 Output</h3>

  ['Our', 'to', 'we', 'become', 'about']
  

 Note: the latter list has word  'become'  where  e  occurs twice: the word has  2  unique vowels ('eo') and  3  consonants ('bcm') that is why it is not included in the first list. 

 Here's a just for fun version that counts vowel  sounds  in a word instead of hardcoding  'aeiou'  letters: 

  #!/usr/bin/env python
from nltk.corpus import cmudict # $ pip install nltk
# $ python -c "import nltk; nltk.download('cmudict')"

def is_vowel_word_snd(word, pronunciations=cmudict.dict()):
    """Whether a word pronunciation contains at least half vowel *sounds*."""
    # check all pronuncations of the word
    return any(2*sum(syl[-1].isdigit() for syl in syllables) >= len(syllables)
               for syllables in pronunciations.get(word.lower(), []))

s = 'Our lives begin to end the day we become silent about things that matter'
words = s.split() # get whitespace-separated words
print([w for w in words if is_vowel_word_snd(w)])
  

 Output</h3>

  ['Our', 'to', 'the', 'day', 'we', 'about', 'matter']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35277130)
 You can generate a mapping from words to word lengths, as follows: 

  s = "this is a sentence"
words = s.split()
letter_count_per_word = {w:len(w) for w in words}
  

  

  letter_count_per_word == {'this': 4, 'a': 1, 'is': 2, 'sentence': 8}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/113681)
 The list function will do this 

  >>> list('foo')
['f', 'o', 'o']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13499103)
 You could use http://docs.python.org/2/library/stdtypes.html#str.translate: 

  import string

def unique(seq): 
    # http://www.peterbe.com/plog/uniqifiers-benchmark (Dave Kirby)
    # Order preserving
    seen = set()
    return [x for x in seq if x not in seen and not seen.add(x)]

def word2num(word):
    uniqs = unique(word)
    assert len(uniqs) < 10
    d = dict(zip(map(ord,uniqs),
                 map(unicode,string.digits[1:])))
    return word.translate(d)

s = u'areyo uanap ppple'
for word in s.split():
    print(word2num(word))
  

  

  12345
12324
11123
  

 Note that it is unclear what you want to happen if there are more than 9 unique letters in a word. I've used an  assert  to complain if  word2num  is passed such a word. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35279584)
 Actually, Python has a collections class called Counter which will count the number of occurrences of each word for you. 

  from collections import Counter

my_sentence = 'Python is a widely used programming language'
print Counter(my_sentence.split())
  

 Output 

 Counter({'a': 1, 'used': 1, 'language': 1, 'Python': 1, 'is': 1, 'programming': 1, 'widely': 1}) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15418591)
  list(word)  

 you can pass it to  list  

  >>> list('word')
['w', 'o', 'r', 'd']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19309538)
  def capitalize(s):
     s, result = s.title(), ""
     for word in s.split():
        result += word[:-1] + word[-1].upper() + " "
     return result[:-1]     #To remove the last trailing space.

print capitalize("i like cats")
  

  Output  

  I LikE CatS 
  

 Apply  title()  to the whole string, then for each word in the string capitalize the last character and the append them back together. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27383805)
 If you want to iterate through letters individually, no need for  split . Strings are directly iterable. 

  for char in line:
  

 ...Although, this will also count whitespace such as " ". If you want only letters, you might iterate through the words, and then iterate through each character in the word. 

  for word in line.split():
    for char in word:
  

 

 Incidentally, Python already has a  Counter  class, so you don't necessarily need to construct a frequency dict manually. 

  >>> import collections
>>> print collections.Counter("hello how are you doing today?")
Counter({' ': 5, 'o': 5, 'a': 2, 'e': 2, 'd': 2, 'h': 2, 'l': 2, 'y': 2, 'g': 1, 'i': 1, 'n': 1, 'r': 1, 'u': 1, 't': 1, 'w': 1, '?': 1})
  



