Query: Replace all non-alphanumeric characters in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12985459)
  

  import re

s = re.sub('[^0-9a-zA-Z]+', '*', s)
  

 Example: 

  >>> re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')
'h*ell*o*w*orld'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25140678)
  

  [^\w]|\d
  

 EDIT: 

 As @Avinash said this not removes  _ . If you want to remove also  _  use: 

  [^\w]|[\d_]
  

 and if you also want to replace multiple spaces with a single one use: 

  ([^\w]|[\d_])+
  

 Here's your example with an addition of underscores: 

  In [1]: import re

In [2]: s = "baa!!!!! baa sheep23? baa baa___"

In [3]: re.sub("([^\w]|[\d_])+", " ",  s)
Out[3]: 'baa baa sheep baa baa '

In [4]: re.sub("([^\w]|[\d_])+", " ",  s).split()
Out[4]: ['baa', 'baa', 'sheep', 'baa', 'baa']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25140603)
 Use https://docs.python.org/2/library/stdtypes.html#str.translate: 

  >>> from string import punctuation, digits
>>> s = "baa!!!!! baa sheep23? baa baa"
>>> s.translate(None, punctuation+digits)
'baa baa sheep baa baa'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25140599)
 No need to do regex here, just a simple comprehension will work: 

  >>> import string
>>> word = "baa!!!!! baa sheep23? baa baa"
>>> "".join([l for l in word if l in string.ascii_letters+string.whitespace])
'baa baa sheep baa baa'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27938880)
  re.sub(r'[^a-zA-Z0-9=]', '',mystring)
  

 You can add whatever you want like  _  whichever you want to save. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27938864)
 I believe the approach you describe in perl could also be used in python, eg: 

  re.sub(r'[^\w=]', '',mystring)
  

 would remove everything except word-characters and = 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38924744)
 Use  \W  which is equivalent to  [^a-zA-Z0-9_] . Check the documentation, https://docs.python.org/2/library/re.html 

  Import re
s =  'h^&ell`.,|o w]{+orld'
replaced_string = re.sub('\W+', '*', s)
output: 'h*ell*o*w*orld'
  

 update: This solution will exclude underscore as well. If you want only alphabets and numbers to be excluded, then solution by nneonneo is more appropriate.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25140575)
  

  [^a-zA-Z]
  

 This matches anything that is not a letter. 

 Or this if you want to keep spaces: 

 [^a-zA-Z\s] 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22096493)
 . 

  print "".join([ c if c.isalnum() else "*" for c in s ])
  

 This doesn't deal with grouping multiple consecutive non-matching characters though, i.e.  

  "h^&i => "h**i  not  "h*i"  as in the regex solutions. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22126543)
 Use word boundary( \b ) 

  >>> import re
>>> re.sub(r'\bn\b', 'REPL', 'sin(2 pi*n d)')
'sin(2 pi*REPL d)'
  

 According to the http://docs.python.org/2/library/re.html: 

 
    \b  
  
   Matches the empty string, but only at the beginning or end of a word.
  A word is defined as a sequence of alphanumeric or underscore
  characters, so the end of a word is indicated by whitespace or a
  non-alphanumeric, non-underscore character. Note that formally, \b is
  defined as the boundary between a \w and a \W character (or vice
  versa), or between \w and the beginning/end of the string, ... 
 



