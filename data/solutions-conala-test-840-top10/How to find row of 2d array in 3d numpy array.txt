Query: How to find row of 2d array in 3d numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30692882)
 Using  argwhere()  is a good idea, but you also need to use  all()  to get your desired output: 

  >>> np.argwhere((arr == [0, 4]).all(axis=2))
array([[0, 3],
       [0, 4],
       [1, 5],
       [1, 6],
       [1, 7],
       [2, 5],
       [2, 6]])
  

 Here  all()  is used to check each row is  [True, True]  following the comparison (that is, the row is equal to  [0, 4] ). In a 3D array,  axis=2  points along rows.  

 This reduces the number of dimensions to two, and  argwhere()  returns the desired array of indices. 

 

 Regarding performance, this method should handle arrays of the size you specify fairly quickly: 

  In [20]: arr = np.random.randint(0, 10, size=(10000, 100, 2))
In [21]: %timeit np.argwhere((arr == [0, 4]).all(axis=2))
10 loops, best of 3: 44.9 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12395487)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html: 

  >>> import numpy as np
>>> a = np.random.random((11, 13))
>>> b = np.random.random((11, 13))
>>> c = np.random.random((11, 13))
>>> 
>>> d = np.dstack([a,b,c])
>>> 
>>> d.shape
(11, 13, 3)
>>> 
>>> a[1,5], b[1,5], c[1,5]
(0.92522736614222956, 0.64294050918477097, 0.28230222357027068)
>>> d[1,5]
array([ 0.92522737,  0.64294051,  0.28230222])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31003889)
 you can do this with  numpy.argmax  and  numpy.indices . 

  import numpy as np

X = np.array([[[10, 1],[ 2,10],[-5, 3]],
              [[-1,10],[ 0, 2],[ 3,10]],
              [[ 0, 3],[10, 3],[ 1, 2]],
              [[ 0, 2],[ 0, 0],[10, 0]]])

Y = np.array([[[11, 2],[ 3,11],[-4, 100]],
              [[ 0,11],[ 100, 3],[ 4,11]],
              [[ 1, 4],[11, 100],[ 2, 3]],
              [[ 100, 3],[ 1, 1],[11, 1]]])

ind = X.argmax(axis=0)
a1,a2=np.indices(ind.shape)

print X[ind,a1,a2]
# [[10 10]
#  [10 10]
#  [10 10]]

print Y[ind,a1,a2]
# [[11 11]
#  [11 11]
#  [11 11]]
  

 The answer https://stackoverflow.com/a/5802380/588071 provided the inspiration for this 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36382952)
 The 'contains' function in the https://github.com/EelcoHoogendoorn/Numpy_arraysetops_EP package (disclaimer: I am its author) can be used to make queries of this kind. It implements a solution similar to the one offered by Saullo. 

  import numpy_indexed as npi
test = [[[0, 3], [3, 0]]]
# check which elements of arr are present in test (checked along axis=0 by default)
flags = npi.contains(test, arr)
# if you want the indexes:
idx = np.flatnonzero(flags)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36381351)
 In you can use  np.in1d  after defining a new data type which will have the memory size of each row in your  arr . To define such data type: 

  mydtype = np.dtype((np.void, arr.dtype.itemsize*arr.shape[1]*arr.shape[2]))
  

 then you have to convert your  arr  to a 1-D array where each row will have  arr.shape[1]*arr.shape[2]  elements: 

  aView = np.ascontiguousarray(arr).flatten().view(mydtype)
  

 You are now ready to look for your 2-D array pattern  [[0, 3], [3, 0]]  which also has to be converted to  dtype : 

  bView = np.array([[0, 3], [3, 0]]).flatten().view(mydtype)
  

 You can now check the occurrencies of  bView  in  aView : 

  np.in1d(aView, bView)
#array([ True, False, False,  True], dtype=bool)
  

 This mask is easily converted to indices using  np.where , for example. 

 Timings (updated) 

 THe following function is used to implement this approach: 

  def check2din3d(b, a):
        """
        Return where `b` (2D array) appears in `a` (3D array) along `axis=0`
        """
        mydtype = np.dtype((np.void, a.dtype.itemsize*a.shape[1]*a.shape[2]))
        aView = np.ascontiguousarray(a).flatten().view(mydtype)
        bView = np.ascontiguousarray(b).flatten().view(mydtype)
        return np.in1d(aView, bView)
  

 The updated timings considering @ayhan comments showed that this method can be faster the np.argwhere, but the different is not significant and for large arrays like below, @ayhan's approach is considerably faster: 

  arrLarge = np.concatenate([arr]*10000000)
arrLarge = np.concatenate([arrLarge]*10, axis=2)

pattern = np.ascontiguousarray([[0,3]*10, [3,0]*10])

%timeit np.argwhere(np.all(arrLarger==pattern, axis=(1,2)))
#1 loops, best of 3: 2.99 s per loop

%timeit check2din3d(pattern, arrLarger)
#1 loops, best of 3: 4.65 s per loop
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36381344)
  

  np.argwhere(np.all(arr==[[0,3], [3,0]], axis=(1,2)))
  

 

 How it works: 

  arr == [[0,3], [3,0]]  returns  

  array([[[ True,  True],
        [ True,  True]],

       [[ True, False],
        [False,  True]],

       [[False,  True],
        [ True, False]],

       [[ True,  True],
        [ True,  True]]], dtype=bool)
  

 This is a three dimensional array where the innermost axis is 2. The values at this axis are: 

  [True, True]
[True, True]
[True, False]
[False, True]
[False, True]
[True, False]
[True, True]
[True, True]
  

 Now with  np.all(arr==[[0,3], [3,0]], axis=2)  you are checking if both elements on a row are  True  and its shape will be reduced to (4, 2) from (4, 2, 2).  

  array([[ True,  True],
       [False, False],
       [False, False],
       [ True,  True]], dtype=bool)
  

 You need one more step of reducing as you want both of them to be the same (both  [0, 3]  and  [3, 0] . You can do it either by reducing on the result (now the innermost axis is 1): 

  np.all(np.all(test, axis = 2), axis=1)
  

 Or you can also do it by giving a tuple for the axis parameter to do the same thing step by step (first innermost, then one step higher). The result will be: 

  array([ True, False, False,  True], dtype=bool)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32999546)
 http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html would flatten its inputs. So, you can feed it  Z  and a stacked version of  s0 ,  s1 , giving us a boolean array that could be reshaped into an array of the same shape as  Z . Then, you need to check for all TRUE rows in it for the matching indices. The implementation would look like this - 

  S = np.row_stack((s0,s1))
out = np.where((np.in1d(Z,S).reshape(Z.shape)).all(2))
  

 You can also use http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html to solve it like so - 

  out = np.where(((Z == S[:,None,None,:]).all(3)).any(0))
  

 If you would like the output stacked in an array - 

  outarr = np.column_stack((out))
  

 For creating  S , you can replace  np.row_stack  with  np.concatenate , which might be faster, like so - 

  S = np.concatenate((s0,s1)).reshape(-1,s0.size)
  

  

  In [145]: Z = np.zeros((10,20,3), dtype=int)
     ...: s0 = np.array([1,2,3])
     ...: s1 = np.array([4,5,6])
     ...: Z[1,2] = s0
     ...: Z[4,5] = s1
     ...: 

In [146]: np.where(((Z == S[:,None,None,:]).all(3)).any(0))
Out[146]: (array([1, 4]), array([2, 5]))

In [147]: np.where((np.in1d(Z,S).reshape(Z.shape)).all(2))
Out[147]: (array([1, 4]), array([2, 5]))

In [148]: np.column_stack((np.where(((Z == S[:,None,None,:]).all(3)).any(0))))
Out[148]: 
array([[1, 2],
       [4, 5]])

In [149]: np.column_stack((np.where((np.in1d(Z,S).reshape(Z.shape)).all(2))))
Out[149]: 
array([[1, 2],
       [4, 5]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37884520)
 To "identify and plot the 2D surface where a=0", you just need to subset the data where  a=0  and plot (shown below) If you are looking for a projection of the data onto that plane, then that is a little more complicated. 

  threeD = np.array([(x,y,z) for x in [0,1] for y in [1,2] for z in [5,6]])
twoD = np.array([(y,z) for (x,y,z) in threeD if x==0])
y,z = zip(*twoD)
plt.plot(y,z, 'o')
plt.xlim(0,3)
plt.ylim(0,7)
  

 https://i.stack.imgur.com/52wPs.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45692252)
 If you want all 2D arrays within one 3D array you can do: 

  arr = np.zeros((data.shape[0], 124, 32))

for idx, row in data.iterrows():
    arr[idx] = np.asarray(row).reshape(124, 32)
  

 Or as a one-liner list of arrays: 

  arr = [np.asarray(row).reshape(124, 32) for idx, row in data.iterrows()]
  



