Query: Best way to strip punctuation from a string in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6577965)
 This might not be the best solution however this is how I did it. 

  import string
f = lambda x: ''.join([i for i in x if i not in string.punctuation])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36122360)
 Here's a one-liner for Python 3.5: 

  import string
"l*ots! o(f. p@u)n[c}t]u[a'ti\"on#$^?/".translate(str.maketrans({a:None for a in string.punctuation}))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7268456)
  string.punctuation  is ASCII  only ! A more correct (but also much slower) way is to use the unicodedata module: 

  # -*- coding: utf-8 -*-
from unicodedata import category
s = u'String — with -  «punctation »...'
s = ''.join(ch for ch in s if category(ch)[0] != 'P')
print 'stripped', s
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23318457)
 Solution 1: Tokenize and strip punctuation off the tokens 

  >>> from nltk import word_tokenize
>>> import string
>>> punctuations = list(string.punctuation)
>>> punctuations
['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~']
>>> punctuations.append("''")
>>> sent = '''He said,"that's it."'''
>>> word_tokenize(sent)
['He', 'said', ',', "''", 'that', "'s", 'it', '.', "''"]
>>> [i for i in word_tokenize(sent) if i not in punctuations]
['He', 'said', 'that', "'s", 'it']
>>> [i.strip("".join(punctuations)) for i in word_tokenize(sent) if i not in punctuations]
['He', 'said', 'that', 's', 'it']
  

 Solution 2: remove punctuation then tokenize 

  >>> import string
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
>>> sent = '''He said,"that's it."'''
>>> " ".join("".join([" " if ch in string.punctuation else ch for ch in sent]).split())
'He said that s it'
>>> " ".join("".join([" " if ch in string.punctuation else ch for ch in sent]).split()).split()
['He', 'said', 'that', 's', 'it']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40885971)
 Here's a solution without regex. 

  import string

input_text = "!where??and!!or$$then:)"
punctuation_replacer = string.maketrans(string.punctuation, ' '*len(string.punctuation))    
print ' '.join(input_text.translate(punctuation_replacer).split()).strip()

Output>> where and or then
  

 
 Replaces the punctuations with spaces  
 Replace multiple spaces in between words with a single space  
 Remove the trailing spaces, if any with
strip() 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/266000)
 I usually use something like this: 

  >>> s = "string. With. Punctuation?" # Sample string
>>> import string
>>> for c in string.punctuation:
...     s= s.replace(c,"")
...
>>> s
'string With Punctuation'
  



