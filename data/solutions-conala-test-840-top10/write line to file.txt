Query: write line to file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22582028)
 You need to read the file first: 

  with open("file.txt", "r") as file:
    lines = file.readlines()
  

 Then change the second line: 

  lines[1] = str(round(strength, 2)) + "\n"
  

 Then write everything back: 

  with open("file.txt", "w") as file:
    for line in lines:
        file.write(line)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35406827)
 Why dont you try something like this to add a line. 

  >>> f = open('C:\Code\myfile.txt','w')
>>> f.write('''
... my name
... is
... xyz
... ''')
18
>>> f.close()
  

 The contents will be " my name
                       is
                       xyz " 

 Here begin with f.write(''' or f.write(""" and end with ''') or """) 

 Ex:-  

  f.write('''

             ''')
  

 adds a line 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45187717)
 You can read the file and then, write into some specific line. 

  line_to_replace = 17 #the line we want to remplace
my_file = 'myfile.txt'

with open(my_file, 'r') as file:
    lines = file.readlines()
#now we have an array of lines. If we want to edit the line 17...

if len(lines) > int(line_to_replace):
    lines[line_to_replace] = 'The text you want here'

with open(my_file, 'w') as file:
    file.writelines( lines )
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17377977)
 Try putting it in a string before writing it 

  w=""
for i in a:
   w+=i+" "
output.write(w)
  

 This writes everything in a single line    


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53927155)
 I think you should always close the file, so the file that you open to write should also use  with  

  with open("test.txt") as f, open("testfile.txt", "w") as f2:
    for line in f:
        f2.write(line)
        if 'str' in line:
            break
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20429275)
 Open the file in append mode and write a new line (including a  \n  line separator): 

  with open(filename, 'a') as out:
    out.write(var + '\n')
  

 This adds the line at the end of the file after all the other contents. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16216755)
 Open file in  r+  mode, read it's content in a list first and then after truncation you can write the new data back to the file. 

 
   'r+' opens the file for both reading and writing 
 

 If the file is huge then it is better to write this to new file first and then rename. 

  with open('myFile','r+') as f:
        data=f.readlines()[1:]
        f.truncate(0)          #this will truncate the file
        f.seek(0)             #now file pointer goes to start of the file
        for line in data:     #now write the new data
            items = line.split(';') 
            if len(items) < 2:
                # do something here
            else:
                f.write(line)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2642055)
 Just write a file-like that wraps another file-like and which converts  \n  to  \r\n  on write. 

 For example: 

  class ForcedCrLfFile(file):
    def write(self, s):
        super(ForcedCrLfFile, self).write(s.replace(r'\n', '\r\n'))
  



