Query: How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32803517)
 Just  sort the https://docs.python.org/3/tutorial/datastructures.html#looping-techniques by value : 

  >>> import operator
>>>
>>> for key, value in sorted(my_dict.items(), key=operator.itemgetter(1)):
...     print("Officer '{1}', '{2}' with '{0}' ate '{3}' with '{4}' and '{5}'.".format(key, *value))
... 
Officer 'a', 'b' with 'key4' ate 'c' with 'd' and 'e'.
Officer 'a', 'd' with 'key3' ate 'c' with 't' and 'z'.
Officer 'b', 'a' with 'key2' ate 'e' with 'f' and 'k'.
Officer 'f', 'g' with 'key1' ate 'h' with 'i' and 'j'.
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42765699)
 You can use itemgetter, this should sort the entries by the list (you can sort lists of lists and it will by default sort by the first element). This will give back a list of tuples, with the first element being the key, which you can loop through and print. 

  import operator

data = {
"Joe" : [1, "Joe", "password", "Joe@Email.com"], 
"Toby" : [2, "Toby", "password", "Toby@Email.com"], 
"John" : [4, "John", "password", "John@Email.com"], 
"Julie" : [3, "Julie", "password", "Julie@Email.com"]
}


sorted_data = sorted(data.items(), key=operator.itemgetter(1))

for entry in (sorted_data):
    print("UserID: " + str(entry[1][0]) + ". Username: " + entry[0])
  

 Output: 

  UserID: 1. Username: Joe
UserID: 2. Username: Toby
UserID: 3. Username: Julie
UserID: 4. Username: John
  

 Note: The reason sorted_data is a list of tuples instead of a dictionary is that python dictionaries are inherently unordered. See answers to this for an explanation: https://stackoverflow.com/questions/526125/why-is-python-ordering-my-dictionary-like-so 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42765667)
 You cannot sort a dict in place, because Python dicts are unordered. You have at least 2 alternatives : 

 Create a sorted list of tuples 

 You can use  sorted  with a https://docs.python.org/3/library/functions.html#sorted argument. In this case, it would be the first element of the dict value : 

  sorted(data.items(), key= lambda x: x[1][0])
# [('Joe', [1, 'Joe', 'password', 'Joe@Email.com']), ('Toby', [2, 'Toby', 'password', 'Toby@Email.com']), ('Julie', [3, 'Julie', 'password', 'Julie@Email.com']), ('John', [4, 'John', 'password', 'John@Email.com'])]
  

 It returns a sorted list of tuples, which you can use to iterate and print the result : 

  data = {
    "Joe": [1, "Joe", "password", "Joe@Email.com"],
    "Toby": [2, "Toby", "password", "Toby@Email.com"],
    "John": [4, "John", "password", "John@Email.com"],
    "Julie": [3, "Julie", "password", "Julie@Email.com"]
}

for name, lst in sorted(data.items(), key=lambda x: x[1][0]):
    print("UserID : %d. Username : %s" % (lst[0], name))

# UserID : 1. Username : Joe
# UserID : 2. Username : Toby
# UserID : 3. Username : Julie
# UserID : 4. Username : John
  

 Create an OrderedDict 

 If you want to sort  data  and keep the functionality of a  dict , you can create an https://docs.python.org/3/library/collections.html#collections.OrderedDict : 

  from collections import OrderedDict

data = {
    "Joe": [1, "Joe", "password", "Joe@Email.com"],
    "Toby": [2, "Toby", "password", "Toby@Email.com"],
    "John": [4, "John", "password", "John@Email.com"],
    "Julie": [3, "Julie", "password", "Julie@Email.com"]
}

data = OrderedDict(sorted(data.items(), key=lambda x: x[1][0]))
# OrderedDict([('Joe', [1, 'Joe', 'password', 'Joe@Email.com']), ('Toby', [2, 'Toby', 'password', 'Toby@Email.com']), ('Julie', [3, 'Julie', 'password', 'Julie@Email.com']), ('John', [4, 'John', 'password', 'John@Email.com'])])
  

 Note : For both examples,  key=lambda x: x[1]  would also be enough. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36596167)
 Dictionaries are orderless, you cannot sort a dictionary.
You would need an ordereddict, which you can create from a list of sorted tuples of key,value pairs of your current dict. 

  >>> months = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']
>>> input = {'JUL':15,'MAR': 54,'DEC':65,'OCT':90}
>>> from collections import OrderedDict
>>> OrderedDict(sorted(input.items(),key =lambda x:months.index(x[0])))
OrderedDict([('MAR', 54), ('JUL', 15), ('OCT', 90), ('DEC', 65)])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53924047)
 Let us take an example of dictionary: 

  numbers = {'first':0, 'second':1, 'third':3}
  

   

  numbers.values()[index]
  

 I got an error:'dict_values' object does not support indexing 

   

  numbers.itervalues()
  

 to iterate and extract the values it is also giving an error:'dict' object has no attribute 'iteritems' 

 Hence I came up with new way of accessing dictionary elements by index just by converting them to tuples. 

  tuple(numbers.items())[key_index][value_index]
  

 for example:  

  tuple(numbers.items())[0][0] gives 'first'
  

 if u want to edit the values or sort the values the tuple object does not allow the item assignment. In this case you can use  

  list(list(numbers.items())[index])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35078315)
 Use index of the  order  list to sort-Just try if every dictionary has one value and you want sorting by that value- 

  sorted(list_of_dct,key=lambda x:order.index(x.values()[0]))
  

 But if you have multiple values for one key then change the index (i.e  [0] ) on which you will sort. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26147832)
 Since you list at index 0 is sorted you can use https://docs.python.org/2/library/bisect.html module to find the index in  O(log N)  time: 

  In [33]: import bisect

In [34]: lst = [1, 21, 54, 55, 93, 99, 284, 393, 964, 1029, 1214, 1216, 1223, 1253, 1258, 1334, 1365, 1394, 1397, 1453, 1471, 1543, 1589, 1824, 1975, 2054, 2090, 2164, 2165, 2166, 2167, 2323, 2547, 2645, 2802, 2809, 2931, 2958, 3031, 3071, 3077, 3078, 3189, 3199, 3202, 3203]

In [35]: n = 2802

In [36]: ind = bisect.bisect_left(lst, n)

In [37]: if lst[ind] == n:
    ...:     print 'Item found at {}'.format(ind)
    ...:     
Item found at 34
  

 Note that if the list is not sorted then it'll be better to sort it first and store a reference in a variable so that you don't have to sort it again and again. 

 Another options is to use a dictionary, with the items as keys and index as values(for repeated items only the index of their first appearance will be stored i.e. similar to  list.index ). Once the dictionary is created than you can get an item's index on  O(1)  time. 

  In [38]: dct = {}

In [39]: for i, x in enumerate(lst):
    ...:     if x not in dct:
    ...:         dct[x] = i
    ...:         

In [40]: dct.get(n)
Out[40]: 34

In [41]: dct.get(1000) #return None for non-existent items
  

    

  In [43]: lst = list(range(10**5))

In [44]: %timeit bisect.bisect_left(lst, 10**5-5)
1000000 loops, best of 3: 444 ns per loop

In [45]: %timeit lst.index(10**5-5)
1000 loops, best of 3: 1.29 ms per loop

In [46]: %timeit dct.get(10**5-5) #dct created using the new list.
10000000 loops, best of 3: 104 ns per loop
  

 

 In case if you're updating the list at index 0 continuously and it is not sorted as well then you should simply go for  list.index()  rather than using a loop, dictionary, or bisect. 

  In [47]: try:
    ...:     ind = lst.index(n)
    ...:     print 'Item found at {}'.format(ind)
    ...: except IndexError:
    ...:     pass
    ...: 
Item found at 34
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22710089)
 Your keys are strings representing integers; if you want a numeric sort, use  int()  to turn the keys to integers: 

  sorted(yourdict, key=int)
  

 gives you a numerically sorted list of keys and 

  sorted(yourdict.items(), key=lambda i: int(i[0]))
  

 gives you items sorted by the numeric value of the key. 

 However, if you have sequential keys starting at 0, you should be using a list object instead. Index references are faster than dictionary lookups as there is no hashing step required. 

 Even if your keys do not start at 0 but are still sequential, for a small start index you'd just pad the list with  None  values: 

  [None, 'foo', 'bar', 'foofoo', ...]
  

 and index into that starting at 1. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46749974)
 Not sure if you found the answer but the code below will return your dictionary sorted by  tuple[0] : 

  sorted_dict = []
my_dict = {"apple": (8, 1023), "ant": (3, 29883), "zebra": (4, 489)}
my_dict_copy = sorted(my_dict.items(),key=lambda x: x[1][0])
for i in my_dict_copy:
    sorted_dict.append(i[0])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/7235661)
 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of name and score and you want to sort on 'score': 

  import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
  

 sorting with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorting with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  

 The order of 'key' and 'value' in the listed tuples is (value, key), but now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this: 

      player = best[1]
    player.name
        'Richard'
    player.score
         7
  



