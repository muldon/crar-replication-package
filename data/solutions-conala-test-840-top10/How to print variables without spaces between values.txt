Query: How to print variables without spaces between values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3249993)
 For a variable number of values: 

  print '|%s|' % '|'.join(str(x) for x in [id, var1, var2, var3, var4])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14041800)
 By printing multiple values separated by a comma: 

  print "I have", card.price
  

 The http://docs.python.org/2/reference/simple_stmts.html#the-print-statement will output each expression separated by spaces, followed by a newline. 

 If you need more complex formatting, use the http://docs.python.org/2/library/stdtypes.html#str.format: 

  print "I have: {0.price}".format(card)
  

 or by using the older and semi-deprecated http://docs.python.org/2/library/stdtypes.html#string-formatting-operations. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3250005)
 If you are using Python 2.6 or newer, use the new standard for formating string, the str.format method: 

  print "\n{0}|{1}|{2}|".format(id,var1,var2)
  

 http://docs.python.org/library/stdtypes.html#str.format 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28669605)
 To build off what Martjin was saying.
I'd use string interpolation/formatting. 

 In Python 2.x which seems to be what you're using due to the lack of parenthesis around the print function you do: 

  print 'Value is "%d"' % value
  

 In Python 3.x you'd use the format method instead, so you're code would look like this. 

  message = 'Value is "{}"'
print(message.format(value))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39996416)
 https://docs.python.org/2/library/functions.html#print 

 print(*objects, sep=' ', end='\n', file=sys.stdout) 

 Note: This function is not normally available as a built-in since the name print is recognized as the print statement. To disable the statement and use the print() function, use this future statement at the top of your module: 

 from  future  import print_function 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12646068)
 While others have given an answer, a good option here is to avoid using a loop and multiple print statements at all, and simply use the  *  operator to http://docs.python.org/py3k/tutorial/controlflow.html#unpacking-argument-lists for print: 

  >>> print(*range(5))
0 1 2 3 4
  

 As  print()  adds spaces between arguments automatically, this makes for a really concise and readable way to do this, without a loop. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28669484)
 Don't use  print ...,  if you don't want spaces. Use string concatenation or formatting. 

  

  print 'Value is "' + str(value) + '"'
  

  

  print 'Value is "{}"'.format(value)
  

 The latter is far more flexible, see the https://docs.python.org/2/library/stdtypes.html#str.format and the https://docs.python.org/2/library/string.html#formatstrings. 

 You'll also come across the older https://docs.python.org/2/library/stdtypes.html#string-formatting: 

  print 'Value is "%d"' % value
print 'Value is "%d", but math.pi is %.2f' % (value, math.pi)
  

 but this isn't as flexible as the newer  str.format()  method. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33683444)
 your main difference is if you were to "parameterize" the print function (as Vikram so eloquently said),  print  has a default  sep  parameter that separates your parameters with whatever  sep  may be (defaulted to a  ' ' ). without splitting your variables into parameters and just concatenating them into one string, there will be no spaces.
 

  >>> print(1,2)
1 2
>>> print(str(1)+str(2))
12
  

 I think another thing you are wondering is the calling of  str . Simply put, print calls  str(parameter)  on your parameters regardless so, in that respect, there really is no difference. 

 In conclusion, the string that is outputted by  print  acts almost identical to: 

  sep.join(parameters) #where sep is defaulted to ' '
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51881569)
 You could try string formatting 

  "{:10s} {:s}".format(variable1, " - Age 40")
  

 where  10  is the number of characters you want your  variable1  to take up. If its length is less than that, it is padded with spaces. . 

 However, your  -  hyphen is part of the second string, so it can't be padded, unless you split your string manually. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/3249988)
 Try using  join : 

  print "\n"+'|'.join([id,var1,var2,var3,var4])
  

 or if the variables aren't already strings: 

  print "\n"+'|'.join(map(str,[id,var1,var2,var3,var4]))
  

 The benefit of this approach is that you don't have to build a long format string and it basically works unchanged for an arbitrary number of variables. 



