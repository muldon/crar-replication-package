Query: PUT Request to REST API using Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35256509)
 DRF has a trailing space by default. Instead of 
 http://127.0.0.1:8000/api/Readings  it should probably be  http://127.0.0.1:8000/api/Readings/  . I would suggest making  Readings be lowercase as it's easy to forget that it's capitalized 

 

 The general structure for API tests that I've used is this: 

  from django.core.urlresolvers import reverse

from rest_framework.test import APITestCase, APIClient

class TestReadings(APITestCase):

    def setUp(self):
        self.client = APIClient()

    def test_put(self):

        url = reverse('readings', kwargs={}) # 'readings' here is the named url
        request = self.client.post(url, data={})
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33127719)
 Syntax error in because of  =  sign in your  headers  dictionary: 

  headers = {'Authorization': 'Bearer ' + token, "Content-Type": "application/json", data=data}
  

  

  headers = {'Authorization': 'Bearer ' + token, "Content-Type": "application/json", 'data':data}
  

 See  data=data  is changed with  'data':data . . 

 And are you sure you will be sending data in your headers? Or you should replace your  payload  with  data  in your  put  request? 

 Edit: 

 As you have edited the question and now you are sending data as PUT request's body  requests.put(data=data)  so there is no need of it in headers. Just change your headers to: 

  headers = {'Authorization': 'Bearer ' + token, "Content-Type": "application/json"}
  

 But as you have set your  Content-Type  header to  application/json  so I think in your PUT request you should do 

  response = requests.put(url, data=json.dumps(data), headers=headers)
  

 that is send your data as json. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36333090)
 To answer the first half of your question:  

 
   how can I send the token with post request to my api 
 

 You can use the Python http://docs.python-requests.org/en/master/user/authentication/ library. For the django-rest-framework TokenAuthentication, the token needs to be passed in the header and prefixed by the string  Token  (http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication): 

  import requests
mytoken = "4652400bd6c3df8eaa360d26560ab59c81e0a164"
myurl = "http://localhost:8000/api/user_list"

# A get request (json example):
response = requests.get(myurl, headers={'Authorization': 'Token {}'.format(mytoken)})
data = response.json()

# A post request:
data = { < your post data >}
requests.post(myurl, data=data, headers={'Authorization': 'Token {}'.format(mytoken)})
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33128625)
 The problem is that you try to assign  data  to the  data  element in your dictionary: 

  headers = { ..., data:data }
  

 That can't work because you can't use a dictionary as a key in a dictionary (technically, because it's not hashable). 

  

  headers = { ..., "data":data }
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32130593)
 Got the code working. 

     def assign(self, key, name):
    self._startCurl()         
    self.c.setopt(pycurl.URL, "http://xxx/rest/api/2/issue/"+ key )
    self.c.setopt(pycurl.HTTPHEADER, ['Content-Type: application/json', 'Accept: application/json'])
    self.c.setopt(pycurl.USERPWD, "fred:fred") 
    self.c.setopt(pycurl.CUSTOMREQUEST, "PUT")
    data = json.dumps({"fields":{"assignee":{"name":name}}})
    self.c.setopt(pycurl.POSTFIELDS,data)        
    self.c.perform()
    self.c.close()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42266292)
 By Using API you mean sending GET, POST, PUT etc. requests to some server. For that you can use python's  requests  module.  

  ### Installation
pip install requests

### Usage
import requests
url = 'http://samples.openweathermap.org/data/2.5/weather?zip={0},us&appid=0b7f3cd153bc12d3accb83f9682bccbb'.format(zipcode)
req = requests.get(url)

### if json response is coming
response = req.json()

### else
response = req.content
  

 More information at http://docs.python-requests.org/en/master/    


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13483920)
 You may want to check the previous similar question: https://stackoverflow.com/questions/713847/recommendations-of-python-rest-web-services-framework 

 Python does not have a built-in REST framework, but I personally have had good experiences with http://flask.pocoo.org/ and http://bottlepy.org/docs/dev/. 

 It's very similar in use to Jersey (Bottle example): 

  @route('/')
@route('/hello/<name>')
def greet(name='Stranger'):
    return template('Hello {{name}}, how are you?', name=name)
  

 Handling HTTP verbs: 

  @app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        do_the_login()
    else:
        show_the_login_form()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27416159)
 I am using HTTPforHumans, requests module. 

  import requests

def pv_request(url, methods, data=None, headers=None, type=None):

    try:
        if 'POST' in methods:
            return requests.post(url=url, headers=headers, data=data).json()

        elif 'GET' in methods:
            return requests.get(url=url, headers=headers, data=data).json()

        elif 'PUT' in methods:
            if type == 'music':
                return requests.put(url=url, headers=headers, data=data).json()

            elif type == 'image':
                return requests.put(url=url, headers=headers, data=open(data, 'rb')).json()
    except requests.exceptions.ConnectionError:
        return None
  

 Might not be in the lines of what you are looking for, but here is my all-in-on purpose request handler.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51939896)
 After hunting around the code from the python trello api pip install package (https://pythonhosted.org/trello/index.html), it seems like I have to do it like this: 

   import requests
 requests.put(https://api.trello.com/1/cards/[card_id], 
              params=dict(key=self._key, token=self._token), 
              data=dict(idList=listID))
  

 Note that to move across boards, you need to provide the board ID as well: 

   requests.put(https://api.trello.com/1/cards/[card_id], 
              params=dict(key=self._key, token=self._token), 
              data=dict(idList=listID, idBoard=boardID))
  

 This works for me, hope it does for you too! 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/46744492)
 I've had the same issue. My problem was that I forgot to put  .as_view()  in urls.py on  MyAPIView .   

  url(r'$', GetLikesAPI.as_view(), name='list')
  

   

  url(r'$', GetLikesAPI, name='list')
  



