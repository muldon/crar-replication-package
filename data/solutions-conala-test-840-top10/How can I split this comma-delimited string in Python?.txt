Query: How can I split this comma-delimited string in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19321650)
 You need to split the string. 

  number, type, identifier, height, width = mystring.split(',')
  

 Read http://docs.python.org/2/library/stdtypes.html#str.split 

 Here,  split  would return a  list  of the individual elements from the string split on  ,  

 Demo: 

  >>> x = "9532167,box,C,5,20"
>>> x.split(',')
['9532167', 'box', 'C', '5', '20']
>>> number, type, identifier, height, width = x.split(',')
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4982536)
 Sounds like you want the http://docs.python.org/library/csv.html module. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38296266)
 No, the  str.split  operation always returns a list and trying to convert that into a  set  will cost time. Also writing your own handmade  split  that produces directly a set will be slower, because  str.split  is implemente in C (the source code should be under https://hg.python.org/cpython/file/tip/Objects/stringlib/split.h) 

 Note however that  if  your  string  does not contain a comma  and  you expect  string  to not be a substring of the elements returned by  split , then you can just do: 

  if string in comma_delimited_string:
  

 If  string  contains a comma, then your test will always fail (because by definition the elements of  text.split(',')  will never contain one. 

 The case in which the above condition fail is when you have something like: 

  if "a" in "aaa,bb,c".split(',')
  

 because in this case  "a" in ["aaa", "bb", "c"]  fails. 

 Alternatively you could use a regex: 

  import re
if re.search(r'(^{0},)|(,{0},)|(,{0}$)|(^{0}$)'.format(re.escape(string)), comma_delimited_string):
  

 However I don't know whether this would be faster, it probably depends on your inputs. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12567100)
 I fabricated something like this. Very redundant I suppose, but it does the job for me. You have to adapt it a bit to your specifications: 

  def csv_splitter(line):
    splitthese = [0]
    splitted = []
    splitpos = True
    for nr, i in enumerate(line):
        if i == "\"" and splitpos == True: 
            splitpos = False
        elif i == "\"" and splitpos == False:
            splitpos = True
        if i == "," and splitpos == True:
            splitthese.append(nr)
    splitthese.append(len(line)+1) 
    for i in range(len(splitthese)-1):
        splitted.append(re.sub("^,|\"","",line[splitthese[i]:splitthese[i+1]]))
    return splitted
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5864511)
 You don't want regular expressions here. 

  s = "144,1231693144,26959535291011309493156476344723991336010898738574164086137773096960,26959535291011309493156476344723991336010898738574164086137773096960,1.00,4295032833,1563,2747941 288,1231823695,26959535291011309493156476344723991336010898738574164086137773096960,26959535291011309493156476344723991336010898738574164086137773096960,1.00,4295032833,909,4725008"

print s.split(',')
  

  

  ['144', '1231693144', '26959535291011309493156476344723991336010898738574164086137773096960', '26959535291011309493156476344723991336010898738574164086137773096960', '1.00
', '4295032833', '1563', '2747941 288', '1231823695', '26959535291011309493156476344723991336010898738574164086137773096960', '26959535291011309493156476344723991336010898
738574164086137773096960', '1.00', '4295032833', '909', '4725008']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13963712)
 The direct translation would be something like: 

  presents = [x.strip() for x in re.findall(r'[^,]*', presents) if x]
  

 An improvement would be to split on whitespace surrounded commas: 

  presents = re.split(r'\s*,\s*', presents)
  

 But  please don't  do either of these in this case. There is simply no way to improve upon the clarity of: 

  presents = presents.split(',')
  

 and in the case the performance will be worse than the simple split, also. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34552295)
 If you want to split on commas AND any surrounding whitespace, you can use this  

  str.trim().split("\\s+,\\s+")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7844128)
 You can use the str.split method. 

  >>> my_string = 'A,B,C,D,E'
>>> my_list = my_string.split(",")
>>> print my_list
['A', 'B', 'C', 'D', 'E']
  

 If you want to convert it to a tuple, just 

  >>> print tuple(my_list)
('A', 'B', 'C', 'D', 'E')
  

 If you are looking to append to a list, try this: 

  >>> my_list.append('F')
>>> print my_list
['A', 'B', 'C', 'D', 'E', 'F']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5864510)
 Question is a little vague. 

  list_of_lines = multiple_lines.split("\n")
for line in list_of_lines:
    list_of_items_in_line = line.split(",")
    first_int = int(list_of_items_in_line[0])
  

 . 



