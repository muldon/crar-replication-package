Query: how to multiply multiple columns by a column in Pandas
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46779778)
 By using  combine_first  

  df.iloc[:, 3:6+1].mul(df['Count'],axis=0).combine_first(df)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46778480)
 Demo: 

 Sample DF: 

  In [6]: df = pd.DataFrame(np.random.randint(100,size=(10,10))) \
               .assign(Count=np.random.rand(10))

In [7]: df
Out[7]:
    0   1   2   3   4   5   6   7   8   9     Count
0  89  38  89  68   6  32  22  12  70  69  0.225977
1  49   1  38  33  36  93   9  57  93  64  0.030430
2   2  53  49  79  80  86  26  22  31  41  0.629740
3  38  44  23  29  75  42  75  19  99  57  0.980604
4  45   2  60  74  35  77  46  43  63  55  0.136395
5  65  97  15  16  88  59  23  68   5  21  0.648485
6  95  90  45  75  24  32  72  76  32  75  0.703680
7  60  31  65  85   4  36  52  72  73  94  0.744026
8  64  96  96  15  75  22  20  68  56  39  0.500358
9  78  54  74  29  87  57  33  97  63  37  0.289975
  

 Let's multiply columns  3-6  by  df['Count'] : 

  In [8]: df.iloc[:, 3:6+1]
Out[8]:
    3   4   5   6
0  68   6  32  22
1  33  36  93   9
2  79  80  86  26
3  29  75  42  75
4  74  35  77  46
5  16  88  59  23
6  75  24  32  72
7  85   4  36  52
8  15  75  22  20
9  29  87  57  33

In [9]: df.iloc[:, 3:6+1] *= df['Count']

In [10]: df
Out[10]:
    0   1   2          3          4          5          6   7   8   9     Count
0  89  38  89  66.681065   0.818372  20.751519  15.480964  12  70  69  0.225977
1  49   1  38  32.359929   4.910233  60.309102   6.333122  57  93  64  0.030430
2   2  53  49  77.467708  10.911630  55.769707  18.295685  22  31  41  0.629740
3  38  44  23  28.437513  10.229653  27.236368  52.776014  19  99  57  0.980604
4  45   2  60  72.564688   4.773838  49.933342  32.369289  43  63  55  0.136395
5  65  97  15  15.689662  12.002793  38.260613  16.184644  68   5  21  0.648485
6  95  90  45  73.545292   3.273489  20.751519  50.664974  76  32  75  0.703680
7  60  31  65  83.351331   0.545581  23.345459  36.591370  72  73  94  0.744026
8  64  96  96  14.709058  10.229653  14.266669  14.073604  68  56  39  0.500358
9  78  54  74  28.437513  11.866397  36.963643  23.221446  97  63  37  0.289975
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46778651)
 The easiest thing to do here would be to extract the values, multiply, and then assign. 

  u = df.iloc[0, 6:74].values
v = df[['count']]

df = pd.DataFrame(u * v)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46779337)
 Assuming the same dataframe provided by @MaxU 

 Not easier, but a perspective on how to use other api elements. 
 pd.DataFrame.update  and  pd.DataFrame.mul  

  df.update(df.iloc[:, 3:7].mul(df.Count, 0))
df

    0   1   2          3          4          5          6   7   8   9     Count
0  89  38  89  15.366436   1.355862   7.231264   4.971494  12  70  69  0.225977
1  49   1  38   1.004190   1.095480   2.829990   0.273870  57  93  64  0.030430
2   2  53  49  49.749460  50.379200  54.157640  16.373240  22  31  41  0.629740
3  38  44  23  28.437516  73.545300  41.185368  73.545300  19  99  57  0.980604
4  45   2  60  10.093230   4.773825  10.502415   6.274170  43  63  55  0.136395
5  65  97  15  10.375760  57.066680  38.260615  14.915155  68   5  21  0.648485
6  95  90  45  52.776000  16.888320  22.517760  50.664960  76  32  75  0.703680
7  60  31  65  63.242210   2.976104  26.784936  38.689352  72  73  94  0.744026
8  64  96  96   7.505370  37.526850  11.007876  10.007160  68  56  39  0.500358
9  78  54  74   8.409275  25.227825  16.528575   9.569175  97  63  37  0.289975
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22702814)
 use  multiply  method and set  axis="index" : 

  df[["A", "B"]].multiply(df["C"], axis="index")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44995000)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Index.intersection.html for get same columns names and then multiple by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mul.html, add http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.add_suffix.html and last http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html  df1 : 

  cols = df1.columns.intersection(df2.columns)
df = df1[cols].mul(df2[cols], axis=1).add_suffix('_x')
df = pd.concat([df1, df], axis=1)
print (df)
   A  B  C  D   E  A_x  B_x  C_x
0  6  2  1  7   2   12    2    2
1  0  0  2  1   8    0    0    2
2  7  2  6  6   9   14    2   24
3  2  5  5  1   3   14   40   25
4  9  1  6  7  42   81    2   12
  

 If need change order of columns: 

  cols = df1.columns.intersection(df2.columns)
df = df1[cols].mul(df2[cols], axis=1).add_suffix('_x')
cols1 = cols.tolist() + \
        df.columns.tolist() +  \
        df1.columns.difference(df2.columns).tolist()
df = pd.concat([df1, df], axis=1)

print (df[cols1])
   A  B  C  A_x  B_x  C_x  D   E
0  6  2  1   12    2    2  7   2
1  0  0  2    0    0    2  1   8
2  7  2  6   14    2   24  6   9
3  2  5  5   14   40   25  1   3
4  9  1  6   81    2   12  7  42
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48299730)
 Create new columns names by  list  comprehension and then http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html to original: 

  df1 = df.loc[:,'B':'D'].multiply(df['A'], axis="index")
df1.columns = ['R{}'.format(x) for x in range(1, len(df1.columns) + 1)]

df = df.join(df1)
print (df)
     A    B    C    Z    R1   R2
0  2.0  8.0  1.0  5.0  16.0  2.0
1  3.0  9.0  0.0  4.0  27.0  0.0
2  4.0  9.0  0.0  3.0  36.0  0.0
3  5.0  8.0  1.0  2.0  40.0  5.0
4  6.0  8.0  0.0  1.0  48.0  0.0
5  7.0  9.0  1.0  0.0  63.0  7.0
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43819547)
 you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html and multiply it by  value  column: 

  In [58]: df[['id']] \
           .join(pd.get_dummies(df['id']).mul(df['value'], axis=0).add_prefix('value_'))
Out[58]:
   id  value_1  value_2  value_3
0   1        1        0        0
1   1        2        0        0
2   2        0        1        0
3   2        0        2        0
4   3        0        0        1
5   3        0        0        2
  

  

  In [53]: pd.get_dummies(df['id'])
Out[53]:
   1  2  3
0  1  0  0
1  1  0  0
2  0  1  0
3  0  1  0
4  0  0  1
5  0  0  1


In [52]: pd.get_dummies(df['id']).mul(df['value'], axis=0)
Out[52]:
   1  2  3
0  1  0  0
1  2  0  0
2  0  1  0
3  0  2  0
4  0  0  1
5  0  0  2
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32957674)
 Select the columns in the list using  loc  and then use  .prod()  across the rows (by specifying  axis=1 ). For example: 

  >>> cols = ['A','B','C','D']
>>> df = pd.DataFrame(np.random.randint(1, 4, size=(3,4)), columns=list('ABCD'))
>>> df
   A  B  C  D
0  2  2  1  1
1  2  3  1  1
2  3  1  3  3

>>> df['VAL'] = df.loc[:, cols].prod(axis=1)
>>> df
   A  B  C  D  VAL
0  2  2  1  1    4
1  2  3  1  1    6
2  3  1  3  3   27
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52771273)
 Using  pandas   mul   

  df1.mul(df2.T[0])
Out[22]: 
   1  2  3  4  5  6
0  1  2  0  0  0  0
1  2  4  0  0  0  0
2  1  3  0  0  0  0
3  1  3  0  0  0  0
  



