Query: How to check for palindrome using Python logic
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39829879)
 There is also a  functional  way: 

  def is_palindrome(word):
  if len(word) == 1: return True
  if word[0] != word[-1]: return False
  return is_palindrome(word[1:-1])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37782321)
 Just for the record, and for the ones looking for a more algorithmic way to validate if a given string is palindrome, two ways to achieve the same (using  while  and  for  loops): 

  def is_palindrome(word):

    letters = list(word)    
    is_palindrome = True
    i = 0

    while len(letters) > 0 and is_palindrome:       
        if letters[0] != letters[(len(letters) - 1)]:
            is_palindrome = False
        else:
            letters.pop(0)
            if len(letters) > 0:
                letters.pop((len(letters) - 1))

    return is_palindrome
  

 And....the second one: 

  def is_palindrome(word):

    letters = list(word)
    is_palindrome = True

    for letter in letters:
        if letter == letters[-1]:
            letters.pop(-1)
        else:
            is_palindrome = False
            break

    return is_palindrome
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36138548)
 There is much easier way I just found. It's only 1 line. 

  is_palindrome = word.find(word[::-1])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17331369)
 An alternative to the rather unintuitive  [::-1]  syntax is this: 

  >>> test = "abcba"
>>> test == ''.join(reversed(test))
True
  

 The  reversed  function returns a reversed sequence of the characters in  test . 

  ''.join()  joins those characters together again with nothing in between. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17331328)
 A pythonic way to determine if a given value is a palindrome: 

  str(n) == str(n)[::-1]
  

 Explanation: 

 
 We're checking if the string representation of  n  equals the inverted string representation of  n  
 The  [::-1]  slice takes care of inverting the string 
 After that, we compare for equality using  ==  
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40620028)
 You could filter the string to get only the letters like this: 

  letters = ''.join(c for c in words if c in string.letters)
is_palindrome(letters)
  

 You would also have to call  lower  on it: 

  def is_palindrome(s):
    s = ''.join(c for c in s if c in string.letters)
    s = s.lower()
    return s == s[::-1]
  



