Query: Non-ASCII characters in Matplotlib
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31466926)
 matplotlib not finding the correct fonts can be caused by stale font cache (this is a problem we need to solve better). 

 To find were your cache is do 

  import matplotlib.font_manager as fm
print(fm.cachedir)  # or other way of getting the text out
  

 And then delete the font-related contents in that directory.  They will be rebuilt the next time you import matplotlib and (should) now contain the updated fonts. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44911751)
 Just don't end the line with  " : 

  plt.title(u"Some very long string with non ascii chara éèàéüöëêâûô\n and the next line should be here, with maybe some LaTeX symbols like greek letters in addition éèàéüöëêâûô")
  

 Or try: 

  plt.title(u"""Some very long string with non ascii chara éèàéüöëêâûô
and the next line should be here, with maybe some LaTeX symbols like greek letters in addition éèàéüöëêâûô""")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30095397)
 The problem is that you have a non-ASCII character in your current working directory. 

 That actually shouldn't be a problem at all, but it is because of a combination of other things: 

 
  matplotlib  wants to look in your current working directory for a local  matplotlibrc  file that overrides your default one. 
 Python thinks you're using the C locale instead of the nice UTF-8 locale that Ubuntu 14 should be defaulting to. 
 

 So, for a quick workaround, just run your script from a different directory, that has no non-ASCII characters in it. 

 If you actually want to  solve  the problem: 

 
 Make sure you have the latest Ubuntu 14, Anaconda, and matplotlib. 
 From the shell,  echo $LANG . The result should be either empty, or something with  UTF-8  in it. If not, search AskUbuntu for how to fix that. 
 Make sure your shell and terminal are both set to UTF-8. 
 

 From a quick search of the  matplotlib  issues, this looks like https://github.com/matplotlib/matplotlib/issues/3516/, which looks like it was fixed https://github.com/matplotlib/matplotlib/pull/3594, which I think should be in  matplotlib  1.4.1+. Also see https://github.com/matplotlib/matplotlib/pull/3487. So, assuming you  $LANG  and terminal are correct, and your  matplotlib  is 1.4.0 or earlier, this is the most likely cause, and updating it (via  conda  or  pip  or  apt-get  or updating Anaconda itself, however you originally installed it) should be the fix. 

 Or, of course, you can upgrade to Python 3, which will probably either solve the problem, or give you a better error message that tells you exactly what's wrong. (Although, from scanning the issue report, it looks like  matplotlib  1.4.0 doesn't have this exact bug in Python 3, only Python 2, as expected… but it may have a related bug…) 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49839954)
  . 's answer is good enough. In case you want to avoid adding  u , use this 

  from __future__ import unicode_literals
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53986943)
 Make sure your filename and folder does not have any non ASCII characters. This does not occur usually, the matplotlib team right now is focused on solving bugs in python3 only as python2 will soon be deprecated. That will mostly clear the error. This is something you can try if that doesn't work as a last resort. You can try adding 

  import sys  
reload(sys)   
sys.setdefaultencoding('utf8')

import matplotlib.pyplot as plt
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10960464)
 This problem may actually have a couple of different causes: 

  The default font does not include these glyphs  

 You may change the default font using the following (before any plotting is done!) 

  matplotlib.rc('font', family='Arial')
  

 In some versions of matplotlib you'll have to set the family:  

  matplotlib.rc('font', **{'sans-serif' : 'Arial',
                         'family' : 'sans-serif'})
  

 (Note that because  sans-serif  contains a hyphen inside the  **{}  syntax, it is actually necessary.) 

 The first command changes the  sans-serif  font family to contain only one font (in my case it was http://en.wikipedia.org/wiki/Arial), the second sets the default font family to  sans-serif . 

 Other options are included http://matplotlib.sourceforge.net/users/customizing.html. 

  You have improperly created/passed string objects into Matplotlib  

 Even if the font contains proper glyphs, if you forgot to use  u  to create http://en.wikipedia.org/wiki/Unicode constants, Matplotlib will have this behaviour: 

  plt.xlabel("Średnia odległość między stacjami wsparcia a modelowaną [km]")
  

 So you need to add  u : 

  plt.xlabel(u"Średnia odległość między stacjami wsparcia a modelowaną [km]")
  

 Another cause is that you forgot to put a http://en.wikipedia.org/wiki/UTF-8 magic comment on top of the file (I read that this https://stackoverflow.com/questions/2406700/accented-characters-in-matplotlib): 

  # -*- coding: utf-8 -*-
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44912486)
 Ok, I finally figured out the only way it could work: 

 Thanks to Dimgold for its working solution as well but it works only when there is no LaTeX characters.  

 When you need LaTeX char, you must typeset the string with the ' r ' tag before. 
Then, newline character '\n' won't work anymore.     

 And you must import some extra from  __future__ . 

 Here is the valid solution for me:     

  #!/usr/bin/python2.7
# -*- coding: utf-8 -*-
from __future__ import unicode_literals # It seems absolutely needed.

# some stuff to plot here

plt.title(r"""Some very long string with non ascii chara éèàéüöëêâûô
and the next line should be here, with maybe some LaTeX symbols like $\alpha$ or $\overrightarrow{vector}$ in addition éèàéüöëêâûô""")
  



