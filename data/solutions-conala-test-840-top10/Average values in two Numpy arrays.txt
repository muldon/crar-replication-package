Query: Average values in two Numpy arrays
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18461943)
 You can create a 3D array containing your 2D arrays to be averaged, then average along  axis=0  using  np.mean  or  np.average  (the latter allows for weighted averages): 

  np.mean( np.array([ old_set, new_set ]), axis=0 )
  

 This averaging scheme can be applied to any  (n) -dimensional array, because the created  (n+1) -dimensional array will always contain the original arrays to be averaged along its  axis=0 . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44549931)
 Using  numpy.average  

 Also https://docs.scipy.org/doc/numpy/reference/generated/numpy.average.html can be used with the same syntax: 

  import numpy as np
a = np.array([np.arange(0,9).reshape(3,3),np.arange(9,18).reshape(3,3)])
averaged_array = np.average(a,axis=0)
  

 The advantage of numpy.average compared to https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html#numpy.mean is the possibility to use also the weights parameter as an array of the same shape: 

  weighta = np.empty((3,3))    
weightb = np.empty((3,3))       
weights = np.array([weighta.fill(0.5),weightb.fill(0.8) ])
np.average(a,axis=0,weights=weights)
  

 If you use masked arrays consider also using https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.average.html#numpy.ma.average because https://stackoverflow.com/a/38783757/2132157. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34619552)
 Pandas is done for such task : 

  data=np.random.randint(1,5,20).reshape(10,2)
import pandas
pandas.DataFrame(data).groupby(0).mean()
  

  

            1
0          
1  2.666667
2  3.000000
3  2.000000
4  1.500000
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53906463)
 Perhaps something like this would work: 

  import numpy as np

a = np.array([1, 1, 1, 2, 2, 2])
b = np.array([10, 10, 10, 20, 20, 20])

np.average(b[a==1])
np.average(b[a==2])
  

  

  import numpy as np

a = np.random.randint(1,30,1000000)
b = np.random.random(size=1000000)

for x in set(a):
  print("Average for values marked {0}: {1}".format(x,np.average(b[a==x])))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13288415)
 Update: As of NumPy 1.8, you could use http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanmean.html instead of  scipy.stats.nanmean . 

 

 If you have  scipy , you could use http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html#nanmean: 

  In [2]: import numpy as np

In [45]: import scipy.stats as stats

In [3]: nan = np.nan

In [43]: A = np.array([1, nan, 8, nan, nan, 4, 6, 1])   
In [44]: B = np.array([8, 5, 8, nan, 5, 9, 5, 3])  
In [46]: C = np.array([A, B])    
In [47]: C
Out[47]: 
array([[  1.,  nan,   8.,  nan,  nan,   4.,   6.,   1.],
       [  8.,   5.,   8.,  nan,   5.,   9.,   5.,   3.]])

In [48]: stats.nanmean(C)
Warning: invalid value encountered in divide
Out[48]: array([ 4.5,  5. ,  8. ,  nan,  5. ,  6.5,  5.5,  2. ])
  

 You can find other numpy-only (masked-array) solutions, https://stackoverflow.com/q/5480694/190597.  

  In [60]: C = np.array([A, B])    
In [61]: C = np.ma.masked_array(C, np.isnan(C))    
In [62]: C
Out[62]: 
masked_array(data =
 [[1.0 -- 8.0 -- -- 4.0 6.0 1.0]
 [8.0 5.0 8.0 -- 5.0 9.0 5.0 3.0]],
             mask =
 [[False  True False  True  True False False False]
 [False False False  True False False False False]],
       fill_value = 1e+20)

In [63]: np.mean(C, axis = 0)
Out[63]: 
masked_array(data = [4.5 5.0 8.0 -- 5.0 6.5 5.5 2.0],
             mask = [False False False  True False False False False],
       fill_value = 1e+20)

In [66]: np.ma.filled(np.mean(C, axis = 0), nan)
Out[67]: array([ 4.5,  5. ,  8. ,  nan,  5. ,  6.5,  5.5,  2. ])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14737576)
 Basically you can use 

  record.mean(axis=0)
  

 I am not sure over which axis you want to average, as in your example two axes have dimension 2 (your array has shape (2,10,2)). If you meant to average the last one, just use 

  record.mean(axis=2)
  



