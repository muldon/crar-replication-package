Query: How to generate random numbers that are different?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53795844)
 generate a sorted list of 50 different random numbers between 0 and 100 (not included) like this: 

  sorted(random.sample(range(0,100),50))
  

 (pick 50 elements in the  range  object and sort them) 

 If you need/want repeats don't use  sample  just pick 50 numbers 

  sorted([random.randrange(0,100) for _ in range(50)])
  

 or from python 3.6:  sorted(random.choices(range(100),k=50))  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40286234)
  >>> random.seed(9001)   
>>> random.randint(1, 10)  
1     
>>> random.seed(9001)     
>>> random.randint(1, 10)    
1           
>>> random.seed(9001)          
>>> random.randint(1, 10)                 
1                  
>>> random.seed(9001)         
>>> random.randint(1, 10)          
1     
>>> random.seed(9002)                
>>> random.randint(1, 10)             
3
  

 . Let's say 'random.seed' gives a value to random value generator ('random.randint()') which generates these values on the basis of this seed. One of the must properties of random numbers is that they should be reproducible. Once you put same seed you get the same pattern of random numbers. So you are generating them right from the start again. You give a different seed it starts with a different initial (above 3). 

 You have given a seed now it will generate random numbers between 1 and 10 one after another. So you can assume one set of numbers for one seed value.                     


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22842334)
 Generate the range of data first and then shuffle it like this 

  import random
data = range(numLow, numHigh)
random.shuffle(data)
print data
  

 By doing this way, you will get all the numbers in the particular range but in a random order. 

 But you can use https://docs.python.org/2/library/random.html#random.sample to get the number of elements you need, from a range of numbers like this 

  print random.sample(range(numLow, numHigh), 3)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49196798)
 The random module and numpy.random both use a mt19937 to generate random numbers. Because of this, we can copy the state of one from one generator to the other to see if they have the same underlying implementation. 

  import random as rnd
import numpy as np

# seed numpy
np.random.seed(1)

# get state from numpy
state = [int(s) for s in list(np.random.get_state()[1])]
state.append(624)
state = tuple(state)
state = (3, tuple(state), None)

# set state for python 
rnd.setstate(state)

print(rnd.random())
print(np.random.rand())
  

 
   0.417022004702574 
  
   0.417022004702574 
 

 It looks like the mt19937 engine used gives equivalent results if the state is manually set to be the same. This seems to imply the seed function are implemented differently. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30154342)
 If your goal is to pick 8 random ASCII characters in the range [33..126], you can do that directly. First, ASCII characters in that range is called  string.printable . You can use the  random.sample  function to pick out 8 from there: 

  import string
import random

result = random.sample(string.printable, 8)
  

  result  is now a list of 8 random printable characters. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30030775)
 The difference is in the arguments. It's very common to generate a random number from a uniform distribution in the range [0.0, 1.0), so https://docs.python.org/2/library/random.html#random.random just does this. Use https://docs.python.org/2/library/random.html#random.uniform to specify a different range. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22842533)
 You could use  random.sample  function from https://docs.python.org/2/library/random.html#random.sample to select  k  elements from  population : 

  import random
random.sample(range(low, high), n)
  

 In case of rather large range of possible numbers you could use  itertools.islice  with infinite random generator: 

  import itertools
import random

def random_gen(low, high):
    while True:
        yield random.randrange(low, high)

gen = random_gen(1, 100)
items = list(itertools.islice(gen, 10))  # take first 10 random elements
  

  UPDATE  

 So, after question update it is now clear, that you need  n  distinct (unique) numbers. 

  import itertools
import random

def random_gen(low, high):
    while True:
        yield random.randrange(low, high)

gen = random_gen(1, 100)

items = set()

# try to add elem to set until set length is less than 10
for x in itertools.takewhile(lambda x: len(items) < 10, gen): 
    items.add(x)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13628792)
 A  set  will not keep any duplicates: 

  s = set()
while len(s) < 6:
    s.add(get_my_new_random_number())
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30154409)
 I recommend using a generator. It will only work if you use python 2.5 or above. 

  from random import randint

def randnums(number, startnum=0, endnum=10):
    for i in range(1, number + 1):
        yield randint(startnum, endnum)

print list(randnums(8, endnum=100))
  



