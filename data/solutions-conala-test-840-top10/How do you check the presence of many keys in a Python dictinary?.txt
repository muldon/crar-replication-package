Query: How do you check the presence of many keys in a Python dictinary?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2813820)
 You could use  all : 

  print( all(site in sites for site in ('stackoverflow','meta')) )
# True
print( all(site in sites for site in ('stackoverflow','meta','roger')) )
# False
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2813836)
 You can pretend the keys of the dict are a set, and then use set.issubset: 

  set(['stackoverflow', 'serverfault']).issubset(sites) # ==> True

set(['stackoverflow', 'google']).issubset(sites) # ==> False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19358542)
 Yes, you can do but with not lists. You may better use dict [dictinary]. A dictionary is one which is hash structure in python with keys and values associated to keys. making them key-values pairs. 
Usually lists would be like    

  d = {'one':1,'two':2}  
  

 which can be accessed like print d[one] which prints '1';   

 For your case, we can use the same dict as...   

  d = {'list1': list1,'list2': list2,'list3': list3}  
  

 which when called like print d[list1] prints all the elements of the list1.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11908743)
 Dicts don't have a reliable order. 

 You can use an http://docs.python.org/library/collections.html#collections.OrderedDict instead. 

  def sort_dict_data(data):
    return OrderedDict((datetime.strftime(k, '%d-%m-%Y'), v)
                       for k, v in sorted(data.iteritems()))
  

 See it working online: http://ideone.com/MyrSj 

 Note that the  OrderedDict  orders according to  insertion  order, not by key order. The above code inserts items into the  OrderedDict  in key order, giving you the result you want. But it is important to remember that any later additions you make to the dictionary will appear at the end, not in the correct position according to key order. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34705305)
 If your dict is also compatible with json: 

  import json
def get_settings(**kw):
    return json.loads(r"""{{
        "general": {{
            "{variable0:}s": ["{variable0:}1", "{variable0:}2"]
        }},
        "{variable1:}al": ["{variable1:}1", "{variable1:}2"]
    }}""".format(**kw)
                      )

print get_settings(variable0="pop", variable1='cheese')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11908825)
 OrderedDict preserves order of insertion (the chronology), not key order.  Plain dict's don't preserve either. 

 For dictionaries sorted by keys, you likely want a Treap, Red-Black tree, or one of the many other tree datastructures known to computer science. 

 Treaps are fast on average, but will be a bit slow once in an infrequent while, as it rebalances itself. 

 Red-Black trees are well known, relatively complex (compared to treaps), and give OK performance on average.  Their chief benefit is that they don't have highly variable performance, making them sometimes-nice in user interfaces. 

 I recently did a performance comparison of datastructures that are like dicts but with sorted keys.  It can be found here: http://stromberg.dnsalias.org/~strombrg/python-tree-and-heap-comparison/ 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20554860)
 As error is about generator exit, I guess you use python 3.x. So  best_guess.values()  is a generator, which exhaust for the first  value in line['full name']  for which a match will not be found. 

 Also, I guess  all  usage is incorrect, if you look for  any  value to exist (not sure, from which one dictinary though). 

 You can use something like follows, providing  line  is the second dictionary: 

  def NameExists(best_guess, line):
    vals = set(best_guess.values())
    return bool(set(line.values()).intersection(vals))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34705216)
 You can turn it into a function: 

  #!/usr/bin/env python

def get_settings(variable0, variable1):
    return {
        'general': {
            variable0+'s': [variable0+'1', variable0+'2'],
        },
        variable1+'al': [variable1+'1', variable1+'2'],
    }

print get_settings('car', 'loc')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22128441)
 Exception handling is generally much slower than an if statement. With the presence of nested dictionaries, it is easy to see why the author used an exception statement. However, the following would work also. 

  var = mydict.get(a,{}).get(b,None)

if var is None:
   print("Not found")
else:
   print("Found: " + str(var))
  

 The use of  get  on the  dict  object returns a default value when the key is not present. 



