Query: Python: How do I convert an array of strings to an array of numbers?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5306094)
 Use  int  which converts a string to an int, inside a list comprehension, like this: 

  desired_array = [int(numeric_string) for numeric_string in current_array]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34658667)
 You can use numpy to convert a list directly to a floating array or matrix. 

      import numpy as np
    list_ex = [1, 0] # This a list
    list_int = np.array(list_ex) # This is a numpy integer array
  

 If you want to convert the integer array to a floating array then add 0.  

      list_float = np.array(list_ex) + 0. # This is a numpy floating array
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19798689)
 I see that you are reading the CSV file and getting an array of strings. 
You can convert them to an array of floating point numbers before saving them: 

  import numpy as np
out_dict[filename]=np.array(arr, dtype=np.float64)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34043615)
 Your idea of using the  array  module is probably bogus, as an  array.array  object https://docs.python.org/2/library/array.html#module-array. You cannot use vectorized operations on them. Further, an  array.array  is a 1D object. 

 That said, you possibly want to use the http://www.numpy.org/, whose  array  object is a multidimensional array on which you can operate at your will. 

  # idiomatic manner of importing numpy
import numpy as np

data = ['1 2 3.', '4. 5 8']
arraydata = np.array([[float(n) for n in row.split()] for row in data])
print arraydata

# [[ 1.  2.  3.]
#  [ 4.  5.  8.]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5306100)
 http://docs.python.org/tutorial/datastructures.html#list-comprehensions are the way to go (see https://stackoverflow.com/questions/5306079/python-how-do-i-convert-an-array-of-strings-to-an-array-of-numbers/5306094#5306094). Possible alternative with http://docs.python.org/library/functions.html#map: 

  map(int, ['1','-1','1'])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37879885)
 You could convert the entries to strings and split them at the  e . Combine that with list comprehension and you get: 

  numbers = [1.23e-21, 2.32e-14, 8.87e-12]  

result = [float(str(i).split('e')[0]) for i in numbers] 
  

 If all of your numbers have exactly two decimal places, you could use the slice operator for strings and list comprehension: 

  result = [float(str(i)[:4]) for i in numbers]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51898175)
 You can use  ast.literal_eval  before passing to  numpy.array : 

  from ast import literal_eval
import numpy as np

x = '[(-0.0426, -0.7231, -0.4207), (0.2116, -0.1733, -0.1013)]'

res = np.array(literal_eval(x))

print(res)

array([[-0.0426, -0.7231, -0.4207],
       [ 0.2116, -0.1733, -0.1013]])
  

 You can do the equivalent with strings in a Pandas series, but it's not clear if you need to aggregate across rows. If this is the case, you can combine a list of NumPy arrays derived using the above logic. 

 The docs explain types acceptable to https://docs.python.org/3/library/ast.html#ast.literal_eval: 

 
   Safely evaluate an expression node or a string containing a Python
  literal or container display. The string or node provided may only
  consist of the following Python literal structures: strings, bytes,
  numbers, tuples, lists, dicts, sets, booleans, and  None . 
 

 So we are effectively converting a string to a list of tuples, which  np.array  can then convert to a NumPy array. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48006299)
 It's not valid in Python 3, but you can use  'b'  (signed character) or  'B'  (unsigned character). You have to pass numbers instead of strings though. You can convert characters to numerical values using https://docs.python.org/3/library/functions.html#ord. There is a  'u'  code for unicode characters, but it is deprecated. 

 https://docs.python.org/3/library/array.html 

 Explanation: 

 All strings in Python 3 are unicode. That means that unlike in C, a single character does not fit into one byte. If you want an array of single bytes, you can use type code  'b'  or  'B' , but you can't pass characters in to initialise the array (since characters don't fit into bytes). 

 It's easy enough to convert characters to integers on the fly like this: 

  array.array('b', map(ord, 'Some characters'))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6730506)
 convert the numbers as you read them, before creating the array: 

  infile = open('europenewMatrix.txt','r')
infile.readline() # skip the first line
numbers = []
for line in infile:
    numbers.append([int(val) for val in line.split(',')[2:]])
infile.close()
travelMat = array(numbers)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48607255)
 A pure Numpy approach would be using  np.loadtext()  and converting the strings to a proper type by passing in converter function: 

  In [70]: col1, col2 = np.loadtxt('test.csv', converters={0:int, 1:bytes.decode}, dtype=str, delimiter=',', unpack=True)

In [71]: col1 = col1.astype(int)

In [72]: col2 = np.vstack(np.core.defchararray.split(col2)).astype(int)
  

  

  In [73]: col1
Out[73]: array([1, 3, 2, 5])

In [74]: col2
Out[74]: 
array([[1, 2, 3, 4, 5],
       [2, 3, 4, 5, 6],
       [5, 6, 5, 4, 8],
       [5, 4, 8, 6, 2]])
  

 Note that before converting  col2  to and array of integers it's an array of strings like following: 

  In [76]: col2
Out[76]: 
array([' 1 2 3 4 5', ' 2 3 4 5 6', ' 5 6 5 4 8', ' 5 4 8 6 2'], 
      dtype='<U10')
  

 If you also want them separated but in string type at the next step you just don't need to use  vstack()  and  astype() .  

  In [77]: np.core.defchararray.split(col2)
Out[77]: 
array([['1', '2', '3', '4', '5'], ['2', '3', '4', '5', '6'],
       ['5', '6', '5', '4', '8'], ['5', '4', '8', '6', '2']], dtype=object)
  



