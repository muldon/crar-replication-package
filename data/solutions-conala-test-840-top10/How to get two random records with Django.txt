Query: How to get two random records with Django
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1731373)
 If you specify the random operator in the ORM I'm pretty sure it will give you two distinct random results won't it? 

  MyModel.objects.order_by('?')[:2] # 2 random results.
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1731371)
  Object.objects.order_by('?')[:2]  

 This would return two random-ordered records. You can add  

  distinct()
  

 if there are records with the same value in your dataset. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38497778)
 . 

 Get the the list of ids of all records: 

  my_ids = MyModel.objects.values_list('id', flat=True)
my_ids = list(my_ids)
  

 Then pick n random ids from all of the above ids: 

  n = 2
rand_ids = random.sample(my_ids, n)
  

 And get records for these ids: 

  random_records = MyModel.objects.filter(id__in=rand_ids)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20437227)
 About sampling n random values from a sequence, the random lib could be used, 

  random.Random().sample(range(0,last),2) 
  

 will fetch 2 random samples from among the sequence elements, 0 to last-1 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51161154)
 For example when you want to get 10 random items from a model. You can use random module 

  import random
random_items = random.sample(list(model.objects.all()), k=10)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43756299)
 Here's a simple solution: 

  from random import randint

count = Model.objects.count()
random_object = Model.objects.all()[randint(0, count - 1)] #single random object
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48806467)
 To get unique posts, you can do: 

  posts = list(Post.objects.all().order_by('?')[:10])
first_group = posts[:5]
second_group = posts[5:]
  

 This has the added advantage of making a single database query. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30741675)
 Just a simple idea how I do it: 

  def _get_random_service(self, professional):
    services = Service.objects.filter(professional=professional)
    i = randint(0, services.count()-1)
    return services[i]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/962672)
 Simply use: 

  MyModel.objects.order_by('?').first()
  

 It is documented in https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.order_by. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/10897176)
  

  import random    
object_list = list(Content.objects.filter(foo=bar).values()[:100])
random.shuffle(object_list)
  

 Runs only single-simple MySQL query and is good on performance. 



