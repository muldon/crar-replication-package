Query: A sequence of empty lists of length n in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23612328)
 Use comprehension: 

  [[] for _ in range(2)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29482145)
 You can transpose a matrix using the built-in function https://docs.python.org/2/library/functions.html?highlight=zip%20function#zip: 

  def transpose(m):
    return zip(*m)
  

 From the docs: 

 
   This function returns a list of tuples, where the i-th tuple contains
  the i-th element from each of the argument sequences or iterables. The
  returned list is truncated in length to the length of the shortest
  argument sequence. When there are multiple arguments which are all of
  the same length,  zip()  is similar to  map()  with an initial argument of
   None . With a single sequence argument, it returns a list of 1-tuples.
  With no arguments, it returns an empty list. 
  
   The left-to-right evaluation order of the iterables is guaranteed.
  This makes possible an idiom for clustering a data series into
  n-length groups using  zip(*[iter(s)]*n) . 
 

 To make this return a list of lists instead of a list of tuples, return the following list comprehension: 

  [list(r) for r in zip(*m)]
  

 Here's how to do it using append: 

  def transpose(m):
    transposed = [[] for _ in range(len(m[0]))]
    for i in range(len(m)):
        for j in range(len(m[0])):
            transposed[j].append(m[i][j])
    return transposed
  

 As you can see, using  zip  is much easier.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/23612318)
  

  [[] for _ in range(n)]
  

 Unlike  [[]] * n , this will give you  unique  inner lists (appending to  one  doesn't append to them  all ).  e.g.: 

  >>> x = [[] for _ in range(n)]
>>> x[0].append(1) 
>>> x
[[1], [], []]
  

  

  >>> x = [[]] * 3
>>> x[0].append(1)
>>> x
[[1], [1], [1]]
  

 Note that this latter idiom ( [[]] * n ) is a  very  common mistake that crops up around here in different contexts pretty frequently. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25225818)
 If  step  of the length of slice is not 1, the length of the slice and the length of the assigned sequence should match. 

  >>> k = [1,2,3,4,5,6]
>>> len(k[5:2:-1])
3
>>> k[5:2:-1] = [7,7,7]  # This is okay, lengths are same.
>>> k
[1, 2, 3, 7, 7, 7]

>>> k[5:2:-1] = [7,7,7,7]  # not okay
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: attempt to assign sequence of size 4 to extended slice of size 3
  

 If the length of the slice 1 (default), it's okay to assign a sequence that has difference length; this will change the length of the list. 

  >>> k[1:5] = [1]
>>> k
[1, 1, 7]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27137427)
 
   How to get the size of a list? 
 

 To find the size of a list, use the builtin function,  len : 

  items = []
items.append("apple")
items.append("ange")
items.append("banana")
  

  

  len(items)
  

 returns 3. 

 Explanation 

 Everything in Python is an object, including lists. All objects have a header of some st in the C implementation.  

 Lists and other similar builtin objects with a "size" in Python, in particular, have an attribute called  ob_size , where the number of elements in the object is cached. So checking the number of objects in a list is very fast. 

 But if you're checking if list size is zero  not, don't use  len  - instead, https://stackoverflow.com/a/45778282/541136. 

 From the https://docs.python.g/library/functions.html#len 

   len(s)   

 
   Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list,  range) 
  a collection (such as a dictionary, set,  frozen set). 
 

  len  is implemented with  __len__ , from the data model <a href="https://docs.python.g/reference/datamodel.html#object.__len__" : 

   object.__len__(self)   

 
   Called to implement the built-in function  len() . Should return the length of the object, an integer >= 0. Also, an object that doesnâ€™t
  define a  __nonzero__()  [in Python 2   __bool__()  in Python 3] method and whose  __len__()  method returns zero
  is considered to be false in a Boolean context. 
 

 And we can also see that  __len__  is a method of lists: 

  items.__len__()
  

 returns 3. 

 Builtin types you can get the  len  (length) of 

 And in fact we see we can get this infmation f all of the described types: 

  >>> all(hasattr(cls, '__len__') f cls in (str, bytes, tuple, list, 
                                            xrange, dict, set, frozenset))
True
  

 Do not use  len  to test f an empty  nonempty list 

 To test f a specific length, of course, simply test f equality: 

  if len(items) == required_length:
    ...
  

 But there's a special case f testing f a zero length list  the inverse. In that case, do not test f equality. 

  

  if len(items): 
    ...
  

 Instead, simply do: 

  if items:     # Then we have some items, not empty!
    ...
  

  

  if not items: # Then we have an empty list!
    ...
  

 I https://stackoverflow.com/questions/53513/best-way-to-check-if-a-list-is-empty/45778282#45778282 but in sht,  if items    if not items  is both me readable and me perfmant. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22218870)
 To get the elements backwards, you need to pass the step as a negative value 

  l = [1,2,3,4]
print l[1:0:-1]
# [2]
  

 When you say  l[1:0]  Python takes http://hg.python.org/cpython/file/1be39dc4409a/Objects/sliceobject.c#l140. 

 And when http://hg.python.org/cpython/file/1be39dc4409a/Objects/sliceobject.c#l177, the length of the slice to be returned will be set to 0. So, an empty list will be returned. 

  if ((*step < 0 && *stop >= *start) || (*step > 0 && *start >= *stop)) {
    *slicelength = 0;
}
  

 When you use negative indices for http://hg.python.org/cpython/file/1be39dc4409a/Objects/sliceobject.c#l160 or http://hg.python.org/cpython/file/1be39dc4409a/Objects/sliceobject.c#l171, Python adds length of the sequence to it. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26332807)
 See the https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange: 

  >>> [''] * 16
['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
  

 
   s * n, n * s 
  
   n shallow copies of s concatenated 
 

 where  s  is a sequence and  n  is an integer. 

 The full footnote from the docs for this operation: 

 
   Values of n less than 0 are treated as 0 (which yields an empty sequence of the same type as s). Note also that the copies are shallow; nested structures are not copied. This often haunts new Python programmers; consider: 
 

  >>> lists = [[]] * 3
>>> lists
[[], [], []]
>>> lists[0].append(3)
>>> lists
[[3], [3], [3]]
  

 
   What has happened is that [[]] is a one-element list containing an empty list, so all three elements of [[]] * 3 are (pointers to) this single empty list. Modifying any of the elements of lists modifies this single list. You can create a list of different lists this way: 
 

  >>> lists = [[] for i in range(3)]
>>> lists[0].append(3)
>>> lists[1].append(5)
>>> lists[2].append(7)
>>> lists
[[3], [5], [7]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34678182)
 It says right in the https://docs.python.org/3/library/stdtypes.html#common-sequence-operations 

 
    s * n  or  n * s  equivalent to adding  s  to itself  n  times 
 

 where  s  is a sequence and  n  is an  int . For example 

  >>> [1,2,3]*3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
  

 This is consistent with other sequences as well, such as  str  

  >>> 'hello'*3
'hellohellohello'
  

 If you wanted a list of 3 empty lists you could say 

  >>> [[] for _ in range(3)]
[[], [], []]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25136874)
 Your code: 

  MinVal = min(min(E[i]) for i in range(len(E)))
  

 fails when  E[i] == [] , as there is no sensible definition of the minimum of an empty set. You therefore need to skip empty sub-lists. One option would be: 

  min_val = min(min(e) for e in E if e)
  

  

  min_vals = []
for e in E:
    if e: # or 'if e != []:' - empty sequences evaluate False-y
        mins.append(min(e))
min_val = min(min_vals)
  

  (Note that you're not actually using the index  i  anywhere, so you can iterate directly over  E .)  

 5,000 items isn't that many, you probably don't need to worry too much about efficiency. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34861714)
 https://docs.python.org/2/library/functions.html#zip uses the shortest sequence. From the documentation: 

 
    zip([iterable, ...])  
  The returned list is truncated in length to the length of the shortest argument sequence. 
 

 So, if you have an empty sequence you will get nothing: 

  >>> some = [1, 2, 3]
>>> empty = []
>>> zip(some, empty)
[]
  

 Use https://docs.python.org/2/library/itertools.html#itertools.izip_longest if you want to use the longest sequence. It will fill in  None  by default for missing values, or you can specify a new  fillvalue : 

 
    itertools.izip_longest(*iterables[, fillvalue])  
  If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted 
 

  >>> from itertools import izip_longest
>>> some = [1, 2, 3]
>>> shorter = ['a', 'b']
>>> list(izip_longest(some, shorter))
[(1, 'a'), (2, 'b'), (3, None)]
  



