Query: How to sort pandas data frame using values from several columns?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17619032)
  DataFrame.sort  is deprecated; use https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html. 

  >>> df.sort_values(['c1','c2'], ascending=[False,True])
   c1   c2
0   3   10
3   2   15
1   2   30
4   2  100
2   1   20
>>> df.sort(['c1','c2'], ascending=[False,True])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/ampawake/anaconda/envs/pseudo/lib/python2.7/site-packages/pandas/core/generic.py", line 3614, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'DataFrame' object has no attribute 'sort'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39246607)
 The dataframe.sort() method is - so my understanding - deprecated in pandas > 0.18. In order to solve your problem you should use dataframe.sort_values() instead: 

  f.sort_values(by=["c1","c2"], ascending=[False, True])
  

 The output looks like this:  

      c1  c2
    3   10
    2   15
    2   30
    2   100
    1   20
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51123731)
 Note : Everything up here is correct,just replace  sort  -->  sort_values ()
So, it becomes: 

   import pandas as pd
 df = pd.read_csv('data.csv')
 df.sort_values(ascending=False,inplace=True)
  

 Refer to the official website https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34790248)
 Use of  sort  can result in warning message. See https://github.com/bokeh/bokeh/issues/3014 discussion.
So you might wanna use  sort_values , docs http://pandas.pydata.org/pandas-docs/version/0.17.1/generated/pandas.DataFrame.sort_values.html 

 Then your code can look like this: 

  df = df.sort_values(by=['c1','c2'], ascending=[False,True])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32829725)
 If you are writing this code as a script file then you will have to write it like this: 

<pre class="lang-python prettyprint-override"> df = df.sort(['c1','c2'], ascending=[False,True])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41092267)
 In my case, the accepted answer didn't work: 

 <strike>f.sort_values(by=["c1","c2"], ascending=[False, True])</strike> 

 Only the following worked as expected: 

  f = f.sort_values(by=["c1","c2"], ascending=[False, True])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43280418)
  sort_values  will sort the entire data frame by the columns order you pass to it. In your first example you are sorting the entire data frame with  ['a', 'b', 'c'] . This will sort first by  'a' , then by  'b'  and finally by  'c' .  

 Notice how, after sorting by  a , the rows maintain the same. This is the expected result. 

 Using  lambda  you are passing each column to it, this means  sort_values  will apply to a single column, and that's why this second approach sorts the columns as you would expect. In this case, the rows change. 

 If you don't want to use  lambda  nor  numpy  you can get around using this: 

  pd.DataFrame({x: df[x].sort_values().values for x in df.columns.values})
  

 Output: 

     a  b  c
0  2  1  1
1  3  4  2
2  5  7  4
3  6  9  5
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40676527)
 I think it is possible by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reindex.html, first can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.sort_values.html for sorting: 

  df = pd.DataFrame({'A':[1,2,3],
                   'B':[4,5,6],
                   'C':[7,8,9],
                   'D':[1,3,5],
                   'E':[5,3,6],
                   'F':[7,4,3]})

print (df)
   A  B  C  D  E  F
0  1  4  7  1  5  7
1  2  5  8  3  3  4
2  3  6  9  5  6  3

print (df.A / df.D)
0    1.000000
1    0.666667
2    0.600000
dtype: float64

print ((df.A / df.D).sort_values())
2    0.600000
1    0.666667
0    1.000000
dtype: float64

print (df.reindex((df.A / df.D).sort_values().index))
   A  B  C  D  E  F
2  3  6  9  5  6  3
1  2  5  8  3  3  4
0  1  4  7  1  5  7
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40379994)
 I think you need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html: 

  print (pd.melt(df,id_vars='c', var_name='0', value_name='1'))
   c  0  1
0  4  a  1
1  5  a  2
2  6  a  3
3  4  b  9
4  5  b  8
5  6  b  7
  

 Another solution with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html: 

  df1 = df.set_index('c').stack().reset_index().sort_values('level_1')
df1.columns = ['c', '0','1']
print (df1)
   c  0  1
0  4  a  1
2  5  a  2
4  6  a  3
1  4  b  9
3  5  b  8
5  6  b  7
  

 More general solution - use  list comprehension  for filter all columns which are not  a  and  b  to variable  cols : 

  cols = [col for col in df.columns if col not in ['a','b']]
print (cols)
['c']

print (pd.melt(df,id_vars=cols, var_name='0', value_name='1'))
   c  0  1
0  4  a  1
1  5  a  2
2  6  a  3
3  4  b  9
4  5  b  8
5  6  b  7
  

 Sample with added another column  g : 

  df = pd.DataFrame({'a': [1, 2, 3], 
                   'b': [9, 8, 7], 
                   'c': [4, 5, 6], 
                   'g': [0, 1, 7]})

print (df)
   a  b  c  g
0  1  9  4  0
1  2  8  5  1
2  3  7  6  7

cols = [col for col in df.columns if col not in ['a','b']]
print (cols)
['c', 'g']
  

 Faster solution with https://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.setdiff1d.html: 

  cols = np.setdiff1d(df.columns, ['a','b']).tolist()
print (cols)
['c', 'g']

print (pd.melt(df,id_vars=cols, var_name='0', value_name='1'))
   c  g  0  1
0  4  0  a  1
1  5  1  a  2
2  6  7  a  3
3  4  0  b  9
4  5  1  b  8
5  6  7  b  7
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35827331)
 I have found this to be really useful:  

  df = pd.DataFrame({'A' : range(0,10) * 2, 'B' : np.random.randint(20,30,20)})

# A ascending, B descending
df.sort(**skw(columns=['A','-B']))

# A descending, B ascending
df.sort(**skw(columns=['-A','+B']))
  

 Note that unlike the standard  columns=,ascending=  arguments, here column names and their sort order are in the same place. As a result your code gets a lot easier to read and maintain. 

 Note the actual call to  .sort  is unchanged,  skw  ( s ort kw args) is just a small helper function that parses the columns and returns the usual  columns=  and  ascending=  parameters for you. Pass it any other sort kwargs as you usually would. Copy/paste the following code into e.g. your local  utils.py  then forget about it and just use it as above. 

  # utils.py (or anywhere else convenient to import)
def skw(columns=None, **kwargs):
    """ get sort kwargs by parsing sort order given in column name """
    # set default order as ascending (+)
    sort_cols = ['+' + col if col[0] != '-' else col for col in columns]
    # get sort kwargs
    columns, ascending = zip(*[(col.replace('+', '').replace('-', ''), 
                                False if col[0] == '-' else True) 
                               for col in sort_cols])
    kwargs.update(dict(columns=list(columns), ascending=ascending))
    return kwargs
  



