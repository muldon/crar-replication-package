Query: list of dicts to/from dict of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29311229)
 you can use https://docs.python.org/2/library/itertools.html#itertools.product function within a list comprehension : 

  >>> from itertools import product
>>> [dict(i) for i in product(*[[(i,k) for k in j] for i,j in my_dict.items()])]
[{'A': 1, 'B': 1}, {'A': 1, 'B': 4}, {'A': 2, 'B': 1}, {'A': 2, 'B': 4}]
  

 You can get the pairs contain your key and values with the following list comprehension : 

  [(i,k) for k in j] for i,j in my_dict.items()]
[[('A', 1), ('A', 2)], [('B', 1), ('B', 4)]]
  

 Then you can use  product  to calculate the product of the preceding lists and then convert them to dictionary with  dict  function. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34283661)
 You can use  dict.values()  within a list comprehension to get the values and then use  zip  in order to get the columns : 

  >>> zip(*[d.values() for d in myList])
[(0, 1), (2, 3)]
  

 If you want list of list : 

  >>> [list(col) for col in zip(*[d.values() for d in myList])]
[[0, 1], [2, 3]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54886438)
 You can unpack the two lists into the dict constructor and then unpack the two dicts into one: 

  [{**dict(*listA), **dict(*listB)}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47913285)
 You can sort both lists before comparing them and compare the sorted results: 

  >>> list_dict_a = [
        {'expiration_date': None, 'identifier_country': None, 'identifier_number': 'Male', 'identifier_type': 'Gender', 'issue_date': None},
        {'expiration_date': None, 'identifier_country': 'VE', 'identifier_number': '1234567', 'identifier_type': 'Foo No.', 'issue_date': None}]

>>> list_dict_b = [
        {'identifier_country': 'VE', 'expiration_date': None, 'identifier_type': 'Foo No.', 'issue_date': None, 'identifier_number': '1234567'},
        {'identifier_country': None, 'expiration_date': None, 'identifier_type': 'Gender', 'issue_date': None, 'identifier_number': 'Male'}]

>>> list_dict_a == list_dict_b
False
>>> def key_func(d):
        items = ((k, v if v is not None else '') for k, v in d.items())
        return sorted(items)
>>> sorted(list_dict_a, key=key_func) == sorted(list_dict_b, key=key_func)
True
  

 The order of the dicts within each list will then not matter. 

 Passing the  key  function is needed, because dicts are not orderable, thus we need to tell the sorting function what key to use for each pair of dict objects when comparing them. A key for each dictionary is simply a sorted list of its (key, value) pairs. 

 The key function calculates a key for each dict as follows: 

  >>> dict_a0 = list_dict_a[0]
>>> key_func(dict_a0)
[('expiration_date', ''), ('identifier_country', ''), ('identifier_number', 'Male'), ('identifier_type', 'Gender'), ('issue_date', '')]
  

  Footnotes  

 In order for this list of (key, value) pairs to be comparable with other dicts' lists,  None  values had to be converted to an empty string. This allows None values to be comparable with other non-None values. 

 The underlying assumption in the solution above is that all dictionary values in your case are either strings or  None , and that "empty" values are consistently represented as  None  (and not e.g. by an empty string). If this is not the case,  key_func()  would have to be adjusted accordingly to assure that the resulting lists are always comparable to each other for any dict value expected in the data. 

 Also, for large dicts this key function might not be ideal, because comparisons of key pairs would be too slow. It would thus be better to instead calculate a unique hash value for each dict (but the same hash for dicts that compare equal). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23551944)
 Here are the one-line solutions (spread out over multiple lines for readability) that I came up with: 

 if dl is your original dict of lists: 

  dl = {"a":[0,1],"b":[2,3]}
  

 Then here's how to convert it to a list of dicts: 

  ld = [{key:value[index] for key in dl.keys()}
         for index in range(max(map(len,dl.values()]
  

 Which, if you assume that all your lists are the same length, you can simplify and gain a performance increase by going to: 

  ld = [{key:value[index] for key, value in dl.items()}
         for index in range(len(dl.values()[0]))]
  

 and here's how to convert that back into a dict of lists: 

  dl2 = {key:[item[key] for item in ld]
         for key in list(functools.reduce(
             lambda x, y: x.union(y),
             (set(dicts.keys()) for dicts in ld)
         ))
      }
  

 If you're using Python 2 instead of Python 3, you can just use  reduce  instead of  functools.reduce  there. 

 You can simplify this if you assume that all the dicts in your list will have the same keys: 

  dl2 = {key:[item[key] for item in ld] for key in ld[0].keys() }
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29311222)
 You can use https://docs.python.org/2/library/itertools.html#itertools.product for this, i.e calculate cartesian product of the value and then simply zip each of the them with the keys from the dictionary. Note that https://docs.python.org/2/library/stdtypes.html#mapping-types-dict's  keys()  and corresponding  values()  remains same if it is not modified in-between hence ordering won't be an issue here: 

  >>> from itertools import product
>>> my_dict = {'A': [1, 2], 'B': [1, 4]}
>>> keys = list(my_dict)
>>> [dict(zip(keys, p)) for p in product(*my_dict.values())]
[{'A': 1, 'B': 1}, {'A': 1, 'B': 4}, {'A': 2, 'B': 1}, {'A': 2, 'B': 4}]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48773791)
 A  vanilla  Python approach 

  result = {}
for subdic in data:
    for k, v in subdic.items():
        result.setdefault(k, []).append(v)
  

 Here we iterate over the items and we add an empty list to the  result  dict in case the key is not yet in the dictionary. Regardless whether there was already a list, we append  v  to that list. 

 Using  defaultdict  

 We can make it more elegant by using  defaultdict  from  collections : 

  from collections import defaultdict

result = defaultdict(list)
for subdic in data:
    for k, v in subdic.items():
        result[k].append(v)
  

 Here we basically make abstraction of the  setdefault  (and we also save on constructing useless empty lists). In case the output should be a  dict  (and not a  defaultdict ), we can end the function with: 

  result = dict(result)
  

 Using  pandas  

 If every dictionary contains the same keys, we can use pandas: 

  from pandas import DataFrame

result = DataFrame(data).to_dict(orient='list')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7327455)
  from collections import defaultdict
dictB = defaultdict(list)
for b in listB:
    dictB[b['ID']].append(b)

for a in listA:
    a['things'] = []
    for b in dictB[a['ID']]:
        a['things'].append(b)
  

 this will turn your algorithm from O(n*m) to O(m)+O(n), where n=len(listA), m=len(listB) 

 basically it avoids looping through each dict in listB for each dict in listA by 'precalculating' what dicts from listB match each 'ID' 



