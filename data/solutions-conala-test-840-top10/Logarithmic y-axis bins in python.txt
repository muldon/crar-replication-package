Query: Logarithmic y-axis bins in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49955422)
 The following code indicates how you can use  bins='auto'  with the log scale. 

  import numpy as np
import matplotlib.pyplot as plt

data = 10**np.random.normal(size=500)

_, bins = np.histogram(np.log10(data + 1), bins='auto')
plt.hist(data, bins=10**bins);
plt.gca().set_xscale("log")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6856155)
 use logspace() to create a geometric sequence, and pass it to bins parameter. And set the scale of xaxis to log scale. 

  import pylab as pl
import numpy as np

data = np.random.normal(size=10000)
pl.hist(data, bins=np.logspace(np.log10(0.1),np.log10(1.0), 50))
pl.gca().set_xscale("log")
pl.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13892367)
 You can change the log in the y axis with the following: 

  plt.gca().set_yscale('linear')
  

 Or press the L key when the figure is in focus. 

 However, your  hist()  with  log=True  does not plot a logarithmic x axis. From the http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist: 

 
   matplotlib.pyplot.hist(x, bins=10, ...) 
  
   bins:
     Either an integer number of bins or a sequence giving the bins. If bins is an integer, bins + 1 bin edges will be returned, consistent with numpy.histogram() for numpy version >= 1.3, and with the new = True argument in earlier versions.  Unequally spaced bins are supported if bins is a sequence.  
 

 So if you just set  bins=10  they will be equally spaced, which is why when you set the xscale to log they have decreasing widths. To get equally spaced bins in a log xscale you need something like: 

  plt.hist(x, bins=10**np.linspace(0, 1, 10))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25110468)
 The most direct way is to just compute the log10 of the limits, compute linearly spaced bins, and then convert back by raising to the power of 10, as below: 

  import pylab as pl
import numpy as np

data = np.random.normal(size=10000)

MIN, MAX = .01, 10.0

pl.figure()
pl.hist(data, bins = 10 ** np.linspace(np.log10(MIN), np.log10(MAX), 50))
pl.gca().set_xscale("log")
pl.show()
  

 https://i.stack.imgur.com/pX0jr.png 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35644065)
 np.logspace returns bins in  [1-10] , logarithmically spaced - in my case xx is a npvector >0 so the following code does the trick 

  logbins=np.max(xx)*(np.logspace(0, 1, num=1000) - 1)/9
hh,ee=np.histogram(xx, density=True, bins=logbins)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47850787)
 Specifying  bins=8  in the  hist  call means that the range between the minimum and maximum value is divided equally into 8 bins. What is equal on a linear scale is distorted on a log scale.  

 What you could do is specify the bins of the histogram such that they are unequal in width in a way that would make them look equal on a logarithmic scale.  

  import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

x = [2, 1, 76, 140, 286, 267, 60, 271, 5, 13, 9, 76, 77, 6, 2, 27, 22, 1, 12, 7, 
     19, 81, 11, 173, 13, 7, 16, 19, 23, 197, 167, 1]
x = pd.Series(x)

# histogram on linear scale
plt.subplot(211)
hist, bins, _ = plt.hist(x, bins=8)

# histogram on log scale. 
# Use non-equal bin sizes, such that they look equal on log scale.
logbins = np.logspace(np.log10(bins[0]),np.log10(bins[-1]),len(bins))
plt.subplot(212)
plt.hist(x, bins=logbins)
plt.xscale('log')
plt.show()
  

 https://i.stack.imgur.com/mNxhc.png 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43961180)
 You could use logarithmic bins, which would work well with data that is distributed as yours is. Here is an example: 

  import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.DataFrame()
df['GDP (BILLIONS)'] = 2000*1./(np.random.random(250))
df.sort_values(by='GDP (BILLIONS)',ascending=False, inplace=True)

fig, ax = plt.subplots(1,2,figsize=(8, 3))

sns.distplot(df['GDP (BILLIONS)'].values,bins=8,kde=False,ax=ax[0])
ax[0].set_title('Linear Bins')

LogMin, LogMax = np.log10(df['GDP (BILLIONS)'].min()),np.log10(df['GDP (BILLIONS)'].max())
newBins = np.logspace(LogMin, LogMax,8)
sns.distplot(df['GDP (BILLIONS)'].values,bins=newBins,kde=False,ax=ax[1])
ax[1].set_xscale('log')
ax[1].set_title('Log Bins')

fig.show()
  

 https://i.stack.imgur.com/VirUm.png 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15419072)
 . You should not use plt.hist as numpy.histogram, that gives you both the values and the bins, than you can plot the cumulative with ease: 

  import numpy as np
import matplotlib.pyplot as plt

# some fake data
data = np.random.randn(1000)
# evaluate the histogram
values, base = np.histogram(data, bins=40)
#evaluate the cumulative
cumulative = np.cumsum(values)
# plot the cumulative function
plt.plot(base[:-1], cumulative, c='blue')
#plot the survival function
plt.plot(base[:-1], len(data)-cumulative, c='green')

plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33499757)
 If your actual values of the bins are not important but you want to have a histogram of values of completely different orders of magnitude, you can use a logarithmic scaling along the x axis. This here gives you bars with equal widths 

  import numpy as np
import matplotlib.pyplot as plt

data = [0.04,0.07,0.1,0.2,0.2,0.8,1,1.5,4,5,7,8,43,45,54,56,99]

plt.hist(data,bins=10**np.linspace(-2,2,5)) 
plt.xscale('log')

plt.show()
  

 When you have to use your bin values you can do 

  import numpy as np
import matplotlib.pyplot as plt

data = [0.04,0.07,0.1,0.2,0.2,0.8,1,1.5,4,5,7,8,43,45,54,56,99]
bins = [0.03,0.3,2,100] 

plt.hist(data,bins=bins) 
plt.xscale('log')

plt.show()
  

 However, in this case the widths are not perfectly equal but still readable. If the widths must be equal and you have to use your bins I recommend @tom's solution. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47850534)
 
   plot another histogram with the log of x. 
 

 is not the same as plotting x on the logarithmic scale. Plotting the logarithm of x would be 

  np.log(x).plot.hist(bins=8)
plt.show()
  

 https://i.stack.imgur.com/U97YH.png 

 The difference is that the values of x themselves were transformed: we are looking at their logarithm.  

 This is different from plotting on the logarithmic scale, where we keep x the same but change the way the horizontal axis is marked up (which squeezes the bars to the right, and stretches those to the left). 



