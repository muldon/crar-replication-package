Query: How to create nested lists in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19249250)
 Try a http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions: 

  lst = [[] for _ in xrange(a)]
  

  

  >>> a = 3
>>> lst = [[] for _ in xrange(a)]
>>> lst
[[], [], []]
>>> a = 10
>>> lst = [[] for _ in xrange(a)]
>>> lst
[[], [], [], [], [], [], [], [], [], []]
>>> # This is to prove that each of the lists in lst is unique
>>> lst[0].append(1)
>>> lst
[[1], [], [], [], [], [], [], [], [], []]
>>>
  

 Note however that the above is for Python 2.x.  On Python 3.x., since  xrange  was removed, you will want this: 

  lst = [[] for _ in range(a)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47945470)
  

  a= ['A', 'B', 'C', 'D']
b =[1, 2, 3, 4]
c = [9, 8, 7, 6]
new_data = dict([[a, dict([map(str, i)])] for a, i in zip(a, zip(b, c))])
  

 Output: 

  {'A': {'1': '9'}, 'C': {'3': '7'}, 'B': {'2': '8'}, 'D': {'4': '6'}}
  

  

  new_data = dict(zip(a, map(lambda x:dict([x]), zip(map(str, b), map(str, c)))))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2173118)
 NumPy addresses this problem 

 http://www.scipy.org/Tentative_NumPy_Tutorial#head-d3f8e5fe9b903f3c3b2a5c0dfceb60d71602cf93 

  >>> a = array( [2,3,4] )
>>> a
array([2, 3, 4])
>>> type(a)
<type 'numpy.ndarray'>
  

 But if you want to use the Python native lists as a matrix the following helper methods can become handy: 

  import copy

def Create(dimensions, item):
    for dimension in dimensions:
        item = map(copy.copy, [item] * dimension)
    return item
def Get(matrix, position):
    for index in position:
        matrix = matrix[index]
    return matrix
def Set(matrix, position, value):
    for index in position[:-1]:
        matrix = matrix[index]
    matrix[position[-1]] = value
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47945386)
 Are you looking for something like this ? 

  a= ['A', 'B', 'C', 'D']
b =[1, 2, 3, 4]
c = [9, 8, 7, 6]

new_dict={}
set(map(lambda x,y,z:(new_dict.__setitem__(x,{y,z})),a,b,c))
print(new_dict)
  

 output: 

  {'D': {4, 6}, 'A': {9, 1}, 'B': {8, 2}, 'C': {3, 7}}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47944998)
 You can also use https://docs.python.org/3.6/library/functions.html#map here: 

  a = ['A', 'B', 'C', 'D']
b = [1, 2, 3, 4]
c = [9, 8, 7, 6]

dct = dict(map(lambda x, y, z : (x, {str(y): str(z)}), a, b, c))

print(dct)
  

 Which outputs: 

  {'A': {'1': '9'}, 'B': {'2': '8'}, 'C': {'3': '7'}, 'D': {'4': '6'}}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6563724)
 Just  zip  them: 

  >>> l1 = ['a', 'b', 'c']
>>> l2 = ['d', 'e', 'f']
>>> zip(l1, l2)
[('a', 'd'), ('b', 'e'), ('c', 'f')]
  

 If you need lists, not tuples, in the result: 

  >>> [list(l) for l in zip(l1, l2)]
[['a', 'd'], ['b', 'e'], ['c', 'f']]
  



