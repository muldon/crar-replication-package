Query: Counting array elements in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7248983)
 The one you've listed is the most optimal way to get the elements from a tuple. You usually don't care about the performance in such expressions â€“ it's a premature optimisation, and even if you did, such operations are already too slow even with the optimisations, i.e. if you optimise the access the loop itself will still be slow due to reference counting of the temporary variables and etc. 

 If you already have a performance issue or this is already part of CPU-heavy code you can try several alternatives: 

 1)  numpy  arrays: 

  >>> arr = np.array(xrange(2000))
>>> mask = np.array([True]*2000)
>>> mask = np.array([False]*2000)
>>> mask[3] = True
>>> mask[300] = True
>>> arr[mask]
array([  3, 300])
  

 2) You can use the C API to copy the elements using  PyTuple_GET_ITEM  which accesses the internal array directly, but be warned that using the C API is not trivial and can introduce a lot of bugs. 

 3) You can use C arrays with the C API, using e.g. the buffer interface of  array.array  to glue the data access to Python. 

 4) You can use Cython with C arrays and a custom Cython type for data access from Python. 

 5) You can use Cython and  numpy  together. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/187463)
 The method len() returns the number of elements in the list. 

  

  len(myArray)
  

  

  myArray = [1, 2, 3]
len(myArray)
  

 Output: 

  3
  

  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/187493)
  

  myArray.__len__()
  

 if you want to be oopy; "len(myArray)" is a lot easier to type!  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23310930)
 Use http://www.numpy.org/: 

  import numpy

m=((2,0,2,2),(4,4,5,4),(0,9,4,8),(2,2,0,0))
numpy_m = numpy.array(m)
print numpy.sum(numpy_m == 0)
  

  First, your "matrix" is converted to a numpy array ( numpy.array(m) ). Then, each entry is checked for equality with zero ( numpy_m == 0 ). This yields a binary array. Summing over this binary array gives the number of zero elements in the original array. 

 Note that numpy will be clearly efficient for larger matrices. 4x4 might be too small to see a large performance difference vs. ordinary python code, esp. if you are initializing a python "matrix" like above. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35184841)
 You have to divide t / 10.0 so the result is a decimal, the result of t / 10 is an integer 

  a = []
c=[0.3, 0.2, 0.3, 0.6, 0.9, 0.1, 0.2, 0.5, 0.3, 0.5, 0.7, 0.1]
for t in range(0,10,1):
    count = 0
    for j in range(0, len(c)):
        if c[j]>t/10.0:
            count = count+1
    a.append(count)
for t in range(0,10,1):
    print(str(a[t]) + ' elements in c are bigger than ' + str(t/10.0))
  

 Output: 

  12 elements in c are bigger than 0.0
10 elements in c are bigger than 0.1
8 elements in c are bigger than 0.2
5 elements in c are bigger than 0.3
5 elements in c are bigger than 0.4
3 elements in c are bigger than 0.5
2 elements in c are bigger than 0.6
1 elements in c are bigger than 0.7
1 elements in c are bigger than 0.8
0 elements in c are bigger than 0.9
  

 You can check the test http://codepad.org/QZo01R8Q 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26053895)
 To count nonzero values, just do  (column!=0).sum() , where  column  is the data you want to do it for.   = 0  returns a boolean array, and True is 1 and False is 0, so summing this gives you the number of elements that match the condition. 

 So to get your desired result, do 

  df.groupby('user_id').apply(lambda column: column.sum()/(= 0).sum())
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29000485)
 You start counting arrays with the number 0,so the first element in an array is the 0th element. 

 If an array has three elements a, b, c. The indexes would be 0, 1, 2 but the length would be 3. 

 Therefore:
If you want to loop through all the indices you would want to go from 

 
   0..2 
 

 or  

 
   0 .. length - 1 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31467803)
 Before I saw this, I thought to myself, "I need to make a way to do this!" 

  for tempVar in arrayName: tempVar+=1
  

 And then I thought, "There must be a simpler way to do this." . 

    


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7137436)
 If the array only contains elements >= 0 (i.e. all elements are either 0 or a positive integer) then you could just count the zeros and subtract this number form the length of the array: 

  len(arr) - arr.count(0)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/31937513)
 If you have a multi-dimensional array, len() might not give you the value you are looking for.  

  a = np.arange(10).reshape(2, 5)
print len(a) == 2
  

 This code block will return true, telling you the size of the array is 2. However, there are in actual fact 10 elements in this 2D array. In the case of multi-dimensional arrays, len() gives you the length of the  first  dimension of the array i.e.  

  len(a) == np.shape(a)[0]
  

 To get the number of elements in a multi-dimensional array of arbitrary shape: 

  size = 1
for dim in np.shape(a): size *= dim
  



