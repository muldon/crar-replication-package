Query: Using Python String Formatting with Lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49182692)
 Here's a little improvised answer to using format with print() on a list.  

  How about this: (py3)  

  sample_list = ['cat', 'dog', 'bunny', 'pig']
print("Your list of animals are: {}, {}, {} and {}".format(*sample_list))
  

 Read the docs here on using https://www.python.org/dev/peps/pep-3101/.  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7568689)
 You should take a look to the http://docs.python.org/library/string.html#format-string-syntax method of python. You could then define your formatting string like this : 

  >>> s = '{0} BLAH {1} BLAH BLAH {2} BLAH BLAH BLAH'
>>> x = ['1', '2', '3']
>>> print s.format(*x)
'1 BLAH 2 BLAH BLAH 3 BLAH BLAH BLAH'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33762406)
 You are converting list of lists to string 

  + str(result['errors'])
  

 thus getting one-liner, you can instead join using "\n" to get multiline 

  + '\n'.join(map(str, result['errors']))
  

 example 

  >>> a = [[1, 2, 3], [4, 5, 6]]
>>> 
>>> a
[[1, 2, 3], [4, 5, 6]]
>>> print a
[[1, 2, 3], [4, 5, 6]]
>>> print str(a)
[[1, 2, 3], [4, 5, 6]]
>>> print '\n'.join(map(str, a))
[1, 2, 3]
[4, 5, 6]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27856822)
 Following this https://sites.google.com/site/kittipat/programming-with-python/formatanddisplayelementsinpythonlist, if the length of x is varying, we can use: 

  ', '.join(['%.2f']*len(x))
  

 to create a place holder for each element from the list  x . Here is the example: 

  x = [1/3.0, 1/6.0, 0.678]
s = ("elements in the list are ["+', '.join(['%.2f']*len(x))+"]") % tuple(x)
print s
>>> elements in the list are [0.33, 0.17, 0.68]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43641381)
 This was a fun question! Another way to handle this with the  .format  method   for variable length lists  is to use a function that takes full advantage of list unpacking. In the following example I don't use any fancy formatting, but that can easily be changed to suit your needs. 

  list_1 = [1,2,3,4,5,6]
list_2 = [1,2,3,4,5,6,7,8]

# Create a function to easily repeat on many lists:
def ListToFormattedString(alist):
    # Each item is right-adjusted, width=3
    formatted_list = ['{:>3}' for item in alist] 
    s = ','.join(formatted_list)
    return s.format(*alist)

# Example output:
>>>ListToFormattedString(list_1)
'  1,  2,  3,  4,  5,  6'
>>>ListToFormattedString(list_2)
'  1,  2,  3,  4,  5,  6,  7,  8'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35607094)
 you could also use the the string formatting method https://docs.python.org/2/library/stdtypes.html#str.format: 

  for k, v in dic.items():
    a, b = k.split(':')
    print '{:30s}{:30s}{}'.format(a, b, v)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43352050)
 Use simple list comprehension. 

  >>> l = (('a', 0.5), ('b', 0.75), ('c', 0.954367))
>>> ["{:.5f}".format(i[1]) for i in l]
[ '0.50000', '0.75000', '0.95437']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15703687)
 Using http://docs.python.org/2/library/string.html#formatspec with  str.join()  and  zip() : 

  >>> list1 = [1,2,3,4,5]
>>> list2 = ["one", "two", "three", "four", "five"]

>>> "".join("{0}{1}".format(x,y) for x,y in zip(list1,list2))
'1one2two3three4four5five'
  

  zip(list1,list2)  returns something like this:
 [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four'), (5, 'five')] . 

 Now for each item of this list we apply the string formatting and then join the whole generator expression using  str.join() . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47061959)
 Here's my 2 cents also using  apply  

 Define a function that you can apply to the dataframe and use string formatting to parse your columns 

  def get_string(x):
    col_a = x.ColA
    col_b = (ch for ch in x.ColB if ch.isalnum())
    string = '{0}>+{1} {2}:{3},+{4} {5}:{6}'.format(col_a.strip("\'"), *col_b)
    return(string)

df['ColC'] = df.apply(get_string, axis=1)
df.ColC

0    A>+a b:c,+d e:f
1    B>+f g:h,+i j:k
2    A>+l m:n,+o p:q
  

 I like this because it's easy to modify the format, though using apply in this way might be slow 



