Query: Parse a string with a date to a datetime object
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35628565)
  

  strDate = strDate.split('+')

datetime.strptime(strDate[0], "%Y-%m-%dT%H:%M:%S")
  

 This will work for you 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1713607)
 http://labix.org/python-dateutil can parse this sort of format without you even having to define custom date formats.  

  pip install python-dateutil
  

 Then use it: 

  import dateutil.parser
dateutil.parser.parse('01-Jan-1995').date()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2012940)
 If you need to parse natural language date and time strings, consider https://github.com/bear/parsedatetime (and https://stackoverflow.com/questions/1495487/is-there-any-python-library-for-parsing-dates-and-times-from-a-natural-language/1495548#1495548). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1472336)
  >>> import email.utils as eut
>>> eut.parsedate('Wed, 23 Sep 2009 22:15:29 GMT')
(2009, 9, 23, 22, 15, 29, 0, 1, -1)
  

 If you want a  datetime.datetime  object, you can do: 

  def my_parsedate(text):
    return datetime.datetime(*eut.parsedate(text)[:6])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36236080)
 convert string to datetime object 

  from datetime import datetime
s = "2016-03-26T09:25:55.000Z"
f = "%Y-%m-%dT%H:%M:%S.%fZ"
out = datetime.strptime(s, f)
print(out)
output:
2016-03-26 09:25:55
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1101597)
 You can use the parse function from dateutil: 

  >>> from dateutil.parser import parse
>>> d = parse('2009/05/13 19:19:30 -0400')
>>> d
datetime.datetime(2009, 5, 13, 19, 19, 30, tzinfo=tzoffset(None, -14400))
  

 This way you obtain a datetime object you can then use. 

 As https://stackoverflow.com/questions/7804505/dateutil-parser-parse-gives-error-initial-value-must-be-unicode-or-none-not/7804999#7804999, dateutil2.0 is written for Python 3.0 and does not work with Python 2.x. For Python 2.x dateutil1.5 needs to be used. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1713613)
 On the whole you'd parse date and time strings with the  strptime  functions in  time  or  datetime  modules. Your example could be parsed with: 

  import datetime
datetime.datetime.strptime("01-Jan-1995", "%d-%b-%Y")
  

 Note that parsing month names is locale-dependent. https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior shows the directives for parsing various formats of dates and times. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10494427)
  datetime.datetime.strptime  has problems with timezone parsing. Have a look at the http://labix.org/python-dateutil: 

  >>> from dateutil import parser
>>> parser.parse("Tue May 08 15:14:45 +0800 2012")
datetime.datetime(2012, 5, 8, 15, 14, 45, tzinfo=tzoffset(None, 28800))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25506834)
 If you haven't done so already, have a look at the  parse  function in https://pypi.python.org/pypi/python-dateutil for parsing strings representing dates... 

  >>> from dateutil.parser import parse
>>> dt = parse("Thu 21st Aug '14, 4:58am")
>>> dt
datetime.datetime(2014, 8, 21, 4, 58)
  

 ...and then to convert a  datetime  object to a timestamp, you can do the following: 

  >>> import time
>>> import datetime
>>> time.mktime(dt.timetuple())
1408593480.0
  

 As side remark,  parse  is a useful function which can recognise a huge range of different date formats. However it's sometimes  too  helpful and sees dates where perhaps a date is not intended: 

  >>> parse("14, m 23")
datetime.datetime(2014, 8, 23, 0, 14)
  

 If you also want to parse expressions such as "Yesterday, 7:22am", you could do one of two things: 

 
  Replace "yesterday", "yester-day", "yday" and other variations with "25/08/2014" (or another appropriate date) and then use  parse  on the new string.   
  Use another library to parse the string. https://code.google.com/p/parsedatetime/ is one option...  
 

 Here's parsedatetime in action on your example: 

  >>> import parsedatetime.parsedatetime as pdt
>>> p = pdt.Calendar()
>>> d = p.parse("Yesterday, 7:22am")
>>> d
((2014, 8, 25, 7, 22, 0, 0, 237, -1), 3)
  

 To turn this date representation  d  into a  datetime  object, you can unpack the tuple like so: 

  >>> dt = datetime.datetime(*d[0][:7])
>>> dt
datetime.datetime(2014, 8, 25, 7, 22)
  

 Now  dt  can be easily converted to a timestamp in the way described above. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35628736)
 You could use  dateutil , however, if you are using Python 3 it only works for 3.2 or 3.3. It also supports Python 2 on 2.6 and 2.7. 

 The solution I would suggest: 

  from dateutil.parser import parse

string = "2016-01-29T20:00:00+01:00"

date = parse(string)
  

 This will give you a datetime object like so: 

  Out[1]: 2016-01-29 20:00:00+01:00
Out[2]: datetime.datetime(2016, 1, 29, 20, 0, tzinfo=tzoffset(None, 3600))
  

 If you'd like to know more, check dateutil https://labix.org/python-dateutil. 

 Moreover, I believe the reason  strptime  doesn't work straight away here is due to that 'T' on your date string. It's not the format  strptime  expects. Luckily  dateutil  parse method works right out of the box to fix that string for you. 



