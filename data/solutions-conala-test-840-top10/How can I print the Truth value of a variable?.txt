Query: How can I print the Truth value of a variable?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39604788)
 Use the builtin  bool  type. 

  print(bool(a))
  

 Some examples from the REPL: 

  >>> print(bool(''))
False
>>> print(bool('a'))
True
>>> print(bool([]))
False
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35924726)
 You can use double http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.where.html: 

  m['d'] = np.where(m['b'] < m['a'], m['a'], np.where(m['b'] > m['c'], m['c'], m['b']) )
print m    
   a  b  c  d
0  1  5  7  5
1  2  7  8  7
2  3  1  9  3
3  4  8  6  6
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34297976)
 You can apply a function to every row like this: 

  df.apply(lambda row: row.person1 + (',' + row.person2 if row.person2 else ''),
         axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43736938)
 The problem is that you created a placeholder in  add_final_training_ops  that you don't feed. You might think that the placeholder  ground_truth_tensor  that you create in  add_final_training_ops  is the same, but it is not, it is a new one, even if it is initialized by the former. 

 The easiest fix would be perhaps to return the placeholder from  add_final_training_ops  and use this one instead. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32616154)
 The two,  ==  and  bool() , are different.  ==  is for equality testing, whereas  bool()  returns the result of truth value testing for the object passed to it as parameter. 

 According to documentation of  bool()  - 

 
    class bool([x])  
  
   Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise it returns True. 
 

 The standard truth testing procedure can be found in https://docs.python.org/2/library/stdtypes.html#truth-value-testing 

 
   Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false: 
  
   
     None   
     False   
    zero of any numeric type, for example,  0 ,  0L ,  0.0 ,  0j .  
    any empty sequence, for example,  '' ,  () ,  [] .  
    any empty mapping, for example,  {} .  
    instances of user-defined classes, if the class defines a  __nonzero__()  or  __len__()  method, when that method returns the integer zero or bool value False.  
   
  
   All other values are considered  True  — so objects of many types are always true. 
 

 When you do  bool(float) , you are checking the truth value for  float , which is True. 

 But when you do  float == True , you are doing equality (please note this is not truth value testing, it is equality). In this case  float  and  True  are not equal so that results in  False . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32616138)
 
 . https://docs.python.org/2/library/functions.html#bool: 
 

 
    class   bool ([ x ]) 
  
   Return a Boolean value, i.e. one of True or False.  x  is converted using the standard truth testing procedure. 
 

 The https://docs.python.org/2/library/stdtypes.html#truth-value-testing works on any object: 

 
   Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false: [...] All other values are considered true — so objects of many types are always true. 
 

<ol start="2">
  float  is not equal to True. However, when asking "is  float  a truthy value", i.e. would  if float:  evaluate the true branch or the false branch, the answer is "yes, it would evaluate the true branch".  
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53754752)
 try this after constructing  df : 

  for x in df.values.tolist():
    os.rename(x[0], x[1])
  

 or if you like explicit variable names: 

  for index, row in df.iterrows():
    os.rename(row["Orginal File Name"], row["New File Name"])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6338326)
 
   returning a datastructure representing the table is fine 
 

 ...in that case  range(2 ** n)  is all you need. Each number in the range represents a row in the truth table. The  i th bit of the binary representation of the number  k  is 1 if and only if the  i th variable is true in the  k th row of the table. 

 If you want an actual table you can use: 

  [ [ ((row >> bit_index) & 1) == 1 for bit_index in range(n)] 
  for bit_index in range(2 ** n) ]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11748703)
 Just use  not , e.g., 

  if not isinstance(someVariable, str):
     ....
  

 You are simply negating the "truth value" (ie Boolean) that http://docs.python.org/library/functions.html#isinstance is returning. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53984232)
 The result you are seeing is caused by that fact that 

  None.__eq__("a") # evaluates to NotImplemented
  

 evaluates to  NotImplemented , and  NotImplemented 's truth value is documented to be  True : 

 https://docs.python.org/3/library/constants.html 

 
   Special value which should be returned by the binary special methods (e.g.  eq (),  lt (),  add (),  rsub (), etc.) to indicate that the operation is not implemented with respect to the other type; may be returned by the in-place binary special methods (e.g.  imul (),  iand (), etc.) for the same purpose.  Its truth value is true.  
 

 If you call the  __eq()__  method manually rather than just using  == , you need to be prepared to deal with the possibility it may return  NotImplemented  and that its truth value is true.  



