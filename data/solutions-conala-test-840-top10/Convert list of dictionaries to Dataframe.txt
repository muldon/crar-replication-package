Query: Convert list of dictionaries to Dataframe
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/44957133)
 You can also use  pd.DataFrame.from_dict(d)  as : 

  In [8]: d = [{'points': 50, 'time': '5:00', 'year': 2010}, 
   ...: {'points': 25, 'time': '6:00', 'month': "february"}, 
   ...: {'points':90, 'time': '9:00', 'month': 'january'}, 
   ...: {'points_h1':20, 'month': 'june'}]

In [12]: pd.DataFrame.from_dict(d)
Out[12]: 
      month  points  points_h1  time    year
0       NaN    50.0        NaN  5:00  2010.0
1  february    25.0        NaN  6:00     NaN
2   january    90.0        NaN  9:00     NaN
3      june     NaN       20.0   NaN     NaN
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20638258)
 Supposing  d  is your list of dicts, simply: 

  pd.DataFrame(d)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54953683)
  import pandas as pd 
import numpy as np 

d = np.array([['MN001','#1','ABC', 0.4],
                ['MN001','#1','ABD', 0.6],
                ['MN002', '#2', 'EFG', 0.5],
                ['MN002', '#2', 'HIJ', 0.4],
                ['MN002', '#2', 'LMN', 0.1]])  
df = pd.DataFrame(data=d, columns = ['AccountName','AccountType','StockName', 'Allocation'])

by_account_df = df.groupby('AccountName').apply(lambda x : dict(zip(x['StockName'],x['Allocation']))).reset_index(name='dic'))
by_account_lst = by_account_df['dic'].values.tolist()
  

 And the result should be:  

  print(by_account_lst)
[{'ABC': '0.4', 'ABD': '0.6'}, {'EFG': '0.5', 'HIJ': '0.4', 'LMN': '0.1'}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54282673)
 IIUC, flatten your  list  of  dict s to one  dict , then we using dataframe constructor  , and just need  concat  back to original df  

  from itertools import chain
s=pd.DataFrame([dict(chain(*map(dict.items,x))) for x in df.pop('C').tolist()],index=df.index)
s
  age  name salary
0  28  john  50000
1  38  alex  40000
2  82  Dave  30000
s=pd.concat([df,s],1)
s
     A    B age  name salary
0  123  abc  28  john  50000
1  345  bcd  38  alex  40000
2  567  xyx  82  Dave  30000
  

 Data input :  

  df.to_dict()
{'A': {0: 123, 1: 345, 2: 567}, 'B': {0: 'abc', 1: 'bcd', 2: 'xyx'}, 'C': {0: [{'name': 'john'}, {'age': '28'}, {'salary': '50000'}], 1: [{'name': 'alex'}, {'age': '38'}, {'salary': '40000'}], 2: [{'name': 'Dave'}, {'age': '82'}, {'salary': '30000'}]}}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53368604)
 Use https://docs.python.org/3/tutorial/datastructures.html#dictionaries with https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html: 

  d = {name:df.loc[df.name==name,['key','value']].to_dict('records') for name in df.name.unique()}

print(d)
{'john': [{'key': 'A223', 'value': 390309}, {'key': 'D23902', 'value': 238939}], 
 'jason': [{'key': 'B439', 'value': 230943}, {'key': 'F2390', 'value': 23930}], 
 'peter': [{'key': 'A5388', 'value': 572039}]}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51186726)
 Use  list comprehension  with flattening for list of tuples: 

  df = pd.DataFrame([(i, j) for a in list1 for i, j in a.items()], 
                   columns=['keys','values'])
print (df)
  keys  values
0    a       1
1    b       2
2    c       3
  

  Detail : 

  print ([(i, j) for a in list1 for i, j in a.items()])

[('a', 1), ('b', 2), ('c', 3)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33020669)
 In pandas 16.2, I had to do  pd.DataFrame.from_records(d)  to get this to work. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53971791)
 You will need to flatten your input using  itertools.chain , and you can then call the  pd.DataFrame  constructor. 

  from itertools import chain
pd.DataFrame(list(chain.from_iterable(data)))

   gender  name  roll_no
0    male   tom     1234
1    male   sam     1212
2  female  kavi     1235
3  female  maha     1211
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/28072880)
 You need to adjust your dicts, so that instead of having: 

  {'event': 'up', '53118': 'Harry'}
  

  

  {'event': 'up', 'id': '53118', 'name': 'Harry'}
  

  

  In [23]: df = pd.DataFrame(sample)

In [24]: df
Out[24]: 
    event      id    name
0      up   53118   Harry
1      up   51880   Smith
2    down   51659     Joe
3      up   52983     Sam
4    down   52917   Roger
5      up  314615   Julie
6    left  276298  Andrew
7   right  457249  Carlos
8    down  391485   Jason
9   right   53191  Taylor
10   down   51248   Benjy
  



