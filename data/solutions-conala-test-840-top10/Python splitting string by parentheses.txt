Query: Python splitting string by parentheses
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45430020)
  

  import re
s = '(some text) or ((other text) and (some more text)) and (still more text)'
find_string = re.findall(r'[(]{2}[a-z\s()]*[)]{2}|[(][a-z\s]*[)]', s)
print(find_string)
  

 output: 

  ['(some text)', '((other text) and (some more text))', '(still more text)']
  

    

  find_string = re.findall(r'[(\s]{2}[a-z\s()]*[)\s]{2}|[(][a-z\s]*[)]', s)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45429866)
 I would use  re.findall  instead of  re.split . And note that this would work only upto the brackets of depth 2. 

  >>> import re
>>> s = '(some text) or ((other text) and (some more text)) and (still more text)'
>>> re.findall(r'\((?:\((?:\([^()]*\)|[^()]*)*\)|[^()])*\)', s)
['(some text)', '((other text) and (some more text))', '(still more text)']
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45429944)
 This solution works for arbitrarily nested parentheses, which a regex couldn't ( s  is the original string): 

  from pyparsing import nestedExpr
def lst_to_parens(elt):
    if isinstance(elt,list):
        return '(' + ' '.join(lst_to_parens(e) for e in elt) + ')'
    else:
        return elt

split = nestedExpr('(',')').parseString('(' + s + ')').asList()
split_lists = [elt for elt in split[0] if isinstance(elt,list)]
print ([lst_to_parens(elt) for elt in split_lists])
  

 Output: 

  ['(some text)', '((other text) and (some more text))', '(still more text)']
  

  

  s = "(substringof('needle',name)) or ((role eq 'needle') and (substringof('needle',email))) or (job eq 'needle') or (office eq 'needle')"
  

 Output: 

  ["(substringof ('needle' ,name))", "((role eq 'needle') and (substringof ('needle' ,email)))", "(job eq 'needle')", "(office eq 'needle')"]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17359498)
 This is doing what you expect 

  import re, itertools
strs = raw_input("enter a string list ")

res1 = [ y for y in list(itertools.chain(*[re.split(r'\"(.*)\"', x) 
        for x in re.split(r'\((.*)\)', strs)])) 
        if y <> '']

set1 = re.search(r'\"(.*)\"', strs).groups()
set2 = re.search(r'\((.*)\)', strs).groups()

print [k for k in res1 if k in list(set1) or k in list(set2) ] 
   + list(itertools.chain(*[k.split() for k in res1 if k 
   not in set1 and k not in set2 ]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15879906)
 Another suggestion: 

  >>> s = "DATA(VALUE1|VALUE2||VALUE4)"
>>> import re
>>> matches = re.findall("[^()]+", s)
>>> matches
['DATA', 'VALUE1|VALUE2||VALUE4']
>>> result = {matches[0]: matches[1].split("|")}
>>> result
{'DATA': ['VALUE1', 'VALUE2', '', 'VALUE4']}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16579117)
 re.split will keep the delimiters when they are captured, i.e., enclosed in parentheses: 

  import re
s = '+ {- 9 4} {+ 3 2}'
p = filter(lambda x: x.strip() != '', re.split("([+{} -])", s)) 
  

  

  ['+', '{', '-', '9', '4', '}', '{', '+', '3', '2', '}']
  

 which, IMO, is what you need to handle nested expressions 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15879860)
 You could do it in one pass with  re.split : 

  In [10]: import re

In [11]: line = 'DATA(VALUE1|VALUE2||VALUE4)'

In [12]: re.split(r'[(|)]', line)
Out[12]: ['DATA', 'VALUE1', 'VALUE2', '', 'VALUE4', '']
  

  

  In [13]: parts = re.split(r'[(|)]', line)

In [14]: data = parts[0]

In [15]: values = parts[1:-1]

In [16]: values
Out[16]: ['VALUE1', 'VALUE2', '', 'VALUE4']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17373096)
 The answer was simply: 

  re.findall('\[[^\]]*\]|\([^\)]*\)|\"[^\"]*\"|\S+',strs)
  



