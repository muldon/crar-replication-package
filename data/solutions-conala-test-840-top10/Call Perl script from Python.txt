Query: Call Perl script from Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6340527)
 If you don't need the script output, but you want the return code, use  system() : 

  ...
my $bin = "/usr/bin/pdf2txt.py";
my @args = qw(arg1 arg2 arg3);
my $cmd = "$bin ".join(" ", @args);

system ($cmd) == 0 or die "command was unable to run to completion:\n$cmd\n";
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12496216)
 redirection  <  is a  shell  feature.  If you want to use it, you'll need to pass a string to  subprocess.call  and use  shell = True .  e.g.: 

  args = ['/usr/bin/perl', '/path/to/my/perl/script.pl', '<', '/path/to/my/input']
strOut = subprocess.call(' '.join(args), shell = True)
  

 Alternatively, you can do: 

  args = ['/usr/bin/perl', '/path/to/my/perl/script.pl']
with open('path/to/my/input') as input_file:
    strOut = subprocess.call(args, stdin = input_file) 
  

 

 Finally,  strOut  will hold the  return code  from your perl program -- this seems like a funny name for it.  If you want to get at the output stream (stdout) from your perl program, you'll probably want to use  subprocess.Popen  in conjunction with  stdout=subprocess.PIPE  and  communicate . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4682198)
 If you just want to open a pipe to a perl interpreter, you're on the right track. The only thing I think you're missing is that the perl script itself is not an executable.  

  var = "/some/file/path/"
pipe = subprocess.Popen(["perl", "./uireplace.pl", var], stdin=subprocess.PIPE)
pipe.stdin.write(var)
pipe.stdin.close()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/798534)
 Use http://docs.python.org/library/subprocess.html.  Here is the Python script: 

  #!/usr/bin/python

import subprocess

var = "world"

pipe = subprocess.Popen(["./x.pl", var], stdout=subprocess.PIPE)

result = pipe.stdout.read()

print result
  

 And here is the Perl script: 

  #!/usr/bin/perl

use strict;
use warnings;

my $name = shift;

print "Hello $name!\n";
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16161800)
 I think it will be better when you split string  

  ./GetHostByVmname.pl –server 10.0.1.191 –username Administrator –password P@ssword1 –vmname RHTest
  

 to a list, and after call Popen with this list as a first param.
Example: 

  import shlex, subprocess
args_str = "./GetHostByVmname.pl –server 10.0.1.191 –username Administrator –password P@ssword1 –vmname RHTest"
args = shlex.split(args_str)
p = subprocess.Popen(args, stdout=subprocess.PIPE)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4682145)
 Would you like to pass  var  as a parameter, on stdin or both?  To pass it as a parameter, use 

  subprocess.call(["./uireplace.pl", var])
  

 To pipe it to stdin, use 

  pipe = subprocess.Popen("./uireplace.pl", stdin=subprocess.PIPE)
pipe.communicate(var)
  

 Both code snippets require  uireplace.pl  to be executable.  If it is not, you can use     

  pipe = subprocess.Popen(["perl", "./uireplace.pl"], stdin=subprocess.PIPE)
pipe.communicate(var)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4682149)
 You could try the http://docs.python.org/library/subprocess.html#convenience-functions method.  It won't return output from the command you're invoking, but rather the return code to indicate if the execution was successful. 

  var = "/some/file/path"
retcode = subprocess.call(["./uireplace.pl", var])
if retcode == 0:
    print("Passed!")
else:
    print("Failed!")
  

 Make sure you're Perl script is executable.  Otherwise, you can include the Perl interpreter in your command (something like this): 

  subprocess.call(["/usr/bin/perl", "./uireplace.pl", var])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24877618)
 You can call a subprocess like from the shell if you override the shell parameter: 

  subprocess.call(arg_str, shell=True)
  



