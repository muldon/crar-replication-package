Query: list of ints into a list of tuples python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15852582)
 Another approach: 

  lst = [1, 109, 2, 109, 2, 130, 2, 131, 2, 132, 3, 28, 3, 127]

print [(lst[i], lst[i + 1]) for i in xrange(0, len(lst), 2)]
#[(1, 109), (2, 109), (2, 130), (2, 131), (2, 132), (3, 28), (3, 127)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54099320)
 If you know where the  ints  are, you can use https://www.python.org/dev/peps/pep-3132/ to simplify the list comprehension you where trying to use: 

  [(int(x), y, *map(int,v)) for x, y, *v in l]

[(1001794, 'Us/Eastern', 2, 1, 3, 4, 5),
 (1001832, 'Us/Central', 2, 3, 4, 4, 5),
 (1001848, 'Us/Central', 2, 4, 5, 4, 5),
 (1001855, 'Us/Central', 2, 1, 4, 4, 5),
 (1001899, 'Us/Central', 2, 1, 4, 3, 5),
 (1001914, 'Us/Pacific', 1, 4, 2, 4, 5),
 (1001971, 'Us/Pacific', 3, 4, 2, 3, 5),
 (1002021, 'Us/Eastern', 2, 1, 4, 4, 5),
 (1002026, 'Us/Central', 2, 1, 4, 4, 2),
 (1002028, 'Us/Eastern', 2, 1, 4, 4, 5),
 (1002041, 'Us/Eastern', 2, 4, 3, 5, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37074359)
 I like list comprehensions for readability. Also, I don't see why you need a separate statement for strings and ints. Either you have a list or not. 

  parameters = []
for k, v in d.iteritems():
  if isinstance(v, list):
    parameters.extend([(k, i) for i in v])
  else:
    parameters.append((k, v))
  

 Results: 

  >>> parameters
[('key3', 'item1'), ('key3', 'item2'), ('key3', 'item3'), ('key3', 'item4'), ('key2', 15), ('key1', 'string1')]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20249744)
 To convert all the string numbers into ints: 

  >>> a_tuple = ("200", "Harry", "50000", "Dog", "jumbo")
>>> tuple((int(x) if x.isdigit() else x) for x in a_tuple)
(200, 'Harry', 50000, 'Dog', 'jumbo')
  

 To find Harry: 

  >>> all_tuples = (
...     ("200", "Marry", "50000", "Dog", "jumbo"),
...     ("200", "Harry", "50000", "Dog", "jumbo"),
...     ("200", "Happy", "50000", "Dog", "jumbo"),
... )
  

 If the position of the name is fixed (the second item): 

  >>> [t for t in all_tuples if t[1] == 'Harry']
[('200', 'Harry', '50000', 'Dog', 'jumbo')]
  

 If the position is not fixed: 

  >>> [t for t in all_tuples if 'Harry' in t]
[('200', 'Harry', '50000', 'Dog', 'jumbo')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29510515)
  zip  takes iterables and returns an iterable of tuples containing  i -th element from each argument. In your case, that'd be the equivalent of 

  zip(A,B) -> [(10,1), (25,15), (40,20)]    
  

   

  [  ... for (a,b) in zip(A,B)]
  

 you are unpacking the tuple into two bound variables with names  a  and  b . Now  a  and  b  are  int s because the elements of  A  and  B  were ints. Use a plus operator to add those two ints together or  

  [ sum(tup) for tup in zip(A,B)]
  

 if you want to sum the whole tuple without unpacking explicitely. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54099314)
 Use  str.isdigit : 

  [tuple(int(y) if y.isdigit() else y for y in x) for x in tup]
# [(1001794, 'Us/Eastern', 2, 1, 3, 4, 5), ...]
  

 This is assuming the numbers in your strings are integers.  tup  is your data structure. 

 

 To handle negative integers, use a function encapsulating a  try-except  block (read about the https://stackoverflow.com/questions/11360858/what-is-the-eafp-principle-in-python): 

  def try_convert(s):
    try:
        return int(s)
    except ValueError:
        return s

[tuple(try_convert(y) for y in x) for x in tup]
# [(1001794, 'Us/Eastern', 2, 1, 3, 4, 5), ...]    
  

 To handle  int s and  float s, you may use a nested block: 

  def try_convert(s):
    try:
        return int(s)
    except ValueError:
        try:
            return float(s)
        except ValueError:
            return s 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50613659)
 You can use the  index  method 

  ints = [8, 23, 45, 12, 78]
inds = [ints.index(i) for i in ints]
  

  EDIT 
Highlighted in the comment that this method doesnâ€™t work if there are duplicates in  ints , the method below should work for any values in  ints : 

  ints = [8, 8, 8, 23, 45, 12, 78]
inds = [tup[0] for tup in enumerate(ints)]
  

 Or alternatively 

  ints = [8, 8, 8, 23, 45, 12, 78]
inds = [tup for tup in enumerate(ints)]
  

 if you want to get both the index and the value in  ints  as a list of tuples. 

 It uses the method of  enumerate  in the selected answer to this question, but with list comprehension, making it faster with less code. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6698717)
 Convert your lists to tuples: 

  dict((tuple(a), b) for a,b in [([1,2,3,4],2),([5,6,7],3)])
  

 If you are using Python >= 2.7 you can use dict-comprehensions: 

  {tuple(a): b for a,b in [([1,2,3,4],2),([5,6,7],3)]}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33115284)
 If you really need the 3 ints in a 5x5x5 then you need a dtype of 3 ints. Using  itertools.product  to combine the lists: 

  >>> import itertools
>>> np.array(list(itertools.product(a,b,c)), dtype='int8,int8,int8').reshape(5,5,5)
  

 Alternatively, just include the 3 elements in the reshape: 

  >>> np.array(list(itertools.product(a,b,c))).reshape(5,5,5,3)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/20249754)
 I would use something like 

  def safe_int(v):
    try:
        return int(v)
    except ValueError:
        return v
  

 This way: 

  >>> tup = ("200", "Harry", "50000", "Dog", "jumbo")
>>> tuple(map(safe_int, tup))
(200, 'Harry', 50000, 'Dog', 'jumbo')
  



