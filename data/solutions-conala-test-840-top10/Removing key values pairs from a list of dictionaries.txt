Query: Removing key values pairs from a list of dictionaries
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54867063)
  

  list2 = [{k:v for k,v in i.items() if v!= '' or v.strip() != ''} for i in list1]
  

 We can use dict-comprehension as well as list-comprehension simultaneously. We loop for every element (which is a dictionary) of  list1 , and just take those key-value pairs where the value or  value.strip()  for the corresponding key in the dictionary is not a vacant string. 

 A shorter version for cancelling the values with  None  type also: 

  list2 = [{k:v for k,v in i.items() if v} for i in list1]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15158767)
 If you don't want to create a new dictionary, you can use this: 

  >>> hand = {'a': 0, 'i': 0, 'm': 1, 'l': 1, 'q': 0, 'u': 0}
>>> for key in list(hand.keys()):  ## creates a list of all keys
...     if hand[key] == 0:
...             del hand[key]
... 
>>> hand
{'m': 1, 'l': 1}
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19370377)
 Dictionaries do not store order.  To do what you're trying to do using only pure dictionaries, you will need to also store the position in the list in the dictionary. 

  def only_once(a):
    d = dict((b,a) for (a,b) in enumerate(a))
    new = d.items()
    return [x[0] for x in sorted(new, key=lambda a: a[1])]
  

 This will create a dictionary with the keys being the elements and the values being the position in the list, meaning the first occurrence of an element will be overwritten by a later occurrence (call  reversed()  to switch this behavior).  Then, the  (key,value)  pairs will be pulled out of the dictionary, sorted by position in list, and truncated to just the elements. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31068285)
 Don't call your lists  list ! 

 Use list comprehension. 

  key-value pair   

 To remove list elements when a particular key-value pair is present: 

  l1 = [{'key1':'value1','key2':'value2'},
        {'key1':'value3','key2':'value4'}]
l2 = [element for element in l1 if element.get('key1', '') != 'value1']
  

 (Notice the  get  method with a default return value). 

  key present  

 To remove list elements when a particular key is present: 

  l2 = [element for element in l1 if 'key1' in element]
  

  Remarks  

 
 standard dictionaries are unordered, so there is no such thing as a "first" key. 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25028665)
 You can create a new dictionary based on the value of  b , iterating the  mydictList  backwards (since you want to retain the first value of  b ), and get only the values in the dictionary, like this 

  >>> {item['b'] : item for item in reversed(mydictList)}.values()
[{'a': 1, 'c': 3, 'b': 2}, {'a': 2, 'c': 4, 'b': 3}]
  

 If you are using Python 3.x, you might want to use  list  function over the dictionary values, like this 

  >>> list({item['b'] : item for item in reversed(mydictList)}.values())
  

  Note:  This solution may not maintain the order of the dictionaries. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13254290)
 If you really want to use a list comprehension, combine it with a dict comprehension: 

  [{k: v for k, v in d.iteritems() if k != 'mykey1'} for d in mylist]
  

   .iteritems()  for  .items()  if you are on python 3. 

 On python 2.6 and below you should use: 

  [dict((k, v) for k, v in d.iteritems() if k != 'mykey1') for d in mylist]
  

 as the  {key: value ...}  dict comprehension syntax was only introduced in Python 2.7 and 3. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31068594)
  

  ds = [{'key1': 'value1', 'key2': 'value2'},
      {'key1', 'value3', 'key2', 'value4'},
      ...]
  

 You can remove a dictionary with a unique key-value using a list comprehension: 

  ds = [d for d in ds if d['key1'] != 'value1']
  

 But then you are traversing the entire list, creating a new list without that dictionary, and not capturing the dictionary.  

  for i, d in enumerate(ds):
    if d['key1'] == 'value1':
        d1 = ds.pop(i)
        break
  

 In which case you only traverse what you must, don't create a new list, and capture the dictionary. However, if you really care about performance (and don't care about order), I would suggest grouping the dictionaries by their unique key value to begin with: 

  ds = {'value1': {'key1': 'value1', 'key2': 'value2'},
      'value3': {'key1', 'value3', 'key2', 'value4'},
      ...}
  

 Because  ds['value1']  is O(1) (immediate), whereas any traversal is O(n) (has to go over the entire list in the worst case). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28464365)
 If you don't want to copy your dictionary, (for example if the dictionary is large, or you have a reference to it elsewhere) then you should do it this way: 

  ks = [k for k in d if d[k]=='.']
for k in ks:
    d.pop(k)
  

 Create your list of keys to be removed ahead of time as shown above.  You don't want to modify your dictionary while iterating over it. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9427216)
  

  [dict(t) for t in {tuple(d.items()) for d in l}]
  

 The strategy is to convert the list of dictionaries to a list of tuples where the tuples contain the items of the dictionary. Since the tuples can be hashed, you can remove duplicates using  set  (using a  set comprehension  here, older python alternative would be  set(tuple(d.items()) for d in l) ) and, after that, re-create the dictionaries from tuples with  dict . 

 where: 

 
  l  is the original list 
  d  is one of the dictionaries in the list 
  t  is one of the tuples created from a dictionary 
 

 Edit: If you want to preserve ordering, the one-liner above won't work since  set  won't do that. However, with a few lines of code, you can also do that: 

  l = [{'a': 123, 'b': 1234},
        {'a': 3222, 'b': 1234},
        {'a': 123, 'b': 1234}]

seen = set()
new_l = []
for d in l:
    t = tuple(d.items())
    if t not in seen:
        seen.add(t)
        new_l.append(d)

print new_l
  

 Example output: 

  [{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}]
  

 Note: As pointed out by @alexis it might happen that two dictionaries with the same keys and values, don't result in the same tuple. That could happen if they go through a different adding/removing keys history. If that's the case for your problem, then consider sorting  d.items()  as he suggests. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/613228)
 Dicts can't be sorted, but you can build a sorted list from them. 

 A sorted list of dict values: 

  sorted(d.values())
  

 A list of (key, value) pairs, sorted by value: 

  from operator import itemgetter
sorted(d.items(), key=itemgetter(1))
  



