Query: 2D array of objects in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6480465)
 I think that's what you want 

  nodes = [[Node() for j in range(cols)] for i in range(rows)]
  

 But it is not always a good practice to initialize lists. For matrices it may make sense. 

 If you're wondering: Documentation about http://docs.python.org/tutorial/datastructures.html#list-comprehensions 

 Demo code: 

  >>> class Node:
      def __repr__(self):
        return "Node: %s" % id(self)
>>> cols = 3
>>> rows = 4
>>> nodes = [[Node() for j in range(cols)] for i in range(rows)]
>>> from pprint import pprint
>>> pprint(nodes)
[[Node: 41596976, Node: 41597048, Node: 41596904],
 [Node: 41597120, Node: 41597192, Node: 41597336],
 [Node: 41597552, Node: 41597624, Node: 41597696],
 [Node: 41597768, Node: 41597840, Node: 41597912]]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40268293)
 In the good old days (around v. 3.0) MATLAB had only one data structure, a matrix.  It could contain numbers or characters, and was always 2d. 

 Cells were added to contain more general objects, including matrices and strings.  They were still 2d. 

 Python had lists, which are 1d, but can contain anything.   numpy  is built on Python, adding the multidimensional arrays.  But lists are still available. 

 So potentially anything that converts an array to a list is an equivalent to  num2cell  - not exact, but with overlapping functionality. 

  In [246]: A=np.arange(24).reshape(2,3,4)   # 3d array
  

 Wrapping in a list, gives us a list of 2 arrays (2d): 

  In [247]: B=list(A)
In [248]: B
Out[248]: 
[array([[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]]), 
 array([[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]])]
  

  tolist  method performs complete conversion to lists (nested). 

  In [249]: C=A.tolist()
In [250]: C
Out[250]: 
[[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
 [[12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]]
  

  list(A)  is not common, and may be used in error when  tolist  is meant. 

  np.split(A,...)  is similar to  B , but the subarrays are still 3d. 

  unpacking  even works, basically because  A  is an iterable,  [a for a in A]  splits  A  on the 1st dimension. 

  In [257]: a,b=A
In [258]: a
Out[258]: 
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
  

 There is an object dtype, with lets you put objects, including other arrays, in an array.  But as has been shown in many SO questions, these can be tricky to construct.   np.array  tries to construct the highest dimension array possible.  You have to perform some tricks to get around that. 

  In [259]: Z=np.empty((2,),dtype=object)
In [260]: Z
Out[260]: array([None, None], dtype=object)
In [261]: Z[0]=A[0]
In [262]: Z[1]=A[1]
In [263]: Z
Out[263]: 
array([ array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]]),
       array([[12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])], dtype=object)
  

 ================ 

 In an Octave session: 

  >> anum = [1,2,3,4]
anum =

   1   2   3   4

>> acell = num2cell(anum)
acell =
{
  [1,1] =  1
  [1,2] =  2
  [1,3] =  3
  [1,4] =  4
}
>> save -7 test.mat anum acell
  

 the  scipy.io.loatmat  version 

  In [1822]: data = io.loadmat('../test.mat')
In [1823]: data
Out[1823]: 
{'__globals__': [],
 '__header__': b'MATLAB 5.0 MAT-file, written by Octave 4.0.0, 
     2016-10-27 00:59:27 UTC',
 '__version__': '1.0',
 'acell': array([[array([[ 1.]]), array([[ 2.]]), array([[ 3.]]),
      array([[ 4.]])]], dtype=object),
 'anum': array([[ 1.,  2.,  3.,  4.]])}
  

 The  matrix  is rendered as a 2d array;  the  cell  as an object type array (2d), containing, in this case, 2d arrays.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5047957)
 How about using Numpy? 

 If the points are represented by numpy.array, their dimension doesn't matter. 

 For example, consider 2D. 

  import numpy as np
x = np.array([-1, -1])
y = np.array([1, 1])

mid1 = (x + y)/2
# or
mid2 = np.mean([x, y])
  

 
   NumPy is the fundamental package needed for scientific computing with Python. 
 

 visit http://numpy.scipy.org/ 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15891191)
 sure you can, you just cant if your dtype is int ... so make your array with objects and you can use objects... 

  In [43]: a = [[{},{},{}],[{},{},{}]]

In [44]: a = numpy.array(a)

In [45]: a[1][1] = {'hello':'world','something':5}

In [46]: a
Out[46]:
array([[{}, {}, {}],
       [{}, {'hello': 'world', 'something': 5}, {}]], dtype=object)
  

 although not sure whay you will gain using numpy with objects,  you may be better off just leaving it as a list of lists 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48604511)
 The most literal copy of MATLAB notation is: 

  In [166]: A = np.matrix('1 2;3 4')
     ...: x = np.matrix('4;5')
     ...: y = np.matrix('1 2')
     ...: z = np.matrix('4')
     ...: 
In [167]: A
Out[167]: 
matrix([[1, 2],
        [3, 4]])
In [168]: x
Out[168]: 
matrix([[4],
        [5]])
In [169]: y
Out[169]: matrix([[1, 2]])
In [170]: z
Out[170]: matrix([[4]])
In [171]: np.bmat('A x; y z')
Out[171]: 
matrix([[1, 2, 4],
        [3, 4, 5],
        [1, 2, 4]])
  

 With string input like this  bmat  has to look up the corresponding variables in the workspace, and so on.  It has a MATLAB like feel, but is awkward Python.  Note that  np.matrix  is always 2d, just like the original MATLAB. 

 Using a more conventional nested list input: 

  In [173]: np.block([[A,x],[y,z]])
Out[173]: 
matrix([[1, 2, 4],
        [3, 4, 5],
        [1, 2, 4]])
  

  block  also works with  np.array  objects: 

  In [174]: np.block([[A.A,x.A],[y.A,z.A]])
Out[174]: 
array([[1, 2, 4],
       [3, 4, 5],
       [1, 2, 4]])
  

 With proper Python/numpy syntax: 

  In [181]: Aa = np.array([[1, 2],[3, 4]])
     ...: xa = np.array([[4],[5]])
     ...: ya = np.array([1, 2])
     ...: za = np.array([4])

In [187]: np.block([[Aa, xa],[ya, za]])
Out[187]: 
array([[1, 2, 4],
       [3, 4, 5],
       [1, 2, 4]])
  

 Internally  block  uses  concatenate .  I think it used to use  hstack  and  vstack , now it works its way down recursively. 

  In [190]: np.vstack([np.hstack([Aa, xa]),np.hstack([ya, za])])
Out[190]: 
array([[1, 2, 4],
       [3, 4, 5],
       [1, 2, 4]])
  

 

 @Mad asked about  r_  and  c_ .  Those are versions of the  concatenate  family that use a [] syntax (because they are actually class objects with a  getitem  method).  For the 2d matrix inputs, this works (and is relatively pretty): 

  In [214]: np.r_[np.c_[A, x], np.c_[y, z]]
Out[214]: 
matrix([[1, 2, 4],
        [3, 4, 5],
        [1, 2, 4]])
  

  np.r_[np.c_[A.A, x.A], np.c_[y.A, z.A]]  also works.   

 For the arrays that are a mix of 2d and 1d I have to use: 

  np.r_[np.r_['1,2', Aa, xa], np.r_['1,2', ya, za]]
  

 The string '2' tells it to expand the elements to 2d before concatenating.  I haven't used that string argument much, and had to experiment before I got it right. 

 The last expression is doing: 

  np.concatenate([np.concatenate([Aa, xa], axis=1), 
                np.concatenate([ya[None,:], za[None,:]], axis=1)],
                axis=0)
  

 While I'm at it, another version: 

  np.r_['0,2', np.c_[Aa, xa], np.r_[ya, za]]
  

 Eveything that  hstack ,  vstack ,  r_  and  c_  can do can be done just as fast with  concatenate  and a few dimension adjustments. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33310621)
 Sounds like you want to do something like 

  i, j = 1,3
$G{i}{j}=np.array(....)
  

 with the intention of later either doing: 

  G13[:,3]= ...
or
$G{i}{j}[0,1]=...
  

 There are languages that let you create variable names like this.  Early Basic may have done this.  But Python is not one of those.  Constructing variable names programmatically is an adhoc approach. 

 Instead in Python you collect objects, such as arrays, in lists and dictionaries, e.g. 

  [np.array(...) for i,j in G.edges()]

{(i,j):np.array(...) for i,j in G.edges()}

{'G%i%j'%(i,j): np.array(...) for i,j in G.edges()}
  

 There are ways of adding dictionaries like this to the local namespace (which is also a dictionary), but that's borderline poor Python practice. 

 With the arrays collected in a list or dictionary it is easy to iterate through them or to reference them individually.  There are various ways of associating  edges  (your tuples) with arrays (or other Python objects), but global variable names isn't a good one (possible but not Pythonic). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36871809)
 No need to use the  matrix  subtype.  Regular  array  can be expanded to 2d (and transposed if need). 

  In [2]: a=np.array([1,2,3]) 
In [3]: b=np.array([2,3,4,5])

In [4]: a[:,None]
Out[4]: 
array([[1],
       [2],
       [3]])

In [5]: a[:,None]*b   # outer product via broadcasting
Out[5]: 
array([[ 2,  3,  4,  5],
       [ 4,  6,  8, 10],
       [ 6,  9, 12, 15]])
  

 Other ways of making that column array 

  In [6]: np.array([[1,2,3]]).T
Out[6]: 
array([[1],
       [2],
       [3]])

In [7]: np.array([[1],[2],[3]])
Out[7]: 
array([[1],
       [2],
       [3]])

In [9]: np.atleast_2d([1,2,3]).T
Out[9]: 
array([[1],
       [2],
       [3]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18908031)
 NumPy arrays are specifically designed for working with multidimensional numeric data, with additional support for arrays of arbitrary objects. They provide fast vectorized operations with convenient syntax. 

  >>> x = numpy.arange(4).reshape((2, 2))
>>> x
array([[0, 1],
       [2, 3]])
>>> x.T           # Transpose.
array([[0, 2],
       [1, 3]])
>>> x.max()
3
>>> x * 4
array([[ 0,  4],
       [ 8, 12]])
>>> x[:, 1]       # Slice to select the second column.
array([1, 3])
>>> x[:, 1] *= 2
>>> x
array([[0, 2],
       [2, 6]])
>>> timeit.timeit('x * 5',
...               setup='import numpy; x = numpy.arange(1000)',
...               number=100000)
0.4018515302670096
>>> timeit.timeit('[item*5 for item in x]',
...               setup='x = range(1000)',
...               number=100000)
8.542360042395984
  

 In comparison, lists are fundamentally geared towards 1-dimensional data. You can have a list of lists, but that's not a 2D list. You can't conveniently take the max of a 2D data set represented as a list of lists; calling  max  on it will compare the lists lexicographically and return a list. Lists are good for homogeneous sequences of objects, but if you're doing math, you want numpy, and you want ndarrays. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43898587)
 2d slicing 

 When I first wrote this I constructed and indexed a 1d array.  But the OP is wking with a 2d array, so  x[0]  is a 'row', a slice of the iginal. 

  In [81]: arr = np.array([[1,2,3], [4,5,6]])
In [82]: arr.__array_interface__['data']
Out[82]: (181595128, False)

In [83]: x0 = arr[0,:]
In [84]: x0.__array_interface__['data']
Out[84]: (181595128, False)        # same databuffer pointer
In [85]: id(x0)
Out[85]: 2886887088
In [86]: x1 = arr[0,:]             # another slice, different id
In [87]: x1.__array_interface__['data']
Out[87]: (181595128, False)
In [88]: id(x1)
Out[88]: 2886888888
  

 What I wrote earlier about slices still applies.  Indexing an individual elements, as with  arr[0,0]  wks the same as with a 1d array. 

 This 2d arr has the same databuffer as the 1d  arr.ravel() ; the shape and strides are different.  And the distinction between  view ,  copy  and  item  still applies. 

 A common way of implementing 2d arrays in C is to have an array of pointers to other arrays.   numpy  takes a different,  strided  approach, with just one flat array of data, and uses shape  and  strides  parameters to implement the transversal.  So a subarray requires its own  shape  and  strides  as well as a pointer to the shared databuffer. 

 1d array indexing 

 I'll try to illustrate what is going on when you index an array: 

  In [51]: arr = np.arange(4)
  

 The array is an object with various attributes such as shape, and a data buffer.  The buffer stes the data as bytes (in a C array), not as Python numeric objects.  You can see infmation on the array with: 

  In [52]: np.info(arr)
class:  ndarray
shape:  (4,)
strides:  (4,)
itemsize:  4
aligned:  True
contiguous:  True
ftran:  True
data pointer: 0xa84f8d8
byteder:  little
byteswap:  False
type: int32
  

  

  In [53]: arr.__array_interface__
Out[53]: 
{'data': (176486616, False),
 'descr': [('', '<i4')],
 'shape': (4,),
 'strides': None,
 'typestr': '<i4',
 'version': 3}
  

 One has the data pointer in hex, the other decimal.  . 

 If I index an element, I get a new object: 

  In [54]: x1 = arr[1]
In [55]: type(x1)
Out[55]: numpy.int32
In [56]: x1.__array_interface__
Out[56]: 
{'__ref': array(1),
 'data': (181158400, False),
....}
In [57]: id(x1)
Out[57]: 2946170352
  

 It has some properties of an array, but not all.  F example you can't assign to it.  Notice also that its 'data` value is totally different. 

 Make another selection from the same place - different id and different data: 

  In [58]: x2 = arr[1]
In [59]: id(x2)
Out[59]: 2946170336
In [60]: x2.__array_interface__['data']
Out[60]: (181143288, False)
  

 Also if I change the array at this point, it does not affect the earlier selections: 

  In [61]: arr[1] = 10
In [62]: arr
Out[62]: array([ 0, 10,  2,  3])
In [63]: x1
Out[63]: 1
  

  x1  and  x2  don't have the same  id , and thus won't match with  is , and they don't use the  arr  data buffer either.  There's no recd that either variable was derived from  arr . 

 With  slicing  it is possible get a  view  of the iginal array, 

  In [64]: y = arr[1:2]
In [65]: y.__array_interface__
Out[65]: 
{'data': (176486620, False),
 'descr': [('', '<i4')],
 'shape': (1,),
 ....}
In [66]: y
Out[66]: array([10])
In [67]: y[0]=4
In [68]: arr
Out[68]: array([0, 4, 2, 3])
In [69]: x1
Out[69]: 1
  

 It's data pointer is 4 bytes larger than  arr  - that is, it points to the same buffer, just a different spot.  And changing  y  does change  arr  (but not the independent  x1 ). 

 I could even make a 0d view of this item 

  In [71]: z = y.reshape(())
In [72]: z
Out[72]: array(4)
In [73]: z[...]=0
In [74]: arr
Out[74]: array([0, 0, 2, 3])
  

 In Python code we nmally don't wk with objects like this.  When we use the  c-api    cython  is it possible to access the data buffer directly.   nditer  is an iteration mechanism that wks with 0d objects like this (either in Python  the c-api).  In  cython   typed memyviews  are particularly useful f low level access. 

 http://cython.readthedocs.io/en/latest/src/userguide/memyviews.html 

 https://docs.scipy.g/doc/numpy/reference/arrays.nditer.html 

 https://docs.scipy.g/doc/numpy/reference/c-api.iterat.html#c.NpyIter 

 elementwise == 

 In response to comment, https://stackoverflow.com/questions/43885090/comparing-numpy-object-references/43898587#comment74809004_43885090 

 
   np.array([1]) == np.array([2]) will return array([False], dtype=bool) 
 

  ==  is defined f arrays as an elementwise operation.  It compares the values of the respective elements and returns a matching boolean array. 

 If such a comparison needs to be used in a scalar context (such as an  if ) it needs to be reduced to a single value, as with  np.all    np.any . 

 The  is  test compares object id's (not just f numpy objects).  It has limited value in practical coding.  I used it most often in expressions like  is None , where  None  is an object with a unique id, and which does not play nicely with equality tests. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54760622)
  In [1]: a = [np.array([0.0, 0.2, 0.4, 0.6, 0.8]), 
   ...:      np.array([0.0, 0.2, 0.4, 0.6, 0.8]), 
   ...:      np.array([0.0, 0.2, 0.4, 0.6, 0.8])]                               
In [2]:                                                                         
In [2]: a                                                                       
Out[2]: 
[array([0. , 0.2, 0.4, 0.6, 0.8]),
 array([0. , 0.2, 0.4, 0.6, 0.8]),
 array([0. , 0.2, 0.4, 0.6, 0.8])]
  

  a  is a list of arrays.   b  is a 2d array. 

  In [3]: b = np.array(a)                                                         
In [4]: b                                                                       
Out[4]: 
array([[0. , 0.2, 0.4, 0.6, 0.8],
       [0. , 0.2, 0.4, 0.6, 0.8],
       [0. , 0.2, 0.4, 0.6, 0.8]])
In [5]: b[0] += 1                                                               
In [6]: b                                                                       
Out[6]: 
array([[1. , 1.2, 1.4, 1.6, 1.8],
       [0. , 0.2, 0.4, 0.6, 0.8],
       [0. , 0.2, 0.4, 0.6, 0.8]])
  

  b  gets values from  a  but does not contain any of the  a  objects.  The underlying data structure of this  b  is very different from  a , the list.  If that isn't clear, you may want to review the  numpy  basics (which talk about shape, strides, and data buffers). 

 In the second case,  b  is an object array, containing the same objects as  a : 

  In [8]: b = np.array(a)                                                         
In [9]: b                                                                       
Out[9]: 
array([array([0. , 0.2, 0.4, 0.6, 0.8]), array([0. , 0.2, 0.4, 0.6, 0.8]),
       array([0. , 0.2, 0.4, 0.6])], dtype=object)
  

 This  b  behaves a lot like the  a  - both contain arrays. 

 The construction of this object array is quite different from the 2d numeric array.  I think of the numeric array as the default, or normal, numpy behavior, while the object array is a 'concession', giving us a useful tool, but one which does not have the calculation power of the multidimensional array. 

 It is easy to make an object array by mistake - some say too easy.  It can be harder to make one reliably by design.  FOr example with the original  a , we have to do: 

  In [17]: b = np.empty(3, object)                                                
In [18]: b[:] = a[:]                                                            
In [19]: b                                                                      
Out[19]: 
array([array([0. , 0.2, 0.4, 0.6, 0.8]), array([0. , 0.2, 0.4, 0.6, 0.8]),
       array([0. , 0.2, 0.4, 0.6, 0.8])], dtype=object)
  

 or even  for i in range(3): b[i] = a[i]  



