Query: Create an empty data frame with index from another data frame
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18176957)
  df2 = pd.DataFrame(index=df1.index)
  

 This will create a DataFrame with no columns but just an index, and it will be the same index as in the df1. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18181060)
 It's better to set index as df1.index.copy() 

  df2 = pd.DataFrame(index=df1.index.copy())
  

 You can use  df1.index  is  df2.index  to check whether they are the same object 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52880196)
 You can also assign the index of a dataframe to another dataframe directly. 

  df2.index=df1.index  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46562602)
 If remove columns argument get: 

  df = pd.DataFrame([s,t])

print (df)
   0  1  2  3   4   5
0  1  2  3  4   5   6
1  2  4  6  8  10  12
  

 Then define columns - if columns not exist get NaNs column: 

  df = pd.DataFrame([s,t], columns=[0,'MUL2'])

print (df)
     0  MUL2
0  1.0   NaN
1  2.0   NaN
  

 

 Better is use  dictionary : 

  df = pd.DataFrame({'MUL1':s,'MUL2':t})

print (df)
   MUL1  MUL2
0     1     2
1     2     4
2     3     6
3     4     8
4     5    10
5     6    12
  

 And if need change columns order add columns parameter: 

  df = pd.DataFrame({'MUL1':s,'MUL2':t}, columns=['MUL2','MUL1'])

print (df)
   MUL2  MUL1
0     2     1
1     4     2
2     6     3
3     8     4
4    10     5
5    12     6
  

 More information is in http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe. 

 Another solution by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html -  DataFrame  constructor is not necessary: 

  df = pd.concat([s,t], axis=1, keys=['MUL1','MUL2'])

print (df)
   MUL1  MUL2
0     1     2
1     2     4
2     3     6
3     4     8
4     5    10
5     6    12
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34568092)
 Creating an empty dataframe with the same index and columns as another dataframe: 

  import pandas as pd
df_copy = pd.DataFrame().reindex_like(df_original)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47961242)
 That's a job for https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reindex_like.html.  

  df1 = pd.DataFrame([[11, 12], [21, 22]], columns=['c1', 'c2'], index=['i1', 'i2'])
  

 Construct an empty DataFrame and reindex it like df1: 

  pd.DataFrame().reindex_like(df1)
Out: 
    c1  c2
i1 NaN NaN
i2 NaN NaN   
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49813726)
 You need to set  MultiIndex : 

  import pandas as pd
li = [{"employee_id":1,"project_handled": "pas"},{"employee_id":1,"project_handled": "asap"},{"employee_id":2,"project_handled": "trimm"},{"employee_id":2,"project_handled": "fat"}]
df = pd.DataFrame(li)
df['Something'] = 1
df.set_index(["employee_id", "project_handled"],inplace=True)
print(df)
  

 I've added  Something  because otherwise you'd get: 

  Empty DataFrame
Columns: []
Index: [(1, pas), (1, asap), (2, trimm), (2, fat)]
  

  EDIT  

 To create it without  project_handled  you'd need empty column and  MultiIndex : 

  df["another"] = ""
df.set_index(["employee_id", "another"],inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50790304)
 Set up empty with  pd.to_datetime  

  df = pd.DataFrame(columns=['a','b'], index=pd.to_datetime([]))
  

  

  df.loc[pd.Timestamp('now')] = pd.Series([1, 2], ['a', 'b'])
df

                            a  b
2018-06-10 20:52:52.025426  1  2
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48374031)
 This really smells like a bug. 

 Here's another (simpler) solution. 

  import pandas as pd
import numpy as np

def df_empty(columns, dtypes, index=None):
    assert len(columns)==len(dtypes)
    df = pd.DataFrame(index=index)
    for c,d in zip(columns, dtypes):
        df[c] = pd.Series(dtype=d)
    return df

df = df_empty(['a', 'b'], dtypes=[np.int64, np.int64])
print(list(df.dtypes)) # int64, int64
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/50372500)
 If you just do  df['b'] = None  then  df.empty  is still  True  and df is: 

  Empty DataFrame
Columns: [a, b]
Index: []
  

 EDIT:
To create an empty  df2  from the columns of  df  and adding new columns, you can do: 

  df2 = pd.DataFrame(columns = df.columns.tolist() + ['b', 'c', 'd'])
  



