Query: Writing List of Strings to Excel CSV File in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6916622)
 Very simple to fix, you just need to turn the parameter to writerow into a list. 

  for item in RESULTS:
     wr.writerow([item,])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6916576)
 The http://docs.python.org/library/csv.html?highlight=csv#writer-objects  writerow  method takes an iterable as argument. Your result set has to be a list  (rows) of lists (columns). 

 
  csvwriter.writerow(row)
  
  
   Write the row parameter to the writerâ€™s file object, formatted according to the current dialect. 
 

  

  import csv
RESULTS = [
    ['apple','cherry','orange','pineapple','strawberry']
]
with open("output.csv",'wb') as resultFile:
    wr = csv.writer(resultFile, dialect='excel')
    wr.writerows(RESULTS)
  

  

  import csv
RESULT = ['apple','cherry','orange','pineapple','strawberry']
with open("output.csv",'wb') as resultFile:
    wr = csv.writer(resultFile, dialect='excel')
    wr.writerow(RESULT)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49762157)
 slice your list into a 2D list using a comprehension, and pass that to  csv.writerows . 

 Self-contained example: 

  import csv

lst = list(range(1,10))

with open("out.csv","w",newline="") as f:
    cw = csv.writer(f)
    cw.writerows(lst[i:i+3] for i in range(0,len(lst),3))
  

 creates a csv file like this: 

  1,2,3
4,5,6
7,8,9
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7529162)
 Well, if you are writing to a CSV file, then why do you use space as a delimiter? CSV files use commas or semicolons (in Excel) as cell delimiters, so if you use  delimiter=' ' , you are not really producing a CSV file. You should simply construct  csv.writer  with the default delimiter and dialect. If you want to read the CSV file later into Excel, you could specify the Excel dialect explicitly just to make your intention clear (although this dialect is the default anyway): 

  example = csv.writer(open("test.csv", "wb"), dialect="excel")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16060387)
  

  # somelist contains data like '12/51','9/43' etc
mylist = ["'" + val + "'" for val in somelist]
w = csv.writer(open('filename.csv','wb'))
for me in mylist:
    w.writerow([me])
  

 This would ensure your data is written as it is to csv. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41364253)
 Use  map  in a list-comprehension while reading the file. 

  import csv

with open("csvfile.csv", "rb") as f:
    lines = [map(float, line) for line in csv.reader(f)]
  

 Saves you creating a list twice (reading, converting) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37493223)
 If your aim is just writing a list as a table on Excel. You can try below sample, where ";" and dialect='excel-tab' property enables us to switch between coloumns. 

  import csv

RESULTS = [
    ['val_col1;','val_col2;','val_col3']
]
resultFile = open("testExcel.csv",'wb')
resultWriter= csv.writer(resultFile, dialect='excel-tab')
resultWriter.writerows(RESULTS)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12240667)
 You can create a list of lists(row) and write them all using http://docs.python.org/library/csv.html#csv.csvwriter.writerows.  . The important part is that a row is a python list, not a string with comma seperated values. 

  data = ['a,x', 'b,y', 'c,z']
f = open('data.csv', 'wb')
w = csv.writer(f, delimiter = ',')
w.writerows([x.split(',') for x in data])
f.close()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9187100)
 Use the http://docs.python.org/library/csv.html with the  excel-tab  dialect: 

  >>> import csv
>>> with open('sample.txt', 'w') as f:
...   w = csv.writer(f, dialect = 'excel-tab')
...   w.writerows(sample_mod)
... 
  

 After I ran this code with your  sample_mod  list the file 'sample.txt' contained: 

  age 1   births  2
cars    3   foods   4
set 10  grm 6
  

 which is the desired result. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13437766)
 CSV stands for comma separated values. CSV is like a text file and can be created simply by adding the http://en.wikipedia.org/wiki/Comma-separated_values 

 for example write this code: 

  f = open('example.csv','w')
f.write("display,variable x")
f.close()
  

 you can open this file with excel. 



