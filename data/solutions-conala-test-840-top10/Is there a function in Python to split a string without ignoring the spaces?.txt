Query: Is there a function in Python to split a string without ignoring the spaces?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/113555)
  >>> import re
>>> re.split(r"(\s+)", "This is the string I want to split")
['This', ' ', 'is', ' ', 'the', ' ', 'string', ' ', 'I', ' ', 'want', ' ', 'to', ' ', 'split']
  

 Using the capturing parentheses in re.split() causes the function to return the separators as well. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/113558)
 I don't think there is a function in the standard library that does that by itself, but "partition" comes close 

 The best way is probably to use regular expressions (which is how I'd do this in any language!) 

  import re
print re.split(r"(\s+)", "Your string here")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/113554)
 The hard part with what you're trying to do is that you aren't giving it a character to split on. split() explodes a string on the character you provide to it, and removes that character. 

 Perhaps this may help: 

  s = "String to split"
mylist = []
for item in s.split():
    mylist.append(item)
    mylist.append(' ')
mylist = mylist[:-1]
  

 Messy, but it'll do the trick for you... 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29740024)
 Python string  .split()  function, split string that separated by white space by default and return a list that contains any mixed characters without spaces. my simple suggest is that you replace sign characters by new two side spaces sign before using  .split()  function: 

  for line in code.readlines():
    for sign in '({[<+-=*/%;>]})':
        line = line.replace(sign, ' %s ' % sign)
    for word in line.split():
        print word
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52496428)
 I think using regular expressions is your best option as well. 

 I would try something like this: 

  import re
def split(string):
    return re.findall('\S+',string)
  

 This should return a list of all none whitespace characters in your string. 

 Example output: 

  >>> split('duff_beer 4.00')
['duff_beer', '4.00']
>>> split('a b c\n')
['a', 'b', 'c']
>>> split('\tx y \n z ')
['x', 'y', 'z']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43035638)
 To preserve quotes use this function: 

  def getArgs(s):
    args = []
    cur = ''
    inQuotes = 0
    for char in s.strip():
        if char == ' ' and not inQuotes:
            args.append(cur)
            cur = ''
        elif char == '"' and not inQuotes:
            inQuotes = 1
            cur += char
        elif char == '"' and inQuotes:
            inQuotes = 0
            cur += char
        else:
            cur += char
    args.append(cur)
    return args
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/79985)
 You want split, from the https://docs.python.org/2/library/shlex.html module. 

  >>> import shlex
>>> shlex.split('this is "a test"')
['this', 'is', 'a test']
  

 This should do exactly what you want. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29265746)
 you could also split the string on spaces, and reassemble it (without spaces): 

   ''.join("ja ck".split())
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43627116)
  import re
mylist = [x for x in re.compile('\s*[,|\s+]\s*').split(string)
  

 Simply, comma or at least one white spaces with/without preceding/succeeding white spaces. 

  



