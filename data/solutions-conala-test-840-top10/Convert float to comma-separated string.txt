Query: Convert float to comma-separated string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28241392)
 You have a string of comma separated  float  values and not  int . You need to  split  them first and then add them. You need to cast it to  float  and not  int   

  total = 0
s = '2, 3.4, 5, 3, 6.2, 4, 7'

for i in s.split(','):
    total += float(i)
print total
  

 Output will be  30.6  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41385382)
  x  is a list with one string, so to access that string you need  x[0] . That string is comma-separated, so you need to specify the delimiter:  split(',') . (Otherwise,  split()  tries to split a string on whitespace, https://docs.python.org/3/library/stdtypes.html#str.split.) 

  

  [float(i) for i in x[0].split(',')]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10677455)
 For monetary applications, the  decimal  module is a good choice for floating point arithmetic.  To display decimal floats with commas, see the http://docs.python.org/library/decimal.html#recipes recipe: 

  def moneyfmt(value, places=2, curr='', sep=',', dp='.',
             pos='', neg='-', trailneg=''):
    """Convert Decimal to a money formatted string.

    places:  required number of places after the decimal point
    curr:    optional currency symbol before the sign (may be blank)
    sep:     optional grouping separator (comma, period, space, or blank)
    dp:      decimal point indicator (comma or period)
             only specify as blank when places is zero
    pos:     optional sign for positive numbers: '+', space or blank
    neg:     optional sign for negative numbers: '-', '(', space or blank
    trailneg:optional trailing minus indicator:  '-', ')', space or blank

    >>> d = Decimal('-1234567.8901')
    >>> moneyfmt(d, curr='$')
    '-$1,234,567.89'
    >>> moneyfmt(d, places=0, sep='.', dp='', neg='', trailneg='-')
    '1.234.568-'
    >>> moneyfmt(d, curr='$', neg='(', trailneg=')')
    '($1,234,567.89)'
    >>> moneyfmt(Decimal(123456789), sep=' ')
    '123 456 789.00'
    >>> moneyfmt(Decimal('-0.02'), neg='<', trailneg='>')
    '<0.02>'

    """
    q = Decimal(10) ** -places      # 2 places --> '0.01'
    sign, digits, exp = value.quantize(q).as_tuple()
    result = []
    digits = map(str, digits)
    build, next = result.append, digits.pop
    if sign:
        build(trailneg)
    for i in range(places):
        build(next() if digits else '0')
    build(dp)
    if not digits:
        build('0')
    i = 0
    while digits:
        build(next())
        i += 1
        if i == 3 and digits:
            i = 0
            build(sep)
    build(curr)
    build(neg if sign else pos)
    return ''.join(reversed(result))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10677386)
 You can use the http://docs.python.org/library/locale.html#locale.format function to do this: 

  >>> import locale
>>> locale.setlocale(locale.LC_ALL, 'en_US.utf8')
'en_US.utf8'
>>> locale.format("%.2f", 100028282.23, grouping=True)
'100,028,282.23'
  

 Note that you have to give the precision:  %.2f  

 Alternatively you can use the http://docs.python.org/library/locale.html#locale.currency function, which follow the http://docs.python.org/library/locale.html#locale.LC_MONETARY settings: 

  >>> locale.currency(100028282.23)
'$100028282.23'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21212727)
 Floating point values cannot have a comma. You are passing  1.23,2.4,3.123  as it is to float function, which is not valid. First split the string based on comma, 

  s = "1.23,2.4,3.123"
print s.split(",")        # ['1.23', '2.4', '3.123']
  

 Then convert each and and every element of that list to float and add them together to get the result. To feel the power of Python, this particular problem can be solved in the following ways. 

 You can find the  total , like this 

  s = "1.23,2.4,3.123"
total = sum(map(float, s.split(",")))
  

 If the number of elements is going to be too large, you can use a generator expression, like this 

  total = sum(float(item) for item in s.split(","))
  

 All these versions will produce the same result as 

  total, s = 0, "1.23,2.4,3.123"
for current_number in s.split(","):
    total += float(current_number)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22641788)
 You can a split by comma  "," : 

  x1, y1, width1, height1 = input("Enter x1, y1, width1, height1: ").split(",")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10677401)
 As an alternative to https://stackoverflow.com/a/10677386/577088's excellent answer, simple string formatting works in 2.7+, without requiring an import: 

  >>> '{0:,.2f}'.format(24322.34)
'24,322.34'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28241400)
 You'll want to split the string at the commas using https://docs.python.org/2/library/stdtypes.html#str.split. Then, convert them to floats (I don't know why you're using  int  when you say that you want to convert them to "an int or float"). 

  total = 0
s = '2, 3.4, 5, 3, 6.2, 4, 7'
for i in s.split(','):
    total += float(i)
print total
  

 Personally, I would prefer to do this with a generator expression:  

  s = '2, 3.4, 5, 3, 6.2, 4, 7'
total = sum(float(i) for i in s.split(','))
print total
  

 The reason what you're doing doesn't work is that  for i in s  iterates over each individual character of  s . So first it does  total += int('2') , which works. But then it tries  total += int(',') , which obviously doesn't work. 



