Query: How to alphabetically sort array of dictionaries on single key?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5048914)
  import operator

sorted(my_list, key=operator.itemgetter("name"))
  

 Also,  itemgetter  can take a few arguments, and returns a tuple of those items, so you can sort on a number of keys like this: 

  sorted(my_list, key=operator.itemgetter("name", "age", "other_thing"))
  

 The  sorted  function returns a new sorted list.  If you want to sort the list in place, use: 

  my_list.sort(key=operator.itemgetter("name"))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28136444)
 We can use https://docs.python.org/2/library/string.html#string.ascii_letters to get index of each letters to sort them. 

  arr = ['A','e','a','D','f','B']

import string

print sorted(arr, key=string.ascii_letters.index)
  

 Results: 

  ['a', 'e', 'f', 'A', 'B', 'D']
  

 Or if you want to sort the original  arr  list use https://docs.python.org/2/tutorial/datastructures.html#more-on-lists built-in function. 

  arr.sort(key=string.ascii_letters.index)
print arr
  

 

 If the  arr  list is having words instead of single letters or alphabets we can use https://docs.python.org/2/library/stdtypes.html#str.swapcase 

  arr = ['Abc', 'abc', 'aBc']
print sorted(arr, key=str.swapcase)
  

 Yields: 

  ['abc', 'aBc', 'Abc']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28353521)
 Some timings show that for sorting single characters creating a dict is the actually most efficient: 

 python2.7: 

  from string import ascii_letters

d = {b:a for a, b  in enumerate(ascii_letters)}

In [34]: timeit  sorted(s, key=str.swapcase)
10 loops, best of 3: 32.6 ms per loop

In [35]: timeit sorted(s,key=lambda x: (not x.islower(),x))
10 loops, best of 3: 51.4 ms per loop

In [37]: timeit (sorted(s ,key=d.get))
10 loops, best of 3: 22.4 ms per loop
  

 Python3.4: 

  In [4]: timeit sorted(s,key=lambda x: (not x.islower(),x))
10 loops, best of 3: 57.7 ms per loop

In [5]: timeit  sorted(s, key=str.swapcase)
10 loops, best of 3: 41.2 ms per loop

In [6]: timeit (sorted(s ,key=d.get))
10 loops, best of 3: 21.1 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22593094)
 One solution: 

  sorted(test, key=lambda x: isinstance(x,list) and len(x) or 1)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46484925)
 Firstly, using  just   sorted  will  not sort alphabetically , look at your output... I am pretty sure  L  does not come before  a . What you are currently doing is a  case-sensitive  sort.  

 You can perform a  case-insensitive  sort by using a https://wiki.python.org/moin/HowTo/Sorting#Key_Functions like so: 

  >>> words_list = ["Lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing", "elit", "sed", "do", "eiusmod", "tempor", "incididunt"]
>>> sorted(words_list, key=str.lower)
['adipiscing', 'amet', 'consectetur', 'do', 'dolor', 'eiusmod', 'elit', 'incididunt', 'ipsum', 'Lorem', 'sed', 'sit', 'tempor']
  

 You can then modify the https://wiki.python.org/moin/HowTo/Sorting#Key_Functions like below to sort first on length then alphabetically: 

  >>> def custom_key(str):
...   return -len(str), str.lower()
... 
>>> sorted(words_list, key=custom_key)
['consectetur', 'adipiscing', 'incididunt', 'eiusmod', 'tempor', 'dolor', 'ipsum', 'Lorem', 'amet', 'elit', 'sed', 'sit', 'do']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31934851)
 Do you need to have the key prefixed with "ind"? You could use integers as the key which would sort correctly. Right now it is sorting alphabetically which is causing the issue. 

 If you can't, assuming your keys follow the same format, sort using this: 

   collections.OrderedDict(sorted(data.items(), key=lambda kv: int(kv[0][3:])))
  

 Which uses the integer after the prefix to sort. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33256649)
 You can use the https://docs.python.org/2/reference/expressions.html#in to find out whether a substring is contained in another string). 

 
   For the Unicode and string types,  x in y  is true if and only if  x  is a substring of  y . An equivalent test is  y.find(x) != -1 . [...] Empty strings are always considered to be a substring of any other string, so  "" in "abc"  will return  True . 
 

 You can use this to implement your keyword sorting key. 

 You'd use the approach given in the other answer (pass a tuple as key) to implement the alphabetical sorting as a secondary key. 

 Here's an example: 

  import pprint

# Define the keywords I want to see first
preferred_projects = ['one', 'two', 'three']

# example data
AllMyProjectsFromaDatasource = [{ 'name': 'project two', 'id': 5, 'otherkey': 'othervalue'},
                                { 'name': 'project three', 'id': 1, 'otherkey': 'othervalue'},
                                { 'name': 'project one', 'id': 3, 'otherkey': 'othervalue'},
                                { 'name': 'abc project', 'id': 6, 'otherkey': 'othervalue'},
                                { 'name': 'one project', 'id': 9, 'otherkey': 'othervalue'}
                               ]    

def keyfunc(x):
    # keyword primary key
    # (add index to list comprehension when keyword is in name)
    preferred_key = [float(idx) 
                     for idx, i in enumerate(preferred_projects)
                     if i in x['name']]
    # found at least one match in preferred keywords, use first if any, else infinity
    keyword_sortkey = preferred_key[0] if preferred_key else float('inf')
    # return tuple to sort according to primary and secondary key
    return keyword_sortkey, x['name']

AllMyProjectsFromaDatasource.sort(key=keyfunc)

pprint.pprint(AllMyProjectsFromaDatasource)
  

 The output is: 

  [{'id': 9, 'name': 'one project', 'otherkey': 'othervalue'},
 {'id': 3, 'name': 'project one', 'otherkey': 'othervalue'},
 {'id': 5, 'name': 'project two', 'otherkey': 'othervalue'},
 {'id': 1, 'name': 'project three', 'otherkey': 'othervalue'},
 {'id': 6, 'name': 'abc project', 'otherkey': 'othervalue'}]
  



