Query: Pandas - replacing column values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46112697)
 This solution will change the existing dataframe itself: 

  mydf = pd.DataFrame({"BrandName":["A", "B", "ABC", "D", "AB"], "Speciality":["H", "I", "J", "K", "L"]})
mydf["BrandName"].replace(["ABC", "AB"], "A", inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53299912)
  

  import pandas as pd
dk=pd.DataFrame({"BrandName":['A','B','ABC','D','AB'],"Specialty":['H','I','J','K','L']})
  

 Now use  DataFrame.replace()  function: 

  dk.BrandName.replace(to_replace=['ABC','AB'],value='A')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51954290)
 loc function can be used to replace multiple values,
Documentation for it :
https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html/%22loc%22 

  df.loc[df['BrandName'].isin([ABC', 'AB'])]='A'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36236885)
  w.female.replace(to_replace=dict(female=1, male=0), inplace=True)
  

 See http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50930294)
  

  df['Description'] = df['Description'].str.replace('*','')
  

 There does not seem to be option for  inplace  so, need to assign to  column  again. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42319852)
 try resetting the value using the following: 

  df['Fruits'] =  pd.DataFrame()
  

 then assign the new values again 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43744114)
 You can use the  to_numeric  method, but it's not changing the value in place. You need to set the column to the new values: 

  training_data['usagequantity'] = (
    pd.to_numeric(training_data['usagequantity'],
                  errors='coerce')
      .fillna(0)
    )
  

 http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html sets the non-numeric values to  NaNs , and then the chained http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html method replaces the  NaNs  with zeros. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27060328)
 The easiest way is to use the https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html method on the column. The arguments are a list of the things you want to replace (here  ['ABC', 'AB'] ) and what you want to replace them with (the string  'A'  in this case): 

  >>> df['BrandName'].replace(['ABC', 'AB'], 'A')
0    A
1    B
2    A
3    D
4    A
  

 This creates a new Series of values so you need to assign this new column to the correct column name: 

  df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11819672)
 A combination of boolean indexing and apply can do the trick.
Below an example on replacing zero element for column C. 

  In [22]: df
Out[22]:
   A  B  C  D
0  8  3  5  8
1  9  4  0  4
2  5  4  3  8
3  4  8  5  1

In [23]: bi = df.C==0

In [24]: df.ix[bi, 'C'] = df[bi][['A', 'D']].apply(max, axis=1)

In [25]: df
Out[25]:
   A  B  C  D
0  8  3  5  8
1  9  4  9  4
2  5  4  3  8
3  4  8  5  1
  



