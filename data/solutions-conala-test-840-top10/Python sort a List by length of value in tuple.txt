Query: Python sort a List by length of value in tuple
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33413584)
 Use  lambda  function as key for sort in couple with  len  method of string: 

  mylist.sort(key=lambda x: len(x[0]))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14103631)
 You got the order of the tuple the wrong way round. When Python sorts on tuples, the first value is the  main  sort, with the second being the subsort, etc... - your code presumes the opposite order. 

 You want to sort by length,  then  alphabetically:  

  >>> x.sort(key=lambda item: (len(item), item))
>>> x
['a', 'b', 'c', 'aa', 'ab', 'ba', 'aaa']
  

 Edit: As DSM points out in the comments, Python sorts letters as capitals first, then lowercase. If this behaviour isn't wanted, see https://stackoverflow.com/a/36156/722121. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48205473)
 Povide http://python-reference.readthedocs.io/en/latest/docs/list/sort.html#sort with an appropriate key function that returns the last element of a tuple: 

  tuples.sort(key=lambda x: x[-1])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33413590)
 You're close, you just need to index out element  [0]  then take the  len  of that 

  >>> sorted(mylist, key = lambda i: len(i[0]))
[('sa', 2346), ('abcde', 23), ('this is one string', 234)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54739677)
 Use this: 

  print(sorted(list_of_tuples,key=len))
  

  

  list_of_tuples.sort(key=len)
print(list_of_tuples)
  

 Both reproduce the expected result. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19729956)
 Well you can make the lambda simpler: 

  l.sort(key=lambda t: len(t[1]), reverse=True)
  

 Also, don't use  list  as a variable name; it's already taken by a built-in function. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29726111)
 The sorting key is a function that, given a list element, returns a value that Python knows how to compare natively. For example, Python knows how to compare integers and strings. 

 Python can also compare tuples and lists that are composed of things it knows how to compare. The way tuples and lists get compared is that earlier items in the tuple or list take precedence over later values, just as you would expect. 

 In your case, you would want to make the following key function: 

  lambda name: (name[0], -len(name), name)
  

 Items with smaller keys always come earlier in a sorted list. Thus, a smaller initial character causes an animal to come earlier. If two names have the same initial, a longer name length causes an animal to come earlier because the negative name length is smaller. Finally, if two animals' names have the same initial and the same length, the tie is broken by lexicographic order. 

 This program demonstrates how to sort a list with the above key function: 

  animals = ["ant", "antelope", "zebra", "anteater", "cod", "cat"]

animals.sort(key=lambda name: (name[0], -len(name), name))

print(animals)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54909348)
 We can use a compound sorting key, first sort by length, second lexicographically. We do this by creating a tuple, because tuples will naturally sort using the elements in the order they appear. 

  b = ['six', 'small', 'he', 'foxes', 'saw']
b.sort(key=lambda s: (len(s), s))
  

 For the record, the above results in this sorted list:: 

  ['he', 'saw', 'six', 'foxes', 'small']
  

 Which is the correct order as stipulated in the question (but the sample output in the question is wrong, so please be aware of it before downvoting!) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46558946)
 Either tell python to sort only on the first item 

  sorted(ls, key=lambda t: t[0])
  

 Or convert the whole thing to a structured numpy array and ask numpy to sort it  

  ls_arr = np.array(ls, dtype=[('my_val', float), ('my_arr', float, 2)])
ls_arr.sort()
  

 This second option only works if the arrays are always the same length. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/40358248)
 This code will work for a list of lists. The internal lists don't have to be the same length. 

 At each level we iterate over a list using  enumerate  to get the list item and its index. At the top level, each item is another list, and the inner loop iterates over each of those lists to get their indices and values, storing the indices (as a tuple) in a tuple that also contains the value. We then sort the resulting list of tuples ( b ) on the values, and then split it using  zip  into a tuple of all the indices and a tuple of the values.   

  from operator import itemgetter

a = [[5, 2], [7, 4], [0, 3]]

b = [((i, j), v) for i, t in enumerate(a) for j, v in enumerate(t)]
b.sort(key=itemgetter(-1), reverse=True)
print(b)
coords, vals = zip(*b)
print(vals)
print(coords)
  

  output  

  [((1, 0), 7), ((0, 0), 5), ((1, 1), 4), ((2, 1), 3), ((0, 1), 2), ((2, 0), 0)]
(7, 5, 4, 3, 2, 0)
((1, 0), (0, 0), (1, 1), (2, 1), (0, 1), (2, 0))
  



