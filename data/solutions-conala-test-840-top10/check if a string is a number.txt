Query: check if a string is a number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43242796)
 You can use the isdigit() method for strings.
In this case, as you said the input is always a string:  

      user_input = input("Enter something:")
    if user_input.isdigit():
        print("Is a number")
    else:
        print("Not a number")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47922717)
  natural : [0, 1, 2 ... ∞] 

 Python 2 

  it_is = unicode(user_input).isnumeric()
  

 Python 3 

  it_is = str(user_input).isnumeric()
  

  integer : [-∞, .., -2, -1, 0, 1, 2, ∞] 

  try:
    int(user_input)
    it_is = True
 except ValueError:
    it_is = False
  

  float : [-∞, .., -2, -1.0...1, -1, -0.0...1, 0, 0.0...1, ..., 1, 1.0...1, 
..., ∞]  

  try:
    float(user_input)
    it_is = True
 except ValueError:
    it_is = False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8754600)
 For Python 3 the following will work. 

  userInput = 0
while True:
  try:
     userInput = int(input("Enter something: "))       
  except ValueError:
     print("Not an integer!")
     continue
  else:
     print("Yes an integer!")
     break 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48733336)
 This solution will accept only integers and nothing but integers. 

  def is_number(s):
    while s.isdigit() == False:
        s = raw_input("Enter only numbers: ")
    return int(s)


# Your program starts here    
user_input = is_number(raw_input("Enter a number: "))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26336546)
 Lets say you have digits in string.
str = "100949"
and you would like to check if it has only numbers 

  if str.isdigit():
returns TRUE or FALSE 
  

 http://docs.python.org/2/library/stdtypes.html#str.isdigit 

 otherwise your method works great to find the occurrence of a digit in a string.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14460344)
 This works with any number, including a fraction: 

  import fractions

def isnumber(s):
   try:
     float(s)
     return True
   except ValueError:
     try: 
       Fraction(s)
       return True
     except ValueError: 
       return False
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21388562)
 Use string http://docs.python.org/2/library/stdtypes.html#str.isdigit function: 

  >>> s = '12345'
>>> s.isdigit()
True
>>> s = '1abc'
>>> s.isdigit()
False
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48729739)
 This answer provides step by step guide having function with examples to find the string is: 

 
  Positive integer  
  Positive/negative - integer/float  
  How to discard "NaN" (not a number) strings while checking for number?  
 

 Check if string is  positive  integer 

 You may use https://docs.python.org/2/library/stdtypes.html#str.isdigit to check whether given string is  positive  integer.  

  

  # For digit
>>> '1'.isdigit()
True
>>> '1'.isalpha()
False
  

 Check for string as positive/negative - integer/float 

  str.isdigit()  returns  False  if the string is a  negative  number or a float number. For example: 

  # returns `False` for float
>>> '123.3'.isdigit()
False
# returns `False` for negative number
>>> '-123'.isdigit()
False
  

 If you want to  also check for the  negative  integers and https://docs.python.org/3/library/functions.html#float , then you may write a custom function to check for it as: 

  def is_number(n):
    try:
        float(n)   # Type-casting the string to `float`.
                   # If string is not a valid `float`, 
                   # it'll raise `ValueError` exception
    except ValueError:
        return False
    return True
  

  

  >>> is_number('123')    # positive integer number
True

>>> is_number('123.4')  # positive float number
True

>>> is_number('-123')   # negative integer number
True

>>> is_number('-123.4') # negative `float` number
True

>>> is_number('abc')    # `False` for "some random" string
False
  

 Discard "NaN" (not a number) strings while checking for number 

 The above functions will return  True  for the "NAN" (Not a number) string because for Python it is valid float representing it is not a number. For example: 

  >>> is_number('NaN')
True
  

 In order to check whether the number is "NaN", you may use https://docs.python.org/2/library/math.html#math.isnan as: 

  >>> import math
>>> nan_num = float('nan')

>>> math.isnan(nan_num)
True
  

 Or if you don't want to import additional library to check this, then you may simply check it via comparing it with itself using  == . Python returns  False  when  nan  float is compared with itself. For example: 

  # `nan_num` variable is taken from above example
>>> nan_num == nan_num
False
  

 Hence, above  function  is_number  can be updated to return  False  for  "NaN"   as: 

  def is_number(n):
    is_number = True
    try:
        num = float(n)
        # check for "nan" floats
        is_number = num == num   # or use `math.isnan(num)`
    except ValueError:
        is_number = False
    return is_number
  

  

  >>> is_number('Nan')   # not a number "Nan" string
False

>>> is_number('nan')   # not a number string "nan" with all lower cased
False

>>> is_number('123')   # positive integer
True

>>> is_number('-123')  # negative integer
True

>>> is_number('-1.12') # negative `float`
True

>>> is_number('abc')   # "some random" string
False
  

   PS: Each operation for each check depending on the type of number comes with additional overhead. Choose the version of  is_number  function which fits your requirement.   


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18097181)
 You don't need regex. You can just use simple  str.replace : 

  >>> s = 'suppose_name_1'
>>> index = s.rfind('_')  # Last index of '_'
>>> s.replace(s[index+1:], str(int(s[index+1:]) + 1))
'suppose_name_2'
  

 If you need to first check whether you have digits at the end, you can check that using  str.isdigit()  method: 

  >>> s = 'suppose_name'
>>> 
>>> index = s.rfind('_')
>>> if s[index+1:].isdigit():
        s = s.replace(s[index+1:], str(int(s[index+1:]) + 1))


>>> s
'suppose_name'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35808536)
  def is_float(string):
  try:
    return float(string) and '.' in string  # True if string is a number contains a dot
  except ValueError:  # String is not a number
    return False
  

 Output: 

  >> is_float('string')
>> False
>> is_float('2')
>> False
>> is_float('2.0')
>> True
>> is_float('2.5')
>> True
  



