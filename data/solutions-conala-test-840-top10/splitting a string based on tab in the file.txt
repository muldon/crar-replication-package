Query: splitting a string based on tab in the file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17048810)
 An other  regex -based solution: 

  >>> strs = "foo\tbar\t\tspam"

>>> r = re.compile(r'([^\t]*)\t*')
>>> r.findall(strs)[:-1]
['foo', 'bar', 'spam']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17038694)
 Split on tab, but then remove all blank matches. 

  text = "hi\tthere\t\t\tmy main man"
print [splits for splits in text.split("\t") if splits is not ""]
  

 Outputs: 

  ['hi', 'there', 'my main man']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17038550)
 You can use regexp to do this: 

  import re
patt = re.compile("[^\t]+")


s = "a\t\tbcde\t\tef"
patt.findall(s)
['a', 'bcde', 'ef']  
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17038485)
 You can use  regex  here: 

  >>> import re
>>> strs = "foo\tbar\t\tspam"
>>> re.split(r'\t+', strs)
['foo', 'bar', 'spam']
  

  update:  

 You can use   str.rstrip  to get rid of trailing  '\t'  and then apply regex. 

  >>> yas = "yas\t\tbs\tcda\t\t"
>>> re.split(r'\t+', yas.rstrip('\t'))
['yas', 'bs', 'cda']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15191774)
 Could you have got the tabs and spaces muddled or converted? Maybe splitting on both tabs and spaces would help 

  import re
re.split('\t|    ', line)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12533983)
 Just use http://docs.python.org/library/stdtypes.html#str.strip, it removes all whitespace for you, including tabs and newlines, while splitting. The splitting itself can then be done with http://docs.python.org/library/stdtypes.html#str.splitlines: 

  [s.strip() for s in data_string.splitlines()]
  

 Output: 

  >>> [s.strip() for s in data_string.splitlines()]
['Name: John Smith', 'Home: Anytown USA', 'Phone: 555-555-555', 'Other Home: Somewhere Else', 'Notes: Other data', 'Name: Jane Smith', 'Misc: Data with spaces']
  

 You can even inline the splitting on  :  as well now: 

  >>> [s.strip().split(': ') for s in data_string.splitlines()]
[['Name', 'John Smith'], ['Home', 'Anytown USA'], ['Phone', '555-555-555'], ['Other Home', 'Somewhere Else'], ['Notes', 'Other data'], ['Name', 'Jane Smith'], ['Misc', 'Data with spaces']]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53517830)
 Maybe use a regular expression? 

  >>> import regex
>>> L = regex.split(r"(?<!\t)\t", "dir\tsubdir1\t\tfile1.ext\t\tsubsubdir1\tsubdir2\t\tsubsubdir2\t\t\tfile2.ext")
>>> L
['dir', 'subdir1', '\tfile1.ext', '\tsubsubdir1', 'subdir2', '\tsubsubdir2', '\t\tfile2.ext']
>>> L[:1] + ['\t' + i for i in L[1:]]
['dir', '\tsubdir1', '\t\tfile1.ext', '\t\tsubsubdir1', '\tsubdir2', '\t\tsubsubdir2', '\t\t\tfile2.ext']
  

 </h3>

 The regular expression is 

  (?<!\t)\t
  

 which means "a tab that's not preceded by another tab", so every first tab in a sequence of tags is matched by the regex. It's then used as the splitting mark. 

 After splitting, one tab is stripped from every subsequent items, so the last line  L[:1] + ['\t' + i for i in L[1:]]  prepends the missing tab back. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51791268)
 Use: 

  df[['chr','start', 'alt']] = df['coordinates(gDNA)'].str.split(':g.|>',expand=True)
df[['start','ref']] = df['start'].str.extract('(\d+)(\D+)')
print (df)
     coordinates(gDNA)    chr     start alt ref
0  chr10:g.89711916T>A  chr10  89711916   A   T
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37223030)
  >>> import re
>>> source = '0.850000.900000.9500001.000001.50000'

>>> re.findall("(.*?00+(?!=0))", source)

['0.850000', '.900000', '.950000', '1.00000', '1.50000']
  

 The split is based on looking for " {anything, double zero, a run of zeros (followed by a not-zero) "}. 



