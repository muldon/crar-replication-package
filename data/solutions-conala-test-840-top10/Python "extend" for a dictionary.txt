Query: Python "extend" for a dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/577241)
  a.update(b)
  

 http://docs.python.org/library/stdtypes.html#dict.update 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22665999)
   .extend()  expects a sequence, you want to use  append()  which expects an object.  

 For example 

  >>> l = list()
>>> d = dict('a':1, 'b':2}
>>> l.extend(d)
['a', 'b']

>>> l2 = list()
>>> l2.append(d)
[{'a':1, 'b':2}]
  

 In Python when you iterate over a dictionary you get it's keys as a sequence, hence when using  extends()  only the dictionary keys are added to the list - as Python is asking for the same iterator we get when iterating over the dictionary in a  for  loop.  

  >>> for k in d:
        print k
a
b
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22665864)
 . it is expected, when you access dictionary by it's name, it would iterate over keys only. If you want dictionary values to be in list, you can do: 

  errList={'errors': 'fail 0[file.so: undefined symbol: Device_Assign]: library file.so\r\n', 'filename': '/users/home/ili/a.pdr'}
l= [(i +" "+ d[i]) for i in errList]
print l 
  

 Otherwise, you can access dictionary as list of tuples: 

  print errList.items()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/577245)
  a.update(b)
  

 Will add keys and values from  b  to  a , overwriting if there's already a value for a key. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51156269)
 Have you tried using dictionary comprehension with dictionary mapping: 

  c = {**a, **b}
# c = { "a" : 1, "b" : 2, "c" : 3, "d" : 4 }
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32049895)
 Append a dictionary to another one: 

  >>>def foo():
    dic = {1:'a', 2:'b', 3:'c', 4:'a'}
    newdic = {5:'v', 1:'aa'}
    for i in dic.keys():
        if not newdic.has_key(dic[i]):
            newdic[i] = dic[i]
    print "Appended one:", newdic

>>>foo()
Appended one: {1: 'a', 2: 'b', 3: 'c', 4: 'a', 5: 'v'}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48036819)
 An English dictionary define the words  append  and  extend  as: 

  append : add (something) to the end of a written document.  
 extend : make larger. Enlarge or expand 

 

 With that knowledge, now let's understand 

 1)  The difference between  append  and  extend   

   append  : 

 
 Appends  any Python object as-is  to the end of the list (i.e. as a
last element in the list). 
 The resulting list may be nested and contain heterogeneous elements (i.e. list, string, tuple, dictionary, set, etc.) 
 

   extend  : 

 
 Accepts any  iterable  as its argument and makes the list  larger . 
 The resulting list is always one dimensional list (i.e. no nesting) and it may contain heterogeneous elements in it (e.g. characters, integers, float) as a result of applying  list(iterable) . 
 

 2)  Similarity between  append  and  extend   

 
 Both takes exactly one argument. 
 Both modify the list  in-place . 
 As a result, both returns  None . 
 

 

  Example  

  lis = [1, 2, 3]

# 'extend' is equivalent to this
lis = lis + list(iterable)

# 'append' simply appends its argument as the last element to the list
# as long as the argument is a valid Python object
lis.append(object)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33931358)
  

  final = {}
dicts = [x,y]

for D in dicts:
    for key, value in D:
        final[key] = final.get(key,[]).extend(value)
  

  final.get(key,[])  will get the value in  final  for that key if it exists, otherwise it'll be an empty list.  .extend(value)  will extend that list, empty or not, with the corresponding value in  D , which is  x  or  y  in this case. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6883403)
 The correct answer to your question is dict.extend() (as pointed by  Ant ). However your example concerns list concatenation, not dictionary extension. 

 So, if both arguments are lists you can concatenate them as in: 

  > d1 + d2
[{'a': 1, 'b': 2}, {'a': 2, 'b': 5}, {'s': 3, 'f': 1}, {'s': 4, 'f': 9}]
  

 which is equivalent to calling list.extend(): 

  L.extend(iterable) -- extend list by appending elements from the iterable
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/10487303)
  {}  represents an empty dictionary, not an array/list.  F lists  arrays, you need  [] . 

 To initialize an empty list do this: 

  my_list = []
  

  

  my_list = list()
  

 To add elements to the list, use  append  

  my_list.append(12)
  

 To  extend  the list to include the elements from another list use  extend  

  my_list.extend([1,2,3,4])
my_list
--> [12,1,2,3,4]
  

 To remove an element from a list use  remove  

  my_list.remove(2)
  

 Dictionaries represent a collection of key/value pairs also known as an associative array  a map.  

 To initialize an empty dictionary use  {}    dict()  

 Dictionaries have keys and values 

  my_dict = {'key':'value', 'another_key' : 0}
  

 To extend a dictionary with the contents of another dictionary you may use the  update  method 

  my_dict.update({'third_key' : 1})
  

 To remove a value from a dictionary 

  del my_dict['key']
  



