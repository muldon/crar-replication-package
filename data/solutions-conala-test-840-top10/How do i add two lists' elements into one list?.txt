Query: How do i add two lists' elements into one list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30478461)
  l1.extend([l2, [u,z]])
  

  append  can only add one element to a list.
 extend  takes a list and adds all the elements in it to other list. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43344333)
 If you want to  modify  the lists, you can use a  for  loop and use  itertools.cycle : 

  <b>from itertools import cycle</b>

for ai,xi in zip(a,<b>cycle(</b>x<b>)</b>):
    ai.append(xi)  

  

  >>> a
[['b', 1], ['c', 1], ['d', 2], ['e', 2], ['f', 3], ['g', 3], ['h', 1], ['i', 1], ['j', 2], ['k', 2], ['l', 3], ['m', 3]]
  

 If you do not care about the original lists, you can also use  list comprehension  to construct a  new list of lists : 

  a[:] = [ai+[xi] for ai,xi in zip(a,cycle(x))]
  

  

  >>> [ai+[xi] for ai,xi in zip(a,cycle(x))]
[['b', 1], ['c', 1], ['d', 2], ['e', 2], ['f', 3], ['g', 3], ['h', 1], ['i', 1], ['j', 2], ['k', 2], ['l', 3], ['m', 3]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50403726)
 Find the code below: 

  list_1 = [100, 100, 50, 40, 40, 20, 10]
list_2 = [5, 25, 50, 120]

final_list = []

for l1 in list_2:
    temp_list_1 = list_1.copy()
    temp_list_1.append(l1)        
    temp_list_1.sort(reverse=True)

    final_list.append(temp_list_1)

print(final_list)
  

 Explanation: 

 Loop over the elements of  list_2  and append it on the  temp_list_1 . . Finally append the sorted list on a new  final_list . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37787163)
   append()  : It is basically used in Python to add one element. 

 
   Example 1: 
 

  >> a = [1, 2, 3, 4]
>> a.append(5)
>> print(a)
>> a = [1, 2, 3, 4, 5]
  

 
   Example 2: 
 

  >> a = [1, 2, 3, 4]
>> a.append([5, 6])
>> print(a)
>> a = [1, 2, 3, 4, [5, 6]]
  

   extend()  : Where extend(), is used to merge two lists or insert multiple elements in one list. 

 
   Example 1: 
 

  >> a = [1, 2, 3, 4]
>> b = [5, 6, 7, 8]
>> a.extend(b)
>> print(a)
>> a = [1, 2, 3, 4, 5, 6, 7, 8]
  

 
   Example 2: 
 

  >> a = [1, 2, 3, 4]
>> a.extend([5, 6])
>> print(a)
>> a = [1, 2, 3, 4, 5, 6]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46705666)
 If you want to add the elements in a list (list2) to the end of other list (list), then you can use the list extend method 

  list = [1, 2, 3]
list2 = [4, 5, 6]
list.extend(list2)
print list
[1, 2, 3, 4, 5, 6]
  

 Or if you want to concatenate two list then you can use + sign 

  list3 = list + list2
print list3
[1, 2, 3, 4, 5, 6]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50403832)
 You can try list comprehension here : 

  main_list = [sorted(list_1+[i], reverse=True) for i in list_2]
print(main_list)
  

 Here I'm adding each element to list_1 and sort it in descending order then to main list.  

 The O/P will be like : 

  [[100, 100, 50, 40, 40, 20, 10, 5], [100, 100, 50, 40, 40, 25, 20, 10], 
[100, 100, 50, 50, 40, 40, 20, 10], [120, 100, 100, 50, 40, 40, 20, 10]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43918527)
 If you transform your list in numpy.array, there are easy way to extract some stuff in a 1D-array based on another one: 

  import numpy
list1 = numpy.array([4.0, 8.0, 14.0, 20.0, 22.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0])
list2 = numpy.array([2.1, 1.8, 9.5, 5., 5.4, 6.7, 3.3, 5.3, 8.8, 9.4, 5., 9.3, 3.1])

step = 10
r, s = range(0,50,10), []
for i in r:
    s.append(numpy.sum([l for l in list2[(list1 > i) & (list1 <= i+step)]]))
print r[1:], s[:-1]
#[10, 20, 30, 40] [3.9, 14.5, 20.7, 35.6]
  

  Edit 
In one line: 

  s = [numpy.sum([l for l in list2[(list1 > i) & (list1 < i+step)]]) for i in r]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11703083)
 You can use list comprehensions with  zip : 

  list3 = [a + b for a, b in zip(list1, list2)]
  

  zip  produces a list of tuples by combining elements from iterables you give it. So in your case, it will return pairs of elements from  list1  and  list2 , up to whichever is exhausted first. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17794903)
 Just concatenate the items to create a  new  list from  item  and the element from  b : 

  for indx, item in enumerate(a):
    c.append(item + [b[indx]])
  

 You can simplify your loop using the http://docs.python.org/2/library/functions.html#zip: 

  for a_item, b_item in zip(a, b):
    c.append(a_item + [b_item])
  

 Then move the whole definition of  c  to a list comprehension: 

  c = [a_item + [b_item] for a_item, b_item in zip(a, b)]
  

  

  >>> a = [[2, 1, 4, 5, 0], [3, 6, 5, 4, 8], [2, 1, 4, 7, 8], [3, 4, 9, 5, 6], [7, 5, 2, 1, 1]]
>>> b = [2, 3, 5, 0, 8]
>>> [a_item + [b_item] for a_item, b_item in zip(a, b)]
[[2, 1, 4, 5, 0, 2], [3, 6, 5, 4, 8, 3], [2, 1, 4, 7, 8, 5], [3, 4, 9, 5, 6, 0], [7, 5, 2, 1, 1, 8]]
  



