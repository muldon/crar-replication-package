Query: finding out absolute path to a file from python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51523)
  >>> import os
>>> os.path.abspath("mydir/myfile.txt")
'C:/example/cwd/mydir/myfile.txt'
  

 Also works if it is already an absolute path: 

  >>> import os
>>> os.path.abspath("C:/example/cwd/mydir/myfile.txt")
'C:/example/cwd/mydir/myfile.txt'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3283336)
 Here's how to get the directory of the current file: 

  import os
os.path.abspath(os.path.dirname(__file__))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21957181)
 The working directory is not set to the directory of the script, but to the current directory where you started the script. 

 Use  __file__  to determine the file location and use that as a starting point to make  filename  an absolute path: 

  import os

here = os.path.dirname(os.path.abspath(__file__))

filename = os.path.join(here, '20140210204804.kml')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37546839)
 To return the absolute path of a python file, use python's  __file__  attribute: 

  import os
path = os.path.abspath(__file__)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3283326)
 the answer is to use: 

   __file__
  

 which returns a relative path.  

  os.path.abspath(__file__) 
  

 can be used to get the full path. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16826913)
 I will try tackling a few variations on this question as well: 

 
 finding the path of the called script   
 finding the path of the currently ecuting script   
 finding the directory of the called script 
 

 (Some of these questions have been asked on SO, but have been closed as duplicates and redirected here.) 

 Caveats of Using  __file__  

 For a module that you have imported: 

  import something
something.__file__ 
  

 will return the  absolute  path of the module.  However, given the folowing script foo.py: 

  #foo.py
print '__file__', __file__
  

 Calling it with 'python foo.py' Will return simply 'foo.py'.  If you add a shebang: 

  #!/usr/bin/python 
#foo.py
print '__file__', __file__
  

  ./foo.py, it will return './foo.py'.  Calling it from a different directory, (eg put foo.py in directory bar), then calling either 

  python bar/foo.py
  

 or adding a shebang and ecuting the file directly: 

  bar/foo.py
  

 will return 'bar/foo.py' (the  relative  path). 

 Finding the directory 

 Now going from there to get the directory,  os.path.dirname(__file__)  can also be tricky.  At least on my system, it returns an empty string if you call it from the same directory as the file.  . 

  # foo.py
import os
print '__file__ is:', __file__
print 'os.path.dirname(__file__) is:', os.path.dirname(__file__)
  

 will output: 

  __file__ is: foo.py
os.path.dirname(__file__) is: 
  

 In other words, it returns an empty string, so this does not seem reliable if you want to use it for the current  file  (as opposed to the  file  of an imported module).  To get around this, you can wrap it in a call to abspath: 

  # foo.py
import os
print 'os.path.abspath(__file__) is:', os.path.abspath(__file__)
print 'os.path.dirname(os.path.abspath(__file__)) is:', os.path.dirname(os.path.abspath(__file__))
  

 which outputs something like: 

  os.path.abspath(__file__) is: /home/user/bar/foo.py
os.path.dirname(os.path.abspath(__file__)) is: /home/user/bar
  

 Note that abspath() does NOT resolve symlinks.  If you want to do this, use realpath() instead.  For ample, making a symlink file_import_testing_link pointing to file_import_testing.py, with the following content: 

  import os
print 'abspath(__file__)',os.path.abspath(__file__)
print 'realpath(__file__)',os.path.realpath(__file__)
  

 ecuting will print absolute paths something like: 

  abspath(__file__) /home/user/file_test_link
realpath(__file__) /home/user/file_test.py
  

 file_import_testing_link -> file_import_testing.py 

 Using inspect 

 @SummerBreeze mentions using the http://docs.python.org/2/library/inspect.html module. 

 This seems to work well, and is quite concise, for imported modules: 

  import os
import inspect
print 'inspect.getfile(os) is:', inspect.getfile(os)
  

 obediently returns the absolute path.  However for finding the path of the currently ecuting script, I did not see a way to use it. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46108110)
 If you don't know where the user will be executing the script from, it is best to compute the absolute path on the user's system using  os  and  __file__ . 

  __file__  is a global variable set on every Python script that returns the relative path to the  *.py  file that contains it. 

  import os
my_absolute_dirpath = os.path.abspath(os.path.dirname(__file__))
  



