Query: How to zip lists in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28395142)
 First,  zip  both  A  and  B  and then  zip  the lists given by the previous  zip , like this 

  result = []
for items in zip(A, B):
    for data in zip(*items):
        result.append(data)
  

 The same can be written succinctly as a List Comprehension, like this 

  >>> [data for items in zip(A, B) for data in zip(*items)]
[(1, 4), (2, 5), (3, 8), (4, 9)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6930645)
 Use  map  to convert the tuples to lists. 

  map(list, zip(listx, listy))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5146593)
 In python 3.0 zip returns a zip object. You can get a list out of it by calling  list(zip(a, b)) . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50237138)
 I don't think  zip  returns a list.  zip  returns a generator. You have got to do  list(zip(a, b))  to get a list of tuples. 

  x = [1, 2, 3]
y = [4, 5, 6]
zipped = zip(x, y)
list(zipped)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6930521)
 You can use a comprehension: 

  listz = [list(i) for i in zip(listx, listy)]
  

 or generator expression: 

  listz = (list(i) for i in zip(listx, listy))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7474788)
 You want to combine the sublists with the plus operator, and iterate over them in a list comprehension: 

  Lmerge = [i1 + i2 for i1, i2 in zip(L1, L2)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14539457)
 Use the built-in zip function: 

  >>> zip([1,3,6],[1,5,9],[1,2,4],['A','B','C'])
[(1, 1, 1, 'A'), (3, 5, 2, 'B'), (6, 9, 4, 'C')]
  

 It works with other iterables too. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31872162)
 https://docs.python.org/2/library/functions.html#zip expects multiple iterables, so if you pass a  single  list of lists as parameter, the sublists are just wrapped into tuples with one element each. 

 You have to use  *  to unpack the list when you pass it to  zip . This way, you effectively pass  two  lists, instead of  one  list of lists: 

  >>> a = [[1,2], [3,4]]
>>> zip(*a)
[(1, 3), (2, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38150584)
 Use  zip()  to pair up the elements of the input lists: 

  lista, listb = zip(*inputlist)
  

 The  *  applies the  elements  in  inputlist  as separate arguments, as if you called  zip()  as  zip([1, 2], [2, 3], [5, 4]) .  zip()  takes the first element of each argument and returns those together, and then the second element, etc. 

 This produces  tuples , not lists, really, but that's easy to remedy: 

  lista, listb = map(list, zip(*inputlist))
  

  

  >>> inputlist = [[1, 2], [2, 3], [5, 4]]
>>> zip(*inputlist)
[(1, 2, 5), (2, 3, 4)]
>>> lista, listb = map(list, zip(*inputlist))
>>> lista
[1, 2, 5]
>>> listb
[2, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/23940967)
 You can use https://docs.python.org/3/library/functions.html#zip and a https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries: 

  >>> lst = [[4, 0, 1], [0, 0, 1], [0, 1, 2], [1, 1, 0], [2, 0, 0]]
>>> [list(x) for x in zip(*lst)]
[[4, 0, 0, 1, 2], [0, 0, 1, 1, 0], [1, 1, 2, 0, 0]]
>>>
  

 Placing  *  before  lst  unpacks the list into arguments for the  zip  function.   

  zip(*lst)
  

  

  zip([4, 0, 1], [0, 0, 1], [0, 1, 2], [1, 1, 0], [2, 0, 0])
  

  zip  then zips these lists together by returning an iterator of tuples where the n-th tuple contains the n-th item from each of the lists.  In this case, it returns:<sup>1</sup> 

  >>> list(zip(*lst))
[(4, 0, 0, 1, 2), (0, 0, 1, 1, 0), (1, 1, 2, 0, 0)]
>>>
  

 Finally, the list comprehension converts these tuples into lists and collects them into a new list. 

 

 <sub><sup>1</sup>You need to call  list()  on  zip(*lst)  to view its items because  zip  returns an https://docs.python.org/3/glossary.html#term-iterator in Python 3.x. 



