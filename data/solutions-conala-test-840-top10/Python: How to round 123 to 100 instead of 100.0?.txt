Query: Python: How to round 123 to 100 instead of 100.0?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2742790)
 you can just throw it in  int : 

  In [1]: int(round(123, -2))
Out[1]: 100
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31095124)
 Because 1.216 is closer to 1.22 than to 1.21, your code is rounding to 1.22, if you had 1.213 it would have rounded to 1.21. So your function is currently not rounding up but rounding to the nearest one. 

 What you can do to always round down at two decimals is  

  int(100*x)/100.0
  

  

  math.floor(100*x)/100.0
  

 to always round down. 

 So you can have: 

 Normal: 

  def __str__(self):
    return'x = %.2f,y = %.2f'%(self.x,self.y)
  

 Always round to zero: 

  def __str__(self):
    return'x = %.2f,y = %.2f'%(int(100*self.x)/100.0,int(100*self.y)/100.0)
  

 Always round down: 

  def __str__(self):
    return'x = %.2f,y = %.2f'%(math.floor(100*self.x)/100.0,math.floor(100*self.y)/100.0)
  

 Always round up: 

  def __str__(self):
    return'x = %.2f,y = %.2f'%(math.ceil(100*self.x)/100.0,math.ceil(100*self.y)/100.0)
  

  

  import math
  

 if you are going to use math.floor or math.ceil. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2742811)
 You could use  int(100.0)  to convert to  100  in python 2.x and in python3.x, its just works 

  Python 3.1.2 (r312:79149, ...
>>>
>>> round(123,-2)
100
>>>
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44220620)
 Simple: because int() works as "floor" , it simply cuts of instead of doing rounding. .  

 You want to use the  round()  function instead.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41206290)
 You can use this: 

  import math
def normal_round(n):
    if n - math.floor(n) < 0.5:
        return math.floor(n)
    return math.ceil(n)
  

 It will round number up or down properly. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2742788)
  int(round(123,-2))
  

 The http://docs.python.org/library/functions.html#int can be used to   convert a string or number to a plain integer  . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33020041)
 For example: 

  from decimal import Decimal, ROUND_HALF_UP

Decimal(1.5).quantize(0, ROUND_HALF_UP)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31587649)
 The change from  round(0.5)==1  to  round(0.5)==0  was intended.
Compare the documentation between round in https://docs.python.org/2/library/functions.html#round and https://docs.python.org/3/library/functions.html#round. It was changed to round always round toward the EVEN value, instead of rounding away from zero (if both values are equally close). 

 If you always wish to round up, instead use: 

  import math
print math.ceil(0.5)
  

 This will give 1.0 no matter version of python. 

 https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues explaining the strangeness of floats and why the rounding error occurs. The difference in the rounding errors between 2.x and 3.x are because of the change in how rounding works in the two versions. 

 Due to how floating point values work, it is impossible to accurately represent many decimal numbers. If you need an exact number you'll need to use a https://docs.python.org/2/library/decimal.html datatype instead.  

 Edit: This change was to conform to the https://en.wikipedia.org/wiki/IEEE_floating_point, aka the IEEE Floating Point standard. This is so that the rounded values will not be biased towards high values, and instead bias towards even numbers. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9810408)
 Scale, round, unscale: 

  round(x / 500.0) * 500.0
  

  Edit : To round up to the next multiple of 500, use the same logic with  math.ceil()  instead of  round() : 

  math.ceil(x / 500.0) * 500.0
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18473727)
 Python 3 rounds according to the IEEE 754 standard, using a http://en.wikipedia.org/wiki/IEEE_floating_point#Rounding_rules approach. 

 If you want to round in a different way then simply implement it by hand: 

  import math
def my_round(n, ndigits):
    part = n * 10 ** ndigits
    delta = part - int(part)
    # always round "away from 0"
    if delta >= 0.5 or -0.5 < delta <= 0:
        part = math.ceil(part)
    else:
        part = math.floor(part)
    return part / (10 ** ndigits)
  

 Example usage: 

  In [12]: my_round(0.3125, 3)
Out[12]: 0.313
  

 

  Note:  in python2 rounding is always away from zero, while in python3 it rounds to even. (see, for example, the difference in the documentation for the  round  function between 2.7 and 3.3). 



