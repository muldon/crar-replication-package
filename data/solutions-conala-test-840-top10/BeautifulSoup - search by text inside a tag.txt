Query: BeautifulSoup - search by text inside a tag
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49949449)
 in one line using lambda 

  soup.find(lambda tag:tag.name=="a" and "Edit" in tag.text)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27934403)
 Use .text to get the text from the tag. 

  oname = soup.find("title")
oname.text
  

 Or just  soup.title.text  

  In [4]: from bs4 import BeautifulSoup    
In [5]: import  requests
In [6]: r = requests.get("http://stackoverflow.com/questions/27934387/how-to-retrieve-information-inside-a-tag-with-python/27934403#27934387")    
In [7]: BeautifulSoup(r.content).title.text
Out[7]: u'html - How to Retrieve information inside a tag with python - Stack Overflow'
  

 To open a file and use the text as the name simple use it as you would any other string: 

  with open(oname.text, 'w') as f
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53988304)
 You can try to use below to find  span  node by complete text content  "HeyJoe" : 

  tag = [span for span in soup.findAll('span') if span.text == "HeyJoe"][0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31960073)
 You can pass a http://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function that return  True  if  a   text  contains "Edit" to  .  

  In [51]: def Edit_in_text(tag):
   ....:     return tag.name == 'a' and 'Edit' in tag.text
   ....: 

In [52]: soup.(Edit_in_text, href="/customer-menu/1/accounts/1/update")
Out[52]: 
/customer-menu/1/accounts/1/update
  

 

 EDIT: 

 You can use the http://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text method instead of the  text  in your function which gives the same result: 

  def Edit_in_text(tag):
    return tag.name == 'a' and 'Edit' in tag.get_text()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7231860)
  s = BeautifulSoup(...)
s.find(text='Lets go somewhere')
  

 You can also use regex. 

 https://stackoverflow.com/questions/866000/using-beautifulsoup-to-find-a-html-tag-that-contains-certain-text 

  Edit: While the find method prints a string if you use it on the command line, that's actually just a representation of the object it returns; you can access the parent attribute on it to access its BeautifulSoup tag object.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40150709)
 You can search within the   tag for text contents, and state that you don't want to recurse into child tags: 

  >>> print soup.find('p').find(text=True, recursive=False)

Private Un-aided
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27632043)
 Use http://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all with http://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-text-argument to find all text nodes and http://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-recursive-argument to search only among direct children of the parent  p  tag: 

  from bs4 import BeautifulSoup

data = """
 
    <a name="533660373"> 
     Title: Point of Sale Threats Proliferate  
     Severity: Normal Severity  
     Published: Thursday, December 04, 2014 20:27  
    Several new Point of Sale malware families have emerged recently, to include LusyPOS,.. 
     Analysis: Emboldened by past success and media attention, threat actors  .. 
     
 
"""

soup = BeautifulSoup(data)
print ''.join(text.strip() for text in soup.p.find_all(text=True, recursive=False))
  

  

  Several new Point of Sale malware families have emerged recently, to include LusyPOS,..
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50124934)
 You can use  enumerate  with  find_all : 

  result = [a.text for i, a in enumerate(soup.find_all("td", {"class": "QL"}), start=1) if i == 19][0]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48200476)
 You can define a function to return the value for the key you enter: 

  def get_txt(soup, key):
    key_tag = soup.find('span', text=key).parent
    return key_tag.find_all('span')[1].text

color = get_txt(soup, 'Color')
print('Color: ' + color)
features = get_txt(soup, 'Features')
print('Features: ' + features)
  

 Output: 

  Color: Slate, mykonos
Features: Camera lens cutout, hard shell, rubberized, port cut-outs, raised edges
  

 I hope this is what you are looking for. 

  Explanation:  

  soup.find('span', text=key)  returns the  <span>  tag whose  text=key .  

  .parent  returns the parent tag of the current  <span>  tag.   

 Example:  

 When  key='Color' ,  soup.find('span', text=key).parent  will return 

  <div class="_JDu">
    <span class="_IDu">Color</span>
    <span class="_KDu">Slate, mykonos</span>
</div>
  

 Now we've stored this in  key_tag . Only thing left is getting the text of second  <span> , which is what the line  key_tag.find_all('span')[1].text  does. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/20725798)
 Unfortunately, you cannot match tags with both text and nested tags, based on the contained text alone. 

 You'd have to loop over all  <dt>   without  text: 

  for dt in soup.find_all('dt', text=False):
    if 'Land area' in dt.text:
        print dt.contents[0]
  

 This sounds counter-intuitive, but the  .string  attribute for such tags is empty, and that is what BeautifulSoup is matching against.  .text  contains all strings in all nested tags combined, and that is not matched against. 

 You could also use a http://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function to do the search: 

  soup.find_all(lambda t: t.name == 'dt' and 'Land area' in t.text)
  

 which essentially does the same search with the filter encapsulated in a  lambda  function. 



