Query: Flask - How to make an app externally visible through a router?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30241446)
 The basic setup will be to create a rule which will forward request to port 80 and/or port 443 to a destined host in your local network. 

 Example create NAT(address translation) and port forwarding rule to forward inbound HTTP/S requests to your local network host running your python application. 

 For example: 

  app.run(host= '192.168.0.58', port=9000, debug=False)
  

 Your NAT rule should target 192.168.0.58 on port 9000. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36598437)
 change it to app.run(host= '0.0.0.0', port="33") to run on your machines IP address. 

 Documented on the Flask site under "Externally Visible Server" on the Quickstart page:
http://flask.pocoo.org/docs/0.10/quickstart/#a-minimal-application 

 Add port forwarding to port 33 in your router
Port forwarding explained here
http://www.howtogeek.com/66214/how-to-forward-ports-on-your-router/ 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18793163)
 You should be able to access it by going to:  0.0.0.0:port . 

 Someone on your network can access it by going to  your-local-ip:port . 

 Depending on your system, there is a way of finding your local IP address, but it should look something like  192.168.X.X . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49336055)
  app.run(host='0.0.0.0',port=5000)
  

 if you run your app in this way then your server will be visible externally.
Steps by Setp: 

 
  Run your app by using the following command 

  app.run(host='0.0.0.0',port=5000)   
  Go to the window cmd . Type  ipconfig  and get the get the IPV4 adress suppose your IPV4 address is 192.168.X.X  
  Go to the mobile browser and type the    192.168.X.X:5000   
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7027113)
 While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on http://flask.pocoo.org/docs/dev/deploying/ for correct solutions. 

 

 Add a parameter to your  app.run() .  By default it runs on localhost, change it to  app.run(host= '0.0.0.0')  to run on your machines IP address. 

 Documented on the Flask site under "Externally Visible Server" on the http://flask.pocoo.org/docs/quickstart/#a-minimal-application: 

 
   Externally Visible Server 
  
   If you run the server you will notice that the server is only
  available from your own computer, not from any other in the network.
  This is the default because in debugging mode a user of the
  application can execute arbitrary Python code on your computer. If you
  have debug disabled or trust the users on your network, you can make
  the server publicly available. 
  
   Just change the call of the  run()  method to look like this: 
  
    app.run(host='0.0.0.0')  
  
   This tells your operating system to listen on a public IP. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45860843)
 For externally visible server, where you don't use apache or other web server you just type  

  flask run --host=0.0.0.0 --port=80
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41264536)
 Your flask app has a  config  property. Also, this code will fail with a NameError. You want something like this: 

  import sys
from flask import Flask

app = Flask(__name__)


@app.route('/')
def home():
    return 'You wanted {!r} directory'.format(app.config.get('some_setting'))

if __name__ == '__main__':
    app.config['some_setting'] = sys.argv[1]
    app.run()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36598009)
 Do you have DHCP activated on your router?
If yes do you see your host as 192.168.1.11 in there? 

 You have to use '0.0.0.0' on host, that tells Flask to listen on all addresses. 
Try specifying the port with quotes as  app.run(host="0.0.0.0", port="33")  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29101986)
 There are many ways how you could run flask web app on virtual machine (managed by vagrant). I think that following approach is quite flexible, because you don't have to deal with different ip address. Also it looks like you are developing on a host machine. 

 There are 2 things you need to configure. In  VagranFile , you need configure port forwarding. 

  Vagrant.configure(2) do |config|
  # use default box
  config.vm.box = "ubuntu/trusty64"

  # forward port guest machine:5000 -> host machine:5000
  # port 5000 is default for flask web app
  config.vm.network "forwarded_port", guest: 5000, host: 5000
end
  

 Then, on virtual machine, you should start flask app on ip  0.0.0.0  which means that web app will serve for any IP address. More on this topic -> http://flask.pocoo.org/docs/0.10/quickstart/ section  Externally Visible Server  

  if __name__ == "__main__":
    app.run("0.0.0.0", debug=True)
  

 That's it. You should be able to connect to  http://localhost:5000  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/37662122)
 run flask using  

  app.run(host="0.0.0.0:PORT#")
  

 look for your IPv4 Address using  ifconfig  in your command prompt, and in your browser you can access your app using your ipaddress:port# 

 You might have to configure your router (port forwarding) to make it publicly available, otherwise you can
download/use https://ngrok.com/  ---->  This will expose your localhost behind a NaT or Firewall to the internet. 

   

  ngrok http localhost:5000
  

 this will provide you a RANDOMsubdomain.ngrok.io  and you can test your app from pretty much anywhere 



