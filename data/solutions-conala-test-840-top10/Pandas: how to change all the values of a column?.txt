Query: Pandas: how to change all the values of a column?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43075136)
   

  df
Out[]: 
   x  y
A  1  1
B  2  2
C  3  3
  

 You can use iloc function and pass array to it as follows:  

  df['y'].iloc[0:3]=[56, 45, 34]

df
Out[]: 
   x   y
A  1  56
B  2  45
C  3  34
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25651845)
 You can groupby the Label column, apply the list constructor. Here is an minimal example.  

  Label = [1, 1, 1, -1, -1, -1]
c = [91, 65, 93, 54, 48, 15]
df = pd.DataFrame({'Label': Label, 'c': c})
df['c'].groupby(df['Label']).apply(list)[1]  # Change 1 to -1 if you want the -1 group
  

 If you only want unique entries, then you can do  

  df['c'].groupby(df['Label']).unique()[1]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34962592)
 You don't need a function at all. You can work on a whole column directly. 

 Example data: 

  >>> df = pd.DataFrame({'a': [100, 1000], 'b': [200, 2000], 'c': [300, 3000]})
>>> df

      a     b     c
0   100   200   300
1  1000  2000  3000
  

 Half all the values in column  a : 

  >>> df.a = df.a / 2
>>> df

     a     b     c
0   50   200   300
1  500  2000  3000
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43074875)
  

  df.loc[:, 'Y'] = a
  

 This should set (all index, column 'Y') of df to Array a, without the http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy message. This is also the recommended way according to pandas-doc. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48204579)
 You can use  lambda  with  apply : 

  mydata['xxx'] = mydata['xxx'].apply(lambda x: 'n' if x == 0 else 'y')
  

 Or if you have values other than  0  and  1 : 

  mydata['xxx'] = mydata['xxx'].apply(lambda x: 'n' if x == 0 else 'y' if x == 1 else x)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11921678)
  from pandas import *
df = DataFrame([[0, 1, 1], [1, 1, 0], [1, 0, 1],], columns=['a','b','c'])

foo = []
for i in df.index:
    foo.append( df.columns[df.ix[i] == 1])
DataFrame(foo, index = df.index)
  

 Which returns: 

     0  1
0  b  c
1  a  b
2  a  c
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50664952)
 More general solution should be change condition if in  G  or  H  columns is  X , then merge together and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.shift.html by condition: 

  d = pd.DataFrame({
        'J' : [10,'B','C','C',50, 60],
        'I' : ['B',20,30,40,'C', 'D'],
        'H' : ['X','A','C','B','X', 'Y'],         
        'G' : ['Y', 'B', 'A','B','X', 'X'],                                 
        }, columns=list('GHIJ'))
print (d)
   G  H   I   J
0  Y  X   B  10
1  B  A  20   B
2  A  C  30   C
3  B  B  40   C
4  X  X   C  50
5  X  Y   D  60
  

 

  m = d[['G','H']].eq('X').any(axis=1)
print (m)

0     True
1    False
2    False
3    False
4     True
5     True
dtype: bool

d['H'] = d['G'] + d['H'] 
d[m] = d[m].shift(-1, axis=1)
print (d)
    G   H   I    J
0  YX   B  10  NaN
1   B  BA  20    B
2   A  AC  30    C
3   B  BB  40    C
4  XX   C  50  NaN
5  XY   D  60  NaN 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34962199)
 Given a sample dataframe  df  as: 

  a,b
1,2
2,3
3,4
4,5
  

  

  df['a'] = df['a'].apply(lambda x: x + 1)
  

 that returns: 

     a  b
0  2  2
1  3  3
2  4  4
3  5  5
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11979845)
 You can also summon some deeper pandas-fu and do: 

  In [28]: df.apply(lambda x: x.astype(object).replace(1, x.name))
Out[28]: 
            a  b  c
2012-06-12  0  b  c
2012-06-13  a  b  0
2012-06-14  a  0  c
2012-06-15  a  0  c
2012-06-16  a  b  0
2012-06-17  a  0  c
  



