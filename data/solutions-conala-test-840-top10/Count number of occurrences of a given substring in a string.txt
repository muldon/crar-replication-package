Query: Count number of occurrences of a given substring in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47863708)
 For overlapping count we can use use: 

  def count_substring(string, sub_string):
    count=0
    beg=0
    while(string.find(sub_string,beg)!=-1) :
        count=count+1
        beg=string.find(sub_string,beg)
        beg=beg+1
    return count
  

 For non-overlapping case we can use count() function: 

  string.count(sub_string)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31371470)
  

  def olpcount(string,pattern,case_sensitive=True):
    if case_sensitive != True:
        string  = string.lower()
        pattern = pattern.lower()
    l = len(pattern)
    ct = 0
    for c in range(0,len(string)):
        if string[c:c+l] == pattern:
            ct += 1
    return ct

test = 'my maaather lies over the oceaaan'
print test
print olpcount(test,'a')
print olpcount(test,'aa')
print olpcount(test,'aaa')
  

  Results:  

  my maaather lies over the oceaaan
6
4
2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53970928)
 Scenario 1: Occurrence of a word in a sentence.
eg:  str1 = "This is an example and is easy" . The occurrence of the word "is". lets  str2 = "is"  

  count = str1.count(str2)
  

 Scenario 2 : Occurrence of pattern in a sentence. 

  string = "ABCDCDC"
substring = "CDC"

def count_substring(string,sub_string):
len1 = len(string)
len2 = len(sub_string)
j =0
counter = 0
while(j < len1):
    if(string[j] == sub_string[0]):
        if(string[j:j+len2] == sub_string):
            counter += 1
    j += 1

return counter
  

  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8900059)
  string.count(substring) , like in: 

  >>> "abcdabcva".count("ab")
2
  

  update : 
as pointed up in the comments, this is the way to do it for  non overlapping  occurrences. If you need to count overlapping ocurrences, you'd better check the answers at: "https://stackoverflow.com/questions/5616822/python-regex-find-all-overlapping-matches", or just check my other answer bellow. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45821688)
 If you want to find out the count of substring inside any string; please use below code.
The code is easy to understand that's why i skipped the comments.  

  string=raw_input()
sub_string=raw_input()
start=0
answer=0
length=len(string)
index=string.find(sub_string,start,length)
while index<>-1:
    start=index+1
    answer=answer+1
    index=string.find(sub_string,start,length)
print answer
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48889434)
 The best way to find overlapping sub-string in a given string is to use the python regular expression it will find all the overlapping matching using the regular expression library. Here is how to do it left is the substring and in right you will provide the string to match 

  print len(re.findall('(?=aa)','caaaab'))
3
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1155647)
 
   https://docs.python.org/2/library/stdtypes.html#str.count 
  
   Return the number of non-overlapping occurrences of substring  sub  in the range  [start, end] . Optional arguments  start  and  end  are interpreted as in slice notation. 
 

  >>> sentence = 'Mary had a little lamb'
>>> sentence.count('a')
4
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19848403)
 For this job,  str.find  isn't very efficient.  Instead, http://docs.python.org/2.7/library/stdtypes.html#str.count should be what you use: 

  >>> s = 'xyzbobxyzbobxyzbob'
>>> s.count('bob')
3
>>> s.count('xy')
3
>>> s.count('bobxyz')
2
>>>
  

 

 Or, if you want to get overlapping occurrences, you can use Regex: 

  >>> from re import findall
>>> s = 'bobobob'
>>> len(findall('(?=bob)', s))
3
>>> s = "bobob"
>>> len(findall('(?=bob)', s))
2
>>>
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8900078)
 Depending what you really mean, I propose the following solutions: 

 1)You mean a list of space separated sub-strings and want to know what is the sub-string position number among all sub-strings: 

  s = 'sub1 sub2 sub3'
s.split().index('sub2')
>>> 1
  

 2)You mean the char-position of the sub-string in the string: 

  s.find('sub2')
>>> 5
  

 3)You mean the (non-overlapping)  counts  of appearance of a su-bstring: 

  s.count('sub2')
>>> 1
s.count('sub')
>>> 3
  



