Query: remove escape character from string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39041476)
 Assuming you want to remove  \t  and  \n  type characters (with those representing  tab  and  newline  in this case and remove the meaning of  \  in the string in general) you can do: 

  >>> a = 'ddd\ttt\nnn'
>>> print a
ddd tt
nn
>>> repr(a)[1:-1].replace('\\','')
'dddtttnnn'
>>> print repr(a)[1:-1].replace('\\','')
dddtttnnn
  

 If it is a raw string (i.e., the  \  is not interpolated to a single character), you do not need the  repr : 

  >>> a = r'ddd\ttt\nnn'
>>> a.replace('\\','')
'dddtttnnn'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53722350)
 for me the following worked  

  mystring.encode('ascii', 'ignore').decode('unicode_escape')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14946355)
 The problem is that  \xXX  is just a representation of a control character, not the character itself. Therefore, you can't literally match  \x  unless you're working with the  repr  of the string. 

 You can remove nonprintable characters using a character class: 

  re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\xff]', '', text)
  

 Example: 

  >>> re.sub(r'[\x00-\x1f\x7f-\xff]', '', ''.join(map(chr, range(256))))
' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28207074)
 You're trying to replace a backslash, but since Python uses backslashes as escape characters, you actually have to escape the backslash itself. 

  remove = str.replace("\\", " ")
  

  

  In [1]: r"\workspace\file.txt".replace("\\", " ")
Out[1]: ' workspace file.txt'
  

 Note the leading space. You may want to call  str.strip  on the end result. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15214249)
 $ is a special character in regular expressions that translates to 'end of the string' 

 you need to escape it if you want to use it literally 

 try this: 

  import re
input = "$5"
if "$" in input:
    input = re.sub(re.compile('\$'), '', input)
    print input
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5388763)
 You need to doubly escape the back-reference: 

  re.sub('(.+) \(\\1\)', '\\1', 'the (the)')
--> the
  

 Or use the http://docs.python.org/release/2.5.2/ref/strings.html: 

 
   When an "r" or "R" prefix is present, a character following a backslash is included in the string without change, and all backslashes are left in the string. 
 

  re.sub(r'(.+) \(\1\)', r'\1', 'the (the)')
--> the
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36655617)
 Single backslashes should be used in raw string literals to escape special regex metacharacters and shorthand character classes. 

 Use 

  import re
line = '[123:456]othertext'
print re.sub(r'^\[\d*:\d*\]','',line)
#               ^        ^
# => othertext
  

 See http://ideone.com/9MPpvH 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/904753)
 Without a RE (which I assume is what you want): 

  def remafterellipsis(text):
  where_ellipsis = text.find('...')
  if where_ellipsis == -1:
    return text
  return text[:where_ellipsis + 3]
  

  

  import re

def remwithre(text, there=re.compile(re.escape('...')+'.*')):
  return there.sub('', text)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40453221)
 https://stackoverflow.com/a/22601369/98187 is what I searched for to find this: 

  >>> a = r'\a'
>>> a.encode().decode('unicode-escape')
'\x07'
>>> '\a'
'\x07'
  

 That's the way to do it with unicode.  Since you're in Python 2 and may not be using unicode, you may actually one: 

  >>> a.decode('string-escape')
'\x07'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2179518)
 The result  '\\&'  is only displayed - actually the string is  \& : 

  >>> str = '&'
>>> new_str = str.replace('&', '\&')
>>> new_str
'\\&'
>>> print new_str
\&
  

 Try it in a shell. 



