Query: load csv into 2D matrix with numpy for plotting
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4315802)
 I think using  dtype  where there is a name row is confusing the routine.   

  >>> r = np.genfromtxt(fname, delimiter=',', names=True)
>>> r
array([[  6.11882430e+02,   9.08956010e+03,   5.13300000e+03,
          8.64075140e+02,   1.71537476e+03,   7.65227770e+02,
          1.29111196e+12],
       [  6.11882430e+02,   9.08956010e+03,   5.13300000e+03,
          8.64075140e+02,   1.71537476e+03,   7.65227770e+02,
          1.29111311e+12],
       [  6.11882430e+02,   9.08956010e+03,   5.13300000e+03,
          8.64075140e+02,   1.71537476e+03,   7.65227770e+02,
          1.29112065e+12]])
>>> r[:,0]    # Slice 0'th column
array([ 611.88243,  611.88243,  611.88243])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4315914)
 Pure numpy
 

  numpy.loadtxt(open("test.csv", "rb"), delimiter=",", skiprows=1)
  

 
Check out the http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html#numpy.loadtxt documentation.  

 You can also use python's csv module:
 

  import csv
import numpy
reader = csv.reader(open("test.csv", "rb"), delimiter=",")
x = list(reader)
result = numpy.array(x).astype("float")
  

 
You will have to convert it to your favorite numeric type. I guess you can write the whole thing in one line: 

 
result = numpy.array(list(csv.reader(open("test.csv", "rb"), delimiter=","))).astype("float")
 

  Added Hint:  

 You could also use  pandas.io.parsers.read_csv  and get the associated  numpy  array which can be faster. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35545161)
 You can read a CSV file with headers into a https://docs.scipy.org/doc/numpy/user/basics.rec.html with https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html. For example: 

  import numpy as np

csv_fname = 'file.csv'
with open(csv_fname, 'w') as fp:
    fp.write("""\
"A","B","C","D","E","F","timestamp"
611.88243,9089.5601,5133.0,864.07514,1715.37476,765.22777,1.291111964948E12
611.88243,9089.5601,5133.0,864.07514,1715.37476,765.22777,1.291113113366E12
611.88243,9089.5601,5133.0,864.07514,1715.37476,765.22777,1.291120650486E12
""")

# Read the CSV file into a Numpy record array
r = np.genfromtxt(csv_fname, delimiter=',', names=True, case_sensitive=True)
print(repr(r))
  

  

  array([(611.88243, 9089.5601, 5133., 864.07514, 1715.37476, 765.22777, 1.29111196e+12),
       (611.88243, 9089.5601, 5133., 864.07514, 1715.37476, 765.22777, 1.29111311e+12),
       (611.88243, 9089.5601, 5133., 864.07514, 1715.37476, 765.22777, 1.29112065e+12)],
      dtype=[('A', '<f8'), ('B', '<f8'), ('C', '<f8'), ('D', '<f8'), ('E', '<f8'), ('F', '<f8'), ('timestamp', '<f8')])
  

 You can access a named column like this  r['E'] : 

  array([1715.37476, 1715.37476, 1715.37476])
  

 

 Note: this answer previously used http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html to read the data into a http://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html. While there was nothing wrong with that method, structured arrays are generally better than record arrays for speed and compatibility. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20478241)
 If the data is a CSV file that looks like: 

 my_graph.csv</h3>

  My graph data
0,1,1,0,0
1,0,0,1,0
1,0,0,1,1
0,1,1,0,1
0,0,1,1,0
  

 It's simple to load and plot the resulting graph: 

  import numpy as np
import networkx as nx
import pylab as plt

A = np.genfromtxt("my_graph.csv",delimiter=',',skiprows=1)
G = nx.Graph(A)
nx.draw(G)
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52272738)
 Use  np.array , not  np.matrix  

 I can't emphasize this enough.  np.matrix  exists only for legacy reasons. See https://stackoverflow.com/a/48727191/9209546 for an explanation of the difference.  np.matrix  requires 2 dimensions, while  np.array  permits a single dimension when indexing. This seems to be the source of your error. 

 Here's a minimal example exhibiting the behaviour you are seeing: 

  A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.matrix(A)

print(A[:, 0].shape)  # (2,)
print(B[:, 0].shape)  # (2, 1)
  

 Therefore, define your resultant arrays as  np.array  objects: 

  m = 20480
n = len(file_path)
shape = (m, n)

TIME = np.zeros(shape)
CH1 = np.zeros(shape)
CH2 = np.zeros(shape)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47778640)
 Using pandas and numpy, (Edit for n x m matrix): 

  import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

n = 2
m = 2
df = pd.read_csv('matrix.txt')
id = df.id.values
id = np.reshape(id, (n, m))
R = df.R.values
R = np.reshape(R/255, (n, m))
G = df.R.values
G = np.reshape(G/255, (n, m))
B = df.B.values
B = np.reshape(B/255, (n, m))
img = []

for i in range(n):
    img.append([])
    for j in range(m):
        img[i].append((R[i][j], G[i][j], B[i][j]))

plt.imshow(img)
plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43952737)
 Use https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/scipy.io.loadmat.html. 

 The docs should be sufficient to get you going, but make sure to read the notes. 

 There is also the https://docs.scipy.org/doc/scipy-0.19.0/reference/tutorial/io.html with some examples. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/39401259)
 Here's how to do it from a csv: 

  import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata

# Load data from CSV
dat = np.genfromtxt('dat.xyz', delimiter=' ',skip_header=0)
X_dat = dat[:,0]
Y_dat = dat[:,1]
Z_dat = dat[:,2]

# Convert from pandas dataframes to numpy arrays
X, Y, Z, = np.array([]), np.array([]), np.array([])
for i in range(len(X_dat)):
        X = np.append(X, X_dat[i])
        Y = np.append(Y, Y_dat[i])
        Z = np.append(Z, Z_dat[i])

# create x-y points to be used in heatmap
xi = np.linspace(X.min(), X.max(), 1000)
yi = np.linspace(Y.min(), Y.max(), 1000)

# Z is a matrix of x-y values
zi = griddata((X, Y), Z, (xi[None,:], yi[:,None]), method='cubic')

# I control the range of my colorbar by removing data 
# outside of my range of interest
zmin = 3
zmax = 12
zi[(zi<zmin) | (zi>zmax)] = None

# Create the contour plot
CS = plt.contourf(xi, yi, zi, 15, cmap=plt.cm.rainbow,
                  vmax=zmax, vmin=zmin)
plt.colorbar()  
plt.show()
  

 where  dat.xyz  is in the form 

  x1 y1 z1
x2 y2 z2
...
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52588621)
 If you work with numpy arrays you should consider to use  numpy.savetxt()  function instead https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.savetxt.html. For example: 

  import numpy as np

a = np.random.randint(0, 10, (10, 10), dtype=int)
a[1:5, 1:8] = 0
np.savetxt('1.txt', a, fmt='%d', delimiter=',')
  

  

  0,8,5,8,0,7,5,8,0,9
0,0,0,0,0,0,0,0,3,4
5,0,0,0,0,0,0,0,7,3
9,0,0,0,0,0,0,0,7,5
7,0,0,0,0,0,0,0,6,9
9,9,9,9,2,7,5,0,0,7
4,6,9,0,7,5,2,4,7,5
2,5,1,9,4,9,3,5,3,7
3,3,6,8,5,7,5,8,5,5
9,4,1,2,0,9,2,2,8,2
  

 You can load the data with  numpy.loadtxt()  https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html: 

  a = np.loadtxt('1.txt', delimiter=',', dtype=int)
  

 Then  a  is: 

  array([[0, 8, 5, 8, 0, 7, 5, 8, 0, 9],
       [0, 0, 0, 0, 0, 0, 0, 0, 3, 4],
       [5, 0, 0, 0, 0, 0, 0, 0, 7, 3],
       [9, 0, 0, 0, 0, 0, 0, 0, 7, 5],
       [7, 0, 0, 0, 0, 0, 0, 0, 6, 9],
       [9, 9, 9, 9, 2, 7, 5, 0, 0, 7],
       [4, 6, 9, 0, 7, 5, 2, 4, 7, 5],
       [2, 5, 1, 9, 4, 9, 3, 5, 3, 7],
       [3, 3, 6, 8, 5, 7, 5, 8, 5, 5],
       [9, 4, 1, 2, 0, 9, 2, 2, 8, 2]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24144773)
 Because your data is homogeneous--all the elements are floating point values--you can create a view of the data returned by  genfromtxt  that is a 2D array.  For example, 

  In [42]: r = np.genfromtxt("test.csv", delimiter=',', names=True)
  

 Create a numpy array that is a "view" of  r .  This is a regular numpy array, but it is created using the data in  r : 

  In [43]: a = r.view(np.float64).reshape(len(r), -1)

In [44]: a.shape
Out[44]: (3, 7)

In [45]: a[:, 0]
Out[45]: array([ 611.88243,  611.88243,  611.88243])

In [46]: r['A']
Out[46]: array([ 611.88243,  611.88243,  611.88243])
  

  r  and  a  refer to the same block of memory: 

  In [47]: a[0, 0] = -1

In [48]: r['A']
Out[48]: array([  -1.     ,  611.88243,  611.88243])
  



