Query: Python Regex for hyphenated words
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3409143)
 Here my traditional "why to use regexp language when you can use Python" alternative: 

  import string
s = "-this is. A - sentence;one-word what's"
s = filter(None,[word.strip(string.punctuation)
                 for word in s.replace(';','; ').split()
                 ])
print s
""" Output:
['this', 'is', 'A', 'sentence', 'one-word', "what's"]
"""
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3406795)
 You could use  "[^\w-]+"  instead. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3406964)
 If you don't need the leading empty string, you could use the pattern  \w(?:[-\w]*\w)?  for  matching : 

  >>> import re
>>> s = '-this is. A - sentence;one-word'
>>> rx = re.compile(r'\w(?:[-\w]*\w)?')
>>> rx.findall(s)
['this', 'is', 'A', 'sentence', 'one-word']
  

 Note that it won't match words with apostrophes like  won't . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45767490)
 Considering using  shlex : 

  import shlex
test_string = '"abc" + "def" + "-xyz - rst"'
# Parse the string into space-separated elements treating quotes as the shell does
# lone + and - signs will be their own element
arr = shlex.split(test_string)
# remove any element that is either '+' or '-'
final_arr = [x for x in arr if x not in ['+', '-']]
  

  

  >>> print(arr)
['abc', '+', 'def', '+', '-xyz - rst']
>>> print(final_arr)
['abc', 'def', '-xyz - rst']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52714620)
 You can simply replace any occurrences of  '-\n'  with  '-'  instead: 

  result = text_string.replace('-\n', '-')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30396250)
 I propose this regex: 

  find_words = re.compile(r':<=[^\w./-])|<=^))[A-Za-z]+:-[A-Za-z]+)*=\W|$)').findall
  

 There are 3 parts from your initial regex that I changed: 

 Middle part: 

  [A-Za-z]+:-[A-Za-z]+)*
  

 This allows hyphenated words. 

  

  =\W|$)
  

 This is a bit similar to  !\S)  except that it allows for characters that are not spaces like punctuations as well. So what happens is, this will allow a match if, after the word matched, the line ends, or there is a non-word character, in other words, there are no letters or numbers or underscores (if you don't want  word_  to match  word , then you will have to change  \W  to  [a-zA-Z0-9] ). 

  

  :<=[^\w./-])|<=^))
  

 It is composed of two parts itself which matches either  <=[^\w./-])  or  <=^) . The second one allows a match if the line begins before the word to be matched. We cannot use  <=[^\w./-]|^)  because python's lookbehind from  re  cannot be of variable width (with  [^\w./-]  having a length of 1 and  ^  a length of 0). 

  <=[^\w./-])  allows a match if, before the word, there are no word characters, periods, forward slashes or hyphens. 

 When broken down, the small parts are rather straightforward I think, but if there's anything you want some more elaboration, I can give more details. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52714512)
 If the string is composed of just that, then a pure regex solution is to use  re.sub , capture the first word and the second word in a group, then echo those two groups back (without the dash and newline): 

  result=re.sub("(?i)([a-z]+)-\n([a-z]+)", r'\1\2', text_string)
  

 Otherwise, if there is other stuff in the string, iterate over each match and join the groups: 

  text_string = "wordone-\nwordtwo wordthree-\nwordfour"
result=re.findall("(?i)([a-z]+)-\n([a-z]+)", text_string)
for match in result:
    print(''.join(match))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8383339)
  

  re.findall(r'\w+(?:-\w+)+',text)
  

 Here we consider a hyphenated word to be: 

 
 a number of word chars 
 followed by any number of: 
 
 a single hyphen 
 followed by word chars 
  
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52348189)
 You can use a really simple pattern: 

  \b-\b
  

 
  \b  Word boundary. 
  -  Hyphen. 
  \b  Word boundary. 
 

 Regex demo https://regex101.com/r/FQB3Ub/1. 

 

 Python demo: 

  import re

text = "one-hundered-and-three- some text foo-bar some--text"
print(re.sub(r'\b-\b', ' ', text))
  

  

  one hundered and three- some text foo bar some--text
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/29516180)
 You can search using this regex: 

  \b(\w+)-\r?\n(\w+)\b
  

 and replace by: 

  \1\2\n
  

 https://regex101.com/r/eB1tE8/1 

  Code:  

  import re
p = re.compile(ur'\b(\w+)-\r?\n(\w+)\b', re.UNICODE)

result = re.sub(p, u"\1\2\n", input)
  



