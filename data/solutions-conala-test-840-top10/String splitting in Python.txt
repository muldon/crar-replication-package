Query: String splitting in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22090577)
  >>> from ast import literal_eval
>>> obj = '{"alert", "Sorry, you are not allowed to do that now, try later", "success", "Welcome, user"}'
>>> literal_eval(obj[1:-1])
('alert', 'Sorry, you are not allowed to do that now, try later', 'success', 'Welcome, user')
  

 http://hg.python.org/cpython/rev/90bf0631bfb8/ you can simply use  literal_eval(obj) . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54494515)
 If you want to do it in pure python: 

  names = "John, Paul; Sally/Frank"
delims = [",", ";", "/"]

for x in delims[1:]:
  names = names.replace(x, delims[0])
names.split(",")
  

 But @blhsing's answer is good and  re  is in the stdlib so I don't see why you wouldn't use that. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43214726)
 This should output the desired list: 

  >>> test = re.compile('\S+')
>>> test.findall('this is a test 200/2002')
['this', 'is', 'a', 'test', '200/2002']
  

 https://docs.python.org/2/library/re.html is anything but a whitespace (space, tab, newline, ...). 

 From  str.split()  https://docs.python.org/2/library/stdtypes.html#str.split : 

 
   If sep is not specified or is None, a different splitting algorithm is
  applied: runs of consecutive whitespace are regarded as a single
  separator, and the result will contain no empty strings at the start
  or end if the string has leading or trailing whitespace. Consequently,
  splitting an empty string or a string consisting of just whitespace
  with a None separator returns []. 
 

  findall()  with the above regex should have the same behaviour : 

  >>> test.findall(" a\nb\tc   d ")
['a', 'b', 'c', 'd']
>>> " a\nb\tc   d ".split()
['a', 'b', 'c', 'd']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4586073)
 Not directly splitting strings as such, but the  re  module has http://docs.python.org/2/library/re.html#re.finditer (and corresponding  finditer()  method on any compiled regular expression). 

 @Zero asked for an example: 

  >>> import re
>>> s = "The quick    brown\nfox"
>>> for m in re.finditer('\S+', s):
...     print(m.span(), m.group(0))
... 
(0, 3) The
(4, 9) quick
(13, 18) brown
(19, 22) fox
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11790739)
 Here is one that works for any iterable 

  >>> from itertools import tee, izip, islice
>>> chunksize = 2
>>> s = 'abcdefghijklmnopqrstuvwxyz'
>>> t = tee(s, chunksize)
>>> for i, j in enumerate(t):
...  next(islice(j, i, i), None)
...
>>> ["".join(k) for k in izip(*t)]
['ab', 'bc', 'cd', 'de', 'ef', 'fg', 'gh', 'hi', 'ij', 'jk', 'kl', 'lm', 'mn', 'no', 'op', 'pq', 'qr', 'rs', 'st', 'tu', 'uv', 'vw', 'wx', 'xy', 'yz']
  

 If  s  is always a  str , this is more straight forward 

  >>> [s[i: i + chunksize] for i in range(len(s) + 1 - chunksize)]
['ab', 'bc', 'cd', 'de', 'ef', 'fg', 'gh', 'hi', 'ij', 'jk', 'kl', 'lm', 'mn', 'no', 'op', 'pq', 'qr', 'rs', 'st', 'tu', 'uv', 'vw', 'wx', 'xy', 'yz']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2492429)
 Just this should work: 

  a.split()
  

 Example: 

  >>> 'a      b'.split(' ')
['a', '', '', '', '', '', 'b']
>>> 'a      b'.split()
['a', 'b']
  

 From the http://docs.python.org/library/stdtypes.html#str.split: 

 
   If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns []. 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10543508)
 You can use Python's http://docs.python.org/library/re.html#re.split 

  import re

my_str = "This is a string."

re.split("\W+", my_str)

['This', 'is', 'a', 'string', '']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54494474)
 You can use  re.split : 

  import re
re.split('[,;/ ]+', names)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46724848)
 building on @user629923's suggestion, but being much simpler than other answers: 

  import re
DBL_ESC = "!double escape!"

s = r"Hello:World\:Goodbye\\:Cruel\\\:World"

map(lambda x: x.replace(DBL_ESC, r'\\'), re.split(r'(?<!\\):', s.replace(r'\\', DBL_ESC)))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12990463)
  x='iamonlywhoknock BREAKINGBAD\n'.split(" ")
mydict={x[0]:x[1]}
  

 This should work for you. It is basic string splitting :) 



