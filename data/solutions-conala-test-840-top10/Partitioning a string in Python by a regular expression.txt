Query: Partitioning a string in Python by a regular expression
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5932097)
  

  s = "this is  a\nsentence"
re.split(r'(\W+)', s) # Notice parentheses and a plus sign.
  

 Result would be: 

  ['this', ' ', 'is', '  ', 'a', '\n', 'sentence']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15417629)
 Use a regular expression: 

  import re

re.findall(r'(NM_\d*)', name2)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5933327)
 Symbol of whitespace in re is  '\s'  not  '\W'  

 Compare: 

  import re


s = "With a sign # written @ the beginning , that's  a\nsentence,"\
    '\nno more an instruction!,\tyou know ?? "Cases" & and surprises:'\
    "that will 'lways unknown **before**, in 81% of time$"


a = re.split('(\W+)', s)
print a
print len(a)
print

b = re.split('(\s+)', s)
print b
print len(b)
  

  

  ['With', ' ', 'a', ' ', 'sign', ' # ', 'written', ' @ ', 'the', ' ', 'beginning', ' , ', 'that', "'", 's', '  ', 'a', '\n', 'sentence', ',\n', 'no', ' ', 'more', ' ', 'an', ' ', 'instruction', '!,\t', 'you', ' ', 'know', ' ?? "', 'Cases', '" & ', 'and', ' ', 'surprises', ':', 'that', ' ', 'will', " '", 'lways', ' ', 'unknown', ' **', 'before', '**, ', 'in', ' ', '81', '% ', 'of', ' ', 'time', '$', '']
57

['With', ' ', 'a', ' ', 'sign', ' ', '#', ' ', 'written', ' ', '@', ' ', 'the', ' ', 'beginning', ' ', ',', ' ', "that's", '  ', 'a', '\n', 'sentence,', '\n', 'no', ' ', 'more', ' ', 'an', ' ', 'instruction!,', '\t', 'you', ' ', 'know', ' ', '??', ' ', '"Cases"', ' ', '&', ' ', 'and', ' ', 'surprises:that', ' ', 'will', ' ', "'lways", ' ', 'unknown', ' ', '**before**,', ' ', 'in', ' ', '81%', ' ', 'of', ' ', 'time$']
61
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45524761)
 You could use look behind positive  (?<=)  regex expression like 

  In [515]: string = 'foo test1 test1 foo test2 foo'

In [516]: re.split('(?<=foo)\s', string)
Out[516]: ['foo', 'test1 test1 foo', 'test2 foo']
  

  

  In [517]: [x.split() for x in re.split('(?<=foo)\s', string)]
Out[517]: [['foo'], ['test1', 'test1', 'foo'], ['test2', 'foo']]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45988488)
 After discussion with mrocklin a decent strategy for partitioning is to aim for 100MB partition sizes guided by  df.memory_usage().sum(). . With datasets that fit in RAM the additional work this might involve can be mitigated with use of  df.persist()  placed at relevant points.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17460586)
   .*  regexp is greedy put instead  

 . 

 You can read more here: http://docs.python.org/2/library/re.html 

 What happens is that  .*  will consume as much as input as possible (in your case going all the way until the last pipe) 
 .  instead will consume as little as possible (in your case will stop at the first pipe) 

 also an alternative and faster way would be to split by what apparently looks like the field delimiter and then select the right row 

  "|".split(row)[3]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17460580)
 Use a non-greedy regexp,  

  .*? 
  

   

  .*
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10697801)
 You may simply specify a number of splits: 

  s.split(' ', 4)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/10697862)
 The second argument to  split()  is the maximum number of splits to perform.  If you set this to 4, the remaining string will be item 5 in the list. 

   sp = s.split(' ', 4)
  



