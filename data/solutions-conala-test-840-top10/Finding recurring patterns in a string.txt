Query: Finding recurring patterns in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11303260)
 add  +  after  .  in the recurring part: 

  >>> re.findall(r'^(.+?)((.+)\3+)$', '42344343434' )[0][:-1]
('42344', '343434')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20321815)
 In Python2.7 

  with open("datafile") as fin, open("outfile","w") as fout:
    for line in fin:
        print >> fout, ' '.join(set(line.split()))
  

 In Python3.x 

  with open("datafile") as fin, open("outfile","w") as fout:
    for line in fin:
        print(*(set(line.split()), file=fout)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20321751)
  

  s = "aa aa bb aa"
' '.join(set(s.split()))
  

 OUTPUT: 

  'aa bb'
  

 in case of the order is important try this: 

  lst = []
[lst.append(i) for i in s.split() if i not in lst]
' '.join(lst)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31458354)
 Assuming s is input string and you need to find position of nth |: 

  def find_position(s, n, c):
  return len("".join(s.split(c, maxsplit = n)[:n])) + n - 1
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26703869)
  (.+?)\1+
  

 . Grab the capture. See http://regex101.com/r/hO3xY3/1. 

  import re
p = re.compile(ur'(.+?)\1+')
test_str = u"1234123412341234"

re.findall(p, test_str)
  

 Add anchors and flag  Multiline  if you want the regex to fail on  12341234123123 , which should return  None . 

  ^(.+?)\1+$
  

 See <a href="http://regex101.com/r/hO3xY3/2" . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31458481)
 You could use the following regular expression to match exactly 23 '|' characters: 

  text = "|C100|0|1|F120570|55|00|32|754929|35150456228356008116550320007549291371271334|17042015|20042015|2077,14|1|2062,48|0,00|3729,51|9|0,00|0,00|3,51|0,00|0,00|0,00|0,00|0,00|0,00|0,00|0,00|0,00|"

print re.match("(\|.*?){23}", text).end() - 1
  

 This gives 154 for your example text. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8640901)
 Add an r prefix:   

  r"([0-9]+?)\1+"
  

 That will make the backslash a literal backslash instead of escaping the 1. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31458273)
 You can use  string.find()  within a loop and adjust the start index as you go. Something like the following: 

  start = -1
end = len(yourstring)
x = 0
while x < 23:
  start = string.find(yourstring, "|", start + 1, end)\
  x +=1
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31458154)
  x = 0
for index, char in enumerate(string):
    if char == "|" and x == 23:
        output_index = index
    elif char == "|":
        x += 1
print output_index
  

 enumerate() returns the index and value of each element in a string, list, dict, etc. 



