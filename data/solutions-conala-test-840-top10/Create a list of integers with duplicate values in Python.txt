Query: Create a list of integers with duplicate values in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49865122)
 Without converting to list and probably the simplest way would be something like below.
 This may be useful during a interview when they ask not to use sets  

  a=[1,2,3,3,3]
dup=[]
for each in a:
  if each not in dup:
    dup.append(each)
print(dup)
  

  ======= else to get 2 separate lists of unique values and duplicate values  

  a=[1,2,3,3,3]
uniques=[]
dups=[]

for each in a:
  if each not in uniques:
    uniques.append(each)
  else:
    dups.append(each)
print("Unique values are below:")
print(uniques)
print("Duplicate values are below:")
print(dups)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35686067)
 the third example of the accepted answer give an erroneous answer and does not attempt to give duplicates. Here is the correct version : 

  number_lst = [1, 1, 2, 3, 5, ...]

seen_set = set()
duplicate_set = set(x for x in number_lst if x in seen_set or seen_set.add(x))
unique_set = seen_set - duplicate_set
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37403193)
 Here's a fast generator that uses a dict to store each element as a key with a boolean value for checking if the duplicate item has already been yielded. 

 For lists with all elements that are hashable types: 

  def gen_dupes(array):
    unique = {}
    for value in array:
        if value in unique and unique[value]:
            unique[value] = False
            yield value
        else:
            unique[value] = True

array = [1, 2, 2, 3, 4, 1, 5, 2, 6, 6]
print(list(gen_dupes(array)))
# => [2, 1, 6]
  

 For lists that might contain lists: 

  def gen_dupes(array):
    unique = {}
    for value in array:
        is_list = False
        if type(value) is list:
            value = tuple(value)
            is_list = True

        if value in unique and unique[value]:
            unique[value] = False
            if is_list:
                value = list(value)

            yield value
        else:
            unique[value] = True

array = [1, 2, 2, [1, 2], 3, 4, [1, 2], 5, 2, 6, 6]
print(list(gen_dupes(array)))
# => [2, [1, 2], 6]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31744384)
 Here's a technique that works on any list, not just  int  lists, and doesn't rely on the (relatively) expensive  sorted()  function. It also lets you specify the number of repetitions. 

 First, a simple version to solve the problem in the OP: 

  print [u for v in [[i,i] for i in range(5)] for u in v]
  

  output  

  [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
  

 . 

  a = list('abcde')
rep = 3
print [item for sublist in [rep * [i] for i in a] for item in sublist]
  

  output  

  ['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'e', 'e', 'e']
  

 

 Here's an expanded version of the previous example, written using simple  for  loops rather than as a nested list comprehension. 

  b = []
for sublist in [rep * [i] for i in a]:
    for item in sublist:
        b.append(item)
print b
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53105269)
 You don't want to add random, unique integers 5 times; you want to add random, unique integers until your list contains 5 elements. This'll do it: 

  import random

def generatePassword() :
    lis = []
    while len(lis) < 5:
        #This checks to see if there are duplicate numbers
        r = random.randint(1,9)
        if r not in lis :
            lis.append(r)
    return lis
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50024843)
 One idea is create default  RangeIndex  first: 

  df3 = pd.concat([df1.reset_index(drop=True), 
                 df2.reset_index(drop=True)], axis=1)
  

 

  df1.reset_index(drop=True, inplace=True)
df2.reset_index(drop=True, inplace=True)

for c in df2:
    df1[c] = df2[c]
  

 Af same types of all columns (e.g.  integer s), use https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html: 

  c = df1.columns.append(df2.columns)
df = pd.DataFrame(np.hstack((df1.values, df2.values)), columns=c)
  



