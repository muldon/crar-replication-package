Query: String to list in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12447668)
 You want to use  ast.literal_eval : 

  import ast
s= "[7, 9, 41, [32, 67]]"
print ast.literal_eval(s)
# [7, 9, 41, [32, 67]]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12447666)
 Use the  ast  module, it has a handy http://docs.python.org/library/ast.html#ast.literal_eval: 

  import ast

l = ast.literal_eval(s)
  

 On the python prompt: 

  >>> import ast
>>> s= "[7, 9, 41, [32, 67]]"
>>> ast.literal_eval(s)
[7, 9, 41, [32, 67]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45838563)
 For Non String  list  we can do like this as well 

  " ".join(map(str, my_list))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19723957)
 Use http://docs.python.org/2/library/ast.html#ast.literal_eval 

  >>> list_string = '[[1, 1], [2, 2], [3, 3]]'
>>> import ast
>>> type(ast.literal_eval(list_string))
<type 'list'>
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6726645)
 String to list: 

  >>> list('abc')
['a', 'b', 'c']
  

 List to string: 

  >>> ''.join(['a', 'b', 'c'])
'abc'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48715909)
 This is one way: 

  import ast

ast.literal_eval(mystr)

# [(40.7822603, -73.9525339),
#  (40.7142, -74.0087),
#  (40.7250027, -73.9413106),
#  (40.703422, -73.9862948),
# ...
#  (40.6871087, -73.9741862),
#  (40.7160416, -73.9452393),
#  (40.7178984, -74.0063829)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12309982)
  " ".join(my_list)
  

 you need to join with a space not an empty string ... 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11895868)
  >>> strs = '2,4,6,8|10,12,14,16|18,20,22,24'
>>> strs1=strs.split('|')
>>> [map(int,.split(',')) for  in strs1] 
[[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]]
  

  Note:  for python 3. use  list(map(int,.split(','))) , as  map()  returns a map object in python 3. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36431208)
 You can use  literal_eval  and  list  to do this: 

  import ast

s = "[0, 0], [1, 7], [2, 1], [3, 1], [4, 4], [5, 3], [6, 0], [7, 0], [8, 0], [9,0],[10, 0], [11, 0], [12, 0], [13, 0], [14, 0], [15, 0], [16, 0], [17, 0], [18,0], [19, 0], [20, 0], [21, 0], [22, 0], [23, 0], [24, 0], [25, 0], [26, 0], [27, 0], [28, 0], [29, 0], [30, 0]"

l = list(ast.literal_eval(s))
  

 Output: 

  >>> l
[[0, 0], [1, 7], [2, 1], [3, 1], [4, 4], [5, 3], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0], [11, 0], [12, 0], [13, 0], [14, 0], [15, 0], [16, 0], [17, 0], [18, 0], [19, 0], [20, 0], [21, 0], [22, 0], [23, 0], [24, 0], [25, 0], [26, 0], [27, 0], [28, 0], [29, 0], [30, 0]]
  



