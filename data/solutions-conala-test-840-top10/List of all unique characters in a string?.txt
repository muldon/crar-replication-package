Query: List of all unique characters in a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13902831)
 if the result does not need to be order-preserving, then you can simply use a set 

  >>> ''.join(set( "aaabcabccd"))
'acbd'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13902829)
 The simplest solution is probably: 

  In [10]: ''.join(set('aaabcabccd'))
Out[10]: 'acbd'
  

 Note that this doesn't guarantee the order in which the letters appear in the output, even though the example might suggest otherwise. 

 You refer to the output as a "list". If a list is what you really want, replace  ''.join  with  list : 

  In [1]: list(set('aaabcabccd'))
Out[1]: ['a', 'c', 'b', 'd']
  

 As far as performance goes, worrying about it at this stage sounds like premature optimization. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52764459)
 You could do this using a https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions combined with the built-in function https://docs.python.org/3/library/functions.html#any: 

  list1 = ['something', "somet'hing", 'somet"hing', 'some;thing', '']
list2 = [';', '"', "'"]

result = [s for s in list1 if s and not any(c in s for c in list2)]
print(result)
  

  Output  

  ['something']
  

 The list comprehension is equivalent to: 

  result = []
for s in list1:
    if s and not any(c in s for c in list2):
        result.append(s)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54654028)
 If you don't mind ending with a list of elements in a different order, here's an idea: 

  lst = [ ... your input ... ]
uniques = list({''.join(sorted(n)) for n in lst})
  

 Explanation: 

 
 Each string in the input is treated as a sorted list of characters, to treat same combinations in different order as the same case 
 After that, we join each list back into a string 
 We remove the duplicates by using a set comprehension 
 Finally, we convert everything back into a list 
 

 The result looks like this: 

  ['0016', '0124', '1222', '0115', '0034', '0025', '0223', '0007', '1123', '1114', '0133']
  

 If you definitely want to keep only the first occurrence of an element, we can do it like this, but with a performance penalty: 

  result = []
for n in lst:
    unique = ''.join(sorted(n))
    if unique not in result:
        result.append(n)

result
=> ['0007', '0016', '0025', '0034', '0115', '0124', '0133', '0223', '1114', '1123', '1222']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13902835)
 Use an http://docs.python.org/2/library/collections.html#collections.OrderedDict. This will ensure that the order is preserved 

  >>> ''.join(OrderedDict.fromkeys( "aaabcabccd").keys())
'abcd'
  

 PS: I just timed both the OrderedDict and Set solution, and the later is faster. If order does not matter, set should be the natural solution, if Order Matter;s this is how you should do. 

  >>> from timeit import Timer
>>> t1 = Timer(stmt=stmt1, setup="from __main__ import data, OrderedDict")
>>> t2 = Timer(stmt=stmt2, setup="from __main__ import data")
>>> t1.timeit(number=1000)
1.2893918431815337
>>> t2.timeit(number=1000)
0.0632140599081196
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53469692)
 You could do something like this: 

  import heapq

from collections import Counter
from operator import itemgetter


def combination(word, n, counts):
    word_count = Counter(word)
    elements = []
    seen = set()
    for i, c in enumerate(word[1:]):
        if c not in seen:
            elements.append((-1 * counts[c], word_count[c], i, c))
            seen.add(c)
    top = heapq.nlargest(n, elements)
    characters = map(itemgetter(3), top)

    return word[0] + ''.join(sorted(characters, key=lambda x: word.index(x)))


lst = ["apple", "pear", "banana", "xylophone", "bear", "banunu"]

counts = Counter(''.join(lst))

result = [combination(w, 2, counts) for w in lst]
print(result)
  

  Output  

  ['apl', 'per', 'ban', 'xyh', 'ber', 'bnu']
  

 The idea is to create a tuple of the priority criterias representing each  unique  letter. So  elements  is a list containing tuples represeting: 

 
  counts[c] : The overall count (as you want the rarest multiply by -1) 
  word_count[c] : The specific count of the letter in the word 
  i : represents the firs position of the letter 
  c : the letter itself. 
 

 Once you create the list  elements  with: 

  elements = []
seen = set()
for i, c in enumerate(word[1:]):
    if c not in seen:
        elements.append((-1 * counts[c], word_count[c], i, c))
        seen.add(c)
  

 Note that as the characters must be unique we use a set ( seen ) to guarantee uniqueness. Finally you use https://docs.python.org/3/library/heapq.html#heapq.nlargest to get the top  n  elements according to the above criterias. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/872301)
 500k character is not a large list. if items in your list are unique and you need to do this search repeatedly use http://docs.python.org/library/stdtypes.html#set-types-set-frozenset which would lower the complexity to  O(1)  in the best case. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25275026)
 Using list comprehension  (code golf) : 

  findSubs=lambda s,v:[''.join([s[i+j] for j in range(v)]) for i,x in enumerate(s) if i<=len(s)-v]
findCount=lambda s,v:len(findSubs(s,v))

print findSubs('ABCDEFG', 5)  #returns ['ABCDE', 'BCDEF', 'CDEFG']
print findCount('ABCDEFG', 5) #returns 3
  

 

   Update   

 For your update, you could cast the list above to a set, back to a list, then sort the strings. 

  findUnique=lambda s,v:sorted(list(set(findSubs(s,v))))
findUniqueCount=lambda s,v:len(findUnique(s,v))

print findUnique('AAAAAA', 5)      #returns ['AAAAA']
print findUniqueCount('AAAAAA', 5) #returns 1
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48611619)
 You are trying to perform the https://en.wikipedia.org/wiki/Intersection_(set_theory). Python has https://docs.python.org/3/library/stdtypes.html#frozenset.intersection method for the same. You can use it for your use-case as: 

  >>> word_1 = 'one'
>>> word_2 = 'toe'

#    v join the intersection of `set`s to get back the string
#    v                             v  No need to type-cast it to `set`.
#    v                             v  Python takes care of it
>>> ''.join(set(word_1).intersection(word_2))
'oe'
  

 https://docs.python.org/3/library/functions.html#func-set will return the unique characters in your string.  set.intersection  method will return the characters which are common in both the sets. 

 

 If  for  loop is must for you, then you may use a  list comprehension  as: 

  >>> unique_1 = [w for w in set(word_1) if w in word_2]
# OR
# >>> unique_2 = [w for w in set(word_2) if w in word_1]

>>> ''.join(unique_1)  # Or, ''.join(unique_2)
'oe'
  

 Above result could also be achieved with explicit  for  loop as: 

  my_str = ''
for w in set(word_1):
    if w in word_2:
        my_str += w

# where `my_str` will hold `'oe'`
  



