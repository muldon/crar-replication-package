Query: Python: find out whether a list of integers is coherent
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18131851)
   

  sorted_list = sorted(my_list)
return sorted_list == range(sorted_list[0],sorted_list[-1]+1)
  

 or if its only coherent if it is already sorted 

  return my_list == range(my_list[0],my_list[-1]+1)
  

 if you are using python 3 you will need  list(range(...))  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18132428)
 If you're looking for a numpy solution: 

  import numpy as np

def is_coherent(x):
    return all(np.diff(x) == 1)

is_coherent(np.array([1,2,3,4,5]))
Out[39]: True

is_coherent(np.array([1,2,3,4,8]))
Out[40]: False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18132121)
 This short circuits and does not create an extra list making it useful for testing very large lists. 

  def is_coherent(l):
    return all(a==b for a, b in izip_longest(l, xrange(l[0], l[-1]+1)))
  

  

  def is_coherent(l):
    return all(l[i] + 1 == l[i+1] for i in xrange(len(l)-1))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18132005)
 Unless I'm overlooking something in your examples, this simpler solution is actually shorter. 

  >>> l1 = [1, 2, 3, 4, 5, 6]
>>> l2 = [1, 2, 3, 4, 5, 7]
>>> l3 = [1, 2, 3, 4, 5, 5]
>>> l4 = [1, 2, 3, 4, 5, 4]
>>> l5 = [6, 5, 4, 3, 2, 1]
>>> 
>>> def is_coherent(seq):
...     return seq == range(seq[0], seq[0]+len(seq), 1)
... 
>>> is_coherent(l1)
True
>>> is_coherent(l2)
False
>>> is_coherent(l3)
False
>>> is_coherent(l4)
False
>>> is_coherent(l5)
False
>>> 
  

 The results of some basic performance tests seem to indicate that this method is significantly quicker (I've added your example as  is_coherent2 ): 

  Carl > python -m timeit -s 'from t import is_coherent, l1' 'is_coherent(l1)'
1000000 loops, best of 3: 0.782 usec per loop
Carl > python -m timeit -s 'from t import is_coherent, l3' 'is_coherent(l3)'
1000000 loops, best of 3: 0.796 usec per loop
Carl > python -m timeit -s 'from t import is_coherent2, l1' 'is_coherent2(l1)'
100000 loops, best of 3: 4.54 usec per loop
Carl > python -m timeit -s 'from t import is_coherent2, l3' 'is_coherent2(l3)'
100000 loops, best of 3: 4.93 usec per loop
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39089512)
 The problem is you are summing the list trying to use that to determine whether the list is primarily odds or evens.  That doesn't work because the sum of a list of evens is even, but a sum of odds will be even or odd based on the number of items in the list. 

 Instead, just keep track of the last even and odd in the list and whether you have seen more than one of a given type.  And as soon as you have two evens or two odds you can assume the outlier is the other one. 

 Also, using sum() and len() in each IF clause can be incredibly inefficient because you are doing it multiple times. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47978275)
 Your file is too short, your ran out of data.  file.read(..  returns an empty string when the EOF is found. Perhaps your remaining bytes should just be left at 0? 

 You are reading your data extremely inefficiently. Use the https://docs.python.org/2/library/struct.html to unpack your data into integers, and create a single long numpy array of (R, G, B triplets, then  reshape  the data to form your image matrix: 

  import numpy as np
import struct

def lecture_fichier_compresse(:
    width, height = 800, 962
    with open("data2.txt", 'rb' as rle_data:
        image = np.zeros((width * height, 3, dtype="uint8"
        pos = 0
        # decompress RLE data; 2 byte counter followed by 3 RGB bytes
        # read until the file is done
        for data in iter(lambda: rle_data.read(5, '':
            if len(data < 5:
                # not enough data to store another RLE RGB chunk
                break
            count, r, g, b = struct.unpack('>HBBB', data
            image[pos:pos + count, :] = [[r, g, b]] * count
            pos += count
    # reshape continuous stream into an image matrix
    image = image.reshape((height, width, 3
    imsave("Copie_compresse.bmp",im3
    return image
  

 That said, using your sample file data I can't seem to construct a coherent image. Decompression produces data for 695046 pixels, which doesn't make for a coherent rectangular image (the highest short dimension that numbers factors into is 66, so extremely elongated. Even allowing for missing data at the end I can't seem to find any aspect ratio that produces a coherent image. The conclusion is that your input data is incomplete or incorrect. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6780103)
 You can convert the list to a Set, and check their lengths. 

  >>> a = [1, 2, 3]
>>> len(set(a)) == len(a)
True
>>> a = [1, 2, 3, 4, 4]
>>> len(set(a)) == len(a)
False
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37598178)
 A linear time solution would be to simply check if the current number is literally "in" a list of integers. 

  example:  

  sample_list = [2,4,9]
for i in range(5):
    if (i in sample_list):
        print("%d,1"%i)
    else:
        print("%d,0"%i)
  

  Output:  

   0,0
 1,0
 2,1
 3,0
 4,1
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53416307)
 Count how many integers are divisible by ten, and test whether that number is "the majority" - that is, if it's greater than or equal to half the lists' length.  

  def most_of(lst):
    num = sum(1 for n in lst if n % 10 == 0)
    return num >= len(lst) / 2.0
  

 For example: 

  >>> most_of([1,10,10,50,5])
True
>>> most_of([1,2,55,77,6])
False
  



