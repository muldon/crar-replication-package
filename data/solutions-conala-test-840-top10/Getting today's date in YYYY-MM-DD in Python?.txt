Query: Getting today's date in YYYY-MM-DD in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32490661)
 You can use http://strftime.org/: 

  datetime.datetime.today().strftime('%Y-%m-%d')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47984538)
 There's even simpler way than the accepted answer; valid both for Python 2 & 3. 

  from datetime import date
today = str(date.today())
print(today)   # '2017-12-26'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53623334)
 I always use the  isoformat()  function for this. 

  from datetime import date    
today = date.today().isoformat()
print(today) # '2018-12-05'
  

 Note that this also works on datetime objects if you need the time in standard format as well. 

  from datetime import datetime
now = datetime.today().isoformat()
print(now) # '2018-12-05T11:15:55.126382'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50766708)
 I used the below code to get today's date and tomorrow's date in PST.  

  from datetime import datetime, timedelta
from pytz import timezone
import pytz

/*Timezone aware object*/
utc_now = pytz.utc.localize(datetime.utcnow())
pst_now = utc_now.astimezone(pytz.timezone("America/Los_Angeles"))
file_dt=pst_now.strftime("%Y-%m-%d")
print(file_dt)


curr_time=datetime.utcnow().astimezone(pytz.timezone("America/Los_Angeles")
tom_time=utc_now+datetime.timedelta(days=1)
today=curr_time.strftime("%Y-%m-%d")
tomorrow=tom_time.strftime("%Y-%m-%d")
print("Today is "+today+" and Tomorrow is "+tomorrow)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40711383)
  >>> from datetime import datetime
>>> date = datetime.strptime("1/4/2014", "%m/%d/%Y")    
>>> datetime.strftime(date, "%Y-%m-%d")
'2014-01-04'
  

 https://docs.python.org/2/library/datetime.html#datetime.date.strftime  

 https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21738682)
 If you want a string  mm/dd/yyyy  instead of the  datetime  object, you can use  strftime  (string format time): 

  >>> dt.datetime.today().strftime("%m/%d/%Y")
                   # ^ note parentheses
'02/12/2014'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51823047)
 Use  '%Y-%m-%d'  

  Ex:  

  import pandas as pd

df = pd.DataFrame({"Date": ["26-12-2007", "27-12-2007", "28-12-2007"]})
df["Date"] = pd.to_datetime(df["Date"]).dt.strftime('%Y-%m-%d')
print(df)
  

  Output:  

           Date
0  2007-12-26
1  2007-12-27
2  2007-12-28
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22521985)
 There is confusion about the timezone for datetime.date.today(), http://docs.python.org/2/library/datetime.html  It gives local time.  Right now it is the 20th in Greenwich, Google: 

 1:55 AM
Thursday, March 20, 2014 (GMT)
Time in Greenwich, London, UK 

 In Colorado today() gives the 19th: 

  >>> import datetime
>>> str(datetime.date.today())
'2014-03-19'
>>> str(datetime.date.today() + datetime.timedelta(1))
'2014-03-20'
>>> 
  



