Query: Array indexing in numpy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45283909)
 You can use  numpy.arange  to make an array to index rows, which will just be each row at a time. Then use your  idx  array to index out of each row. 

  >>> my_array[np.arange(my_array.shape[0]), idx]
array([0, 1, 2, 3, 6])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6914245)
   

  a += numpy.histogram(b, numpy.arange(len(a)+1))[0]
  

 This will return  a = array([ 0.,  2.,  0.,  0.,  0.])  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6914184)
 When you use an integer array for indexing another array, NumPy cannot create an adequate view, since the resulting array may not be representable with strides.  Therefore, it will return a copy: 

  >>> a = np.zeros(5)
>>> b = np.array([1, 1])
>>> c = a[b]
>>> c
array([ 0.,  0.])
>>> c.base is a
False
  

 When using this index with in-place operations like  += , NumPy will interpret it differently than you expect.  Instead of "Walk the index array and perform the operation on each element in turn", it will first select all values that are indexed by  b  (in this case, just one element with index  1 ), then perform the operation on these elements  once . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10132085)
 In numpy indexing with a boolean array is the same as indexing with array.nonzero(). Because array.nonzero() returns two sets of indices for a 2darray, you are in fact indexing on both the first and the second dimension: 

  >>> myarr = np.array([[1],[2],[3],[2]])
>>> (myarr != 2).nonzero()
(array([0, 2]), array([0, 0]))
>>> myarr[(array([0, 2]), array([0, 0]))]
array([1, 3])
  

  

  >>> myarr[array([0, 2])]
array([[1],
       [3]])
  

  

  >>> myarr[myarr[:,0] != 2]
array([[1],
       [3]])
  

  

  >>> myarr[(myarr != 2).nonzero()[0]]
array([[1],
       [3]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42036408)
 You can use https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing with a tuple of arrays: 

  >>> rows = np.array([[0, 0],
...                  [1, 1]], dtype=np.intp)
>>> columns = np.array([[0, 1],
...                     [1, 2]], dtype=np.intp)
>>> x[rows, columns]
array([[ 1.,  2.],
       [ 5.,  6.]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45381144)
 You can use numpy's indexing like so:     

  result = P[np.arange(32), A[np.arange(32)]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31386502)
 You need to put the indices in a list not tuple,numpy use tuples for indexing multi-dimensional arrays : 

  >>> x[[1,2]]
array([1, 2])

>>> x[(1,2)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: too many indices
  

 Another example : 

  >>> x = np.array([6,4,0,8,77,11,2,12,67,90])
>>> x[[6,0]]
array([2, 6])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30020227)
 With  range  you are using  integer array indexing  as described here: 

 http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing 

 To get the equivalent of  a[0:5,0:5] , you have to take advantage of 'broadcasting'.  Here the 1st index is a column vector 

  a[np.arange(0,5)[:,None],range(0,5)]

In [137]: np.arange(0,5)[:,None]
Out[137]: 
array([[0],
       [1],
       [2],
       [3],
       [4]])
  

 I could go into more detail, but you could just as well read that doc. 

 

  np.ix_  is a utility that helps generate this sort of indexing arrays: 

  In [507]: np.ix_(range(0,5),range(0,5))
Out[507]: 
(array([[0],
        [1],
        [2],
        [3],
        [4]]), array([[0, 1, 2, 3, 4]]))
  

 This (5,1) array broadcasts against a (1,5) array to produce a (5,5) indexing array. 

 MATLAB and numpy have choose alternative advanced indexing approaches: 

 In MATLAB/Octave,  a([1,2,3],[1,2,3])  indexes a (3,3) block.  In  numpy ,  a[[1,2,3],[1,2,3]]  indexes the (3,) diagonal.  

  a(sub2ind(size(a),[1,2,3],[1,2,3]))  is the Octave diagonal;  a[np.ix_([1,2,3],[1,2,3])]  is the  numpy  block. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16261326)
 Numpy is using your array to index the first dimension only. As a general rule, indices for a multidimensional array should be in a tuple. This will get you a little closer to what you want: 

  >>> m[tuple(p)]
array([9, 9])
  

 But now you are indexing the first dimension twice with 1, and the second twice with 3. To index the first dimension with a 1 and a 3, and then the second with a 1 and a 3 also, you could transpose your array: 

  >>> m[tuple(p.T)]
array([ 7, 19])
  



