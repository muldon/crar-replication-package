Query: How to plot with x-axis at the top of the figure?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8640615)
 Use 

  ax.xaxis.set_ticks_position("top")
  

 For example, 

  import numpy as np
import matplotlib.pyplot as plt

numdata = 100
t = np.linspace(0, 100, numdata)
y = 1/t**(1/2.0)

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.xaxis.set_ticks_position('top')
ax.yaxis.grid(linestyle = '-', color = 'gray')
ax.invert_yaxis()
ax.plot(t, y, 'g-', linewidth = 1.5)

plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13652967)
 Use  ax.twiny() : 

  import matplotlib.pyplot as plt
import numpy as np

x1 = np.linspace(0,1000000,100)
x2 = x1 / (-466.0)
y1 = np.log(x1)

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax2 = ax1.twiny()
line1, = ax1.plot(x1,y1,'r')
line2, = ax2.plot(x2,y1,'b')

plt.legend((line1, line2), ('red', 'blue'))
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53503740)
 I think that subplots will do what you want. If you make  the top subplot smaller, and take the ticks/labels off it looks like its in the margins. Here's a code snippet that sets up the plot. 

  f = plt.figure()
# Make 2 subplots arranged vertically with different ratios
(ax, ax2) = f.subplots(2,1, gridspec_kw={'height_ratios':[1,4]})

#remove the labels on your top subplot
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)

ax.plot(a, f2(a))
ax2.plot(a, f1(a), 'r:') #red curve main plt

plt.show()
  

 I used this code to plot a few sinusoids and it  came out as follows: 

 https://i.stack.imgur.com/Ebmtl.png 

 Is this what you're looking for? 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39230445)
 I just had to do the following: 

 
 Use  fig, ax = plt.subplots(1, 1, figsize = (figsize))  
 

 2.use the ax=ax argument in c.plot() 

  import geopandas as gpd
import matplotlib.pyplot as plt
%matplotlib inline
figsize=5,5
#fig = plt.figure(figsize=(figsize),dpi=300)
#ax = fig.add_subplot(111)
fig, ax = plt.subplots(1, 1, figsize = (figsize))
shpfileshpfile=r'Y:\HQ\TH\Groups\NR\PSPD\Input\US_Counties\cb_2015_us_county_20m.shp' 
c=gpd.read_file(shpfile)
c=c.loc[c['GEOID'].isin(['26161','26093','26049','26091','26075','26125','26163','26099','26115','26065'])]
c['coords'] = c['geometry'].apply(lambda x: x.representative_point().coords[:])
c['coords'] = [coords[0] for coords in c['coords']]
c.plot(ax=ax)
ax.spines['top'].set_visible(False);ax.spines['bottom'].set_visible(False);ax.spines['left'].set_visible(False);ax.spines['right'].set_visible(False)
ax.tick_params(axis='y',which='both',left='off',right='off',color='none',labelcolor='none')
ax.tick_params(axis='x',which='both',top='off',bottom='off',color='none',labelcolor='none')
for idx, row in c.iterrows():
    ax.annotate(s=row['NAME'], xy=row['coords'],
                 horizontalalignment='center')
lat2=[42.5,42.3]
lon2=[-84,-83.5]
ax.plot(lon2,lat2,alpha=1,marker='o',linestyle='none',markeredgecolor='none',markersize=15,color='white')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18811523)
 You can do it with http://matplotlib.org/api/axes_api.html?highlight=twiny#matplotlib.axes.Axes.twiny: 

  import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax2 = ax1.twiny()
X2tick_location= ax1.xaxis.get_ticklocs() #Get the tick locations in data coordinates as a numpy array
ax2.set_xticks(X2tick_location)
ax2.set_xticklabels(X2tick_location)
plt.show()
  

   

 Have a look to this https://stackoverflow.com/questions/10514315/how-to-add-a-second-x-axis-in-matplotlib too for more elaborate plots. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12651723)
 You can use https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.tick_params.html#matplotlib.axes.Axes.tick_params (this I did in https://jupyter.org/ notebook): 

<pre class="lang-py prettyprint-override"> import matplotlib.pyplot as plt

bar(range(10), range(10))
tick_params(labeltop=True, labelright=True)
  

 Generates this image: 

   

  UPD:  added a simple example for subplots. You should use  tick_params()  with axis object. 

 This code sets to display only top labels for the top subplot and bottom labels for the bottom subplot (with corresponding ticks): 

<pre class="lang-py prettyprint-override"> import matplotlib.pyplot as plt

f, axarr = plt.subplots(2)

axarr[0].bar(range(10), range(10))
axarr[0].tick_params(labelbottom=False, labeltop=True, labelleft=False, labelright=False,
                     bottom=False, top=True, left=False, right=False)

axarr[1].bar(range(10), range(10, 0, -1))
axarr[1].tick_params(labelbottom=True, labeltop=False, labelleft=False, labelright=False,
                     bottom=True, top=False, left=False, right=False)
  

 Looks like this: 

   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39334324)
 You can adjust the title location by grabbing the  figure  object from one of the 3  axis  objects that is returned in an array from  df.plot .  Using  fig.tight_layout  removes extra whitespace, but a known problem is that is also sets the figure title within the top plot.  However, you can fix that using the last line below. 

  ax = df.plot(subplots=True, marker='.', markersize=8, 
             title ="test", fontsize = 10, color=['b','g','g'], 
             figsize=(8, 22))[0] 
fig = ax.get_figure()
fig.tight_layout()
fig.subplots_adjust(top=0.95)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40149222)
 One way is to add some extra space at the bottom/top/left or right side of the axis (in your case I would prefer top or bottom), by changing the limits slightly.  Doing so makes the legend fit below the data.  Add extra space by setting a different y-limit with  ax.set_ylim(-3e-4, 1.5e-4)  (the upper limit is approximately what it is in your figure and -3 is a estimate of what you need).   

 What you also need to do is to add split the legend into more columns, with the keyword  ncol=N  when creating the legend. 

 https://i.stack.imgur.com/opLxG.png 

  import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111)

x = np.linspace(0, 1, 100)
y = 3.5 * x - 2
for i in range(9):
    ax.plot(x, y + i / 10., label='iiiiiiiiiiii={}'.format(i))

ax.set_ylim(-3, 1.5)
ax.legend(loc='lower center', ncol=3)  # ncol=3 looked nice for me, maybe you need to change this
plt.show()
  

  EDIT  

 Another solution is to put the legend in a separate axis like I do in the code below.  The data-plot does not need to care about making space for the legend or anything and you should have enough space in the axis below to put all your line-labels.  If you need more space,  you can easily change the ratio of the upper axis to the lower axis. 

  import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(211)
ax_leg = fig.add_subplot(212)

x = np.linspace(0, 1, 100)
y = 3.5 * x - 2
lines = []
for i in range(9):  #for plotting the actual data
    li, = ax.plot(x, y + i / 10., label='iiiiiiiiiiii={}'.format(i))
    lines.append(li)

for line in lines:  # just to make the legend plot
    ax_leg.plot([], [], line.get_color(), label=line.get_label())
ax_leg.legend(loc='center', ncol=3, )  # ncol=3 looked nice for me, maybe you need to change this
ax_leg.axis('off')
fig.show()
  

 <a href="https://i.stack.imgur.com/ND0JZ.png"  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32606785)
 This is well documented in the http://matplotlib.org/examples/pylab_examples/spine_placement_demo.html (old link) / https://matplotlib.org/gallery/ticks_and_spines/spine_placement_demo.html (new link). 

 You are going to turn off the right and top spines (e.g.  spines['right'].set_color('none') ), and move the left and bottom spines to the zero position (e.g.  spines['left'].set_position('zero') ). 

  import numpy as np
import matplotlib.pyplot as plt


fig = plt.figure()
x = np.linspace(-np.pi, np.pi, 100)
y = 2*np.sin(x)

ax = fig.add_subplot(111)
ax.set_title('zeroed spines')
ax.plot(x, y)
ax.spines['left'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')

# remove the ticks from the top and right edges
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
  

 https://i.stack.imgur.com/0CRP7.png 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/8180844)
 Here is a solution which shows two possible ways to solve your problem: 

  import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid.axislines import Subplot

left,bottom,width,height= -0.02 , 0.12, 1, 0.9
fig = plt.figure(figsize=(3,5))
ax1 = plt.Axes(fig,[left,bottom,width,height])
ax1.plot([1,2,3,4],'b') # plot on the first axes you created
fig.add_axes(ax1)

# using subplot you are acually using higher level objects

ax2 = Subplot(fig,111) # this addes another axis instance
fig.add_subplot(ax2)
ax2.axis["top"].set_visible(False)
ax2.axis["right"].set_visible(False)
ax2.plot([1,2,3,4,5],'r') # thos plots on the second

# now comment everything in ax2, and uncomment ax3
# you will get a crude, low level control of axes
# but both do what you want...

#ax3 = plt.Axes(fig,[left+0.2,bottom-0.2,width,height])
#ax3.plot([1,2,3,4],'g') # plot on the first axes you created

#for loc, spine in ax3.spines.iteritems():
#    if loc in ['left','bottom']:
#        spine.set_position(('outward',10)) # outward by 10 points
#    if loc in ['right','top']:
#        spine.set_color('none') # don't draw spine
#fig.add_axes(ax3)
plt.show()
  

   



