Query: how to get around "Single '}' encountered in format string" when using .format and formatting in printing
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53286725)
 You need to wrap your string in parenthesis: 

  print(("  {0:." + str(_NACHKOMMASTELLEN) + "f}").format(round(V_values[0], _NACHKOMMASTELLEN)), end='')
      ^                                        ^
  

 So that  "  {0:." + str(_NACHKOMMASTELLEN) + "f}"  will be formated instead of  "f}"  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9079594)
 Use  }} : 

  >>> "{0}:<15}}{1}:<15}}{2}:<8}}".format("1", "2", "3")
'1:<15}2:<15}3:<8}'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9079587)
 Works: 

  >>> print("{0}:<15}}{1}:<15}}{2}:<8}}".format("1", "2", "3"))
1:<15}2:<15}3:<8}
  

  Edit:  Now I understand you.  

  print("{0:<15}{1:<15}{2:<8}".format("1", "2", "3"))
  

 Details: http://www.python.org/dev/peps/pep-3101/ 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53286884)
 If you are below 3.6 you can double-format: 

  _NKS = 3   # shortened for 79 line char limit
V_values = [3.123456789]
print("  {{:.{}f}}".format(_NKS ).format(round(V_values[0], _NKS )))
  

 The first  format  puts the  3  inplace of  {}  and converts the double  {{  and }}  to single  {  and  }  - the resulting string  {:.3f}  is then used for the second  format  .  

 As pointed out by @user2357112 in the comment, format is better then I though. This just works as well: 

  print("  {:.{}f}".format(round(V_values[0], _NKS ),_NKS ))
  

 Output: 

    3.123
  

 

 You do not need to if you already use 3.6 - f-strings deal better with it: 

  _NACHKOMMASTELLEN = 3
V_values = [3.123456789]
print(f"  {round(V_values[0], _NACHKOMMASTELLEN):.{_NACHKOMMASTELLEN}f}")
V_values = [3.1]
print(f"  {round(V_values[0], _NACHKOMMASTELLEN):.{_NACHKOMMASTELLEN}f}")
  

 Output: 

    3.123
  3.100
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9079625)
 The  {  and  }  characters need to be escaped where they're not part of the formatting template. 

 Try:  print("{0}:<15}}{1}:<15}}{2}:<8}}".format("1", "2", "3"))  

 Outputs:  1:<15}2:<15}3:<8}  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14169044)
 There isn't any way to do that exactly.  What you could do is pre-format your list of numbers, then pass that formatted string as a single item to a second round of formatting: 

  >>> nums = (13, 42)
>>> '{0} is {1}'.format('my stuff', ''.join('{:02X}'.format(a) for a in nums))
'my stuff is 0D2A'
  

 If you wanted, you could write a custom Formatter subclass that accepts a sequence of numbers as a single item to be formatted, and formats them all together.  That could let do something like  myFormatter.format('{0} is {1:list}', 'my stuff', (13, 42)) .  Here's how it could work: 

  class ListFormatter(string.Formatter):
    def format_field(self, value, spec):
        if spec == 'list':
            return ''.join('{:02X}'.format(a) for a in value)
        else:
            return super(ListFormatter, self).format_field(value, spec)

>>> lf = ListFormatter()
>>> lf.format('{0} is {1:list}', 'my stuff', [1, 43])
'my stuff is 012B'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20725301)
 Or use the "new" string formatting method: 

  def test1():
print "What is your name, traveler?"
name = raw_input()
print "Hi {0}!".format(name)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13048419)
 try string formatting: 

   print 'You chose the number: {0}'.format(P(x))
  

 and instead of printing from the function use  return : 

     def P(x):
      return str(x) 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30586704)
 Convert formatting pattern into uniode string. 

  print(u"{} | {:04x} | {}".format(x, ord(x), name(x,'-')))
  



