Query: finding index of multiple items in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52639493)
 There is two possibility if the list has no repeated items that you need to check the index for  

   eg: li=[10,20,30] # here need to get index of 20 means
     li.index(20) # will work properly because 20 is not repeated
  

 if its repeated means it will give you only the first index 

 If you need to get all the index where the item is present means 

  eg: li=[10,20,30,20,40, 50, 10] # here need to get index of 20 means its have 2 index (1,3) 
  

   

   li=[10,20,30,20,40, 50, 10]
 [i for i, e in enumerate(li) if e == 20]
  

 then you will get a list of index as o/p like [1,3]  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30729809)
 Sounds like a one-liner Python is able to do! 

  [i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30729814)
 This will work, but assumes you do not care about case sensitivity: 

  myList = ["what is your name","Hi, how are you","What about you","How about a coffee","How are you"]
duplicate = "how are you"
index_list_of_duplicate = [i for i,j in enumerate(myList) if duplicate in j.lower()]
print index_list_of_duplicate
     [1,4]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52502151)
 As indicated by @TerryA, many answers discuss how to find  one  index. 

 https://github.com/erikrose/more-itertools is a third-party library with tools to locate  multiple  indices within an iterable.  

    

  import more_itertools as mit


iterable = ["foo", "bar", "baz", "ham", "foo", "bar", "baz"]
  

  Code  

 Find indices of multiple observations: 

  list(mit.locate(iterable, lambda x: x == "bar"))
# [1, 5]
  

 Test multiple items: 

  list(mit.locate(iterable, lambda x: x in {"bar", "ham"}))
# [1, 3, 5]
  

 See also more options with https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.locate.  Install via https://github.com/erikrose/more-itertools. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16945868)
   from operator import itemgetter
 index, element = max(enumerate(items), key=itemgetter(1))
  

 Return the index of the biggest element in  items  and the element itself. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1815269)
 For the finding 

  >>> L = [('ba',4), ('hh',5), ('gg', 25)]
>>> [ i for i,l in enumerate(L) if l[0] == 'hh' ][0]
1
  

 You need to decide what to do if it is found multiple times or not at all - the above will throw  IndexError  if not found and return the first if it is found multiple times. 

  

  >>> L = [('ba',4), ('hh',5), ('gg', 25)]
>>> sorted(L, key=lambda x: x[1])
[('ba', 4), ('hh', 5), ('gg', 25)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16946762)
 so this is a real quick and easy way to get that efficient version you are looking for: 

  a = []
count = 0
for i in items:
    for x in i[0]:
        #place a list with the index next to it in list a for sorting
        a.append((x,count))
#continually grabs the smallest list and returns the index it was in
sort = [a.pop(a.index(min(a)))[1] for i in range(len(a))]
  

 Here is it with your items to show that it works: 

  >>> items = [([[0, 1], [2, 20]], 'zz', ''), ([[1, 3], [5, 29], [50, 500]], 'a', 'b')]
>>> a = []
>>> count = 0
>>> for i in items:
...     for x in i[0]:
...             a.append((x,count))
...     count += 1
... 
>>> sort = [a.pop(a.index(min(a)))[1] for i in range(len(a))]
>>> sort
[0, 1, 0, 1, 1]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29402786)
  

  import collections

d = collections.defaultdict(list)

for idx,el in enumerate(lst):
    d[el].append(idx)
    # you can also do this with d as a normal dict, and instead do
    # d.setdefault(el, []).append(idx)

# this builds {'A':[0,1,3], 'B':[2,4], 'C':[5]} from
# ['A','A','B','A','B','C']

result = [idx for idxs in d.values() for idx in idxs if len(idxs) > 1]
# this builds [0,1,3,2,4] from
# {'A':[0,1,3], 'B':[2,4], 'C':[5]}
  

 It also avoids the need to call  list.count  n times, which should perform massively faster for a larger dataset. 

 Alternatively you could leverage  collections.Counter  to get all the values that happen multiple times, then pull all their indices at once. 

  import collections

c = set([el for el,val in collections.Counter(lst).items() if val>1])
# gives {'A','B'}
result = [idx for idx,el in enumerate(lst) if el in c]
# gives [1,2,3,4]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/27726323)
 The OrderedDict is a subclass of  dict  which has the ability to traverse its keys in order (and reversed order) by https://hg.python.org/cpython/file/01437956ea67/Lib/collections/__init__.py#l50. So it does not know the index of a key. It can only traverse the linked list to find the items in O(n) time. 

 https://hg.python.org/cpython/file/01437956ea67/Lib/collections/__init__.py#l43 may be the most satisfying way to confirm that the index is not maintained by OrderedDict. You'll see that no where is an index ever used or obtained. 



