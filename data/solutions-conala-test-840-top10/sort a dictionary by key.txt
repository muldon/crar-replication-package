Query: sort a dictionary by key
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21003493)
  sorted(codebook.items(), key= lambda item: (item[1][0],item[0]))
  

 this will sort first by the first item in the tuple then by the dictionary key 

 just to clarify a few things for OP 

 
  Dictionaries are not sortable, so you cannot ever have a "sorted" dictionary 

 
 (there is a OrderedDictionary, but its essentially the same as a
NamedTuple, both of these containers do have an order) 
  
  This will return a list of tuples not a dictionary. the return will look like  

  [(dictionary_key,(tuple,values)),(dictionary_key,(tuple,values),...]   
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20855406)
 Use the http://docs.python.org/2/library/collections.html#collections.OrderedDict: 

  from collections import OrderedDict

a = {(u'A', 4): [u'alpha', u'beta', u'gamma'], 
     (u'B', 2): [28, 29, 28],
     (u'C', 5): [u'Yes',u'Yes', u'Yes'], 
     (u'E', 1): [u'delta', u'omega', u'eta'], 
     (u'F', 3): [u'No', u'Yes', u'No']}

b = OrderedDict(sorted(a.items(), key=lambda x:x[0][1]))

print b
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21738569)
 This returns the list of key-value pairs in the dictionary, sorted by value from highest to lowest: 

  sorted(d.items(), key=lambda x: x[1], reverse=True)
  

 For the dictionary sorted by key, use the following: 

  sorted(d.items(), reverse=True)
  

 The return is a list of tuples because dictionaries themselves can't be sorted. 

 This can be both printed or sent into further computation. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15614115)
  sorted(result.iteritems(), key=lambda key_value: key_value[0])
  

 This will output sorted results, but the dictionary will remain unsorted. If you want to maintain ordering of a dictionary, use http://docs.python.org/2/library/collections.html#collections.OrderedDict 

 Actually, if you sort by  key  you could skip the  key=...  part, because then the iterated items are sorted first by key and later by value (what NPE uses in his answer) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34170555)
 Sort on the dictionary's items (which are tuples) using  sorted() . You can specify the sort key which will be by the dictionary's values, and then its keys: 

  >>> d = {'Bill': 4, 'Alex' : 4, 'Bob' : 3, "Charles": 7}
>>> sorted(d.items(), key=lambda x:(x[1],x[0]))
[('Bob', 3), ('Alex', 4), ('Bill', 4), ('Charles', 7)]
>>> [t[0] for t in sorted(d.items(), key=lambda x:(x[1],x[0]))]
['Bob', 'Alex', 'Bill', 'Charles']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17630475)
 This gives what you want, sorted. But it's not in a dictionary at the end, since you can't sort a dictionary. 

  d={('w1','u1'):3,('w1','u2'):8,('w2','u1'):1,('w1','u3'):11,('w2','u3'):6}

d2 = {}

for (w,u) , value in d.items():
    if w not in d2:
        d2[w] = [(u,value)]
    else:
        d2[w].append((u, value))


for key, values in d2.items():
    print key, ":\t", sorted(values, key=lambda x: -x[1]), "\n"
  

  

  w2 :    [('u3', 6), ('u1', 1)] 

w1 :    [('u3', 11), ('u2', 8), ('u1', 3)] 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51446153)
 From Python 3.6 the dicts are ordered, but to be sure one needs to use  OrderedDict  from  collections  module: 

  from collections import OrderedDict

d={'g':1,'w':1,'h':3}

o = OrderedDict(sorted(((k, v) for k, v in d.items()), key=lambda v: (-v[1], v[0])))
print(o)
  

 Output: 

  OrderedDict([('h', 3), ('g', 1), ('w', 1)])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16304228)
 Try using custom comparators: 

  key1 = lambda (key, (value, hash)): key
key2 = lambda (key, (value, hash)): value
key3 = lambda (key, (value, hash)): hash
  

 Use it like: 

  print(sorted(aDictionary.items(), key=key1))
  

 BTW the above relies on http://www.python.org/dev/peps/pep-3113/; you could rephrase it for python 3 like: 

  key1 = lambda item: item[0][0]
key2 = lambda item: item[1][0]
key3 = lambda item: item[1][1]
  



