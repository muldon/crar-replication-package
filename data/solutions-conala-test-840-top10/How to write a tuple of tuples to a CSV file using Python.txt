Query: How to write a tuple of tuples to a CSV file using Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34598660)
 Use  writer.writerows()  to write a whole list of rows: 

  import csv
lst = [('Endurance', 112, 150, 121, 136), ('Tempo', 152, 190, 138, 142),
       ('Threshold', 192, 210, 144, 150), ('VO2', 212, 240, 152, 155),
       ('Anaerobic', 242, 300, 156, 161)]

def write_csv(lst):

    with open('tz.csv', 'wb') as myfile:
        wr = csv.writer(myfile, delimiter = ',', quoting=csv.QUOTE_ALL)
        wr.writerows(lst)

write_csv(lst)
  

 The file content: 

  "Endurance","112","150","121","136"
"Tempo","152","190","138","142"
"Threshold","192","210","144","150"
"VO2","212","240","152","155"
"Anaerobic","242","300","156","161"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8687607)
 Write all rows at once: 

  writer.writerows(A)
  

  

  writer.writerow(A)
  

 File newfile.csv looks now like this: 

  Max,3, M
bob,5,M
jane,6,F
  

 Also, add  ()  to your last line, it is a function call:  result.close() . 

 If you are on Python 2.6 or newer, you can use this form: 

  import csv
A = (('Max', 3, 'M'),('bob', 5, 'M'),('jane', 6, 'F'))
with open('newfile.csv', 'wb') as result:
    writer = csv.writer(result, dialect='excel')
    writer.writerows(A)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31093116)
 If your data isn't formatted as a  dict , why are you using  DictWriter ? Just use a normal  csv.writer : 

  with open('results.csv', 'wb') as csvfile:
    fieldnames = ['Name', 'Address', '#Reviews']
    writer = csv.writer(csvfile)
    writer.writerow(fieldnames)
    writer.writerows(z) # z is a list of all rows to write
  

 Simpler, faster, and much less code. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5432283)
 First, flatten the structure. 

  units = collections.defaultdict(lambda: collections.defaultdict(lambda: float('-inf')))
for (u, t), r in lst.iteritems():
  units[u][t] = r
table = [(u, t['test1'], t['test2']) for (u, t) in units.iteritems()]
  

 Then use http://docs.python.org/library/csv.html to write out the CSV file. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15616192)
  split  returns a list, if you want a tuple, convert it to a tuple: 

      data_list.append(tuple(line.strip().split(',')))
  

 Please use the  csv  module. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31441427)
 This should do the trick.  You want the  writerow  or  writerows  method, re.: the  csv  module.  Here it is with  writerow :     

  import csv

f1 = open ("ted.csv")
oldFile1 = csv.reader(f1, delimiter=',')
oldList1 = list(oldFile1)

f2 = open ("ted2.csv")
newFile2 = csv.reader(f2, delimiter=',')
newList2 = list(newFile2)

f1.close()
f2.close()

output1 = set(tuple(row) for row in newList2 if row not in oldList1)
output2 = set(tuple(row) for row in oldList1 if row not in newList2)

with open('Michal_K.csv','w') as csvfile:
        wr = csv.writer(csvfile,delimiter=',')
        for line in (output2).difference(output1):
            wr.writerow(line)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23573927)
 If you have Pandas, it's pretty easy and fast. I assume you have a list of tuples called "data". 

  import pandas as pd
data = [('a', 'b', 'c'), ('d', 'e', 'f')]
df = pd.DataFrame(data)
df.to_csv('test.csv', index=False, header=False)
  

  

 EDIT: "list of lists" -> "list of tuples" 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17735310)
 I am sure you can figure out the formatting: 

  >>> d.keys() #gives list of keys for first row
[('c4:7d:4f:53:24:be', 'ac:81:12:62:91:df'), ('a8:5b:4f:2e:fe:09', 'de:62:ef:4e:21:de')]
>>> for i in zip(*d.values()):  #gives rows with tuple structure for columns
        print i
(5.998999999999998, 7.89899999)
(0.0013169999, 0.1564799999967539)
(4.000000000000097, 8.764380000972)
  

 For your code, do this: 

  writer = csv.writer(open('dict.csv', 'wb'))
writer.writerow(mydict.keys())  
for values in zip(*mydict.values()):
    writer.writerow(values)
  

 The ()'s and such will not be added to the csv file. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42617472)
 Those tuples can be used to initialize a  dict  so  csv.DictWriter  seems the best choice. In this example I create a  dict  filled with default values. For each list of tuples, I copy the dict, update with the known values and write it out. 

  import csv

# sample data
lst = [('name','bob'),('age',19),('loc','LA')]
lst2 = [('name','jane'),('loc','LA')]
lists = [lst, lst2]

# columns need some sort of default... I just guessed
defaults = {'name':'', 'age':-1, 'loc':'N/A'}

with open('output.csv', 'wb') as outfile:
    writer = csv.DictWriter(outfile, fieldnames=sorted(defaults.keys()))
    writer.writeheader()
    for row_tuples in lists:
        # copy defaults then update with known values
        kv = defaults.copy()
        kv.update(row_tuples)
        writer.writerow(kv)

# debug...
print open('output.csv').read()
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/31093102)
 You can use https://docs.python.org/2/library/functions.html#zip: 

  data = [('Name2', 'Main St', 2), ('Name2', 'The Hill', 7), ('Name1', 'The Square', 14)]
for entry in data:
    row = dict(zip(fieldnames, entry))
    print(row)
  

 This will create the appropriate dictionaries that can be passed to  csv.DictWriter : 

  >>> fieldnames = ['Name', 'Address', '#Reviews']
>>> for entry in data:
...     row = dict(zip(fieldnames, entry))
...     print(row)
...
{'Name': 'Name2', '#Reviews': 2, 'Address': 'Main St'}
{'Name': 'Name2', '#Reviews': 7, 'Address': 'The Hill'}
{'Name': 'Name1', '#Reviews': 14, 'Address': 'The Square'}
  



