Query: how to check the character count of a file in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48885997)
  readlines()  returns the list of lines, but they are not stripped (ie. they contain the newline character).
 

  data = [line.strip() for line in data]
  

 or check for  --undefined--\n : 

  if line.endswith("--undefined--\n"):
  

 Alternatively, consider string's  .count()  method: 

  file_contents.count("--undefined--")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2011061)
  

  import os
os.path.getsize(filePath)
  

 to get the size of your file, in bytes. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2011063)
 If you want the unicode  character  count for a text file given a specific encoding, you will have to read in the entire file to do that. 

 However, if you want the  byte  count for a given file, you want  os.path.getsize() , which should only need to do a  stat  on the file as long as your OS has  stat()  or an equivalent call (all Unixes and Windows do). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36167917)
  

  def checkLine(line):
    with open("intensifiers.txt") as fh:
        line_words = line.rstrip().split(' ')
        check_words = [word.rstrip() for word in fh]
        print sum(line_words.count(w) for w in check_words)


for line in open("intense.txt", "r"):
    checkLine(line)    
  

 Output: 

  3
4
0
1
0
3
1
0
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43987247)
 When you iterate over the file, https://docs.python.org/2/library/stdtypes.html#file.next, so the file isn't necessarily positioned at the last character the loop saw. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2011137)
 alternative way 

  f=open("file")
os.fstat( f.fileno() ).st_size
f.close()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15373447)
 You could use a Counter for the  otherWord , like this: 

  >>> from collections import Counter
>>> otherWord = 'GREEN'
>>> otherWord = Counter(otherWord)
>>> otherWord
Counter({'E': 2, 'R': 1, 'N': 1, 'G': 1})
  

 And then your check could look like this: 

  if len(line) <= int(maxLength):
    match = True
    for l, c in counter.items():
        if line.count(l) < c:
            match = False
            break
    if match:
        listOfWords.append(line)
  

 You can also write this without a  match  variable using Pythonâ€™s for.. 

  if len(line) <= int(maxLength):
    for l, c in counter.items():
        if line.count(l) < c:
            break
    else:
        listOfWords.append(line)
  

 Edit: If you want to have an exact match on character count, check for equality instead, and further check if there are any extra characters (which is the case if the line length is different). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2011054)
  os.path.getsize(path) 
  

 
   .
  Raise os.error if the file does not
  exist or is inaccessible. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23855142)
 Currently you are only checking whether the character is in a line at all, but not counting the occurences. 
There's the  count  method for doing what you want: https://docs.python.org/2/library/stdtypes.html#str.count     

  >> 'hello world'.count('l')
3 
  

 Also, as Wooble already pointed out in his comment, you must take special care when using non-ascii characters in python2 (he provided you with the needed information).  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/19670874)
 This seems to be what you are trying to do in  finder_character . I'm not sure why you need  finder  at all. 

 In python you can loop over iterables (like strings), so you don't need to do  range(len(string)) . 

  for line in in_file:
    for i in brain_rat:
        if i in line: found += 1
  

 There appear to be a few other oddities in your code too: 

 
 You open (and iterate through) the file twice, but only closed once. 
  line_number  is never used 
 You get the total of a character in a file for each line in the file, so the total will be vastly inflated. 
 

 This is probably a much safer version,  with open...  is generally better than  open()... file.close()  as you don't need to worry as much about error handling and closing. I've added some comments to help explain what you are trying to do. 

  def finder_character(file_name,character):
    found=0    # Initialise the counter
    with open(file_name, "r") as in_file:
        # Open the file
        in_file = file_name.split('\n')

        opts = { 'vowel':'aeiou',
                 'consonant':'bcdfghjklmnpqrstvwxyz',
                 'space':'' }
        default= '!@#$%^&*()_+=-123456789{}|":?><,./;[]\''

        for line in in_file:
            # Iterate through each line in the file
            for c in opts.get(character,default):
                With each line, also iterate through the set of chars to check.
                if c in line.lower():
                    # If the current character is in the line
                    found += 1  # iterate the counter.
    return found    # return the counter
  



