Query: How do I create a LIST of unique random numbers?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9755561)
 You can first create a list of numbers from  a  to  b , where  a  and  b  are respectively the smallest and greatest numbers in your list, then shuffle it with http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle algorithm or using the Python's https://docs.python.org/3.6/library/random.html#random.shuffle method. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53105269)
 You don't want to add random, unique integers 5 times; you want to add random, unique integers until your list contains 5 elements. This'll do it: 

  import random

def generatePassword() :
    lis = []
    while len(lis) < 5:
        #This checks to see if there are duplicate numbers
        r = random.randint(1,9)
        if r not in lis :
            lis.append(r)
    return lis
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9755713)
 You can use the  shuffle  function from the http://docs.python.org/library/random.html#random.shuffle module like this: 

  import random

my_list = list(xrange(1,100)) # list of integers from 1 to 99
                              # adjust this boundaries to fit your needs
random.shuffle(my_list)
print my_list # <- List of unique random numbers
  

 Note here that the shuffle method doesn't return any list as one may expect, it only shuffle the list passed by reference. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9755557)
 If the list of N numbers from 1 to N is randomly generated, then yes, there is a possibility that some numbers may be repeated. 

 If you want a list of numbers from 1 to N in a random order, fill an array with integers from 1 to N, and then use a http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle or Python's https://docs.python.org/3.6/library/random.html#random.shuffle. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9755612)
 The solution presented in https://stackoverflow.com/a/9755548/3924118 works, but it could become problematic with memory if the sample size is small, but the population is huge (e.g.  random.sample(insanelyLargeNumber, 10) ).  

  

  answer = set()
sampleSize = 10
answerSize = 0

while answerSize < sampleSize:
    r = random.randint(0,100)
    if r not in answer:
        answerSize += 1
        answer.add(r)

# answer now contains 10 unique, random integers from 0.. 100
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43272661)
 
   random.sample(population, k) 
 

  Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement.  

 To choose a sample from a range of integers, use an range() object as an argument 

  >>> import random
>>> print random.sample(range(1,100),3)
[77, 29, 45]
>>> 
  

 https://docs.python.org/2/library/random.html#random.sample 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22842334)
 Generate the range of data first and then shuffle it like this 

  import random
data = range(numLow, numHigh)
random.shuffle(data)
print data
  

 By doing this way, you will get all the numbers in the particular range but in a random order. 

 But you can use https://docs.python.org/2/library/random.html#random.sample to get the number of elements you need, from a range of numbers like this 

  print random.sample(range(numLow, numHigh), 3)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49783237)
   random  solution  

 If you want to only use the  random  module, you can use: 

  import random

nums = random.sample(range(1,35), 10)

winning_numbers = nums[:7]
bonus_numbers = nums[7:]

>>> winning_numbers
[2, 23, 29, 34, 26, 16, 13]

>>> bonus_numbers
[8, 4, 19]
  

 As  random.sample  is "Used for random sampling without replacement." (Quoted from the https://docs.python.org/2/library/random.html) 

   numpy  solution  

 You can also use  numpy , as  numpy.random.choice  has a  replace  argument you can set to  false . (I'm personally a fan or using  numpy  for random numbers, as it provides a lot more flexibility in more complex tasks than  random ) 

  import numpy as np

nums = np.random.choice(range(1,35), 10, replace=False)

winning_numbers = nums[:7]
bonus_numbers = nums[7:]


>>> winning_numbers
array([27,  4, 17, 30, 32, 21, 23])

>>> bonus_numbers
array([15, 13, 18])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6498667)
 You can also generate a list of random choices, using  itertools.combinations  and  random.shuffle . 

  all_data = [1,2,2,3,4,5,6,7,8,8,9,10,11,11,12,13,14,15,15]

# Remove duplicates
unique_data = set(all_data)

# Generate a list of combinations of three elements
list_of_three = list(itertools.combinations(unique_data, 3))

# Shuffle the list of combinations of three elements
random.shuffle(list_of_three)
  

 Output: 

  [(2, 5, 15), (11, 13, 15), (3, 10, 15), (1, 6, 9), (1, 7, 8), ...]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24108452)
 Just use  [random.random() for i in range(N)]  inside your list comprehension. 

  

  >>> import random
>>> N = 3
>>> [random.random() for i in range(N)]
[0.24578599816668256, 0.34567935734766164, 0.6482845150243465]
>>> M = 3
>>> [[random.random() for i in range(N)] for j in range(M)]
[[0.9883394519621589, 0.6533595743059281, 0.866522328922242], [0.5906410405671291,         0.4429977939796209, 0.9472377762689498], [0.6883677407216132,     0.8215813727822125, 0.9770711299473647]]
  



