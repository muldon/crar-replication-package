Query: How to find all elements in a numpy 2-dimensional array that match a certain list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34945351)
 Use https://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html: 

  np.in1d(arr, [1,3,4]).reshape(arr.shape)
  

  in1d , as the name suggest, operates on the flattened array, therefor you need to reshape after the operation. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16401762)
  import numpy
A = numpy.array([[1, -1, 1, -1],
                 [1, 1, -1, 1],
                 [1, -1, 1, -1]])
b = numpy.array([1, -1, 1, -1])

print ((A == b).sum(axis=1) == b.size).sum()
  

 This will do a row match, and we select and count the rows where all values match the pattern we are looking for. This requires that  b  has the same shape as  A[0] . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40426159)
 An alternative to selecting the first element from np.where() is to use a generator expression together with enumerate, such as:  

  >>> import numpy as np
>>> x = np.arange(100)   # x = array([0, 1, 2, 3, ... 99])
>>> next(i for i, x_i in enumerate(x) if x_i == 2)
2
  

 For a two dimensional array one would do:  

  >>> x = np.arange(100).reshape(10,10)   # x = array([[0, 1, 2,... 9], [10,..19],])
>>> next((i,j) for i, x_i in enumerate(x) 
...            for j, x_ij in enumerate(x_i) if x_ij == 2)
(0, 2)
  

 The advantage of this approach is that it stops checking the elements of the array after the first match is found, whereas np.where checks all elements for a match. A generator expression would be faster if there's  match early in the array. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18505100)
 Numpy is quite handy for this: 

  >>> import numpy as np
>>> a = [[100, 200, 100, 250], [125, 100, 250, 100]]
>>> a=np.array(a)
>>> np.argwhere(a>=200)
      array([[0, 1],
             [0, 3],
             [1, 2]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30817308)
 You want http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html 

  >>> array = np.array(range(10))
>>> array.reshape(5,2)
array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7],
       [8, 9]])
  

 For your case, if you were dealing with a single element, you would do the following: 

  >>> >>> a = np.array(range(100))
>>> a.reshape(10,10)
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
  

 However, your case has 2 elements for each element, so you would do: 

  >>> a = np.array([[i,j] for i in range(10) for j in range(10)])
>>> a.reshape(10,10, 2)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34945323)
 You can use http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.in1d.html - 

  A*np.in1d(A,[1,3,4]).reshape(A.shape)
  

 Also, http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.where.html could be used - 

  np.where(np.in1d(A,[1,3,4]).reshape(A.shape),A,0)
  

 You can also use http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.searchsorted.html to find such matches by using its optional  'side'  argument with inputs as  left  and  right  and noting that for the matches, the searchsorted would output different results with these two inputs. Thus, an equivalent of  np.in1d(A,[1,3,4])  would be - 

  M = np.searchsorted([1,3,4],A.ravel(),'left') != \
    np.searchsorted([1,3,4],A.ravel(),'right')
  

 Thus, the final output would be - 

  out = A*M.reshape(A.shape)
  

 Please note that if the input search list is not sorted, you need to use the optional argument sorter  with its  argsort  indices in  np.searchsorted . 

  

  In [321]: A
Out[321]: 
array([[1, 1, 0, 2, 2],
       [1, 1, 0, 2, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])

In [322]: A*np.in1d(A,[1,3,4]).reshape(A.shape)
Out[322]: 
array([[1, 1, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])

In [323]: np.where(np.in1d(A,[1,3,4]).reshape(A.shape),A,0)
Out[323]: 
array([[1, 1, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])

In [324]: M = np.searchsorted([1,3,4],A.ravel(),'left') != \
     ...:     np.searchsorted([1,3,4],A.ravel(),'right')
     ...: A*M.reshape(A.shape)
     ...: 
Out[324]: 
array([[1, 1, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])
  

 Runtime tests and verify outputs - 

  In [309]: # Inputs
     ...: A = np.random.randint(0,1000,(400,500))
     ...: lst = np.sort(np.random.randint(0,1000,(100))).tolist()
     ...: 
     ...: def func1(A,lst):                         
     ...:   return A*np.in1d(A,lst).reshape(A.shape)
     ...: 
     ...: def func2(A,lst):                         
     ...:   return np.where(np.in1d(A,lst).reshape(A.shape),A,0)
     ...: 
     ...: def func3(A,lst):                         
     ...:   mask = np.searchsorted(lst,A.ravel(),'left') != \
     ...:          np.searchsorted(lst,A.ravel(),'right')
     ...:   return A*mask.reshape(A.shape)
     ...: 

In [310]: np.allclose(func1(A,lst),func2(A,lst))
Out[310]: True

In [311]: np.allclose(func1(A,lst),func3(A,lst))
Out[311]: True

In [312]: %timeit func1(A,lst)
10 loops, best of 3: 30.9 ms per loop

In [313]: %timeit func2(A,lst)
10 loops, best of 3: 30.9 ms per loop

In [314]: %timeit func3(A,lst)
10 loops, best of 3: 28.6 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43977626)
 At least one item in your list is either not three dimensional; or it's (second or) third dimension does not match the other elements. If only the first dimension does not match, the arrays are still matched, but as individual objects: no attempt is made to reconcile them into a new (four dimensional) array. Some examples below. 

 That is, the offending element's  shape !, 224, 3) , 
or  ndim != 3  (with the  ?  . 
That is what is giving you the error. 

 You'll need to fix that, to be able to turn your list into a four (or three) dimensional array.  Without context, it is impossible to say if you want to lose a dimension from the 3D items or add one to the 2D items (in the first case), or change the second or third dimension (in the second case). 

 

 Here's an example of the error: 

  >>> a = [np.zeros((224,224,3)), np.zeros((224,224,3)), np.zeros((224,224))]
>>> np.array(a)
ValueError: could not broadcast input array from shape (224,224,3) into shape (224,224)
  

  

  >>> a = [np.zeros((224,224,3)), np.zeros((224,224,3)), np.zeros((224,224,13))]
>>> np.array(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: could not broadcast input array from shape (224,224,3) into shape (224,224)
  

 Alternatively, similar but with a different error message: 

  >>> a = [np.zeros((224,224,3)), np.zeros((224,224,3)), np.zeros((224,100,3))]
>>> np.array(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: could not broadcast input array from shape (224,224,3) into shape (224)
  

 But the following will work, albeit with different results than (presumably) intended: 

  >>> a = [np.zeros((224,224,3)), np.zeros((224,224,3)), np.zeros((10,224,3))]
>>> np.array(a)
# long output omitted
>>> newa = np.array(a)
>>> newa.shape
3  # oops
>>> newa.dtype
dtype('O')
>>> newa[0].shape
(224, 224, 3)
>>> newa[1].shape
(224, 224, 3)
>>> newa[2].shape
(10, 224, 3)
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32419335)
 We start with the 3 arrays of components  x ,  y , and  z . I will change the values from your example so that they have unique values: 

  x = np.array([[[1,2],[3,4]],
              [[5,6],[7,8]]])
y = x + 10
z = y + 10
  

 Each of the above have shape  (2,2,2) , but they could be any  (n, m, l) . This shape will have little impact on our process. 

 We next combine the three component arrays into a new array  p , the "position vector", creating a new dimension  i  will iterate over the three physical dimensions  x, y, z ,  

  p = np.array([x, y, z])
  

 so  p[0]  is  x  and so on, and  p  has shape  (d, n, m, l)  (where  d=3  is the physical dimensionality of the vectors). 

 Now we look at your list of vectors  sv  which presumably has shape  (N, d) . Let us use a small number for  N : 

  N = 4
d = 3
sv = np.arange(d*N).reshape(N,d) # a list of N vectors in 3d
  

 OK the above was a little repetive but I want to be clear (and please correct any misunderstandings I may have had from your question). 

 You want to make some difference,  diff  in which you take each of the  n*m*l  vectors buried in  p  and subtract from it each of the  N  vectors in  sv . This will give you  N*n*m*l  vectors, which each have  d  components. We need to align each of these dimensions before we do subtractions. 

 Basically we want to take  p - sv  but  we must make sure that their shapes match so that the  d  axis is aligned, and the  n, m, l  and  N  axes basically just add up. The way numpy broadcasts is to take the shapes of the array, and aligns them from the end, so the last axis of each is aligned, and so on. To broadcast, each size must match exactly, or must be empty (on the left) or  1 . That is, if your shapes were  (a, b, c)  and  (b, c) , you would be fine, and the second array would be repeated ("broadcasted")  a  times to match the  a  different subarrays of shape  (b, c)  in the first array. You can use dimensions length  1  which will force the position, so normally two arrays of shape  (a, b, c)  and  (a, b)  will not align because the last axis does not match, but you can add a new placeholder axis at the end of the second to give it shape  (a, b, 1)  which will match to  (a, b, c)  no matter what the value of  c  is. 

 We give shape  (N, d, 1, 1, 1)  to  sv  which matches the shape  (d, n, m, l)  of  p . This can be done several ways: 

  sv = sv.reshape(sv.shape + (1,1,1)])
#or
sv.shape += (1, 1, 1)
#or
sv = sv[..., None, None, None]
  

 Then, we can do the difference: 

  diff = p - sv[..., None, None, None]
  

 where we have that  diff.shape  is  (N, d, n, m, l) . Now we can square it and sum over the second ( d ) dimension to get the norm/magnitude of each vector: 

  m = (diff*diff).sum(1)
  

 which of course will have shape  (N, n, m, l) , or in the example case  (4, 2, 2, 2)  

 So, all together: 

  import numpy as np

x = np.array([[[1,2],[3,4]],
              [[5,6],[7,8]]])
y = x + 10
z = y + 10
p = np.array([x, y, z])
print p.shape
N = 4
d = 3
sv = np.arange(d*N).reshape(N,d) # a list of N vectors in 3d
print sv.shape
diff = p - sv[..., None, None, None]
print diff.shape
m = (diff*diff).sum(1)
print m.shape
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47943310)
 Are you looking for something like this ? 

  import numpy as np
list_1=np.array([[ 0.15293227, -1.50167614, -1.04974543],
       [ 1.25396778,  0.21520081,  0.39136217],
       [-1.1272423 ,  1.18971277,  0.19569736]])

for i in list_1:
    if i[-1:][0]>0:
        i[i.tolist().index(i[-1:])]=1

print(list_1)
  

 output: 

  [[ 0.15293227 -1.50167614 -1.04974543]
 [ 1.25396778  0.21520081  1.        ]
 [-1.1272423   1.18971277  1.        ]]
  

 
   Just for fun in one line you can do something like this: 
 

  [i.__setitem__(i.tolist().index(i[-1:]),1) for i in list_1 if i[-1:][0]>0]
  

 output: 

  [[ 0.15293227 -1.50167614 -1.04974543]
 [ 1.25396778  0.21520081  1.        ]
 [-1.1272423   1.18971277  1.        ]]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47194040)
 If you store  a  as a two-dimensional numpy array: 

  >>> a = np.array([[0.1, 0.1, 0.1], [0.2, 0.2, 0.2]])
# result: array([[ 0.1,  0.1,  0.1],
#                [ 0.2,  0.2,  0.2]])
  

 or even convert  a  to a numpy array via  a = np.array(a) ,
then you can use the list b to access the elements as desired: 

  >>> b = [0,0,0,1]
>>> print(a[b])
array([[ 0.1,  0.1,  0.1],
       [ 0.1,  0.1,  0.1],
       [ 0.1,  0.1,  0.1],
       [ 0.2,  0.2,  0.2]])
  

 and if you need a  list  as output then use  tolist()  method of the  numpy  arrays: 

  >>> (np.asarray(a)[b]).tolist()
[[0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.2, 0.2, 0.2]]
  



