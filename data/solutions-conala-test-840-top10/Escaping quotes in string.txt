Query: Escaping quotes in string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43045936)
 This did the job for me. 

  s.replace('"', '\\"')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45999366)
 It doesn't matter if you use  '  or  "  around the string to mark it as string literal. But you can't use that character inside the string literal without escaping it using a  \  in front of it - otherwise Python interprets it as the end of the string. 

 For example  "  inside a  "  delimited string literal need to be escaped as well: 

  a = "And he said: \"What a nice day\"."
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6459901)
 Your original attempt works just fine.  The double backslashes you see are simply a way of displaying the single backslashes that are actually in the string.  See also: http://docs.python.org/2/reference/datamodel.html#object.__repr__ 

  >>> s = 'a string with "double" quotes'
>>> ss = s.replace('"', '\\"')
>>> len(s)
29
>>> len(ss)
31
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34213236)
 Using a forward slash seems to work for me but I haven't had any trouble with single quotes.  

   

  "\"this seems to work fine.\""
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15602277)
 All four flavors of quotes: 

  print('''"done('1') && done('2')"''')  # No escaping required here.
print(""""done('1') && done('2')\"""")
print("\"done('1') && done('2')\"")
print('"done(\'1\') && done(\'2\')"')
  

 Output: 

  "done('1') && done('2')"
"done('1') && done('2')"
"done('1') && done('2')"
"done('1') && done('2')"
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16094836)
 you could use triple quotes: 

  """ssh -t kity@{0} 'sudo nohup bash -c "./tcp_sender > /dev/null 2>&1 &"'""".format(ip_address)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37872992)
 You can escape triple-quotes inside a string the same way you can escape any other quote character, with a  \ : 



  s = """name={0},
address={1},
nickname={2},
age={3},
comments=
\"\"\"
{4}
\"\"\"
"""
  

 Strictly speaking, you only have to escape  one  of the  "  characters --- enough to prevent a triple  """  from appearing --- but I find escaping all three makes my intent more clear. 

 ... 



  sf = s.format("alice", "N/A", "alice", 18, "missing person")
print(sf)
print('----')
print(repr(sf))
  

 ...produces: 

<pre class="lang-none prettyprint-override"> name=alice,
address=N/A,
nickname=alice,
age=18,
comments=
"""
missing person
"""

----
'name=alice,\naddress=N/A,\nnickname=alice,\nage=18,\ncomments=\n"""\nmissing person\n"""\n'
  

 https://stackoverflow.com/questions/37872417/4116239 works, but only if you don't have a mix of  '''  and  """  triple-quotes inside the string.  Escaping the quote characters with a backslash  always  works. 

 Annoyance #1:  Trailing Newline 

 I printed the row of dashes to highlight that  s  has preserved the newline between the last three escaped quote characters and the triple quotes that actually ended the string.  To remove it from the literal: 



  s = """[as before...]
\"\"\"
{4}
\"\"\""""
  

 Annoyance #2:  Indentations Preserved Inside Literal 

 The second and following lines of the  s  literal must be flush against the first (left-hand) column.  Triple-quoted strings neatly lined up inside an indented block: 



  def indents_appear_in_string_literal():
    # This looks good but doesn't work right.
    s = """name={0},
    address={1},
    nickname={2},
    age={3},
    comments=
    \"\"\"
    {4}
    \"\"\"
    """
    sf = s.format("alice", "N/A", "alice", 18, "missing person")
    print(sf)
    print('----')
    print(repr(sf))
    return
  

 ...will preserve the indentations inside the literal: 

<pre class="lang-none prettyprint-override"> name=alice,
    address=N/A,
    nickname=alice,
    age=18,
    comments=
    """
    missing person
    """

----
'name=alice,\n    address=N/A,\n    nickname=alice,\n    age=18,\n    comments=\n    """\n    missing person\n    """\n    '
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40159853)
  '   # '  

 You need to escape single quotes in single quotes. If you write this to a file, it will be how you want it. 

 Or use  '''   # '''  

 Notice the triple quotes? 

 Interesting article about escaping in Python: https://learnpythonthehardway.org/book/ex10.html 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6459810)
 The string  is  correct. But  repr  will use backslash-escapes itself to show unprintable characters, and for consistency (it's supposed to form a Python string literal that, when evaluated, gives back the same string that was the input to  repr ) also escapes each backslash that occurs in the string. 

 Note that this is a rather limited escaping algorithm. Depending on what you need it for, you may have to expand it significantly (or there's a ready-made solution, e.g. preprared statements when working with databases) 



