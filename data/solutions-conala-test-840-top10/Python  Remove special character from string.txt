Query: Python / Remove special character from string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25991827)
 I would use a regex like this: 

  import re
string = "↵                        tryit1.tar↵                        "
print re.sub(r'[^\w.]', '', string)     #  tryit1.tar
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25991795)
 A regex would be good here: 

  re.sub('[^a-zA-Z0-9-_*.]', '', my_string)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39041476)
 Assuming you want to remove  \t  and  \n  type characters (with those representing  tab  and  newline  in this case and remove the meaning of  \  in the string in general) you can do: 

  >>> a = 'ddd\ttt\nnn'
>>> print a
ddd tt
nn
>>> repr(a)[1:-1].replace('\\','')
'dddtttnnn'
>>> print repr(a)[1:-1].replace('\\','')
dddtttnnn
  

 If it is a raw string (i.e., the  \  is not interpolated to a single character), you do not need the  repr : 

  >>> a = r'ddd\ttt\nnn'
>>> a.replace('\\','')
'dddtttnnn'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3559592)
 To replace a specific position: 

  s = s[:pos] + s[(pos+1):]
  

 To replace a specific character: 

  s = s.replace('M','')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3559600)
 In Python, strings are immutable, so you have to create a new string.  You have a few options of how to create the new string.  If you want to remove the 'M' wherever it appears: 

  newstr = oldstr.replace("M", "")
  

 If you want to remove the central character: 

  midlen = len(oldstr)/2
newstr = oldstr[:midlen] + oldstr[midlen+1:]
  

 You asked if strings end with a special character.  No, you are thinking like a C programmer.  In Python, strings are stored with their length, so any byte value, including  \0 , can appear in a string. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32594712)
 Here's what I did to slice out the "M": 

  s = 'EXAMPLE'
s1 = s[:s.index('M')] + s[s.index('M')+1:]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10751947)
 You can use a negated character class and add all characters you want to keep 

 You could do something like this: 

  p_nonalphanum = re.compile('[^\w½¾]+')
print (p_nonalphanum.sub('', test))
  



