Query: Convert Unicode to UTF-8 Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4182757)
 If I understand you correctly, you have a utf-8 encoded byte-string in your code. 

 Converting a byte-string to a unicode string is known as decoding (unicode -> byte-string is encoding). 

 You do that by using the http://docs.python.org/library/functions.html#unicode function or the http://docs.python.org/library/stdtypes.html#str.decode method.  

  unicodestr = unicode(bytestr, encoding)
unicodestr = unicode(bytestr, "utf-8")
  

  

  unicodestr = bytestr.decode(encoding)
unicodestr = bytestr.decode("utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14443797)
 To decode a byte sequence from latin 1 to Unicode, use the http://docs.python.org/2/library/stdtypes.html#str.decode: 

  >>> '\xe9'.decode('latin1')
u'\xe9'
  

 Python uses  \xab  escapes for unicode codepoints below  \u00ff .  

  >>> '\xe9'.decode('latin1') == u'\u00e9'
True
  

 The above Latin-1 character can be encoded to UTF-8 as: 

  >>> '\xe9'.decode('latin1').encode('utf8')
'\xc3\xa9'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27205998)
 Might be a bit overkill, but when I work with ascii and unicode in same files, repeating decode can be a pain, this is what I use: 

  def make_unicode(input):
    if type(input) != unicode:
        input =  input.decode('utf-8')
        return input
    else:
        return input
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14743361)
 You can always map a  str  to  unicode  using the  latin-1  codec. Once you have a  unicode , you can always encode it in  utf-8 : 

  data.decode('latin-1').encode("utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22615366)
 This is not utf-8: 

  print txt.decode('iso8859-1')
Out[14]: médico
  

 If you want utf-8 string, use: 

  txt.decode('iso8859-1').encode('utf-8')
Out[15]: 'm\xc3\xa9dico'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4182635)
  >>> plain_string = "Hi!"
>>> unicode_string = u"Hi!"
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)
  

 ^ This is the difference between a byte string (plain_string) and a unicode string. 

  >>> s = "Hello!"
>>> u = unicode(s, "utf-8")
  

 ^ Converting to unicode and specifying the encoding. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36222310)
 Instead of writing code to convert from your unicode to UTF-8, you wrote code to convert from UTF-8 to unicode. That's what you're getting errors. 

  decode("utf-8")  means 

 
   Take a UTF-8 encoded binary  str  and convert to  a  unicode  string. 
 

 Conversely,  encode("utf-8")  means 

 
   take a  unicode  string and encode into a binary  str  using UTF-8. 
 

 It looks like you're trying to encode text as UTF-8, so you can write it to your file in UTF-8 encoding. So you should use be using  encode()  instead of  decode() . 

 Also, you're taking your  QString  value, which is in unicode, and calling  str()  on it. This attempts to change it to a binary  str  using ASCII, which doesn't work for your Arabic text, and causes the exception you're seeing. And it's not what you wanted to do, anyway—you wanted to use UTF-8, not ASCII. So don't convert it to a binary  str , convert it to a  unicode  object with  unicode() . 

 So, for example, instead of 

  str(self.lineEdit_2.text()).decode("utf-8")
  

  

  unicode(self.lineEdit_2.text()).encode("utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29833547)
  

  >>> s = "<a href = \"http://www.mypage.com/\\u0441andmoretext\">\\u00b2<\\a>"
>>> s.decode("raw_unicode_escape")
u'<a href = "http://www.mypage.com/\u0441andmoretext">\xb2<\\a>'
  

 And then you can encode to utf8 as usual. 



