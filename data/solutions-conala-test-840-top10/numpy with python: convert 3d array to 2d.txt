Query: numpy with python: convert 3d array to 2d
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43466677)
 You can use  numpy.dstack()  to turn a list of 2D arrays into a 3D array: 

 https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47091309)
 Numpy array  works very well with NUMbers, it's a little more tricky with strings. https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vectorize.html is a work around for such situation, even no performance improvement is done. But it manages any number of dimensions, hope you will find it elegant.  

  a=np.array([[[['__cat_0', '__cat_1'],
         ['__cat_2', '__cat_3']],

        [['__cat_4', '__cat_5'],
         ['__cat_6', '__cat_7']]],


       [[['__cat_8', '__cat_9'],
         ['__cat_10', '__cat_11']],

        [['__cat_12', '__cat_13'],
         ['__cat_14', '__cat_15']]]])


def f(str): return int(str[6:])        
fv=np.vectorize(f)

print(fv(a))
  

  

  [[[[ 0  1]
   [ 2  3]]

  [[ 4  5]
   [ 6  7]]]


 [[[ 8  9]
   [10 11]]

  [[12 13]
   [14 15]]]]    
  

 Remark :  a  is  np.vectorize(lambda n : '__cat_'+str(n))(np.arange(16).reshape((2,)*4))  ;)  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33212047)
 It looks like you can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.transpose.html and then reshape, like so - 

  data.transpose(2,0,1).reshape(-1,data.shape[1])
  

  

  In [63]: data
Out[63]: 
array([[[  1.,  20.],
        [  2.,  21.],
        [  3.,  22.],
        [  4.,  23.]],

       [[  5.,  24.],
        [  6.,  25.],
        [  7.,  26.],
        [  8.,  27.]],

       [[  9.,  28.],
        [ 10.,  29.],
        [ 11.,  30.],
        [ 12.,  31.]]])

In [64]: data.shape
Out[64]: (3, 4, 2)

In [65]: data.transpose(2,0,1).reshape(-1,data.shape[1])
Out[65]: 
array([[  1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.],
       [  9.,  10.,  11.,  12.],
       [ 20.,  21.,  22.,  23.],
       [ 24.,  25.,  26.,  27.],
       [ 28.,  29.,  30.,  31.]])

In [66]: data.transpose(2,0,1).reshape(-1,data.shape[1]).shape
Out[66]: (6, 4)
  

 To get back original 3D array, use  reshape  and then  numpy.transpose , like so - 

  In [70]: data2D.reshape(np.roll(data.shape,1)).transpose(1,2,0)
Out[70]: 
array([[[  1.,  20.],
        [  2.,  21.],
        [  3.,  22.],
        [  4.,  23.]],

       [[  5.,  24.],
        [  6.,  25.],
        [  7.,  26.],
        [  8.,  27.]],

       [[  9.,  28.],
        [ 10.,  29.],
        [ 11.,  30.],
        [ 12.,  31.]]])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27843675)
 Instead of a for loop you could make an array out of the list comprehension: 

  from PIL import Image                                                            
import numpy                                                                     
import glob

imageFolderPath = '/home/B/Pictures/'
imagePath = glob.glob(imageFolderPath + '/*.JPG') 

im_array = numpy.array( [numpy.array(Image.open(img).convert('L'), 'f') for img in imagePath] )
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47968846)
 If you build a 2D list and convert it to numpy with  np.array()  it will return a numpy array with 2 dimensions. 

 If you build a 3D list and convert it to numpy with  np.array()  it will return a numpy array with 3 dimensions. 

 Minimal working example: 

  my_list = [[[0,1,2],[0,1,2]],[[0,1,2],[0,1,2]]]
my_list
  

 
   [[[0, 1, 2], [0, 1, 2]], [[0, 1, 2], [0, 1, 2]]] 
 

  my_np_array = np.array(my_list)
my_np_array.shape
  

 
   (2, 2, 3) 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49554857)
 hope this funtion helps u to convert 2D array to 3D array.  

  Args:
  x: 2darray, (n_time, n_in)
  agg_num: int, number of frames to concatenate. 
  hop: int, number of hop frames. 

Returns:
  3darray, (n_blocks, agg_num, n_in)


def d_2d_to_3d(x, agg_num, hop):

    # Pad to at least one block. 
    len_x, n_in = x.shape
    if (len_x < agg_num): #not in get_matrix_data
        x = np.concatenate((x, np.zeros((agg_num - len_x, n_in))))

    # main 2d to 3d. 
    len_x = len(x)
    i1 = 0
    x3d = []
    while (i1 + agg_num <= len_x):
        x3d.append(x[i1 : i1 + agg_num])
        i1 += hop

    return np.array(x3d)
  



