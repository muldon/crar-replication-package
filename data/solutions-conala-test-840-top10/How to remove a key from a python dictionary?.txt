Query: How to remove a key from a python dictionary?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34416113)
 if it is  sartswith  you have already got your answer. If not  then you could use  in  or  re for more complex checking  

  Code:  

  import re
dic = {
 (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Me'): 300, 
 (u'A_String_0', u'B_String_4'): 301, 
 (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Key'): 301,
}
print {k:v for k,v in dic.items() if not any(re.match("Remove", val)for val in k)} # Using in
print {k:v for k,v in dic.items() if not any("Remove" in val for val in k)} # Using re.match
  

  Output:  

  {(u'A_String_0', u'B_String_4'): 301}
  

  Note:  

 
 This would remover the key if  Remove  occurs any where in the key 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34415949)
 One way: 

      >>> d = {
     (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Me'): 300, 
     (u'A_String_0', u'B_String_4'): 301, 
     (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Key'): 301,
    }
    >>> 
    >>> 
    >>> d_out = {k:v for k,v in d.items() if not any(x.startswith('Remove_') for x in k)}
    >>> d_out
{(u'A_String_0', u'B_String_4'): 301}
  

 EDIT: In case you wanted to check if  Remove_  is part of any item of the tuple key, then you are better with: 

  >>> d_out = {k:v for k,v in d.items() if not any('Remove_' in x for x in k)}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41010331)
 Use: 

  >>> if myDict.get(key): myDict.pop(key)
  

 Another way: 

  >>> {k:v for k, v in myDict.items() if k != 'key'}
  

 You can delete by conditions. No error if  key  doesn't exist. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34415977)
 Since keys are always a combined thing without any structure or pattern, you always need to have the full key in order to access elements in the dictionary. In particular this means that you cannot find elements using some partial key. So in order to do this, there is no way other than looking at all keys: 

  >>> d = {
 (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Me'): 300, 
 (u'A_String_0', u'B_String_4'): 301, 
 (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Key'): 301}
>>> { k: v for k, v in d.items() if not any(x.startswith('Remove_') for x in k) }
{(u'A_String_0', u'B_String_4'): 301}
  

 This will create a new dictionary from the source dictionary, taking every key  k  for which  any(x.startswith('Remove_') for x in k)  is not true. That  any()  expression will be true if there is an element in  x  that starts with  'Remove_' . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25421605)
 If instead of  key2 in key  (that is, " key2  is a  substring  of  key ") you change your requirement to " key2  is a  prefix  of  key " (as your examples demonstrate), you can use a https://en.wikipedia.org/wiki/Trie for efficient prefix checks. See https://stackoverflow.com/a/11016430/223267. 

 First define  make_trie  as in the answer above: 

  _end = '_end_'

def make_trie(*words):
    root = dict()
    for word in words:
        current_dict = root
        for letter in word:
            current_dict = current_dict.setdefault(letter, {})
        current_dict = current_dict.setdefault(_end, _end)
    return root
  

 Then define a function like  in_trie  from the answer above, but checking whether a key is a  strict prefix  of another key: 

  def is_strict_prefix_of_word_in_trie(trie, word):
   current_dict = trie
   for letter in word:
       if letter in current_dict:
           current_dict = current_dict[letter]
       else:
           return False
   else:
       if _end in current_dict:
           return False # it's actually in the trie
       else:
           return True # it's a strict prefix of a word in the trie
  

 Finally, perform your deletions like so: 

  def reduce_dict(dictionary):
    trie = make_trie(dictionary.keys())
    reduced = dictionary.copy()
    for key in dictionary:
       if is_strict_prefix_of_word_in_trie(trie, key):
           reduced.pop(key, 0)
    return reduced
  

 Or you can use dictionary comprehension: 

  def reduce_dict(dictionary):
    trie = make_trie(dictionary.keys())
    return {key: value for (key, value) in dictionary \
            if not is_strict_prefix_of_word_in_trie(trie, key)}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31044439)
  del myDict[item]
for key, value in myDict.items():
    if item in value:
        myDict[key] = value.difference(set([item]))
  

 You can use something like this. First remove the  item  from dictionary, then remove all occurances of it from values using set difference. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17665967)
  This will likely be faster than creating a new one using dictionary comprehensions: 

  def without(d, key):
    new_d = d.copy()
    new_d.pop(key)
    return new_d
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34416060)
 Using the same dictionnary, not a one-liner though. Also note that original post said "part of tupple appears in key" so it hasn't to be in the beginning i.e  startswith()  

  >>> d = {
...      (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Me'): 300, 
...      (u'A_String_0', u'B_String_4'): 301, 
...      (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Key'): 301,
...     }
>>> for k in d.keys():
...     for i in k:
...         if 'Remove_' in i:
...             del d[k]
...             break
... 
>>> d
{(u'A_String_0', u'B_String_4'): 301}
  



