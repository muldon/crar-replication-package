Query: Create a hierarchy from a dictionary of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34083824)
 I have fathomed the answer, but I am sure it could be more pythonic.  Here is my answer, please feel free to improve: 

  parentdict = {100: None, 200: 100, 300: 200, 400: 100, 500: None, 600: 300}
def getParent(p_child):
    level = 1
    thisparent = parentdict[p_child]
    while thisparent is not None:
        thisparent = parentdict[thisparent]
        level += 1
    return level



levelsdict = {}
for thing in parentdict.keys():
    thinglevel = getParent(thing)
    if thinglevel in levelsdict:
        templist = levelsdict[thinglevel]
        templist.append(thing)
        levelsdict[thinglevel] = templist
    else:
        levelsdict[thinglevel] = [thing]

print levelsdict

{1: [100, 500],2: [200,400], 3: [300], 4: [600]}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4980454)
 If a dictionary is acceptable, this code will create one: 

  import collections
d = collections.defaultdict(list)
for name, surname, *stuff in lol:
    d[name, surname].append(nums)
  

 Note that this requires Python 3 (http://www.python.org/dev/peps/pep-3132/). For Python 2, use 

  for x in lol:
    name = x[0]
    surname = x[1]
    stuff = x[2:]
  

 You may fold the variables to save lines. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49233966)
  numpy  syntax is convenient for this task: 

  import numpy as np

l = [[[1, 'a'], [2, 'b'], [3, 'c']],
     [[4, 'd'], [5, 'e'], [6, 'f']]]

a = np.array(l)

l1 = a[:, :, 0].astype(int).tolist()

# [[1, 2, 3], [4, 5, 6]]

l2 = a[:, :, 1].tolist()

# [['a', 'b', 'c'], ['d', 'e', 'f']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20230816)
 Other people already give the methord, I just write some code here: 

 First sort: 

  t = sorted(a.items(), key=lambda x: x[1])
  

 The build the structure 

  ret = {}

def build(ret, upv):
    if not t:
        return (None, None)
    k, v = t.pop(0)
    while k and v:
        if upv and v[:len(upv)] != upv:
            return (k, v)
        r = {}
        ret[k] = r
        k, v = build(r, v)
    return None, None

build(ret, None)
print ret
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34071783)
  SOLUTION AFTER MORE INFORMATION  

 The following solution should work even with no constraints on how the input is presented.     

  parentdict = {100: 200, 200: None, 300: 200, 400: 150, 500: None, 600: 300, 150: 100}
from collections import defaultdict
leveldict = defaultdict(int)
levellistdict = defaultdict(list)

def get_level(thing):
    if thing in leveldict:
        return leveldict[thing]
    elif parentdict[thing] == None:
        leveldict[thing] = 1
    else:
        parent_level = get_level(parentdict[thing])
        leveldict[thing] = 1 + parent_level
    return leveldict[thing]

for key in parentdict:
    leveldict[key] = get_level(key)
    levellistdict[leveldict[key]].append(key)

print leveldict
>> defaultdict(<type 'int'>, {100: 2, 200: 1, 300: 2, 400: 4, 500: 1, 150: 3, 600: 3})
print levellistdict
>> defaultdict(<type 'list'>, {1: [200, 500], 2: [100, 300], 3: [150, 600], 4: [400]})
  

 @Peter Its a little better than the solution you posted as the  get_level  function uses information that it has previously computed. As in if I have already computed the level of my parent I can use that to compute my level instead of traversing all the way up to find the root element (with parent as  None ). Your solution is perfectly fine as well but this one would be faster computationally and better when you have more levels. Let me know how this works. 

  SOLUTION BEFORE EDIT  

 For the toy example you have something like this should solve your purpose: 

  parentdict = {100: None, 200: 100, 300: 200, 400: 100, 500: None, 600:300}
from collections import defaultdict
leveldict = defaultdict(int)
levellistdict = defaultdict(list)
for key in parentdict:
    if parentdict[key] == None:
        leveldict[key] = 1
        levellistdict[1].append(key)
    else:
        level = leveldict[parentdict[key]] + 1
        leveldict[key] = level
        levellistdict[level].append(key)

print leveldict
>> defaultdict(<type 'int'>, {100: 1, 200: 2, 300: 3, 400: 2, 500: 1, 600: 4})
print levellistdict
>> defaultdict(<type 'list'>, {1: [100, 500], 2: [200, 400], 3: [300], 4: [600]})
  

 The solution maintains two dicts, one for the LEVEL of each THING and another for a list at each LEVEL. For any new item - if its parent is None we assign level 1 and if not we add 1 to the level of the parent and append to appropriate list. 

 Note that this assumes that the order of the THINGs in the dict is such that THINGS_PARENT always occurs before THING. Depending on how you are loading the data this can be ensured by using an OrderedDict if needed. . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4980893)
 List: 

  from itertools import groupby
lolol = [list(grp) for (match, grp) in groupby(lol, lambda lst: lst[:2])]
# [[['John', 'Polak', 5, 3, 7, 9], ['John', 'Polak', 7, 9, 2, 3]],
#  [['Mark', 'Eden', 0, 3, 3, 1], ['Mark', 'Eden', 5, 1, 2, 9]]]
  

 Dictionary: 

  dolol = dict((tuple(match), [x[2:] for x in grp]) for (match, grp) in 
             groupby(lol, lambda lst: lst[:2]))
# {('John', 'Polak'): [[5, 3, 7, 9], [7, 9, 2, 3]],
#  ('Mark', 'Eden'): [[0, 3, 3, 1], [5, 1, 2, 9]]}
  

 Since  itertools.groupby  works on consecutive matches, it assumes sorted input ( lol ).  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44537634)
 Here is my attempt to rewrite your  build  function: 

  def build(loc_key):

    children = [(item['id'], item['name']) for item in locations if item['loc'] == loc_key]

    data = {}
    for key, name in children:
        data[key] = {'name': name}
        for item in locations:
            if item['loc'] == key:
                data[key].update(build(key))

    return data 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44538826)
 . Hopefully useful to you. 

  import json


class TableDict(dict):
    """Table like data inside nested dictionary."""

    def __init__(self, **kwargs):
        super(TableDict, self).__init__({})
        self.keyorder = kwargs['keyorder']
        self.group_map = kwargs['group_map']

    def import_dictlist(self, dlist):
        """Import iterable of dictionaries."""
        for d in dlist:
            ptr = None
            for k in self.keyorder:
                val = d.pop(k)
                if ptr is None:
                    if val not in self:
                        self.update({val: {}})
                    ptr = self[val]
                else:
                    if val not in ptr:
                        ptr.update({val: {}})
                    ptr = ptr[val]
                self._get_dict_by_keys(ptr, d, k)
            if bool(d) is True:
                ptr.update({'values': d})

    def _get_dict_by_keys(self, t_d, d, key):
        """Add group keys to nested dict."""
        result = {}
        if key in self.group_map:
            for k in self.group_map[key]:
                if k in d:
                    result.update({k: d.pop(k)})
            if bool(result) is True:
                #t_d.update({'values': result})
                t_d.update(result)


if __name__ == '__main__':

    locations = [{'id': 'floor_1', 'name': 'floor_1 name', 'loc': 'root'},
                 {'id': 'floor_2', 'name': 'floor_2 name', 'loc': 'root'},
                 {'id': 'room_1-1', 'name': 'room_1-1 name', 'loc': 'floor_1'},
                 {'id': 'room_1-2', 'name': 'room_1-2 name', 'loc': 'floor_1'},
                 {'id': 'room_2-1', 'name': 'room_2-1 name', 'loc': 'floor_2'}]
    d = {'keyorder': ['loc', 'id'],
         'group_map': {'id':['name']}}

    td = TableDict(**d)
    td.import_dictlist(locations)

    print(json.dumps(td, indent =3))

  



