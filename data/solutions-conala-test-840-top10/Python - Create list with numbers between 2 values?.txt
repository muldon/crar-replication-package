Query: Python - Create list with numbers between 2 values?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18266013)
  

  range(x1,x2+1)  
  

 That is a list in Python 2.x and behaves mostly like a list in Python 3.x.  If you are running Python 3 and need a list that you can modify, then use:  

  list(range(x1,x2+1))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41311601)
 Here's an approach - 

  a = np.arange(1,1001) # Input array to extract numbers from

# Select 100 random unique numbers from input array and get also store leftovers
p1 = np.random.choice(a,size=100,replace=0)
p2 = np.setdiff1d(a,p1)

# Get random indices for indexing into p1 and p2
p1_idx = np.random.randint(0,p1.size,(8000))
p2_idx = np.random.randint(0,p2.size,(2000))

# Index and concatenate and randomize their positions
out = np.random.permutation(np.hstack((p1[p1_idx], p2[p2_idx])))
  

 Let's verify after run - 

  In [78]: np.in1d(out, p1).sum()
Out[78]: 8000

In [79]: np.in1d(out, p2).sum()
Out[79]: 2000
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33325708)
 Try this, a recursive implementation that returns a list of numbers by first calculating the list of previous values: 

  def fib(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 1]
    else:
        lst = fib(n-1)
        lst.append(lst[-1] + lst[-2])
        return lst
  

  

  fib(8)
=> [0, 1, 1, 2, 3, 5, 8, 13, 21]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18265987)
 assuming you want to have a range between x to y 

  range(x,y+1)

>>> range(11,17)
[11, 12, 13, 14, 15, 16]
>>>
  

 use list for 3.x support 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18662215)
 Create a list consisting of 0 and 1, then add 99 random numbers.  Sort the list.  Successive differences will be the lengths of intervals that add up to 1. 

 I'm not fluent in Python, so forgive me if there's a more Pythonic way of doing this.  I hope the intent is clear though: 

  import random

values = [0.0, 1.0]
for i in range(99):
    values.append(random.random())
values.sort()
results = []
for i in range(1,101):
    results.append(values[i] - values[i-1])
print results
  

 

 Here's an updated implementation in Python 3: 

  import random

def sum_to_one(n):
    values = [0.0, 1.0] + [random.random() for _ in range(n - 1)]
    values.sort()
    return [values[i+1] - values[i] for i in range(n)]

print(sum_to_one(100))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18265971)
 You seem to be looking for http://docs.python.org/2/library/functions.html#range: 

  >>> x1=11
>>> x2=16
>>> range(x1, x2+1)
[11, 12, 13, 14, 15, 16]
>>> list1 = range(x1, x2+1)
>>> list1
[11, 12, 13, 14, 15, 16]
  

 For incrementing by  0.5  instead of  1 , say: 

  >>> list2 = [x*0.5 for x in range(2*x1, 2*x2+1)]
>>> list2
[11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47636949)
 Every answer above assumes range is of positive numbers only. Here is the solution to return list of consecutive numbers where arguments can be any (positive or negative), with the possibility to set optional step value (default = 1). 

  def any_number_range(a,b,s=1):
""" Generate consecutive values list between two numbers with optional step (default=1)."""
if (a == b):
    return a
else:
    mx = max(a,b)
    mn = min(a,b)
    result = []
    # inclusive upper limit. If not needed, delete '+1' in the line below
    while(mn < mx + 1):
        # if step is positive we go from min to max
        if s > 0:
            result.append(mn)
            mn += s
        # if step is negative we go from max to min
        if s < 0:
            result.append(mx)
            mx += s
    return result
  

 For instance, standard command  list(range(1,-3))  returns empty list  [] , while this function will return  [-3,-2,-1,0,1]  

  Updated : now step may be negative. . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18265979)
 Use http://docs.python.org/2.7/library/functions.html#range. In Python 2.x it returns a list so all you need is: 

  >>> range(11, 17)
[11, 12, 13, 14, 15, 16]
  

 In Python 3.x <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range"  is a iterator. So, you need to convert it to a list: 

  >>> list(range(11, 17))
[11, 12, 13, 14, 15, 16]
  

  Note : The second number is exclusive. So, here it needs to be  16+1  =  17  

 EDIT: 

 To respond to the question about incrementing by  0.5 , the easiest option would probably be to use https://pypi.python.org/pypi/numpy's  arange , 

  >>> numpy.arange(11, 17, 0.5)
array([ 11. ,  11.5,  12. ,  12.5,  13. ,  13.5,  14. ,  14.5,  15. ,
        15.5,  16. ,  16.5])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36002096)
 If you are looking for range like function which works for float type, then here is a very good http://pythoncentral.io/pythons-range-function-explained/. 

  def frange(start, stop, step=1.0):
    ''' "range()" like function which accept float type''' 
    i = start
    while i < stop:
        yield i
        i += step
# Generate one element at a time.
# Preferred when you don't need all generated elements at the same time. 
# This will save memory.
for i in frange(1.0, 2.0, 0.5):
    print i   # Use generated element.
# Generate all elements at once.
# Preferred when generated list ought to be small.
print list(frange(1.0, 10.0, 0.5))    
  

 Output: 

  1.0
1.5
[1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
  



