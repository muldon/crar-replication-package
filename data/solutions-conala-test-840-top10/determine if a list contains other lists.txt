Query: determine if a list contains other lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22483784)
 Use the  in  keyword to determine if a  list  (or any other Python container) contains an element: 

  totalList = [ [[0,1], [2,7], [6,3]], [[2,3], [6,1], [4,1]] ]
redList = [ [0,1], [2,7], [6,3] ]
redList in totalList
  

 returns 

  True
  

 

  

  if redList in totalList:
    #do stuff
  

 Your code will then  do stuff . 

 

 
   I need to know if totalList contains a list that has exactly the same elements as redList. 
 

 We see that list implements  __contains__  

  >>> help(list.__contains__)
Help on wrapper_descriptor:

__contains__(...)
    x.__contains__(y) <==> y in x
  

 and from the docs: 

 
    __contains__ 
  http://docs.python.org/2/reference/expressions.html#membership-test-details  
 

 And: 

 
   http://docs.python.org/2/reference/expressions.html#not-in x in s evaluates to true if x is a member of the collection s, and false otherwise. x not in s returns the negation of x in s. The collection membership test has traditionally been bound to sequences; an object is a member of a collection if the collection is a sequence and contains an element equal to that object. However, it make sense for many other object types to support membership tests without being a sequence. In particular, dictionaries (for keys) and sets support membership testing. 
  
   For the list and tuple types, x in y is true if and only if there
  exists an index i such that x == y[i] is true. 
 

 So we know that one of the elements must be equal to that of redList. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5251796)
 You can take phihag's answer even further if you actually want a  list  of all the lists inside the list: 

  output_list = filter( lambda x: isinstance(x,list), input_list)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50180401)
 Here is a solution using https://docs.python.org/3/library/collections.html#collections.Counter 

  from collections import Counter

def is_superset(l1, l2):
    c1, c2 = Counter(l1), Counter(l2)
    return all(c1[k] >= c2[k] for k in c2)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50180480)
 Here's an inefficient solution that verifies that for each element in the sublist, its occurrence number in the sublist must be lower or equal than its occurrence number in the superlist: 

  def is_superset(l1, l2):
    return all([l1.count(item) >= l2.count(item) for item in l2])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50180446)
 Another solution using https://docs.python.org/3/library/collections.html#collections.Counter and the builtin intersection method: 

  from collections import Counter

def is_superset(l1, l2):
    c1, c2 = Counter(l1), Counter(l2)
    return c1 & c2 == c2
  

  

  >>> l1 = [2, 2, 3]
>>> l2 = [2, 2]
>>> l3 = [3, 2]
>>> l4 = [2, 2, 2]
>>> l5 = [2, 5, 2]
>>> is_superset(l1, l2)
True
>>> is_superset(l1, l3)
True
>>> is_superset(l1, l4)
False
>>> is_superset(l1, l5)
False
>>>
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46985006)
 You can use  set.issubset()  for this purpose.  

  if not set(A).issubset(B):
    print("True")
else:
    print("False")
  

   

  A = [0, 1, 0, 2, 0]
B = [0, 1]
  

 Output:  True  

  

  A = [0, 1, 0, 1, 0]
B = [0, 1]
  

 Output:  False  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51726143)
 You can iterate through the list of numbers in blocks of three: 

  def hasThreeContiguousEvenOrOdd(numbers):
    for i in range(len(numbers) - 2):
        a, b, c = numbers[i:i + 3]
        if a % 2 == 0 and b % 2 == 0 and c % 2 == 0:
            return True
        elif a % 2 == 1 and b % 2 == 1 and c % 2 == 1:
            return True
    return False

numbers1 = [2, 1, 3, 5]
numbers2 = [2, 1, 2, 5]
numbers3 = [2, 4, 2, 5]

print(numbers1, hasThreeContiguousEvenOrOdd(numbers1))
print(numbers2, hasThreeContiguousEvenOrOdd(numbers2))
print(numbers3, hasThreeContiguousEvenOrOdd(numbers3))
  

 Output: 

  [2, 1, 3, 5] True
[2, 1, 2, 5] False
[2, 4, 2, 5] True
  

 If you want to be more idiomatic or "pythonic" you can improve the code and do for example something like this: 

  def hasThreeContiguousEvenOrOdd(numbers):
    for a, b, c in zip(numbers, numbers[1:], numbers[2:]):
        if a % 2 == b % 2 == c % 2:
            return True
    return False
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51726102)
 You can use https://docs.python.org/3/library/itertools.html#itertools.groupby: 

  from itertools import groupby

def check_list(lst):
    for k, g in groupby(lst, key=lambda x: x % 2):
        if len(list(g)) == 3:
            return True
    return False    

print(check_list([2, 1, 3, 5]))  # True
print(check_list([2, 1, 2, 5]))  # False
print(check_list([2, 4, 2, 5]))  # True
  

 This can be easily adjusted for any group size. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5889665)
 Not falsey  not empty lists: 

 Not falsey: 

  any(someDict.values())
  

 Not empty lists: 

  any(a != [] f a in someDict.values())
  

  

  any(map(lambda x: x != [], someDict.values()))
  

 Or if you are ok with a falsey return value: 

  filter(lambda x: x != [], someDict.values())
  

 Returns a list of items that are not empty lists, so if they are all empty lists it's an empty list :) 



