Query: Transforming the string representation of a dictionary into a real dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4127355)
 You can use http://docs.python.org/library/ast.html#ast.literal_eval: 

  >>> import ast
>>> ast.literal_eval('{' + s + '}')
{128: 128, 125: 126, 126: 126, 127: 128}
  

 Note that this requires Python 2.6 or newer. 

 An alternative is to split the string on  ','  and then split each piece on  ':'  and construct a  dict  from that: 

  >>> dict(map(int, x.split(':')) for x in s.split(','))
{128: 128, 125: 126, 126: 126, 127: 128}
  

 Both examples assume that your initial string is in a variable called  s : 

  >>> s = '125:126, 126:126, 127:128, 128:128'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47834152)
  

  dict = {'a':0, 'b':1, 'c':2}
new_dict = {b:a for a, b in dict.items()}
data = [2, 0, 5, 1, 0]
final_data = [''.join([new_dict[a%3] for a in data])]
  

 Output: 

  ['cacba']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52530132)
 To convert to a dict: 

 Code:</h3>

  data = '[100:0.345,123:0.34,145:0.86]'

new_data = dict(y.split(':') for y in (x.strip().strip('[').strip(']')
                                       for x in data.split(',')))

print(new_data)
  

 Or if you need numbers not strings: 

  new_data = dict((map(float, y.split(':'))) for y in (
    x.strip().strip('[').strip(']') for x in data.split(',')))
  

 Results:</h3>

  {'100': '0.345', '123': '0.34', '145': '0.86'}

{145.0: 0.86, 123.0: 0.34, 100.0: 0.345}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52124042)
 You can use a dictionary comprehension with  GroupBy : 

  res = {k: v.set_index('Day')['Hours_Worked'].to_dict() for k, v in df.groupby(['Employee'])}

# {'John': {'Monday': 2, 'Tuesday': 4}, 'Tom': {'Monday': 5, 'Tuesday': 3}}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52530103)
 It's showing as invalid syntax because it has the wrong brackets, so you could do  

  ast.literal_eval(a.replace("[","{").replace("]", "}"))
  

 Or alternatively parse the string yourself in a dictionary comprehension 

  {x.split(":")[0]: x.split(":")[1] for x in a[1:-1].split(",")}
  

 and if as mentioned there are  [  or  ]  elsewhere in your string the following may be more robust 

  ast.literal_eval("{" + a[1:-1] +"}")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47834251)
 Create method like this;  

   def get_letter(number){
    if number%3 == 0:
      data[i] ='a'
    if number%3 == 1:
      data[i] ='b'
    if number%3 == 2:
      data[i] ='c'
}
  

 And call in main function; 

     data = [2, 0, 5, 1, 0]
    data2 = []

    for i in range (len(data)):
       data2.append(get_letter(data[i])); 

    print data2; 
  



