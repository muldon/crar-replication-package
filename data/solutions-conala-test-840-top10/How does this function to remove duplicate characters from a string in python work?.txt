Query: How does this function to remove duplicate characters from a string in python work?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29360958)
 By list comprehension 

  print ' '.join([character for index, character in enumerate(foo) if character not in foo[:index]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35803909)
 You can use  itertools.groupby()  to replace all consecutive runs of characters by only a single occurrence (which seems to be what you are trying to do): 

  >>> "".join(k for k, it in itertools.groupby("bookkeeper"))
'bokeper'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18799050)
 Using http://docs.python.org/2/library/itertools.html#itertools.groupby: 

  >>> foo = "SSYYNNOOPPSSIISS"
>>> import itertools
>>> ''.join(ch for ch, _ in itertools.groupby(foo))
'SYNOPSIS'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29463129)
 The reason your solution doesn't work is because  str.strip()  only removes characters from the outsides of the string, i.e. characters on the leftmost or rightmost end of the string. So, in the case of  'foobar' ,  str.strip()  with a single character argument would only work if you wanted to remove the characters  'f'  and  'r' . 

 You  could  eliminate more of the inner characters with strip, but you would need to include one of the outer characters as well. 

  >>> 'foobar'.strip('of')
'bar'
>>> 'foobar'.strip('o')
'foobar'
  

 Here's how to do it by string-joining a generator expression: 

  def eliminate(s, bad_characters):
    bc = set(bad_characters)
    return ''.join(c for c in s if c not in bc)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46850944)
 Strings are  immutable , so your only main option is to create a  new string  by   slicing  and  assign  it back. 

  #removing the last char

>>> s = 'abcd'
>>> s = s[:-1]
=> 'abc'
  

 Another easy to go method maybe to use  list  and then  join  the elements in it to create your string. Ofcourse, it all  depends on your preference . 

  >>> l = ['a', 'b', 'c', 'd']
>>> ''.join(l)
=> 'abcd'

>>> l.pop()
=> 'd'

>>> ''.join(l)
=> 'abc'
  

 

 Incase you are looking to  remove char at a certain index  given by  pos  (index 0 here), you can  slice  the string as : 

  >>> s='abcd'

>>> s = s[:pos] + s[pos+1:]
=> 'abd'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37092924)
 The reason you function don't work properly is you first  if x[0]==x[-1] , there you check the first and last character of the substring of the moment, but that leave pass many possibility like  affffffa  or  asdkkkkkk  for instance, let see why: 

 example 1:  'affffffa'  

 here is obvious right? 

 example 2:  'asdkkkkkk'  

 here we go for case 3 of your function, and then again 

  'a' +rd('sdkkkkkk')
'a'+'s' +rd('dkkkkkk')
'a'+'s'+'d' +rd('kkkkkk')
  

 and when we are in  'kkkkkk'  it stop because the first and last are the same 

 example 3:  'asdfhhhhf'  

 here is the same as example 2, in the recursion chain we arrive to  fhhhhf  and here the first and last are the same so it leave untouched  

 How to fix it?, simple, as other have show already, check for the length of the string first 

  def rd(x):
    if len(x)<2: #if my string is 1 or less character long leave it untouched 
        return x
    elif x[0]==x[1]:
        return rd(x[1: ])
    else:
        return x[0]+rd(x[1: ])
  

 

 here is alternative and iterative way of doing the same: you can use the  unique_justseen  recipe from https://docs.python.org/3/library/itertools.html#itertools-recipes 

  from itertools import groupby
from operator import itemgetter

def unique_justseen(iterable, key=None):
    "List unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --> A B C A D
    return map(next, map(itemgetter(1), groupby(iterable, key)))

def clean(text):
    return "".join(unique_justseen(text)
  

  

  >>> clean("abcdefggggggggghijk")
'abcdefghijk'
>>> clean("abcdefghijkkkkkkkk")
'abcdefghijk'
>>> clean("abcdeffffffghijk")
'abcdefghijk'
>>> 
  

 and if you don't want to import anything, here is another way 

  def clean(text):
    result=""
    last=""
    for c in text:
        if c!=last:
            last = c
            result += c
    return result
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9841401)
 If order  does   matter, how about: 

  >>> foo = 'mppmt'
>>> ''.join(sorted(set(foo), key=foo.index))
'mpt'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16560636)
  >>> from string import digits, whitespace
>>> from collections import OrderedDict
>>> s = set(whitespace + digits)
>>> ''.join(OrderedDict((object() if c in s else c, c) for c in text).values())
'12 men wr oud i a xpls yt  3:00.'
  

  object()  here is just used to make sure the keys for characters you want to leave are  always unique  since  object()  creates a different object each time. The other characters are used as the keys themselves so duplicates are filtered. 



