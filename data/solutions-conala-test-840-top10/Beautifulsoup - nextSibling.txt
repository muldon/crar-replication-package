Query: Beautifulsoup - nextSibling
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48734658)
 Try this if you use bs4: 

  print soup.find(string="Address:").find_next('td').contents[0]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2613587)
 If  tag  is the innermost table, then 

  tag.findNextSibling('h2')
  

  

   This is hell! 
  

 To literally get the next sibling, you could use  tag.nextSibling ,
which in this case, is  u'\n' .  

 If you want the next sibling that is not a NavigableString (such as  u'\n' ), then you could use 

  tag.findNextSibling(text=None)
  

 If you want the second sibling (no matter what it is), you could use 

  tag.nextSibling.nextSibling
  

 (but note that if  tag  does not have a next sibling, then  tag.nextSibling    None , and  tag.nextSibling.nextSibling  will raise an  AttributeError .) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5690771)
  .nextSibling  will  grab white text. So in the actual page I'm working with, there is white text between the  <h4>  and     tags, which is why I have to double.  

  Evidence  

 Writing: 

  print tag.__class__
print tag.nextSibling.__class__
print tag.nextSibling.nextSibling.__class__
  

 Yields: 

  <class 'BeautifulSoup.Tag'>
<class 'BeautifulSoup.NavigableString'>
<class 'BeautifulSoup.Tag'>
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5999786)
 The problem is that you have found a  NavigableString , not the  <td> . Also  nextSibling  will find the next  NavigableString   or   Tag  so even if you had the  <td>  it wouldn't work the way you expect. 

 This is what you want: 

  address = soup.find(text="Address:")
b_tag = address.parent
td_tag = b_tag.parent
next_td_tag = td_tag.findNext('td')
print next_td_tag.contents[0]
  

  

  print soup.find(text="Address:").parent.parent.findNext('td').contents[0]
  

  

  print soup.find(text="Address:").findNext('td').contents[0]
  

 Since  findNext  just calls  next  over and over again, and  next  finds the next element  as parsed  repeatedly until it matches. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2507405)
  node.nextSibling  attribute is your solution: 

  from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(html)

nextNode = soup.find('p', {'class': 'top'})
while True:
    # process
    nextNode = nextNode.nextSibling
    if getattr(nextNode, 'name', None)  == 'p' and nextNode.get('class', None) == 'end':
        break
  

 This complicated condition is to be sure that you're accessing attributes of HTML tag and not string nodes. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5999799)
 You can use  findChildren  pretty easily to iterate over the td's in a table, assuming it's in a table. You could find the table first, ideally: 

  table = soup.find('table')
>>> for td in table.findChildren('td'):
...:     print td.text
...:     
...:     
Address:
My home address
  

 Or you could search for address, and get the table container: 

  >>> import re
>>> search = re.compile('Address')
>>> table = soup.find(text=search).parent.parent.parent
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45758791)
 Text elements are also considered child elements of the parent element. 

 If you find  tag1 , you can find the text before and after in the attributes  .previousSibling  and  .nextSibling . Or, you can find the parent tag, and then select the appropriate children. 

 Example: 

  from bs4 import BeautifulSoup
# assuming BeautifulSoup 4

doc = """
words1 outside of a Tag <tag1>words2 inside of tag1</tag1>
words3 outside of a Tag
"""

soup = BeautifulSoup(doc, 'html.parser')
tag = soup.find('tag1')
tag.previousSibling.replaceWith('changed word1 ')
tag.nextSibling.replaceWith(' changed word3')

print(soup)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30290095)
 Here is what written in the official documentation:
http://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-down 

 In real documents, the . .previous_sibling of a tag will usually be a string containing whitespace. Going back to the “three sisters” document: 

  http://example.com/elsie
http://example.com/lacie
http://example.com/tillie
  

  .next_sibling of the first  tag would be the second  tag. But actually, it’s a string: the comma and newline that separate the first  tag from the second: 

  link = soup.a
link
# <a class="sister" href="http://example.com/elsie" id="link1">Elsie 

link.next_sibling
# u',\n'
  

 The second  tag is actually the . 

  link.next_sibling.next_sibling
# <a class="sister" href="http://example.com/lacie" id="link2">Lacie 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33772827)
 To get the next  td , use the  nextSibling  function.  It can be a little tricky because blank spaces can be considered the next sibling, so you have to try a few things.  I modified your code to be: 

  table = plan1.find('table', id = 'planComparison')
pcp = table.find('td',text=' Doctor Visit - Primary Care ')
print(pcp.nextSibling.nextSibling.text)
  

 The output is: 

  Copay: No Charge after deductible; Coinsurance: No Charge after deductible
  

 Note I had to call  nextSibling  twice to get to the  td  tag you wanted, and then called  text  to get rid of the  <td>  tags. 

 Also note that I specified that you wanted a  td  in the  find  instead of the general  findChildren . 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/11809215)
 I would avoid nextSibling, as from your question, you want to include everything up until the next  <a> , regardless of whether that is in a sibling, parent or child element.  

 Therefore I think the best approach is to find the node that is the next  <a>  element and loop recursively until then, adding each string as encountered. You may need to tidy up the below if your HTML is vastly different from the sample, but something like this should work: 

  from bs4 import BeautifulSoup
#by taking the `html` variable from the question.
html = BeautifulSoup(html)
firstBigTag = html.find_all('big')[0]
nextATag = firstBigTag.find_next('a')
def loopUntilA(text, firstElement):
    text += firstElement.string
    if (firstElement.next.next == nextATag):             
        return text
    else:
        #Using double next to skip the string nodes themselves
        return loopUntilA(text, firstElement.next.next)
targetString = loopUntilA('', firstBigTag)
print targetString
  



