Query: convert an int to a hex string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/209529)
  int(hexString, 16)  does the trick, and works with and without the 0x prefix: 

  >>> int("a", 16)
10
>>> int("0xa",16)
10
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/209530)
 For any given string s: 

  int(s, 16)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30270489)
 In Python 2.7,  int('deadbeef',10)  doesn't seem to work.  

 The following works for me: 

  >>a = int('deadbeef',16)
>>float(a)
3735928559.0
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2269863)
 This will convert an integer to a 2 digit hex string with the 0x prefix: 

  strHex = "0x%0.2X" % 255
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41959873)
 Since you are having string of  hex  values. You may remove  ' 0x'  from the string to get the single hex number string. For example: 

  my_str =  "0x00 0x01 0x13 0x00"
hex_str = my_str.replace(' 0x', '')
  

 where value hold by  hex_str  will be: 

  '0x00011300'   # `hex` string
  

 Now you may convert  hex  string to  int  as: 

  >>> int(hex_str, 16)
70400
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21187085)
  

  >>> def hex_to_int(x):
    return eval("0x" + x)

>>> hex_to_int("c0ffee")
12648430
  

    

 https://stackoverflow.com/questions/1832940/is-using-eval-in-python-a-bad-practice 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28489512)
 Here's a general function you can use for hex of any size: 

  import math

# hex string to signed integer
def htosi(val):
    uintval = int(val,16)
    bits = 4 * (len(val) - 2)
    if uintval >= math.pow(2,bits-1):
        uintval = int(0 - (math.pow(2,bits) - uintval))
    return uintval
  

 And to use it: 

  h = str(hex(-5))
h2 = str(hex(-13589))
x = htosi(h)
x2 = htosi(h2)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26834694)
 Using https://docs.python.org/2/library/struct.html#struct.unpack: 

  >>> struct.unpack('>I', '\xFF\xFF\xFF\xFF')  # >, !: big (network) endian
(4294967295,)
>>> hex(struct.unpack('>I', '\xFF\xFF\xFF\xFF')[0])
'0xffffffff'

>>> struct.unpack('>H', '\x00\xff')
(255,)
>>> '0x{:04x}'.format(struct.unpack('>H', '\x00\xff')[0])
'0x00ff'
>>> '0x{:04X}'.format(struct.unpack('>H', '\x00\xff')[0])
'0x00FF'
  

 https://docs.python.org/2/library/struct.html#format-characters used: 

 
  I : 4-bytes unsigned int 
  H : 2-bytes unsinged int 
 

 

  UPDATE  

 If you indent to convert arbitrary binary string into hex string, you can use https://docs.python.org/2/library/binascii.html#binascii.hexlify: 

  >>> import binascii
>>> '0x' + binascii.hexlify('\xFF\xFF\xFF')
'0xffffff'
>>> '0x' + binascii.hexlify('\x00\x00\xFF')
'0x0000ff'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13324727)
 Iterate over the string chars, then convert each char to int ( int(a,16) ), then apply xor, reconvert to hex with  hex , strip the leading '0x' with  [2:] , and finally join everything  

  stra = 'abc'
strb = 'abd'
''.join(hex( int(a,16) ^ int(b,16) )[2:] for a,b in zip(stra, strb))
  

 Note that, as pointed in the comments, it will work only if the two strings have the same length. Otherwise some chars of the longer string will be ignored. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36567681)
 You can use  int  with  base  argument to convert hexadecimal number string to  int : 

  >>> int('15', base=16)
21
  

 

  >>> val = 15
>>> int(str(val), base=16)
21
  

  UPDATE  

 To use https://docs.python.org/2/library/struct.html#struct.unpack, first conver the  hex_string  to binary data using https://docs.python.org/2/library/binascii.html#binascii.unhexlify (or https://docs.python.org/2/library/binascii.html#binascii.a2b_hex): 

  >>> import struct, binascii
>>> hex_string = "DEADBEEF"
>>> binascii.unhexlify(hex_string)  # Hexa decimal -> binary data
'\xde\xad\xbe\xef'

>>> struct.unpack('4B', binascii.unhexlify(hex_string))  # 4 = 8 / 2
(222, 173, 190, 239)
>>> struct.unpack('4B', binascii.unhexlify(hex_string)) == (0xDE, 0xAD, 0xBE, 0xEF)
True
>>> struct.unpack('{}B'.format(len(hex_string) // 2), binascii.unhexlify(hex_string))
(222, 173, 190, 239)
  



