Query: Python split a list into subsets based on pattern
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13368845)
 Use  itertools ' http://docs.python.org/2/library/itertools.html#itertools.groupby: 

  def get_field_sub(x): return x.split('_')[1]

mylist = sorted(mylist, key=get_field_sub)
[ (x, list(y)) for x, y in groupby(mylist, get_field_sub)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8135803)
  

  from itertools import permutations

lst = list(range(1, 10))

n = 3
triplets = list(permutations(lst, n))
triplets = [set(x) for x in triplets]

def array_unique(seq):  
    checked = [] 
    for x in seq:
        if x not in checked: 
            checked.append(x) 
    return checked

triplets = array_unique(triplets)

result = []
m = n * 3
for x in triplets:
    for y in triplets:
        for z in triplets:
            if len(x.union(y.union(z))) == m:
                result += [[x, y, z]]

def groups(sets, i):
    result = [sets[i]]

    for x in sets:
        flag = True
        for y in result:
            for r in x:
                for p in y:
                    if len(r.intersection(p)) >= 2:
                        flag = False
                        break
                    else:
                        continue
                if flag == False:
                    break
        if flag == True:
            result.append(x)

    return result

for i in range(len(result)):
    print('%d:' % (i + 1))
    for x in groups(result, i):
        print(x)
  

 Output for n = 10:
http://pastebin.com/Vm54HRq3 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30461795)
<pre class="lang-py prettyprint-override"> from itertools import permutations

a = range(2)


# get all the possible combinations

indexes = ','.join([str(i) for i in range(len(a))])+","
comb = []
perms = [''.join(p) for p in permutations(indexes)]
for x in perms:
    candidate = [[int(i) for i in  list(s)] if len(s) !=0 else [] for s in x.split(',') ]
    if candidate not in comb and [row[::-1] for row in candidate] not in comb:
        comb.append(candidate)

for item in comb:
    print item
  



<pre class="lang-py prettyprint-override"> >>
 [[0], [1], []]
 [[0], [], [1]]
 [[0, 1], [], []]
 [[], [0, 1], []]
 [[], [0], [1]]
 [[], [1], [0]]
 [[], [], [0, 1]]
 [[1], [0], []]
 [[1], [], [0]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13368753)
 You could use https://docs.python.org/library/itertools.html#itertools.groupby: 

  >>> import itertools
>>> mylist = ['sub_0_a', 'sub_0_b', 'sub_1_a', 'sub_1_b']
>>> for k,v in itertools.groupby(mylist,key=lambda x:x[:5]):
...     print k, list(v)
... 
sub_0 ['sub_0_a', 'sub_0_b']
sub_1 ['sub_1_a', 'sub_1_b']
  

  

  >>> [list(v) for k,v in itertools.groupby(mylist,key=lambda x:x[:5])]
[['sub_0_a', 'sub_0_b'], ['sub_1_a', 'sub_1_b']]
  

 Of course, the common caveats apply (Make sure your list is sorted with the same key you're using to group), and you might need a slightly more complicated key function for real world data... 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28031379)
 Use a simple filter: 

  >>> l = ['a','b','c_L1', 'c_L2', 'c_L3', 'd', 'e', 'e_L1', 'e_L2']

>>> filter(lambda x: "_L" in x, l)
['c_L1', 'c_L2', 'c_L3', 'e_L1', 'e_L2']
  

 Alternatively, use a list comprehension 

  >>> [s for s in l if "_L" in s]
['c_L1', 'c_L2', 'c_L3', 'e_L1', 'e_L2']
  

 Since you need the prefix only, you can just split it: 

  >>> set(s.split("_")[0] for s in l if "_L" in s)
set(['c', 'e'])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28612757)
 You can split with the following pattern : 

  >>> [i for i in re.split(r'<![a-zA-Z]) |([\+\-\*\\])',s) if i]
['54', '3', "'hello world'", '5', '+', '4']
  

  <![a-zA-Z])  is http://www.regular-expressions.info/lookaround.html that split based on spaces that not preceding by any word character! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50374700)
 With regex 

 Use the negative set  [^\Wt]  to match any alphanumeric character that is not  t . To avoid matching subsets of words, add the word boundary metacharacter,  \b , at the beginning of your pattern. 

 Also, do not forget that you should use raw strings for regex patterns. 

  import re

text = 'this is a test'
match = re.findall(r'\b[^\Wt]\w*', text)

print(match) # prints: ['is', 'a']
  

 See the demo https://regex101.com/r/I9CaiZ/1. 

 Without regex 

 Note that this is also achievable without regex. 

  text = 'this is a test'
match = [word for word in text.split() if not word.startswith('t')]

print(match) # prints: ['is', 'a']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32471422)
 Here is a working solution. You can convert it to a list comprehension if you would like but it would be a rather ugly one. 

  my_list = [1, 2, 3, 1, 2, 1, 2, 3]

results = []
for i, x in enumerate(my_list):
    if i == 0:
        results.append([x])
        continue
    if x < my_list[i - 1]:
        results.append([x])
    else:
        results[-1].append(x)

print results
  



