Query: How to convert nested list of lists into a list of tuples in python 3.3?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1014499)
 As a python newbie I would try this 

  def f(t):
    if type(t) == list or type(t) == tuple:
        return [f(i) for i in t]
    return t

t = (1,2,[3,(4,5)]) 
f(t)
>>> [1, 2, [3, [4, 5]]]
  

  

  def f(t):
    return [f(i) for i in t] if isinstance(t, (list, tuple)) else t
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18938286)
 Just use a list comprehension: 

  nested_lst_of_tuples = [tuple(l) for l in nested_lst]
  

  

  >>> nested_lst = [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]
>>> [tuple(l) for l in nested_lst]
[('tom', 'cat'), ('jerry', 'mouse'), ('spark', 'dog')]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1855508)
 Maybe not the most pythonesque answer, but this works: 

  d = {}

a = [(1,5), (5,4), (13,3), (4,3), (3,2), (14,1), (12,1)]

for value in a:
     if value[0] not in d:
         d[ value[0] ] = []
     d[ value[0] ].append( a[1] )

print d.values()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1014669)
  def listit(t):
    return list(map(listit, t)) if isinstance(t, (list, tuple)) else t
  

 The shortest solution I can imagine. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18938334)
 You can use http://docs.python.org/3.3/library/functions.html#map: 

  >>> list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))
[('tom', 'cat'), ('jerry', 'mouse'), ('spark', 'dog')]
  

 This is equivalent to a list comprehension, except that  map  returns a generator instead of a list. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54227562)
 You can swap the key-value pairs in  d  for more efficient solution: 

  f = [('str1',7.0), ('str2',2.8), ('str3',11.2)]
d = {'aa':'str2', 'bb':'str3', 'cc':'str1'}
new_d = {b:a for a, b in d.items()}
new_f = [[a, b, new_d[a]] for a, b in f]
  

 Output: 

  [['str1', 7.0, 'cc'], ['str2', 2.8, 'aa'], ['str3', 11.2, 'bb']]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1855516)
  

  n_list = []
c_snd = None
for (fst, snd) in o_list:
  if snd == c_snd: n_list[-1].append(fst)
  else:
    c_snd = snd
    n_list.append([fst])
  

 Explanation: use  c_snd  to store the current second part of the tuple. If that changes, start a new list in  n_list  for this new second value, starting with  fst , otherwise add  fst  to the last list in  n_list . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10633553)
 In case of arbitrary nested lists(just in case): 

  def flatten(lst):
    result = []
    for element in lst: 
        if hasattr(element, '__iter__'):
            result.extend(flatten(element))
        else:
            result.append(element)
    return result

>>> flatten(output)
[12.2817, 12.2817, 0, 0, 8.52, 8.52]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36307987)
 We can (ab)use the fact that  json.loads  always produces Python lists for JSON lists, while  json.dumps  turns any Python collection into a JSON list: 

  import json

def nested_list(nested_collection):
    return json.loads(json.dumps(nested_collection))
  



