Query: How to check whether elements appears in the list only once in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3900221)
 i understood you want something like that: 

  [x for x in a if a.count(x) == 1]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3900273)
 For the second question you might want to check 

  sorted(a) == range(1, len(a) + 1)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3899878)
 When I read your question, I took a different meaning from it than mark did. If you want to check if a particular element appears only once, then 

  def occurs_once(a, item):
    return a.count(item) == 1
  

 will be true only if  item  occurs in the list exactly once.  

 See Pokes answer for the second question  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3899813)
 For your first question if your elements are hashable you can create a set containing the elements and check its length: 

  len(set(a)) == len(a)
  

 Alternatively you can use this function which can give better performance than the above if the result is False (but worse performance when the result is True): 

  def are_all_elements_unique(l):
    seen = set()
    for x in l:
        if x in seen:
            return False
        seen.add(x)
    return True
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31506697)
 You want to use  indexing  and  for  loop. 

  my_list = [1,2,25,1,67,8,9,1,99]
for i in range(len(my_list)): # len() returns length of an array
    if my_list[i] == 1: # here you check if 'i' element of my_list is equal to 1
        try:
            print(my_list[i+1]) # here you are printing 'i+1' element of my_list
        except IndexError:
            pass
  

 result of this code is: 

  2
67
99
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31413183)
 Your approach is right, https://stackoverflow.com/a/952952/842935. A https://stackoverflow.com/a/953097/842935: 

  import itertools
l=[['a','kl_hg', 'FOO'],['b', 'kl_c', 'po']]
if all( isinstance(x, basestring) for x in  itertools.chain.from_iterable(l) ):
    ...
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45696431)
 You can implement  try / except  block as below to check whether element present or not: 

  from selenium.common.exceptions import NoSuchElementException

try:
    element=driver.find_element_by_partial_link_text("text")
except NoSuchElementException:
    print("No element found")
  

 or check the same with one of  find_elements_...()  methods. It should return you empty list or list of elements matched by passed selector, but no exception in case no elements found: 

  elements=driver.find_elements_by_partial_link_text("text")
if not elements:
    print("No element found")  
else:
    element = elements[0]  
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36016349)
 Python 2: 

  def is_a_in_x(A, X):
  for i in xrange(len(X) - len(A) + 1):
    if A == X[i:i+len(A)]: return True
  return False
  

 Python 3: 

  def is_a_in_x(A, X):
  for i in range(len(X) - len(A) + 1):
    if A == X[i:i+len(A)]: return True
  return False
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35159332)
 If you want the count if the elements appear anywhere, get the union of all the sublists and see how many times each element from l2 appears in it: 

  l = [['20011', '20048'],
 ['20011', '20048'],
 ['20011', '20048'],
 ['20011', '20048']]


l2 = ['20011', '20048' ,'20011', '20048']
union = set.union(*map(set,l))
print(sum(ele in union for ele in l2)) # ->  4
  

 If you don't want to count unique elements more than once, get the intersection: 

  l = [['20011', '20048'],
     ['20011', '20048'],
     ['20011', '20048'],
     ['20011', '20048']]

l2 = ['20011', '20048', '20011', '20048']
inter = set.union(*map(set, l)).intersection(l2)

print(len(inter)) # ->  2
  

 If you want to use the elements from the sublists for the count: 

  l = [['20011', '20048'],
     ['20011', '20048'],
     ['20011', '20048'],
     ['20011', '20048']]

l2 = ['20011', '20048', '20011', '20048']
st = set(l2)
from itertools import chain
print(sum(ele in st for ele in chain.from_iterable(l)))
  

 To count based on the sublist being disjoint or not from  n , you can use  set.isdisjoint  so if there is any common elements  not st.isdisjoint(sub)  will be True.:  

  l = [['20011', '20048'],
     ['20011', '20048'],
     ['20011', '20048'],
     ['20011', '20048']]

l2 = ['20011', '20048', '20011', '20048']
st = set(l2)
print(sum(not st.isdisjoint(sub) for sub in l)) # -> 4
  



