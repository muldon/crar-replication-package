Query: Python: How can I execute a jar file through a python script
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22081569)
 This always works for me: 

  from subprocess import *

def jarWrapper(*args):
    process = Popen(['java', '-jar']+list(args), stdout=PIPE, stderr=PIPE)
    ret = []
    while process.poll() is None:
        line = process.stdout.readline()
        if line != '' and line.endswith('\n'):
            ret.append(line[:-1])
    stdout, stderr = process.communicate()
    ret += stdout.split('\n')
    if stderr != '':
        ret += stderr.split('\n')
    ret.remove('')
    return ret

args = ['myJarFile.jar', 'arg1', 'arg2', 'argN'] # Any number of args to be passed to the jar file

result = jarWrapper(*args)

print result
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7372651)
 I would use subprocess this way: 

  import subprocess
subprocess.call(['java', '-jar', 'Blender.jar'])
  

 But, if you have a properly configured  /proc/sys/fs/binfmt_misc/jar  you should be able to run the jar directly, as you wrote. 

 So, which is exactly the error you are getting?
Please post somewhere all the output you are getting from the failed execution. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48582289)
 The problem was with the jar that I was using. Before using the jar, Make sure that the jar is executing as expected. 

  Example:  
If your jar was dataflow_job1.jar, Execute the jar using  

  java -jar dataflow_job_1.jar --parameters_if_any
  

 Once your jar runs successfully, Proceed with using the jar in Airflow DataflowJavaOperator jar. 

  Furthermore,  
If you encounter errors related to Coders, you may have to make your own coder to execute the code. 
For instance, I had a problem with TableRow class as it didnot have a default coder and thus i had to make this up: 

 TableRowCoder : 

  public class TableRowCoder extends Coder<TableRow> {
private static final long serialVersionUID = 1L;
private static final Coder<TableRow> tableRow = TableRowJsonCoder.of();
@Override
public void encode(TableRow value, OutputStream outStream) throws CoderException, IOException {
    tableRow.encode(value, outStream);

}
@Override
public TableRow decode(InputStream inStream) throws CoderException, IOException {
    return new TableRow().set("F1", tableRow.decode(inStream));
}
@Override
public List<? extends Coder<?>> getCoderArguments() {
    // TODO Auto-generated method stub
    return null;
}
@Override
public void verifyDeterministic() throws org.apache.beam.sdk.coders.Coder.NonDeterministicException {


}
}
  

 Then Register this coder in your code using 

  pipeline.getCoderRegistry().registerCoderForClass(TableRow.class, new TableRowCoder())
  

 If there are still errors(which are not related to coders) Navigate to: 

  *.jar\META-INF\services\FileSystemRegistrar 
  

 and add any dependencies that may occur. 

 For example there might be a staging error as: 

  Unable to find registrar for gs
  

 i had to add the following line to make it work. 

  org.apache.beam.sdk.extensions.gcp.storage.GcsFileSystemRegistrar
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28561045)
 With args: concrete example using Closure Compiler (https://developers.google.com/closure/) from python 

  import os
import re
src = test.js
os.execlp("java", 'blablabla', "-jar", './closure_compiler.jar', '--js', src, '--js_output_file',  '{}'.format(re.sub('.js$', '.comp.js', src)))
  

 (also see here https://stackoverflow.com/questions/14174366/when-using-os-execlp-why-python-need-python-as-argv0) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8006165)
 Do you want to execute code from .jar, or open it? 

   .jar  file is the same format as  .zip  files and you can use  zipfile  module to manipulate it. Example: 

  def show_jar_classes(jar_file):
    """prints out .class files from jar_file"""
    zf = zipfile.ZipFile(jar_file, 'r')
    try:
        lst = zf.infolist()
        for zi in lst:
            fn = zi.filename
            if fn.endswith('.class'):
                print(fn)
    finally:
        zf.close()
  

 If you want to execute it then I prefer creating simple batch/shell script which execute  java  with some parameters like  -Xmx  and with environment settings required by application. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25686181)
 seems like sys.exec_prefix is what Iâ€™m looking for. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17167521)
 . Thanks to EnigmaCurry for providing the framework.  

 Jar Method from Jython wiki works quite well. The one drawback that it has is that all of the Java dependancies need to be exploded into the main jar root. This gets messy very quickly.   

 So the approach uses http://one-jar.sourceforge.net/. It is a special class loader which can load a jar from contained in the jar file.  

 So you can have your script/class, jython and other libraries all getting packaged as a single jar.  

 You can download the skeleton for achieving this from https://github.com/EnigmaCurry/Single-JAR-Jython-Example.  

 Once you get it put your scripts in src, put the other jars (including jython jar) in the lib folder, put one-jar source in its respective folder and just run the ant tool with 
build.xml provided.  

 You will get your jar then.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21510410)
 If you are using Linux you can use the os.system command: 

  os.system("your_java_file > out_put_file")
  

 This command will execute the file and print the output to the out_out_file
Then you can read the output file. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13633459)
 You need to split up the first arg into a list of your args; I think the reason you're getting no output is that your shell is looking to execute a file named "java -Xmx256m -jar bin/HelloWorld.jar" which clearly isn't going to exist.  You want  ["java", "-Xmx256m", "-jar", "bin/HelloWorld.jar"]  as the first arg instead, like: 

  cmd = ["java", "-Xmx256m", "-jar", "bin/HelloWorld.jar"]
cwd = r'/home/karen/sphinx4-1.0beta5-src/sphinx4-1.0beta5/'
p = subprocess.Popen(cmd, cwd=cwd, shell=True, stdout=subprocess.PIPE, bufsize=4024 )

out, err = p.communicate()
print out
  

 Re: wanting to execute non-blocking reads on stdout, see this https://stackoverflow.com/questions/4585692/python-nonblocking-subprocess-check-stdout.  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2552214)
 the following works for me : 

  import sys
import os

import java.lang.ClassLoader 
import java.io.InputStreamReader
import java.io.BufferedReader

loader = java.lang.ClassLoader.getSystemClassLoader()
stream = loader.getResourceAsStream("com/example/action/myAction.py")
reader = java.io.BufferedReader(java.io.InputStreamReader(stream))

script = ""                          
line = reader.readLine()
while (line != None) : 
    script += line + "\n"
    line = reader.readLine()

exec(script)
  

 
 Loading the Script from the ClassPath as a String in 'script'  
 exec the script with exec 
 



