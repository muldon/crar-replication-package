Query: How to create datetime object from "16SEP2012" in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18684426)
 Use http://docs.python.org/2/library/datetime.html#datetime.datetime.strptime: 

  >>> datetime.datetime.strptime('16Sep2012', '%d%b%Y')
datetime.datetime(2012, 9, 16, 0, 0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29688540)
 You can use the  datetime.datetime.strptime()  function to create a datetime object, then  datetime.datetime.strftime()  to return your correctly formatted date like so: 

  from datetime import datetime
dt = datetime.strptime('2015-04-08T07:52:00Z', '%Y-%m-%dT%H:%M:%SZ')
print dt.strftime('%d/%m/%Y')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30184930)
 Your format string is wrong, it should be this: 

  In [65]:

full_date = "May.02.1982"
import datetime as dt
dt.datetime.strptime(full_date, '%b.%d.%Y')
Out[65]:
datetime.datetime(1982, 5, 2, 0, 0)
  

 You then need to call  strftime  on a datetime object to get the string format you desire: 

  In [67]:

dt.datetime.strptime(full_date, '%b.%d.%Y').strftime('%Y-%m-%d')
Out[67]:
'1982-05-02'
  

  strptime  is for creating a datetime format from a string, not to reformat a string to another datetime string. 

 So you need to create a datetime object using  strptime , then call  strftime  to create a string from the datetime object. 

 The datetime format strings can be found in the https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior as well as an explanation of  strptime  and  strftime  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7651332)
 You just need to store an instance of datetime.datetime. 

 Inserting from the python shell: 

  >>> c.test.test.insert({'date': datetime.datetime.utcnow()})
ObjectId('4e8b388367d5bd2de0000000')
>>> c.test.test.find_one()
{u'date': datetime.datetime(2011, 10, 4, 16, 46, 59, 786000), u'_id': ObjectId('4e8b388367d5bd2de0000000')}
  

 Querying in the mongo shell: 

  > db.test.findOne()
{
    "_id" : ObjectId("4e8b388367d5bd2de0000000"),
    "date" : ISODate("2011-10-04T16:46:59.786Z")
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45903940)
 The  datetime64[ns]  dtype can represent dates between https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html#datetime-units. Since  datetime.max  lies outside this range, the dtype of the Series was changed to  object  and all the values converted to  datetime.datetime s so that the Series could hold the required range of datetimes. 

 Currently the nanosecond-frequency  datetime64[ns]  dtype (as opposed to say,  datetime64[s] , or  datetime64[Y] ) is the https://github.com/pydata/pandas/issues/7307. The https://pandas.pydata.org/pandas-docs/stable/timeseries.html#representing-out-of-bounds-spans is to use  pd.Period  or  pd.PeriodIndex  objects to represent dates outside the range representable by  datetime64[ns] : 

  import datetime as DT
import pandas as pd
s = pd.Series([DT.datetime(2012, 8, 1), DT.datetime(2013, 4, 1), DT.datetime.max])
p = s.apply(lambda x: pd.Period(x, freq='D'))
print(p)
  

  

  0   2012-08-01
1   2013-04-01
2   9999-12-31
dtype: object
  

 Notice that the  freq  parameter must be set to something larger than  ns 
to expand the allowable range of dates (at the expense of less granularity).
Here is a https://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases you can use for the  freq  parameter. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46339491)
 This answer should be helpful if you don't want to use any other modules besides  datetime . 

  datetime.utcfromtimestamp(timestamp)  returns a naive  datetime  object (not an aware one). Aware ones are timezone aware, and naive are not. You want an aware one if you want to convert between timezones (e.g. between UTC and local time). 

 If you aren't the one instantiating the date to start with, but you can still create a naive  datetime  object in UTC time, you might want to try this Python 3.x code to convert it: 

  import datetime

d=datetime.datetime.strptime("2011-01-21 02:37:21", "%Y-%m-%d %H:%M:%S") #Get your naive datetime object
d=d.replace(tzinfo=datetime.timezone.utc) #Convert it to an aware datetime object in UTC time.
d=d.astimezone() #Convert it to your local timezone (still aware)
print(d.strftime("%d %b %Y (%I:%M:%S:%f %p) %Z")) #Print it with a directive of choice
  

 Be careful not to mistakenly assume that if your timezone is currently MDT that daylight savings doesn't work with the above code since it prints MST. You'll note that if you change the month to August, it'll print MDT. 

 Another easy way to get an aware  datetime  object (also in Python 3.x) is to create it with a timezone specified to start with. Here's an example, using UTC: 

  import datetime, sys

aware_utc_dt_obj=datetime.datetime.now(datetime.timezone.utc) #create an aware datetime object
dt_obj_local=aware_utc_dt_obj.astimezone() #convert it to local time

#The following section is just code for a directive I made that I liked.
if sys.platform=="win32":
    directive="%#d %b %Y (%#I:%M:%S:%f %p) %Z"
else:
    directive="%-d %b %Y (%-I:%M:%S:%f %p) %Z"

print(dt_obj_local.strftime(directive))
  

 If you use Python 2.x, you'll probably have to subclass  datetime.tzinfo  and use that to help you create an aware  datetime  object, since  datetime.timezone  doesn't exist in Python 2.x. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22023130)
 Use http://docs.python.org/2/library/datetime.html#datetime.datetime.strptime to parse your strings to  datetime.datetime()  objects: 

  dt = datetime.datetime.strptime(date + ' ' + time, '%Y-%m-%d %H:%M:%S.%f')
  

 Now you can calculate the time elapsed: 

  elapsed = now - dt
  

 which is a  timedelta  object. 

  

  >>> import datetime
>>> now = datetime.datetime.now()
>>> date = '2014-02-19'
>>> time = '10:08:13.61'
>>> dt = datetime.datetime.strptime(date + ' ' + time, '%Y-%m-%d %H:%M:%S.%f')
>>> dt
datetime.datetime(2014, 2, 19, 10, 8, 13, 610000)
>>> now - dt
datetime.timedelta(6, 30419, 490913)
  

 The resulting  timedelta  object here has a value of 6 days, 30419 seconds and 490913 microseconds. . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5709532)
 You can convert any string representation into a datetime object using the  strptime  method. 

 Here's an example converting your string above into a datetime object: 

  import datetime

my_date = datetime.datetime.strptime('2011-07-15', '%Y-%m-%d')
  

 Now you'll have a datetime object which can be subtracted against other datetime objects naturally. 

 If you're subtracting two dates, Python produces a  datetime.timedelta  object. You can then strip all of this away to just the days by doing  print d.days  in your example above. 

 For further info on what you can do with the datetime library, see: http://docs.python.org/library/datetime.html 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48136708)
 One very clean way to implement this is using http://dateutil.readthedocs.io/en/stable/rrule.html from the  dateutil  library. For example: 

  >>> from dateutil.rrule import rrule, DAILY
>>> from datetime import datetime
>>> start_date = datetime.now()

>>> {d.strftime("%A"): d for d in rrule(freq=DAILY, count=7, dtstart=start_date)}
  

 which will return your desired  dict  object: 

  {  
     'Sunday': datetime.datetime(2018, 1, 7, 17, 2, 30),
     'Monday': datetime.datetime(2018, 1, 8, 17, 2, 30), 
     'Tuesday': datetime.datetime(2018, 1, 9, 17, 2, 30), 
     'Wednesday': datetime.datetime(2018, 1, 10, 17, 2, 30),
     'Thursday': datetime.datetime(2018, 1, 11, 17, 2, 30),
     'Friday': datetime.datetime(2018, 1, 12, 17, 2, 30), 
     'Saturday': datetime.datetime(2018, 1, 13, 17, 2, 30)
}
  

  (Special thanks to https://stackoverflow.com/users/1252759/jon-clements for telling me about  rrule )  



