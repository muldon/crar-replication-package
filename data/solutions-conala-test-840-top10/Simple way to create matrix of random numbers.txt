Query: Simple way to create matrix of random numbers
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38813529)
  x = np.int_(np.random.rand(10) * 10)
  

 For random numbers out of 10. For out of 20 we have to multiply by 20. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52458998)
 First, create  numpy  array then convert it into  matrix . See the code below: 

  import numpy

B = numpy.random.random((3, 4)) #its ndArray
C = numpy.matrix(B)# it is matrix
print(type(B))
print(type(C)) 
print(C)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48596358)
 use  np.random.randint()  as numpy.random.random_integers() is deprecated  

  random_matrix = numpy.random.randint(min_val,max_val,(<num_rows>,<num_cols>))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15451997)
 You can drop the  range(len()) : 

  weights_h = [[random.random() for e in inputs[0]] for e in range(hiden_neurons)]
  

 But really, you should probably use numpy. 

  In [9]: numpy.random.random((3, 3))
Out[9]:
array([[ 0.37052381,  0.03463207,  0.10669077],
       [ 0.05862909,  0.8515325 ,  0.79809676],
       [ 0.43203632,  0.54633635,  0.09076408]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24108452)
 Just use  [random.random() for i in range(N)]  inside your list comprehension. 

  

  >>> import random
>>> N = 3
>>> [random.random() for i in range(N)]
[0.24578599816668256, 0.34567935734766164, 0.6482845150243465]
>>> M = 3
>>> [[random.random() for i in range(N)] for j in range(M)]
[[0.9883394519621589, 0.6533595743059281, 0.866522328922242], [0.5906410405671291,         0.4429977939796209, 0.9472377762689498], [0.6883677407216132,     0.8215813727822125, 0.9770711299473647]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24108477)
 You can use list comprehensions.  

  [[random.random() for x in xrange(N)] for y in xrange(N)]
  

 https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions 

 For large multi dimensional arrays, I suggest you use numpy though.  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15451996)
 Take a look at http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html#numpy.random.rand: 

 
   Docstring: rand(d0, d1, ..., dn) 
  
   Random values in a given shape. 
  
   Create an array of the given shape and propagate it with random
  samples from a uniform distribution over  [0, 1) . 
 

 

  >>> import numpy as np
>>> np.random.rand(2,3)
array([[ 0.22568268,  0.0053246 ,  0.41282024],
       [ 0.68824936,  0.68086462,  0.6854153 ]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15452028)
 An answer using map-reduce:- 

  map(lambda x: map(lambda y: ran(),range(len(inputs[0]))),range(hiden_neurons))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21838396)
 Looks like you are doing a Python implementation of the Coursera Machine Learning Neural Network exercise. Here's what I did for randInitializeWeights(L_in, L_out) 

  #get a random array of floats between 0 and 1 as Pavel mentioned 
W = numpy.random.random((L_out, L_in +1))

#normalize so that it spans a range of twice epsilon
W = W * 2 * epsilon

#shift so that mean is at zero
W = W - epsilon
  



