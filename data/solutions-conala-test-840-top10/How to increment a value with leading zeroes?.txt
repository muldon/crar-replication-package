Query: How to increment a value with leading zeroes?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/587656)
  int('00000001') + 1
  

 if you want the leading zeroes back: 

  "%08g" % (int('000000001') + 1)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/587791)
 Use the much overlooked str.zfill(): 

  str(int(x) + 1).zfill(len(x))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/587655)
 Determine the length, convert it to an integer, increment it, then convert it back to a string with leading zeros so that it has the same length as before. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/587689)
 Presumably, you specifically mean an integer represented as a string with leading zeros? 

 If that's the case, I'd do it thusly: 

  >>> a
'00000000000000099'
>>> l = len(a)
>>> b = int(a)+1
>>> b
100
>>> ("%0"+"%dd" % l) % b
'00000000000000100'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/587690)
 "%%0%ii" % len(x) % (int(x)+1) 

 -- MarkusQ 

 P.S. For x = "0000034" it unfolds like so: 

  "%%0%ii" % len("0000034") % (int("0000034")+1)
"%%0%ii" % 7 % (34+1)
"%07i" % 35
"0000035"
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/587696)
 . When you want to print it, add the leading zeros. This way you can easily do math without conversions, and it simplifies the thought process. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39170552)
 The outcome isn't as what you expected because the  int()  function ignores the leading zeroes. Leading zeroes aren't stored in an integer. 

 What does the trick is 

  a = '00001'
b = int(a) + 1
print str(b).zfill(5)
  

 The  5  here means the number has to be 5 digits. What  zfill(number)  does is add zeroes to the beginning of the string until the string has a length of  number  characters (digits in this case). 

 .  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17118243)
 Derived from http://docs.python.org/2/library/string.html#format-examples in the Python docs: 

  >>> '{0:0{width}}'.format(5, width=3)
'005'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50766912)
 The logic in that function to "strip but one leading zero" is completely wrong, and is removing significant digits from the result. 

 The correct representation of the value is  neither  of the values mentioned in your question; it is: 

  0011111111110000000000000000000000000000000000000000000000000001
  

 which can be retrieved by replacing the last line of that function with: 

  return s
  

 or by using the simpler implementation: 

  def float_to_bin(f):
    [d] = struct.unpack(">Q", struct.pack(">d", f))
    return '{:064b}'.format(d)
  

 Leading and trailing zeroes in floating-point values are significant, and cannot be removed without altering the value. 



