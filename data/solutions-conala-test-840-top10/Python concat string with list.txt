Query: Python concat string with list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8546271)
 All you need to do is add the space in front of join.    

   ' '.join(list)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8546268)
 This does what you want: 

  " ".join(['hello', 'good', 'morning'])
  

 Generally, when you are calling  join()  on some string you use  " "  to specify the separator between the list elements. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52675873)
 You can concat two string by following method: 

  @api.onchange('char1', 'char2')
def _onchange_weight_range(self):
    list = []
    if self.char1:
        conc = str(self.char1 or '') + '-' + str(self.char2 or '')
        list.append(conc)
        self.char3 = ', '.join(list)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8546259)
  >>> ' '.join(['hello', 'good', 'morning'])
'hello good morning'
  

 The standard and best way to join a list of strings. I cannot think of anything better than this one. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8546264)
  >>> " ".join(['hello', "good", "morning"])
'hello good morning'
  

 or you can use the  string.join()  function, which uses a single space as the default separator. 

  >>> help(string.join)
Help on function join in module string:

join(words, sep=' ')
    join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.
  

 example: 

  >>> import string
>>> string.join(['hello', "good", "morning"])
'hello good morning'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4166656)
  >>> theListOfChars = ['a', 'b', 'x', 'd', 's']
>>> ''.join(theListOfChars)
'abxds'
  

 BTW,  don't use  list  or  str  as variable names  as they are names of built-in functions already. 

 (Also, there is no  char  in Python. A "character" is just a string of length 1. So the  ''.join  method works for list of strings as well.) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10311390)
 String concatenation is the best way 

  l = ['1', '2', '3', '4']  # original list
s = ', '.join(l) + ','
  

 but you have other options also 

 
  Mapping to comma-ended strings, then joining 

  l = ['1', '2', '3', '4']  # original list
s = ' '.join(map(lambda x '%s,' % x, l))
   
  Appending empty string to the joined list (don't modify original  l  list!) 

  l = ['1', '2', '3', '4']  # original list
s = ', '.join(l + ['']).rstrip(' ')
   
  Using string formatting in place of concatenation 

  l = ['1', '2', '3', '4']  # original list
s = '%s,' % (', '.join(l))
   
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4166669)
 The thing you're looking for is  str.join() : 

  >>> L = ['a','b','x','d','s']
>>> ''.join(L)
'abxds'
  

 (Don't name your variable  list , it's a builtin name.) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32975873)
 Why do you need linq for it? 

 Basically all you need is one line of python code: 

  result = reads[0] + ''.join([item[-1] for item in reads[1:]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4166683)
 KennyTM's answer is great.  Also, if you wanted to make them comma separated or something, it'd be: 

  ",".join(characterlist)
  

 This would result in "a,b,x,d,s" 



