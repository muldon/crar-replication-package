Query: Python: simplest way to get list of values from dict?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33993428)
 There are so many ways to do this. 

 
  https://docs.python.org/2/library/operator.html#operator.itemgetter 

 If you happen to do this operation more often, then prefer this way 

  >>> from operator import itemgetter
>>> get_a = itemgetter('A')
>>> [get_a(item) for item in x]
[1, 3, 5]
  

 Or with  map  

  >>> list(map(get_a, x))
[1, 3, 5]
   
  Simplest way to do this would be to use the  []  operator, like this 

  >>> [item['A'] for item in X]
[1, 3, 5]
   
  If you want to avoid the  KeyError  in dictionaries where  A  doesn't exist, you can use  dict.get , which returns  None  by default, like this 

  >>> [item.get('A') for item in X]
[1, 3, 5]
   
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9055127)
 Assuming all the elements in list1 are keys in dict, this is the simplest solution I can think of : 

  list1 =['a','b','c','d']
new_list = []
dict = {'a':24, 'b':53 ,'c':26, 'd':9}

for it in list1:
    new_list.append(dict[it])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28637857)
 You are really close, you just need a way to look up which dictionary to update.  This is the simplest way I can see. 

  summary = dict()
for user in users:
   team = user['team']
   if team not in summary:
      summary[team] = dict(team=team,
                           score1=float(user['score1']), 
                           score2=float(user['score2']))
   else:
      summary[team]['score1'] += float(user['score1'])
      summary[team]['score2'] += float(user['score2'])
  

  

  >>> print summary.values()
[{'score1': 120.0, 'score2': 80.0, 'team': 'reds'},
 {'score1': 10.0, 'score2': 70.0, 'team': 'blues'}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20570270)
 That's the simplest way I can think for finding duplicates in a list: 

  my_list = [3, 5, 2, 1, 4, 4, 1]

my_list.sort()
for i in range(0,len(my_list)-1):
               if my_list[i] == my_list[i+1]:
                   print str(my_list[i]) + ' is a duplicate'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20578893)
 What you're looking to do is to create  equivalence classes  of the values.  

 Normally, this is easy: just reverse the dict into a multidict (a dict whose values are sets or lists of 0 or more actual values), and then each set or list of values is an equivalent class: 

  original_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 2}

from collections import defaultdict
reverse_multidict = defaultdict(list)
for key, value in original_dict.items():
    reverse_multidict[value].append(key)

matchList = list(reverse_multidict.values()) # leave out the list() in 2.x
  

 However, in your case, the values are  dict s, which means they can't be used as keys in a  dict . 

 The simplest way around that is to transform each  dict  into something that's immutable and hashable, like a tuple of key-value tuples: 

  for key, value in original_dict.items():
    reverse_multidict[tuple(value.items())].append(key)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48300546)
 You need to write code that keeps the first of the sub-lists, dropping the rest. The simplest way to do this is to reverse  mylist , load it into an  dict  object, and retrieve its key-value pairs as lists again.  

  >>> list(map(list, dict(mylist).items()))
  

 Or, using a  list comprehension  - 

  >>> [list(v) for v in dict(mylist).items()]
  

  

  [['zzz', 171], ['yyy', 315], ['xxx', 879]]
  

 Note, that this answer does not maintain order! Also, if your sub-lists can have more than 2 elements, an approach involving hashing the tuplized versions of your data, as https://stackoverflow.com/a/48300720/4909087 shows, would be the best thing to do. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44479778)
 You can use  groupby  from  itertools  module like this example: 

  a = [[1, 'A'], [1, 'B'],[1, 'D'], [2, 'A'],[2,'D'], [3, 'C'], [4, 'D'], [5, 'B'], [6, 'D']]

final = []
for k, v in groupby(sorted(a, key=lambda x: x[0]), lambda x: x[0]):
        bb = list(v)
        if len(bb) > 1:
            final.append([k, [j for _, j in bb]])
        else:
            final.append([k, bb[0][1]])

# OR:
# Within a list comprehension
# final = [[k, [j[1] for j in list(v)]] for k, v in groupby(sorted(a, key=lambda x: x[0]), lambda x: x[0])]

print(final)
  

 Output: 

  [[1, ['A', 'B', 'D']], 
[2, ['A', 'D']],
[3, 'C'], 
[4, 'D'], 
[5, 'B'], 
[6, 'D']]
  

 Then to convert the final list into a dict you can do: 

  final_dict = {k:v if isinstance(v, list) else [v] for k, v in final}
print(final_dict)
  

 Output: 

  {1: ['A', 'B', 'D'], 2: ['A', 'D'], 3: ['C'], 4: ['D'], 5: ['B'], 6: ['D']}}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17432882)
 In Python 3 the  dict.values()  method returns a http://docs.python.g/3/library/stdtypes.html?highlight=dictview#dictionary-view-objects, not a list like it does in Python 2. Dictionary views have a length, can be iterated, and suppt membership testing, but don't suppt indexing. 

 To make your code wk in both versions, you could use either of these: 

  {names[i]:value f i,value in enumerate(d.values())}
  

 &nbsp;&nbsp;&nbsp;&nbsp;     

  values = list(d.values())
{name:values[i] f i,name in enumerate(names)}
  

 By far the simplest, fastest way to do the same thing in either version would be: 

  dict(zip(names, d.values()))
  

 Note however, that all of these methods will give you results that will vary depending on the actual contents of  d . To overcome that, you may be able use an http://docs.python.g/3/library/collections.html?highlight=dereddict#collections.OrderedDict instead, which remembers the der that keys were first inserted into it, so you can count on the der of what is returned by the  values()  method. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42071464)
 Simplest way to achieve this will be to use https://docs.python.org/2/library/itertools.html#itertools.groupby with key as  dict.get  as: 

  >>> from itertools import groupby
>>> next_dict = {'D': ['E'], 'B': ['D'], 'A': ['C'], 'C': ['C'], 'E': ['D']}
>>> initial_list = ['B', 'D', 'A', 'C', 'E']

>>> [list(i) for _, i in groupby(sorted(initial_list, key=next_dict.get), next_dict.get)]
[['A', 'C'], ['B', 'E'], ['D']]
  



