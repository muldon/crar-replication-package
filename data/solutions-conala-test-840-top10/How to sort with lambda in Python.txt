Query: How to sort with lambda in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4183540)
 In one line, using a  lambda : 

  timestamp.sort(key=lambda x: time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6], reverse=True)
  

 

 Passing a function to  list.sort : 

  def foo(x):
    return time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6]

timestamp.sort(key=foo, reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17891180)
 This works: 

  >>> li=[[13, "b"], [10, "b"], [10, "a",], [4,"c"], [1, "d"]]
>>> sorted(li,key=lambda sl: (-sl[0],sl[1]))
[[13, 'b'], [10, 'a'], [10, 'b'], [4, 'c'], [1, 'd']]
  

 The http://docs.python.org/2/library/functions.html#sorted produces a new list. You can also sort the list in place using the sort method: 

  >>> li=[[13, "b"], [10, "b"], [10, "a",], [4,"c"], [1, "d"]]
>>> li.sort(key=lambda sl: (-sl[0],sl[1]))
>>> li
[[13, 'b'], [10, 'a'], [10, 'b'], [4, 'c'], [1, 'd']]
  

 You can also do a nested sort (or sort on one key, then the second key) since python uses a https://en.wikipedia.org/wiki/Sorting_algorithm#Stability: 

  >>> from operator import itemgetter
>>> li=[[13, "b"], [10, "b"], [10, "a",], [4,"c"], [1, "d"]]
>>> li.sort(key=itemgetter(1))
>>> li
[[10, 'a'], [13, 'b'], [10, 'b'], [4, 'c'], [1, 'd']]
>>> li.sort(key=itemgetter(0),reverse=True)
>>> li
[[13, 'b'], [10, 'a'], [10, 'b'], [4, 'c'], [1, 'd']]
  

 Since there is no need for a lambda in a one element sort, I used the faster http://docs.python.org/2/library/operator.html#operator.itemgetter vs a lambda. Whether two faster sorts are faster than one, I don't know... You can also use a lambda for this method.  

 There is a great http://wiki.python.org/moin/HowTo/Sorting/ that shows many of these idioms. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31305758)
 The reason for your error message is that you are  sort ing based on an attribute that is not for  list  ( start  is not an  attribute  of a  list') , so quick fix is, either to use the  sort  method of  list  or use built-in method  sorted : 

 1 - Using  sort  method of  list : 

  intervals.sort(key = lambda l:l[0])
  

 2 - Using built-in method  sorted : 

  intervals = sorted(intervals, key=lambda l:l[0])
  

 Reading more about sorting list in this https://wiki.python.org/moin/HowTo/Sorting post, very interesting. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32167933)
 l = [[2, 'e'], [4, 'c'], [1, 'a'], [4, 'b'], [5, 'w'], [3, 'z']] 

  >>> l.sort()
  

 Normal sort: first the first element of the nested list is considered and then the second element. 

  >>>l.sort(key=lambda e: [e[0], e[1]])
  

 Similar to l.sort() 

  >>>l.sort(key=lambda e: [-e[0], e[1]])
  

 Now, what is does is- Reverse sort the the list on the basis of first element of the nested list AND sort normally on the internal elements of the nested sorted list i.e 

 first 2,3,4,5 etc are considered for sorting the list in reverse order( -e[0] == -2,-3,-4...) and then we sort the elements on the basis of second element for internal sorting (e[1] == 'w', 'a', 'b'...) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19729956)
 Well you can make the lambda simpler: 

  l.sort(key=lambda t: len(t[1]), reverse=True)
  

 Also, don't use  list  as a variable name; it's already taken by a built-in function. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3407438)
 I'm not sure if this is the kind of alternative you meant, but you could define the key function with a  def : 

  def sort_key(value):
    return x[value]

y.sort(key = sort_key)
  

 Personally, I think this is worse than the  lambda  as it moves the sort criteria away from the line of code doing the sort and it needlessly adds the  sort_key  function into your namespace. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23424208)
 You are passing a reference to the  lower  method instead of calling it. 

  

  db[count].sort(key=lambda a: a.data.lower())
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31305585)
 You should use: 

  intervals.sort(key = lambda x:x[0])
  

  lambda  is a fast-way of making functions. For example, 

  def getFirst(x):
   return x[0]
  

  

  getFirst = lambda x: x[0]
  

 I guess you should read the https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions. 

  PS:  Be aware that you are making  in place  sorting. You can also use  sorted(a, key=lambda x:x[0])  which returns another copy of sorted array, if you want otherwise. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35025516)
 Have your  key  function return a list of items. The sort is lexicographic in that case. 

  l = [ '1.0.0.0.py', '0.0.0.0.py', '1.1.0.0.py',]
s = sorted(l, key = lambda x: [int(y) for y in x.replace('.py','').split('.')])
print s
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/33782100)
 use  sorted  with  lambda  such that  sort  on the number in  string . 

  sorted(list, key=lambda x:int(x.split(':')[-1]))  

  ['c:0',
 'c:1',
 'c:2',
 'c:3',
 'c:4',
 'c:5',
 'c:6',
 'c:7',
 'c:8',
 'c:9',
 'c:10',
 'c:11',
 'c:12',
 'c:13',
 'c:14',
 'c:15',
 'c:16',
 'c:17',
 'c:18',
 'c:19',
 'c:20']
  



