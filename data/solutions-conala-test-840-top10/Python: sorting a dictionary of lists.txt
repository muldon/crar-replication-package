Query: Python: sorting a dictionary of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1217269)
 Here is one way to do this: 

  >>> sorted(myDict.items(), key=lambda e: e[1][2])
[('item2', [8, 2, 3]), ('item1', [7, 1, 9]), ('item3', [9, 3, 11])]
  

 The http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys of the  sorted  function lets you derive a sorting key for each element of the list. 

 To iterate over the keys/values in this list, you can use something like: 

  >>> for key, value in sorted(myDict.items(), key=lambda e: e[1][2]):
...   print key, value
... 
item2 [8, 2, 3]
item1 [7, 1, 9]
item3 [9, 3, 11]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16868476)
  >>> d = {"one": [(1,3),(1,4)], "two": [(1,2),(1,2),(1,3)], "three": [(1,1)]}
>>> for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
  

 Here is a universal solution that works on Python 2 & Python 3: 

  >>> print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))
two one three
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50445595)
 <div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"> dict= {'a': [9,2,3,4,5], 'b': [1,2,3,4, 5, 6], 'c': [], 'd': [1,2,3,4], 'e': [1,2]}
dict_temp = {'a': 'hello', 'b': 'bye', 'c': '', 'd': 'aa', 'e': 'zz'}

def sort_by_values_len(dict):
    dict_len= {key: len(value) for key, value in dict.items()}
    import operator
    sorted_key_list = sorted(dict_len.items(), key=operator.itemgetter(1), reverse=True)
    sorted_dict = [{item[0]: dict[item [0]]} for item in sorted_key_list]
    return sorted_dict

print (sort_by_values_len(dict))

output:
[{'b': [1, 2, 3, 4, 5, 6]}, {'a': [9, 2, 3, 4, 5]}, {'d': [1, 2, 3, 4]}, {'e': [1, 2]}, {'c': []}]  
</div>
</div>
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1218570)
 As John Machlin said you can't actually sort a Python dictionary. 

 However, you can create an index of the keys which can be sorted in any order you like. 

 The preferred Python pattern (idiom) for sorting by any alternative criterium is called "decorate-sort-undecorate" (DSU).  In this idiom you create a temporary list which contains tuples of your key(s) followed by your original data elements, then call the normal  .sort()  method on that list (or, in more recent versions of Python simply wrap your decoration in a called to the  sorted()  built-in function).  Then you remove the "decorations." 

 The reason this is generally preferred over passing comparison function to the  .sort()  method is that Python's built-in default sorting code (compiled C in the normal C Python) is very fast and efficient in the default case, but much, much slower when it has to call Python object code many, many times in the non-default case.  So it's usually far better to iterate over the data creating data structures which can be passed to the default sort routines. 

 In this case you should be able to use something like: 

  [y[1] for y in sorted([(myDict[x][2], x) for x in myDict.keys()])]
  

 ... that's a list comprehension doing the undecorate from the sorted list of tuples which is being returned by the inner list comprehension.  The inner comprehension is creating a set of tuples, your desired sorting key (the 3rd element of the list) and the dictionary's key corresponding to the sorting key.  myDict.keys() is, of course, a method of Python dictionaries which returns a list of all valid keys in whatever order the underlying implementation chooses --- presumably a simple iteration over the hashes. 

 A more verbose way of doing this might be easier to read: 

  temp = list()
for k, v in myDict.items():
    temp.append((v[2],))
temp.sort()
results = list()
for i in temp:
    results.append(i[1])
  

 Usually you should built up such code iteratively, in the interpreter using small data samples.  Build the "decorate" expression or function.  Then wrap that in a call to  sorted() .  Then build the undecorate expression (which is usually as simple as what I've shown here). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52615918)
 First with the given key on which sorting is done, you can get the indices order. You that sequence to rearrange the remaining lists in the dictionary.  

  unsorted_my_dict = {
'key_one': [1, 6, 2, 3],
'key_two': [4, 1, 9, 7],
'key_three': [1, 2, 4, 3],
}


def sort_parallel_by_key(my_dict, key):
    def sort_by_indices(idx_seq):
        return {k: [v[i] for i in idx_seq] for k, v in my_dict.items()}

    indexes = [idx for idx, _ in sorted(enumerate(my_dict[key]), key=lambda foo: foo[1])]
    return sort_by_indices(indexes)


print(sort_parallel_by_key(unsorted_my_dict, 'key_three'))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45244603)
 You could store the indices of keys in a dictionary and use those in the https://docs.python.org/3.6/library/functions.html#sorted. This would work in  O(n log(n))  time: 

  >>> keys = {next(iter(v)): i for i, v in enumerate(B)}
>>> keys
{'a': 0, 'e': 1, 'b': 2, 'g': 3, 'f': 4}    
>>> A.sort(key=lambda x: keys[next(iter(x))])
>>> A
[{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18931646)
 Dicts are inherently orderless, so you can only get a sorted list out of the dictionary. If you wish to get a list of key/value pairs, sorted by the type of the values, you can do it like this: 

  sorted(dic.items(), key=lambda pair: type(pair[1]), reverse=True)
  

 This will give you the following list, with the string entries coming before the list entries: 

  [('a', '11'), ('g', 'a'), ('c', [1, 3, 4]), ('b', [1, 2, 3])]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31627167)
 Just return the  dict.values()  lists in Python 2, or convert the dictionary view to a list in Python 3: 

  [d.values() for d in list_of_dicts]  # Python 2
[list(d.values()) for d in list_of_dicts]  # Python 3
  

 Note that the values are not going to be in any specific order, because dictionaries are not ordered. If you expected them to be in a given order you'd have to add a sorting step. 



