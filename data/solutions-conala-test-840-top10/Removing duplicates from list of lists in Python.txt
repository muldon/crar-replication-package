Query: Removing duplicates from list of lists in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50948607)
 Very simple way in Python 3: 

  >>> n = [1, 2, 3, 4, 1, 1]
>>> n
[1, 2, 3, 4, 1, 1]
>>> m = sorted(list(set(n)))
>>> m
[1, 2, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7961425)
  In Python 2.7 , the new way of removing duplicates from an iterable while keeping it in the original order is: 

  >>> from collections import OrderedDict
>>> list(OrderedDict.fromkeys('abracadabra'))
['a', 'b', 'r', 'c', 'd']
  

  In Python 3.5 , the OrderedDict has a C implementation. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5. 

  In Python 3.6 , the regular dict became both ordered and compact.  (This feature is holds for CPython and PyPy but may not present in other implementations).  That gives us a new fastest way of deduping while retaining order: 

  >>> list(dict.fromkeys('abracadabra'))
['a', 'b', 'r', 'c', 'd']
  

  In Python 3.7 , the regular dict is guaranteed to both ordered across all implementations.   So, the shortest and fastest solution is:  

  >>> list(dict.fromkeys('abracadabra'))
['a', 'b', 'r', 'c', 'd']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45729214)
 Best approach of removing duplicates from a list is using  set()  function, available in python, again converting that  set into list  

  In [2]: some_list = ['a','a','v','v','v','c','c','d']
In [3]: list(set(some_list))
Out[3]: ['a', 'c', 'd', 'v']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46707294)
 Without using set  

  data=[1, 2, 3, 1, 2, 5, 6, 7, 8]
uni_data=[]
for dat in data:
    if dat not in uni_data:
        uni_data.append(dat)

print(uni_data) 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31999082)
 below code is simple for removing duplicate in list 

  def remove_duplicates(x):
    a = []
    for i in x:
        if i not in a:
            a.append(i)
    return a

print remove_duplicates([1,2,2,3,3,4])
  

 it returns [1,2,3,4] 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29639138)
  

  myList = [1, 2, 3, 1, 2, 5, 6, 7, 8]
cleanlist = []
[cleanlist.append(x) for x in myList if x not in cleanlist]
  

 Output: 

  >>> cleanlist 
[1, 2, 3, 5, 6, 7, 8]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34570036)
 I'd tackle this a little differently and use an  OrderedDict  and the fact that a lists  index  method will return the lowest index of an item. 

  >>> from collections import OrderedDict
>>> lst = [1, 1, 2, 3]
>>> d = OrderedDict((x, lst.index(x)) for x in lst)
>>> d
OrderedDict([(1, 0), (2, 2), (3, 3)]
  

 If you need the list (with its duplicates removed) and the indices separately, you can simply issue: 

  >>> d.keys()
[1, 2, 3]
>>> d.values()
[0, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46752164)
 Another way to do that is: 

  >>> list1 = [[1,2], [1,3], [3,5], [4,1], [9,6]]
>>> list2 = [[1,2], [1,3], [3,5], [6,6], [0,2], [1,7], [7,7]] 
>>> k = list1+list2 #We combine both the lists
>>> z = [] #Declare an empty list
>>>for i in k: #Loop through every element of the combined list
       if i in z: #If the element is already in the final list
           pass #Do nothing
       else: #If the element in the combined list is not not there in the final list
           z.append(i) #Append that element to the final list
>>>print z
>>>[[1, 2], [1, 3], [3, 5], [4, 1], [9, 6], [6, 6], [0, 2], [1, 7], [7, 7]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39734546)
 Have you tried using  sets ? 

  >>> a = [1,2,2]
>>> b = [1,3,3,4,5,0]
>>> list(set(a).union(set(b)))
[0, 1, 2, 3, 4, 5]
  



