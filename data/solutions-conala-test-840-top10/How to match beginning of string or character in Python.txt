Query: How to match beginning of string or character in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35296410)
 You will need to add the $ to match the end of the string:  

  str1=re.compile(r'[a-zA-Z0-9]+$')
  

 You should also include the ^ character at the beginning to match the beginning of the string if you need the entire string to match: 

  str1=re.compile(r'^[a-zA-Z0-9]+$')
  

 That will only match if the entire string matches that selection. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10532649)
 The  ^  character matches the beginning of the string, and  $  matches the end of the string.  

  rule = "^http://www\.abc\.com/$"
test = "http://www.abc.com/test"
print(str(re.compile(rule).match(test)))
  

   .  means "match any character" so if you want to match an actual  .  you need the  \  before it. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34385377)
 You can use a negative lookahead assertion to require that the  $  is not followed by a trailing newline: 

  >>> re.match(r'\w+$(?!\n)', 'foo\n')
>>> re.match(r'\w+$(?!\n)', 'foo')
<_sre.SRE_Match object; span=(0, 3), match='foo'>
  

  re.MULTILINE  is not relevant here; OP has it turned off and the regex is still matching.  The problem is that  $   always  matches https://docs.python.org/3/library/re.html#re.M: 

 
   When [ re.MULTILINE  is] specified, the pattern character  '^'  matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character  '$'  matches at the end of the string and at the end of each line (immediately preceding each newline). By default,  '^'  matches only at the beginning of the string, and  '$'  only at the end of the string and  immediately before the newline (if any) at the end of the string.  
 

 I have experimentally verified that this works correctly with https://docs.python.org/3/library/re.html#re.X enabled. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28317999)
 You can use look-around to match string between  <T1>  and  </T1>  : 

  >>> p = re.compile(ur'(?<=<T1>)[^<]+?(.+)(?=</T1>)', re.MULTILINE | re.IGNORECASE | re.DOTALL)
>>> s2='\n  <test number="1">\n  lorem ipsum\n  </test>\n'
>>> print p.sub(s2,s,re.MULTILINE)
<T1>
  <test number="1">
  lorem ipsum
  </test>
</T1>
  

 you need to use following https://docs.python.org/2/library/re.html#module-contents : 

 
    re.IGNORECASE 
  Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too. This is not affected by the current locale. 
  
    re.MULTILINE 
  When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string. 
  
    re.DOTALL 
  Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline. 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6127358)
 Take a look at http://docs.python.org/library/re.html#re.MULTILINE. 

 I quote: 

 
   When specified, the pattern character
   '^'  matches at the beginning of the
  string and at the beginning of each
  line (immediately following each
  newline); and the pattern character
   '$'  matches at the end of the string
  and at the end of each line
  (immediately preceding each newline). 
  
   By default,  '^'  matches only at the
  beginning of the string, and  '$'  only
  at the end of the string and
  immediately before the newline (if
  any) at the end of the string. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12396965)
 http://docs.python.org/library/re.html#re.MULTILINE doesn't actually make your regex multiline in the way you want it to be. 

 
   When specified, the pattern character  '^'  matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character  '$'  matches at the end of the string and at the end of each line (immediately preceding each newline). By default,  '^'  matches only at the beginning of the string, and  '$'  only at the end of the string and immediately before the newline (if any) at the end of the string. 
 

 http://docs.python.org/library/re.html#re.DOTALL does: 

 
   Make the  '.'  special character match any character at all, including a newline;  without this flag,  '.'  will match anything  except  a newline.  
 

 Change  flags=re.MULTILINE  to  flags=re.DOTALL  and your regex will work. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34438497)
 You should use https://docs.python.org/3/library/re.html#search-vs-match instead of https://docs.python.org/3/library/re.html#search-vs-match. According to the docs: 

 
   Python offers two different primitive operations based on regular expressions:  re.match()  checks for a match  only at the beginning of the string , while  re.search()  checks for a match  anywhere in the string  (this is what Perl does by default). 
 

 So when you use  match  it's the same as using http://www.regular-expressions.info/anchors.html in your regex (matches the position before the first character in the string). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9999755)
 You need to provide  re.compile()  a string, and your current regular expression will only match a single character, try changing it to the following: 

  import re

pattern = re.compile(r'^[A-Z\d]+$')
  

 Now you can test strings to see if the match this pattern by using  pattern.match(some_string) . 

 Note that I used a http://docs.python.org/reference/lexical_analysis.html#string-literals, which ensures the proper handling of backslashes. 

 The  ^  at the beginning and  $  at the end are called anchors,  ^  matches only at the beginning of the string and  $  matches only at the end of the string, they are necessary since you specified you want to only match strings that are entirely uppercase characters or digits, otherwise you could just match a substring. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22360518)
 Why it didn't pick the  %g ? 

 To pick the  %g , it must have to have  %%  before it. And even before that it must have to have a   non-%  character, or at the beginning of the string. So,  x%%%g  could have a match for you. But this  x  was picked during previous matching(i.e. when printing  %x ). 

 In simple, you have overlapping on your regex matching. So you can overcome this using following one. I am placing your regex inside the  (?= ... )  

  pat = re.compile("(?=(?:[^%]|^)(?:%%)*(%[a-z]))")
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53987845)
 https://docs.python.org/3/library/re.html#re.match tries to match the regex from the beginning of the string. 

 From the docs: 

 
   If zero or more characters at the beginning of string match the
  regular expression pattern, return a corresponding match object.
  Return None if the string does not match the pattern; note that this
  is different from a zero-length match. 
 

  

  datap = re.compile(r'(\d{2}).(\d{2}).(\d{2})')
m = datap.match(res)
  

 the regex actually matched the date, not the time (because it is at the beginning of the string): 

  print(m)
# <re.Match object; span=(0, 8), match='18.12.19'>
  

 If you use https://docs.python.org/3/library/re.html#re.search then you will get the expected output: 

  import re

res = '18.12.19 14:03:16 [ ..... # message error'
datap = re.compile(r'(\d{2}):(\d{2}):(\d{2})')
m = datap.search(res)
print(m)
# <re.Match object; span=(9, 17), match='14:03:16'>
  



