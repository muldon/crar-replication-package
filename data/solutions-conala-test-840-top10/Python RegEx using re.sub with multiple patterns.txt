Query: Python RegEx using re.sub with multiple patterns
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33642652)
 You're not even using regular expressions so you may as well just chain  replace : 

  s1 = "Please check with the store to confirm holiday hours."
s2 = ''' Hours:
            Monday: 9:30am - 6:00pm
Tuesday: 9:30am - 6:00pm
Wednesday: 9:30am - 6:00pm
Thursday: 9:30am - 6:00pm
Friday: 9:30am - 9:00pm
Saturday: 9:30am - 6:00pm
Sunday: 11:00am - 6:00pm

Please check with the store to confirm holiday hours.'''

strip2 = s2.replace(s1, "").replace("Hours:","").strip()

print(strip2)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18093217)
 Use  re.sub  with  $ . 

  target = '''
LINCOLN STREET
CHESTNUT ST
CHISHOLM TR
LAKE TRAIL
CHISHOLM TRAIL
COVERED WAGON TRL
'''

import re
print re.sub('\s+(STREET|ST|TRAIL|TRL|TR)\s*$', '', target, flags=re.M)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33724525)
 Don't you just have too many parentheses (and other extra stuff)? 

  word = re.sub(ur"([aeiou])(([aeiou][^aeiou]*){3})$", ur'\1\2', word)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33724608)
 Not sure if you want to completely ignore consonants; this regex will. . 

  import re

tests = [
    'we:aanyoh',
    'hiru:atghigu',
    'yo:ubeki',
    'yo:ubekiki',
    'yo:ubek'
]

for word in tests:
    s = re.sub(r'([^aeiou]*[aeiou][^aeiou]*):((?:[^aeiou]*[aeiou]){3}[^aeiou]*)$', r'\1\2', word)
    print '{} > {}'.format(word, s)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38630324)
 You can just refer to the whole match with  \g<0>   backreference  in the replacement string pattern (where you cannot use  regular expression  patterns): 

  re.sub('..', r"\g<0> ", s)
  

 https://ideone.com/a1Lisg: 

  import re
s = "12345678"
print(re.sub('..', r"\g<0> ", s))
  

 See https://docs.python.org/2/library/re.html#re.sub: 

 
   The backreference  \g<0>  substitutes in the entire substring matched by the RE. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32389663)
 You could use non-word boundaries here. 

  >>> re.sub(r'\B&&\B', 'and', 'x&& && &&')
'x&& and and'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33642769)
 If you're just trying to delete specific substrings, you can combine the patterns with alternation for a single pass removal: 

  pat1 = r"Please check with the store to confirm holiday hours."
pat2 = r'\t'
combined_pat = r'|'.join((pat1, pat2))
stripped = re.sub(combined_pat, '', s2)
  

 It's more complicated if the "patterns" use actual regex special characters (because then you need to worry about wrapping them to ensure the alternation breaks at the right places), but for simple fixed patterns, it's simple. 

 If you had real regexes, rather than fixed patterns, you might do something like: 

  all_pats = [...]
combined_pat = r'|'.join(map(r'(?:{})'.format, all_pats))
  

 so any regex specials remain grouped without possibly "bleeding" across an alternation. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35660959)
 Lacking the  r  prefix is what's causing your problem, as @tdelaney said. But you also have a better way to accomplish your task. Instead of repeatedly calling  re.sub  you can build a better regex using the alternation operation  |  and call  re.sub  only once: 

  test = ['to', 'all', 'the']
master_regex = '|'.join(r'\b{}\b'.format(w) for w in test)
text = re.sub(master_regex, ' ', text)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9836119)
 You need to escape the  '(-)'  because it is a regular expression pattern match, as far as the regex engine is concerned. If you're  not sure about how to escape, but your string doesn't have any actual patterns but should be interpreted verbatim, you should do: 

  >>> re.sub(re.escape('my (-)'), 'your', instr)
'Hello, this is your instring'
  

 or if your string is  a mix between a "plain" pattern and complex stuff, you can do this: 

  >>> re.sub('[a-z]{2} %s' % re.escape('(-)'), 'your', instr)
'Hello, this is your instring'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32389659)
  (?:^|(?<=\s))&&(?=\s|$)
  

 Use  lookarounds .Do not consume  space  just  assert .See demo. 

 https://regex101.com/r/sS2dM8/39 

  re.sub('(?:^|(?<=\s))&&(?=\s|$)', 'and', 'x&& && &&')
  

 Output: 'x&& and and'  



