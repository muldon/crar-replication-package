Query: random Decimal in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/439223)
 If you know how many digits you want after and before the comma, you can use: 

  >>> import decimal
>>> import random
>>> def gen_random_decimal(i,d):
...  return decimal.Decimal('%d.%d' % (random.randint(0,i),random.randint(0,d)))

...
>>> gen_random_decimal(9999,999999) #4 digits before, 6 after
Decimal('4262.786648')
>>> gen_random_decimal(9999,999999)
Decimal('8623.79391')
>>> gen_random_decimal(9999,999999)
Decimal('7706.492775')
>>> gen_random_decimal(99999999999,999999999999) #11 digits before, 12 after
Decimal('35018421976.794013996282')
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19362706)
 The numbers returned by  random()  are the same. It's the  display  precision that's different. 

 Here are the first two numbers returned by my Python 2.7, but displayed to significantly more decimal digits that the default: 

  $ python
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import random
>>> rng = random.Random(0)
>>> '%.50f' % rng.random() 
'0.84442185152504811718188193481182679533958435058594'
>>> '%.50f' % rng.random() 
'0.75795440294030247407874867349164560437202453613281'
  

 If you round these to 17 decimal places, you'd get exactly the same numbers as you're getting from Python 2.6. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/439282)
 What's "a random decimal"? Decimals have arbitrary precision, so generating a number with as much randomness as you can hold in a Decimal would take the entire memory of your machine to store. 

 You have to know how many decimal digits of precision you want in your random number, at which point it's easy to just grab an random integer and divide it. For example if you want two digits above the point and two digits in the fraction (see https://docs.python.org/2/library/random.html#random.randrange): 

  decimal.Decimal(random.randrange(10000))/100
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31595932)
 You can also handle float precision using  .format() : 

  print float("{0:.2f}".format(random.uniform(greaterThan, lessThan)))
  

 Where the  2  can be replaced by how many digits after decimal you want. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41698146)
 Is this what you are looking for? 

   round(random.random()*10,1)
  

 Just round it to the required number of places. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44172454)
 You can use round function with uniform function to limit float number to two decimal places.  

 Example:     

   round(random.uniform(1.5, 1.9),2)
 Out[]: 1.62

 round(random.uniform(1.5, 1.9),3)
 Out[]: 1.885
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31595824)
 If you want to take whatever number you get from  random.uniform  and truncate it to the specific number of digits you can use the https://docs.python.org/3/library/functions.html#round. 

 It allows you to round to a specific precision. For example: 

  import random

greaterThan = float(input("Your number will be greater than: "))
lessThan = float(input("Your number will be less than: "))
digits = int(input("Your number will that many decimal digits: "))

rounded_number = round(random.uniform(greaterThan, lessThan), digits)
print(rounded_number)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/439557)
 The random module has more to offer than "only returning floats", but anyway: 

  from random import random
from decimal import Decimal
randdecimal = lambda: Decimal("%f" % random.random())
  

 Or did I miss something obvious in your question ? 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16288979)
 How "accurate" do you want your random numbers? If you're happy with, say, 10 decimal digits, you can just round  random.uniform(0.1, 1.0)  to 10 digits. That way you will include both  0.1  and  1.0 : 

  round(random.uniform(0.1, 1.0), 10)
  

 To be precise,  0.1  and  1.0  will have only half of the probability compared to any other number in between and, of course, you loose all random numbers that differ only after 10 digits. 



