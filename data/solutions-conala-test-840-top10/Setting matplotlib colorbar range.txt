Query: Setting matplotlib colorbar range
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42724396)
 .
Instead of  vmin  and  vmax , I must pass a keyword to control the levels to draw, like this: 

  import matplotlib.pyplot as plt
import numpy as np

rd = np.random.rand(40,100)
surface = 18 * rd           # maximum value will be 18

fig = plt.figure()
ax = fig.add_subplot(111)

cores = ax.contourf(surface[:], levels=range(41))
cbar = plt.colorbar(cores)

plt.show()
  

 And I get the image I wanted:
https://i.stack.imgur.com/dxz2E.png 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6032083)
 Use  p.set_clim([5, 50])  to set the color scaling minimums and maximums in the case of your example. Anything in matplotlib that has a colormap has the  get_clim  and http://matplotlib.sourceforge.net/api/cm_api.html#matplotlib.cm.ScalarMappable.set_clim methods. 

 As a full example: 

  import matplotlib
import matplotlib.pyplot as plt
from matplotlib.collections import PatchCollection
from matplotlib.patches import Circle
import numpy as np

# (modified from one of the matplotlib gallery examples)
resolution = 50 # the number of vertices
N = 100
x       = np.random.random(N)
y       = np.random.random(N)
radii   = 0.1*np.random.random(N)
patches = []
for x1,y1,r in zip(x, y, radii):
    circle = Circle((x1,y1), r)
    patches.append(circle)

fig = plt.figure()
ax = fig.add_subplot(111)

colors = 100*np.random.random(N)
p = PatchCollection(patches, cmap=matplotlib.cm.jet, alpha=0.4)
p.set_array(colors)
ax.add_collection(p)
plt.colorbar(p)

plt.show()
  

   

 Now, if we just add  p.set_clim([5, 50])  (where  p  is the patch collection) somewhere before we call  plt.show(...) , we get this:
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28156969)
 Matplotlib 1.3.1 - It looks like the colorbar ticks are only drawn when the colorbar is instanced. Changing the colorbar limits (set_clim) does not cause the ticks to be re-drawn. 

 The solution I found was to re-instance the colorbar in the same axes entry as the original colorbar. In this case, axes[1] was the original colorbar. Added a new instance of the colorbar with this designated with the cax= (child axes) kwarg. 

             # Reset the Z-axis limits
           print "resetting Z-axis plot limits", self.zmin, self.zmax
           self.cbar = self.fig.colorbar(CS1, cax=self.fig.axes[1]) # added
           self.cbar.set_clim(self.zmin, self.zmax)
           self.cbar.draw_all()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43151263)
 We can explicitly set the colorbar limits by sending a scalar mappable to  colorbar  

  CS = plt.contourf(X, Y, Z, vmin = 0., vmax = 3., cmap=cm.coolwarm)
plt.title('Simplest default with labels')
m = plt.cm.ScalarMappable(cmap=cm.coolwarm)
m.set_array(Z)
m.set_clim(0., 3.)
plt.colorbar(m, boundaries=np.arange(0,3.1,.5))
  

 https://i.stack.imgur.com/MQDc1.png 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40320776)
 This is the simplest method probably. 

 ...(your code as shown)   

  plt.colorbar(boundaries=np.linspace(0,1,5)) 
  

 ... 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21952347)
 https://stackoverflow.com/questions/12570627/getting-a-matplotlib-colorbar-tick-outside-data-limits-for-use-with-boundaries-k and get inspiration from this sample using the colorbar 

  data = np.tile(np.arange(4), 2)
fig = plt.figure()
ax = fig.add_subplot(121)
cax = fig.add_subplot(122)
cmap = colors.ListedColormap(['b','g','y','r'])
bounds=[0,1,2,3,4]
norm = colors.BoundaryNorm(bounds, cmap.N)
im=ax.imshow(data[None], aspect='auto',cmap=cmap, norm=norm)
cbar = fig.colorbar(im, cax=cax, cmap=cmap, norm=norm, boundaries=bounds, 
     ticks=[0.5,1.5,2.5,3.5],)
plt.show()
  

 you see that you can set  bounds  for the colors in colorbar and ticks.  

 it is not rigourously what you want to achieve, but the hint to fig could help. 

 https://stackoverflow.com/questions/5826592/python-matplotlib-colorbar-range-and-display-values as well to define the scale of colorbar. 

  import numpy as np
import matplotlib.pyplot as plt

xi = np.array([0., 0.5, 1.0])
yi = np.array([0., 0.5, 1.0])
zi = np.array([[0., 1.0, 2.0],
               [0., 1.0, 2.0],
               [-0.1, 1.0, 2.0]])

v = np.linspace(-.1, 2.0, 15, endpoint=True)
plt.contour(xi, yi, zi, v, linewidths=0.5, colors='k')
plt.contourf(xi, yi, zi, v, cmap=plt.cm.jet)
x = plt.colorbar(ticks=v)
print x
plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5180799)
 contourf does not generate a colorbar, colorbar does. 

 If the colorbar has a fixed range, you could call colorbar() once at the beginning and then merely plot your new contourf without calling colorbar() 

 An example: 

  #In which we make contourplots with just one colorbar

import matplotlib.pyplot as plt
import numpy as np

plt.figure(1)
plt.clf()
plt.contourf(np.random.random((10,10)))
plt.colorbar()
for k in xrange(10):
    plt.contourf(np.random.random((10,10)))
plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15282215)
 .  It's always the last thing you try: 

  quadmesh.set_clim(vmin=0, vmax=15)
  

 . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32555497)
 I thought this question pointed out a bug, but it turns it's a usage/compatability constraint. The solution is to create the contours for the range of the colorbar that you want, and use the  extend  kwarg.  For more information, take a look at https://github.com/matplotlib/matplotlib/issues/5055. Thanks to https://stackoverflow.com/users/380231/tcaswell for providing this solution: 

  import matplotlib.pyplot as plt
import numpy as np

x, y = np.mgrid[0:1:0.01, 0:1:0.01]
r = np.sqrt(x ** 2 + y ** 2)
z = np.sin(6 * np.pi * r)

fig0, ax0 = plt.subplots(1, 1, )
cf0 = ax0.contourf(x, y, z, np.arange(0, .5, .01),
                   extend='both')
cbar0 = plt.colorbar(cf0,)
  

 https://i.stack.imgur.com/ZZr9C.png 

 From here if you don't like the colorbar ticks, you can adjust them with  cbar0.set_ticks . I've verified that this also works with  tricontourf . 

 I've simplified @tcaswell's code to that which is needed to get the desired result. Also, he used the new viridis colormap, but hopefully you get the idea. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/50550992)
 [Sorry, actually a comment to The Red Gator in Virginias answer, but do not have enough reputation to comment] 

 I was stuck on updating the colorbar of an imshow object  after  it was drawn and the data changed with imshowobj.set_data().
Using cbarobj.set_clim() indeed updates the colors, but not the ticks or range of the colorbar. Instead, you have to use imshowobj.set_clim() which will update the image and colorbar correctly. 

  data = np.cumsum(np.ones((10,15)),0)
imshowobj = plt.imshow(data)
cbarobj = plt.colorbar(imshowobj)
imshowobj.set_data(data/10) #scale is wrong now, shows only dark color
#cbarobj.set_clim(0,1) #! image colors will update, but cbar ticks not
imshowobj.set_clim(0,1) #correct
  



