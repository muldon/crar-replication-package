Query: Capturing group with findall?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6018455)
 Several ways are possible: 

  >>> import re
>>> r = re.compile(r"'(\d+)'")
>>> result = r.findall("'1', '2', '345'")
>>> result
['1', '2', '345']
>>> result[0]
'1'
>>> for item in result:
...     print(item)
...
1
2
345
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31011690)
 The capturing group caused this: 

  re.findall("\S+", data)
  

 works as expected. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6018440)
 Use groups freely. The matches will be returned as a list of group-tuples: 

  >>> re.findall('(1(23))45', '12345')
[('123', '23')]
  

 If you want the full match to be included, just enclose the entire regex in a group: 

  >>> re.findall('(1(23)45)', '12345')
[('12345', '23')]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51007831)
 From the https://docs.python.org/2/library/re.html#module-contents docs 

 
   If one or more groups are present in the pattern, return a list of
  groups; this will be a list of tuples if the pattern has more than one
  group. 
 

 In you regex you have a capturing group  (/\d{1,2})?   

 You could make it a non capturing group instead  (?:/\d{1,2})?  

 Your regex would look like: 

 https://regex101.com/r/C7zcLf/1 

  import re
port = "Gi1/0/1 Fa0/1"
search = re.findall(r'\w{2}\d/\d{1,2}(?:/\d{1,2})?', port)
print search
  

 http://rextester.com/CCAOX96862 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6018450)
  findall  just returns the captured groups: 

  >>> re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')
[('de', '123'), ('de', '123')]
  

 Relevant doc excerpt: 

 
   Return all non-overlapping matches of
  pattern in string, as a list of
  strings. The string is scanned
  left-to-right, and matches are
  returned in the order found. If one or
  more groups are present in the
  pattern, return a list of groups; this
  will be a list of tuples if the
  pattern has more than one group. Empty
  matches are included in the result
  unless they touch the beginning of
  another match. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31915134)
 There are two things to note here: 

 
   re.findall  returns captured texts if the regex pattern contains capturing groups in it   
 the  r'\\.'  part in your pattern matches two consecutive chars,  \  and any char other than a newline. 
 

 See https://docs.python.org/2/library/re.html#re.findall: 

 
   If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result unless they touch the beginning of another match. 
 

 Note that  to make  re.findall  return just match values , you may usually 

 
 remove redundant capturing groups (e.g.  (a(b)c)  ->  abc ) 
 convert all capturing groups into https://stackoverflow.com/questions/3512471/what-is-a-non-capturing-group-what-does-do (that is, replace  (  with  (: )  unless  there are backreferences that refer to the group values in the pattern (then see below) 
 use  re.finditer  instead ( [x.group() for x in re.finditer(pattern, s)] ) 
 

 In your case,  findall  returned all captured texts that were empty because you have  \\  within  r''  string literal that tried to match a literal  \ .  

 To match the numbers, you need to use 

  -\d*\.\d+
  

 The regex matches: 

 
  -  - Optional minus sign 
  \d*  - Optional digits 
  \.  - Optional decimal separator 
  \d+  - 1 or more digits. 
 

 See https://regex101.com/r/oJ7pX9/1 

 Here is http://ideone.com/GN4CLB: 

  import re
s = r'abc123d, hello 3.1415926, this is my book'
pattern = r'-\d*\.\d+'
L = re.findall(pattern, s)
print(L)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13774088)
 . First off, you'll want a non-capturing group - the capturing group you have there will only capture '255.', and use that as the output for  re.findall . 

 Example: 

  re.findall(r'(?:255\.){2}', '255.255.252.255.255.12')
  

 :) construct is a non-capturing group - and without any capturing groups, re.findall returns the entire matching string. 

 Note that this won't actually return  ['255.255', '255.255']  - it will actually return  ['255.255.', '255.255.'] . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16045720)
 Use an outer group, with the inner group a non-capturing group: 

  >>> re.findall("((?:100|[0-9][0-9]|[0-9])%)","89%")
['89%']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45876222)
 Since you defined 4 http://www.regular-expressions.info/brackets.html in the pattern, they will always be part of the  re.findall  output unless you remove them (say, by using  filter(None, ...) . 

 However, in the current situation, you may "shrink" your pattern to 

  r'(.(\d+(?.\d+)?)'
  

 See the https://regex101.com/r/ZwPJTT/1 

 Now, it will only have 2 capturing groups, and thus,  findall  will only output 2 items per tuple in the resulting list. 

  Details : 

 
  (.  - Capturing group 1 matching any zero or more chars other than line break chars, as few as possible up to the first occurrence of ... 
  (\d+(?.\d+)?)  - Capturing group 2: 

 
  \d+  - one of more digits 
  (?.\d+)?  - an optional *non-*capturing group that matches 1 or 0 occurrences of a  .  and 1+ digits. 
  
 

 See the https://ideone.com/Xd0KYl: 

  import re
rx = r"(.(\d+(?:[.]\d+)?)"
ss = ["CA$1.90", "RM1"]
for s in ss:
    print(re.findall(rx, s))
# => [('CA$', '1.90')]  [('RM', '1')]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30142441)
 Use a non-capturing group. The matches are succeeding, but the output is the contents of the optional groups that  don't  actually match. 

 See the output when your input includes something like  e-6 : 

  >>> re.findall(r'\d{1,4}:[-+]?\d+\.\d+(e-\d+)?', '1:0.00003 3:0.123456 8:-0.12345e-6')
['', '', 'e-6']
  

 With a non-capturing group ( (?:...) ): 

  >>> re.findall(r'\d{1,4}:[-+]?\d+\.\d+(?:e-\d+)?', '1:0.00003 3:0.123456 8:-0.12345e-6')
['1:0.00003', '3:0.123456', '8:-0.12345e-6']
  

 

 Here's are some simpler examples to demonstrate how capturing groups work and how they influence the output of  findall .  

  >>> re.findall("a[bc]", "ab")
["ab"]
  

 Here, the string "ab" matched the regex, so we print everything the regex matched. 

  >>> re.findall("a([bc])", "ab")
["b"]
  

 This time, we put the  [bc]  inside a capturing group, so even though the entire string is still matched by the regex,  findall  only includes the part inside the capturing group in its output. 

  >>> re.findall("a(?:[bc])", "ab")
["ab"]
  

 Now, by converting the capturing group to a non-capturing group,  findall  again uses the match of the entire regex in its output. 

  >>> re.findall("a([bc])?", "a")
['']
>>> re.findall("a(?:[bc])?", "a")
['a']
  

 In both of these final case, the regular expression as a whole matches, so the return value is a non-empty list. In the first one, the capturing group itself doesn't match any text, though, so the empty string is part of the output. In the second, we don't have a capturing group, so the match of the entire regex is used for the output. 



