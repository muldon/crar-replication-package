Query: Python regular expressions - how to capture multiple groups from a wildcard expression?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5095633)
 Try the following regex:  ^....*){b})?.  

  import re

inputs = ['{a}text{b}test', 'text', 'text{b}text', 'text{b}', 'text{a}text']
p = re.compiler"^....*){b})?.")
for input in inputs:
    print p.matchinput).groups)
  

 Output: 

  '', '{a}', 'text', '{b}', 'test')
'', None, 'text', None, '')
'', None, 'text', '{b}', 'text')
'', None, 'text', '{b}', '')
'text', '{a}', 'text', None, '')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5598482)
 You can't use groups for this, I'm afraid.  Each group can match only once, I believe all regexes work this way.  A possible solution is to try to use findall() or similar. 

  r=re.compile(r'\w')
r.findall(x)
# 'a', 'b', 'c', 'd', 'e', 'f'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14027339)
 From the http://docs.python.org/2/library/re.html 

 
   If one or more groups are present in the pattern, return a list of groups 
 

 If you want it to just use the group for grouping, but not for capturing, use a non-capture group: 

  a = re.compile('p(?:resent)')
  

 For this regular expression, there's no point in it, but for more complex regular expressions it can be appropriate, e.g.: 

  a = re.compile('p(?:resent|eople)')
  

 will match either 'present' or 'people'. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5598483)
 To find all matches in a given string use http://docs.python.org/library/re.html#re.findall. Also, if you want to obtain every letter here, your regex should be either  '(\w){1}'  or just  '(\w)' . 

  

  r = re.compile('(\w)')
l = re.findall(r, x)

l == ['a', 'b', 'c', 'd', 'e', 'f']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27452932)
 This can easily be achieved using the https://docs.python.org/2/library/re.html#re.MatchObject.start. 

  import re

string= "Substitute a **list_item** here, Substitute a **list_item** here, Substitute a **list_item** here"
pattern= r'\w.*(?P<first_match>list_item)\W.*\W.*(?P<second_match>list_item)\W.*\W.*(?P<third_match>list_item)'

list= ["first_item", "second_item", "third_item"]


result= ''
i= 0
last_match= 0
match= re.match(pattern, string)
for count in xrange(len(match.groups())): # for each group...
    result+= string[last_match:match.start(i+1)] # add all text up to the start of the group
    result+= list[i] # add the next list item
    last_match= match.end(i+1)
    i+= 1
result+= string[last_match:] # finally, add all text after the last group

print result
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9576609)
  

  import re

my_text = "*<string1>*<string2>*<string3>*"
r = re.compile('(?<=\<)[^>]*')

print r.search(my_text).group(0)

print r.findall(my_text) #This will get an array of all matches.
  

 The  (?<=\<)  is a lookbehind, meaning check for matching, but don't capture 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/464879)
 In addition to https://stackoverflow.com/questions/464736/python-regular-expressions-how-to-capture-multiple-groups-from-a-wildcard-expre#464755, here is the explanation: 

 In regular expressions the group count is fixed. Placing a quantifier behind a group does not increase group count (imagine all other group indexes increment because an eralier group matched more than once). 

 Groups with quantifiers are the way of making a complex sub-expression atomic, when there is need to match it more than once. The regex engine has no other way than saving the last match only to the group. In short: There is no way to achieve what you want with a single "unarmed" regular expression, and you have to find another way. 



