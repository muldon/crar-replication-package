Query: 'List of lists' to 'list' without losing empty lists from the original list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18022302)
 Are you starting with the strings  'a' ,  'b' , etc.? If so then you can use  ''.join  to convert  ['a']  into  'a'  and  []  into  '' . 

  [''.join(l) for l in list_of_lists]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18022324)
 Simply choose  ['']  instead of the empty list when presented with an empty sublist: 

  list_of_lists = [['a'],['b'], [], ['c'], [], [], ['d']]
[x for sublist in list_of_lists for x in sublist or ['']]
  

 If you have some more complicated criteria for treating some sublists specially, you can use  ... if ... else ... : 

  [x for sublist in list_of_lists for x in (sublist if len(sublist)%2==1 else [42])]
  

 P.s. I'm assumig that the lack of quotes in the original is an oversight. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14813962)
 https://stackoverflow.com/a/14813529/284795 is correct. 

 Stepping back, you might be able to avoid creating those empty lists at all, by use of http://docs.python.org/2/library/collections.html#collections.defaultdict 

  >>> import collections
>>> d = collections.defaultdict(list)
>>> d
defaultdict(<type 'list'>, {})
>>> d["hobbits"].append("Frodo")
>>> d["hobbits"].append("Sam")
>>> d
defaultdict(<type 'list'>, {'hobbits': ['Frodo', 'Sam']})
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53359944)
  list_copy = my_list[0:NUMBER-1]
  

 - copy first NUMBER elements from my_list to list_copy 

  my_list = my_list[NUMBER-1:]
  

 - remove first NUMBER elements from my_list 

 Update, without slicing: 

  list_copy = []
j = number - 1
while j >= 0:
    list_copy.append(my_list[j])
    del my_list[j] # if you need remove elements from original list
    j -= 1
  

 You did have "index out of range" because Python interpreter tries to get list_copy[i] from the empty list. Just use list_copy.append() for filling empty lists. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14813492)
  dict((k, v) for k, v in default.iteritems() if v)
  

 This filters all items which are not empty strings, empty dict/tuple/list. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28709401)
 You can use the https://docs.python.org/2/library/collections.html#collections.defaultdict module: 

  from collections import defaultdict
a = defaultdict(list)
  

 With this setting, the module initializes to an empty list on first access, so you can just do: 

   a['name'].append('el1')
  

 .  

 Hope that helps! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53240759)
 You can break the string into separate lines using its https://docs.python.org/3/library/stdtypes.html#str.splitlines method - this will give you a list of lines without their terminating newline ('\n') characters.   

 Then you can loop over the list and replace the tab characters with empty strings using the https://docs.python.org/3/library/stdtypes.html#str.replace method.    

  >>> for line in s.splitlines():
...     if not line:
...         # Skip empty lines
...         continue
...     cleaned = line.replace('\t', '')
...     print(cleaned)
... 
NOHPMDUINO
ESAEITLNIN
NPNNNGAODC
PERMANENTE
PETTINE
  

 Grouping the output in lists of lists is a little trickier.  The question doesn't mention the criteria for grouping, so let's assume that lines which are not separated by empty lines should be listed together. 

 We can use a https://docs.python.org/3.6/tutorial/classes.html#generators to iterate over the string, group adjacent lines and emit them as lists like this: 

  >>> def g(s):
...     out = []
...     for line in s.splitlines():
...         if not line:
...             if out:
...                 yield out
...                 out = []
...             continue
...         cleaned = line.replace('\t', '')
...         out.append([cleaned])
...     if out:
...         yield out
... 
>>> 
  

 The generator collects lines in a list ( out ) which it  yields  each time it finds a blank line and the list is not empty; if the list is yielded it is replaced with an empty list.  After looping over the lines in the string it yields the list again, if it isn't empty, in case the string didn't end with blank lines. 

 Looping over the generator returns the lists of lists in turn. 

  >>> for x in g(s):print(x)
... 
[['NOHPMDUINO'], ['ESAEITLNIN'], ['NPNNNGAODC']]
[['PERMANENTE'], ['PETTINE']]
  

 Alternatively, if you want a list of lists of lists, call  list  on the generator: 

  >>> lists = list(g(s))
>>> print(lists)
[[['NOHPMDUINO'], ['ESAEITLNIN'], ['NPNNNGAODC']], [['PERMANENTE'], ['PETTINE']]]
  

 If you want to assign the result to named variables, you can unpack the call to  list : 

  >>> group1, group2 = list(g(s))
>>> group1
[['NOHPMDUINO'], ['ESAEITLNIN'], ['NPNNNGAODC']]
>>> group2
[['PERMANENTE'], ['PETTINE']]
  

 but note to do this you need to know the number of lists that will be generated in advance. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28709388)
 So, the way that you've phrased it no, you can only  append  to something that exists. That said, you don't have to append to this at all, you could do this: 

  a = {'name': ['el1']}
  

 No need to manually create your structure like that. 

 If you want to check for the existence of a key before trying to append to a list you can do this: 

  a.setdefault('name', []).append('el1')
  

 The second argument to  get  also gives you a default, saying if  name  doesn't exist, append to an empty list instead. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6046508)
 Without using collections: 

  a = reversed(sorted(l,key=l.count))
outlist = []
for element in a:
  if element not in outlist:
    outlist.append(element)
  

 The first line gets you all the original items sorted by count. 

 The for loop is necessary to uniquify without losing the order (there may be a better way). 



