Query: How to set "step" on axis X in my figure in matplotlib python 2.6.6?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10839788)
  plt.xticks([1, 2, 3, 4, 5])
  

 http://matplotlib.sourceforge.net/api/pyplot_api.html?highlight=xticks#matplotlib.pyplot.xticks 

   


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36817834)
 You can use a  range  with a stepsize to label every 5th cell: 

  locs = range(0, N, 5)
ax.set(xticks=locs, xlabels=...)
  

 

 For example, 

  from matplotlib import pyplot as plt
from matplotlib import colors as mcolors
import numpy as np


N = 21
zvals = 100*np.random.randn(N, N)
fig = plt.figure(2)
ax = fig.add_subplot(111)
cmap2 = mcolors.LinearSegmentedColormap.from_list(
    'my_colormap', ['blue','green','brown'], 256)

img2 = plt.imshow(zvals,interpolation='nearest',
                  cmap=cmap2, origin='lower')
plt.colorbar(img2, cmap=cmap2)
step = 5
locs = range(0, N, step)
ax.set(
    xticks=locs,
    xticklabels=['$2^{{{}}}$'.format(i-5) for i in locs],
    yticks=locs,
    yticklabels=['$2^{{{}}}$'.format(i-15) for i in locs])
plt.show()
  

 https://i.stack.imgur.com/05Pst.png 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50386042)
 One way to approach this would be: 

  import numpy as np
#retrieve automatically generated axis values
axmin = ax.get_rmin()
axmax = ax.get_rmax()
step = 6
#generate new ticklist with desired step size
axlist = np.arange(axmin, axmax + step, step)
#set new ticks
ax.set_rticks(axlist) 
  

 Output 

 https://i.stack.imgur.com/zMZ9k.jpg 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8604388)
  0,1,5,10,100,1000,100000?  

 If you can live with (0.01, 0.1,), 1, 10, 100, 1000, 10000, 100000,â€¦ - then change the xscale to log: 

  plt.xscale('log')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33781169)
 You can do this using the http://matplotlib.org/api/ticker_api.html module. We will need to set the formatter  locator for the  xaxis  ticks, using  

  ax.xaxis.set_major_locator
  

  

  ax.xaxis.set_major_formatter
  

 We will use a http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.MultipleLocator to place the ticks on the given fractions (i.e. every multiple of  step ), then a http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.FuncFormatter to render the tick labels as fractions. 

  import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

step=1./13.
x=np.arange(0,14)*step
y=np.sin(2*np.pi*x)

fig,ax = plt.subplots()

ax.plot(x,y,'r*')

def fractions(x,pos):
    if np.isclose((x/step)%(1./step),0.):
        # x is an integer, so just return that
        return '{:.0f}'.format(x)
    else:
        # this returns a latex formatted fraction
        return '$\\frac{{{:2.0f}}}{{{:2.0f}}}$'.format(x/step,1./step)
        # if you don't want to use latex, you could use this commented
        # line, which formats the fraction as "1/13"
        ### return '{:2.0f}/{:2.0f}'.format(x/step,1./step)

ax.xaxis.set_major_locator(ticker.MultipleLocator(step))
ax.xaxis.set_major_formatter(ticker.FuncFormatter(fractions))

plt.show()
  

 https://i.stack.imgur.com/hIPt3.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48612975)
 Not sure, you can achieve this with  np.arange , but you can define  x  and  y  with https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html 

  from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from numpy import sin, pi, linspace

x =  linspace(0.0, 10, 100)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
for k in range(1, 4):
    #sine wave with amplitude modulation by k
    z = sin(2 * x * pi) * k + k
    #keeping y constant for each k
    y = linspace(k, k, 100)

    ax.plot(x, y, z )

plt.xlabel(' x', fontsize = 12, color = 'black')
plt.ylabel(' y', fontsize = 12, color = 'black')
plt.show()
  

 Difference here is that  np.linspace  has as parameter number of steps, while  np.arange  uses the step size.  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21169606)
 You can also just create an axis and set its background color to the minimum colormap value (or any color you desire): 

  fig = plt.figure()
ax = fig.add_subplot(111,axisbg=cm.jet(0))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44012374)
 You can use the  lines  on your  figure  object.
The advantage is that these figure lines are of higher level that the ones on axis, so no need to worry about drawing axis for it.
(I got the idea from this stackoverflow answer: https://stackoverflow.com/a/17560223/6151948) 

 Applied to your code, this look like this: 

  import matplotlib.pyplot as plt
import matplotlib as mpl

#x-axis
x_axis = [0,1,2,3,4,5,6,7,8,19,20,21,22,23,24,25]

# Line 1
line = [99,91,86,80,80,76,72,72,73,74,76,78,79,80,80,80]


# create broken x-axis
f, (ax, ax2) = plt.subplots(1, 2, sharey=True)
ax.step(x_axis, line, color='red')
ax2.step(x_axis, line, color='red')

ax.set_xlim(0, 10.5)
ax2.set_xlim(18.5, 30)

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

ax2.spines['left'].set_visible(False)
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)

ax2.tick_params(
                axis='y',
                which='both',
                left='off')

# seperators for x-axis

d = .015
kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)
ax.plot((1 - d, 1 + d), (-d, +d), **kwargs) 

kwargs.update(transform=ax2.transAxes) 
ax2.plot ( (0-d ,0+d),(-d, +d ), **kwargs)

# transFigure: used to transform the coordinates from your subplots
# to coordinates on the figure
# points are hardcoded as an example
transFigure = f.transFigure.inverted()
# last point on your left figure
coord1 = transFigure.transform(ax.transData.transform([8,74]))
# first point on your right figure
coord2 = transFigure.transform(ax2.transData.transform([19,74]))

# generate your line with the transformed coordinates
line = mpl.lines.Line2D((coord1[0],coord2[0]),(coord1[1],coord2[1]),
                       transform=f.transFigure, color='red')
# add your line to the figure
f.lines.append(line)

plt.show()
  

 https://i.stack.imgur.com/jdJ5T.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/27456285)
 use  plt.yticks(np.arange(min, max, step))  instead of  plt.ylim()  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/21354212)
 The  plt.xticks()  method calls a function  draw_if_interactive()  that comes from  pylab_setup() , who is updating the graph. In order to do it using  sp1.set_xticks() , just call the corresponding  show()  method: 

  sp1.figure.show()
  



