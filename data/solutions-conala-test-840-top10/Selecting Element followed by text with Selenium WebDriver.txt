Query: Selecting Element followed by text with Selenium WebDriver
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51930095)
 As per your question to click through the  next  page until the it reaches to the last page, you can use the following solution: 

 
  Code Block: 

  from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import StaleElementReferenceException

options = webdriver.ChromeOptions() 
options.add_argument("start-maximized")
options.add_argument('disable-infobars')
driver=webdriver.Chrome(chrome_options=options, executable_path=r'C:\Utility\BrowserDrivers\chromedriver.exe')
driver.get("https://stackoverflow.com/users/37181/alex-gaynor?tab=tags")
WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, "//a[@class='grid--cell fc-white js-notice-close' and @aria-label='notice-dismiss']"))).click()
while True:
    try:
    driver.execute_script(("window.scrollTo(0, document.body.scrollHeight)"))
    WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, "//div[@class='pager fr']//a[last()]/span[@class='page-numbers next']")))
    driver.find_element_by_xpath("//div[@class='pager fr']//a[last()]/span[@class='page-numbers next']").click()
    except (TimeoutException, NoSuchElementException, StaleElementReferenceException) :
    print("Last page reached")
    break
driver.quit()
   
  Console Output: 

  Last page reached
   
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/51928396)
 You need to close this banner first -  

 https://i.stack.imgur.com/DXAIf.png  

 Since selenium opens a fresh browser instance so the website will ask you to store cookies every time you run the script. It is this exact banner which is coming in the way of selenium clicking your "next" button. Use this code to delete that close button - 

  driver.find_element_by_xpath("//a[@class='grid--cell fc-white js-notice-close']").click()
  

 Also,   driver.find_element_by_link_text('next')  will throw a StaleElementReferenceException. Use this locator instead - 

  driver.find_element_by_xpath("//span[contains(text(),'next')]").click()
  

  Final code -  

  driver.get("https://stackoverflow.com/users/37181/alex-gaynor?tab=tags")

driver.find_element_by_xpath("//a[@class='grid--cell fc-white js-notice-close']").click()


while True:
  try:
      time.sleep(3)
      driver.find_element_by_xpath("//span[contains(text(),'next')]").click()

    except NoSuchElementException:
        break
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11409449)
 As @sherwin-wu already said, you should find a way to select what you want based on id or name or class (and most likely a combination of it). In your example there seem to be enough possibilities to do so, although I don't know what the rest of the page normally looks like. 

 Having that said, it's possible to do what you asked for using an XPath selector like 

  driver.find_element_by_xpath("//li/label/input[contains(..,'polishpottery')]")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22357370)
 I had to use the ActionChains class to move to the element a then click. Then the Select2 element would open in Firefox and PhantomJS. It worked without this hack in Chrome but I needed PhantomJS support. 

  from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait

#Click on the element to open the dropdown
el = driver.find_element_by_id('id_to_element')
actions = ActionChains(driver)
actions.move_to_element(el)
actions.click()
actions.perform()

#Click on the correct item within the dropdown, waiting for it to load
item_to_select = 'Some text in select'

xpath = '//div[@class="select2-result-label" and' +\
    ' text()[contains(.,"%s")]]' % (item_to_select)

wait = WebDriverWait(driver, 10)
elm = wait.until(
    EC.element_to_be_clickable(
        (
            By.XPATH,
            xpath
        )
    ),
    'waiting for %s to be clickable' % (xpath)
)
elm.click()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36614539)
 http://selenium-python.readthedocs.org/waits.html#explicit-waits until the textarea appear. 

  from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


...


url = "https://readability-score.com/"
text = "Hello hello hello, this is a test"

driver.get(url)
WebDriverWait(driver, 5).until(
    EC.presence_of_element_located((By.ID, "text_to_score"))
)  # Wait until the `text_to_score` element appear (up to 5 seconds)
driver.find_element_by_id("text_to_score").clear()
driver.find_element_by_id('text_to_score').send_keys(text)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34904796)
 You can use  Select  class with explicit wait 

  wait = WebDriverWait(driver, 10)
dropDown = wait.until(expected_conditions.visibility_of_element_located((By.ID, 'asd')))
select = Select(dropDown)
select.select_by_value('01')
  

 By the way,  selectByVisibleText()  is Java syntax. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54194860)
 To  click()  on the element with text as  Next  you have to induce  WebDriverWait  for the  element to be clickable  and you can use either of the following solutions: 

 
  Using  LINK_TEXT : 

  WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.LINK_TEXT, "Next"))).click()
   
  Using  CSS_SELECTOR : 

  WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "a.paginate_button next#industry_rank_table_next"))).click()
   
  Using  XPATH : 

  WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, "//a[@class='paginate_button next' and @id='industry_rank_table_next']"))).click()
   
   Note  : You have to add the following imports : 

  from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
   
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37661791)
 Just  fix your selector  to match the  Men  link: 

  wait.until(EC.visibility_of_element_located(
    (By.CSS_SELECTOR, "li[data-nav-tracking=customize] [data-nav-tracking=men] a"))).click()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36360387)
  select_by_visible_text()  method is available on the http://selenium-python.readthedocs.org/api.html#selenium.webdriver.support.select.Select class, instantiate it: 

  from selenium.webdriver.support.select import Select

dataset_drop_down_element = WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable((By.ID, 'search_variables_lb_datasets')))
dataset_drop_down_element = Select(dataset_drop_down_element)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/27107884)
 Selenium has a special way of handling  select -> option  elements - a http://selenium-python.readthedocs.org/api.html#selenium.webdriver.support.select.Select. Find your  select  tag by id, instantiate a  Select  class and http://selenium-python.readthedocs.org/api.html#selenium.webdriver.support.select.Select.select_by_visible_text: 

  from selenium.webdriver.support.ui import Select

select = Select(driver.find_element_by_id('stuff_devicessettings_Modbus_TCP'))
select.select_by_visible_text("No device connected")
  



