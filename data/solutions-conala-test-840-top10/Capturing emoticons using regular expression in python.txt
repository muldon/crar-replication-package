Query: Capturing emoticons using regular expression in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10890297)
  

  string1_gbk = string1.decode('utf-8').encode('gb2312', 'replace')
  

 Should output ? instead of those emoticons. 

 http://docs.python.org/library/stdtypes.html#str.encode - http://wiki.python.org/moin/UnicodeEncodeError 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11480236)
 In a regex,  [...]  is a set of characters, so  [\(ï¼ˆ]  will match either and open parenthesis or a space (it can be shortened to  [( ] ), and  [\s+]?  will match an optional whitespace character or a plus sign. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34522939)
  import re

message1 = "I'm happy today :-)"
message2 = 'Me too *<:-) :3'
message3 = 'I prefer emoticons like this: =D =) =P'

regexp = re.compile("(([{}*<]+)?[:;8B=xX#%*0][-o]?[DbP)(>{c$I3/\J&])")
emoticons1 = regexp.findall(message1)
emoticons2 = regexp.findall(message2)
emoticons3 = regexp.findall(message3)
print(emoticons1)
print(emoticons2)
print(emoticons3)
  

 If you want have only two capture per emoticons, one for emoticon and another for hat, you need have only two group. 

 And, where:  [DbP)(>{c$I3/\J&] 
You can not use  \  at  \J  in charclass. In charclass, everthing is character. If you want get  J , you should only use  J . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46178877)
 I think that all of those characters are in  Symbol, other  https://en.wikipedia.org/wiki/Unicode_character_property.  

  [w for w in lst if any(c for c in w if unicodedata.category(c) == 'So')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14571490)
 Try  ::|;|=) . Haven't tested it extensively, but does seem to match the right ones and not more... 

  In [15]: import re

In [16]: s = "Just: to :)) =) test :(:-(( ():: :):) :(:( :P ;)!"

In [17]: re.findall(r'::|;|=)',s)
Out[17]: [':)', '=)', ':(', ':-(', ':)', ':)', ':(', ':(', ':P', ';)']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34523102)
 Each parenthesis pair adds a capturing group to your expression. To debug your regex, name your capturing groups with  ?P<name> : 

  regexp = re.compile("(?P<A>(?P<B>[{}]|K|(?P<C>E-)|(?P<D>\*<))?[:;8B=xX#%*0][-o]?[DbP)(>{c$I3/\J&])")
  

  

  >>> print regexp.match(':-)').groupdict()
{'A': ':-)', 'C': None, 'B': None, 'D': None}
  

 which makes sense to me. 

 Note that unless you want to capture those specific parts of the emoticons, the C and D groups look unnecessary to me. And unless you want to capture the hat part separately, the B group can be made non-capturing by using  (?:)  instead of  () . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20583383)
 I see two approaches to your problem: 

 
 Either, you can create a regular expression for a "generic smiley" and try to match as many as possible without making it overly complicated and insane. For example, you could say that each smiley has some sort of eyes, a nose (optional), and a mouth. 
 Or, if you want to match each and every smiley from that list (and none else) you can just take those smileys, escape any regular-expression specific special characters, and build a huge disjunction from those. 
 

 Here is some code that should get you started for both approaches: 

  # approach 1: pattern for "generic smiley"
eyes, noses, mouths = r":;8BX=", r"-~'^", r")(/\|DP"
pattern1 = "[%s][%s]?[%s]" % tuple(map(re.escape, [eyes, noses, mouths]))

# approach 2: disjunction of a list of smileys
smileys = """:-) :) :o) :] :3 :c) :> =] 8) =) :} :^) 
             :D 8-D 8D x-D xD X-D XD =-D =D =-3 =3 B^D""".split()
pattern2 = "|".join(map(re.escape, smileys))

text = "bla bla bla :-/ more text 8^P and another smiley =-D even more text"
print re.findall(pattern1, text)
  

 Both approaches have pros, cons, and some general limitations. You will always have false positives, like in a mathematical term like  18^P . It might help to put spaces around the expression, but then you can't match smileys followed by punctuation. The first approach is more powerful and catches smileys the second approach won't match, but only as long as they follow a certain schema. You could use the same approach for "eastern" smileys, but it won't work for strictly symmetric ones, like  =^_^= , as this is not a regular language. The second approach, on the other hand, is easier to extend with new smileys, as you just have to add them to the list. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23224099)
 Use a non-capturing group https://docs.python.org/2/library/re.html#regular-expression-syntax: 

  >>> import re
>>> s = 'habcabcabcj'
>>> re.findall(r'(?:abc)+', s)
['abcabcabc']
>>>
  



