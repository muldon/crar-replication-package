Query: Regex, find pattern only in middle of string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18315937)
 Maybe this will do? 

  import re

re.findall(r'\b[^A-Z\s\d]+\b', u'Rob Alsod is normal (éternel)', re.UNICODE)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35623466)
 Since "n" is a character (and not a subpattern), you can simply use: 

  re.findall(r'(?<=[^n])nn+(?=[^n])(?i)', s)
  

  

  re.findall(r'n(?<=[^n]n)n+(?=[^n])(?i)', s)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35623325)
 Instead of using a complicated regex in order to refuse of matching the leading and trailing  n  characters. As a more  pythonic  approach you can  strip()  your string then find all the sequence of  n s using  re.findall()  and a simple regex: 

  >>> s = "nnnABCnnnnDEFnnnnnGHInnnnnn" 
>>> import re
>>> 
>>> re.findall(r'n{2,}', s.strip('n'), re.I)
['nnnn', 'nnnnn']
  

  Note  :  re.I  is  Ignore-case  flag which makes the regex engine matches upper case and lower case characters. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5630275)
 Here's something I think might help 

  import re
s = 'My name is Conrad, and blahblah@gmail.com is my email.'
domain = re.search("@[\w.]+", s)
print domain.group()
  

 outputs 

  @gmail.com
  

 How the regex works: 

  @  - scan till you see this character 

  [\w.]  a set of characters to potentially match, so  \w  is all alphanumeric characters, and the trailing period  .  adds to that set of characters. 

  +  one or more of the previous set. 

 Because this regex is matching the period character and every alphanumeric after an  @ , it'll match email domains even in the middle of sentences. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48597647)
 This should find all the phone numbers in a given string 

 re.findall(r'+?[1-9][0-9 .-()]{8,}[0-9]', Source) 

   >>> re.findall(r'[\+\(]?[1-9][0-9 .\-\(\)]{8,}[0-9]', Source)
 ['+60 (0)3 2723 7900', '+60 (0)3 2723 7900', '60 (0)4 255 9000', '+6 (03) 8924 8686', '+6 (03) 8924 8000', '60 (7) 268-6200', '+60 (7) 228-6202', '+601-4228-8055']
  

 Basically, the regex lays out these rules 

 
 The matched string may start with + or ( symbol 
 It has to be followed by a number between 1-9 
 It has to end with a number between 0-9 
 It may contain 0-9 (space) .-() in the middle. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18307604)
 This regex with word boundaries should work for you: 

  /\b[a-z]+\b/
  

 However you do need to provide more info like which language/tool you're using for your coding. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35623350)
   NOTE  :  This solution assumes  n  may be a sequence of some characters. For more efficient alternatives when  n  is just 1 character, see other answers here.  

 You can use 

  (?<!<!n)((n)\2{2,})(?!$)(?!n)
  

 See the https://regex101.com/r/dY3cZ9/2 

 The regex will match repeated consecutive  n s (ignoring case can be achieved with  re.I  flag) that are not at the beginning ( (?<!^) ) or end ( (?!$) ) of the string and not before ( (?!n) ) or after ( (?<!n) ) another  n . 

 The  (?<!<!n)  is a sequence of 2 lookbehinds:  (?<!^)  means  do not consume the next pattern if preceded with the start of the string . The  (?<!n)  negative lookbehind means  do not consume the next pattern if preceded with  n  . The negative lookaheads  (?!$)  and  (?!n) have similar meanings:  (?!$)  fails a match if after the current position the end of string occurs and  (?!n)  will fail a match if  n  occurs after the current position in string (that is, right after matching all consecutive  n s. The lookaround conditions must all be met, that is why we only get the innermost matches. 

 See https://ideone.com/x4mTUa: 

  import re
p = re.compile(r'(?<!<!n)((n)\2{2,})(?!$)(?!n)', re.IGNORECASE)
s = "nnnnnnnABCnnnnnNnnnnDEFnNn"
print([x.group() for x in p.finditer(s)])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38083098)
 You can use this regex to match all header options: 

  header_pattern = re.compile(r'-H\s*([\'"])(.+?)\1')
  

 https://regex101.com/r/qD7eY0/2 

 There is no real need to assert for whitespace before  -H  but you need you can use: 

  header_pattern = re.compile(r'(?<=\s)-H\s*([\'"])(.+?)\1')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51802517)
 If the pattern remains the same, try out a non- regex  solution: 

  s = '02R-01240-250A'

print(s.split('-')[1][-2:])
# 40
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/23031401)
 . From your question title It looks you wants to find "All words in a string e.g 'line' those doesn't starts with {", but you are using re.search() function that confuses me. 

  re.search()  and  re.findall() </h3>

 The function https://docs.python.org/2/library/re.html#re.RegexObject.search return  a  corresponding MatchObject instance, re.serach is usually used to match and return a patter in a long string.  It doesn't return all possible matches . See below a simple example:   

  >>> re.search('a', 'aaa').group(0) # only first match
'a'
>>> re.search('a', 'aaa').group(1) # there is no second matched
Traceback (most recent call last):
  File "<console>", line 1, in <module>
IndexError: no such group
  

 With regex  'a'  search returns  only one  patters  'a'  in string  'aaa' , it doesn't returns all possible matches.  

 If your objective to find – "all words in a string those doesn't starts with  { ". You should use https://docs.python.org/2/library/re.html#re.findall function:- that matches all occurrences of a pattern, not just the first one as re.search() does. See example: 

  >>> re.findall('a', 'aaa')
['a', 'a', 'a']
  

  Edit:  On the basis of comment adding one more example to demonstrate use of re.search and re.findall:   

  >>> re.search('a+', 'not itnot baaal laaaaaaall ').group()
'aaa'                 # returns ^^^   ^^^^^ doesn't 
>>> re.findall('a+', 'not itnot baaal laaaaaaall ')
['aaa', 'aaaaaaa']    #          ^^^   ^^^^^^^ match both                 
  

 Here is a good tutorial for Python re module: http://pymotw.com/2/re/index.html#module-re     

 Additionally, there is concept of group in Python-regex – "a matching pattern within parenthesis". If more than one groups are present in your regex patter then re.findall()  return a list of groups; this will be a list of tuples if the pattern has more than one group.  

  >>> re.findall('(a(b))', 'abab') # 2 groups according to 2 pair of ( )
[('ab', 'b'), ('ab', 'b')] # list of tuples of groups captured
  

 In Python regex  (a(b))  contains two groups; as two pairs of parenthesis (this is unlike regular expression in formal languages – regex are not exactly same as regular 
expression in formal languages but that is different matter).  

 

  Answer : The words in sentence  line  are separated by spaces (other either at starts of string) regex should be:  

  ur"(^|\s)(\w+)
  

 Regex description:  

 
  (^|\s+)  means: either word at start or start after some spaces.  
  \w* :  Matches an alphanumeric character, including "_". 
 

 On applying regex  r  to your line:  

  >>> import pprint    # for pretty-print, you can ignore thesis two lines
>>> pp = pprint.PrettyPrinter(indent=4)

>>> r = ur"(^|\s)(\w+)"
>>> L = re.findall(r, line)
>>> pp.pprint(L)
[   (u'', u'I'),
    (u' ', u'need'),
    (u' ', u'to'),
    (u' ', u'match'),
    (u' ', u'the'),
    (u' ', u'whole'),
    (u' ', u'line'),
    (u' ', u'except'),
    (u' ', u'for'),   # notice 'for' after 'for'
    (u' ', u'for'),   # '{thisword' is not included
    (u' ', u'example')]
>>> 
  

 To find all words in a single line use: 

  >>> [t[1] for t in re.findall(r, line)]
  

 Note: it will avoid { or any other special char from line because \w only pass alphanumeric and '_' chars.  

 

 If you specifically only avoid  {  if it appears at start of a word (in middle it is allowed) then use regex:  r = ur"(^|\s+)(P<word>[^{]\S*)" .  

 To understand diffidence  between this regex and other is check this example: 

  >>> r = ur"(^|\s+)(P<word>[^{]\S*)"
>>> [t[1] for t in re.findall(r, "I am {not yes{ what")]
['I', 'am', 'yes{', 'what']
  

 

  Without Regex:   

 You could achieve same thing simply without any regex as follows: 

  >>> [w for w in line.split() if w[0] != '{']
  

 

  re.sub() to replace pattern  

 If you wants to just replace one (or more) words starts with  {  you should use https://docs.python.org/2/library/re.html#re.sub to replace patterns start with  {  by emplty string  ""  check following code:  

  >>> r = ur"{\w+"
>>> re.findall(r, line)
[u'{thisword']
>>> re.sub(r, "", line)
u'I need to match the whole line except for  for example'
  

 

  Edit  Adding Comment's reply:   

 The  (P<name>...)  is Python's Regex extension: (it has meaning in Python) -   (P<name>...)  is similar to regular parentheses - create a group (a named group).  The group is accessible via the symbolic group name. Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression. example-1:   

  >>> r = "(P<capture_all_A>A+)"
>>> mo = re.search(r, "aaaAAAAAAbbbaaaaa")
>>> mo.group('capture_all_A')
'AAAAAA'
  

 example-2: suppose you wants to filter name from a name-line that may contain title also e.g mr use regex:  name_re = "(P<title>(mr|ms)\. (P<name>[a-z ]*)"  

 we can read name in input string using  group('name') :   

  >>> re.search(name_re, "mr grijesh chauhan").group('name')
'grijesh chauhan'
>>> re.search(name_re, "grijesh chauhan").group('name')
'grijesh chauhan'
>>> re.search(name_re, "ms. xyz").group('name')
'xyz'
  



