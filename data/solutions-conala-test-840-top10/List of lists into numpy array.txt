Query: List of lists into numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35976847)
 also you can use  zip  function like this 

  In [1]: import numpy as np

In [2]: list1 = [ 2, 7 , 8 , 5]

In [3]: list2 = [18 ,29, 44,33]

In [4]: list3 = [2.3, 4.6, 8.9, 7.7]

In [5]: np.array(zip(list1,list2,list3))
Out[5]: 
array([[  2. ,  18. ,   2.3],
       [  7. ,  29. ,   4.6],
       [  8. ,  44. ,   8.9],
       [  5. ,  33. ,   7.7]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35976805)
 One way to do it would be to create your  numpy  array and then use the transpose function to convert it to your desired output: 

  import numpy as np

list1 = [ 2, 7 , 8 , 5]
list2 = [18 ,29, 44,33]
list3 = [2.3, 4.6, 8.9, 7.7]

arr = np.array([list1, list2, list3])
arr = arr.T
print(arr)
  

  Output  

  [[  2.   18.    2.3]
 [  7.   29.    4.6]
 [  8.   44.    8.9]
 [  5.   33.    7.7]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43146373)
 Do some preprocessing on the list, by padding the shorter sublists, before converting to a numpy array: 

  >>> lst = [[1, 2, 3], [4, 5], [1, 7, 8, 9]]
>>> pad = len(max(lst, key=len))
>>> np.array([i + [0]*(pad-len(i)) for i in lst])
array([[1, 2, 3, 0],
       [4, 5, 0, 0],
       [1, 7, 8, 9]])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51564842)
 You could make a structured array: 

  In [96]: ll = [['119', '222', '219', '293'], '4', ['179', '124', '500', '235'], '7']

In [97]: dt = np.dtype('4i,i')

In [98]: arr = np.zeros(2, dtype=dt)

In [99]: arr
Out[99]: 
array([([0, 0, 0, 0], 0), ([0, 0, 0, 0], 0)],
      dtype=[('f0', '<i4', (4,)), ('f1', '<i4')])

In [100]: arr['f0']=ll[::2]

In [101]: arr['f1']=ll[1::2]

In [102]: arr
Out[102]: 
array([([119, 222, 219, 293], 4), ([179, 124, 500, 235], 7)],
      dtype=[('f0', '<i4', (4,)), ('f1', '<i4')])
  

 and extracted out to a list: 

  In [103]: arr.tolist()
Out[103]: 
[(array([119, 222, 219, 293], dtype=int32), 4),
 (array([179, 124, 500, 235], dtype=int32), 7)]
  

 Or a 2x2 object dtype array: 

  In [104]: np.array(arr.tolist(),dtype=object)
Out[104]: 
array([[array([119, 222, 219, 293], dtype=int32), 4],
       [array([179, 124, 500, 235], dtype=int32), 7]], dtype=object)

In [105]: _.shape
Out[105]: (2, 2)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52442684)
 If always same length of lists is possible create nested lists and then convert to  np.array : 

  arr = np.array(df['B'].values.tolist())
#alternative
#arr = np.array(df['B'].tolist())
print (arr)
[[ 123  234  234]
 [ 124   25  235]
 [1267  267 2345]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35976830)
 you could use http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.transpose.html directly: 

  np.transpose([list1, list2, list3])
  

 and this will convert the list of your lists to a numpy array and transpose it (change rows to columns and columns to rows) afterwards: 

  array([[  2. ,  18. ,   2.3],
       [  7. ,  29. ,   4.6],
       [  8. ,  44. ,   8.9],
       [  5. ,  33. ,   7.7]])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48319221)
 Again, after searching for the problem of converting nested lists with N levels into an N-dimensional array I found nothing, so here's my way around it: 

  import numpy as np

new_array=np.array([[[coord for coord in xk] for xk in xj] for xj in xi], ndmin=3) #this case for N=3
  



