Query: Plotting a list of (x, y) coordinates in python matplotlib
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/44062487)
 If you have a numpy array you can do this: 

  import numpy as np
from matplotlib import pyplot as plt

data = np.array([
    [1, 2],
    [2, 3],
    [3, 6],
])
x, y = data.T
plt.scatter(x,y)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42471053)
 If you want to plot a single line connecting all the points in the list 

  plt . plot ( li [ : ] )

plt . show ( )
  

 This will plot a line connecting all the pairs in the list as points on a Cartesian plane from the starting of the list to the end.
I hope that this is what you wanted. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27820729)
 Here a simple example: 

  import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

fig, ax = plt.subplots()
points, = ax.plot(np.random.rand(10), 'o')
ax.set_ylim(0, 1)

def update(data):
    points.set_ydata(data)
    return points,

def generate_points():
    while True:
        yield np.random.rand(10)  # change this

ani = animation.FuncAnimation(fig, update, generate_points, interval=300)
ani.save('animation.gif', writer='imagemagick', fps=4);
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21519229)
 As per http://matplotlib.org/examples/shapes_and_collections/scatter_demo.html: 

  import numpy as np
import matplotlib.pyplot as plt

N = 50
x = np.random.rand(N)
y = np.random.rand(N)

plt.scatter(x, y)
plt.show()
  

 will produce: 

   

 To unpack your data from pairs into lists use  zip : 

  x, y = zip(*li)
  

  

  plt.scatter(*zip(*li))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42835966)
 The main point is that you need to redraw the canvas, once changes have been made to it. So in order for the new plot to become visible you can call  

  plt.gcf().canvas.draw()
  

 Here is a complete working code: 

  import matplotlib.pyplot as plt
import numpy as np

X = np.arange(10)
Y = np.sin(X)
plt.plot(X, Y)

startinput = plt.ginput(2)
x, y = zip(*startinput)

Ysliced = Y[int(x[0]):int(x[1])+1]
Xsliced = X[int(x[0]):int(x[1])+1]
plt.plot(Xsliced, Ysliced, color="C3", linewidth=3)

#draw the canvas, such that the new plot becomes visible
plt.gcf().canvas.draw()

plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17908191)
 Confusingly, your  y_list  contains the values being plotted along the  x-axis . If you want matplotlib to use values from  x_list  as  x-coordinates , then you should call  

  plt.plot(x_list, y_list)
  

 Maybe this is the root of your problem.
By default matplotlib sets the  x  and  y  limits big enough to include all the data plotted. 

 So with this change, matplotlib will now be using  x_list  as  x-coordinates , and will automatically set the limits of the  x-axis  to be wide enough to display all the  x-coordinates  specified in  x_list_of_lists . 

 

 However, if you wish to adjust the  x  limits, you could use the http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.xlim. 

 So, to set the lower limit of the  x-axis  to the lowest value in all of the  x_list  variables (and similarly for the upper limit), you'd do this: 

  xmin = min([min(x_list) for x_list in x_list_of_lists])-delta
xmax = max([max(x_list) for x_list in x_list_of_lists])+delta
plt.xlim(xmin, xmax)
  

 Make sure you place this  after  all the calls to  plt.plot  and (of course) before  plt.show() .  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52606234)
 This is one way of doing it by converting your list to array which allows you to slice all the elements directly as x, y, z and color coordinates. 

  import matplotlib.cm as cm
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')

new_array = = np.array(array1)
ax.scatter(new_array[:,0],new_array[:,1],new_array[:,2], c=new_array[:,3], cmap=cm.RdBu, s=100)
  

 https://i.stack.imgur.com/yWYg6.png 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16907551)
 http://pandas.pydata.org/pandas-docs/stable/visualization.html#parallel-coordinates has a parallel coordinates wrapper: 

  import pandas
import matplotlib.pyplot as plt
from pandas.tools.plotting import parallel_coordinates

data = pandas.read_csv(r'C:\Python27\Lib\site-packages\pandas\tests\data\iris.csv', sep=',')
parallel_coordinates(data, 'Name')
plt.show()
  

   

 Source code, how they made it: https://github.com/pydata/pandas/blob/master/pandas/tools/plotting.py#L494 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20689589)
 A script converting your coordinates to cartesian and plotting it with matplotlib with the comments included: 

  import numpy as np
import matplotlib.pyplot as plt
# import for 3d plot
from mpl_toolkits.mplot3d import Axes3D
# initializing 3d plot
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
# several data points 
r = np.array([0, 14, 64, 114])
# get lengths of the separate segments 
r[1:] = r[1:] - r[:-1]
phi = np.array([255.6, 255.6, 261.7, 267.4])
theta = np.array([-79.5, -79.5, -79.4, -78.8])
# convert to radians
phi = phi * 2 * np.pi / 360.
# in spherical coordinates theta is measured from zenith down; you are measuring it from horizontal plane up 
theta = (90. - theta) * 2 * np.pi / 360.
# get x, y, z from known formulae
x = r*np.cos(phi)*np.sin(theta)
y = r*np.sin(phi)*np.sin(theta)
z = r*np.cos(theta)
# np.cumsum is employed to gradually sum resultant vectors 
ax.plot(np.cumsum(x),np.cumsum(y),np.cumsum(z))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/5207749)
 From the documentation http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.bar 

  bar(left, height, width=0.8, bottom=0, **kwargs)
  

  

  Argument   Description
left   --> the x coordinates of the left sides of the bars
height --> the heights of the bars
  

 A simple example from http://scienceoss.com/bar-plot-with-custom-axis-labels/ 

  # pylab contains matplotlib plus other goodies.
import pylab as p

#make a new figure
fig = p.figure()

# make a new axis on that figure. Syntax for add_subplot() is
# number of rows of subplots, number of columns, and the
# which subplot. So this says one row, one column, first
# subplot -- the simplest setup you can get.
# See later examples for more.

ax = fig.add_subplot(1,1,1)

# your data here:     
x = [1,2,3]
y = [4,6,3]

# add a bar plot to the axis, ax.
ax.bar(x,y)

# after you're all done with plotting commands, show the plot.
p.show()
  



