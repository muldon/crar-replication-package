Query: switching keys and values in a dictionary in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48338888)
 First of all it is  not  guaranteed that this is possible, since the values of a dictionary can be unhashable. 

 In case these are not, we can use a functional approach with: 

  reversed_dict = dict(map(reversed, original_dict.items()))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8305558)
 maybe: 

  flipped_dict = dict(zip(my_dict.values(), my_dict.keys()))  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8305541)
  my_dict2 = dict((y,x) for x,y in my_dict.iteritems())
  

 If you are using python 2.7 or 3.x you can use a dictionary comprehension instead: 

  my_dict2 = {y:x for x,y in my_dict.iteritems()}
  

 Edit 

 As noted in the comments by JBernardo, for python 3.x you need to use  items  instead of  iteritems  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42147063)
 Do that with a one-liner (dict comprehension) 

  dict1={"AED":"United Arab Emirates Dirham",
 "AFN":"Afghan Afghani",
 "ALL":"Albanian Lek",
 "AMD":"Armenian Dram",
 "ANG":"Netherlands Antillean Guilder",
 "AOA":"Angolan Kwanza",
 "ARS":"Argentine Peso"}

dict2 = {"USDAED":3.672301,
 "USDAFN":66.800003,
 "USDALL":127.000221,
 "USDAMD":486.160004,
 "USDANG":1.769942,
 "USDAOA":165.080994,
 "USDARS":15.609965}

dict3 = {dict1[x[3:]]:y for x,y in dict2.items()}

print(dict3)
  

 yields: 

  {'Albanian Lek': 127.000221, 'Netherlands Antillean Guilder': 1.769942,
 'Armenian Dram': 486.160004, 'United Arab Emirates Dirham': 3.672301, 
'Afghan Afghani': 66.800003, 'Argentine Peso': 15.609965,
'Angolan Kwanza': 165.080994}
  

 The code recreates a third dictionary with as key: values of the first one (with the small key cutoff you mentionned, and as values: values of the second one 

 Note: as dicts are not ordered your "first entry" wish doesn't hold, unless you print the items sorted of course. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32719857)
 First get all keys and set up a new dictionary from your list of dictionaries: 

  d1 = {'a' : 2, 'b' : 1, 'c' : 1}
d2 = {'a' : 3, 'b' : 1.1, 'd' : 2}
mylist = [d1, d2]
sum_dict = dict.fromkeys(set().union(*mylist), 0)
  

 After that that is simple to just iterate over the list of dictionaries and the keys: 

  for d in mylist:
    for k in d.keys():
        sum_dict[k] += d[k]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23666268)
 You may want to use  random.sample  instead of  random.choice . When you use  random.sample  you specify how many items you want and are guaranteed that you will not get the same letter twice. There is no such guarantee if you are using  random.choice  twice. Of course, if you don't mind it occasionally switching a value with itself (i.e nothing happening), then you do not need to change anything. 

 Here's how you could use  random.sample : 

  letter1, letter2 = random.sample(copy, 2)
  

 

 Also, when you are determining the keys to swap 

  key1 =  (keys_with_value(copy,letter1))[0]
key2 =  (keys_with_value(copy,letter2))[0]
  

 you are looking for values that match the keys  letter1  and  letter2 . If you want  letter1  and  letter2  to hold values from  dictionary1 , you should use 

  letter1, letter2 = random.sample(copy.values(), 2)
  

 

 Looking at your code some more, it seems to me that your  keys_with_values  function is entirely unnecessary. Simply finding two random keys and switching their values can be done like this: 

  key1, key2 = random.sample(copy, 2)
copy[key1], copy[key2] = copy[key2], copy[key1]
  

 However, if you really did intend to for  letter1  and  letter2  to be keys, then you are switching the values of two keys that have values that are also keys. In that case, you can use 

  key1, key2 = random.sample([k for k, v in copy.items() if v in copy], 2)
copy[key1], copy[key2] = copy[key2], copy[key1]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27934849)
 Use a https://docs.python.org/2/library/collections.html#collections.defaultdict making each of the subjects/values in each set a key and append/add each student to a list/set as values. 

  s = {'Sherman':{'calculus', 'english'},
 'Tyler': {'computers','history'},
'Kevin': {'chemistry','PE','geometry'},
'Joe': {'calculus','computers'},
'Bryan': {'nothing'},
'Steven': {'biology','research', 'algebra'}}

from collections import defaultdict
d = defaultdict(list)
for k,v in s.items(): # iterate over key/value tuples.
    for sub in v: # get each subject in the set/value
        d[sub].append(k) # add the students to a list and and make each subject a key
print(d)

 defaultdict(<type 'list'>, {'calculus': ['Sherman', 'Joe'], 'biology': ['Steven'], 'algebra': ['Steven'], 'geometry': ['Kevin'], 'computers': ['Tyler', 'Joe'], 'research': ['Steven'], 'english': ['Sherman'], 'nothing': ['Bryan'], 'chemistry': ['Kevin'], 'PE': ['Kevin'], 'history': ['Tyler']})
  

 If you want sets as values use defaultdict(set) and .add instead of append: 

  from collections import defaultdict

d = defaultdict(set)
for k,v in s.items():
    for sub in v:
        d[sub].add(k)
print(d)
 defaultdict(<type 'set'>, {'calculus': set(['Sherman', 'Joe']), 'biology': set(['Steven']), 'algebra': set(['Steven']), 'geometry': set(['Kevin']), 'computers': set(['Tyler', 'Joe']), 'research': set(['Steven']), 'english': set(['Sherman']), 'nothing': set(['Bryan']), 'chemistry': set(['Kevin']), 'PE': set(['Kevin']), 'history': set(['Tyler'])})
  

 Using a defaultdict means if the key does not exist in the dict it will be added and the value appended or just appended if it does  already exist, you can use dict.setdefault but a defaultdict is more efficient. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4019648)
 Not that hard, try  help(dict)  in a console for more info :) 

  keys = dictionary.keys()
values = dictionary.values()
  

 For both keys and values: 

  items = dictionary.items()
  

 Which can be used to split them as well: 

  keys, values = zip(*dictionary.items())
  

 Note that the order of all of these is consistent within the same dictionary instance. The order of dictionaries in Python is arbitrary but constant for an instance. 



