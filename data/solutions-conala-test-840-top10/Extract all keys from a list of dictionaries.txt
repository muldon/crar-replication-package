Query: Extract all keys from a list of dictionaries
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11399459)
 The following example will extract the keys: 

  set_ = set()
for dict_ in dictionaries:
    set_.update(dict_.keys())
print set_
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11399424)
  all_keys = set().union(*(d.keys() for d in mylist))
  

  Edit : have to unpack the list. . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11399555)
  

  >>> LoD
[{'age': 10, 'name': 'Tom'}, 
 {'age': 5, 'name': 'Mark', 'height': 4}, 
 {'age': 7, 'name': 'Pam', 'weight': 90}]
  

 This set comprehension will do it: 

  >>> {k for d in LoD for k in d.keys()}
{'age', 'name', 'weight', 'height'}
  

 It works this way. First, create a list of lists of the dict keys: 

  >>> [list(d.keys()) for d in LoD]
[['age', 'name'], ['age', 'name', 'height'], ['age', 'name', 'weight']]
  

 Then create a flattened version of this list of lists: 

  >>> [i for s in [d.keys() for d in LoD] for i in s]
['age', 'name', 'age', 'name', 'height', 'age', 'name', 'weight']
  

 And create a set to eliminate duplicates: 

  >>> set([i for s in [d.keys() for d in LoD] for i in s])
{'age', 'name', 'weight', 'height'}
  

 Which can be simplified to: 

  {k for d in LoD for k in d.keys()}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24923222)
 The solution was simple: 

  for elem in list:
    print elem['name']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51262598)
 You can use a list comprehension with  zip . To extract the only value in a dictionary  d , you can use  next(iter(d.values()))  or  list(d.values())[0] . 

  K = ['id', 'name', 'address']

L = [{'Value': 1}, {'Value': 'Example name'}, {'VarCharValue': 'GA'}]

res = [{k: next(iter(v.values()))} for k, v in zip(K, L)]

[{'id': 1}, {'name': 'Example name'}, {'address': 'GA'}]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48321468)
 You're only interested in the  key , not the "values". The keys are what you use to index the dictionary. 

 A clean approach is calling  dict.keys()  and flattening it, with  itertools.chain .  import itertools , first. 

  >>> list(itertools.chain.from_iterable(d.keys()))
['think', 'surpris', 'go', 'see', 'look', 'toward', 'new', 'cage']
  

 Beware, order of the returned strings are not guaranteed, since python's dictionaries aren't ordered on versions older than 3.6. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/24982460)
 Iterating dictionary yields keys. 

 Using https://docs.python.org/2/library/functions.html#next, https://docs.python.org/2/library/functions.html#iter: 

  >>> data = {'foo': [1, 2, 3]}
>>> next(iter(data))
'foo'
  

 

  

  In [1]: data = {'foo': [1, 2, 3]}

In [2]: %timeit next(iter(data))
1000000 loops, best of 3: 197 ns per loop

In [3]: %timeit data.keys()[0]
10000000 loops, best of 3: 155 ns per loop

In [4]: %timeit data.iterkeys().next()
1000000 loops, best of 3: 226 ns per loop

In [9]: %timeit k, = data.keys()
10000000 loops, best of 3: 151 ns per loop

In [10]: %timeit k, = data    # <--- fastest
10000000 loops, best of 3: 81.4 ns per loop
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11399578)
 Borrowing  lis  from @AshwiniChaudhary's answer, here is an explanation of how you could solve your problem. 

  >>> lis=[
{"name": "Tom", "age": 10},
{"name": "Mark", "age": 5, "height":4},
{"name": "Pam", "age": 7, "weight":90}
]
  

 Iterating directly over a dict returns its keys, so you don't have to call  keys()  to get them back, saving a function call and a list construction per element in your list. 

  >>> {k for d in lis for k in d}
set(['age', 'name', 'weight', 'height'])
  

 or use  itertools.chain : 

  >>> from itertools import chain
>>> {k for k in chain(*lis)}
set(['age', 'name', 'weight', 'height'])
  



