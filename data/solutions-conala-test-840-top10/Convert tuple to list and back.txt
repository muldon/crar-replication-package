Query: Convert tuple to list and back
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37379506)
  

  set(second_list) - set(first_list)
  

 because strings are hashable and you can put them in sets. If you have non-hashable values then tell us what they are and we can probably come up with a workaround. For example: 

 
 You can convert a list to a tuple using  tuple(the_list) , can back using  list(the_tuple) . 
 You can convert a set to a tuple using  tuple(the_set) , can back using  set(the_tuple) . 
 You can convert a nested list to a nested tuple using  tuple(map(tuple, the_list))  and back using  list(map(list, the_tuple)) . 
 You can convert a dictionary to a nested tuple using  tuple(the_dict.items())  and back using  dict(the_tuple) . 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48838316)
 A tuple is an immutable list. It means once you create a tuple, it cannot be modified.
[Read more about tuples and other sequential data types here.][1]
So, if you really need to change a tuple during run time: 

 
 Convert the tuple into a list 
 Make the necessary changes to the list 
 Convert the list back to a tuple 
 

 

  OR  

 
 Create a list 
 Modify the list 
  Convert the list into a tuple 

So, in your case:  
 
 



 a = []
for i in range (1,10):
    a.append((i,i,i))
a = tuple(a)   
print a 




-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29290390)
 This should do it: 

  def lol_to_tuple(lol):
    return tuple(el if type(el) is not list 
                    else lol_to_tuple(el) 
                 for el in lol)
  

 To go back, just replace tuple with list: 

  def tuples_to_lol(tuples):
    return list(el if type(el) is not tuple 
                   else tuples_to_lol(el) 
                for el in tuples)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29290416)
 Use recursion 

  MyList = ['elem1', 'elem2', ['nested1', 'nested2', ['veryNested1', 'veryNested2']]]

print MyList

def tupconv(lst):
    tuplst = []
    for x in lst:
        if isinstance(x, list):
            tuplst.append(tupconv(x))
        else:
            tuplst.append(x)

    return tuple(tuplst)


def listconv(tup):
    lst = []
    for x in tup:
        if isinstance(x, tuple):
            lst.append(listconv(x))
        else:
            lst.append(x)

    return lst

mytup = tupconv(MyList)
print mytup

mylist = listconv(mytup)
print mylist
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23497549)
 Convert tuple to list: 

  >>> t = ('my', 'name', 'is', 'mr', 'tuple')
>>> t
('my', 'name', 'is', 'mr', 'tuple')
>>> list(t)
['my', 'name', 'is', 'mr', 'tuple']
  

 Convert list to tuple: 

  >>> l = ['my', 'name', 'is', 'mr', 'list']
>>> l
['my', 'name', 'is', 'mr', 'list']
>>> tuple(l)
('my', 'name', 'is', 'mr', 'list')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35154199)
  

  tuples = [tuple(filter(None, t.strip('()').strip().split(','))) for t in input]
  

 For example: 

  In [16]: tuples = [tuple(filter(None, t.strip('()').strip().split(','))) for t in input]

In [17]: tuples
Out[17]: [('var1',), ('var2', 'var3')]
  

 We're iterating through our list of tuple strings, and for each one, removing the  () s, then splitting our string into a list by the  , , and then converting our list back into a tuple. We use https://docs.python.org/2/library/functions.html#filter to remove empty elements. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50785815)
 Maybe you could use 

  s="(1, 2, 3)"
tuple(int(x) for x in s.strip('()').split(','))
  

 Remove the '(' and ')' and then use  tuple() . 

 Thanks to https://stackoverflow.com/users/3044673/bla for pointing out that  s.strip('()')  can be used instead of  s.replace('(').replace(')') . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22282797)
  

  >>> foo = ['106,1,1,43009', '106,1,2,43179', '106,1,3,43189', '106,1,4,43619', '106,1,5,43629']
>>> [tuple(f.split(",")) for f in foo]
[('106', '1', '1', '43009'), ('106', '1', '2', '43179'), ('106', '1', '3', '43189'), ('106', '1', '4', '43619'), ('106', '1', '5', '43629')]
  

 We're using a list comprehension to filter each of the keys,  .split()  to split each string into a list, and  tuple()  to convert that list into a tuple 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3523139)
 Don't convert to a list and back, it's needless overhead.  +  concatenates tuples. 

  >>> foo = ((1,),(2,),(3,))
>>> foo = ((0,),) + foo
>>> foo
((0,), (1,), (2,), (3,))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/42627573)
 We can do the test more efficiently by converting the tuples to sets, and then afterwards converting the sets back to tuples. I use frozensets because they're immutable, like tuples. 

  src = {
    (2, 3, 7, 8), (1, 3), (4, 6), (4, 8), (1, 2, 3), 
    (1, 6), (7, 8), (1, 6, 8), (3, 5)
}

temp = [frozenset(u) for u in src]
temp.sort(key=len, reverse=True)

dest = []
for t in temp:
    if not any(t <= u for u in dest):
        dest.append(t)

dest = {tuple(sorted(u)) for u in dest}
print(dest)
  

  output  

  {(2, 3, 7, 8), (4, 6), (4, 8), (1, 2, 3), (1, 6, 8), (3, 5)}
  

 

 We first convert the tuples to sets and store them in a list, sorting the list items by length, from longest to shortest. We then add each list item into the  dest  list only if it's not a subset of an existing item. Then we use a set comprehension to convert the sets back to ordered tuples. 



