Query: selecting rows in numpy ndarray based on the value of two columns
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23361571)
 I assume your array looks like: 

         |(HUE)(VALUE)(CLASS)
row/col|   0     1     2
-------+-----------------
0      |   0     1     2
1      |   3     4     5
2      |   6     7     8
.      |   .     .     .
.      |   .     .     .
3599999|   .     .     .
  

 And here is the sample code. For simplicity I changed the size 3600000 to  5. 

  a = np.array(xrange(5 * 3))
a.shape = (5, 3)
  

 Now array  a  look like this: 

  array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])
  

 If you want row with  HUE=9 , do like this: 

  a[np.where(a[:,0] == 9)]
#array([[ 9, 10, 11]])
  

 If you want row with  VALUE=4 , do like this: 

  a[np.where(a[:,1] == 4)]
#array([[3, 4, 5]])
  

 If you want row with  HUE=0  and  VALUE=1 , do like this: 

  a[np.where((a[:,0] == 0) * (a[:,1] == 1))]
#array([[0, 1, 2]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/23360291)
 Try this code: 

   x[x[:, 2] == class_number[:, :2]
  

 where  x  is  np.ndarray  

   x[:, 2] == class_number
  

 contains  true/false  that means whether the last is  class_number  or not.  

 You need to take a look at:  Boolean indexing  in http://wiki.scipy.org/Cookbook/Indexing  

 Moved from comment. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12437022)
 First, make sure that your  rows  and  cols  are actually boolean  ndarrays , then use them to index your data 

  rows = np.array([False, False, True, True], dtype=bool)
cols = np.array([True, True, False], dtype=bool)
data[rows][:,cols]
  

  Explanation 
If you use a  list  of booleans instead of an   ndarray  , numpy will convert the  False/True  as  0/1 , and interpret that as indices of the rows/cols you want. When using a bool  ndarray , you're actually using some specific NumPy mechanisms. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33169131)
 You can get the indices with : 

  rows = np.logical_and(0 < matrix[:, 0], < matrix[:, 0] < 6 ) *  np.logical_and(1 < matrix[:, 1], matrix[:, 1] < 7)
  

 Then  newMatrix = np.delete(matrix, rows, axis = 0)  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33399919)
 You can convert your indicators to booleans and then use boolean filtering. 

  df1 = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
n1 = np.array([0, 1, 1])

>>> df1
   a  b
0  1  4
1  2  5
2  3  6


>>> df1[n1.astype('bool')]
   a  b
1  2  5
2  3  6
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1963045)
  test[numpy.logical_or.reduce([test[:,1] == x for x in wanted])]
  

 The result should be faster than the original version since NumPy's doing the inner loops instead of Python. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45977860)
 You could also use  np.diag : 

  x, y= df2.reset_index().values.T
df= pd.DataFrame(np.diag(df.loc[x, y].values), columns=['sel'])
print(df)
   sel
0    2
1    4
2    3
3    7
4   10
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8851307)
 Sounds like you're looking for http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html or http://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html#numpy.hstack, depending on whether you want the arrays to become the rows or the columns of the matrix. 

  

  >>> a = np.array([1, 2, 3])
>>> b = np.array([2, 3, 4])
>>> np.vstack((a,b))
array([[1, 2, 3],
       [2, 3, 4]])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33169133)
 For a numpy based solution, you can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html and then get the row indexes from it and then use it for indexing you matrix. Example - 

  matrix[np.where((1 <= matrix[:,0]) & (matrix[:,0] <= 6)
       & (2 <= matrix[:,1]) & (matrix[:,1] <= 7))]
  

  

  In [169]: matrix
Out[169]:
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.],
       [ 11.,  12.,  13.,  14.,  15.],
       [ 16.,  17.,  18.,  19.,  20.]])

In [170]: matrix[np.where((1 <= matrix[:,0]) & (matrix[:,0] <= 6)
   .....:        & (2 <= matrix[:,1]) & (matrix[:,1] <= 7))]
Out[170]:
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.]])
  

 

 Another method , as indicated in the comments would be to use boolean masks, Example - 

  mask = ((1 <= matrix[:,0]) & (matrix[:,0] <= 6)
           & (2 <= matrix[:,1]) & (matrix[:,1] <= 7))

matrix[mask,:]
  

  

  In [41]: matrix
Out[41]:
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.],
       [ 11.,  12.,  13.,  14.,  15.],
       [ 16.,  17.,  18.,  19.,  20.]])

In [42]: mask = ((1 <= matrix[:,0]) & (matrix[:,0] <= 6)
   ....:            & (2 <= matrix[:,1]) & (matrix[:,1] <= 7))

In [43]:

In [43]: matrix[mask,:]
Out[43]:
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12099872)
 You can use the   NumPy  -based library, http://pandas.pydata.org, which has a more generally useful implementation of  ndarrays :     

  >>> # import the library
>>> import pandas as PD
  

 Create some sample  data  as  python dictionary , whose  keys  are the column names and whose  values  are the column values as a python list; one key/value pair per column 

  >>> data = {'category_code': ['D', 'A', 'B', 'C', 'D', 'A', 'C', 'A'], 
            'value':[4, 2, 6, 3, 8, 4, 3, 9]}

>>> # convert to a Pandas 'DataFrame'
>>> D = PD.DataFrame(data)
  

 To return just the rows in which the category_code is either B or C, two steps conceptually, but can easily be done in a single line: 

  >>> # step 1: create the index 
>>> idx = (D.category_code== 'B') | (D.category_code == 'C')

>>> # then filter the data against that index:
>>> D.ix[idx]

        category_code  value
   2             B      6
   3             C      3
   6             C      3
  

 Note the difference between indexing in  Pandas  versus  NumPy , the library upon which Pandas is built. In NumPy, you would just place the index inside the brackets, indicating which dimension you are indexing with a ",", and using ":" to indicate that you want all of the values (columns) in the other dimension: 

  >>>  D[idx,:]
  

 In Pandas, you call the the data frame's   ix   method, and place  only  the index inside the brackets: 

  >>> D.loc[idx]
  



