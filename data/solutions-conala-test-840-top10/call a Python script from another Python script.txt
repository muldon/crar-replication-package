Query: call a Python script from another Python script
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9347016)
 Pass a file as the  stdout  parameter to  subprocess.call : 

  with open('out-file.txt', 'w') as f:
    subprocess.call(['program'], stdout=f)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6848475)
 If you want your script (one Python program, let's call it  script1.py ) to call  another  script (another Python program) with the given arguments, you can write  script1.py  as: 

  import subprocess, sys

subprocess.call(sys.argv[1:])
  

  sys.argv  is a list that contains your program's name (use  print sys.argv[0]  and see that by yourself) and, after that, all the arguments passed to your program. 

  sys.argv[1:]  means: the contents of the  sys.argv  list, starting from the second element (which has index 1) to the end of the list. 

  subprocess.call  calls another program, and it accepts a list which contains the program to be executed and all its arguments. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16877331)
 You can use http://docs.python.org/2/library/subprocess.html: 

  subprocess.call(["python", "myscript.py"])
  

 This will also return the process return value (such as 0 or 1). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17968916)
 In  script1.py  place this: 

  def main():
    do something

if __name__ == "__main__":
    main()
  

 In  script2.py : 

  import script1

if condition:
    script1.main()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16047082)
 Yes, in a similar way to how you would call it from another bash script: 

  import subprocess
subprocess.check_output(['bash', '-c', 'source unix_shell.sh && foo'])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26481056)
 Call https://docs.python.org/3/library/subprocess.html#subprocess.call with https://docs.python.org/3/library/sys.html#sys.argv minus the first element, which is the name of your Python script. 

  import subprocess
import sys

subprocess.call(["/path/to/subprocess"] + sys.argv[1:])
  

 Example with  date  as the subprocess: 

  $ python3 s.py
Tue Oct 21 09:25:00 CEST 2014
$ python3 s.py -R
Tue, 21 Oct 2014 09:25:01 +0200
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7152521)
     

 Unix will need a shebang and exec attribute to work: 

  #!/usr/bin/env python
  

 as the first line of script and: 

  chmod u+x script.py
  

   

  call('python script.py'.split())
  

 . 

 Windows should work if you add the http://docs.python.org/library/subprocess.html#subprocess.Popen to the "call" call. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40624023)
 Nowadays, the recommended way to launch other processes is to use the https://docs.python.org/2/library/subprocess.html#module-subprocess module. 

 . Here's a simple way to apply it to your problem: 

  import subprocess
import sys

create = [sys.executable, 'createbid.py']

def question(ans):
    if ans == 'yes':
        subprocess.call(create)
    elif ans == 'no':
        quit()

ask1 = raw_input('Create bid? ')
question(ask1)
print('done')
  

  Note : When  createbid.py  (or some other script) is executed this way, 
 __name__ == '__main__'   will  be  True , unlike it would be if it had been  import ed. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18645606)
 Another way to do the same thing would be, 

  system 'python script.py', params1, params2
  



