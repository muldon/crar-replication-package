Query: in Python, How to join a list of tuples into one list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28136464)
  .join  expects a sequence of strings, but you're giving it a sequence of tuples. 

 To get the result you posted, you'll need to join each element in each tuple, and then join each tuple together: 

  print('\n'.join(''.join(elems) for elems in data))
  

 This works because  .join  will accept a generator expression, allowing you to iterate over  data  (your list of tuples). 

 We therefore have two joins going on: the inner join builds a string of the three letters (eg,  'ABC' ), and the outer join places newline characters ( '\n' ) between them. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15269245)
 Just iterate over the list a and unpack the tuples: 

  l = []
for x,y in a:
   l.append(x)
   l.append(y)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/493884)
 I agree that it's counterintuitive at first, but there's a good reason. Join can't be a method of a list because: 

 
 it must work for different iterables too (tuples, generators, etc.)  
 it must have different behavior between different types of strings. 
 

 There are actually two join methods (Python 3.0): 

  >>> b"".join
<built-in method join of bytes object at 0x00A46800>
>>> "".join
<built-in method join of str object at 0x00A28D40>
  

 If join was a method of a list, then it would have to inspect its arguments to decide which one of them to call. And you can't join byte and str together, so the way they have it now makes sense.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50222006)
 Let  ser = test.loc[1] .  

 
 You can convert this series to a dictionary with  .to_dict() ,  
 Then convert the dictionary into a list of key/value tuples with  .items() ,  
 Then merge the tuples into one list with  itertools.chain , and finally 
 Join the list items with periods with  .join() . 
 

 Python code: 

  from itertools import chain

'.'.join(chain.from_iterable(ser.to_dict().items()))
#'outlook.sunny.temperature.mild.humidity.normal....yes'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43223722)
 I think simpliest is create  MultiIndex  in  df2  and then use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html or http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html: 

  df2.columns = pd.MultiIndex.from_tuples([('a','w')])
print (df2)
          a
          w
A -0.562729
B -0.212032
C  0.102451
  



  df2.columns = [['a'], df2.columns]
print (df2)
          a
          w
A -1.253881
B -0.637752
C  0.907105
  

 

  df3 = pd.concat([df, df2], axis=1)
  

 Or: 

  df3 = df.join(df2)

print (df3)
first        bar                 baz                 foo                 qux  \
second       one       two       one       two       one       two       one   
A      -0.269667  0.221566  1.138393  0.871762 -0.063132 -1.995682 -0.797885   
B      -0.456878  0.293350 -1.040748 -1.307871  0.002462  1.580711 -0.198943   
C      -0.691755 -0.279445 -0.809215 -0.006658  1.452484  0.516414 -0.295961   

first                    a  
second       two         w  
A       1.068843 -0.562729  
B       1.247057 -0.212032  
C      -0.345300  0.102451  
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43076012)
 You can join the list of tuples with a new line character: 

  class bar:
    tuplist = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')]
    def __str__(self):
        return 'here are my tuples: ' + '\n' + "\n".join(map(str, self.tuplist))
â€‹
foo = bar()
print(foo)

here are my tuples: 
('a', 'b')
('c', 'd')
('e', 'f')
('g', 'h')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16302249)
 You need to join your string like this: 

  markers = [(97,64),(45,84)]
result = ''.join("&markers=%s" % ','.join(map(str, x)) for x in markers)
return result
  

  UPDATE  

 I didn't initially have the  ','.join(map(str, x))  section in there to turn each tuple into strings. This handles varying length tuples, but if you will always have exactly 2 numbers, you might see gatto's comment below. 

 The explanation of what's going on is that we make a list with one item for each tuple from markers, turning the tuples into comma separated strings which we format into the  &markers=  string. This list of strings is then joined together separated by an empty string. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54310357)
 You can just use  pd.DataFrame.join : 

  df = pd.DataFrame(list1).join(pd.DataFrame(list2))

print(df)

  id id2 fname lname
0  1   2     a     b
1  2   3     c     d
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48934651)
 As the first comment stated, tuples are immutable. Using lists might be easier and if you really need a tuple you can convert your result list to one afterward. 

  phrases = ['Traditionally, companies have been communicating', 'with consumers through traditional or old media.', 'The rapid changes in the cyber world.', 'This is another sentence', 'which is incomplete.']
def join_on_uppercase(items):
  final_phrases = []
  temp_list = [phrases[0]]
  for phrase in phrases[1:]:
    if phrase[0].isupper():
      final_phrases.append(' '.join(temp_list))
      temp_list = []
    temp_list.append(phrase)
  final_phrases.append(' '.join(temp_list))
  return tuple(final_phrases)
print(join_on_uppercase(phrases))
  

 That should take care of it. You need the final line to clear out the temp_list. 



