Query: how to format date in ISO using python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12772094)
 I would use the  datetime  module to parse it: 

  >>> from datetime import datetime
>>> date = datetime.strptime('2/28/1987', '%m/%d/%Y')
>>> date.strftime('%Y-%m-%d')
'1987-02-28'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12772093)
 You could use the http://docs.python.org/library/datetime.html: 

  datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
  

 or, as running code: 

  >>> import datetime
>>> str_date = '2/28/1987'
>>> datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
'1987-02-28'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4460765)
 Using http://niemeyer.net/python-dateutil: 

  import dateutil.parser as parser
text = 'Thu, 16 Dec 2010 12:14:05 +0000'
date = parser.parse(text)
print(date.isoformat())
# 2010-12-16T12:14:05+00:00
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37500717)
 Using https://arrow.readthedocs.io/en/latest/: 

  >>> import arrow
>>> updateStr = " 01 January 2016"
>>> arrow.get(updateStr, "DD MMMM YYYY").isoformat()
'2016-01-01T00:00:00+00:00'
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18618587)
 Use the pandas datetools parser to parse the date and then format it using the standard python  strftime  function. 

  >>> df['q_date'].apply(
        lambda x: pd.datetools.parse(x).strftime('%Y%m%dT%H:%M%SZ'))
0    20120210T00:0000Z
1    20120210T00:0000Z
2    20120210T00:0000Z
3    20120210T00:0000Z
4    20120210T00:0000Z
Name: q_date, dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9628279)
  Python datetime to ISO-8601 String:  

  >>> from datetime import datetime
>>> now    = datetime.utcnow()
>>> string = now.strftime("%Y-%m-%dT%H:%M:%S +0000")                # Manually specifying ' +0000' since we know we have UTC time.
>>> 
>>> string
'2012-03-08T21:19:26 +0000'
  

  ISO-8601 String to Python datetime:  

  >>> from datetime import datetime
>>> string = "2012-03-08T21:19:26 +0000"
>>> time   = datetime.strptime(string, "%Y-%m-%dT%H:%M:%S +0000")   # Only works for UTC time.
>>> 
>>> time
datetime.datetime(2012, 3, 8, 21, 18, 31)
  

  NSDate to ISO-8601 NSString:  

  NSDate          *now            = [NSDate date];
NSDateFormatter *dateFormatter  = [[[NSDateFormatter alloc] init] autorelease];
NSLocale        *locale         = [[[NSLocale alloc] initWithLocaleIdentifier:@"en_US"] autorelease];
NSTimeZone      *timeZone       = [NSTimeZone timeZoneWithName:@"UTC"];
[dateFormatter setLocale:locale];                                   // Using "en_US" for locale ?eliminates/reduces? issues with systems running different locales.
[dateFormatter setTimeZone:timeZone];
[dateFormatter setFormatterBehavior:NSDateFormatterBehavior10_4];   // Explicitly re-stating default behavior for 10.4+.
[dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss Z"];
NSString        *iso8601String  = [dateFormatter stringFromDate:now];

NSLog(@"%@", iso8601String);
2012-03-09T02:44:37 +0000
  

  ISO-8601 NSString to NSDate:  

  NSString        *iso8601String = @"2012-03-09T20:37:49 +0000";
NSDateFormatter *dateFormatter  = [[[NSDateFormatter alloc] init] autorelease];
NSLocale        *locale         = [[[NSLocale alloc] initWithLocaleIdentifier:@"en_US"] autorelease];
[dateFormatter setLocale:locale];                                   // Using "en_US" for locale ?eliminates/reduces? issues with systems running different locales.
[dateFormatter setFormatterBehavior:NSDateFormatterBehavior10_4];   // Explicitly re-stating default behavior for 10.4+.
[dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss Z"];
NSDate *date = [dateFormatter dateFromString:iso8601String];

NSLog(@"%@", date);
2012-03-09 20:37:49 +0000
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27251994)
 Your date is UTC time in https://tools.ietf.org/html/rfc3339#section-5.6, you could parse it using only stdlib: 

  from datetime import datetime

utc_dt = datetime.strptime('1984-06-02T19:05:00.000Z', '%Y-%m-%dT%H:%M:%S.%fZ')

# Convert UTC datetime to seconds since the Epoch
timestamp = (utc_dt - datetime(1970, 1, 1)).total_seconds()
# -> 455051100.0
  

 See also  https://stackoverflow.com/a/8778548/4279  

 
   How do I convert it back to ISO 8601 format?  
 

 To convert POSIX timestamp back, create a UTC datetime object from it, and format it using  .strftime()  method: 

  from datetime import datetime, timedelta

utc_dt = datetime(1970, 1, 1) + timedelta(seconds=timestamp)
print(utc_dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))
# -> 1984-06-02T19:05:00.000000Z
  

 Note: It prints six digits after the decimal point (microseconds). To get three digits, see  https://stackoverflow.com/q/26586943/4279 . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22328451)
 You may want to look at the  datetime  module. Using its date formatting functions, you can do something like this: 

  >>> import datetime as dt
>>> ds = '0104160F'
>>> parsed = dt.datetime.strptime(ds, "%y%m%d0F")
>>> parsed
datetime.datetime(2001, 4, 16, 0, 0)    
>>> reformatted = dt.datetime.strftime(parsed, "%Y-%m-%d")
>>> reformatted
'20010416'
  

 In your function, you can use these as follows: 

  def YYMMDD0FtoYYYYMMDD(date):
    return dt.datetime.strftime(dt.datetime.strptime(date, "%y%m%d0F"), "%Y-%m-%d")
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22328446)
 You don't need to use  dateutil , you can do this with http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior: 

  from datetime import datetime

def YYMMDD0FtoYYYYMMDD(date):
    return datetime.strptime(date[:6], "%y%m%d").strftime("%Y-%m-%d")
  

 Example usage: 

  >>> YYMMDD0FtoYYYYMMDD('1403110F')
'2014-03-11'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/27506674)
 https://docs.python.org/2/library/datetime.html#datetime.datetime.utcfromtimestamp converts seconds since the epoch to the corresponding UTC https://docs.python.org/2/library/datetime.html#datetime-objects.  

  datetime.datetime  objects have a https://docs.python.org/2/library/datetime.html#datetime.date.isoformat which returns the date as a string in ISO 8601 format. 

  In [6]: import datetime as DT

In [7]: seconds_since_epoch = 0

In [8]: DT.datetime.utcfromtimestamp(seconds_since_epoch)
Out[8]: datetime.datetime(1970, 1, 1, 0, 0)

In [9]: DT.datetime.utcfromtimestamp(seconds_since_epoch).isoformat()
Out[9]: '1970-01-01T00:00:00'
  



