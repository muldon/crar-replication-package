Query: Convert a 1D array to a 2D array in numpy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21322767)
 You can just call  np.array  on the list of 1D arrays. 

  >>> import numpy as np
>>> arrs = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]
>>> arrs
[array([1, 2, 3]), array([4, 5, 6]), array([7, 8, 9])]
>>> arr2d = np.array(arrs)
>>> arr2d.shape
(3, 3)
>>> arr2d
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38258158)
 The array may be recreated: 

  a = np.array(a.tolist())
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12575451)
 You want to http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html the array. 

  B = np.reshape(A, (-1, 2))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16229848)
 You need to convert array b to a (2, 1) shape array, use None or  numpy.newaxis  in the index tuple: 

  import numpy
a = numpy.array([[2,3,2],[5,6,1]])
b = numpy.array([3,5])
c = a * b[:, None]
  

 Here is the http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52090597)
 Such type of encoding are usually part of numpy array. If you are using a numpy array like this : 

  a = np.array([1,0,3])
  

 then there is very simple way to convert that to 1-hot encoding 

  out = (np.arange(4) == a[:,None]).astype(np.float32)
  

 That's it. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35181688)
 I think you want  numpy.unravel_index  

  In [3]: import numpy as np
In [4]: p = np.array([ 1,2,3,4,5,6,7,8,9,10,11,12])

In [5]: p_reshape = p.reshape(4,3)

In [6]: p_reshape
Out[6]:
array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])

In [7]: np.unravel_index(5, p_reshape.shape)
Out[7]: (1, 2)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35466633)
 You want  http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.vstack.html#numpy.vstack : 

  In [45]: a = np.array([[1,2,3]])

In [46]: l = [4,5,6]

In [47]: np.vstack([a,l])
Out[47]: 
array([[1, 2, 3],
       [4, 5, 6]])
  

 You can stack multiple rows on the condition that  The arrays must have the same shape along all but the first axis.  

  In [53]: np.vstack([a,[[4,5,6], [7,8,9]]])
Out[53]: 
array([[1, 2, 3],
       [4, 5, 6],
       [4, 5, 6],
       [7, 8, 9]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48456883)
 You can use 

  numpy.stack(arrays, axis=0)
  

 if you have an array of arrays. You can specify the axis in case you want to stack columns and not rows. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48597482)
 Simply you could call  ravel()  to convert any dimension arrays to  1d . 

  my_converted_array = np.ravel(my_2d_array)
  

 Learn more about  ravel()  https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html#numpy-ravel. 

 Or you could simply use: 

  my_converted_array = my_2d_array.reshape(-1)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/33303590)
 You need to convert array  b to a (2, 1) shape  array, use  None or numpy.newaxis  in the index tuple. Here is the http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing. 

  

  import numpy

a = numpy.array([[ 1,  2,  3],
           [ 4,  5,  6],
           [ 7,  8,  9],
           [10, 11, 12],
           [13, 14, 15]])

b = numpy.array([ 1,  2,  3,  4,  5])
c=a - b[:,None]
print c
  

 Output: 

  Out[2]: 
array([[ 0,  1,  2],
       [ 2,  3,  4],
       [ 4,  5,  6],
       [ 6,  7,  8],
       [ 8,  9, 10]])
  



