Query: How to split a string at line breaks in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10211532)
 When you use message.split('\n', 2) you get three parts: first line, second line and remaining lines in one.   

 Use this form:   

  f = open("file.txt")  
f_email, f_title, f_description = f.read.split('\n', 2)  
f.close()
  

 Or this: 

  f = open("file.txt")  
f_email = f.readline()  
f_title = f.readline()  
f_description = f.read()  
f.close()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21205106)
  d = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
print [tuple(map(int,item.split(","))) for item in d.replace("\t", ",").split()]
  

  Output  

  [(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21205094)
  In [85]: zip(*[iter(map(int, data.split()))]*2)
Out[85]: [(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
  

 

 Here is a breakdown of how it works: 

 First, split on whitespaces: 

  In [86]: data.split()
Out[86]: ['365', '179', '96', '-90', '48', '-138', '12', '-174', '30', '-156']
  

 Convert the strings into ints: 

  In [87]: map(int, data.split())
Out[87]: [365, 179, 96, -90, 48, -138, 12, -174, 30, -156]
  

 Use the http://docs.python.org/2/library/itertools.html#itertools.izip to group every 2 items: 

  In [88]: zip(*[iter(map(int, data.split()))]*2)
Out[88]: [(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21205089)
  >>> s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
>>> [map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]
[[365, 179], [96, -90], [48, -138], [12, -174], [30, -156]]
  

 Using the code from my https://stackoverflow.com/a/18656542/846892, you can also handle other types as well: 

  from ast import literal_eval
def solve(x):
    try:
        return literal_eval(x)
    except (ValueError, SyntaxError):
        return x

s = '365\tFoo\r\nBar\t-90.01\r\n48\tspam\r\n12e10\t-174\r\n30\t-156\r\n'
print [map(solve, x.split('\t')) for x in s.rstrip().split('\r\n')]
#[[365, 'Foo'], ['Bar', -90.01], [48, 'spam'], [120000000000.0, -174], [30, -156]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18369530)
 Assuming you are using windows if you do a print of the file to your screen you will see 

  '123 ABCDEF ST\nAPT 456\n'
  

 the  \n  represent the line breaks.     

 so there are a number of ways to get rid of the new lines in the file.  One easy way is to split the string on the newline characters and then rejoin the items from the list that will be created when you do the split 

   myList = [item for item in myFile.split('\n')]
 newString = ' '.join(myList)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10210656)
   .split('\n')  you return a list. Rather than assign the variables when you split, you can pull them out of the list: 

  tokens = message.split('\n')
f_email = tokens[0]
f_title = tokens[1]
f_description = tokens[2]
  

 This can be made less fragile by checking the size of the list. If you know it needs at least three elements, you can: 

  assert(len(tokens)>=3)
  

 Another way to get around this is to wrap the thing up in a  try/except  block: 

  tokens = message.split('\n')
try:  
    f_description = tokens[2]
except:
    f_description = None
  

 That way you can handle the case for a shorter list the exact way you like! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2788856)
 since you do not have '\n', use it to replace any ';' that is not in a quote string 

  >>> new_s = ''
>>> is_open = False

>>> for c in s:
...     if c == ';' and not is_open:
...         c = '\n'
...     elif c in ('"',"'"):
...         is_open = not is_open
...     new_s += c

>>> result = new_s.split('\n')

>>> result
['part 1', '"this is ; part 2;"', "'this is ; part 3'", 'part 4', 'this "is ; part" 5']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21205192)
 There’s actually a http://docs.python.org/3/library/stdtypes.html#str.splitlines method which will split the string by line breaks, regardless of which line breaks are used. So this works on Unix systems with just an  \n , on Windows with  \r\n  and even on old Mac systems where the line break was just an  \r . 

  >>> s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
>>> s.splitlines()
['365\t179', '96\t-90', '48\t-138', '12\t-174', '30\t-156']
  

 Once you have this result, you can split by tabs to get the individual cells. So you essentially have to call  cell.split('\t')  on each cell. This is best done with a list comprehension: 

  >>> [row.split('\t') for row in s.splitlines()]
[['365', '179'], ['96', '-90'], ['48', '-138'], ['12', '-174'], ['30', '-156']]
  

 As an alternative, you could also use  map  to apply the splitting operation on each cell: 

  >>> list(map(lambda cell: cell.split('\t'), s.splitlines()))
[['365', '179'], ['96', '-90'], ['48', '-138'], ['12', '-174'], ['30', '-156']]
  

 As the copied data in the clipboard will always have the rows separated by newlines, and the columns separated by tabs, this solution is also safe to use for any range of cells you copied. 

 If you further want to convert integers or float to its correct datatypes in Python, I guess you could add some more conversion logic by calling  int()  on all cells that only have digits in them,  float()  on all cells that have digits and the dot in them  .  

  >>> def convert (cell):
        try:
            return int(cell)
        except ValueError:
            try:
                return float(cell)
            except ValueError:
                return cell
>>> [tuple(map(convert, row.split('\t'))) for row in s.splitlines()]
[(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
  

 For a different string: 

  >>> s = 'Foo\tbar\r\n123.45\t42\r\n-85\t3.14'
>>> [tuple(map(convert, row.split('\t'))) for row in s.splitlines()]
[('Foo', 'bar'), (123.45, 42), (-85, 3.14)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/24237675)
 ✨ Splitting line in Python:</h3>

 Have you tried using  str.splitlines()  method?: 

 
 https://docs.python.org/2/library/stdtypes.html#str.splitlines 
 https://docs.python.org/3/library/stdtypes.html#str.splitlines 
 

 From the docs: 

 
   https://docs.python.org/3/library/stdtypes.html#str.splitlines 
  
   Return a list of the lines in the string, breaking at line boundaries.
  Line breaks are not included in the resulting list unless  keepends  is
  given and true. 
 

 For example: 

  >>> 'Line 1\n\nLine 3\rLine 4\r\n'.splitlines()
['Line 1', '', 'Line 3', 'Line 4']

>>> 'Line 1\n\nLine 3\rLine 4\r\n'.splitlines(True)
['Line 1\n', '\n', 'Line 3\r', 'Line 4\r\n']
  

  Which delimiters are considered?</h3>

 
   This method uses the universal newlines approach to splitting lines. 
 

 The main difference between Python  2.X  and Python  3.X  is that the former uses the universal newlines approach to splitting lines, so  "\r" ,  "\n" , and  "\r\n"  are considered line boundaries for 8-bit strings, while the latter uses a superset of it that also includes: 

 
  \v  or  \x0b : Line Tabulation (added in Python  3.2 ). 
  \f  or  \x0c : Form Feed (added in Python  3.2 ). 
  \x1c : File Separator. 
  \x1d : Group Separator. 
  \x1e : Record Separator. 
  \x85 : Next Line (C1 Control Code). 
  \u2028 : Line Separator. 
  \u2029 : Paragraph Separator. 
 

  splitlines VS split:</h3>

 
   Unlike https://docs.python.org/3/library/stdtypes.html#str.split when a delimiter string  sep  is given, this method
  returns an empty list for the empty string, and a terminal line break
  does not result in an extra line: 
 

  >>> ''.splitlines()
[]

>>> 'Line 1\n'.splitlines()
['Line 1']
  

 While  str.split('\n')  returns: 

  >>> ''.split('\n')
['']

>>> 'Line 1\n'.split('\n')
['Line 1', '']
  

 ✂️ Removing additional whitespace:</h3>

 If you also need to remove additional leading or trailing whitespace, like spaces, that are ignored by  str.splitlines() , you could use  str.splitlines()  together with https://docs.python.org/3/library/stdtypes.html#str.strip: 

  >>> [str.strip() for str in 'Line 1  \n  \nLine 3 \rLine 4 \r\n'.splitlines()]
['Line 1', '', 'Line 3', 'Line 4']
  

 ️ Removing empty strings (''):</h3>

 Lastly, if you want to filter out the empty strings from the resulting list, you could use https://docs.python.org/3/library/functions.html#filter: 

  >>> # Python 2.X:
>>> filter(bool, 'Line 1\n\nLine 3\rLine 4\r\n'.splitlines())
['Line 1', 'Line 3', 'Line 4']

>>> # Python 3.X:
>>> list(filter(bool, 'Line 1\n\nLine 3\rLine 4\r\n'.splitlines()))
['Line 1', 'Line 3', 'Line 4']
  

  Additional comment regarding the original question:</h3>

 As the error you posted indicates and Burhan suggested, the problem is from the print. There's a related question about that could be useful to you: https://stackoverflow.com/questions/14630288/unicodeencodeerror-charmap-codec-cant-encode-character-maps-to-undefined 



