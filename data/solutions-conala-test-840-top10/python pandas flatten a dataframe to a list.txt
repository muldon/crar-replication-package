Query: python pandas flatten a dataframe to a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25440505)
 You can just use https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.flatten.html on the DataFrame: 

  df.values.flatten()
  

 and you can also add https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.tolist.html if you want the result to be a Python  list . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40280357)
 You need https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.len.html for creating columns  x  and  y  and for  z  use this https://stackoverflow.com/a/953097/2901002: 

  import pandas as pd
import numpy as np
from  itertools import chain

df = pd.DataFrame({
        "x": np.repeat(toConvert.x.values, toConvert.z.str.len()),
        "y": np.repeat(toConvert.y.values, toConvert.z.str.len()),
        "z": list(chain.from_iterable(toConvert.z))})

print (df)          
   x   y    z
0  1  10  101
1  1  10  102
2  1  10  103
3  2  20  201
4  2  20  202
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25440192)
 You can try with numpy 

  import numpy as np
np.reshape(df.values, (1,df.shape[0]*df.shape[1]))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47800875)
 Let's try this: 

 Correct some data:  

  td=[((1, 1), 1), ((1, 2), 2), ((1, 3), 1), ((2, 1), 1), 
    ((2, 2), 5), ((3, 2), 2), ((3, 1), 1)]
  

 Flatten tuples 

  l = [(i[0],i[1],v) for i,v in td]
lol = [list(e) for e in l]
  

 Create and reshape dataframe 

  pd.DataFrame(lol).set_index([1,0]).rename_axis([None,None]).unstack()[2]\
  .fillna(0).astype(int)
  

 Output: 

     1  2  3
1  1  1  1
2  2  5  2
3  1  0  0
  

 To expand dataframe: 

  pd.DataFrame(lol).set_index([1,0]).rename_axis([None,None]).unstack()[2]\
  .reindex(index=np.arange(1,10), columns=np.arange(1,10)).fillna(0).astype(int)
  

 Output: 

     1   2  3  4  5  6  7  8  9
1  9   0  0  0  0  0  0  0  0
2  0  10  0  0  0  0  0  0  0
3  0   1  0  1  0  0  0  0  0
4  0   0  0  1  0  0  0  0  0
5  0   0  0  0  1  1  0  0  0
6  0   0  0  0  0  1  0  0  0
7  0   0  0  0  0  0  0  0  0
8  0   0  0  0  0  0  0  0  0
9  0   0  0  0  0  0  0  0  0
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53185872)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html for Series with  MultiIndex , then flatten it in list comprehension and pass to DataFrame constructor: 

  s = df.stack()
#python 3.6+
df1 = pd.DataFrame([s.values],  columns=[f'{j}-{i}' for i, j in s.index])
#python bellow 3.6
#df1 = pd.DataFrame([s.values],  columns=['{}-{}'.format(i, j) for i, j in s.index])
print (df1)
   A-d1  B-d1  C-d1  A-d2  B-d2  C-d2
0     1     2     3     4     5     6
  

 Or flatten data by https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html and create new columns by https://docs.python.org/3.6/library/itertools.html#itertools.product: 

  from  itertools import product

c = [f'{j}-{i}' for i, j in product(df.index, df.columns)]
df1 = pd.DataFrame([df.values.ravel()], columns=c)
print (df1)
   A-d1  B-d1  C-d1  A-d2  B-d2  C-d2
0     1     2     3     4     5     6
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50808942)
 For additional diversity (or for if you need to do this with Pandas) 

  import pandas as pd
l1 = ["a","b","c","d"]
l2 = [1,2,3,4]
l3 = ["w","x","y","z"]
l4 = [5,6,7,8]

df = pd.DataFrame([l1 ,l2, l3, l4])
result = list(df.values.flatten('A'))
  

 
   ['a', 1, 'w', 5, 'b', 2, 'x', 6, 'c', 3, 'y', 7, 'd', 4, 'z', 8] 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47800706)
 I don't see the need for  MultiIndex  here. 

  Option 1  
Flatten before calling  pd.DataFrame . You can generalise this with  *  argument unpacking -  

  pd.DataFrame([list(x) + y for x, *y in td])

   0  1  2
0  1  1  1
1  1  2  2
2  1  3  1
3  2  1  1
4  2  2  5
5  3  2  2
  

 

  Option 2  
Slightly more roundabout, using  pd.concat  -  

  df = pd.DataFrame(td)

        0  1
0  (1, 1)  1
1  (1, 2)  2
2  (1, 3)  1
3  (2, 1)  1
4  (2, 2)  5
5  (3, 2)  2

pd.concat([pd.DataFrame(df.iloc[:, 0].tolist()), df.iloc[:, 1:]], axis=1)

   0  1  1
0  1  1  1
1  1  2  2
2  1  3  1
3  2  1  1
4  2  2  5
5  3  2  2
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41983625)
  df.rolling(2).agg(["min", "max"]).T.apply(
    lambda x:
        x.append(pd.Series(dict(new='_'.join(x.name)))),
    1).set_index('new').rename_axis(None).T
  

 https://i.stack.imgur.com/B7hhC.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39899896)
 create a custom function to flatten  columnB  then use  pd.concat  

  def flatten(js):
    return pd.DataFrame(js).set_index('pos').squeeze()

pd.concat([df.drop(['columnA', 'columnB'], axis=1),
           df.columnA.apply(pd.Series),
           df.columnB.apply(flatten)], axis=1)
  

 https://i.stack.imgur.com/FVzRP.png 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53799824)
 Flatten the list of list , then using  DataFrame  constructor  

  import itertools
pd.DataFrame(list(map(lambda x : list(itertools.chain(*x)),df.shares.tolist())))
    0   1   2
0  10   9   9
1   3   3   2
2  17  17  18
  



