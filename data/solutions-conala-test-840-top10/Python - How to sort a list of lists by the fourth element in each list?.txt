Query: Python - How to sort a list of lists by the fourth element in each list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50947068)
  array.sort(key = lambda x:x[1])
  

 You can easily sort using this snippet, where 1 is the index of the element. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21068856)
 Python automatically sorts lists of lists by the first element. For example: 

  lol=[[1,2,3],[5,6,7],[0,9,9]]
sorted(lol)
[[0, 9, 9], [1, 2, 3], [5, 6, 7]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52846312)
 You can use a key function that returns a tuple instead. Negate the numeric value of an item if you want it to be sorted in the opposite direction. 

  my_list.sort(key=lambda x: (x[2], -x[3]))
  

 Note that the index of 2 actually refers to the third item, and the index of 3 refers to the fourth item, but I assume that the index of 2 in the code you posted is the item you want to sort first. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15138558)
 Ugly and inefficient, but probably working: 

  order = ['item 4.1', 'item 2.1', 'item 3.1', 'item 1.1']
my_list.sort(key=lambda x: order.index(x[0]))
  

 reorders  my_list  to: 

  [['item 4.1', 'item 4.2', 'item 4.3', 'item 4.4', 'item 4.5'],
 ['item 2.1', 'item 2.2', 'item 2.3', 'item 2.4', 'item 2.5'],
 ['item 3.1', 'item 3.2', 'item 3.3', 'item 3.4', 'item 3.5'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.2', 'item 3.2'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.6', 'item 3.2'],
 ['item 3.1', 'item 2.2', 'item 2.4', 'item 2.7', 'item 2.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.4', 'item 1.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.5', 'item 1.5']]
  

 If you want to sort by first column in a customized way, then by the third and fourth alphabetically, just expand the  key :  

  my_list.sort(key=lambda x: (order.index(x[0]), x[2], x[3]))
  

 which returns 

  [['item 4.1', 'item 4.2', 'item 4.3', 'item 4.4', 'item 4.5'],
 ['item 2.1', 'item 2.2', 'item 2.3', 'item 2.4', 'item 2.5'],
 ['item 3.1', 'item 2.2', 'item 2.4', 'item 2.7', 'item 2.5'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.2', 'item 3.2'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.6', 'item 3.2'],
 ['item 3.1', 'item 3.2', 'item 3.3', 'item 3.4', 'item 3.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.4', 'item 1.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.5', 'item 1.5']]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17555240)
 Use http://docs.python.org/2/library/functions.html#sorted with a  key  as follows -  

  >>> unsorted_list = [['a','b','c','5','d'],['e','f','g','3','h'],['i','j','k','4','m']]
>>> sorted(unsorted_list, key = lambda x: int(x[3]))
[['e', 'f', 'g', '3', 'h'], ['i', 'j', 'k', '4', 'm'], ['a', 'b', 'c', '5', 'd']]
  

 The  lambda  returns the fourth element of each of the inner lists and the  sorted  function uses that to sort those list. This assumes that  int(elem)  will not fail for the list. 

 Or use  itemgetter  (As Ashwini's comment pointed out, this method would not work if you have string representations of the numbers, since they are bound to fail somewhere for 2+ digit numbers) 

  >>> from operator import itemgetter
>>> sorted(unsorted_list, key = itemgetter(3))
[['e', 'f', 'g', '3', 'h'], ['i', 'j', 'k', '4', 'm'], ['a', 'b', 'c', '5', 'd']]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41435959)
 In addition to all of the other fine answers here, you can also write your own ordering class: 

  from functools import total_ordering

@total_ordering
class MyOrdering(object):
    def __init__(self, value):
        self.value = value
    def __eq__(self, other):
        return other.value == self.value
    def __lt__(self, other):
        for i in [0, 2, 4]:
            if self.value[i] != other.value[i]:
                return self.value[i] < other.value[i]
        for i in [1, 3]:
            if self.value[i] != other.value[i]:
                return self.value[i] > other.value[i]
        return False
  

 And then you can sort using the MyOrdering class as your key function: 

  outer_list.sort(key=MyOrdering)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27295681)
 Use  sorted  if you want to keep original  list  unaffected 

  lst = [[1, 2], [2, 2], [3, 5], [4, 1], [5, 2]]
In [103]: sorted(lst, key=lambda x: x[1])
Out[103]: [[4, 1], [1, 2], [2, 2], [5, 2], [3, 5]]
  

 else use  list.sort  to sort current list and keep sorted list 

  In [106]: lst.sort(key=lambda x: x[1])
In [107]: lst
Out[107]: [[4, 1], [1, 2], [2, 2], [5, 2], [3, 5]]
  

 or use https://docs.python.org/2/library/operator.html#operator.itemgetter 

  from operator import itemgetter
In [108]: sorted(lst, key=itemgetter(1))
Out[108]: [[4, 1], [1, 2], [2, 2], [5, 2], [3, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29312083)
  

  >>> list_of_list = [[0, 1, 2, 3, 'Ab'],
                    [0, 1, 2, 3, 'bA'],
                    [0, 1, 2, 3, ' '],
                    [0, 1, 2, 3, None],
                    [0, 1, 2, 3, ''],
                    [0, 1, 2, 3, 'Ca']]
>>> list_of_list = sorted(list_of_list,
                          key=lambda x: x[4] if isinstance(x[4], basestring) else "",
                          reverse=True)
>>> print list_of_list
[[0, 1, 2, 3, 'bA'], [0, 1, 2, 3, 'Ca'], [0, 1, 2, 3, 'Ab'], [0, 1, 2, 3, ' '], [0, 1, 2, 3, None], [0, 1, 2, 3, '']]
  

 What this does is use the fourth element as sort key if it is a string, else it will use the empty string as comparison key. 

 Alternately you could split your list in two lists, only sort the first one, and append the remaining elements like this: 

  list_of_list = sorted(x
                      for x in list_of_list
                      if isinstance(x[4], basestring) and len(x[4].strip())) + \
               [x
                for x in list_of_list
                if not isinstance(x[4], basestring) or not len(x[4].strip())]
print list_of_list
  

  

  [[0, 1, 2, 3, 'Ab'], [0, 1, 2, 3, 'Ca'], [0, 1, 2, 3, 'bA'], [0, 1, 2, 3, ' '], [0, 1, 2, 3, None], [0, 1, 2, 3, '']]
  

 It is not entirely clear if there are other sorting criteria that you need to follow, and this solution is not totally pretty, but at least it sorts the strings in front and keeps the rest at the back. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35954238)
 Once you have collected the list of numbers (converted to integers or float if applicable) you can effect a sort by picking the largest and smallest items in the list, adding these to 2 separate lists, and then combining the results into a final, sorted, list. 

 Here is a function that does that using  both   min()  and  max() . It sorts the given list in-place: 

  def max_min_sort(l):
    _max = []
    _min = []
    while l:
        n = max(l)
        _max.insert(0, n)
        l.remove(n)
        if l:
            n = min(l)
            _min.append(n)
            l.remove(n)
    l[:] = _min + _max

>>> numbers = [100, 200, 44, 71]
>>> max_min_sort(numbers)
>>> numbers
[44, 71, 100, 200]
  

 It's also possible, and more  slightly  more efficient to just use one of  max()  or  min() . Example using  min() : 

  def min_sort(l):
    result = []
    while l:
        n = min(l)
        result.append(n)
        l.remove(n)
    l[:] = result
  



