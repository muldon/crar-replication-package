Query: How can I check if a date is the same day as datetime.today()?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9847269)
 Use  weekday()  (http://docs.python.org/library/datetime.html#datetime.date.weekday): 

  >>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4
  

 From the documentation: 

 
   Return the day of the week as an integer, where Monday is 0 and Sunday is 6. 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6407378)
 
  If you need to compare only day of month value than you can use the following code: 

  if yourdate.day == datetime.today().day:
    # do something
   
  If you need to check that the difference between two dates is acceptable then you can use
http://docs.python.org/release/2.6.6/library/datetime.html?highlight=timedelta#datetime.timedelta: 

  if (datetime.today() - yourdate).days == 0:
    #do something
   
  And if you want to compare date part only than you can simply use: 

  from datetime import datetime, date
if yourdatetime.date() < datetime.today().date()
    # do something
   
 

 Note that timedelta has the following format: 

  datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])
  

 So you are able to check diff in days, seconds, msec, minutes and so on depending on what you really need: 

  from datetime import datetime
if (datetime.today() - yourdate).days == 0:
    #do something
  

 In your case when you need to check that two dates are exactly the same you can use timedelta(0): 

  from datetime import datetime, timedelta
if (datetime.today() - yourdate) == timedelta(0):
    #do something
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6407393)
 If you want to just compare dates, 

  yourdatetime.date() < datetime.today().date()
  

  

  yourdatetime.date() == datetime.today().date()
  

 If you want to check that they're  the same  date. 

 http://docs.python.org/library/datetime.html is usually helpful. It is also usually the first google result for  python thing_i_have_a_question_about . Unless your question is about a function/module named "snake". 

 Basically, the  datetime  module has three types for storing a point in time: 

 
  date  for year, month, day of month 
  time  for hours, minutes, seconds, microseconds, time zone info 
  datetime  combines date and time. It has the methods  date()  and  time()  to get the corresponding  date  and  time  objects, and there's a handy  combine  function to combine  date  and  time  into a  datetime . 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29519293)
 If you'd like to have the date in English: 

  from datetime import date
import calendar
my_date = date.today()
calendar.day_name[my_date.weekday()]  #'Wednesday'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23555418)
 To get Sunday as 1 through Saturday as 7, this is the simplest solution to your question: 

  datetime.date.today().toordinal()%7 + 1
  

  

  import datetime

today = datetime.date.today()
sunday = today - datetime.timedelta(today.weekday()+1)

for i in range(7):
    tmp_date = sunday + datetime.timedelta(i)
    print tmp_date.toordinal()%7 + 1, '==', tmp_date.strftime('%A')
  

 Output: 

  1 == Sunday
2 == Monday
3 == Tuesday
4 == Wednesday
5 == Thursday
6 == Friday
7 == Saturday
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34526908)
 Basically you need to add 5 business days... This should do it: 

  import datetime
def addBusinessDays(from_date, add_days):
    business_days_to_add = add_days
    current_date = from_date
    while business_days_to_add > 0:
        current_date += datetime.timedelta(days=1)
        weekday = current_date.weekday()
        if weekday >= 5: # sunday = 6
            continue
        business_days_to_add -= 1
    return current_date

#demo:
print '5 business days from today:'
print addBusinessDays(datetime.date.today(), 5)
  

 Update: 

 Here is the explanation: 

 
 We get the start date(Date that we need to add business days to it) 
 We use a loop to add days 1 at a time to the date(we use datetime.timedelta(days=1) to add 1 day to date) 
 After adding each day we check to see if updated date is weekday. If it's weekday we count it otherwise we don't count it and continue 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12686855)
 You could check if the current time is less than 17:00, if so, substract one day from the generated time object: 

  test = datetime.datetime.now().replace(hour=17,minute=0,second=0,microsecond=0)
if datetime.datetime.now() < test:
    test = test - datetime.timedelta(days=1)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45160705)
 You can use  calendar.firstweekday()  to check what the first day of the week is on that computer (0 is Monday, 6 is Sunday).  

 1) Let's say that  firstweekday  returned  1  (Sunday). Then you can use 

  date.today() - datetime.timedelta(days=date.today().isoweekday() % 7)
  

 to compute the date of the last Sunday.  

 2) Let's say that  firstweekday  returned  0  (Monday).  

  date.today() - datetime.timedelta(days=date.today().isoweekday() % 7 - 1)
  

 to compute the date of the last Monday.  

 Hope this gives you some direction.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6407404)
 You can set the hours, minutes, seconds and microseconds to whatever you like 

  datetime.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
  

 but trutheality's answer is probably best when they are all to be zero and you can just compare the  .date() s of the times 

 Maybe it is faster though if you have to compare hundreds of datetimes because you only need to do the  replace()  once vs hundreds of calls to  date()  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/28528001)
 You can filter using  __year ,  __month  and  __day : 

  today = date.today()
Winner.objects.filter(win_date__year=today.year,
                      win_date__month=today.month,
                      win_date__day=today.day)
  

 https://docs.djangoproject.com/en/1.7/ref/models/querysets/#year 



