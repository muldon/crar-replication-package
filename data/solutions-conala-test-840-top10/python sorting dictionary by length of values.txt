Query: python sorting dictionary by length of values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50445595)
 <div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"> dict= {'a': [9,2,3,4,5], 'b': [1,2,3,4, 5, 6], 'c': [], 'd': [1,2,3,4], 'e': [1,2]}
dict_temp = {'a': 'hello', 'b': 'bye', 'c': '', 'd': 'aa', 'e': 'zz'}

def sort_by_values_len(dict):
    dict_len= {key: len(value) for key, value in dict.items()}
    import operator
    sorted_key_list = sorted(dict_len.items(), key=operator.itemgetter(1), reverse=True)
    sorted_dict = [{item[0]: dict[item [0]]} for item in sorted_key_list]
    return sorted_dict

print (sort_by_values_len(dict))

output:
[{'b': [1, 2, 3, 4, 5, 6]}, {'a': [9, 2, 3, 4, 5]}, {'d': [1, 2, 3, 4]}, {'e': [1, 2]}, {'c': []}]  
</div>
</div>
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34708985)
 Sort the list with  key=len  

  >>> d0
{'a': 100, 'c': 150, 'b': 5, 'd': 60}
>>> d1
{1: 'ONE', 2: 'TWO'}
>>> d2
{3: 'THREE', 4: 'FOUR'}
>>> d3
{1:'ONE',2:'TWO',3:'THREE'}
l = [d0,d1,d2,d3]
>>> sorted(l, key=len, reverse=True)
[{'a': 100, 'c': 150, 'b': 5, 'd': 60}, {1: 'ONE', 2: 'TWO', 3: 'THREE'}, {1: 'ONE', 2: 'TWO'}, {3: 'THREE', 4: 'FOUR'}]
>>>
>>> l.sort(key=len, reverse=True) #in list sorting
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12905004)
 Since an ordered dictionary remembers its insertion order, so you can do this: 

  OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12905011)
 Using simple dictionary sorting first and then using  OrderedDict() : 

  >>> from collections import OrderedDict as od
>>> k=sorted(t, key=lambda x:len(t[x]), reverse=True)
>>> k
['rk5', 'rand_key_2', 'rand_key_3', 'rand_key_1']

>>> od((x, t[x]) for x in k)
OrderedDict([('rk5', [1, 100, 3, 4, 3, 3]), ('rand_key_2', [13, 23]), ('rand_key_3', [1]), ('rand_key_1', ['x'])])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10731062)
  

  sorted(a, key = lambda x: (len(x), [confrom[card[0]] for card in x]))
  

 http://ideone.com/u9uJz 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16868476)
  >>> d = {"one": [(1,3),(1,4)], "two": [(1,2),(1,2),(1,3)], "three": [(1,1)]}
>>> for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
  

 Here is a universal solution that works on Python 2 & Python 3: 

  >>> print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))
two one three
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29654266)
 I'm not sure if you need the quotes, but you can print your dictionary in the order you want with: 

  max_len = max([len(v) for v in d.values()])
padding = 4
for k,v in sorted(d.items(), key=lambda i:i[1]):
    print('{v:{v_len:d}s} {k:3s}'.format(v_len=max_len+padding,
                                           v=v, k=k))
  

 Output: 

  Bolivian Boliviano     BOB
Georgian Lari          GEL
South African Rand     ZAR
  

 The  key  argument to  sorted  ensures that the dictionary's items are sorted by value. 

 EDIT: as requested, make the field length match the dictionary value length (plus some padding). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15136826)
 If  n  is small compared to the length of the list,  heapq.nlargest  should be faster than sorting the whole list. . 

  def highest(L, n):
    return heapq.nlargest(n, enumerate(L), key=operator.itemgetter(1))

>>> M = [102, 56, 2355, 3, 25, 78, 19, 25, 1002, -54, 0, 23, -1]
>>> highest(M,5)
[(2, 2355), (8, 1002), (0, 102), (5, 78), (1, 56)]
  

 This will work in O(N + nlogn) where  N  is the length of the list and  n  is the number of items to return, as opposed to O(NlogN) for sorting. 



