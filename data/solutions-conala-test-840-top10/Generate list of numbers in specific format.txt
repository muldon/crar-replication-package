Query: Generate list of numbers in specific format
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12030095)
 Python http://docs.python.org/library/stdtypes.html#string-formatting allows you to specify a precision: 

 
   Precision (optional), given as a '.' (dot) followed by the precision. 
 

 In this case, you can use it with a value of 2 to get what you want: 

  >>> ["%.2d" % i for i in range(16)]
['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12',
 '13', '14', '15']
  

 You could also use the zfill function: 

  >>> str(3).zfill(2)
'03'
  

 or the string format function: 

  >>> "{0:02d}".format(3)
'03'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48723381)
 You could use a nested list comprehension: 

  result = ['{}q{}'.format(y, q+1) for y in range(2000, 2003) for q in range(4)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36291171)
 You will want to https://docs.python.org/3/library/string.html#formatspec your  string  

  out = []
for number in sorted(sample(range(99999), 10))):
    out.append('{:05d}'.format(number))
print(out)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21257003)
 You can use a list comprehension to generate your strings and print them, but as Ashwini Chaudhary said in the comments, you can't get 3.01 for 3.005 using the string format '.2f' 

  a = [1.003,2.004,3.005]
b = ' '.join(['{:.2f}'.format(num) for num in a])
print(b) # 1.00 2.00 3.00
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48723367)
 You can use  map  for a functional, although far uglier solution: 

  import itertools
final_data = list(itertools.chain(*map(lambda x:map(lambda y:"{}q{}".format(x, y), range(1, 5)), range(2000, 2003))))
  

 Output: 

  ['2000q1', '2000q2', '2000q3', '2000q4', '2001q1', '2001q2', '2001q3', '2001q4', '2002q1', '2002q2', '2002q3', '2002q4']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36291138)
 You can combine https://docs.python.org/3/library/stdtypes.html#str.format and  map , for one 

  print(*map('{:05}'.format, sorted(sample(range(99999), 10))))
  

 The asterisk in this context https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists. In other words it generates positional arguments from the given https://docs.python.org/3/glossary.html#term-iterable (map in this case). 

 You can also store the lottery numbers as a list of strings 

  # Again using a map
ns = list(map('{:05}'.format, sorted(sample(range(99999), 10))))

# Using a list comprehension
ns = ['{:05}'.format(n) for n in sorted(sample(range(99999), 10))]
  

 Note that python's https://docs.python.org/3/library/functions.html#func-range is open as in  [start, stop) , so use 

  range(100000)
  

 for a range of values from 0 to 99999. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42878092)
 This should generate the main part of the table correctly, but it will get messy if you try to print a timestable with large numbers (not sure why you would :-))  

  size = int(input("Please enter the size of the table: "))
# list comprehension to make 2d list
arr = [[i for i in range(1, size+1)] for j in range(size)]
# this multiplies all the numbers in the 2d list so they can be printed later
for i in range(len(arr)):
    for j in range(len(arr[i])):
        arr[i][j] = (i+1)*(j+1)
# print list
for i in range(len(arr)):
    print(str("{:2.2g}".format(i+1)) + " * " + str("{:2.2g}".format(i+1)) + "  ", end="")
    for j in range(len(arr[i])):
        print(str("{:2.2g}".format(arr[i][j])) + " ", end="")
    # newline
    print()
  

 The important part is the  str("{:2.2g}".format(i+1)) . It formats the decimal to 2 places, and the g removes the zeroes. Check out https://stackoverflow.com/questions/2389846/python-decimals-format 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20338944)
 Just do this in equal pieces. One character has to be  1 ,  2 ,  3 ,  4 , or  5 ; the second can be any digit; the third must be  - , the last two must be  A ,  B ,  C , or  D , so: 

  perms = itertools.product('12345', '0123456789', '-', 'ABCD', 'ABCD')
  

 And then, to join them up into strings: 

  print('The possible combinations are:')
for perm in perms:
    print(''.join(perm))
  

 

 This starts with  10-AA , not  11-AA . There's no way to end with  59  if you start with  11  (assuming you want the numbers in order). 

 

 I originally left the  -  out and joined up each string with  format , but I think this is slower. It's also at least twice as fast on every Python version I have handy. (The cost of a 1-length loop in C is trivial, as is building a 5-tuple vs. a 4-tuple; the cost of  format  vs.  join  is not.) 

 You could also  product  up a  range(11, 60)  and a  product('ABCD', repeat=2) , then flatten it with  chain , then  format  each one. While that's  conceptually  simpler, it's going to be a  lot  harder to read, and is about as slow as the flat  format  version. 

 Anyway, in 64-bit python.org 3.3.2 on OS X 10.9: 

  In [1189]: %timeit collections.deque((''.join(perm) for perm in itertools.product('1234', '1234567890', '-', 'ABCD', 'ABCD')), maxlen=0)
10000 loops, best of 3: 129 µs per loop

In [1190]: %timeit collections.deque(('{}{}-{}{}'.format(*perm) for perm in itertools.product('1234', '1234567890', 'ABCD', 'ABCD')), maxlen=0)
1000 loops, best of 3: 359 µs per loop
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37633952)
 You can use regexes (the https://docs.python.org/2/library/re.html module) and a https://docs.python.org/2/library/collections.html#collections.defaultdict to accomplish this. The following will work for arbitrary lengths of the non-digit/digit parts of your input strings: 

  import re
from collections import defaultdict

def str_dig(s):  # str_dig('ABC345') -> ('ABC', '345')
    return re.match('([^\d]+)(\d+)', s).groups()

lst=['AB4', 'AB3','AC3', 'BC4', 'BC5']  # do NOT shadow list!

d = defaultdict(list)
for x, y in map(str_dig, lst):  # map applies the str_dig function to all in lst
    d[x].append(y)
    d[y].append(x)

# d['AB']: ['4', '3'], d['3']: ['AB', 'AC']
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24072162)
 So, there is a function  range , which builds a generator for you; for example:  range(0,10000)  will generate 10,000 integers starting from 0 (0 to 9999 inclusive).  

 Note the range object is not a list, it's a function that will generate a list. You could make a list by doing:  

  list(range(0,10000))
  

 Which gets you something like  

  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... 9999]
  

 You can use a list comprehension to format each entry in the list: 

  [format(x, '04') for x in range(0,10000)]
  

 Which gives you a list of strings like: 

  ['0000', '0001', '0002', '0003', '0004', ...
  

 Then to join a list of strings together, there is a function called  join . You want to put the empty string between each number, so you call it like this: 

  "".join([format(x, '04') for x in range(0,10000)])
  

 And you get your output: 

  00000001000200030004000500060007 ... 9999
  



