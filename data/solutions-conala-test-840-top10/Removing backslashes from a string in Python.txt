Query: Removing backslashes from a string in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21863023)
 Use  decode('string_escape') , for example: 

  result = stringwithbackslashes.decode('string_escape')
  

 
    string_escape  : Produce a string that is suitable as string
  literal in Python source code 
 

 or just: 

  result.replace("\\", "") 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50420448)
 If you are interested in seeing the component words that are being separated by the '\' character, use: 

  result.replace('\\', ' ')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36212346)
 Easy, just use  str.replace() .   

  Note the double  \\ , It's not replacing double backslashes but rather one backslash is escaping the other  

  Code:  

  def clean():
    with open('example.txt', 'r') as f:
        outputs = []
        for line in f:
            output = line.replace('/', '')
            output = output.replace('\\', '')
            output = output.replace('\n', '')
            outputs.append(output)
    return outputs

print(clean())
  

  Output:  

  ['Cornet~Chris Tyle', 'Cornet~Warren Vache', 'Cornet~Roger Webster', 'Cornet~Grimethorpe Colliery Band', 'Cornet~Daniel Rollston', 'Cornet~Murley Silver Band', 'Chocolate~Chocolate liquor', 'Chocolate~Theobroma cacao', 'Chocolate~Mesoamerica']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6275710)
 You can use the string  .replace()  method. 

  >>> print r'pictures\12761_1.jpg'.replace("\\", "/")
pictures/12761_1.jpg
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49036728)
 Just use this code: 

  s = s.replace("\\", "/")
  

 It replaces all the backslashes with the forward slash. The reason for the two backslashes is because you have to escape the other backslash. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30158037)
 Well, there are no slashes, nor backslashes, in the string. The backslashes escape  ' , although they don't have to because the string is delimited with  "" . 

  print("I don\'t know why I don\'t have the right answer")
print("I don't know why I don't have the right answer")
  

  

  I don't know why I don't have the right answer
I don't know why I don't have the right answer
  

 Moreover, you are using wrong character and  strip  only removes characters from the ends of the string: 

  Python 2.7.9 (default, Mar  1 2015, 12:57:24) 
>>> print("///I don't know why ///I don't have the right answer///".strip("/"))
I don't know why ///I don't have the right answer
  

 To put a backslash into a string you need to escape it too (or use raw string literals). 

  >>> print("\\I don't know why ///I don't have the right answer\\".strip("/"))
\I don't know why ///I don't have the right answer\
  

 As you can see even though the backslashes were at the beginning and the end of the string they didn't get removed. 

 Finally, to answer the original question. One way is to use https://stackoverflow.com/questions/3559559/how-to-delete-a-character-from-a-string-using-python method on string: 

  >>> print("\\I don't know why \\\I don't have the right answer\\".replace("\\",""))
I don't know why I don't have the right answer
  

 Also, props for reaching out for a good answer after you screwed your own one =). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36655617)
 Single backslashes should be used in raw string literals to escape special regex metacharacters and shorthand character classes. 

 Use 

  import re
line = '[123:456]othertext'
print re.sub(r'^\[\d*:\d*\]','',line)
#               ^        ^
# => othertext
  

 See http://ideone.com/9MPpvH 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24642802)
 The raw string doesn't do anything useful in the  r'[%s]' % ''.join(chars)  interpolation, it first gets evaluated, doesn't escape anything, and then the  chars  is joined and substituted. So it's the same as doing  '[%s]' % ''.join(chars) . 

 The problem with  \ s here is that you need  '\\\\'  (or  r'\\' ) for regex and  '\\'  for replacement. Regex needs one more level of escape, so you cannot use the same string for both: 

  >>> path = 'a\\path'
>>> re.search('[\\\\]', path)
<_sre.SRE_Match object at 0x10d5c6920>
>>> path = 'a\\path'
>>> path.replace('\\\\', '')
'a\\path'
>>> path.replace('\\', '')
'apath'
  

 You can either use separate  chars  arrays for searching and replacing: 

  chars_search = ['~', '*', '\\\\', ':', '<', '>', '|', '?', '"']
chars_replace = ['~', '*', '\\', ':', '<', '>', '|', '?', '"']
  

  

  chars = ['~', '*', '\\\\', '\\', ':', '<', '>', '|', '?', '"']
  

 . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12618054)
 The error is because you did not add a escape character to your  '\' , you should give  \\  for  backslash (\)  

  In [147]: str = "a\c\d"

In [148]: str
Out[148]: 'a\\c\\d'

In [149]: str.replace('\\', " ")
Out[149]: 'a c d'

In [150]: str.replace('\\', "")
Out[150]: 'acd'
  



