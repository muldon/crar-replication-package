Query: How to get week number in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5245186)
 Generally to get the current week number (starts from Sunday): 

  from datetime import *
today = datetime.today()
print today.strftime("%U")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37536942)
 You can try %W directive as below: 

  d = datetime.datetime.strptime('2016-06-16','%Y-%m-%d')
print(datetime.datetime.strftime(d,'%W'))
  

 '%W': Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28069361)
 You can get the week number directly from datetime as string. 

  >>> import datetime
>>> datetime.date(2010, 6, 16).strftime("%V")
'24'
  

 Also you can get diferent "types" of the week number of the year changing the strftime parameter for: 

 
   %U - week number of the current year, starting with the first Sunday
  as the first day of the first week. 
  
   %V - The ISO 8601 week number of the current year (01 to 53), where
  week 1 is the first week that has at least 4 days in the current year,
  and with Monday as the first day of the week. 
  
   %W - week number of the current year, starting with the first Monday
  as the first day of the first week. 
 

 I've got it from http://www.tutorialspoint.com/python/time_strftime.htm. It worked for me in Python 2.7.6 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2600868)
 Look at http://docs.python.org/library/datetime.html#datetime.datetime.isocalendar. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32638267)
 If you are only using the isocalendar week number across the board the following should be sufficient: 

  import datetime
week = date(year=2014, month=1, day=1).isocalendar()[1]
  

 This retrieves the second member of the tuple returned by isocalendar for our week number. 

 However, if you are going to be using date functions that deal in the Gregorian calendar, isocalendar alone will not work!  Take the following example: 

  import datetime
date = datetime.datetime.strptime("2014-1-1", "%Y-%W-%w")
week = date.isocalendar()[1]
  

 The string here says to return the Monday of the first week in 2014 as our date.  When we use isocalendar to retrieve the week number here, we would expect to get the same week number back, but we don't.  Instead we get a week number of 2.   

 Week 1 in the Gregorian calendar is the first week containing a Monday.  Week 1 in the isocalendar is the first week containing a Thursday.  The partial week at the beginning of 2014 contains a Thursday, so this is week 1 by the isocalendar, and making  date  week 2. 

 If we want to get the Gregorian week, we will need to convert from the isocalendar to the Gregorian.  Here is a simple function that does the trick. 

  import datetime

def gregorian_week(date):
    # The isocalendar week for this date
    iso_week = date.isocalendar()[1]

    # The baseline Gregorian date for the beginning of our date's year
    base_greg = datetime.datetime.strptime('%d-1-1' % date.year, "%Y-%W-%w")

    # If the isocalendar week for this date is not 1, we need to 
    # decrement the iso_week by 1 to get the Gregorian week number
    return iso_week if base_greg.isocalendar()[1] == 1 else iso_week - 1
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28341213)
 For the integer value of the instantaneous week of the year try: 

  import datetime
datetime.datetime.utcnow().isocalendar()[1]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35890416)
  %U  treats weeks as starting on  Sunday , not on Monday. From the https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior: 

 
    %U  
  Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0. 
 

 You could use the  %W  format, which gives a zero-padded week number based on  Monday  being the first day of the week: 

 
    %W  
  Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.   
 

 The alternative is to use  b.isocalendar()[1]  if you need to get the week number as per ISO 8601. The rules for what is considered week 1 differ from the ISO calendar calculations;  %W  bases this on the first Monday in the year, while ISO 8601 states that the week that includes January 4 is the first week. For 2016 both systems align, but that's not the case in 2014, 2015 or 2019: 

  >>> d = datetime(2019, 3, 9)
>>> d.strftime('%W')
'09'
>>> d.isocalendar()[1]
10
  

 If you wait until Python 3.6, you can use the  %V  format to include the ISO week number, see http://bugs.python.org/issue12006. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44906380)
  

  >>> import datetime
>>> june1 = datetime.datetime(2017,6,1)
>>> june1
datetime.datetime(2017, 6, 1, 0, 0)
>>> june1_weekday = june1.weekday()
>>> if june1_weekday < 6:  # 6 indicates Sunday
        first_sunday_in_june = june1 + datetime.timedelta(days=6-june1_weekday)
else:
        first_sunday_in_june = june1


>>> print(first_sunday_in_june)
2017-06-04 00:00:00
  

 Assuming you want ISO weeknumbers, you can then use the  isocalendar()  method. This gives a tuple  (year, weeknumber, weekday) . This uses the convention that weeks start with Monday, and the first week of the year is the first week with at least four days in the year (or in other words, the week with the first Thursday). 

  >>> first_sunday_in_june.isocalendar()
(2017, 22, 7)
  

 If you have another convention for first-day-of-the-week or first-week-of-the-year, you will have to brew your own function to get the week number. 

 Use the above method in a loop over the months, and you can create the desired list with week numbers. 



