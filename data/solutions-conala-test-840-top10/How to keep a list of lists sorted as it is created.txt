Query: How to keep a list of lists sorted as it is created
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35965506)
  res  isn't created until the entire list comprehension has been evaluated.  You can use a  set  to remove duplicates: 

  res = list(set(sum(lists, [])))
  

 If you want it sorted: 

  res = sorted(set(sum(lists, [])))
  

 If you want it ordered exactly how it comes, a list comprehension is probably not the best way.  Instead, do this: 

  res = []
for temp in lists:
    res.append([])
    for one in temp:
        if one not in res[-1]:
            res[-1].append(one)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53745124)
 I created  Union_list  to keep track of what already got printed: 

  Union_list = [] 
r = [['I1', 'I2'], ['I1', 'I3'], ['I1', 'I5'], ['I2', 'I3'], ['I2','I4'], ['I2', 'I5']]
for v in range(len(r)):
    for k in range(v+1,len(r)):
        union = sorted(list(set(r[v]) | set(r[k])))
        if union not in Union_list:
            Union_list.append(union)
            print(union)
  

 Output: 

  ['I1', 'I2', 'I3']
['I1', 'I2', 'I5']
['I1', 'I2', 'I4']
['I1', 'I3', 'I5']
['I1', 'I2', 'I3', 'I4']
['I1', 'I2', 'I3', 'I5']
['I1', 'I2', 'I4', 'I5']
['I2', 'I3', 'I4']
['I2', 'I3', 'I5']
['I2', 'I4', 'I5']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49494834)
 I have created a more general function, that sorts more than two lists based on another one, inspired by @Whatang's answer. 

  def parallel_sort(*lists):
    """
    Sorts the given lists, based on the first one.
    :param lists: lists to be sorted

    :return: a tuple containing the sorted lists
    """

    # Create the initially empty lists to later store the sorted items
    sorted_lists = tuple([] for _ in range(len(lists)))

    # Unpack the lists, sort them, zip them and iterate over them
    for t in sorted(zip(*lists)):
        # list items are now sorted based on the first list
        for i, item in enumerate(t):    # for each item...
            sorted_lists[i].append(item)  # ...store it in the appropriate list

    return sorted_lists
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1915602)
 To get the dictionary sorted: 

  from operator import itemgetter

sorted(adict.iteritems(), key=itemgetter(1), reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12324516)
  dataList.sort(key=lambda x: x[1])
  

  This sorts the list in place, by the second element in each item.  

 As has been pointed out in the comments, it is much more efficient to sort just once (at the end). Python's built-in sort method has been  heavily optimised to work fast . After testing it looks like the built-in sort is consistently around 3.7 times faster than using the https://stackoverflow.com/a/12324545/1240268 suggested in the other answer, over various size lists (I tested sizes of up to 600000). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29531484)
 You could just sort the tuples as part of the creation: 

  words = [sorted((a, b, c)) for a in al for b in bl for c in cl]
  

 Note that this will give you a list of lists, not a list of tuples, because  sorted  returns a list.  If you really want tuples you'll have to do 

  words = [tuple(sorted((a, b, c))) for a in al for b in bl for c in cl]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13016148)
  sorted(set(val
            for row in content.itervalues()
                for val in row))
  

  set  gets us all the distinct values (like a dictionary, but without the overhead of storing values).   sorted  then just takes the created  set  and returns a  list  sorted in ascending order. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6063647)
 As others mentioned tuples are immutable. Sorting a tuple (e.g.  sorted(mytuple) ) returns a list, which you would then have to cast back to a tuple. 

 To sort a tuple (and keep it a tuple) you'd have to do this: 

  mytuple = (3,2,1)
mysortedtuple = tuple(sorted(mytuple))
  

 To sort a list you'd have to do this: 

  mylist = [3,2,1]
mylist.sort()
  

 Because you're not casting and re-casting, the latter, in this instance, is more efficient. 

 Don't get hung up on using tuples over lists unless you have a good justification. If you need sorted data, tuples are not the way to go unless they are created that way in the first place. Tuples excel when the data they contain DOES NOT CHANGE, such as with configuration settings that are loaded at run-time, or data that has already been processed. 

 Considering that you mentioned you are processing a large dataset, you might want to look at using a functional programming style by way of generators and iterators over lists and tuples. This way you're not shuttling around and creating new containers, but just chaining iteration operations to get to the end result.  

 Further reading: 

 
 http://docs.python.org/library/itertools.html  
 http://docs.python.org/howto/functional.html 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2247431)
 I've never used to the bisect package. But if it only works in ascending order and you're always keeping your list sorted (whether ascending or descending) then you could simply sort beforehand and then invert (if you want to keep it descending). 

  x.sort()
bisect.insort(x,2.5)
x.reverse()
  

 Obviously more a hack then a real solution but at least it would work. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/49247882)
 If your objects are not hashable, but still orderable, you might wanna consider using  sorted  to match both lists 

 Assuming all elements in both lists have a match</h3>

 You can sort the lists indexes and pair the results 

  indexes1 = sorted(range(len(list1)), key=lambda x: list1[x])
indexes2 = sorted(range(len(list2)), key=lambda x: list2[x])
matches = zip(indexes1, indexes2)
  

 If not all elements match, but there are no duplicates within each list</h3>

 You can sort both at the same time and keep the indexes while sorting. Then if you catch any consecutive duplicates, you know they are from different lists 

  biglist = list(enumerate(list1)) + list(enumerate(list2))
biglist.sort(key=lambda x: x[1])
matches = [(biglist[i][0], biglist[i + 1][0]) for i in range(len(biglist) - 1) if biglist[i][1] == biglist[i + 1][1]]
  



