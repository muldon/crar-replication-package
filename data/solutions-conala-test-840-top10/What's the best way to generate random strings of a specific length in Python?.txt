Query: What's the best way to generate random strings of a specific length in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18319301)
  

  from string import ascii_uppercase
import random
from itertools import islice

def random_chars(size, chars=ascii_uppercase):
    selection = iter(lambda: random.choice(chars), object())
    while True:
        yield ''.join(islice(selection, size))

random_gen = random_chars(12)
print next(random_gen)
# LEQIITOSJZOQ
print next(random_gen)
# PXUYJTOTHWPJ
  

 Then just pull from the generator when they're needed... Either using  next(random_gen)  when you need them, or use  random_200 = list(islice(random_gen, 200))  for instance... 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48965873)
 This function generates random string of UPPERCASE letters with the specified length, 

  eg:  length = 6, will generate the following random sequence pattern 

 
     YLNYVQ   
 

      import random as r

    def generate_random_string(length):
        random_string = ''
        random_str_seq = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        for i in range(0,length):
            if i % length == 0 and i != 0:
                random_string += '-'
            random_string += str(random_str_seq[r.randint(0, len(random_str_seq) - 1)])
        return random_string
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18319156)
  CODE:  

  from random import choice
from string import ascii_uppercase

print(''.join(choice(ascii_uppercase) for i in range(12)))
  

  OUTPUT:  

  5 examples:  

  QPUPZVVHUNSN
EFJACZEBYQEB
QBQJJEEOYTZY
EOJUSUEAJEEK
QWRWLIWDTDBD
  

 

  EDIT:  

 If you need only digits, use the  digits  constant instead of the  ascii_uppercase  one from the  string  module. 

  3 examples:  

  229945986931
867348810313
618228923380
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28490542)
 By  Django , you can use  get_random_string  function in  django.utils.crypto  module. 

  get_random_string(length=12,
    allowed_chars=u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
    Returns a securely generated random string.

    The default length of 12 with the a-z, A-Z, 0-9 character set returns
    a 71-bit value. log_2((26+26+10)^12) =~ 71 bits
  

 Example: 

  get_random_string()
u'ngccjtxvvmr9'

get_random_string(4, allowed_chars='bqDE56')
u'DDD6'
  

 But if you don't want to have  Django , https://github.com/django/django/blob/0ed7d155635da9f79d4dd67e4889087d3673c6da/django/utils/crypto.py#L54 is independent code of it: 

 Code: 

  import random
import hashlib
import time

SECRET_KEY = 'PUT A RANDOM KEY WITH 50 CHARACTERS LENGTH HERE !!'

try:
    random = random.SystemRandom()
    using_sysrandom = True
except NotImplementedError:
    import warnings
    warnings.warn('A secure pseudo-random number generator is not available '
                  'on your system. Falling back to Mersenne Twister.')
    using_sysrandom = False


def get_random_string(length=12,
                      allowed_chars='abcdefghijklmnopqrstuvwxyz'
                                    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):
    """
    Returns a securely generated random string.

    The default length of 12 with the a-z, A-Z, 0-9 character set returns
    a 71-bit value. log_2((26+26+10)^12) =~ 71 bits
    """
    if not using_sysrandom:
        # This is ugly, and a hack, but it makes things better than
        # the alternative of predictability. This re-seeds the PRNG
        # using a value that is hard for an attacker to predict, every
        # time a random string is required. This may change the
        # properties of the chosen random sequence slightly, but this
        # is better than absolute predictability.
        random.seed(
            hashlib.sha256(
                ("%s%s%s" % (
                    random.getstate(),
                    time.time(),
                    SECRET_KEY)).encode('utf-8')
            ).digest())
    return ''.join(random.choice(allowed_chars) for i in range(length))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15439939)
 If you want it as a string (for example, a 10-digit phone number) you can use this: 

  n = 10
''.join(["%s" % randint(0, 9) for num in range(0, n)])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44357246)
 If you need no the file path, but only the random string having predefined length you can use something like this. 

  import random
import string

file_name = ''.join([random.choice(string.ascii_lowercase) for i in range(16)])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12448975)
 you can use  random.sample() : 

  In [28]: from string import ascii_lowercase as asl

In [29]: import random

In [30]: max_length=10

In [31]: for x in xrange(1,max_length+1):
   ....:     ''.join(random.sample(asl,x))
   ....:     
   ....:     
Out[31]: 'k'
Out[31]: 'jy'
Out[31]: 'ldo'
Out[31]: 'ivlr'
Out[31]: 'gqelt'
Out[31]: 'gbvnqw'
Out[31]: 'baestog'
Out[31]: 'kyijhmvn'
Out[31]: 'toshxklwb'
Out[31]: 'wihtmouexg'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17055438)
 Well if you want only letters, for example, here's code to generate a random string of a random length upto 1000: 

  out = ''
for i in range(random.random()*100):
    out += random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvqxyz')
  

 You can modify your alphabet of course. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34485032)
  string.digits  and  string.ascii_lowercase  can give you the set of alphanumeric characters. Then you could use  random.choice  in a list comprehension to generate the list: 

  from random import choice
from string import digits, ascii_lowercase

chars = digits + ascii_lowercase
L = ["".join([choice(chars) for i in range(2)]) for j in range(100)]
print(L)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/27008086)
 There are some good approaches to making weighted random choices described https://docs.python.org/3/library/random.html#examples-and-recipes: 

 
   A common task is to make a random.choice() with weighted probabilities. 
  
   If the weights are small integer ratios, a simple technique is to build a sample population with repeats: 
 

  >>> weighted_choices = [('Red', 3), ('Blue', 2), ('Yellow', 1), ('Green', 4)]
>>> population = [val for val, cnt in weighted_choices for i in range(cnt)]
>>> random.choice(population)
'Green'
  

 
   A more general approach is to arrange the weights in a cumulative distribution with itertools.accumulate(), and then locate the random value with bisect.bisect(): 
 

  >>> choices, weights = zip(*weighted_choices)
>>> cumdist = list(itertools.accumulate(weights))
>>> x = random.random() * cumdist[-1]
>>> choices[bisect.bisect(cumdist, x)]
'Blue'
  

 To adapt that latter approach to your specific problem, I'd do: 

  import random
import itertools
import bisect

def seq_prob(fprob_table, K=6, N=10):
    choices, weights = fprob_table.items()
    cumdist = list(itertools.accumulate(weights))

    results = []
    for _ in range(N):
        s = ""
        while len(s) < K:
            x = random.random() * cumdist[-1]
            s += choices[bisect.bisect(cumdist, x)]
        results.append(s)

    return results
  

 This assumes that the key strings in your probability table are all the same length If they have multiple different lengths, this code will sometimes (perhaps most of the time!) give answers that are longer than  K  characters. I suppose it also assumes that  K  is an exact multiple of the key length, though it will actually work if that's not true (it just will give result strings that are all longer than  K  characters, since there's no way to get  K  exactly). 



