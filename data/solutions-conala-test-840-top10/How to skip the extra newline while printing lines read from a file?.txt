Query: How to skip the extra newline while printing lines read from a file?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17027711)
 the python  print  statement adds a newline, but the original line already had a newline on it.  You can suppress it by adding a comma at the end: 

  print line , #<--- trailing comma
  

 For python3, (where  print  becomes a function), this looks like: 

  print(line,end='') #rather than the default `print(line,end='\n')`.
  

 

 Alternatively, you can strip the newline off the end of the line before you print it: 

  print line.rstrip('\n') # There are other options, e.g. line[:-1], ... 
  

 but I don't think that's nearly as pretty. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50823886)
 open the file.  f.readlines()  returns each line in the text file in a list. 

 Since a list is indexed from 0.  list[1:]  will skip the first one and give the rest. 

  with open("stack.txt") as f:
    txt_list = f.readlines() #That's a list
    for item in txt_list[1:]: #skip the first one
        print(item)
  

 output: 

  2

3

4

5

>>> 
  

 And the  \n  is nothing but a special character denoting a new line. From your input you read multiple lines each having a  new line  character at the end. Also  print  prints each one in a new line. That's the reason for (Two newlines) gap between two numbers in above output. 

 You can join the list and print like this. Since each already has a  new line  character in it. What you are doing is printing the entire list in your code.
 

  output: ['2\n', '3\n', '4\n', '5']
  

  

  with open("stack.txt") as f:
    txt_list = f.readlines()
    out = ''.join(txt_list[1:])
print(out)
  

 output: 

  2
3
4
5
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/545574)
 I use this 

  def cleaned( aFile ):
    for line in aFile:
        yield line.strip()
  

 Then I can do things like this. 

  lines = list( cleaned( open("file","r") ) )
  

 Or, I can extend cleaned with extra functions to, for example, drop blank lines or skip comment lines or whatever. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18028518)
 What happens is that each line as a newline at the end, and  print  statement in python also adds a newline.  You can strip the newlines: 

  with open("a.txt") as f:
    for line in f:
        print line.strip()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29737219)
 . 

 If you know the number of bytes you want to skip, you can use  .seek(amount)  on the file object, but in order to skip a number of lines, Python has to go through the file byte by byte to count the newline characters. 

 The only alternative that comes to my mind is if you handle a certain static file, that won't change. In that case, you can index it once, i.e. find out and remember the positions of each line. If you have that in e.g. a dictionary that you save and load with  pickle , you can skip to it in quasi-constant time with  seek . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38555654)
 As files are iterable in python you could call https://docs.python.org/2/library/stdtypes.html#iterator.next on it to skip the first line, for example: 

  with open('data.txt', 'r') as data:
    next(data)
    for line in data:
        print line.split()
  

 Would yield: 

  ['2', '2', '2', '2', '2', '2', '2']
['3', '3', '3', '3', '3', '3'] 
  

 References: 

 
 https://docs.python.org/2/library/stdtypes.html#iterator.next 
 https://docs.python.org/2.7/library/stdtypes.html#str.split  
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7327928)
  

  print open(lPath).read(), 
  

 (notice trailing comma at the end). 

 This will prevent  print  from placing a new-line at the end of its output. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51119878)
 The standard open() function should by default return a buffered file. 

  

  with open(<FILE>) as FileObj:
    for line in FileObj:
        x = line.strip().split()[0]
        print x
  

 Edited: to meet your requirement of only printing first part of your line. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16229025)
 As far as I understood, you actually want to skip empty lines, newline chars are already gone after  strip . 

  def parsefile(f):
    for line in open(f):
        li=line.strip()
        if li and not li.startswith("%"):
            print(li)
  

 When you read a file line by line, you're getting every line including empty with the newline chars, so for empty lines you're getting just  "\n"  which becomes  ""  after stripping. As explained in the comments,  if li:  in this case is a short for of  if li != "": . 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18028934)
 As the other answers explain, each line has a newline; when you  print  a bare string, it adds a line at the end. There are two ways around this; everything else is a variation on the same two ideas. 

 

 First, you can strip the newlines as you read them: 

  with open("a.txt") as f:
    for line in f:
        print line.rstrip()
  

 This will strip any other trailing whitespace, like spaces or tabs, as well as the newline. . If you do, you probably want to use universal newline mode, and strip off the newlines: 

  with open("a.txt", "rU") as f:
    for line in f:
        print line.rstrip('\n')
  

 However, if you know the text file will be, say, a Windows-newline file, or a native-to-whichever-platform-I'm-running-on-right-now-newline file, you can strip the appropriate endings explicitly: 

  with open("a.txt") as f:
    for line in f:
        print line.rstrip('\r\n')

with open("a.txt") as f:
    for line in f:
        print line.rstrip(os.linesep)
  

 

 The other way to do it is to leave the original newline, and just avoid printing an extra one. While you can do this by writing to  sys.stdout  with  sys.stdout.write(line) , you can also do it from  print  itself. 

 If you just add a comma to the end of the  print  statement, instead of printing a newline, it adds a "smart space". http://docs.python.org/2/reference/simple_stmts.html#the-print-statement is a bit tricky, but the idea is supposed to be that it adds a space when it should, and nothing when it shouldn't. Like most DWIM algorithms, it doesn't always get things right—but in this case, it does: 

  with open("a.txt") as f:
    for line in f:
        print line,
  

 Of course we're now assuming that the file's newlines match your terminal's—if you try this with, say, classic Mac files on a Unix terminal, you'll end up with each line printing over the last one. Again, you can get around that by using universal newlines. 

 Anyway, you can avoid the DWIM magic of smart space by using the print function instead of the print statement. In Python 2.x, you get this by using a  __future__  declaration: 

  from __future__ import print_function
with open("a.txt") as f:
    for line in f:
        print(line, end='')
  

 Or you can use a third-party wrapper library like  six , if you prefer. 



