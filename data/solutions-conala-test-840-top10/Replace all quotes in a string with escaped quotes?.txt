Query: Replace all quotes in a string with escaped quotes?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18886646)
 Your last attempt was working as you expected it to.  The double backslashes you see are simply a way of displaying the single backslashes that are actually in the string.  You can verify this by checking the length of the result with  len() . 

 For details on the double backslash thing, see: http://docs.python.org/2/reference/datamodel.html#object.__repr__ 

 

 UPDATE: 

 In response to your edited question, how about one of these? 

  print repr(s).replace('"', '\\"')
print s.encode('string-escape').replace('"', '\\"')
  

 Or for python 3: 

  print(s.encode('unicode-escape').replace(b'"', b'\\"'))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18886842)
 Hi usually when working with Javascript I use the json module provided by Python. It will escape the string as well as a bunch of other things as user2357112 has pointed out. 

  import json
string = 'This sentence has some "quotes" in it\n'
json.dumps(string) #gives you '"This sentence has some \\"quotes\\" in it\\n"'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38577234)
  NOTE : This answer assumes (it is https://stackoverflow.com/questions/38576959/pythonreplace-tab-in-double-quotes/38577234#comment64543584_38576959) that there are no escaped quotes/sequences in the input. 

 You may match the quoted string with a simple  "[^"]+"  regex that matches a  " , 1+ chars other than  "  and a  " , and replace the tabs inside within a lambda: 

  import re
s = 'Q3U96  Mus musculu MRMP-mous   Optimizatio "MRMP-mouse "'
res = re.sub(r'"[^"]+"', lambda m: m.group(0).replace("\t", ""), s)
print(res)
  

 See the http://ideone.com/7kfJf1 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18886707)
 Your second attempt is correct, but you're getting confused by the difference between the  repr  and the  str  of a string.  A more idiomatic way of doing your second way is to use "raw strings": 

  >>> s = 'This sentence has some "quotes" in it\n'
>>> print s
This sentence has some "quotes" in it

>>> print s.replace('"', r'\"')  # raw string used here
This sentence has some \"quotes\" in it

>>> s.replace('"', r'\"')
'This sentence has some \\"quotes\\" in it\n'
  

 Raw strings are WYSIWYG:  backslashes in a raw string are just another character.  It is - as you've discovered - easy to get confused otherwise ;-) 

 Printing the string (the 2nd-last output above) shows that it contains the characters you want now. 

 Without  print  (the last output above), Python implicitly applies  repr()  to the value before displaying it.  The result is a string that would produce the original if Python were to evaluate it.  That's why the backlashes are doubled in the last line.  They're not in the string, but are needed so that if Python were to evaluate it each  \\  would become one  \  in the result. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13409613)
 This is kind of...odd, but it may work. Remember to preface your string with  r  to denote a raw string so that we can remove the backslashes: 

  In [19]: s = r"{ 'name': 'Skrillex', 'Genre':'Dubstep', 'Bass': 'Heavy', 'thoughts': 'this\'s ahmazing'}"
In [20]: s.replace("\\'", 'REPLACEMEOHYEAH').replace("'", '"').replace('REPLACEMEOHYEAH', "\\'")
Out[20]: '{ "name": "Skrillex", "Genre":"Dubstep", "Bass": "Heavy", "thoughts": "this\'s ahmazing"}'
  

 The  REPLACEMEOHYEAH  the token to replace, so it would need to be something that is not going to appear in your actual string. The response format looks like something that could be parsed in more natural way, but if that isn't an option this should work. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50631482)
 I think there's no big risk if you want to replace any key or value enclosed with quotes (since quotes are escaped in json unless they are part of a string delimiter). 

 I would dump the structure, perform a  str.replace  (with double quotes), and parse again: 

  import json

d = { 'foo': {'bar' : 'hello'}}

d = json.loads(json.dumps(d).replace('"hello"','"hi"'))

print(d)
  

 result: 

  {'foo': {'bar': 'hi'}}
  

 I wouldn't risk to replace parts of strings or strings without quotes, because it could change other parts of the file. I can't think of an example where replacing a string without double quotes can change something else. 

 There are "clean" solutions like adapting from https://stackoverflow.com/questions/14882138/replace-value-in-json-file-for-key-which-can-be-nested-by-n-levels but is it worth the effort? . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9679836)
 I'm assuming that there are only two escaped double quotes in the string 

  match = s.match(/\\"(.*)\\"/m)
match[1] if match
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16130470)
  

  import re
text = "Some text on \"two\" lines" + "Another text on \"three\" lines"
print re.findall(r'"([^"]*)"', text)
  

  Output  

  ['two', 'three']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50230908)
 Use re.sub with anonym or lambda function in the replacement part. 

  >>> import re
>>> s = 'abc,def,"ghi,jkl,mno",pqr,stu'
>>> re.sub(r'"[^"]+"', lambda x: x.group().replace(',', '|'), s)
'abc,def,"ghi|jkl|mno",pqr,stu'
  

 Note: this won't handle escaped quotes and assume all the double quotes are properly balanced. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/11371128)
 The SQL standard way to escape a quote is to double it: 

  'This won''t be a problem.'
  

 So replace every quote with two quotes (and use double quotes in Python to stay sane): 

  out.write("('" + line[:2] + "', '" + line[3:-1].replace("'", "''") + "'),\n")
  



