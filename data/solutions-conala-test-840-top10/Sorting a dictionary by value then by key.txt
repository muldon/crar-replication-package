Query: Sorting a dictionary by value then by key
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7742808)
  In [62]: y={100:1, 90:4, 99:3, 92:1, 101:1}
In [63]: sorted(y.items(), key=lambda x: (x[1],x[0]), reverse=True)
Out[63]: [(90, 4), (99, 3), (101, 1), (100, 1), (92, 1)]
  

 The  key=lambda x: (x[1],x[0])  tells  sorted  that for each item  x  in  y.items() , use  (x[1],x[0])  as the proxy value to be sorted. Since  x  is of the form  (key,value) ,  (x[1],x[0])  yields  (value,key) . This causes  sorted  to sort by  value  first, then by  key  for tie-breakers. 

  reverse=True  tells  sorted  to present the result in descending, rather than ascending order. 

 See this http://wiki.python.org/moin/HowTo/Sorting for a great tutorial on sorting in Python. 

 . I tried using  key=reversed  instead, but  reversed(x)  returns an iterator, which does not compare as needed here. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7743006)
 Maybe this is more explicit: 

  >>> y = {100:1, 90:4, 99:3, 92:1, 101:1}
>>> reverse_comparison = lambda (a1, a2), (b1, b2):cmp((b2, b1), (a2, a1))
>>> sorted(y.items(), cmp=reverse_comparison)
[(90, 4), (99, 3), (101, 1), (100, 1), (92, 1)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26041911)
 Use the  key  argument to  sted()  to produce a tuple f each element: 

  sted(r, key=lambda k: (r[k], -k), reverse=True)
  

  

  sted(r, key=lambda k: (-r[k], k))
  

 Now the keys will be sted (in reverse) based on the  (value, negative key)  tuple,  sted (fward) on the  (negative value, key)  tuple. Tuples are sted lexicographically, so ties between equal values are broken by sting on the key. By negating either the value  the key, you affect a reverse st. 

  

  >>> r = {1: 4, 2: 4, 4: 4, 5: 4, 6: 10}
>>> sted(r, key=lambda k: (r[k], -k), reverse=True)
[6, 1, 2, 4, 5]
>>> sted(r, key=lambda k: (-r[k], k))
[6, 1, 2, 4, 5]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31562925)
  

  >>> keys, values = zip(*d.items())
  

 Now,  zip  the values, adding the key-list as the first column 

  >>> zip(d[u"d"], *values)
[(5, 1, 'g', 9, 5), (1, 4, 'a', 9, 1), (10, 6, 'b', 9, 10), (2, 7, '9', 8, 2)]
  

 Sort the values by first column (the key-list) 

  >>> sorted(_)
[(1, 4, 'a', 9, 1), (2, 7, '9', 8, 2), (5, 1, 'g', 9, 5), (10, 6, 'b', 9, 10)]
  

 Then  zip  the result of the sort back and strip the key-column 

  >>> zip(*_)[1:]
[(4, 7, 1, 6), ('a', '9', 'g', 'b'), (9, 8, 9, 9), (1, 2, 5, 10)]
  

  zip  again with the keys to reconstruct the dictionary. 

  >>> dict(zip(keys, _))
{u'a': (4, 7, 1, 6),
 u'b': (9, 8, 9, 9),
 u'c': ('a', '9', 'g', 'b'),
 u'd': (1, 2, 5, 10)}
  

 Everything put together: 

  keys, values = zip(*d.items())
new_d = dict(zip(keys, zip(*sorted(zip(d[u"d"], *values)))[1:]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11139279)
 The other answers which suggest  dict.items()  are partially right. But as you want to include the key in the sorting process (if I understand you correct), you want to reverse the items (which are essentially a tuple  (key, value) ). So use 

  data={'Tea': 35, 'Coffee': 35, 'Chocolate': 10}
for item in sorted(dic.items(), key=lambda it: (-it[1], it[0])):
    print item
  

 The  key  parameter gives a function which is used for sorting the items. It converts the items into a key which is then really used for sorting. 

 In your case, you want a mixed descending / ascending sort, so that the items given here are first turned into 

  (-35, 'Coffee')
(-35, 'Tea')
(-10, 'Chocolate')
  

 and printed in that order. (The replacement process just happens for sorting purposes, the items actually returned are the original ones.) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7076181)
 You just want standard  tuple  comparing, but in reversed mode: 

  >>> sorted(d.items(), key=lambda x: x[::-1])
[('d', 1), ('b', 2), ('c', 2), ('a', 3)]
  



