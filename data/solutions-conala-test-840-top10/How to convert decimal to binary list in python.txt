Query: How to convert decimal to binary list in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13557953)
 You can probably use the builtin  bin  function: 

  bin(8) #'0b1000'
  

 to get the list: 

  [int(x) for x in bin(8)[2:]]
  

 Although it seems like there's probably a better way... 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13558006)
  

  >>> list('{0:0b}'.format(8))
['1', '0', '0', '0']
  

 Edit -- Ooops, you wanted integers: 

  >>> [int(x) for x in list('{0:0b}'.format(8))]
[1, 0, 0, 0]
  

 Another edit -- 

 mgilson's version is a little bit faster: 

  $ python -m timeit "[int(x) for x in list('{0:0b}'.format(8))]"
100000 loops, best of 3: 5.37 usec per loop
$ python -m timeit "[int(x) for x in bin(8)[2:]]"
100000 loops, best of 3: 4.26 usec per loop
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12948519)
 You can simply convert a string to list by  list() . 

  list(bin(10)[2:])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47043333)
  My solution is:  

 
  Convert each IP to  decimal number   
   Sort  and get  ranges (interval)  from the list numbers  
  Convert them to IP format.   
 

    

  ips = [ "52.102.182.2", "52.102.182.4", "52.102.182.1", "52.102.182.5", "52.102.182.3", 
        "27.101.178.17", "27.101.178.16", "27.101.178.15",
        "23.201.165.7", ]
  

  Step 1:   

 IP => Binary => Decimal 

  # Convert ips to binary strings
bins = [''.join([bin(int(i))[2:].zfill(8) for i in ip.split('.')]) for ip in ips]

# Convert binary strings to decimal numbers
numbers = [int(b, 2) for b in bins]
  

 or IP => Decimal 

  # Convert ips to decimal numbers
numbers = [sum((256 ** (3 - k)) * int(n) for k, n in enumerate(ip.split('.'))) for ip in ips]
  

  Step 2:  

  # Sort decimal numbers
numbers.sort()

# Get ranges from decimal numbers
ranges = []
tmp = []
for i in range(len(numbers)):
    tmp.append(numbers[i])
    if (i == len(numbers) - 1) or (numbers[i + 1] > numbers[i] + 1):
        if len(tmp) == 1:
            ranges.append(tmp[0])
        else:
            ranges.append((tmp[0], tmp[-1]))
        tmp = []
  

  Step 3:  

  # Convert dec ranges to ip ranges
def dec_to_ip(n):
    return '.'.join([str(int(n % 256 ** (4 - k) / 256 ** (3 - k))) for k in range(4)])

# Final result
ip_ranges = [(dec_to_ip(r[0]), dec_to_ip(r[1])) if type(r) == tuple else dec_to_ip(r) for r in ranges]
  

  Output:  

  ['23.201.165.7', ('27.101.178.15', '27.101.178.17'), ('52.102.182.1', '52.102.182.5')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2192716)
 You could use http://docs.python.org/library/stdtypes.html#str.zfill instead of  rjust . 

  list(bin(my_num)[2:].zfill(8))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46757426)
 Just collect bits of integer value instead of string-int transformations: (pseudocode) 

  for every row:
    value = 0
    for every col:
        value = (value << 1) | biglist[row][col][0]  # bitwise shift left and OR

   #equivalent  operation:
        value = value * 2 +  biglist[row][col][0]  
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4644000)
 If you want the result as the nearest binary floating point number use  float : 

  result = [float(x.strip(' "')) for x in A1]
  

 If you want the result stored exactly use http://docs.python.org/library/decimal.html instead of  float : 

  from decimal import Decimal
result = [Decimal(x.strip(' "')) for x in A1]
  



