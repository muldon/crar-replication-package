Query: Find maximum value of a column and return the corresponding row values using Pandas
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50105104)
  df[df['Value']==df['Value'].max()]
  

 This will return the entire row with max value 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50251549)
 I think the easiest way to return a row with the maximum value is by getting its index.  argmax()  can be used to return the index of the row with the largest value. 

  index = df.Value.argmax()
  

 Now the index could be used to get the features for that particular row: 

  df.iloc[df.Value.argmax(), 0:2]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48879459)
 Import the  Pandas  Module 

 Define your DataFrame object, say  df , and read the file. 

 In order to print the Country and Place with maximum value, use the following line of code. 

      print(df[['Country', 'Place']][df.Value == df.Value.max()])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15741958)
 Use the  index  attribute of  DataFrame . Note that I don't type all the rows in the example. 

  In [14]: df = data.groupby(['Country','Place'])['Value'].max()

In [15]: df.index
Out[15]: 
MultiIndex
[Spain  Manchester, UK     London    , US     Mchigan   ,        NewYork   ]

In [16]: df.index[0]
Out[16]: ('Spain', 'Manchester')

In [17]: df.index[1]
Out[17]: ('UK', 'London')
  

 You can also get the value by that index: 

  In [21]: for index in df.index:
    print index, df[index]
   ....:      
('Spain', 'Manchester') 512
('UK', 'London') 778
('US', 'Mchigan') 854
('US', 'NewYork') 562
  

 Edit 

 Sorry for misunderstanding what you want, try followings: 

  In [52]: s=data.max()

In [53]: print '%s, %s, %s' % (s['Country'], s['Place'], s['Value'])
US, NewYork, 854
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15742030)
 The country and place is the index of the series, if you don't need the index, you can set  as_index=False : 

  df.groupby(['country','place'], as_index=False)['value'].max()
  

 Edit: 

 It seems that you want the place with max value for every country, following code will do what you want: 

  df.groupby("country").apply(lambda df:df.irow(df.value.argmax()))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53663243)
 If you don't mind returning the first occurence of the maximum (or if maximum will always be unique), use  idxmax  

  df[['a', 'b', 'c']].idxmax(1)
  

  

  0    a
1    c
dtype: object
  

 If you need all occurences of a maximum, use https://stackoverflow.com/a/53663031/3483203 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49169143)
  df.iloc[df['columnX'].argmax()]
  

  argmax()  would provide the index corresponding to the max value for the columnX.  iloc  can be used to get the row of the DataFrame df for this index. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10213167)
 You might also try  idxmax : 

  In [5]: df = pandas.DataFrame(np.random.randn(10,3),columns=['A','B','C'])

In [6]: df
Out[6]: 
          A         B         C
0  2.001289  0.482561  1.579985
1 -0.991646 -0.387835  1.320236
2  0.143826 -1.096889  1.486508
3 -0.193056 -0.499020  1.536540
4 -2.083647 -3.074591  0.175772
5 -0.186138 -1.949731  0.287432
6 -0.480790 -1.771560 -0.930234
7  0.227383 -0.278253  2.102004
8 -0.002592  1.434192 -1.624915
9  0.404911 -2.167599 -0.452900

In [7]: df.idxmax()
Out[7]: 
A    0
B    8
C    7
  

 e.g. 

  In [8]: df.loc[df['A'].idxmax()]
Out[8]: 
A    2.001289
B    0.482561
C    1.579985
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54334817)
  df.groupby('A').apply(lambda x: x.loc[x['B'].idxmax(), 'C'])
#    A
#1    b
#2    d
  

 Use https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.idxmax.html to find the index where  B  is maximal, then select column  C  within that group (using a lambda-function 



