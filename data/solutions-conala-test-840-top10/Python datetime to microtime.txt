Query: Python datetime to microtime
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11639369)
 Use the  http://docs.python.org/library/datetime.html#datetime.datetime.fromtimestamp: 

  >>> import datetime
>>> mt = 1342993416.0
>>> datetime.datetime.fromtimestamp(mt)
datetime.datetime(2012, 7, 22, 23, 43, 36)
  

 then use the http://docs.python.org/library/datetime.html#datetime.datetime.strftime to format the output: 

  >>> start_time_format = '%Y-%m-%d %H:%M:%S'
>>> datetime.datetime.fromtimestamp(mt).strftime(start_time_format)
'2012-07-22 23:43:36'
  

 You can  also  use the http://docs.python.org/library/time.html#time.strftime: 

  >>> import time
>>> time.strftime(start_time_format, time.localtime(mt))
'2012-07-22 23:43:36'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3743240)
 Use the  date()  method: 

  datetime.datetime.now().date()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7238334)
  time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0 
  

 works if you don't want to use  strftime  and  float . 

 It returns the same thing as  time.time()  with  dt = datetime.datetime.now() . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41839508)
 Don't forget to import Datetime 

  import datetime
dt=str(datetime.datetime.now().date())
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3954926)
 You use the  datetime.datetime.date()  method: 

  datetime.datetime.now().date()
  

 Obviously, the expression above can (and should IMHO :) be written as: 

  datetime.date.today()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2460850)
 To convert from a UNIX timestamp to a Python datetime object, use  datetime.fromtimestamp()  (http://docs.python.org/py3k/library/datetime.html#datetime.datetime.fromtimestamp). 

  >>> from datetime import datetime
>>> datetime.fromtimestamp(0)
datetime.datetime(1970, 1, 1, 1, 0)
>>> datetime.fromtimestamp(1268816500)
datetime.datetime(2010, 3, 17, 10, 1, 40)
  

 From Python datetime to UNIX timestamp: 

  >>> import time
>>> time.mktime(datetime(2010, 3, 17, 10, 1, 40).timetuple())
1268816500.0
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8022196)
 Given a  datetime.datetime  object  dt , you could use 

  (dt - datetime.datetime.utcfromtimestamp(0)).total_seconds()
  

 Example: 

  >>> dt = datetime.datetime.now(); t = time.time()
>>> t
1320516581.727343
>>> (dt - datetime.datetime.utcfromtimestamp(0)).total_seconds()
1320516581.727296
  

 Note that the  timedelta.total_seconds()  method was introduced in Python 2.7. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41811725)
 If you want to convert a python datetime to seconds since epoch you should do it explicitly: 

  >>> import datetime
>>> datetime.datetime(2012,04,01,0,0).strftime('%s')
'1333234800'
>>> (datetime.datetime(2012,04,01,0,0) - datetime.datetime(1970,1,1)).total_seconds()
1333238400.0
  

 In Python 3.3+ you can use https://docs.python.org/3/library/datetime.html?highlight=re#datetime.datetime.timestamp instead: 

  >>> import datetime
>>> datetime.datetime(2012,4,1,0,0).timestamp()
1333234800.0
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16673715)
 You can convert a datetime object to a date with the date() method of the date time object, as follows: 

  <datetime_object>.date()
  



