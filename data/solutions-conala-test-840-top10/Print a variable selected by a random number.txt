Query: Print a variable selected by a random number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32595442)
 Create a list with your desired distribution and shuffle it: 

  l = 6*[0] + 4*[1]
random.shuffle(l)
for i in l:
    print(L[i])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30651522)
 Don't assign numbers OR strings. Use a list. 

  choices = ['Arkansas', 'Manchuria', 'Bengal', 'Baja California']   # etc.
  

 Then take a  random.choice  

  random_choice = random.choice(choices)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14915944)
 You can use  random.sample  to pick a random number of item from your list. 

  import random
r = random.sample(s, random.randint(5, 10))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9057570)
 What you need is to use  random.choice(seq)  50 times passing it  colour  list as argument. 

  

   rand_colours = [random.choice(colour) for i in range(50)]
  

  random.choice(seq)  returns randomly selected element from  seq . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30651614)
 Another option is to use a dictionary. 

  my_dict = {1:"Arkansas", 2:"Manchuria", 3:"Bengal",
           4:"Baja California", 5:"Tibet", 6:"Indonesia", 
           7:"Cascade Range", 8:"Hudson Bay", 9:"High Plain"}
map = random.randrange(1, 10)
print(my_dict[map])
  

 Using a list and  random.choice()  is probably the better option (easier to read, less bytes), but if you have to assign numbers, this will work. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26282272)
 Try using a weighted list, like this: 

  import random
my_list = ['A'] * 5 + ['B'] * 5 + ['C'] * 90
random.choice(my_list)
  

 See https://stackoverflow.com/questions/14992521/python-weighted-random. To make it twice as likely that a number from 51 to 100 will be chosen instead a number from 1 to 50, do this: 

  import random

my_list = []

for i in range(1, 100):
    my_list.append(i)
    if i > 50:
        my_list.append(i)

print my_list
print 'Random (sort of) choice: %s' % random.choice(my_list)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28749518)
 Using  random.randrange  to select (and remove) a random element from a list is easy: 

  def pop_random(lst):
    idx = random.randrange(0, len(lst))
    return lst.pop(idx)
  

 Now, assuming that the list has an even number of elements, we can build pairs very easily: 

  pairs = []
while lst:
    rand1 = pop_random(lst)
    rand2 = pop_random(lst)
    pair = rand1, rand2
    pairs.append(pair)
  

 There are 2 steps missing that I'll leave as an exercise for you: 

 
 Make sure the list is unique before you start 
 Make sure the unique list has an even number of elements (and figure out what to do if it doesn't ...) 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43382432)
  def random_no_dups_k_of_n(k, n):
    res = list(range(k))
    for i in range(k, n):
        v = random.randint(0, i) # this is 0-i inclusive
        if v == i:
            ir = random.randint(0,k-1)
            res[ir] = i
    return res
  

 What's happening here:  it's a telescoping product.  Each element from  0  to  k-1  starts out having a  k/k  chance of being selected.  After 1st iteration  k  has  1/(k+1)  chance of getting selected, while  all  others (not just remaining, but all) have a  (k-1)/k * k/(k+1) = (k-1)/(k+1)  chance of getting selected.  After 2nd iteration,  k+1  has a  1/(k+2)  chance of getting selected, while all the others have a  (k-1)/(k+1) * (k+1)/(k+2) = (k-1)/(k+2)  chance of getting selected.  .  In the end, each number will have a  k/n  chance of getting selected. 

 Actually, I just saw that you can just do  random.sample(range(n), k) .  .  

   EDIT  : I got the probabilities reversed above.  The correct version should be:  

  def random_no_dups_k_of_n(k, n):
    res = list(range(k))
    for i in range(k, n):
        v = random.randint(0, i) # this is 0-i inclusive
        if v < k:
            ir = random.randint(0,k-1)
            res[ir] = i
    return res
  

 Each element from  0  to  k-1  starts out having a  k/k  chance of being selected.  After 1st iteration  k  has  k/(k+1)  chance of getting selected, while  all  others (not just remaining, but all) have a  k/k*((k-1)/k * k/(k+1) + 1(k+1) = k/(k+1)  chance of getting selected.  After 2nd iteration,  k+1  has a  k/(k+2)  chance of getting selected, while all the others have a  k/(k+1)*((k-1)/k * k/(k+2) + 2/(k+2))= k/(k+2)  chance of getting selected. 

 And this actually does collapse all the calculations to give each element a  k/(k+m)  chance after  m th step. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/28974499)
 Use an instance of https://docs.python.org/2/library/collections.html#collections.Counter to keep track of your picks: 

  from collections import Counter
import random

options = ['rock', 'paper', 'scissors', 'lizard', 'spock']
picks = Counter()

for i in range(1000):
    pick = random.choice(options)
    picks[pick] += 1

print picks
  

 Example output: 

  Counter({'scissors': 224, 'lizard': 209, 'spock': 192, 'paper': 188, 'rock': 187})
  

 The  collections.Counter  is very similar to a regular dictionary, but it assumes a default value of  0  if a key is not yet present, so you can directly create a new key and increase it with the  +=  operation - ideal for counting. 

 Since it implements the dict interface, you would do 

  picks['rock']
  

 to just retrieve the counts for the  'rock'  choice and use it in your code. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4277526)
 I'm going to assume the probabilities all add up to 1. . 

 First generate a uniform random variable [0, 1] using  random.random() . Then pass through the list, summing the probabilities. The first time the sum exceeds the random number, return the associated number. This way, if the uniform random variable generated falls within the range (0.5, 0.75] in your example, 2 will be returned, thus giving it the required 0.25 probability of being returned. 

  import random
import sys
def pick_random(prob_list):
  r, s = random.random(), 0
  for num in prob_list:
    s += num[1]
    if s >= r:
      return num[0]
  print >> sys.stderr, "Error: shouldn't get here"
  

 Here's a test showing it works: 

  import collections
count = collections.defaultdict(int)
for i in xrange(10000):
  count[pick_random(prob_list)] += 1
for n in count:
  print n, count[n] / 10000.0
  

 which outputs: 

  1 0.498
2 0.25
3 0.0515
4 0.0099
5 0.0899
6 0.1007
  

 EDIT: Just saw the edit in the question. If you want to select two distinct numbers, you can repeat the above until your second number chosen is distinct. But this will be terribly slow if one number has a very high (e.g. 0.99999999) probability associated with it. In this case, you could remove the first number from the list and rescale the probabilities so that they sum to 1 before selecting the second number. 



