Query: How to convert a string to its Base-10 representation?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54716178)
 You'll need one function for converting from int to base (returning a string that represents a number in that base -- here up to base 36): 

  digits = '0123456789abcdefghijklmnopqrstuvwxyz'

def int2base(n, b=2, digits=digits):
    "convert integer n to base b"
    if n < 0:
        raise ValueError("no negative numbers")
    if n < b:
        return digits[n]
    res = []
    q = n
    while q:
        q, r = divmod(q, b)
        res.append(digits[r])
    return ''.join(reversed(res))
  

 and another function for converting back from base to int: 

  def base2int(s, base=2, digits=digits):
    "convert string s representing a number in base to int (base 10)"
    if not (2 <= base <= len(digits)):
        raise ValueError("base must be >= 2 and <= %d" % len(digits))
    res = 0
    for i, v in enumerate(reversed(s)):
        digit = digits.index(v)
        res += digit * (base ** i)
    return res
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10716921)
 Another way: 

  sum(ord(c) << i*8 for i, c in enumerate(mystr))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33610603)
 Just getting all valid numbers in base 6 with up to three digits is trivial, using https://docs.python.org/2/library/itertools.html#itertools.product: 

  >>> import itertools
>>> digits = '012345'
>>> for num in itertools.product(digits, repeat=3):
    s = ''.join(num)
    print s, int(s, 6)


000 0
001 1
002 2
...
553 213
554 214
555 215
  

 https://docs.python.org/2/library/functions.html#int can be used with the optional  base  parameter to convert a given string representing a number in base 6 back to decimal form: 

  >>> int('553', 6)
213
  

 All that leaves for you to write is a function to take an integer and convert it to a string in base 6 representation; Python doesn't have this built in, as it does for e.g. hexadecimal: 

  >>> hex(213)
'0xd5'
  

 Note that  "increment an integer in base 6 format"  or  "[changing] the base in which the operator increments"  makes no sense conceptually - base 6, like binary (base 2), decimal (base 10), octal (base 8), etc. is just a way of  representing  a number. Python always displays integers in decimal form by default, although they will be stored in your computer's memory in binary form.  += 1  is adding one whatever base you're working in. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10716923)
 This is a job for http://docs.python.org/library/struct.html: 

  >>> s = 'YZ'
>>> struct.unpack('>Q', '\x00' * (8 - len(s)) + s)
(22874,)
  

 Or a bit trickier: 

  >>> int(s.encode('hex'), 16)
22874
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44008820)
 If base-n is up to 36, you can use the https://docs.python.org/3/library/functions.html#int  int(str,base) . 

  >>> int('AA', 32)
330
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30642051)
 As a more pythonic way you can first convert your string to byte array then use  bin  function within  map  : 

  >>> st = "hello world"
>>> map(bin,bytearray(st))
['0b1101000', '0b1100101', '0b1101100', '0b1101100', '0b1101111', '0b100000', '0b1110111', '0b1101111', '0b1110010', '0b1101100', '0b1100100']
  

  

  >>> ' '.join(map(bin,bytearray(st)))
'0b1101000 0b1100101 0b1101100 0b1101100 0b1101111 0b100000 0b1110111 0b1101111 0b1110010 0b1101100 0b1100100'
  

 Note that in  python3  you need to specify an encoding for  bytearray  function : 

  >>> ' '.join(map(bin,bytearray(st,'utf8')))
'0b1101000 0b1100101 0b1101100 0b1101100 0b1101111 0b100000 0b1110111 0b1101111 0b1110010 0b1101100 0b1100100'
  

 You can also use  binascii  module in python 2: 

  >>> import binascii
>>> bin(int(binascii.hexlify(st),16))
'0b110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
  

  hexlify  return the hexadecimal representation of the binary data then you can convert to int by specifying 16 as its base then convert it to binary with  bin . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44008791)
 Your  int2base  function only accepts an integer as input, so you need to convert your string to an integer. So, you can simply use the built-in function  int(string, base)  to do this: 

  in_base16 = int2base(number, 16)
back_to_10 = int2base(int(in_base16, 16), 10)
  

 Which works fine. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10716858)
 I don't think there's a built-in method to do this, but it's easy enough to cook up: 

  >>> int("".join([hex(ord(x))[2:] for x in "YZ"]), 16)
22874
  

 This goes via base 16 which can of course be optimized out. I'll leave that "as an exercise". 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2072366)
  int  given base 2 and then  hex : 

  >>> int('010110', 2)
22
>>> hex(int('010110', 2))
'0x16'
>>> 

>>> hex(int('0000010010001101', 2))
'0x48d'
  

 The doc of  int : 

 
  int(x[, base]) -> 

Convert a string or number to an , if possible.  A floating
  
  
   point
      argument will be truncated towards zero (this does not include a string
      representation of a floating point number!)  When converting a string,
  use
      the optional base.  It is an error to supply a base when converting a
      non-string.  If base is zero, the proper base is guessed based on the
      string content.  If the argument is outside the  range a
      long object will be returned instead. 
 

 The doc of  hex : 

 
  hex(number) -> string

Return the hexadecimal representation of an  or long
  
  
   . 
 



