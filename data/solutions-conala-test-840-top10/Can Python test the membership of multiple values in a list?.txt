Query: Can Python test the membership of multiple values in a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6159356)
 Another way to do it: 

  >>> set(['a','b']).issubset( ['b','a','foo','bar'] )
True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42698013)
 For check values use http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing: 

  #get value where index is 1
print (col1[1])
2 
#more common with loc
print (col1.loc[1])
2

print (col1 == '2')
0    False
1     True
2    False
3    False
Name: col1, dtype: bool
  

 And if need get rows: 

  print (col1[col1 == '2'])
1    2
Name: col1, dtype: object
  

 For check multiple values with  or : 

  print (col1.isin(['2', '4']))
0    False
1     True
2    False
3     True
Name: col1, dtype: bool 

print (col1[col1.isin(['2', '4'])])
1    2
3    4
Name: col1, dtype: object
  

 And something about  in  for testing membership http://pandas.pydata.org/pandas-docs/stable/gotchas.html#using-the-in-operator: 

 
   Using the Python in operator on a  Series  tests for membership in the index, not membership among the values. 
  
   If this behavior is surprising, keep in mind that using in on a Python dictionary tests keys, not values, and Series are dict-like. To test for membership in the values, use the method  isin() : 
  
   For DataFrames, likewise, in applies to the column axis, testing for membership in the list of column names. 
 

  #1 is in index
print (1 in col1)
True

#5 is not in index
print (5 in col1)
False

#string 2 is not in index
print ('2' in col1)
False

#number 2 is in index
print (2 in col1)
True
  

 You try to find string  2  in index values: 

  print (col1[1])
2

print (type(col1[1]))
<class 'str'>

print (col1[1] in col1)
False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6159334)
 The Python parser evaluated that statement as a tuple, where the first value was  'a' , and the second value is the expression  'b' in ['b', 'a', 'foo', 'bar']  (which evaluates to  True ). 

 You can write a simple function do do what you want, though: 

  def all_in(candidates, sequence):
    for element in candidates:
        if element not in sequence:
            return False
    return True
  

 And call it like: 

  >>> all_in(('a', 'b'), ['b', 'a', 'foo', 'bar'])
True
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6159331)
 I'm pretty sure  in  is having higher precedence than  ,  so your statement is being interpreted as 'a', ('b' in ['b' ...]), which then evaluates to 'a',True since 'b' is in the array. 

 See previous answer for how to do what you want. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47335436)
  [x for x in ['a','b'] if x in ['b', 'a', 'foo', 'bar']]
  

 The reason I think this is better than the chosen answer is that you really don't need to call the 'all()' function. Empty list evaluates to False in IF statements, non-empty list evaluates to True.  

  if [x for x in ['a','b'] if x in ['b', 'a', 'foo', 'bar']]:
    ...Do something...
  

 Example: 

  >>> [x for x in ['a','b'] if x in ['b', 'a', 'foo', 'bar']]
['a', 'b']
>>> [x for x in ['G','F'] if x in ['b', 'a', 'foo', 'bar']]
[]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41998101)
 I would say we can even leave those square brackets out.  

      array = ['b', 'a', 'foo', 'bar']
    all([i in array for i in 'a', 'b'])
  

 ps: I'd add this as a comment, but I don't have enough rep for that. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33744032)
 You need to use http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html to test for membership of your  criteriaList : 

  In [1]: myArray["ZoneName"] in criteriaList
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-1-ff2173ff4348> in <module>()
----> 1 myArray["ZoneName"] in criteriaList

ValueError: The truth value of an array with more than one element is ambiguous.
Use a.any() or a.all()

In [2]: np.in1d(myArray["ZoneName"], criteriaList)
Out[2]: array([False,  True,  True,  True,  True], dtype=bool)

In [3]: myArray[(myArray["Flag1"] == 1) &
   ....:        (myArray["Flag2"] == 1) &
   ....:        np.in1d(myArray["ZoneName"], criteriaList)]["Value"].sum()
Out[3]: 31.344999999999999
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34827736)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html to test for membership of a list of values and negate  ~  the boolean mask: 

  In [3]:
vals = ['bird','cat','foo']

df[~df['column2'].isin(vals)]
Out[3]:
   column1 column2
1        2     bar
2        3     dog
5        6     bar
9       10     bar

In [4]:
df['column2'].isin(vals)

Out[4]:
0     True
1    False
2    False
3     True
4     True
5    False
6     True
7     True
8     True
9    False
Name: column2, dtype: bool
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32296626)
 You could have Python do the looping in C code by using a https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects; this does a membership test against all values without creating a new list: 

  if None not in d.viewvalues():
  

 In Python 3,  dict.values()  returns a dictionary view too. 

 Demo on Python 2: 

  >>> d = {'a': None, 'c': None, 'b': '12345'}
>>> None not in d.viewvalues()
False
  

 This will loop over the values until a match is found, just like list membership or a proper  any()  test, making this an O(N) test. This differs from a dictionary or set membership test, where hashing can be used to give you a fixed cost test on average. 

 You were not using  any()  properly; drop the  [...]  brackets: 

  if any(v is not None for v in d.itervalues()):  # Python 3: use d.values()
  

 If your goal is to test for certain values,  and  you need to avoid constant looping for each test, consider creating an inverse index instead: 

  inverse_index = {}
for key, value in d.items():
    inverse.setdefault(value, set()).add(key)
  

 This requires the values to be hashable, however. You can now simply test for each value: 

  if None not in inverse_index:
  

 in O(1) time. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52771688)
 You should use  any  and  all  with generator expressions to test multiple values for membership: 

  if any(k in comment.body for k in (keyphrase, keyphrase2)) and all(k not in comment.body for k in ("Proof", "proof", "roof", "Roof", "woof", "Woof")):
  



