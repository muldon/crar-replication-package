Query: Python initializing a list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17099145)
 Doing   [[0.0] * 10] * 10 actually creates multiple copies of the same list so modifying one will affect all of them: 

  >>> test = [[0.0] * 10] * 10
>>> [id(x) for x in test]     #see all IDs are same
[3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L]
  

  

  >>> test = [[0.0]*10 for _ in xrange(10)]
>>> test[0][0] = 1.0
>>> test
[[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  

 Integers/floats are immutable, while lists are mutable: 

  >>> x = y = []
>>> x is y       # Both point to the same object
True 
>>> x.append(1)  # list.extend modifies a list in-place
>>> x,y          # both references to [] can see the modification
([1], [1])
>>> x = y = 1
>>> x is y      #both points to the same object
True
>>> x+=1        # only x gets modified, it now points to a new object 2
>>> x,y         # y still points to the same object 1
(2, 1)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/23822348)
  edgelist = []
  

 It means that  edgelist  is an empty list. So,  edgelist[0]  will not be able to get anything. That is why it is throwing that error.  

  edgelist.append([every_list[0], every_list[temp]])
  

 This will create a two element list with  every_list[0]  and  every_list[temp]  and add that list to  edgelist . So,  edgelist  becomes a list of lists or a 2-D list. 

 Also, if  req_data  already has two element lists, then you can simply do 

  for every_list in req_data:
    edgelist.append(every_list[:])
  

 This will create copies of elements in  req_data  and add it directly to  edgelist . Its better to use list comprehension, like this 

  edgelist = [every_list[:] for every_list in req_data]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3009297)
 Another is to extend the list class: 

  import copy
class mlist(list):
  def __mul__(self, n):
    res = mlist()
    for _ in xrange(n):
      for l in self:
    res.append(copy.deepcopy(l))
  return res
  

  

  >>> hey = mlist([mlist([0])])
>>> hey
[[0]]
>>> hey * 4
[[0], [0], [0], [0]]
>>> blah = hey * 4
>>> blah[0][0] = 9
>>> blah
[[9], [0], [0], [0]]
  

 but initializing the  mlist  is annoying. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13772007)
  

  [True] * 5000
  

 Lists can be multiplied in Python (as can strings): 

  >>> [True] * 3
[True, True, True]
>>> "abc" * 3
'abcabcabc'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20734498)
 If you want (or simply are okay with) a list of references to the same object, list multiplication is what you want: 

  x = ['left'] * 7
  

 If you need separate objects, e.g. if you're initializing a list of lists, you want a list comprehension: 

  x = [[] for _ in xrange(7)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12791510)
 The problem is that they're all the same exact list in memory. When you use the  [x]*n  syntax, what you get is a list of  n  many  x  objects, but they're all references to the same object. They're not distinct instances, rather, just  n  references to the same instance. 

 To make a list of 3 different lists, do this: 

  x = [[] for i in range(3)]
  

 This gives you 3 separate instances of  [] , which is what you want 

  [[]]*n  is similar to 

  l = []
x = []
for i in range(n):
    x.append(l)
  

 While  [[] for i in range(3)]  is similar to: 

  x = []
for i in range(n):
    x.append([])   # appending a new list!
  

 

  In [20]: x = [[]] * 4

In [21]: [id(i) for i in x]
Out[21]: [164363948, 164363948, 164363948, 164363948] # same id()'s for each list,i.e same object


In [22]: x=[[] for i in range(4)]

In [23]: [id(i) for i in x]
Out[23]: [164382060, 164364140, 164363628, 164381292] #different id(), i.e unique objects this time
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29806307)
 
   I am looking for a way to dynamically create the list of lists and then append to various lists later. 
 

 You could try initializing a list like  

  lists = [[] for _ in xrange(3)]
  

 Now when assigning elements, you simply do: 

  lists[0].append(value)
lists[2].append(value2)
  

 which will add the value to the first sublist within lists, value2 to the third sublist and so on.. 

 

 You can use an approach with dict also. 

  >>> data = {'list%i' % i : [] for i in range(4)}
>>> data
{'list0': [], 'list1': [], 'list2': [], 'list3': []}
  

 So you could append items in list this way 

  >>> data['list1'].append(1)
>>> data
{'list0': [], 'list1': [1], 'list2': [], 'list3': []}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17096444)
  

  In [38]: import copy

In [39]: a = [[1,2,3],[4,5,6],[7,8,9]]

In [40]: b=copy.deepcopy(a)

In [41]: b[1][1] = 100

In [42]: a
Out[42]: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

In [43]: b
Out[43]: [[1, 2, 3], [4, 100, 6], [7, 8, 9]]
  

 Read more @ http://docs.python.org/2/library/copy.html 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20773950)
 With  a  you are effectively creating a list and displaying the  same list  3 times. 
Each of those 3 lists in  a  is like a  reference  to the same list in memory. 
So when you change any of the lists in  a  you change all of them, as they are the same list. 

 With  c , you are creating 3 different lists explicitly. 
Changing one will not change the others. 
Hence the behaviour you are seeing. 



