Query: Python - use list as function parameters
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4979579)
 You want the http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists operator *. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4979555)
 Use an asterisk: 

  some_func(*params)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43801092)
 Use  *  operator 

  list = [1, 2, 3, n]
foo(*list) # Function with n arguments
  

 For example: 

  def foo(one, two):
    print(one, two)


list_1 = [1, 2]
list_2 = [1, ]

# Call with list_* variable
foo(*list_1) # Print 1, 2
foo(*list_2) # TypeError, but requiere more arguments.
  

 For solve  TypeError , can use  *args  for has dynamic arguments in your function 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4979569)
 You can do this using the splat operator: 

  some_func(*params)
  

 This causes the function to receive each list item as a separate parameter. There's a description here: http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/648689)
 Use the inspect module. 

  >>> import inspect
>>> inspect.getargspec(func)
(['a', 'b', 'c'], None, None, None)
  

 The first part of returned tuple is what you're looking for. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/582097)
  locals()  (docs for https://docs.python.org/2.7/library/functions.html#locals, https://docs.python.org/3/library/functions.html#locals) returns a dictionary with local names: 

  def func(a,b,c):
    print locals().keys()
  

 prints the list of parameters. If you use other local variables those will be included in this list. But you could make a copy at the beginning of your function. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46196084)
 You could use https://docs.python.org/2/library/inspect.html#inspect.getargspec (I assume you use Python 2, you shouldn't use that function in Python 3 because it has been deprecated) to find out which argument names a function has and build a new dictionary based on those: 

  import inspect

def foo(data, functions_list, **kwargs):
    for func_i in functions_list:
        newkwargs = {name: kwargs[name] 
                     for name in inspect.getargspec(func_i).args 
                     if name in kwargs}
        print(func_i(data, **newkwargs))

def func_1(data, par_1):
    return data, par_1

def func_2(data, par_2_0, par_2_1):
    return data, par_2_0, par_2_1

>>> data = 10
>>> foo(data, [func_1, func_2], par_1='some_par', par_2_0=5, par_2_1=11)
(10, 'some_par')
(10, 5, 11)
  

 But a better way would be to simply associate parameters with functions that doesn't rely on introspection. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29400252)
  some_list = ["some", "values", "in", "a", "list", ]
func(*some_list)
  

 This is equivalent to: 

  func("some", "values", "in", "a", "list")
  

 The fixed  x  param might warrant a thought: 

  func(5, *some_list)
  

 ... is equivalent to: 

  func(5, "some", "values", "in", "a", "list")
  

 If you don't specify value for  x  ( 5  in the example above), then first value of  some_list  will get passed to  func  as  x  param. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8403037)
 I'm pretty sure I don't understand the question or how what you posted as your 'best solution' meets the requirements, but working just from: 

 
   I have a function with many input parameters, and I need a function
  that will return a list of parameter names (not values) for each
  parameter whose value is '' or None 
 

 Here's an easy way to do what that line seems to ask for: 

  def validate_parameters(args):
    unset = []
    for k in args:
        if args[k] is None or args[k]=="":
            unset.append(k)
    return unset
  

 and then just call validate_parameters from the  first  line of a function: 

  def foo(a, b, c):
    print "Unset:", validate_parameters(locals())

>>> foo(1, None, 3)
Unset: ['b']
>>> foo(1, None, "")
Unset: ['c', 'b']
  

 If it wasn't for the Python 2.2 requirement you could do it all in a single line list comprehension. The important thing is that you have to call it from the very first line of the function to ensure that  locals()  only picks up parameters and not any other local variables. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/29400211)
 Pass the values as comma separated values 

  >>> def func(x, *p):           # p is stored as tuple
...     print "x =",x
...     for i in p:
...         print i
...     return p
... 
>>> print func(1,2,3,4)        # x value 1, p takes the rest
x = 1
2
3
4
(2,3,4)                        # returns p as a tuple
  

 You can learn more by reading the https://docs.python.org/2.7/tutorial/controlflow.html#arbitrary-argument-lists 



