Query: sorting list of tuples by arbitrary key
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3218309)
 Sort and itemgetter is the fastest. 

  >>> import operator
>>> import timeit

>>> mylist = [["quux", 1, "a"], ["bar", 0, "b"]]
>>> t1 = timeit.Timer(lambda: mylist.sort(key=lambda x: x[1]))
>>> t1.timeit()
1.6330803055632404

>>> t2 = timeit.Timer(lambda: mylist.sort(key=operator.itemgetter(1)))
>>> t2.timeit()
1.3985503043467773

>>> t3 = timeit.Timer(lambda: sorted(mylist, key=operator.itemgetter(1)))
>>> t3.timeit()
2.6329514733833292

>>> t4 = timeit.Timer(lambda: sorted(mylist, key=lambda x: x[1]))
>>> t4.timeit()
2.9197154810598533
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3216412)
 The answer is to use "sorted", i.e. 

  sorted(mylist, key=lambda x: x[1])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3216416)
 You have two options, very close to what you described, actually: 

  mylist.sort(key=lambda x: x[1]) # In place sort
new_list = sorted(mylist, key=lambda x: x[1])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3216507)
 This is such a common need that support for it has been added to the standard library, in the form of http://docs.python.org/library/operator.html#operator.itemgetter: 

  from operator import itemgetter
mylist = [["quux", 1, "a"], ["bar", 0, "b"]]
mylist.sort(key=itemgetter(1)) # or sorted(mylist, key=...)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3216418)
  

  >>> mylist = [["quux", 1, "a"], ["bar", 0, "b"]]
>>> mylist.sort(key=lambda x: x[1])
>>> print mylist
  

  

  [['bar', 0, 'b'], ['quux', 1, 'a']]
  

 That will sort mylist in place.   

 [this para edited thanks to @Daniel's correction.]   sorted  will return a new list that is sorted rather than actually changing the input, as described in http://wiki.python.org/moin/HowTo/Sorting/. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11848830)
 Give the  sort()  method a  key  function: 

  >>> my_list = [(1, 2), (3, 4), (2, 1), (3, 2)]
>>> my_list.sort(key=lambda x: x[1])
>>> my_list
[(2, 1), (1, 2), (3, 2), (3, 4)]
>>> 
  

 If you need to get a sorted list, instead of sorting  in place , use the built_in https://docs.python.org/2/library/functions.html#sorted 

  >>> sorted(my_list, key=lambda x: x[1])
[(2, 1), (1, 2), (3, 2), (3, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11848868)
 There is no premade function for doing this, but it can be done fairly easily using http://wiki.python.org/moin/HowTo/Sorting/#Operator_Module_Functions as the key function for sorting. As the code example shows, you can use 

  from operator import itemgetter

tuple_list.sort(key=itemgetter(1))
  

 This will sort by the index 1 elements in the tuples. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3689882)
 I'll give you an even more generalized answer: 

  from itertools import chain
sorted( chain.from_iterable( myList ) )
  

 which can sort not only what you've asked for but also any list of arbitrary length tuples. 



