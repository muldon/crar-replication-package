Query: Get date from ISO week number in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28069361)
 You can get the week number directly from datetime as string. 

  >>> import datetime
>>> datetime.date(2010, 6, 16).strftime("%V")
'24'
  

 Also you can get diferent "types" of the week number of the year changing the strftime parameter for: 

 
   %U - week number of the current year, starting with the first Sunday
  as the first day of the first week. 
  
   %V - The ISO 8601 week number of the current year (01 to 53), where
  week 1 is the first week that has at least 4 days in the current year,
  and with Monday as the first day of the week. 
  
   %W - week number of the current year, starting with the first Monday
  as the first day of the first week. 
 

 I've got it from http://www.tutorialspoint.com/python/time_strftime.htm. It worked for me in Python 2.7.6 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27677079)
 Per https://stackoverflow.com/questions/27675323/get-month-by-week-day-and-year/27675687#comment43765588_27675323: 

  import datetime as DT

def getmonth(day, week, year):
    for month in range(1, 13):
        try:
            date = DT.datetime(year, month, day)
        except ValueError:
            continue
        iso_year, iso_weeknum, iso_weekday = date.isocalendar()
        if iso_weeknum == week:
            return date.month

print(getmonth(28, 52, 2014))
# 12

print(getmonth(13, 42, 2014))
# 10

print(getmonth(6, 2, 2015))
# 1
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32638267)
 If you are only using the isocalendar week number across the board the following should be sufficient: 

  import datetime
week = date(year=2014, month=1, day=1).isocalendar()[1]
  

 This retrieves the second member of the tuple returned by isocalendar for our week number. 

 However, if you are going to be using date functions that deal in the Gregorian calendar, isocalendar alone will not work!  Take the following example: 

  import datetime
date = datetime.datetime.strptime("2014-1-1", "%Y-%W-%w")
week = date.isocalendar()[1]
  

 The string here says to return the Monday of the first week in 2014 as our date.  When we use isocalendar to retrieve the week number here, we would expect to get the same week number back, but we don't.  Instead we get a week number of 2.   

 Week 1 in the Gregorian calendar is the first week containing a Monday.  Week 1 in the isocalendar is the first week containing a Thursday.  The partial week at the beginning of 2014 contains a Thursday, so this is week 1 by the isocalendar, and making  date  week 2. 

 If we want to get the Gregorian week, we will need to convert from the isocalendar to the Gregorian.  Here is a simple function that does the trick. 

  import datetime

def gregorian_week(date):
    # The isocalendar week for this date
    iso_week = date.isocalendar()[1]

    # The baseline Gregorian date for the beginning of our date's year
    base_greg = datetime.datetime.strptime('%d-1-1' % date.year, "%Y-%W-%w")

    # If the isocalendar week for this date is not 1, we need to 
    # decrement the iso_week by 1 to get the Gregorian week number
    return iso_week if base_greg.isocalendar()[1] == 1 else iso_week - 1
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54033252)
 To complete the other answers - if you are using  ISO  week numbers, this string is appropriate (to get the Monday of a given ISO week number): 

  import datetime
d = '2013-W26'
datetime.datetime.strptime(d + '-1', '%G-W%V-%u')
print(r)
  

  %G ,  %V ,  %u  are ISO equivalents of  %Y ,  %W ,  %w , so this outputs: 

  2013-06-24 00:00:00
  

 Availabe in Python 3.6+; from https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44906380)
  

  >>> import datetime
>>> june1 = datetime.datetime(2017,6,1)
>>> june1
datetime.datetime(2017, 6, 1, 0, 0)
>>> june1_weekday = june1.weekday()
>>> if june1_weekday < 6:  # 6 indicates Sunday
        first_sunday_in_june = june1 + datetime.timedelta(days=6-june1_weekday)
else:
        first_sunday_in_june = june1


>>> print(first_sunday_in_june)
2017-06-04 00:00:00
  

 Assuming you want ISO weeknumbers, you can then use the  isocalendar()  method. This gives a tuple  (year, weeknumber, weekday) . This uses the convention that weeks start with Monday, and the first week of the year is the first week with at least four days in the year (or in other words, the week with the first Thursday). 

  >>> first_sunday_in_june.isocalendar()
(2017, 22, 7)
  

 If you have another convention for first-day-of-the-week or first-week-of-the-year, you will have to brew your own function to get the week number. 

 Use the above method in a loop over the months, and you can create the desired list with week numbers. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44911098)
 I've done a loop through the months, then got the first Sunday (starting at month's 1<sup>st</sup> and moving to the next day until a Sunday is found), then got the week-of-year of the date found: 

  from datetime import datetime
from datetime import date

# dayofweek: Sunday=0, Monday=1 and so on
def get_week_number(year=2017, dayofweek=0):
    weeks = []

    for month in range(1, 13):
        # get first Sunday of month
        d = date(year, month, 1)
        while(d.weekday() != dayofweek):
            d = d.replace(day=d.day + 1)

        # isocalendar()[1] is the week-of-year field
        weeks.append(d.isocalendar()[1])

    return weeks

print(get_week_number(2017, 0))
  

 The result, though, is different from what you expect: 

  [1, 6, 10, 14, 18, 23, 27, 32, 36, 40, 45, 49]
  

 I also tried with  weeks.append(int(d.strftime("%W")))  but it gives the same results - I'm using Python 3.5.2 and https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar: 

 
   The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year. 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21140406)
 You are doing nothing wrong,  2013/12/30  falls in week 1 of 2014, according to the http://en.wikipedia.org/wiki/ISO_week_date: 

 
   The ISO 8601 definition for week 01 is the week with the year's first Thursday in it. 
 

 The Thursday in that week is 2014/01/02. 

 Other ways to explain the definition, from the same linked WikiPedia article: 

 
   
   It is the first week with a majority (four or more) of its days in January (ISO weeks start on Monday) 
   Its first day is the Monday nearest to 1 January. 
   It has 4 January in it. Hence the earliest possible dates are 29 December through 4 January, the latest 4 through 10 January. 
   It has the year's first working day in it, if Saturdays, Sundays and 1 January are not working days. 
   
 

 If you were looking for the last week number of a given year (52 or 53, depending on the year), I'd use December 28th, which is always guaranteed to be in the last week (because January 4th is always part of the  first  week of the next year): 

  def lastweeknumber(year):
    return datetime.date(year, 12, 28).isocalendar()[1]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35891060)
 As of Python 3.6, you can use the new  %G ,  %u  and  %V  directives. See http://bugs.python.org/issue12006 and the https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior: 

 
    %G  
  ISO 8601 year with century representing the year that contains the greater part of the ISO week ( %V ). 
  
    %u  
  ISO 8601 weekday as a decimal number where 1 is Monday. 
  
    %V  
  ISO 8601 week as a decimal number with Monday as the first day of the week. Week 01 is the week containing Jan 4. 
 

 Given a string with year, weeknumber and weekday number, it is easy to parse those out to a date with: 

  from datetime import datetime

datetime.strptime('2002 01 1', '%G %V %u').date()
  

  

  from datetime import datetime

def date_from_isoweek(iso_year, iso_weeknumber, iso_weekday):
    return datetime.strptime(
        '{:04d} {:02d} {:d}'.format(iso_year, iso_weeknumber, iso_weekday),
        '%G %V %u').date()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43523853)
 Since django 1.11, you can do: 

  Entry.objects.filter(created_at__week=current_week)
  

 It will give you the week from monday to sunday, according to ISO-8601. 

 To query for the current week:  

  from datetime import date
current_week = date.today().isocalendar()[1] 
  

 isocalendar() will return a tuple with 3 items: (ISO year, ISO week number, ISO weekday). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2600878)
 I believe  date.isocalendar()  is going to be the answer. http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm explains the math behind ISO 8601 Calendar. Check out the date.isocalendar() portion of the http://docs.python.org/library/datetime.html#datetime.date.isocalendar of the Python documentation. 

  >>> dt = datetime.date(2010, 6, 16) 
>>> wk = dt.isocalendar()[1]
24
  

 .isocalendar() return a 3-tuple with (year, wk num, wk day).  dt.isocalendar()[0]  returns the year, dt.isocalendar()[1]  returns the week number,  dt.isocalendar()[2]  returns the week day. . 



