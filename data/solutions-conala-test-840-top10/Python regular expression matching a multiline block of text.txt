Query: Python regular expression matching a multiline block of text
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52347904)
 The following is a regular expression matching a multiline block of text: 

  import re
result = re.findall('(startText)(.+)((?:\n.+)+)(endText)',input)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/587389)
  

  ^>([^\n\r]+)[\n\r]([A-Z\n\r]+)
  

 \1 = some_varying_text  

 \2 = lines of all CAPS 

  Edit (proof that this works):  

  text = """> some_Varying_TEXT

DSJFKDAFJKDAFJDSAKFJADSFLKDLAFKDSAF
GATACAACATAGGATACA
GGGGGAAAAAAAATTTTTTTTT
CCCCAAAA

> some_Varying_TEXT2

DJASDFHKJFHKSDHF
HHASGDFTERYTERE
GAGAGAGAGAG
PPPPPAAAAAAAAAAAAAAAP
"""

import re

regex = re.compile(r'^>([^\n\r]+)[\n\r]([A-Z\n\r]+)', re.MULTILINE)
matches = [m.groups() for m in regex.finditer(text)]

for m in matches:
    print 'Name: %s\nSequence:%s' % (m[0], m[1])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/587825)
 If each file only has one sequence of aminoacids, I wouldn't use regular expressions at all.   

  def read_amino_acid_sequence(path):
    with open(path) as sequence_file:
        title = sequence_file.readline() # read 1st line
        aminoacid_sequence = sequence_file.read() # read the rest

    # some cleanup, if necessary
    title = title.strip() # remove trailing white spaces and newline
    aminoacid_sequence = aminoacid_sequence.replace(" ","").replace("\n","")
    return title, aminoacid_sequence
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34138381)
 Your negative lookahead needs to have ending anchor  $  and outside the lookahead you should have matching pattern before  $ : 

  print re.findall(r"\w+-\s+[^\n]+$).+$", text, re.MULTILINE)
['hello bye']
  

 Or little simplified: 

  print re.findall(r"\w+-\s+.+$).+", text, re.MULTILINE)
['hello bye']
  

  \w+-\s+[^\n]+)$  will only match an  empty line  as it will match end anchor  $  after start anchor  ^  (middle section being lookahead). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/587620)
  

  re.compile(r"^(.+)\n((?:\n.+)+)", re.MULTILINE)
  

 I think your biggest problem is that you're expecting the  ^  and  $  anchors to match linefeeds, but they don't.  In multiline mode,  ^  matches the position immediately  following  a newline and  $  matches the position immediately  preceding  a newline. 

 Be aware, too, that a newline can consist of a linefeed (\n), a carriage-return (\r), or a carriage-return+linefeed (\r\n).  If you aren't certain that your target text uses only linefeeds, you should use this more inclusive version of the regex: 

  re.compile(r"^(.+)(?:\n|\r\n?)((?:(?:\n|\r\n?).+)+)", re.MULTILINE)
  

 BTW, you don't want to use the DOTALL modifier here; you're relying on the fact that the dot matches everything  except  newlines. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54258123)
 You have to use \ for all regex reserved symbols -->  [\^$. . The final code will be: 

  import re
text = "partition by range(CANE) uno"
s = re.compile("^partition by range\(.*\)",re.MULTILINE)
replace = re.sub(s, 'THIS IS TEST', text)
print(replace)
  

 The result is: 

  THIS IS TEST uno
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54258804)
 If you have your text spanning across multiple lines something like this, 

  some text.......
partition by range (STRT_DTTM)
some more text......
);
  

 Then you will have to use  (?s)  modifier to enable  .  matching a new line. 

  https://regex101.com/r/0iC37n/2  

 Sample python codes, 

  import re

s = '''some text.......
partition by range (STRT_DTTM)
some more text......
);'''

mods = re.sub(r'(?s)partition by range(.*?)\);','THIS IS TEST',s)
print(mods)
  

 Prints, 

  some text.......
THIS IS TEST
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4697884)
 Use  re.findall  or  re.finditer  instead. 

 http://docs.python.org/library/re.html#re.findall returns a list of matching strings. 

 http://docs.python.org/library/re.html#re.finditer returns an iterator over http://docs.python.org/library/re.html#re.MatchObject objects. 

  Example:  

  re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']
  



