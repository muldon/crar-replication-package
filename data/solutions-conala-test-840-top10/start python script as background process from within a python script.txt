Query: start python script as background process from within a python script
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3595867)
  

  import subprocess
from multiprocessing import Process

Process(target=subprocess.call, args=(('ls', '-l', ), )).start()
  

 It's not all that elegant, but it fulfils all your requirements. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3595852)
  

  subprocess.Popen(["background-process", "arguments"])
  

 If you want to check later whether the background process completed its job, retain a reference to the Popen object and use it's  poll()  method. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32628540)
 To run the Python script inline within the same interpreter you can use  execfile : 

 https://docs.python.org/2/library/functions.html#execfile 

 Python 3 equivalent: 

 https://stackoverflow.com/questions/436198/what-is-an-alternative-to-execfile-in-python-3-0 

 To start a script as a background service it is best to use external tool like Linux's  systemd  or http://supervisord.org/ for this purpose. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8726745)
  """H1"""
from multiprocessing import Process, Pipe
import sys

def P1(conn):
    print 'P1: some short lived work'
    sys.stdout.flush()
    conn.send('work done')
    # wait for shutdown command...
    conn.recv()
    conn.close()
    print 'P1: shutting down'

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=P1, args=(child_conn,))
    p.start()
    print parent_conn.recv()
    print 'H1: some other IO bound task'
    parent_conn.send("game over")
    p.join()
  

 Output: 

  P1: some short lived work
work done
H1: some other IO bound task
P1: shutting down
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5975185)
  Update : To properly daemonize your process, use https://daemonize.readthedocs.io/. 

  Original answer : Since the shell is waiting for your process to finish, the main process must terminate.  You can use  os.fork()  to fork off a child process and  sys.exit()  from the parent process: 

  import os
import sys

if os.fork():
    sys.exit()
# Child code goes here
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3595764)
 There is a nice writeup of the various pieces/parts on how to do it at https://stackoverflow.com/questions/89228/how-to-call-external-command-in-python/92395 (per @lecodesportif).  

 The gist of a quick answer is: 

  retcode = subprocess.call(["ls", "-l"])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8711418)
 Yes, start the process with : 

  p=subprocess.Popen([list for the script to execute], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
  

 You can then read from  p.stdout  and  p.stderr  to watch for your sentinel and write to  p.stdin  to send messages to the child process.  If you are running on a posix system, you might consider using pexpect instead; it doesn't support MS Windows, but it handles communicating with child processes better than subprocess. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49644672)
  Calling an external command in Python  

 A simple way to call an external command is using  os.system(...) . And this function returns the exit value of the command. But the drawback is we won't get stdout and stderr. 

  ret = os.system('some_cmd.sh')
if ret != 0 :
    print 'some_cmd.sh execution returned failure'
  

  Calling an external command in Python in background  

  subprocess.Popen  provides more flexibility for running an external command rather than using  os.system . We can start a command in the background and wait for it to finish. And after that we can get the stdout and stderr. 

  proc = subprocess.Popen(["./some_cmd.sh"], stdout=subprocess.PIPE)
print 'waiting for ' + str(proc.pid)
proc.wait()
print 'some_cmd.sh execution finished'
(out, err) = proc.communicate()
print 'some_cmd.sh output : ' + out
  

  Calling a long running external command in Python in the background and stop after some time  

 We can even start a long running process in the background using  subprocess.Popen  and kill it after sometime once its task is done. 

  proc = subprocess.Popen(["./some_long_run_cmd.sh"], stdout=subprocess.PIPE)
# Do something else
# Now some_long_run_cmd.sh exeuction is no longer needed, so kill it
os.system('kill -15 ' + str(proc.pid))
print 'Output : ' proc.communicate()[0]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/28463168)
 A slight modification to User's code above: 

  import threading
try: 
  from http.server import HTTPServer, BaseHTTPRequestHandler # Python 3
except ImportError: 
  import SimpleHTTPServer
  from BaseHTTPServer import HTTPServer # Python 2
  from SimpleHTTPServer import SimpleHTTPRequestHandler as BaseHTTPRequestHandler
server = HTTPServer(('localhost', 0), BaseHTTPRequestHandler)
thread = threading.Thread(target = server.serve_forever)
thread.deamon = True
def up():
  thread.start()
  print('starting server on port {}'.format(server.server_port))
def down():
  server.shutdown()
  print('stopping server on port {}'.format(server.server_port))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/19574155)
  

  import threading

try: 
    from http.server import HTTPServer, SimpleHTTPRequestHandler # Python 3
except ImportError: 
    from SimpleHTTPServer import BaseHTTPServer
    HTTPServer = BaseHTTPServer.HTTPServer
    from SimpleHTTPServer import SimpleHTTPRequestHandler # Python 2

server = HTTPServer(('localhost', 0), SimpleHTTPRequestHandler)
thread = threading.Thread(target = server.serve_forever)
thread.daemon = True
thread.start()

def fin():
    server.shutdown()

print('server running on port {}'.format(server.server_port))

# here is your program
  

 If you call  fin  in your program, then the server shuts down. 



