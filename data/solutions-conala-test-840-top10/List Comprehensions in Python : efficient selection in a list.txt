Query: List Comprehensions in Python : efficient selection in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/352735)
 I'd recommend you start by looking at section 3.4.2 of Donald Knuth's https://rads.stackoverflow.com/amzn/click/com/0201896842.  

 If your arrays are large, there are more efficient algorithms in chapter 3 of https://rads.stackoverflow.com/amzn/click/com/0198522029 by John Dagpunar.  If your arrays are not terribly large or you're not concerned with squeezing out as much efficiency as possible, the simpler algorithms in Knuth are probably fine. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1222720)
 Don't use a list comprehension; a normal for loop is fine here. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16833376)
 Use nested loops: 

  [('{}:{:02}'.format(h, q), '{:02}:{:02}'.format(h, q)) for h in range(11) for q in (0, 15, 30, 45)]
  

 List comprehensions work just like nested for loops; if you can work out the sequence as a series of nested loop, you can put it in a list comp: 

  res = []
for hour in range(11):
    for quarter in (0, 15, 30, 45):
        res.append(('{}:{:02}'.format(hour, quarter), '{:02}:{:02}'.format(hour, quarter)))
  

  

  >>> [('{}:{:02}'.format(h, q), '{:02}:{:02}'.format(h, q)) for h in range(11) for q in (0, 15, 30, 45)]
[('0:00', '00:00'), ('0:15', '00:15'), ('0:30', '00:30'), ('0:45', '00:45'), ('1:00', '01:00'), ('1:15', '01:15'), ('1:30', '01:30'), ('1:45', '01:45'), ('2:00', '02:00'), ('2:15', '02:15'), ('2:30', '02:30'), ('2:45', '02:45'), ('3:00', '03:00'), ('3:15', '03:15'), ('3:30', '03:30'), ('3:45', '03:45'), ('4:00', '04:00'), ('4:15', '04:15'), ('4:30', '04:30'), ('4:45', '04:45'), ('5:00', '05:00'), ('5:15', '05:15'), ('5:30', '05:30'), ('5:45', '05:45'), ('6:00', '06:00'), ('6:15', '06:15'), ('6:30', '06:30'), ('6:45', '06:45'), ('7:00', '07:00'), ('7:15', '07:15'), ('7:30', '07:30'), ('7:45', '07:45'), ('8:00', '08:00'), ('8:15', '08:15'), ('8:30', '08:30'), ('8:45', '08:45'), ('9:00', '09:00'), ('9:15', '09:15'), ('9:30', '09:30'), ('9:45', '09:45'), ('10:00', '10:00'), ('10:15', '10:15'), ('10:30', '10:30'), ('10:45', '10:45')]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1222729)
 Just compute the distances beforehand and then filter the results: 

  with_distances = ((myFunction(C), C) for C in originalList)
result = [C for C in with_distances if C[0] < limit]
  

 Note: instead of building a new list, I use a generator expression to build the distance/element pairs. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49361238)
 This can be done with list comprehensions as suggested in other answers as well as with  filter  that might be bit clearer semantically in your case: 

  >>> a = [[0, 1, 0, 1, 0, 1],
...  [0, 0, 0, 1, 0, 0],
...  [0, 0, 0, 0, 1, 0],
...  [1, 0, 1, 0, 1, 0],
...  [0, 1, 1, 1, 0, 1],
...  [0, 1, 0, 0, 1, 1],
...  [1, 1, 1, 0, 0, 0],
...  [1, 1, 1, 1, 0, 1],
...  [0, 1, 1, 0, 1, 0],
...  [1, 1, 0, 0, 0, 1],
...  [1, 0, 0, 0, 1, 0]]
>>> filter(lambda row: row[1] == 0, a)
[[0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1222717)
 Sure, the difference between the following two: 

  [f(x) for x in list]
  

 and this: 

  (f(x) for x in list)
  

 is that the first will generate the list in memory, whereas the second is a new generator, with lazy evaluation. 

 So, simply write the "unfiltered" list as a generator instead. Here's your code, with the generator inline: 

  def myFunction(x):
    print("called for: " + str(x))
    return x * x

originalList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
limit = 10
result =   [C2 for C2 in ((myFunction(C), C) for C in originalList) if C2[0] < limit]
# result = [C2 for C2 in [(myFunction(C), C) for C in originalList] if C2[0] < limit]
  

 Note that you will not see a difference in the printout from the two, but if you were to look at memory usage, the second statement which is commented out, will use more memory. 

 To do a simple change to your code in your question, rewrite unfiltered as this: 

  unfiltered = [ (myFunction(C),C) for C in originalList ]
             ^                                         ^
             +---------- change these to (..) ---------+
                                 |
                                 v
unfiltered = ( (myFunction(C),C) for C in originalList )
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11967559)
 If your Python is too old for "list comprehensions" (the odd  [x for x in ...]  syntax), use  map() : 

   ''.join(map(str, list))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11696117)
 Using  map()  and  join() : 

  tuple_list = [('this', 'is'), ('is', 'the'), ('the', 'first'), ('first', 'document'), ('document', '.')]

string_list = map(' '.join, tuple_list) 
  

 As inspectorG4dget pointed out, list comprehensions are the most pythonic way of doing this: 

  string_list = [' '.join(item) for item in tuple_list]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19104783)
    

  mysum = sum([i for i in range(2,10) if i%2==0 or i%5==0])
  

 This will create a list out of the "loop", then pass this list to the  sum  function. 

 A list comprehension like  mylist = [*some expression using i* for i in iterable]  is a shorthand for 

  mylist = []
for i in iterable:
    mylist.append(*some expression using i*)
  

 A list comprehension like  mylist = [*some expression using i* for i in iterable if *boolean with i*]  is a shorthand for 

  mylist = []
for i in iterable:
    if *boolean with i*:
        mylist.append(*some expression using i*)
  

 You can use these whenever you need to construct a  new  list using some expression.  List comprehensions are actually typically more efficient than an equvalent  for  loop because they execute the code in  C  underneath the hood, instead of through interpreted python.   


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47968548)
 Use list comprehensions: 

  a = [pair for pair in a if pair[0] != pair[1]] + [pair for pair in a if pair[0] == pair[1]]
  

 Note that a more efficient solution would be 

  identical = []
not_identical = []
for pair in a:
    if pair[0] == pair[1]:
        identical.append(pair)
    else:
        not_identical.append(pair)
a = not_identical + identical
  

 It is more efficient, as here you iterate  a  only once, whereas in the list comprehensions solution, you iterate  a  twice. Still, both solutions take  O(n)  time complexity and  O(n)  space complexity, which are better (and more natural for this problem), than a sorting solution. 



