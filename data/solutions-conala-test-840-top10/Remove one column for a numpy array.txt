Query: Remove one column for a numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6710726)
 You could try  numpy.delete : 

 http://docs.scipy.org/doc/numpy/reference/generated/numpy.delete.html 

 or just get the slice of the array you want and write it to a new array. 

 For example: 

  a = np.random.randint(0,2, size=(48,366,3))
b = np.delete(a, np.s_[-1:], axis=1)
print b.shape # <--- (48,365,3)
  

  

  b = np.delete(a, -1, axis=1)
  

  

  b = a[:,:-1,:]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50653614)
 Delete both the column and row and add back in a row of zeros. 

 This works for your example: 

  import numpy as np
a =  np.array([[0. , 2.8, 3.5, 0. , 2.5, 1. , 0.8],
   [0. , 0. , 0. , 0. , 0. , 0. , 0. ],
   [3.5, 2.5, 0. , 0. , 2.8, 1.3, 1.1],
   [3.6, 3.8, 3.3, 0. , 2.5, 0.6, 0.4],
   [2.5, 1.5, 2.8, 0. , 0. , 3.1, 1.9],
   [1. , 0.8, 1.3, 0. , 3.1, 0. , 2.8],
   [0.8, 1.6, 1.1, 0. , 1.9, 2.8, 0. ]])

def remove_column_of_zeros_and_shift_row(a, row, col):
    without_row = np.delete(a, row, axis=0)
    without_row_and_col = np.delete(without_row, col, axis=1)
    z = np.zeros((1, len(without_row_and_col[0])))
    without_col_shifted_row = np.append(z, without_row_and_col, axis=0)
    return without_col_shifted_row

my_result = remove_column_of_zeros_and_shift_row(a, 1, 3)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17792835)
 without numpy 

  my_2d_table = [[...],[...],...]
only_cols_that_sum_lt_x = [col for col in zip(*my_2d_table) if sum(col) < some_threshold]
new_table = map(list,zip(*only_cols_that_sum_lt_x))
  

 with numpy 

  a = np.array(my_2d_table)
a[:,np.sum(a,0) < some_target]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50655848)
 Use advanced indexing together with  np.ix_ : 

  >>> import numpy as np
>>> 
>>> X = np.array( ([[0. , 2.8, 3.5, 0. , 2.5, 1. , 0.8],
...    [0. , 0. , 0. , 0. , 0. , 0. , 0. ],
...    [3.5, 2.5, 0. , 0. , 2.8, 1.3, 1.1],
...    [3.6, 3.8, 3.3, 0. , 2.5, 0.6, 0.4],
...    [2.5, 1.5, 2.8, 0. , 0. , 3.1, 1.9],
...    [1. , 0.8, 1.3, 0. , 3.1, 0. , 2.8],
...    [0.8, 1.6, 1.1, 0. , 1.9, 2.8, 0. ]]))
>>> 
>>> row = 1; col = 3
>>> h, w = X.shape
>>> i = np.r_[row, :row, row+1:h]
>>> j = np.r_[:col, col+1:w]
>>> X[np.ix_(i, j)]
array([[0. , 0. , 0. , 0. , 0. , 0. ],
       [0. , 2.8, 3.5, 2.5, 1. , 0.8],
       [3.5, 2.5, 0. , 2.8, 1.3, 1.1],
       [3.6, 3.8, 3.3, 2.5, 0.6, 0.4],
       [2.5, 1.5, 2.8, 0. , 3.1, 1.9],
       [1. , 0.8, 1.3, 3.1, 0. , 2.8],
       [0.8, 1.6, 1.1, 1.9, 2.8, 0. ]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24331782)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html to get a list with the sorted indices of your array. Using that you can then rearrange the columns of the matrix. 

  import numpy as np

c = np.array([5,2,8,2,4])    
a = np.array([[ 0,  1,  2,  3,  4],
              [ 5,  6,  7,  8,  9],
              [10, 11, 12, 13, 14],
              [15, 16, 17, 18, 19],
              [20, 21, 22, 23, 24]])

i = np.argsort(c)
a = a[:,i]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54875271)
  numpy  comes with the ability to do this this via  numpy.hsplit(array, column) . Full documentation is at: https://docs.scipy.org/doc/numpy/reference/generated/numpy.hsplit.html but essentially in iteration 1 you would use:  test_columns = numpy.hsplit(test, 1) , and then next iteration:  test_columns = numpy.hsplit(test, 2) , etc.. You may need to implement another step of indexing depending on how it returns your array (I'm not an expert by any means), but I'm pretty confident this is the method you are looking for! 

  @EDIT  

 Here is an example code where I split an array into columns: 

 import numpy as np 

  my_array = np.array([
    [5.1, 3.5, 1.4, 0.2, 0.],
    [4.9, 3.,  1.4, 0.2, 0.],
    [4.7, 3.2, 1.3, 0.2, 0.],
    [4.6, 3.1, 1.5, 0.2, 0.],
    [5.,  3.6, 1.4, 0.2, 0.],
    [5.4, 3.9, 1.7, 0.4, 0.],
    [4.6, 3.4, 1.4, 0.3, 0.],
    [5.,  3.4, 1.5, 0.2, 0.],
    [4.4, 2.9, 1.4, 0.2, 0.]])

test1 = np.hsplit(my_array, np.array([1, 1]))[0]
print(test1)
  

 
   Which prints [[5.1][4.9][4.7][4.6][5. ][5.4][4.6][5. ][4.4]] 
 

 You can change it to  test1 = np.hsplit(my_array, np.array([2, 1]))[0]  to correctly slice the first two columns. It appears the second argument works better as a numpy array than an  int() , and you do want to slice the  [0] 'th element of what is returned to get it to work correctly, as it will return some garbage array as well which for your purposes should be disregarded. 

 To implement this on a data set automatically you can replace the last two lines of code above with: 

  columns = my_array.shape[1]

for column_index in range(1, columns + 1):
    test = np.hsplit(my_array, np.array([column_index, 1]))[0]
    print(test)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18898601)
 In the spirit of @SaulloCastro's answer, but handling multiple occurrences of items, you can remove the first occurrence on each column doing the following: 

  def delete_skew_row(a, b) :
    rows, cols = a.shape
    row_to_remove = np.argmax(a == b, axis=0)
    items_to_remove = np.ravel_multi_index((row_to_remove,
                                            np.arange(cols)),
                                           a.shape, order='F')
    ret = np.delete(a.T, items_to_remove)
    return np.ascontiguousarray(ret.reshape(cols,rows-1).T)

rows, cols = 5, 10
a = np.random.randint(100, size=(rows, cols))
b = np.random.randint(rows, size=(cols,))
b = a[b, np.arange(cols)]

>>> a
array([[50, 46, 85, 82, 27, 41, 45, 27, 17, 26],
       [92, 35, 14, 34, 48, 27, 63, 58, 14, 18],
       [90, 91, 39, 19, 90, 29, 67, 52, 68, 69],
       [10, 99, 33, 58, 46, 71, 43, 23, 58, 49],
       [92, 81, 64, 77, 61, 99, 40, 49, 49, 87]])
>>> b
array([92, 81, 14, 82, 46, 29, 67, 58, 14, 69])
>>> delete_skew_row(a, b)
array([[50, 46, 85, 34, 27, 41, 45, 27, 17, 26],
       [90, 35, 39, 19, 48, 27, 63, 52, 68, 18],
       [10, 91, 33, 58, 90, 71, 43, 23, 58, 49],
       [92, 99, 64, 77, 61, 99, 40, 49, 49, 87]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44560311)
  numpy  can help you do this! 

  import numpy as np
a = np.array([1, 2, 7, 4, 5, 6, 7, 8, 9]).reshape((3, 3))
b = np.array([col for col in a.T if 7 not in col]).T
print(b)
  



