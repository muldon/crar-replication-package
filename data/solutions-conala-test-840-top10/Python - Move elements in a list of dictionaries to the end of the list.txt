Query: Python - Move elements in a list of dictionaries to the end of the list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39646510)
 Well, if you've got a list of dictionaries in the class, something like: 

  import random
for d in dict_list:
    random_pair = random.choice(d.items())
    # Then do whatever you were going to do with that pair
    # then it goes on to the next dictionary in the list
  

 If you don't already have all the dictionaries in a list, just make the list before that loop. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46037069)
  

  print([d for d in arr if all(d.values())])
  

 Don't use  dict  as a name: you override Python's one. And in your case it's not a dictionary, it is an array of dictionaries. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42364709)
 Use sorting. Idea is to sort on whether is equal to  'language'  or not. If language is equal to  'en'  then key function will return  False  else  True  ( False  <  True ). As Python's sort is stable the order will be preserved. 

  >>> sorted(lst, key=lambda x: x['language'] != 'en')
[{'id': 2, 'language': 'en'},
 {'id': 4, 'language': 'en'},
 {'id': 1, 'language': 'it'},
 {'id': 3, 'language': 'es'}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28599491)
 You can use a list comprehension: 

  >>> tgt=[[1, 2], [4, 5, 6], [], None, [7, 12, 14, 16]]
>>> [e for sub in tgt if sub for e in sub][-5:]
[6, 7, 12, 14, 16]
  

 That filters out the  None . To filter out other non-list or tuples: 

  >>> [e for sub in tgt if isinstance(sub, (list, tuple)) for e in sub][-5:]
  

 If you want something that does not have to flatten the entire list of lists first, you can just deal with the structure from the end and move up until you have what you want: 

  result=[]
current=[]
it=reversed(tgt)
while len(result)<5:
    if current:
        result.append(current.pop())
        continue
    else:
        try: 
             current=next(it)
        except StopIteration:
            break
  

 (Or use John 1024's https://stackoverflow.com/a/28599492/298607) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26372521)
 Similar to the other solutions posted, but I would move some of it off into a function 

  import itertools   

def alternate(*iters, **kwargs):
    return itertools.chain(*itertools.izip_longest(*iters, **kwargs))

result = {k: ''.join(alternate(strings[k], Ns[k] + [''])) for k in Ns}
print result
  

  

  {'S2': 'string0N0string1', 'S1': 'string0N0string1N1string2'}
  

 The  alternate  function is from https://stackoverflow.com/a/2017923/66349. It takes iterables as arguments and chains together items from each one successively (using  izip_longest  as 
Padraic Cunningham did). 

 You can either specify  fillvalue=''  to handle the different length lists, or just manually pad out the shorter list as I have done above (which assumes  Ns  will always be one shorter than  strings ). 

 If you have an older python version that doesn't support dict comprehension, you could use this instead 

  result = dict((k, ''.join(alternate(strings[k], Ns[k] + ['']))) for k in Ns)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44640293)
 Yes, you make things too complicated, simply use  dictionary comprehension : 

  {k:v1-d2.get(k,0) for k,v1 in d1.items()}
  

 This will generate: 

  >>> {k:v1-d2.get(k,0) for k,v1 in d1.items()}
{'red': 9, 'blue': 18, 'green': 27, 'yellow': 40}
  

 The code works as follows: the dictionary comprehension will iterate through the  items()  of  d1 , with  k  the key and  v1  the value of  d1  that is associated with  k . 

 Then for each such key-value pair, we will associate  v1-d2.get(k,0)  with the key  k  in the resulting dictionary.  d2.get(k,0)  will aim to fetch the value associated with  k , and if the key is  not  in the dictionary, it will return  0 . 

 The algorithm runs - given dictionary lookup can happen in  O(1)  (not guaranteed, but very likely) - in  O(n)  with  n  the number of elements in  d1 , so reasonably fast. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35961880)
 You can also make good use of https://docs.python.org/3/library/collections.html#collections.deque from  collections  module in your case: 

  >>> from collections import deque
>>> 
>>> q = deque(maxlen=3)
>>>
>>> q.extend(['a','b','c'])
>>> 
>>> q
deque(['a', 'b', 'c'], maxlen=3)
>>> q.appendleft(0)
>>> q
deque([0, 'a', 'b'], maxlen=3)
>>> q.append(0)
>>> q
deque(['a', 'b', 0], maxlen=3)
  

 The idea here is to keep the  queue  of fixed size so whenever you append an item from either right or left the item on the opposite end gets pushed out. 

 Quoting from http://shop.oreilly.com/product/0636920027072.do : 

 
   Adding or popping items from either end of a queue has O(1)
  complexity. This is unlike a list where inserting or removing items
  from the front of the list is O(N). 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51086678)
 As it's mentioned in comments, you shouldn't rely on dictionary's order. But if you are using Python-3.6+, since dictionary is insertion ordered in these versions, you can move that item to the end by popping the intended item and then reassigning it to the dictionary. 

  In [7]: dicta={1:['a','a','a'],2:['b','b','b'],'N':['n','n','n'],3:['c','c','c']}
In [8]: dicta['N'] = dicta.pop('N')

In [9]: dicta
Out[9]: 
{1: ['a', 'a', 'a'],
 2: ['b', 'b', 'b'],
 3: ['c', 'c', 'c'],
 'N': ['n', 'n', 'n']}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45477173)
 @cdlane's solution made me think of using  reduce : 

  >>> seq = [None, None, 90, 10, None, 34, None, 108]
>>>
>>> from functools import reduce
>>> reordered = sum(reduce(lambda a,b: (a[0], a[1]+(b,)) 
                                       if b is None else (a[0]+(b,), a[1]), 
                           seq, ((), ())), ())
>>> print(reordered)
(90, 10, 34, 108, None, None, None, None)
  

 EDIT:
I couldn't sleep thinking about all those tuple additions, this is better: 

  >>>> reordered = sum(reduce(lambda a,b: a[b is None].append(b) or a, seq, ([], [])), [])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2526770)
 You can figure out how  printList  behaves by drawing a recursion tree. Each node consists of two elements: an  alist  and a  blist . The root has the  alist  with the initial sequence of items you want to permute, and an empty  blist .
Each node of the tree has one branch for each element of that node's  alist ; you move from a 'father' node to each one of its 'children' by choosing an element from the father's  alist  and: 

 
 assigning to the child's  alist  the father's  alist   minus that element ; 
 assigning to the child's  blist  the father's  blist  plus that element  appended to its end . 
 

 The leafs have an empty  alist , and since following different paths from the root to the leafs you have to choose elements from the root's  alist  in different orders, the  blist  of the leafs themselves contain all the various permutations of the root's  alist . 

 For example ( [abc],[] == alist,blist ): 

                             [abc],[] 
                         /     |     \
                       a/     b|      \c
                       /       |       \
                  [bc],[a]  [ac],[b]   [ab],[c]
                  /     \
                b/       \c
                /         \
           [c],[ab]      [b],[ac]
              |             |
             c|             |b
              |             |
           [],[abc]      [],[acb]


def printList(alist, blist=[]):
    # if alist is empty, we are in a 'leaf' in the recursion tree;
    # then blist contains one permutation; print it
    if not len(alist): print ''.join(blist)

    # ELSE, for each possible position in alist,
    for i in range(len(alist)):

        # move the element at that position from alist to the end of blist
        blist.append(alist.pop(i))

        # go to the 'children' node and do the printing job for its subtree
        printList(alist, blist)

        # then move back the element from the end of blist to its original
        # position in alist, so we can continue with the for loop
        # without altering alist
        alist.insert(i, blist.pop())
  



