Query: print variable and a string in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14041800)
 By printing multiple values separated by a comma: 

  print "I have", card.price
  

 The http://docs.python.org/2/reference/simple_stmts.html#the-print-statement will output each expression separated by spaces, followed by a newline. 

 If you need more complex formatting, use the http://docs.python.org/2/library/stdtypes.html#str.format: 

  print "I have: {0.price}".format(card)
  

 or by using the older and semi-deprecated http://docs.python.org/2/library/stdtypes.html#string-formatting-operations. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5884567)
 The  print  statement in Python converts its arguments to strings, and outputs those strings to stdout.  To save the string to a variable instead, only convert it to a string: 

  a = str(tag.getArtist())
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16572050)
 Use 

  print " ".join("0x%s"%my_string[i:i+2] for i in range(0, len(my_string), 2))
  

  

  >>> my_string = "deadbeef"
>>> print " ".join("0x%s"%my_string[i:i+2] for i in range(0, len(my_string), 2))
0xde 0xad 0xbe 0xef
>>>
  

 On an unrelated side note ... using  string  as a variable name even as an example variable name is very bad practice. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14041849)
 Assuming you use Python 2.7 (not 3): 

  print "I have", card.price  (as mentioned above). 

  print "I have %s" % card.price  (using http://docs.python.org/2/library/stdtypes.html#string-formatting-operations) 

  print " ".join(map(str, ["I have", card.price]))  (by joining lists) 

 There are a lot of ways to do the same, actually. . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11788514)
 Python 3.6+ does have variable interpolation - prepend an  f  to your string: 

  f"foo is {bar}"
  

 For versions of Python below this (Python 2 - 3.5) you can use  str.format  to pass in variables: 

  # Rather than this:
print("foo is #{bar}")

# You would do this:
print("foo is {}".format(bar))

# Or this:
print("foo is {bar}".format(bar=bar))

# Or this:
print("foo is %s" % (bar, ))

# Or even this:
print("foo is %(bar)s" % {"bar": bar})
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33683272)
 I am not sure about Python, but as a basic difference would be related to the performance. 

  print('some text', variable, variable, expression)  - This is called Parameterized which improves performance. 

  print('some text' + str(variable) ...)  - incurs the cost of constructing the message parameter, i.e. converting the type to a String 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37480181)
 Something that (surprisingly) hasn't been mentioned here is simple concatenation. 

 Example: 

  foo = "seven"

print("She lives with " + foo + " small men")
  

 Result: 

 
   She lives with seven small men 
 

 Additionally, as of Python 3, the  %  method is deprecated. Don't use that. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54649775)
 Python 2/3: 

 Without variable: 

  print(' '.join("fo12--"))
  

 With a variable: 

  a = "fo12--"
print(' '.join(a))
  

 The  join  method iterates through object and join them with a given string. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53919940)
 If you are using python 3.6 and newer then you can use f-strings to do the task like this. 

  print(f"I have {card.price}")
  

 just include f in front of your string and add the variable inside curly braces { }. 

 Refer to a blog https://cito.github.io/blog/f-strings/:  written by Christoph Zwerschke which includes execution times of the various method. 



