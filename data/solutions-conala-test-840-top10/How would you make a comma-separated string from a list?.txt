Query: How would you make a comma-separated string from a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12297685)
 for converting list containing numbers do the following: 

  string  =  ''.join([str(i) for i in list])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44085343)
  >>> my_list = ['A', '', '', 'D', 'E',]
>>> ",".join([str(i) for i in my_list if i])
'A,D,E'
  

  my_list  may contain any type of variables. This avoid the result  'A,,,D,E' . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41385382)
  x  is a list with one string, so to access that string you need  x[0] . That string is comma-separated, so you need to specify the delimiter:  split(',') . (Otherwise,  split()  tries to split a string on whitespace, https://docs.python.org/3/library/stdtypes.html#str.split.) 

  

  [float(i) for i in x[0].split(',')]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16746679)
 You could use  ast.literal_eval : 

  >>> import ast
>>> strs = "['SING', 'Dance'],['Talk', 'Scream'],['Run', 'Walk']"
>>> ast.literal_eval("[" + strs + "]")
[['SING', 'Dance'], ['Talk', 'Scream'], ['Run', 'Walk']]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/156851)
 Here is a alternative solution in Python 3.0 which allows non-string list items: 

  >>> alist = ['a', 1, (2, 'b')]
  

 
   

  >>> ", ".join(map(str, alist))
"a, 1, (2, 'b')"
   
  the alternative solution 

  >>> import io
>>> s = io.StringIO()
>>> print(*alist, file=s, sep=', ', end='')
>>> s.getvalue()
"a, 1, (2, 'b')"
   
 

 NOTE: The space after comma is intentional. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44781)
  myList = ['a','b','c','d']
myString = ",".join(myList )
  

 This won't work if the list contains numbers. 

 

 As https://stackoverflow.com/users/3399/ricardo-reyes suggested, if it contains non-string types (such as integers, floats, bools, None) then do: 

  myList = ','.join(map(str, myList)) 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9215958)
 Use http://docs.python.org/library/functions.html#zip function to get  

  >>> a = [[1,2,3],[4,5,6],[7,8,9]]
>>> zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>>
  

 and than do your thing. 

  >>> a = [[1,2,3],[4,5,6],[7,8,9]]
>>> b = zip(*a)
>>> result = "\t".join([",".join(map(str, r)) for r in b])
>>> result
'1,4,7\t2,5,8\t3,6,9'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9215916)
 You can transpose a list of lists using http://docs.python.org/library/functions.html#zip: 

  >>> zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
  

 Everything else is simple: 

  >>> "\t".join(",".join(map(str, r)) for r in zip(*a))
'1,4,7\t2,5,8\t3,6,9'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44878)
 @jmanning2k using a list comprehension has the downside of creating a new temporary list. The better solution would be using itertools.imap which returns an iterator 

  from itertools import imap
l = [1, "foo", 4 ,"bar"]
",".join(imap(str, l))
  



