Query: Convert Python dict into a dataframe
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49818578)
 Using  Series  

  pd.Series(d).apply(pd.Series).stack().reset_index()
Out[359]: 
  level_0 level_1   0
0       1       a  10
1       1       b  30
2       2       a  20
3       2       b  60
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32103349)
 Accepts a dict as argument and returns a dataframe with the keys of the dict as index and values as a column. 

  def dict_to_df(d):
    df=pd.DataFrame(d.items())
    df.set_index(0, inplace=True)
    return df
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47903450)
 Pandas have https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_dict.html for conversion of dict to data frame. 

 
   pd.DataFrame.from_dict(dictionaryObject,orient='index') 
 

 For your data you can convert it like below: 

  import pandas as pd
your_dict={u'2012-06-08': 388,
 u'2012-06-09': 388,
 u'2012-06-10': 388,
 u'2012-06-11': 389,
 u'2012-06-12': 389,
 u'2012-06-13': 389,
 u'2012-06-14': 389,
 u'2012-06-15': 389,
 u'2012-06-16': 389,
 u'2012-06-17': 389,
 u'2012-06-18': 390,
 u'2012-06-19': 390,
 u'2012-06-20': 390,
 u'2012-06-21': 390,
 u'2012-06-22': 390,
 u'2012-06-23': 390,
 u'2012-06-24': 390,
 u'2012-06-25': 391,
 u'2012-06-26': 391,
 u'2012-06-27': 391,
 u'2012-06-28': 391,
 u'2012-06-29': 391,
 u'2012-06-30': 391,
 u'2012-07-01': 391,
 u'2012-07-02': 392,
 u'2012-07-03': 392,
 u'2012-07-04': 392,
 u'2012-07-05': 392,
 u'2012-07-06': 392}

your_df_from_dict=pd.DataFrame.from_dict(your_dict,orient='index')
print(your_df_from_dict)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54365601)
 Use: 

  df = pd.DataFrame([my_dict])
  

  

  df = pd.DataFrame.from_dict(my_dict, orient='index').T
  

  

  df = pd.DataFrame(my_dict, index=[0])
  

 

  print (df)
   col1  col2  col3
0   1.0   2.0   3.0
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45731658)
 In my case I wanted keys and values of a dict to be columns and values of DataFrame. So the only thing that worked for me was: 

  data = {'adjust_power': 'y', 'af_policy_r_submix_prio_adjust': '[null]', 'af_rf_info': '[null]', 'bat_ac': '3500', 'bat_capacity': '75'} 

columns = list(data.keys())
values = list(data.values())
arr_len = len(values)

pd.DataFrame(np.array(values, dtype=object).reshape(1, arr_len), columns=columns)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41438986)
 You can also just pass the keys and values of the dictionary to the new dataframe, like so: 

  import pandas as pd

myDict = {<the_dict_from_your_example>]
df = pd.DataFrame()
df['Date'] = myDict.keys()
df['DateValue'] = myDict.values()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43776618)
 Setup</h3>

  df = pd.DataFrame({'A': {'2017-05-01 00:32:25': 30,
  '2017-05-01 00:32:55': 30,
  '2017-05-01 00:33:25': 30,
  '2017-05-01 00:33:55': 30,
  '2017-05-01 00:34:25': 30},
 'B': {'2017-05-01 00:32:25': [-3512, 375, -1025, -358, -1296, -4019],
  '2017-05-01 00:32:55': [-3519, 372, -1026, -361, -1302, -4020],
  '2017-05-01 00:33:25': [-3514, 371, -1026, -360, -1297, -4018],
  '2017-05-01 00:33:55': [-3517, 377, -1030, -363, -1293, -4027],
  '2017-05-01 00:34:25': [-3515, 372, -1033, -361, -1299, -4025]},
 'C': {'2017-05-01 00:32:25': [1104, 1643, 625, 1374, 5414, 2066],
  '2017-05-01 00:32:55': [1106, 1643, 622, 1385, 5441, 2074],
  '2017-05-01 00:33:25': [1105, 1643, 623, 1373, 5445, 2074],
  '2017-05-01 00:33:55': [1105, 1646, 620, 1384, 5438, 2076],
  '2017-05-01 00:34:25': [1104, 1645, 613, 1374, 5431, 2082]},
 'D': {'2017-05-01 00:32:25': 49.93,
  '2017-05-01 00:32:55': 49.94,
  '2017-05-01 00:33:25': 49.1,
  '2017-05-01 00:33:55': 49.91,
  '2017-05-01 00:34:25': 49.94}})
  

 Solution</h3>

 Construct the df dict using dict comprehension. The sub df is generated using the applymap function. It can convert all columns with a list of 6 elements: 

  dict_of_dfs = {(i+1):df.applymap(lambda x: x[i] if type(x) == list else x) for i in range(6)}

print(dict_of_dfs[1])
                      A     B     C      D
2017-05-01 00:32:25  30 -3512  1104  49.93
2017-05-01 00:32:55  30 -3519  1106  49.94
2017-05-01 00:33:25  30 -3514  1105  49.10
2017-05-01 00:33:55  30 -3517  1105  49.91
2017-05-01 00:34:25  30 -3515  1104  49.94


print(dict_of_dfs[2])
                      A    B     C      D
2017-05-01 00:32:25  30  375  1643  49.93
2017-05-01 00:32:55  30  372  1643  49.94
2017-05-01 00:33:25  30  371  1643  49.10
2017-05-01 00:33:55  30  377  1646  49.91
2017-05-01 00:34:25  30  372  1645  49.94
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51224462)
  

  df.groupby('col1').col2.apply(list)
#col1
#a    [1, 4]
#b    [2, 5]
#c       [3]
#Name: col2, dtype: object
  

 Convert to dictionary: 

  df.groupby('col1').col2.apply(list).to_dict()
# {'a': [1, 4], 'b': [2, 5], 'c': [3]}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47703703)
 Brackets around  dict  will do the trick 

  pd.DataFrame([dict])
  



