Query: How to pad with n characters in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4008562)
 With Python2.6 or better, there's no need to define your own function; the string http://docs.python.org/library/string.html#format-string-syntax method can do all this for you: 

  In [18]: '{s:{c}^{n}}'.format(s='dog',n=5,c='x')
Out[18]: 'xdogx'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48438719)
 yeah just use ljust or rjust to left-justify (pad right) and right-justify (pad left) with any given character. 

 For example ... to make '111' a 5 digit string padded with 'x'es 

 In Python3.6: 

  >>> '111'.ljust(5, 'x')
111xx

>>> '111'.rjust(5, 'x')
xx111
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36245375)
 The simplest way would be 

  >>> hextext = "H:\myfilepath.myfileending"
>>> encodedhex = "".join(c.encode("hex")+"00" for c in hextext)
>>> encodedhex
'48003a005c006d007900660069006c00650070006100740068002e006d007900660069006c00650065006e00640069006e006700'
>>> encodedhex.upper()
'48003A005C006D007900660069006C00650070006100740068002E006D007900660069006C00650065006E00640069006E006700'
  

 But are you sure you want this output and not a UTF-16-encoded string? 

  >>> hextext.encode("utf-16-le")
'H\x00:\x00\\\x00m\x00y\x00f\x00i\x00l\x00e\x00p\x00a\x00t\x00h\x00.\x00m\x00y\x00f\x00i\x00l\x00e\x00e\x00n\x00d\x00i\x00n\x00g\x00'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41847538)
 In Python3 

  import re
s= "顺便采买些喜欢的CD和DVD或Café。"
re.sub("([A-Za-z0-9À-Öà-ÿ]+)"," \\1 ",s)
  

  

  顺便采买些喜欢的 CD 和 DVD 或 Café 。
  

 regex: https://pypi.python.org/pypi/regex 

 pip install regex 

  import regex
regex.sub("(\p{Latin}+)"," \\1 ",s)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43939328)
 You can use  5.5  to https://pyformat.info/#string_trunc_pad so that the output will always be of length of five: 

  '{:5.5}'.format('testsdf')
# 'tests'

'{:5.5}'.format('test')
# 'test '
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20309356)
 This is super simple with  format : 

  >>> a = "John"
>>> "{:<15}".format(a)
'John           '
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14776800)
 You can look into https://docs.python.org/2/library/stdtypes.html#str.ljust I believe. 

 The alternative is probably to use the http://docs.python.org/2/library/string.html#format-examples method: 

  >>> '{:<30}'.format('left aligned')
'left aligned                  '
>>> '{:>30}'.format('right aligned')
'                 right aligned'
>>> '{:^30}'.format('centered')
'           centered           '
>>> '{:*^30}'.format('centered')  # use '*' as a fill char
'***********centered***********'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/339024)
 Just use the http://docs.python.org/2/library/stdtypes.html#string-methods method of the string object. 

 This example will make a string of 10 characters long, padding as necessary. 

  >>> t = 'test'
>>> t.rjust(10, '0')
>>> '000000test'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18244878)
 You can also do this with format strings 

  In [32]: '{0:*^80}'.format('MENU')
Out[32]: '**************************************MENU**************************************'
  

 This says use the  '*'  character to pad  'MENU'  to 80 characters in the center. The  '^'  character indicates center. 



