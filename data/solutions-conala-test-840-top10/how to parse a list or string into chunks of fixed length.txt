Query: how to parse a list or string into chunks of fixed length
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6372410)
 Use: 

  value = '111111111122222222223333333333'
n = 10
(value[i:i+n] for i in xrange(0, len(value), n))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6372316)
 A related question has been asked:
https://stackoverflow.com/questions/2231663/slicing-a-list-into-a-list-of-sub-lists 

 For example, if your source list is: 

  the_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, ... ]
  

  

  split_list = [the_list[i:i+n] for i in range(0, len(the_list), n)]
  

 assuming n is your sub-list length and the result would be: 

  [[1, 2, 3, ..., n], [n+1, n+2, n+3, ..., 2n], ...]
  

  

  for sub_list in split_list:
    # Do something to the sub_list
  

 The same thing goes for strings. 

 Here's a practical example: 

  >>> n = 2
>>> listo = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> split_list = [listo[i:i+n] for i in range(0, len(listo), n)]
>>> split_list
[[1, 2], [3, 4], [5, 6], [7, 8], [9]]

>>> listo = '123456789'
>>> split_list = [listo[i:i+n] for i in range(0, len(listo), n)]
>>> split_list
['12', '34', '56', '78', '9']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24483679)
 Assuming you want to divide into n chunks: 

  n = 6
num = float(len(x))/n
l = [ x [i:i + int(num)] for i in range(0, (n-1)*int(num), int(num))]
l.append(x[(n-1)*int(num):])
  

 This method simply divides the length of the list by the number of chunks and, in case the length is not a multiple of the number, adds the extra elements in the last list. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/848663)
 Hopefully I understand what you're looking for: some way to conveniently identify each part of the line by a simple variable, but output it padded to the correct width? 

 The snippet below may give you what you want 

  class FixWidthFieldLine(object):

    fields = (('foo', 10),
              ('bar', 30),
              ('ooga', 30),
              ('booga', 10))

    def __init__(self):
        self.foo = ''
        self.bar = ''
        self.ooga = ''
        self.booga = ''

    def __str__(self):
        return ''.join([getattr(self, field_name).ljust(width) 
                        for field_name, width in self.fields])

f = FixWidthFieldLine()
f.foo = 'hi'
f.bar = 'joe'
f.ooga = 'howya'
f.booga = 'doin?'

print f
  

  

  hi        joe                           howya                         doing     
  

 It works by storing a class-level variable,  fields  which records the order in which each field should appear in the output, together with the number of columns that field should have. There are correspondingly-named instance variables in the  __init__  that are set to an empty string initially. 

 The  __str__  method outputs these values as a string. It uses a list comprehension over the class-level  fields  attribute, looking up the instance value for each field by name, and then left-justifying it's output according to the columns. The resulting list of fields is then joined together by an empty string. 

 Note this doesn't parse input, though you could easily override the constructor to take a string and parse the columns according to the field and field widths in  fields . It also doesn't check for instance values that are longer than their allotted width. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/848661)
 You don't need to assign to slices, just build the string using http://docs.python.org/library/stdtypes.html#string-formatting-operations. 

 An example with a fixed format for 3 data items: 

  >>> fmt="%4s%10s%10s"
>>> fmt % (1,"ONE",2)
'   1       ONE         2'
>>> 
  

 Same thing, field width supplied with the data: 

  >>> fmt2 = "%*s%*s%*s"
>>> fmt2 % (4,1, 10,"ONE", 10,2)
'   1       ONE         2'
>>> 
  

 Separating data and field widths, and using  zip()  and  str.join()  tricks: 

  >>> widths=(4,10,10)
>>> items=(1,"ONE",2)
>>> "".join("%*s" % i for i in zip(widths, items))
'   1       ONE         2'
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49201399)
 Here's my variant: 

  def simple_parsing(string):
    from re import split
    parts = split('\s+',string)
    result = [];i=4
    while not parts[i].isalpha():
        result.append(parts[i])
        i+=1
    return([parts[0:4],result,parts[i:i+2],parts[i+2:]])
  

 For example, took one string of yours, here's a result: 

  simple_parsing('s 91    1.00   OUT     9    3   12    7   OCCC     0.34  f829 27  f752 33')
[['s', '91', '1.00', 'OUT'], ['9', '3', '12', '7'], ['OCCC', '0.34'], ['f829', '27', 'f752', '33']]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18854817)
 One solution would be to use this function: 

  def chunkstring(string, length):
    return (string[0+i:length+i] for i in range(0, len(string), length))
  

 This function returns a generator, using a generator comprehension. The generator returns the string sliced, from 0 + a multiple of the length of the chunks, to the length of the chunks + a multiple of the length of the chunks. 

 You can iterate over the generator like a list, tuple or string -  for i in chunkstring(s,n): 
, or convert it into a list (for instance) with  list(generator) . Generators are more memory efficient than lists because they generator their elements as they are needed, not all at once, however they lack certain features like indexing. 

 This generator also contains any smaller chunk at the end: 

  >>> list(chunkstring("abcdefghijklmnopqrstuvwxyz", 5))
['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'z']
  

 Example usage: 

  text = """This is the first line.
           This is the second line.
           The line below is true.
           The line above is false.
           A short line.
           A very very very very very very very very very long line.
           A self-referential line.
           The last line.
        """

lines = (i.strip() for i in text.splitlines())

for line in lines:
    for chunk in chunkstring(line, 16):
        print(chunk)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25430739)
 My favorite way to solve this problem is with the  re  module. 

  import re

def chunkstring(string, length):
  return re.findall('.{%d}' % length, string)
  

 One caveat here is that  re.findall  will not return a chunk that is  less than  the length value, so any remainder is skipped. 

 However, if you're parsing fixed-width data, this is a great way to do it. 

 For example, if I want to parse a block of text that I know is made up of 32 byte characters (like a header section) I find this very readable and see no need to generalize it into a separate function (as in  chunkstring ): 

  for header in re.findall('.{32}', header_data):
  ProcessHeader(header)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33514707)
 Although this question has been posted after 4 years, but here is a another way to do this use https://docs.python.org/2/library/textwrap.html. From the document: 

 
    textwrap.wrap(text[, width[, ...]])    
  
   Wraps the single paragraph in text (a string) so every line is at most width characters long. Returns a list of output lines, without final newlines. 
  
   Optional keyword arguments correspond to the instance attributes of TextWrapper, documented below. width defaults to 70. 
 

 So we can do it like thisï¼š 

  >>> import textwrap
>>> myList = ['111111111122222222223333333333']

>>> [i for text in myList for i in textwrap.wrap(text, 10)]
['1111111111', '2222222222', '3333333333']

>>> for i in [i for text in myList for i in textwrap.wrap(text, 10)]:
...     print i
1111111111
2222222222
3333333333
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34256272)
 I am assuming that your string is sym and  

 
 You want to remove all spaces from  sym   
 Make a block (list) of    words (strings) of length 5. 
 

 Python code in steps: 

  In [1]: sym = " !#$%^&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{}~" #This is your input string

In [2]: sym = sym.replace(" ","") #remove all "" (spaces)

In [3]: sym #Lets check the output
Out[3]: "!#$%^&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{}~"

In [4]: sym_list = [ sym[i:i+5] for i in range(0, len(sym), 5)] # use range to generate iteration with increment 5 each time

In [5]: sym_list #So, did we get blocks of 5 chars? hope so. 
Out[5]: 
['!#$%^',
 "&'()*",
 '+,-./',
 '01234',
 '56789',
 ':;<=>',
 '?@ABC',
 'DEFGH',
 'IJKLM',
 'NOPQR',
 'STUVW',
 'XYZ[\\',
 ']^_`a',
 'bcdef',
 'ghijk',
 'lmnop',
 'qrstu',
 'vwxyz',
 '{}~']
  

 Correct me if any of my assumptions are incorrect. 



