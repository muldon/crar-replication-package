Query: How to get the length of words in a sentence?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22749723)
 Try this, using http://docs.python.org/2.7/library/functions.html#map for applying http://docs.python.org/2.7/library/functions.html#len over each word in the sentence, understanding that https://docs.python.org/2/library/string.html#string.split creates a list with each word in the sentence: 

  s = "python is pretty fun to use"
map(len, s.split())       # assuming Python 2.x
list(map(len, s.split())) # assuming Python 3.x
  

 Or alternatively, you can use a http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions for the same effect: 

  [len(x) for x in s.split()]
  

 In both cases the result is a list with the length of each word in the sentence: 

  [6, 2, 6, 3, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22749725)
 Use http://docs.python.org/2/library/functions.html#map<sup>1</sup> and http://docs.python.org/2/library/stdtypes.html#str.split: 

  >>> s = "python is pretty fun to use"
>>> map(len, s.split())
[6, 2, 6, 3, 2, 3]
>>>
  

 

 <sup>1</sup> Note :  map  returns an iterator in Python 3. If you are using that version, you may want to place it in  list  to get a list of integers like the Python 2  map  returns: 

  >>> # Python 3 interpreter
>>> s = "python is pretty fun to use"
>>> map(len, s.split())
<map object at 0x02364ED0>
>>> list(map(len, s.split()))
[6, 2, 6, 3, 2, 3]
>>>
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22749736)
 Use this: 

  s = "python is pretty fun to use"
[len(x) for x in s.split()]
  

 example output: 

  >>> [len(x) for x in s.split()]
[6, 2, 6, 3, 2, 3]
  

 What's going on in the background?</h3>

 https://docs.python.org/2/library/string.html#string.split breaks on the white space in the string and returns each word in the sentence in a list: 

  >>> s.split()
['python', 'is', 'pretty', 'fun', 'to', 'use']
  

 Then we take the http://docs.python.org/2.7/library/functions.html#len of each of those words to get the word's length. After that, we take each length and append it to a list so that it can be conveniently returned as the result.  

 That all happens in this http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions: 

  [len(x) for x in s.split()]
  

 Still a little confused? This is conceptually the same thing just broken down more explicitly: 

  results = []
for x in s.split():
    word_length = len(x)
    results.append(word_length)
print results 
  

 If you'd like them printed out separately, like in your question, use: 

  for x in [len(x) for x in s.split()]: 
    print x
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12761804)
 You might want to filter out punctuation as well as zero-length words. 

  >>> sentence = input("Please enter a sentence: ")
  

 Filter out punctuation that doesn't count. You can add more to the string of punctuation if you want: 

  >>> filtered = ''.join(filter(lambda x: x not in '".,;!-', sentence))
  

 Split into words, and remove words that are zero length: 

  >>> words = [word for word in filtered.split() if word]
  

 And calculate: 

  >>> avg = sum(map(len, words))/len(words)
>>> print(avg) 
3.923076923076923
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12761576)
 In Python 3 (which you appear to be using): 

  >>> sentence = "Hi my name is Bob"
>>> words = sentence.split()
>>> average = sum(len(word) for word in words) / len(words)
>>> average
2.6
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/52574285)
 You can use a generator with recursion: 

  s = ['a', 'B', 'c', 'a', 'D']
def combinations(d, _c = []):
  if len(_c) == len(d)+1:
     yield _c
  else:
     for i in d:
       if not _c or any(s[c] == _c[-1] and s[c+1] == i for c in range(len(s)-1)):
          for k in combinations(d, _c+[i]):
            yield k

print('\n'.join(' + '.join(i) for i in combinations(set(s))))
  

 Output: 

  a + B + c + a + B
a + B + c + a + D
B + c + a + B + c
c + a + B + c + a
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27289169)
 First sort the words based on length and then group them using https://docs.python.org/2/library/itertools.html#itertools.groupby again on length: 

  >>> from itertools import groupby         
>>> s = 'I like programming in python because it is very fun and simple'
>>> for _, g in groupby(sorted(s.split(), key=len), key=len):
    print ' '.join(g)
...     
I
in it is
fun and
like very
python simple
because
programming
  

 

 You can also do it using a  dict : 

  >>> d = {}
>>> for word in s.split():
    d.setdefault(len(word), []).append(word)
...  
  

 Now  d  contains:  

  >>> d
{1: ['I'], 2: ['in', 'it', 'is'], 3: ['fun', 'and'], 4: ['like', 'very'], 6: ['python', 'simple'], 7: ['because'], 11: ['programming']}
  

 Now we need to iterate over sorted keys and fetch the related value: 

  >>> for _, v in sorted(d.items()):
    print ' '.join(v)
...     
I
in it is
fun and
like very
python simple
because
programming
  

 

 If you want to ignore punctuation then you can strip them using  str.strip  with  string.punctuation : 

  >>> from string import punctuation
>>> s = 'I like programming in python. Because it is very fun and simple.'
>>> sorted((word.strip(punctuation) for word in s.split()), key=len)
['I', 'in', 'it', 'is', 'fun', 'and', 'like', 'very', 'python', 'simple', 'Because', 'programming']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42934396)
 Like the other answers suggest, you're over-complicating. You need to print out a string with a set of incremental numbers separated by a space, one number for each word in the sentence. 

 First, get the length of the sentence in words: 

  length = len(UserSentence.split())
  

  

  newSentence = ' '.join([str(i+1) for i in range(length)])
  

  (the argument of the  join  method is a list comprehension; which allows you to construct lists in one line)  

 Then, print it: 

  print(newSentence)
  



