Query: How to convert a Python datetime object to seconds
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15188866)
 Seconds since epoch to http://docs.python.org/2/library/datetime.html#datetime.datetime to http://docs.python.org/2/library/datetime.html#datetime.datetime.strftime: 

  >>> ts_epoch = 1362301382
>>> ts = datetime.datetime.fromtimestamp(ts_epoch).strftime('%Y-%m-%d %H:%M:%S')
>>> ts
'2013-03-03 01:03:02'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14583130)
 This is how I do it: 

  from datetime import datetime
from time import mktime

dt = datetime.now()
sec_since_epoch = mktime(dt.timetuple()) + dt.microsecond/1000000.0

millis_since_epoch = sec_since_epoch * 1000
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27246418)
 If you want to get the seconds since epoch, you can use  python-dateutil  to convert it to a  datetime  object and then convert it so seconds using the  strftime  method.  

  >>> import dateutil.parser as dp
>>> t = '1984-06-02T19:05:00.000Z'
>>> parsed_t = dp.parse(t)
>>> t_in_seconds = parsed_t.strftime('%s')
>>> t_in_seconds
'455047500'
  

  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23004143)
>In Python 3.3, add new method. 

re> datetime.timestamp()
  

 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7852891)
 To get the Unix time (seconds since January 1, 1970): 

  >>> import datetime, time
>>> t = datetime.datetime(2011, 10, 21, 0, 0)
>>> time.mktime(t.timetuple())
1319148000.0
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8022196)
 Given a  datetime.datetime  object  dt , you could use 

  (dt - datetime.datetime.utcfromtimestamp(0)).total_seconds()
  

 Example: 

  >>> dt = datetime.datetime.now(); t = time.time()
>>> t
1320516581.727343
>>> (dt - datetime.datetime.utcfromtimestamp(0)).total_seconds()
1320516581.727296
  

 Note that the  timedelta.total_seconds()  method was introduced in Python 2.7. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11111177)
 It appears to me that the simplest way to do this is 

  import datetime

epoch = datetime.datetime.utcfromtimestamp(0)

def unix_time_millis(dt):
    return (dt - epoch).total_seconds() * 1000.0
  



