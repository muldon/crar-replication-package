Query: rreplace - How to replace the last occurence of an expression in a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12517323)
 If you know that the 'old' string does not contain any special characters you can do it with a regex: 

  In [44]: s = '<div><div>Hello</div></div>'

In [45]: import re

In [46]: re.sub(r'(.*)</div>', r'\1</bad>', s)
Out[46]: '<div><div>Hello</div></bad>'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9943875)
  rsplit  and  join  could be used to simulate the effects of an  rreplace  

  >>> 'XXX'.join('mississippi'.rsplit('iss', 1))
'missXXXippi'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32422509)
 Use a  string.count  together with the  rreplace  

  >>> def rreplace(s, old, new, occurrence):
...     li = s.rsplit(old, occurrence)
...     return new.join(li)
... 
>>> a
'cat word dog word mouse word'
>>> rreplace(a, 'word', 'xxx', a.count('word') - 1)
'cat word dog xxx mouse xxx'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2556156)
 I'm not going to pretend that this is the most efficient way of doing it, but it's a simple way. It reverses all the strings in question, performs an ordinary replacement using  str.replace  on the reversed strings, then reverses the result back the right way round: 

  >>> def rreplace(s, old, new, count):
...     return (s[::-1].replace(old[::-1], new[::-1], count))[::-1]
...
>>> rreplace('<div><div>Hello</div></div>', '</div>', '</bad>', 1)
'<div><div>Hello</div></bad>'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27589436)
 Here's a way to do it without a regex: 

  def replaceNth(s, source, target, n):
    inds = [i for i in range(len(s) - len(source)+1) if s[i:i+len(source)]==source]
    if len(inds) < n:
        return  # or maybe raise an error
    s = list(s)  # can't assign to string slices. So, let's listify
    s[inds[n-1]:inds[n-1]+len(source)] = target  # do n-1 because we start from the first occurrence of the string, not the 0-th
    return ''.join(s)
  

  

  In [278]: s
Out[278]: 'cat goose  mouse horse pig cat cow'

In [279]: replaceNth(s, 'cat', 'Bull', 2)
Out[279]: 'cat goose  mouse horse pig Bull cow'

In [280]: print(replaceNth(s, 'cat', 'Bull', 3))
None
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9943584)
 you may reverse a string like so: 

  myStr[::-1]
  

 to replace just add the  .replace : 

  print myStr[::-1].replace("iss","XXX",1)
  

 however now your string is backwards, so re-reverse it: 

  myStr[::-1].replace("iss","XXX",1)[::-1]
  

 .
If your replace strings are static just reverse them in file to reduce overhead. 
If not, the same trick will work. 

  myStr[::-1].replace("iss"[::-1],"XXX"[::-1],1)[::-1]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37416633)
 The first occurence of  lambda  could be replaced with a https://docs.python.org/3/glossary.html: 

  return sum(x.fee for x in self.bookings.values())
  

  

  return sum(x.donation for x in self.bookings.values())
  

  

  '\n'.join('{0} {1}'.format(x.runner_id, x.club_id) for x in self.bookings.values())
  

 Since  sum  and  string.join  can deal with a generator, you can use the generator expression directly as an argument to these functions. 



