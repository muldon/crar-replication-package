Query: Making a flat list out of list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52970481)
 You can use the  isinstance()  function to check the type of a list item: 

  lista = ['IBERDROLA', 'ACCOR\xa0SA', ['ADMIRAL'], ['ADECCO', 'IAG']]
flat_list = []

for item in lista:
    if isinstance(item, list):
        flat_list.extend(item)
    else:
        flat_list.append(item)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24657672)
 I know there is a way to do it using your method, but I find that not too readable. 

  def outlist(li, flatlist):
    if isinstance(li, str):
        flatlist.append(li)
    elif len(li) > 1:
        for i in li:
            outlist(i, flatlist)

flatlist = []
outlist([['test', 'test2'], 'test3'], flatlist)
print(flatlist)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43391860)
 First, flat a list of tuples out of a list of lists of tuples, and then use https://docs.python.org/3/library/itertools.html#itertools.groupby, 

  import itertools 
import operator

lists = [
         [('2017-04-11', '2000000.00'), ('2017-04-12', '1000000.00'), ('2017-04-13', '3000000.00')],
         [('2017-04-12', '472943.00'), ('2017-04-13', '1000000.00')]
         ]

# Step 1: Flat a list of tuples out of a list of lists of tuples
list_tuples = [t for sublist in lists for t in sublist]
'''
[('2017-04-11', '2000000.00'), ('2017-04-12', '1000000.00'), ('2017-04-13', '3000000.00'), ('2017-04-12', '472943.00'), ('2017-04-13', '1000000.00')]
'''

# Step 2: Groupby
results = list()

for key, group in itertools.groupby(sorted(list_tuples), operator.itemgetter(0)):
    s = sum(float(t[1]) for t in group)
    results.append((key, s))

print(results)
#[('2017-04-11', 2000000.0), ('2017-04-12', 1472943.0), ('2017-04-13', 4000000.0)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15228020)
 If you use  numpy  this is pretty easy: 

  import numpy as np

A = np.array([1,3,5])
B = np.zeros((3,3))

B.flat[A] = 123

print B
  

  

  [[   0.  123.    0.]
 [ 123.    0.  123.]
 [   0.    0.    0.]]
  

   .flat  does is return a "flattened" version of your list: 

  [   0.  123.    0.  123.    0.  123.    0.    0.    0.]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51494820)
 You can use numpy : 
 flat_list = list(np.concatenate(list_of_list))  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/52970504)
 Assuming your list is stored as variable  l , you can use a ternary operator with a test of  isinstance  as a condition: 

  [i for s in l for i in (s if isinstance(s, list) else (s,))]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38421470)
 One can also use NumPy's http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flat.html: 

  import numpy as np
list(np.array(l).flat)
  

 Edit 11/02/2016: Only works when sublists have identical dimensions. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53253921)
 why not flatten the initial list and go from there  

  flat_list = [item for sublist in m for item in sublist]  

 would return  [1,2,3,4,5,10,6,2,1]  so now you're really on  flat_list[2:]  



