Query: What's the best way to search for a Python dictionary value in a list of dictionaries?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29900401)
 A cross lookup in the second list with a fallback to the default value if it doesn't exist is the way to go. 

  >>> {key : list2.get(value, value) for key, value in list1.items()}
{'key3': 'CCC', 'key2': 'value2', 'key1': 'AAA'}
  

 https://docs.python.org/2/library/stdtypes.html#dict.get allows you to lookup for the key in the dictionary and if the value is not present, the default value is returned. The default value should be the same value you would pursue to search in the second dictionary.  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24395555)
 The answer to your question as written is: 

  if any(key in d for d in dicts):
    # do something
  

 If you need to know which dictionary or dictionaries contain the key, you can use https://docs.python.org/3/library/itertools.html#itertools.compress: 

  >>> d1 = dict(zip("kapow", "squee"))
>>> d2 = dict(zip("bar", "foo"))
>>> d3 = dict(zip("xyz", "abc"))
>>> dicts = d1, d2, d3

>>> from pprint import pprint
>>> pprint(dicts)
({'a': 'q', 'k': 's', 'o': 'e', 'p': 'u', 'w': 'e'},
{'a': 'o', 'b': 'f', 'r': 'o'},
{'x': 'a', 'y': 'b', 'z': 'c'})

>>> from itertools import compress
>>> for d_with_key in compress(dicts, ("a" in d for d in dicts)):
...     print(d_with_key)
... 
{'a': 'q', 'p': 'u', 'k': 's', 'w': 'e', 'o': 'e'}
{'a': 'o', 'r': 'o', 'b': 'f'}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1580298)
 Lists absolutely require loops.  That's what lists are for. 

 To avoid looping you have to avoid lists. 

 You want dictionaries of search keys and objects. 

  sites = dict( (d['site'],d) for d in data )
ids = dict( (d['id'],d] for d in data )
  

 Now you can find the item associated with 'Superuser' with  sites["Superuser"]  using a hashed lookup instead of a loop. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9932766)
 A straight forward way would be to pick each item from the dictionary and check if the key is present in the list 

  >>> [e for e in my_dictionary.items() if e[0] in my_list]
[(1, 'hello'), (2, 'goodbye'), (3, 'World')]
  

 The above search would be linear so you might gain some performance by converting the list to set 

  >>> [e for e in my_dictionary.items() if e[0] in set(my_list)]
[(1, 'hello'), (2, 'goodbye'), (3, 'World')]
  

 And finally if you need a dictionary instead of a list of key,value pair tuples you can use dictionary comprehension 

  >>> dict(e for e in my_dictionary.items() if e[0] in set(my_list))
{1: 'hello', 2: 'goodbye', 3: 'World'}
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24845196)
 This is a general way of searching a value in a list of dictionaries: 

  def search_dictionaries(key, value, list_of_dictionaries):
    return [element for element in list_of_dictionaries if element[key] == value]
  



