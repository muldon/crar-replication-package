Query: convert string to dict using list comprehension in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18404070)
 Use  dict()  and  str.split : 

  >>> s = "1:5.9,1p5:7,2:10,4:18,8:40"
>>> dict(item.split(':') for item in s.split(','))
{'1': '5.9', '8': '40', '2': '10', '4': '18', '1p5': '7'}
  

 Using a dict-comprehension: 

  >>> {k:v for k, v in (item.split(':') for item in s.split(','))}
{'1': '5.9', '8': '40', '2': '10', '4': '18', '1p5': '7'}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1247741)
 How about a one-liner without list comprehension? 

   foo="a=0 b=1 c=3"
 ans=eval( 'dict(%s)'%foo.replace(' ',',')) )
 print ans
{'a': 0, 'c': 3, 'b': 1}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49415677)
 Let's use comprehension and split: 

  dict(i.split('=') for i in S.split())
  

 Output: 

  {'a': '65', 'b': '66', 'c': '67'}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27033812)
 Nowadays you should probably use a dictionary comprehension, introduced in 2.7: 

  mydict = {key: int(value) for key, value in (a.split('=') for a in mystring.split())}
  

 The dictionary comprehension is faster and shinier (and, in my opinion, more readable). 

  from timeit import timeit

setup = """mystring = "a=0 b=1 c=3\""""
code1 = """mydict = dict((n,int(v)) for n,v in (a.split('=') for a in mystring.split()))""" # S.Lott's code
code2 = """mydict = {key: int(value) for key, value in (a.split('=') for a in mystring.split())}"""

print timeit(code1, setup=setup, number=10000) # 0.115524053574
print timeit(code2, setup=setup, number=10000) # 0.105328798294
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1249077)
 I sometimes like this approach, especially when the logic for making keys and values is more complicated: 

  s = "a=0 b=1 c=3"

def get_key_val(x):
    a,b = x.split('=')
    return a,int(b)

ans = dict(map(get_key_val,s.split()))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17239770)
  [u'1012,738']  is a list so you've to use  id_string = data_dict['ids'][0]  to get the first element from that list. 

 To convert the items of that string into list of integers use either  map  or a  list comprehension : 

  #map
map(int, data_dict['ids'][0].split(','))

#LC
[int(x) for x in data_dict['ids'][0].split(',')]
  

  

  >>> strs = '1012,738'
>>> map(int, strs.split(','))
[1012, 738]
>>> [int(x) for x in  strs.split(',')]
[1012, 738]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11139781)
 No, you will need to convert each item to a string manually, then string the dict, and note that unless the Unicode data happens to all be ASCII, you could run into problems. Making that assumption, you can use a dict comprehension to make it quicker and more concise: 

  print({str(key): str(value) for key, value in ab.items()})
{'a': 'A', 'c': 'C', 'b': 'B'}
  

 If you are using a version of Python prior to 2.7.3, without dict comprehensions: 

  dict((str(key), str(value)) for key, value in ab.items())
  



