Query: Numpy: How to check if array contains certain numbers?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10565680)
 that means you want to check if each element of b is contained in a.
http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html#numpy.in1d does that: 

  from numpy import array, in1d
a = array([123, 412, 444])
b = array([123, 321])
print in1d(b, a).all()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10565697)
 You could alway use a set: 

  >>> a = numpy.array([123, 412, 444])
>>> b = numpy.array([123, 321])
>>> set(b) in set(a)
False
  

 Or with newer versions of numpy: 

  >>> numpy.in1d(b,a)
array([ True, False], dtype=bool)
  

 If you want just 'the answer' rather than an array: 

  >>> numpy.in1d(b,a).all()
False
  

 Or (least desirable): 

  >>> numpy.array([x in a for x in b]) 
array([ True, False], dtype=bool)
  

 Looping is slowish on numpy arrays and should be avoided. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10565640)
 You can use set difference to determine what you are looking for. Numpy has a built-in function called http://docs.scipy.org/doc/numpy/reference/generated/numpy.setdiff1d.html: 

 
   Return the sorted, unique values in ar1 that are not in ar2. 
 

 Example for your case: 

  >>> a = np.array([123, 412, 444])
>>> b = np.array([123, 321])
>>> diff = np.setdiff1d(b, a)
>>> print diff
array([321])
>>> if diff.size:
>>>    print "Not passed"
  

 So for your case, you would do a set difference you would subtract a from b and obtain an array with elements in b which are not in a. Then you can check if that was empty or not. As you can see, the output is  312 , which is an entry present in  a  but not in  b ; the length of it is now larger then zero, therefore there were elements in  b  which were not present in  a . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36095801)
 Having a setup like this: 

  import numpy as np
import math
nums = np.array([17, 18, 19, 20, 21, 22, 23])
  

 So now we create an array that contains all possible integer candidates: 

  divisors = np.arange(2,int(math.sqrt(np.max(nums)))+1) # Numbers from 2 to sqrt(max(nums))
print(divisors)
# [2 3 4]
  

 Now apply the modulo operation on the array but with a different dimension so we check each number with each divisor: 

  print(nums[:,None] % divisors[None,:]) # Modulo operation on each element (0 means divisible)
  

 
[[1 2 1]
 [0 0 2]
 [1 1 3]
 [0 2 0]
 [1 0 1]
 [0 1 2]
 [1 2 3]]
 

 Now how do we get the primes ... we check if there is no result in the line that is zero: 

  print(np.min(nums[:,None] % divisors[None,:], axis=1)) # Minimum of the modulo for that element
# [1 0 1 0 0 0 1]
  

 and then create a mask to index them: 

  print(nums[np.min(nums[:,None] % divisors[None,:], axis=1) > 0]) # So index them
# [17 19 23]
  

 

 So all you need in the end is: 

  nums = np.array([17, 18, 19, 20, 21, 22, 23])
divisors = np.arange(2,int(math.sqrt(np.max(nums)))+1)
nums[np.min(nums[:,None] % divisors[None,:], axis=1) > 0]
  

 all the other stuff is just for illustrating what each step is doing. 

 This is not trivial since it uses broadcasting of 1D arrays into a 2D array but the method should be clear. Let me know if you have any questions. 

 

 If you want to optimize this, there is another possibility: The divisors are currently every number between  2  and the  sqrt(max(array))  but you don't need to test for all these numbers. If you had a function that returned all primes in that range that would be enough. For example using  primesfrom2to  of @MaxU's answer a faster possibility is: 

  nums = np.array([17, 18, 19, 20, 21, 22, 23])
# All prime numbers in the range from 2 to sqrt(max(nums))
divisors = primesfrom2to(int(math.sqrt(np.max(nums)))+1)
nums[np.min(nums[:,None] % divisors[None,:], axis=1) > 0]
  

 but it uses the same mechanism as before but is a bit faster.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35517458)
 In this particular case ( i  contains only one unique number) you can avoid the for-loop by: 

  F[i] += sum(f)

array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 3.,  4.,  1.],
       [ 0.,  0.,  0.]])
  

 If  i  contains several numbers then the following would work fine: 

  F2 = np.zeros((4,3))
i2 = np.array([2, 3])
F2[i2] += f
  

 Then  F2  is: 

  array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 3.,  4.,  0.],
       [ 0.,  0.,  1.]])
  

 You could check the amount of different numbers in  i  using  set(i)  and then apply either the first or second option to  F  depending on the length of  set(i) . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19312971)
 If you swap your elements, you get an error even if your list contains the target array: 

  >>> array([0]) in [array([1,2]), array([0])]
Traceback (most recent call last):
  File "<input>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any
() or a.all()
  

 In your original example of  array([0]) in [array([0]), array([1,2])] , the second element is never tested since the first element passed the equality test. 

 You could get around this by first restricting to elements of the right shape: 

  >>> arrs =  [array([0]), array([1,2])]
>>> array([0]) in [a for a in arrs if a.shape == (1,)]
True
>>> arrs =  [array([1,2]), array([0])]
>>> array([0]) in [a for a in arrs if a.shape == (1,)]
True
>>> 
  

 However if you can explain your set-up and examples of data a bit more, there is normally a better and faster NumPy way that we can show you. What's the reason you have a list of NumPy arrays? 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20305634)
 You can use  numpy.searchsorted : 

  >>> import numpy as np    

>>> bins = np.array([0, 10, 100, 1000])
>>> numbers = np.array([800, 8, 80])
>>> print bins.searchsorted(numbers)
[3, 1, 2]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35141358)
 To add to the answers already posted, I'd like to add one that takes into account errors due to floating point precision in case that matrices come from, let's say, image processing for instance, where numbers are subject to floating point operations. 

 You can recurse the indexes of the larger matrix, searching for the smaller matrix. Then you can extract a submatrix of the larger matrix matching the size of the smaller matrix. 

 You have a match if the contents of both, the submatrix of 'large' and the 'small' matrix match. 

 The following example shows how to return the first indexes of the location  in the large matrix found to match. It would be trivial to extend this function to return an array of locations found to match if that's the intent. 

  import numpy as np

def find_submatrix(a, b):
    """ Searches the first instance at which 'b' is a submatrix of 'a', iterates
        rows first. Returns the indexes of a at which 'b' was found, or None if
        'b' is not contained within 'a'"""
    a_rows=a.shape[0]
    a_cols=a.shape[1]

    b_rows=b.shape[0]
    b_cols=b.shape[1]

    row_diff = a_rows - b_rows
    col_diff = a_cols - b_cols

    for idx_row in np.arange(row_diff):
        for idx_col in np.arange(col_diff):
            row_indexes = [idx + idx_row for idx in np.arange(b_rows)]
            col_indexes = [idx + idx_col for idx in np.arange(b_cols)]

            submatrix_indexes = np.ix_(row_indexes, col_indexes)
            a_submatrix = a[submatrix_indexes]

            are_equal = np.allclose(a_submatrix, b)  # allclose is used for floating point numbers, if they
                                                     # are close while comparing, they are considered equal.
                                                     # Useful if your matrices come from operations that produce
                                                     # floating point numbers.
                                                     # You might want to fine tune the parameters to allclose()
            if (are_equal):
                return[idx_col, idx_row]

    return None
  

 Using the function above you can run the following example: 

  large_mtx = np.array([[1,  2, 3, 7, 4, 2, 6],
                      [4,  5, 6, 2, 1, 3, 11],
                      [10, 4, 2, 1, 3, 7, 6],
                      [4,  2, 1, 3, 7, 6, -3],
                      [5,  6, 2, 1, 3, 11, -1],
                      [0,  0, -1, 5, 4, -1, 2],
                      [10, 4, 2, 1, 3, 7, 6],
                      [10, 4, 2, 1, 3, 7, 6] 
                     ])

# Example 1: An intersection at column 2 and row 1 of large_mtx
small_mtx_1 = np.array([[4, 2], [2,1]])
intersect = find_submatrix(large_mtx, small_mtx_1)
print "Example 1, intersection (col,row): " + str(intersect)

# Example 2: No intersection
small_mtx_2 = np.array([[-14, 2], [2,1]])
intersect = find_submatrix(large_mtx, small_mtx_2)
print "Example 2, intersection (col,row): " + str(intersect)
  

 Which would print: 

 
Example 1, intersection: [1, 2]
Example 2, intersection: None
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42590765)
 If you want to check if ALL vectors in  y  are present in the array, you could try: 

  import numpy as np
y = [[1,2,3], [1,3,2]]
x = np.array([[1,2,3],[3,2,1],[2,3,1],[10,5,6]])

all(True if i in x else False for i in y)
# True
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12901609)
  >>> import numpy as np
>>> a = np.arange(10)
>>> a[(a > 2) & (a < 8)]
array([3, 4, 5, 6, 7])
  

 Each condition ( a > 2  and  a < 8 ) is creating a boolean numpy array which is equal in length to  a , and contains the truth value of your criterion at each position in  a . 

     >>> a > 2
   array([False, False, False,  True,  True,  True,  True,  True,  True,  True], dtype=bool)
  

 Then, you're using http://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html to find the positions at which  both  conditions are true. 

 Finally, you're using the resulting array as a http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays to retrieve only the elements from the original array that meet your criteria. 

 I  think  you're getting the  ValueError  because while  a > 2  is valid (and is really just calling  a.__gt__(2) , a statement like  2 < a < 8  is first calling  cmp(2,a) , which results in the same  ValueError  for me: 

  >>> a = np.arange(10)
>>> cmp(2,a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
  



