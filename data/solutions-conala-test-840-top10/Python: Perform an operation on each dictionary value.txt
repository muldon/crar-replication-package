Query: Python: Perform an operation on each dictionary value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16125535)
 update each key in  my_dict : 

  my_dict.update({n: 2 * my_dict[n] for n in my_dict.keys()})
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44640340)
 You can use dict comprehension with an if-else statement: 

  d1 = {'red':10, 'blue':20, 'green':30, 'yellow':40}
d2 = {'red':1, 'blue':2, 'green':3}

new_dict = {a:b-d2[a] if a in d2 else b for a, b in d1.items()}
  

 Output: 

  {'blue': 18, 'green': 27, 'red': 9, 'yellow': 40}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48885049)
 This comprehension should do it: 

  {k: [round(i*j, 4) for i, j in zip(v, D1_inv)] for k, v in S.items()}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44640293)
 Yes, you make things too complicated, simply use  dictionary comprehension : 

  {k:v1-d2.get(k,0) for k,v1 in d1.items()}
  

 This will generate: 

  >>> {k:v1-d2.get(k,0) for k,v1 in d1.items()}
{'red': 9, 'blue': 18, 'green': 27, 'yellow': 40}
  

 The code works as follows: the dictionary comprehension will iterate through the  items()  of  d1 , with  k  the key and  v1  the value of  d1  that is associated with  k . 

 Then for each such key-value pair, we will associate  v1-d2.get(k,0)  with the key  k  in the resulting dictionary.  d2.get(k,0)  will aim to fetch the value associated with  k , and if the key is  not  in the dictionary, it will return  0 . 

 The algorithm runs - given dictionary lookup can happen in  O(1)  (not guaranteed, but very likely) - in  O(n)  with  n  the number of elements in  d1 , so reasonably fast. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49120732)
 You can list the keys explicitly: 

  #UNTESTED
spectradict.update((x, spectradict[x]*A) for x in ['0.001', '0.004', '0.01', '0.02'])
  

 Or, you could just exclude  E : 

  #UNTESTED
spectradict.update((x, y*A) for x, y in spectradict.items() if x != 'E')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49120725)
 You can perform conditional checks on your generator function by appending  if <test>  to the end of it. 

  spectradict.update((k, v*A) for k, v in spectradict.items() if k != 'E')
# or, inclusive test using a set
spectradict.update((k, v*A) for k, v in spectradict.items() if k in {'0.001', '0.004', '0.01', '0.02'})
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48885047)
 You may use  dictionary comprehension  to achieve this. Within your dictionary comprehension, you need to call your  list comprehension  to round off the product of numbers for each list present as value in the original  my_dict  dictionary.  

  my_dict = {1: [11.1, 13, 15.0], 2: [6.9, 8.5, 10.17], 3: [3.86, 4.83, 6.07], 4: [3.86, 4.83, 6.07], 5: [2.31, 2.58, 3.02]}
d1_inv = [0.0248, 0.0296, 0.0357]

new_dict = {k: [round(i*j,4) for i, j in zip(v,d1_inv)] for k, v in my_dict.items()}
  

 where  new_dict  will be a dictionary holding each  key  in your initial  my_dict  with the corresponding value as: 

  {1: [0.2753, 0.3848, 0.5355], 2: [0.1711, 0.2516, 0.3631], 3: [0.0957, 0.143, 0.2167], 4: [0.0957, 0.143, 0.2167], 5: [0.0573, 0.0764, 0.1078]}
  

 

  Explanation:  This solution comprised of: 

 
 an outer dictionary comprehension expression, and  
 an inner list comprehension expression. 
 

 Here, the outer  dictionary comprehension : 

  {k: [...*list comprehension*...] for k, v in my_dict.items()}
  

 will iterate over the dictionary pulling the tuple of  ("key", "value")  pairs returned by  my_dict.items() . Here I am using  k  as a key to the new dictionary, where as value  v  will be used in the inner  list comprehension  expression: 

  [round(i*j,4) for i, j in zip(v,d1_inv)]
  

 Here,  zip(v,d1_inv)  will return the tuple of objects corresponding to same position in  d1_inv  and  v   (from outer dictionary comprehension)  , and then we are calling  round()  function on product of the elements present in tuple  (i, j)  returned by  zip() 's iteration.  



