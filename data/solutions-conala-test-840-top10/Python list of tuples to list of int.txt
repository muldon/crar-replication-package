Query: Python list of tuples to list of int
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22569211)
 Using a nested list comprehension: 

  >>> lst = [0, 2, (1, 2), 5, 2, (3, 5)]
>>> [y for x in lst for y in (x if isinstance(x, tuple) else (x,))]
[0, 2, 1, 2, 5, 2, 3, 5]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22569167)
  def untuppleList(lst):
    def untuppleList2(x):
        if isinstance(x, tuple):
            return list(x)
        else:
            return [x]
    return [y for x in lst for y in untuppleList2(x)]
  

 Then you can do  untuppleList([0, 2, (1, 2), 5, 2, (3, 5)]) . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22569169)
 One of solutions (using http://docs.python.org/2/library/itertools.html#itertools.chain): 

  >>> from itertools import chain
>>> l = [0, 2, (1, 2), 5, 2, (3, 5)]
>>> list(chain(*(i if isinstance(i, tuple) else (i,) for i in l)))
[0, 2, 1, 2, 5, 2, 3, 5]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53585575)
 Use  isinstance : 

  l = [(1,2,3),(4,5),6]
for i in l:
    if isinstance(i,int):
        print(i)
    elif isinstance(i,tuple):
        print(i[0])
# 1
# 4
# 6
  

 Using list comprehension, output as a form of list: 

  [i if isinstance(i,int) else i[0] for i in l]
# [1, 4, 6]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24043641)
 You can use http://funcy.readthedocs.org/en/latest/seqs.html#flatten function from my https://github.com/Suor/funcy library: 

  from funcy import flatten
flat_list = flatten(your_list)
  

 You can also peek at https://github.com/Suor/funcy/blob/1.0.0/funcy/seqs.py#L147. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39615610)
 You can first cast columns to  int  (if necessary), http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html and use list comprehension, where is necessary convert first and second value in  tuples  to  int  (default is  float ): 

  df.columns = df.columns.astype(int)

s = df.unstack()
tuples = [tuple((int(x[0]),int(x[1]),x[2])) for x in s[s>0].reset_index().values]
print (tuples)
[(2, 2, 0.027273000000000002), (3, 3, 0.101449), (3, 14, 5.0), (4, 4, 0.194245)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1645864)
 Kind of easy with python's slicing operator: 

  l2 = zip(l1[0::2], l1[1::2])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37498720)
 Use a list comprehension,  split  the items and convert each subitem to  int  using  map :    

  >>> result = [map(int, item.split(',')) for item in a_list ]
>>> result
[(56, 78), (72, 67), (55,66)]
  

 On python 3.x, you should convert the  map  object to a  tuple  

  >>> result = [tuple(map(int, item.split(','))) for item in a_list ]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41734047)
 One way to approach the problem is to cast to string each of the integers in sublists, join and convert to  int : 

  In [1]: l = [(1, 9, 7), (1, 5, 6), (1, 7), (1, 4), (7, 4), (7,)]

In [2]: [int("".join(map(str, item))) for item in l]
Out[2]: [197, 156, 17, 14, 74, 7]
  

 Or, using the power of tens (a variation of already posted answer by @AChampion): 

  In [3]: [sum(10 ** index * value for index, value in enumerate(reversed(item))) 
         for item in l]
Out[3]: [197, 156, 17, 14, 74, 7]
  



