Query: Python list of dicts, get max value index
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30546946)
 You can pass the  enumerate(ld)  to  max  function with a proper key : 

  >>> max(enumerate(ld),key=lambda (x,y):y['size'])[0]
1
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4392762)
 Here's a function that finds the dictionary's index position if it exists. 

  dicts = [{'id':'1234','name':'Jason'},
         {'id':'2345','name':'Tom'},
         {'id':'3456','name':'Art'}]

def find_index(dicts, key, value):
    class Null: pass
    for i, d in enumerate(dicts):
        if d.get(key, Null) == value:
            return i
    else:
        raise ValueError('no dict with the key and value combination found')

print find_index(dicts, 'name', 'Tom')
# 1
find_index(dicts, 'name', 'Ensnare')
# ValueError: no dict with the key and value combination found
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30546905)
 Tell  max()  how to calculate the maximum for a sequence of indices: 

  max(range(len(ld)), key=lambda index: ld[index]['size'])
  

 This'll return the index for which the  size  key is the highest: 

  >>> ld = [{'prop': 'foo', 'size': 100}, {'prop': 'boo', 'size': 200}]
>>> max(range(len(ld)), key=lambda index: ld[index]['size'])
1
>>> ld[1]
{'size': 200, 'prop': 'boo'}
  

 If you wanted that dictionary all along, then you could just use: 

  max(ld, key=lambda d: d['size'])
  

 and to get both the index  and  the dictionary, you could use  enumerate()  here: 

  max(enumerate(ld), key=lambda item: item[1]['size'])
  

  

  >>> max(ld, key=lambda d: d['size'])
{'size': 200, 'prop': 'boo'}
>>> max(enumerate(ld), key=lambda item: item[1]['size'])
(1, {'size': 200, 'prop': 'boo'})
  

 The  key  function is passed each element in the input sequence in turn, and  max()  will pick the element where the return value of that  key  function is highest. 

 Using a separate list to extract all the  size  values then mapping that back to your original list is not very efficient (you now need to iterate over the list twice).  list.index()  cannot work as it has to match the whole dictionary, not just one value in it. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39186865)
 You can flatten the values, then find the min and max: 

  from itertools import chain

flattened = list(chain(*(d.values() for d in list_of_dicts)))
print(min(flattened))
print(max(flattened))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4391722)
  tom_index = next((index for (index, d) in enumerate(lst) if d["name"] == "Tom"), None)
# 1
  

 If you need to fetch repeatedly from name, you should index them by name (using a dictionary), this way  get  operations would be O(1) time. An idea: 

  def build_dict(seq, key):
    return dict((d[key], dict(d, index=index)) for (index, d) in enumerate(seq))

info_by_name = build_dict(lst, key="name")
tom_info = info_by_name.get("Tom")
# {'index': 1, 'id': '2345', 'name': 'Tom'}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53771765)
 Ajax1234 provided a really good solution. If you want something of a beginner level, here's a solution. 

  ld = [{'a':1}, {'b':2, 'c':3}, {'d':4, 'e':5}]
ans = dict()
for value in ld:
     if len(value) in ans:
         ans[len(value)].append(value)
     else:
         ans[len(value)] = list()
         ans[len(value)].append(value)
ans[max(ans)]
  

 Basically, you add everything in a dictionary to get the maximum dictionary size to be the key, and dictionary list to be the value, and then get that maximum size list of dictionaries. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29405461)
 You can use the https://docs.python.org/3/glossary.html#term-key-function of  max : 

  >>> lod = [
... {'name': 'Tom', 'score': 60},
... {'name': 'Tim', 'score': 70},
... {'name': 'Tam', 'score': 80},
... {'name': 'Tem', 'score': 90}
... ]
... 
>>> max(lod, key=lambda x: x['score'])
{'name': 'Tem', 'score': 90}
  



