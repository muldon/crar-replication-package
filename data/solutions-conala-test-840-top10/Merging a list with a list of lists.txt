Query: Merging a list with a list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18873148)
  range  instead of  zip  

  a = [['John', 'Sergeant '], ['Jack', 'Commander '], ['Jill', 'Captain ']]
b = ['800','854','453']
c = [a[x]+[b[x]] for x in range(len(b))]
print c
  

 or update original list: 

  [a[x].append(b[x]) for x in range(3)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33213203)
 My solution:     

  df = pandas.merge(df1, df2, on='date', sort=False)
df['ids'] = df['ids_x'] + df['ids_y']
df = df.drop(['ids_x','ids_y'], 1)
  

 For merging two lists use  apply  function: 

  df['ids'] = df.apply(lambda row: list(set(row['ids'])), axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54605063)
 Use  zip()  with list-comprehension: 

  data1 = [[4,5,9],[4,7,2],[11,13,15]] 
data2 = [[1,2,3,7],[3,6,8,5],[12,10,15,17]]

data = [x+y for x, y in zip(data1, data2)]
# [[4, 5, 9, 1, 2, 3, 7], [4, 7, 2, 3, 6, 8, 5], [11, 13, 15, 12, 10, 15, 17]]
  

  
If you need it in normal loops way, you can get rid of one loop in your code (assuming both lists are of equal length): 

  data1 = [[4,5,9],[4,7,2],[11,13,15]]
data2 = [[1,2,3,7],[3,6,8,5],[12,10,15,17]]

for i in range(len(data1)):
    data1[i].extend(data2[i])

print(data1)
# [[4, 5, 9, 1, 2, 3, 7], [4, 7, 2, 3, 6, 8, 5], [11, 13, 15, 12, 10, 15, 17]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5209444)
  z = zip(x,y)
  

 will do your job. 

  >>> x = [1,2,3,4,5]
>>> y = ['a','b','c','d','e']
>>> z = zip(x,y)
>>> z
[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47265542)
  

  mergedlist = list_1 + list_2
  

 If you want that specific order in  mergedlist : 

  mergedlist = []
for i, entry in enumerate(list_1):
    mergedlist.extend([entry, list_2[i]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37309683)
 You could create iterators from those lists, loop through the ordering list, and call https://docs.python.org/3/library/functions.html#next on one of the iterators: 

  i1 = iter(['a', 'b', 'c'])
i2 = iter(['d', 'e'])
# Select the iterator to advance: `i2` if `x` == 1, `i1` otherwise
print([next(i2 if x else i1) for x in [0, 1, 0, 0, 1]]) # ['a', 'd', 'b', 'c', 'e']
  

 It's possible to generalize this solution to any number of lists as shown below 

  def ordered_merge(lists, selector):
    its = [iter(l) for l in lists]
    for i in selector:
        yield next(its[i])
  



  In [4]: list(ordered_merge([[3, 4], [1, 5], [2, 6]], [1, 2, 0, 0, 1, 2]))
Out[4]: [1, 2, 3, 4, 5, 6]
  

 If the ordering list contains strings, floats, or any other objects that can't be used as list indexes, use a dictionary: 

  def ordered_merge(mapping, selector):
    its = {k: iter(v) for k, v in mapping.items()}
    for i in selector:
        yield next(its[i])
  



  In [6]: mapping = {'A': [3, 4], 'B': [1, 5], 'C': [2, 6]}

In [7]: list(ordered_merge(mapping, ['B', 'C', 'A', 'A', 'B', 'C']))
Out[7]: [1, 2, 3, 4, 5, 6]
  

 Of course, you can use integers as dictionary keys as well. 

 

 Alternatively, you could remove elements from the left side of each of the original lists one by one and add them to the resulting list. Quick example: 

  In [8]: A = ['a', 'b', 'c']
   ...: B = ['d', 'e']
   ...: selector = [0, 1, 0, 0, 1]
   ...: 

In [9]: [B.pop(0) if x else A.pop(0) for x in selector]
Out[9]: ['a', 'd', 'b', 'c', 'e']
  

 I would expect the first approach to be more efficient ( list.pop(0)  is  slow ). 



