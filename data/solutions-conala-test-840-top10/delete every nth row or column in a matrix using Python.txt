Query: delete every nth row or column in a matrix using Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13244492)
 just iterate through that list and delete the index which you want to delete. 

 for example 

  for sublist in list:
    del sublist[index]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28925331)
 You can use  np.delete  giving the indices corresponding to every 8th row index. Let  a  be a 2D array or a matrix: 

  np.delete(a, list(range(0, a.shape[0], 8)), axis=0)
  

 note the use of  axis=0  indicating to operate along the rows. To operate along the columns: 

  np.delete(a, list(range(0, a.shape[1], 8)), axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13244560)
 This is a very easy way to remove whatever column you want. 

  L = [
["a","b","C","d"],
[ 1,  2,  3,  4 ],
["w","x","y","z"]
]
temp = [[x[0],x[1],x[3]] for x in L] #x[column that you do not want to remove]
print temp
O/P->[['a', 'b', 'd'], [1, 2, 4], ['w', 'x', 'z']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19760731)
 If your need to do this operation a lot you could transpose your matrix using  zip(*matrix)  

  >>> matrix = [[1, 3, 5, 2, 6, 2, 4, 1], [2, 6, 1, 6, 2, 5, 7], [1, 6, 2, 6, 8, 2, 6]]
>>> matrix_t = zip(*matrix)
>>> matrix_t
[(1, 2, 1), (3, 6, 6), (5, 1, 2), (2, 6, 6), (6, 2, 8), (2, 5, 2), (4, 7, 6)]
>>> matrix_t[0]
(1, 2, 1)
>>> matrix_t[3]
(2, 6, 6)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19761795)
 Use zip: 

  >>> matrix = [[1, 3, 5, 2, 6, 2, 4, 1], [2, 6, 1, 6, 2, 5, 7], [1, 6, 2, 6, 8, 2, 6]]
>>> zip(*matrix)[0]
(1, 2, 1)
>>> zip(*matrix)[4]
(6, 2, 8)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35313880)
 You can do it with a list comprehension: 

  >>> removed = [ l.pop(2) for l in L ]
>>> print L
[['a', 'b', 'd'], [1, 2, 4], ['w', 'x', 'z']]
>>> print removed
['d', 4, 'z']
  

 It loops the list and pops every element in position 2. 

 You have got list of elements removed and the main list without these elements. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19760710)
 http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions will work well here: 

  >>> matrix = [[1, 3, 5, 2, 6, 2, 4, 1], [2, 6, 1, 6, 2, 5, 7], [1, 6, 2, 6, 8, 2, 6]]
>>> # Get all the 0th indexes
>>> a = [item[0] for item in matrix]
>>> a
[1, 2, 1]
>>> # Get all the 4th indexes
>>> b = [item[4] for item in matrix]
>>> b
[6, 2, 8]
>>>
  



