Query: how to show Percentage in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8977088)
 In the newer Python (e.g., 2.6 or later), you can use  .format()  method. You will not need to escape your percent signs then: 

  s = '''<table width="90%">                                                                                
<tr>                                                                                                                                                                                                               
<td width="60%">HELLO</td>                                                                                                                                                                                         
<td width="40%">GOOD BYE</td>                                                                                                                                                                                      
</tr>                                                                                                                                                                                                              
</table>                                                                                                                                                                                                           
 <input type="button" value="BUTTON" onclick="function({funcarg})" /> '''

s.format(**{'funcarg': 'return'})
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/23764798)
 There is a way more convenient 'percent'-formatting option for the  .format()  format method: 

  >>> '{:.1%}'.format(1/3.0)
'33.3%'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5306787)
 http://docs.python.org/library/functions.html#format supports a percentage https://www.python.org/dev/peps/pep-3101/: 

  >>> print "{0:.0%}".format(1./3)
33%
  

 If you don't want integer division, you can import Python3's division from http://docs.python.org/2/library/__future__.html: 

  >>> from __future__ import division
>>> 1 / 3
0.3333333333333333

# The above 33% example would could now be written without the explicit
# float conversion:
>>> print "{0:.0f}%".format(1/3 * 100)
33%

# Or even shorter using the format mini language:
>>> print "{:.0%}".format(1/3)
33%
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8976760)
 You need to escape '%' as '%%' in python strings. The error message you're getting probably is about the other percent signs. If you put only single percent sign in a string python thinks it will be followed by a format character and will try to do a variable substitution there. 

  

  '''

....
<table width="90%%">
<tr>
<td width="60%%">HELLO</td>
<td width="40%%">GOOD BYE</td>
</tr>
</table>

<input type="button" value="BUTTON" onclick="function(%s)" /> ''' % variable
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52516671)
 You may use a  PercentFormatter  on the axes of the grid. 

  import seaborn as sns
import matplotlib.pyplot as plt
from  matplotlib.ticker import PercentFormatter
titanic = sns.load_dataset("titanic")

g = sns.catplot(x="who", y="survived", col="class",
                 data=titanic, saturation=.5,
                 kind="bar", ci=None, aspect=.6)

for ax in g.axes.flat:
    ax.yaxis.set_major_formatter(PercentFormatter(1))
plt.show()
  

 https://i.stack.imgur.com/Nm36Y.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5306788)
 You are dividing integers then converting to float. . 

 As a bonus, use the awesome string formatting methods described here: http://docs.python.org/library/string.html#format-specification-mini-language 

 To specify a percent conversion and precision. 

  >>> float(1) / float(3)
[Out] 0.33333333333333331

>>> 1.0/3.0
[Out] 0.33333333333333331

>>> '{0:.0%}'.format(1.0/3.0) # use string formatting to specify precision
[Out] '33%'

>>> '{percent:.2%}'.format(percent=1.0/3.0)
[Out] '33.33%'
  

  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5306789)
  

  print str(int(1.0/3.0*100))+'%'
  

 The  .0  denotes them as floats and  int()  rounds them to integers afterwards again. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32887122)
 In your case, it's easiest to use  ax.margins(some_percentage)</codeor equivalently  plt.margins(some_percentage) . 

 For example: 

  import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

x = np.linspace(0, 1)
y = np.sin(4 * np.pi * x) * np.exp(-5 * x)

ax.plot(x, y, 'r')
ax.grid(True)
ax.margins(0.05) # 5% padding in all directions

plt.show()
  

 https://i.stack.imgur.com/fMbhQ.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26294785)
 The code below will give you a simplified x-axis which is percentage based, it assumes that each of your values are spaces equally between 0% and 100%. 

 It creates a  perc  array which holds evenly-spaced percentages that can be used to plot with. It then adjusts the formatting for the x-axis so it includes a percentage sign using http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.FormatStrFormatter. Unfortunately this uses the old-style string formatting, as opposed to the new style, the old style docs can be found https://docs.python.org/2/library/stdtypes.html#string-formatting. 

  import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as mtick

data = [8,12,15,17,18,18.5]
perc = np.linspace(0,100,len(data))

fig = plt.figure(1, (7,4))
ax = fig.add_subplot(1,1,1)

ax.plot(perc, data)

fmt = '%.0f%%' # Format you want the ticks, e.g. '40%'
xticks = mtick.FormatStrFormatter(fmt)
ax.xaxis.set_major_formatter(xticks)

plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44778325)
 I solved this by splitting out the  groupby  operation: one to get your percentages and one to count the number of objects. 

 I adjusted your  percent_catergorical  function as follows: 

  def percent_categorical(item, df=IA, grouper='Active Status') :
    # plot categorical responses to an item ('column name')
    # by percent by group ('diff column name w categorical data')
    # select a data frame (default is IA)
    # 'Active Status' is default grouper

    # create groupby of item grouped by status
    groupbase = df.groupby(grouper)[item]
    # count the number of occurences
    groupcount = groupbase.count()       
    # convert to percentage by group rather than total count           
    groupper = (groupbase.value_counts(normalize=True)
                # rename column 
                .rename('percentage')
                # multiple by 100 for easier interpretation
                .mul(100)
                # change order from value to name
                .reset_index()
                .sort_values(item))

    # create plot
    fig, ax = plt.subplots()
    brplt = sns.barplot(x=item,
                         y='percentage',
                         hue=groupper,
                         data=groupper,
                         palette='RdBu',
                         ax=ax).set_xticklabels(
                                 labels = grouper[item
                                      ].value_counts().index.tolist(), rotation=90)
    # get the handles and the labels of the legend
    # these are the bars and the corresponding text in the legend
    thehandles, thelabels = ax.get_legend_handles_labels()
    # for each label, add the total number of occurences
    # you can get this from groupcount as the labels in the figure have
    # the same name as in the values in column of your df
    for counter, label in enumerate(thelabels):
        # the new label looks like this (dummy name and value)
        # 'XYZ (42)'
        thelabels[counter] = label + ' ({})'.format(groupcount[label])
    # add the new legend to the figure
    ax.legend(thehandles, thelabels)
    #show plot
    return fig, ax, brplt
  

 To get your figure: 

  fig, ax, brplt = percent_categorical('item', df=foobar, grouper='groups')
  

 The resulting graph looks like this: 

 https://i.stack.imgur.com/2bBNi.png 

 You can change the look of this legend how you want, I just added parentheses as an example. 



