Query: Removing elements from an array that are in another array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40055932)
 Another non-numpy solution: 

  [i for i in A if i not in B]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40055928)
 there is a easy solution with http://www.secnetix.de/olli/Python/list_comprehensions.hawk, 

  A = [i for i in A if i not in B]
  

  

  [[1, 1, 2], [1, 1, 3]]
  

 List comprehension it's not removing the elements from the array, It's just reassigning,  

 if you want to remove the elements use this method 

  for i in B:
     if i in A:
     A.remove(i)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2695995)
 You could convert the array into a http://docs.scipy.org/doc/numpy/reference/maskedarray.html, and use the http://docs.scipy.org/doc/numpy/reference/routines.ma.html#to-a-ndarray: 

  import numpy as np
a = np.array([[1, 5, np.nan, 6],
           [10, 6, 6, np.nan]])
a = np.transpose(a)
print(a)
# [[  1.  10.]
#  [  5.   6.]
#  [ NaN   6.]
#  [  6.  NaN]]
b=np.ma.compress_rows(np.ma.fix_invalid(a))
print(b)
# [[  1.  10.]
#  [  5.   6.]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40055892)
 If you want to do it the numpy way, 

  import numpy as np

A = np.array([[1, 1, 1,], [1, 1, 2], [1, 1, 3], [1, 1, 4]])
B = np.array([[0, 0, 0], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 4]])
A_rows = A.view([('', A.dtype)] * A.shape[1])
B_rows = B.view([('', B.dtype)] * B.shape[1])

diff_array = np.setdiff1d(A_rows, B_rows).view(A.dtype).reshape(-1, A.shape[1])
  

 As @Rahul suggested, for a non numpy easy solution, 

  diff_array = [i for i in A if i not in B]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31010638)
  new_array , as printed, looks like a list of arrays.  And even if it were an array, it would be a 1d array of dtype=object. 

  ==[]  is not the way to check for an empty array: 

  In [10]: x=np.zeros((0,4),float)
In [11]: x
Out[11]: array([], shape=(0, 4), dtype=float64)
In [12]: x==[]
Out[12]: False
In [14]: 0 in x.shape  # check if there's a 0 in the shape
Out[14]: True
  

 Check the syntax for  np.delete .  It requires an array, an index and an axis, and returns another array.  It does not operate in place. 

 If  new_array  is a list, a list comprehension would do a nice job of removing the  []  arrays: 

  In [33]: alist=[x, np.ones((2,3)), np.zeros((1,4)),x]

In [34]: alist
Out[34]: 
[array([], shape=(0, 4), dtype=float64), array([[ 1.,  1.,  1.],
        [ 1.,  1.,  1.]]), array([[ 0.,  0.,  0.,  0.]]), array([], shape=(0, 4), dtype=float64)]

In [35]: [y for y in alist if 0 not in y.shape]
Out[35]: 
[array([[ 1.,  1.,  1.],
        [ 1.,  1.,  1.]]), array([[ 0.,  0.,  0.,  0.]])]
  

 It would also work if  new_array  was a 1d array: 

  new_array=np.array(alist)
newer_array = np.array([y for y in new_array if 0 not in y.shape])
  

 To use  np.delete  with  new_array , you have to specify which elements: 

  In [47]: np.delete(new_array,[0,3])
Out[47]: 
array([array([[ 1.,  1.,  1.],
       [ 1.,  1.,  1.]]),
       array([[ 0.,  0.,  0.,  0.]])], dtype=object)
  

 to find  [0,3]  you could use  np.where : 

  np.delete(new_array,np.where([y.size==0 for y in new_array]))
  

 Better yet, skip the  delete  and  where  and go with a boolean mask 

  new_array[np.array([y.size>0 for y in new_array])]
  

 I don't think there's a way of identifying these 'emtpy' arrays without a list comprehension, since you have to check the shape or size property, not the element's data.  Also there's a limit as to what kinds of math you can do across elements of an object array.  It's more like a list than a 2d array. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2695532)
 I think  http://docs.python.org/tutorial/datastructures.html#list-comprehensions should do this. E.g., 

  new_a = [(val1, val2) for (val1, val2) in a if math.isnan(val1) or math.isnan(val2)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1624578)
 Is it what you want? I am a NumPy newbie.   

  In [1]: import numpy as np

In [2]: a = np.array([1,2,0,3,0,4])

In [3]: b = np.array([1,2,3,4,5,6])

In [4]: b[np.where(a)]  
Out[4]: array([1, 2, 4, 6])

In [5]: np.where(a)  
Out[5]: (array([0, 1, 3, 5]),)

In [6]: a[np.where(a)]  
Out[6]: array([1, 2, 3, 4])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23096466)
  

  b = array[array>=0]
  

 Example: 

  >>> import numpy as np
>>> arr = np.array([-2, -1.4, -1.1, 0, 1.2, 2.2, 3.1, 4.4, 8.3, 9.9, 10, 14, 16.2])
>>> arr = arr[arr>=0]
>>> arr
array([  0. ,   1.2,   2.2,   3.1,   4.4,   8.3,   9.9,  10. ,  14. ,  16.2])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2699169)
 If you want to take only the rows that have no NANs, this is the expression you need: 

  >>> import numpy as np
>>> a[~np.isnan(a).any(1)]
array([[  1.,  10.],
       [  5.,   6.]])
  

 If you want the rows that do not have a specific number among its elements, e.g. 5: 

  >>> a[~(a == 5).any(1)]
array([[  1.,  10.],
       [ NaN,   6.],
       [  6.,  NaN]])
  

 The latter is clearly equivalent to 

  >>> a[(a != 5).all(1)]
array([[  1.,  10.],
       [ NaN,   6.],
       [  6.,  NaN]])
  

  Explanation :
Let's first create your example input 

  >>> import numpy as np
>>> a = np.array([[1, 5, np.nan, 6],
...               [10, 6, 6, np.nan]]).transpose()
>>> a
array([[  1.,  10.],
       [  5.,   6.],
       [ NaN,   6.],
       [  6.,  NaN]])
  

 This determines which elements are NAN 

  >>> np.isnan(a)
array([[False, False],
       [False, False],
       [ True, False],
       [False,  True]], dtype=bool)
  

 This identifies which rows have any element which are True 

  >>> np.isnan(a).any(1)
array([False, False,  True,  True], dtype=bool)
  

 Since we don't want these, we negate the last expression: 

  >>> ~np.isnan(a).any(1)
array([ True,  True, False, False], dtype=bool)
  

 And finally we use the boolean array to select the rows we want: 

  >>> a[~np.isnan(a).any(1)]
array([[  1.,  10.],
       [  5.,   6.]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/7429344)
 Like resizing, removing elements from an numpy array is a slow operation (especially for large arrays since it requires allocating space and copying all the data from the original array to the new array).
. 

 Often you can do avoid it by working with a http://docs.scipy.org/doc/numpy/reference/maskedarray.generic.html instead. For example, consider the array  a : 

  import numpy as np

a = np.array([0,1,2,3,4,5,5,6,7,8,9])
print(a)
print(a.sum())
# [0 1 2 3 4 5 5 6 7 8 9]
# 50
  

 We can mask its value at index 3, and perform a summation  which ignores masked elements : 

  a = np.ma.array(a, mask=False)
a.mask[3] = True
print(a)
print(a.sum())
# [0 1 2 -- 4 5 5 6 7 8 9]
# 47
  

 Masked arrays also support http://docs.scipy.org/doc/numpy/reference/routines.ma.html besides  sum . 

 If you really need to, it is also possible to remove masked elements using the  compressed  method: 

  print(a.compressed())
# [0 1 2 4 5 5 6 7 8 9]
  

 . 



