Query: How to find a value in a list of python dictionaries?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33929941)
 Assuming that your "list of pairs" (actually list of dictionaries,  sigh ) cannot be changed: 

  from collections import defaultdict

def get_pair(d):
    return (d.keys()[0], d.values()[0])

def extract_unique(l):
    d = defaultdict(list)
    for key, value in map(get_pair, l):
        d[value].append(key)
    return filter(lambda (v,l): len(l) == 1, d.items())[0][1]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17149651)
  

  >>> match = next((l for l in label if l['name'] == 'Test'), None)
>>> print match
{'date': datetime.datetime(2013, 6, 17, 8, 56, 24, 2347),
 'name': 'Test',
 'pos': 6}
  

 Or possibly more clearly: 

  match = None
for l in label:
    if l['name'] == 'Test':
        match = l
        break
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33929758)
 If you have a dictionary you can quickly check and find the first value which is different from the next two values cycling around the keys of your dictionary. 

 Here's an example: 

  def find_different(d):
    k = d.keys()
    for i in xrange(0, len(k)):
        if d[k[i]] != d[k[(i+1)%len(k)]] and d[k[i]] != d[k[(i+2)%len(k)]]:
            return k[i]

>>> mydict = {'a':1, 'b':1, 'c':2, 'd':1}
>>> find_different(mydict)
'c'
  

 Otherwise, if what you have is a list of single-key dictionaries, then you can do it quite nicely mapping your list with a function which "extracts" the values from your elements, then check each one using the same logic. 

 Here's another working example: 

  def find_different(l):
    mask = map(lambda x: x[x.keys()[0]], l)
    for i in xrange(0, len(l)):
        if mask[i] != mask[(i+1)%len(l)] and mask[i] != mask[(i+2)%len(l)]:
            return l[i].keys()[0]

>>> mylist = [{'a':1},{'b':1},{'c':2},{'d':1}]
>>> find_different(mylist)
'c'
  

  NOTE : these solutions do not work in Python 3 as the  map  function doesn't return a  list  and neither does the  .keys()  method of dictionaries. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47656164)
 the first solution with the list comprehension is good.
but a small fix for python 3.x, instead of  .iteritems()  it should be just  .items() : 

  [k for k, v in d.items() if v == desired_value]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21783300)
  mylist= [{'powerpoint_color': 'blue', 'client_name': 'Sport Parents (Regrouped)'}, {'sort_order': 'ascending', 'chart_layout': '1', 'chart_type': 'bar'}]

print [d["sort_order"] for d in mylist if "sort_order" in d][0]
  

  

  ascending
  

 

 You could also combine all of the dictionaries into a single dict, and access that: 

  combined_d = {key: value for d in mylist for key,value in d.iteritems() }
print combined_d["sort_order"]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3694045)
 You can use defauldict, like this: 

  >>> import collections
>>> d = collections.defaultdict(list)
>>> d['foo'].append(9)
>>> d
defaultdict(<type 'list'>, {'foo': [9]})
>>> d['foo'].append(90)
>>> d
defaultdict(<type 'list'>, {'foo': [9, 90]})
>>> d['bar'].append(5)
>>> d
defaultdict(<type 'list'>, {'foo': [9, 90], 'bar': [5]})
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21298838)
  my_dict = {(1, 1):'2345', (1, 2):'234', (1, 3):'5678', (1, 4):'2387'}

from collections import defaultdict
d = defaultdict(list)
for k, v in my_dict.items():
    for char in v:
        d[char].append(k)
print {v[0]:k for k, v in d.items() if len(v) == 1}
  

 If you want to do it only with dictionaries 

  d = {}
for k, v in my_dict.items():
    for char in v:
        d.setdefault(char, []).append(k)
print {v[0]:k for k, v in d.items() if len(v) == 1}
  

  Output  

  {(1, 3): '6'}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54962057)
 You can use a <i>dictionary comprehension</i>, in order to keep those keys in  b  that are also present in  a : 

  {k:v for k,v in b.items() if k in a}
  

 <b> Output </b> 

  {'a': 5, 'b': 2}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17149592)
 You'd have to search through all dictionaries in your list; use http://docs.python.org/2/library/functions.html#any with a generator expression: 

  any(d['name'] == 'Test' for d in label)
  

 This will short circuit; return  True  when the  first  match is found, or return  False  if none of the dictionaries match. 



