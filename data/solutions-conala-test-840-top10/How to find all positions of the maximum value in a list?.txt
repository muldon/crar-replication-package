Query: How to find all positions of the maximum value in a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37418552)
  a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 
         55, 23, 31, 55, 21, 40, 18, 50,
         35, 41, 49, 37, 19, 40, 41, 31]

import pandas as pd

pd.Series(a).idxmax()

9
  

 That is how I usually do it. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3989029)
  a.index(max(a))
  

 will tell you the index of the first instance of the largest valued element of list  a . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26377337)
 You can also use the numpy package: 

  import numpy as np
A = np.array(a)
maximum_indices = np.where(A==max(a))
  

 This will return an numpy array of all the indices that contain the max value 

 if you want to turn this to a list: 

  maximum_indices_list = maximum_indices.tolist()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20780630)
 Similar idea with a list comprehension but without enumerate 

  m = max(a)
[i for i in range(len(a)) if a[i] == m]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3989320)
 Here is the max value and the indexes it appears at: 

  >>> from collections import defaultdict
>>> d = defaultdict(list)
>>> a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50, 35, 41, 49, 37, 19, 40, 41, 31]
>>> for i, x in enumerate(a):
...     d[x].append(i)
... 
>>> k = max(d.keys())
>>> print k, d[k]
55 [9, 12]
  

 

  

  >>> from itertools import takewhile
>>> import heapq
>>> 
>>> def popper(heap):
...     while heap:
...         yield heapq.heappop(heap)
... 
>>> a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50, 35, 41, 49, 37, 19, 40, 41, 31]
>>> h = [(-x, i) for i, x in enumerate(a)]
>>> heapq.heapify(h)
>>> 
>>> largest = heapq.heappop(h)
>>> indexes = [largest[1]] + [x[1] for x in takewhile(lambda large: large[0] == largest[0], popper(h))]
>>> print -largest[0], indexes
55 [9, 12]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22594868)
 You can use the built-in functions  max  and  min  to find the maximum and minimum values respectively and then use the list method  index  to find their indices in the list.  

  numlist = [1, 2, 3, 4, 5]

max_val = max(numlist)
min_val = min(numlist)

max_pos = numlist.index(max_val)
min_pos = numlist.index(min_val)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32416473)
 You may use https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html to find indices which are equal to maximum value: 

  >>> a
array([2, 5, 4, 4, 4, 2, 1, 1, 2, 2, 5, 4, 1, 4, 0, 0, 5, 1, 4, 1])
>>> np.nonzero(a == a.max())[0]
array([ 1, 10, 16])
>>> a[_]
array([5, 5, 5])
  



