Query: Sorting while preserving order in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3728064)
 If you have  numpy  installed: 

  import numpy
a=[2.3, 1.23, 3.4, 0.4]
a_sorted = numpy.sorted(a)
a_order = numpy.argsort(a)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3728030)
 You could do something like this: 

  >>> sorted(enumerate(a), key=lambda x: x[1])
[(3, 0.4), (1, 1.23), (0, 2.3), (2, 3.4)]
  

 If you need to indexing to start with 1 instead of 0, http://docs.python.org/library/functions.html#enumerate accepts the second parameter. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6542435)
 One quick way would be to use  zip : 

  >>> from operator import itemgetter
>>> transpose = zip(*table)
>>> transpose.sort(key=itemgetter(0))
>>> table = zip(*transpose)
>>> table
[('a', 'b', 'c'), (1, 2, 3), ('01', '10', '11')]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3728047)
 
 Use  enumerate  to generate the sequence numbers. 
 Use  sorted  with a  key  to sort by the floats 
 Use  zip  to separate out the order from the values 
 

 For example: 

  a_order, a_sorted = zip(*sorted(enumerate(a), key=lambda item: item[1]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6542819)
  # Get a list of indexes (js), sorted by the values in list1.
js = [t[1] for t in sorted((v,i) for i,v in enumerate(list1))]

# Use those indexes to build your new table.
sorted_table = [[row[j] for j in js] for row in table]
  

 See https://stackoverflow.com/questions/644170 for information on how Python sorts a list of tuples. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45998533)
 Stable sort keeps the order of those elements which are considered equal from the sorting point of view. Because tuples are compared element by element lexicographically,  (1, 2)  precedes  (1, 3) , so it should go first: 

  >>> (1, 2) < (1, 3)
True
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48522597)
 I think not, need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html for sorting columns names: 

  df = pd.concat(frames, axis = 1).sort_index(axis=1)
  

 If want sorted by indices positions: 

  L = list1 + list2 + list3
df1 = pd.concat(frames, axis = 1).reindex(columns=df.columns[sorted(L)])
  

 Or sorting in  iloc : 

  df_1 = df.iloc[:,sorted(list1)]
#carry out preprocessing
df_2 = df.iloc[:,sorted(list2)]
#carry out preprocessing
df_3 = df.iloc[:,sorted(list3)]
#carry out preprocessing
  

  Sample : 

  np.random.seed(100)
df = pd.DataFrame(np.random.randint(10, size=(5,10)), columns=list('EFGHIJABCD'))
print (df)
   E  F  G  H  I  J  A  B  C  D
0  8  8  3  7  7  0  4  2  5  2
1  2  2  1  0  8  4  0  9  6  2
2  4  1  5  3  4  4  3  7  1  1
3  7  7  0  2  9  9  3  2  5  8
4  1  0  7  6  2  0  8  2  5  1

list1 = [1,4,3]
list2 = [2,5,6]
list3 = [9,8,7]
  

 

  df_1 = df.iloc[:,list1]
#carry out preprocessing
df_2 = df.iloc[:,list2]
#carry out preprocessing
df_3 = df.iloc[:,list3]
#carry out preprocessing

#join the frames back together
frames = [df_1,df_2,df_3]
L = list1 + list2 + list3

df1 = pd.concat(frames, axis = 1).reindex(columns=df.columns[sorted(L)])
print (df1)
   F  G  H  I  J  A  B  C  D
0  8  3  7  7  0  4  2  5  2
1  2  1  0  8  4  0  9  6  2
2  1  5  3  4  4  3  7  1  1
3  7  0  2  9  9  3  2  5  8
4  0  7  6  2  0  8  2  5  1

df2 = pd.concat(frames, axis = 1).sort_index(axis=1)
print (df2)
   A  B  C  D  F  G  H  I  J
0  4  2  5  2  8  3  7  7  0
1  0  9  6  2  2  1  0  8  4
2  3  7  1  1  1  5  3  4  4
3  3  2  5  8  7  0  2  9  9
4  8  2  5  1  0  7  6  2  0
  

 EDIT: 

 If same columns names as values in list  L : 

  L.sort()
df = df[L]
  

  

  df = df[sorted(L)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52756662)
 use  defaultdict  to group the data ( groupby  would require sorting and would be unefficient / would kill the order), then print the sorted dictionary values (sorting isn't really necessary, it's just to stabilize the output): 

  import csv,collections

d = collections.defaultdict(list)

for row in csv.reader(txt):
    mac_address = row[3]
    d[mac_address].append(row)

print(sorted(d.values()))
  

  

  [[['BBCP1', 'Centre', '2141', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Yellow', '2142', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Purple', '2143', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Green', '2144', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Pink', '2145', '805EC0FFFFE3', '000000077']],
 [['BBCP1', 'Grey', '2140', '805EC0FFFFE2', '0000000066'],
  ['BBCP1', 'Test', '2150', '805EC0FFFFE2', '0000000066']],
 [['BBCP1', 'Test', '2151', '805EC0FFFFE1', '0000000066']]]
  

 sorting according to key (the mac address): 

  values = [v for _,v in sorted(d.items())]
  

 yields: 

  [[['BBCP1', 'Test', '2151', '805EC0FFFFE1', '0000000066']],
 [['BBCP1', 'Grey', '2140', '805EC0FFFFE2', '0000000066'],
  ['BBCP1', 'Test', '2150', '805EC0FFFFE2', '0000000066']],
 [['BBCP1', 'Centre', '2141', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Yellow', '2142', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Purple', '2143', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Green', '2144', '805EC0FFFFE3', '000000077'],
  ['BBCP1', 'Pink', '2145', '805EC0FFFFE3', '000000077']]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7844783)
  search_terms = ['a','b','c'] #User's search query, split into a list of strings
  

 You can accumulate the keys in the order of appearance
and can build-up the key frequencies in all in one pass.
Take advantage of sort stability to make a sort by decreasing frequency, then by order of appearance: 

  keys_in_order_of_appearance = []
key_frequency = defaultdict(int)

for item in search_terms:
    subquery = SomeEntity.all(keys_only=True)                   
    subquery.filter('SearchIndex = ', item) #SearchIndex is a StringListProperty
    #more filters...            
    subquery.order('-DateCreated')                  
    for returned_item in subquery:
        key = str(returned_item)
        if key not in key_frequency:
            key_order_of_appearance.append(key)
        key_frequency[key] += 1

keys = keys_in_order_of_appearance[:]   # order of appearance kept as secondary sort
keys.sort(key=key_frequency.__getitem__, reverse=True) # descending freq as primary sort
result = SomeEntity.get(ordered_key_list)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54378929)
 May be this could help, where you can get the result with single sorting! 

  pd.DataFrame(list(df.apply(lambda x : sorted((x,c) for x,c in zip(x,df.columns)),axis=1)),
             index=df.index)

         0           1              2
U1  (0.0, 'U2') (0.2, 'U3')     (1.0, 'U1')
U2  (0.0, 'U3') (0.4, 'U1')     (1.0, 'U2')
U3  (0.0, 'U1') (0.45, 'U2')    (1.0, 'U3')
  



