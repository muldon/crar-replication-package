Query: Python dict how to create key or append an element to key?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12906014)
 Use http://docs.python.org/library/stdtypes.html#dict.setdefault: 

  dic.setdefault(key,[]).append(value)
  

  help(dict.setdefault) : 

      setdefault(...)
        D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12906027)
 You can use http://docs.python.org/library/collections.html#collections.defaultdict in  collections . 

 An example from doc: 

  s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = defaultdict(list)
for k, v in s:
    d[k].append(v)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12906043)
 You can use a http://docs.python.org/library/collections.html#collections.defaultdict for this.  

  from collections import defaultdict
d = defaultdict(list)
d['key'].append('mykey')
  

 This is slightly more efficient than  setdefault  since you don't end up creating new lists that you don't end up using. Every call to  setdefault  is going to create a new list, even if the item already exists in the dictionary. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/327575)
 I think you want to use setdefault. It's a bit weird to use but does exactly what you need. 

  d.setdefault(t, []).append(c)
  

   .setdefault  method will return the element (in our case, a list) that's bound to the dict's key  t  if that key exists. If it doesn't, it will bind an empty list to the key  t  and return it. So either way, a list will be there that the  .append  method can then append the tuple  c  to. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12437233)
 You can use a  defaultdict : 

  from collections import defaultdict

d = defaultdict(list)

d['something'].append(3)
print d['something']
# > [3]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12906281)
 Here are the various ways to do this so you can compare how it looks and choose what you like.  I've ordered them in a way that I think is most  "pythonic" , and commented the pros and cons that might not be obvious at first glance: 

  Using  collections.defaultdict :  

  import collections
dict_x = collections.defaultdict(list)

...

dict_x[key].append(value)
  

 .  Cons: Not available in Python 2.4.x. 

  Using  dict().setdefault() :  

  dict_x = {}

...

dict_x.setdefault(key, []).append(value)
  

 Cons: Inefficient creation of unused  list() s. 

  Using  try ... except :  

  dict_x = {}

...

try:
    values = dict_x[key]
except KeyError:
    values = dict_x[key] = []
values.append(value)
  

  

  try:
    dict_x[key].append(value)
except KeyError:
    dict_x[key] = [value]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45407334)
 A simple approach would be to create a  defaultdict  that provides an empty list for new keys, and then for each list in your current dict, create a key for each element and append the original dict key to the new list: 

<pre class="lang-py prettyprint-override"> from collections import defaultdict

orig = {1: ['a'], 2: ['a', 'b'], 3: ['a'], 4: ['b', 'cd'], 6: ['a', 'cd']}
d = defaultdict(list)

for k, v in orig.items():
    for string in v:
        d[string].append(k)

# d = {'a': [1, 2, 3, 6], 'b': [2, 4], 'cd': [4, 6]}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48627353)
 As far as I am aware, this can't be done in a  comprehension , but you can use https://docs.python.org/3/library/stdtypes.html#dict.setdefault to make every 2nd element of each list in  lst1  a  key  in a  dictionary  which you can then immediately  append  the slice up to it (as you were doing). The neatness of  setdefault  is that we can  append  to a  key  if it is already there, or create that  key  and  then append  if it is not. Both actions being done without an  if-statement . 

  d = {}
for l in lst1:
    d.setdefault(l[2], []).append(l[:2])
  

  

  {'Brazil': [['Banana', 5.0]],
 'Greece': [['Pear', 12.0]],
 'Swiss': [['Apple', 20.0], ['Strawberry', 25.0]],
 'Peru': [['Mango', 3.0], ['Avacado', 7.0]]}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/327558)
  dict=[]  //it's not a dict, it's a list, the dictionary is dict={}
elem=[1,2,3]
dict.append(elem)
  

 you can access the single element in this way: 

  print dict[0] // 0 is the index
  

 the output will be: 

  [1, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/14767417)
 If you have a list of tuples then you can simply create a dictionary from the tuple list and utilize the first element as a dict key like so: 

  >>> import collections
>>> l = [('a', 'foo'), ('a', 'bar'), ('b', 'hello')]
>>> d = collections.defaultdict(list)
>>> for k, v in l:
...   d[k].append(v)
... 
>>> d
defaultdict(<type 'list'>, {'a': ['foo', 'bar'], 'b': ['hello']})
>>> d['a']
['foo', 'bar']
  



