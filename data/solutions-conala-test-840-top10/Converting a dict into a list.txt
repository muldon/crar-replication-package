Query: Converting a dict into a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29331059)
 You could use dict_comprehension. 

  >>> dict1 = {'Lou': ['Male', '15', '2'],'Jen':['Female','10','3']}
>>> {x:y for x,y in dict1.items() if int(y[1]) > 14}
{'Lou': ['Male', '15', '2']}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11352027)
 given a  dict , this will combine all items to a tuple 

  sum(dict.items(),())
  

 if you want a list rather than a tuple 

  list(sum(dict.items(),()))
  

 for example 

  dict = {"We": "Love", "Your" : "Dict"}
x = list(sum(dict.items(),()))
  

  x  is then 

  ['We', 'Love', 'Your', 'Dict']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40954452)
 You can do this through a dict comprehension.  This will loop through the list, splitting each item into two parts using the first for the dict key and the second for the value.     

  example_dict = {x.split(":")[0]: x.split(":")[1] for x in example_list if x}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11351913)
 This should do the trick: 

  [y for x in dict.items() for y in x]
  

 For example: 

  dict = {'one': 1, 'two': 2}

print([y for x in dict.items() for y in x])
  

 This will print: 

  ['two', 2, 'one', 1]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11231128)
 Converting from  dict  to  list  is made easy in Python. Three examples: 

  d = {'a': 'Arthur', 'b': 'Belling'}

d.items() [('a', 'Arthur'), ('b', 'Belling')]

d.keys() ['a', 'b']

d.values() ['Arthur', 'Belling']
  

 as seen in a previous answer, https://stackoverflow.com/questions/1679384/converting-python-dictionary-to-list. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42558287)
 Use a dict-comprehension: 

  >>> l = [{'A':123},{'B':234},{'C':345}]
>>> d = {k: v for dct in l for k, v in dct.items()}
>>> d
{'A': 123, 'B': 234, 'C': 345}
  

 However it's probably opinion-based if that's the "syntactically cleanest way" but I like it. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49459068)
  zip  is what you want here to obtain corresponding items from the sublists. Then you can use a dict comprehension to build the dictionary. 

  my_dict = {rec[0]: list(rec[1:]) for rec in zip(*my_list)}
# {'key1': [1, 'a'], 'key2': [2, 'b']}
  

 You can leave out the  list()  call if you're OK with the dict values being tuples. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32723674)
 You shouldn't convert your  dict  to an  OrderedDict , you should be using an  OrderedDict  in the first place: 

  from collections import OrderedDict

od = OrderedDict()
od['c'] = 1
od['f'] = 2
od['a'] = 3
  

 Or often easier, create the  OrderedDict  from a  list  of tuples or a  tuple  of  tuples : 

  od = OrderedDict([('c', 1), ('f', 2), ('a', 3)])
  

 The problem with converting a  dict  to an  OrderedDict  is that as soon as you create a  dict  or add anything into it, the order is lost. So you can't use a  dict  at all if you need to keep the order. 



