Query: Python: elegant way of creating a list of tuples?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12655042)
 You could try something like this: 

  result = [tuple([ai, bi] + ci) for ai, bi, ci in zip(a, b, c)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42845817)
  d = {x:dict(zip(my_list, my_line.split(','))) for x in my_master_list}
        ^   ^                      ^
        |   |                     [1]--- creates a list from the string
        |   |
        |  [2]--- creates a tuple from two lists
        |
       [3]--- creates a dictionary from the tuples (key, value)
 ^
 |
[4] The overall expression is a dictionary comprehension.
  

 Read about dict comprehensions in https://www.python.org/dev/peps/pep-0274/. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12816825)
 In fact, you do not necessarily need a tuple for create a choice, quite a list: 

  >>> d = {'AL' : 'Alabama', 'AK' : 'Alaska',}
>>> d.items()
[('AK', 'Alaska'), ('AL', 'Alabama')]
  

  

  >>> tuple(d.items())
(('AK', 'Alaska'), ('AL', 'Alabama'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45542191)
 Would this be enough 

  celebr = ['Tony','Harry','Katty','Sam']
perc = [69,31,0,0]

dlist = []

for i, j in zip(celebr, perc):
    dlist.append({i: j})

print dlist
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44012160)
 Not that elegant as @ayhan's solution: 

  In [21]: pd.DataFrame(list(d), columns=['Col1','Col2']).assign(Col3=d.values())
Out[21]:
     Col1 Col2  Col3
0   first  row     3
1  second  row     1
  

  

  In [27]: pd.DataFrame([[k[0],k[1],v] for k,v in d.items()]) \
           .rename(columns={0:'Col1',1:'Col2',2:'Col2'})
Out[27]:
     Col1  Col2  Col2
0   first   row     3
1  second   row     1
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11506471)
 If the overhead of creating new objects is not an issue, I think it's pretty clear to go with: 

  def transform(obj):
    _type = type(obj)
    if _type == tuple: _type = list
    rslt = _type()
    if isinstance(obj, dict):
        for k, v in obj.iteritems():
            rslt[k] = transform(v)
    elif isinstance(obj, (list, tuple)):
        for x in obj:
            rslt.append(transform(x))
    elif isinstance(obj, set):
        for x in obj:
            rslt.add(transform(x))
    elif isinstance(obj, (int, long)):
        rslt = hex(obj)
    else:
        rslt = obj

    return rslt

element = transform(element)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9082884)
 The first solution is elegant, but you could also use a generator expression instead of a list comprehension: 

  ((x, y) for x in range(width) for y in range(height))
  

 This might be more efficient, depending on what you're doing with the data, because it generates the values on the fly and doesn't store them anywhere.  

 This also produces a generator; in either case, you have to use  list  to convert the data to a list. 

  >>> list(itertools.product(range(5), range(5)))
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), 
 (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), 
 (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]
  

 Note that if you're using Python 2, you should probably use  xrange , but in Python 3,  range  is fine. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28553896)
 The simplest way is to use https://docs.python.org/3/library/functions.html#zip function, with a https://docs.python.org/2/reference/expressions.html#generator-expressions, like this 

  tuple(l * r for l, r in zip(left, right))
  

 For example, 

  >>> tuple(l * r for l, r in zip((1, 2, 3), (1, 2, 3)))
(1, 4, 9)
>>> tuple(l * r for l, r in zip((0.6, 3.5), (4, 4)))
(2.4, 14.0)
  

 In Python 2.x, <a href="https://docs.python.org/2/library/functions.html#zip"  returns a list of tuples. If you want to avoid creating the temporary list, you can use https://docs.python.org/2/library/itertools.html#itertools.izip, like this 

  >>> from itertools import izip
>>> tuple(l * r for l, r in izip((1, 2, 3), (1, 2, 3)))
(1, 4, 9)
>>> tuple(l * r for l, r in izip((0.6, 3.5), (4, 4)))
(2.4, 14.0)
  

 You can read more about the differences between  zip  and  itertools.izip  in https://stackoverflow.com/q/4989763/1903116. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45542258)
 Your example merely creates a list containing the dicts  items . Your question asks for a list of sets. If you really want individual dicts then use a colon to separate the key and the value: 

  >>> [{k, v} for (k, v) in d.items()]
[{'Tony', 69}, {'Harry', 31}, {'Katty', 0}, {'Sam', 0}]
>>> [{k: v} for (k, v) in d.items()]
[{'Tony': 69}, {'Harry': 31}, {'Katty': 0}, {'Sam': 0}]
  



