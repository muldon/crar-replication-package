Query: Extracting date from a string in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3276190)
 If the date is given in a fixed form, you can simply use a regular expression to extract the date and "datetime.datetime.strptime" to parse the date: 

  match = re.search(r'\d{4}-\d{2}-\d{2}', text)
date = datetime.strptime(match.group(), '%Y-%m-%d').date()
  

 Otherwise, if the date is given in an arbitrary form, you can't extract it easily. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18341670)
 Using http://niemeyer.net/python-dateutil: 

  In [24]: import dateutil.parser as parser

In [28]: parser.parse('Jun-03').year  # assumes the current year
Out[28]: 2013

In [29]: parser.parse('08/09/2012').year
Out[29]: 2012

In [30]: parser.parse('2012').year
Out[30]: 2012
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52422062)
 To keep things easy, use:  

<pre class="lang-python prettyprint-override"> import datetime, dateutil.parser
dateutil.parser.parse("Tue, 21 Sep 2010 14:16:17 +0000").strftime('%X')
# '14:16:17'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4325259)
 I don't know MongoDB, but shouldn't something like this work? 

  SELECT * FROM Database WHERE Date LIKE '%15:00:00%'
  

 If you have a date string, the only place it contains colons will be the time part of the date, so that should be good enough without a regex. It would be better, of course, if you had an actual timestamp instead of a string in your date field. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3276459)
 Using http://labix.org/python-dateutil: 

  In [1]: import dateutil.parser as dparser

In [18]: dparser.parse("monkey 2010-07-10 love banana",fuzzy=True)
Out[18]: datetime.datetime(2010, 7, 10, 0, 0)
  

 Invalid dates raise a  ValueError : 

  In [19]: dparser.parse("monkey 2010-07-32 love banana",fuzzy=True)
# ValueError: day is out of range for month
  

 It can recognize dates in many formats: 

  In [20]: dparser.parse("monkey 20/01/1980 love banana",fuzzy=True)
Out[20]: datetime.datetime(1980, 1, 20, 0, 0)
  

 Note that it makes a guess if the date is ambiguous: 

  In [23]: dparser.parse("monkey 10/01/1980 love banana",fuzzy=True)
Out[23]: datetime.datetime(1980, 10, 1, 0, 0)
  

 But the way it parses ambiguous dates is customizable: 

  In [21]: dparser.parse("monkey 10/01/1980 love banana",fuzzy=True, dayfirst=True)
Out[21]: datetime.datetime(1980, 1, 10, 0, 0)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14230204)
 Do you need to keep the microsecond?  

  >>> import re
>>> log = "2013-01-09 06:13:51,464 DEBUG module"
>>> p = re.compile("\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d*")
>>> time_str = p.findall(log)[0]
>>> time_str
'2013-01-09 06:13:51,464'
>>> from datetime import datetime
>>> date_time = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S,%f')
>>> date_time
datetime.datetime(2013, 1, 9, 6, 13, 51, 464000)
  

 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16313889)
 I recommend using  split  

  >>> s="A:01 What is the date of the election ?"
>>> " ".join(s.split()[1:-1])
'What is the date of the election'
>>> s="BK:02 How long is the river Nile ?"
>>> " ".join(s.split()[1:-1])
'How long is the river Nile'
>>> s="Date:30/4/2013"
>>> s.split(":")[1:][0]
'30/4/2013'
>>> s="Day:Tuesday"
>>> s.split(":")[1:][0]
'Tuesday'
  



