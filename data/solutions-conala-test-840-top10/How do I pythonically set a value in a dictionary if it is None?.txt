Query: How do I pythonically set a value in a dictionary if it is None?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18663052)
 You can use  dict.setdefault  : 

  count.setdefault('a', 0)
  

 help on  dict.setdefault : 

  >>> print dict.setdefault.__doc__
D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18663271)
  setdefault  is the best answer, but for the record, the Pythonic way to check for a key in a  dict  is using the  in  keyword: 

  if 'a' not in count:
    count['a'] = 0
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46329067)
 https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects are already set-like in Python 3.  You can remove  set() : 

  for key in da.keys() & db.keys():
    print(key, da[key], db[key])
  

 In Python 2: 

  for key in da.viewkeys() & db.viewkeys():
    print key, da[key], db[key]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54640596)
 You can use https://docs.python.org/3/library/stdtypes.html#dict.setdefault to  invert  the dictionary: 

  my_dict = {1: [3], 2: [4, 5, 6], 3: [1, 2], 4: [5, 6], 5: [4, 6], 6: [4, 5]}

new_dict = {}
for key, values in my_dict.items():
    for value in values:
        new_dict.setdefault(value, []).append(key)

print(new_dict)
  

  Output  

  {1: [3], 2: [3], 3: [1], 4: [2, 5, 6], 5: [2, 4, 6], 6: [2, 4, 5]}
  

 The idea is to iterate over each (key, values) pair then use each value as key,  setdefault  will handle the case when the key is missing. An alternative will be to set the empty list as default value for each new key in  new_dict , for example: 

  # set the empty list for each new key in new_dict
new_dict = {}
for values in my_dict.values():
    for value in values:
        new_dict[value] = []

# fill new_dict
for key, values in my_dict.items():
    for value in values:
        new_dict[value].append(key)
  

 This will produce the same output as above, a third option will be to use https://docs.python.org/3/library/collections.html and skip the first loop: 

  from collections import defaultdict

my_dict = {1: [3], 2: [4, 5, 6], 3: [1, 2], 4: [5, 6], 5: [4, 6], 6: [4, 5]}

new_dict = defaultdict(list)
for key, values in my_dict.items():
    for value in values:
        new_dict[value].append(key)

print(new_dict)
  

  Output  

  defaultdict(<class 'list'>, {1: [3], 2: [3], 3: [1], 4: [2, 5, 6], 5: [2, 4, 6], 6: [2, 4, 5]})
  

 Note that this returns a defaultdict, that is a sub-class of dict. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54640836)
 Just for completeness, here is another version using dict comprehension: 

  from itertools import chain
my_dict = {1: [3], 2: [4,5,6], 3: [1,2], 4: [5,6], 5: [4,6], 6: [4,5]}

vals = set(chain.from_iterable(my_dict.values()))
d = {val:[k for k, v in my_dict.items() if val in v] for val in vals}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7235661)
 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of name and score and you want to sort on 'score': 

  import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
  

 sorting with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorting with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  

 The order of 'key' and 'value' in the listed tuples is (value, key), but now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this: 

      player = best[1]
    player.name
        'Richard'
    player.score
         7
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7688516)
 You can use the dictionary method  get , whose second argument is the default value to return if no value exists in the dictionary. 

  start = request.get('start', 0)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21372257)
 Try this, it's a pythonic solution: 

  def min_if_exists(list_of_nums):
    try:
        return min(x for x in list_of_nums if x is not None)
    except ValueError:
        return None
  

 Remember: in Python, it's easier to ask for forgiveness than permission! quoting the http://docs.python.org/2/glossary.html: 

 
   This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL (look before you leap) style common to many other languages such as C. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7248403)
 <b>Create a list of namedtuples</b> 

 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of 'name' as keys and 'score' as values like: 

  d = {'John':5, 'Alex':10, 'Richard': 7}
  

 You can list the items as tuples, sorted if you like, and get the name and score of, let's say the player with the highest score (index=0) very Pythonically like this: 

  >>> player = best[0]

>>> player.name
        'Alex'
>>> player.score
         10
  

 How to do this: 

 <b>list in random order or keeping order of http://docs.python.org/library/collections.html#collections.OrderedDict:</b> 

  import collections
Player = collections.namedtuple('Player', 'name score')
players = list(Player(*item) for item in d.items())
  

 <b> in order, sorted by value ('score'):</b> 

  import collections
Player = collections.namedtuple('Player', 'score name')
  

 sorted with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorted with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/7237524)
 It can often be very handy to use <b>http://docs.python.org/library/collections.html#collections.namedtuple</b>. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score': 

  import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
  

 sorting with lowest score first: 

  worst = sorted(Player(v,k) for (k,v) in d.items())
  

 sorting with highest score first: 

  best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
  

 Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this: 

  player = best[1]
player.name
    'Richard'
player.score
    7
  



