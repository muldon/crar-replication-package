Query: getting string between 2 characters in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47295229)
 You could use  re.escape  to escape all the special regex characters in the string, and then enclose the escaped string into  [...]  so it matches any of them. 

  >>> re.sub("[%s]" % re.escape('!~@#$%^&*()-+={}[]:;<.>?/\''), '_', table)
'123____________|___"_______\\__,__'
  

 However, as you are not really using that regex as a regex, you might instead just check whether each character is in that string: 

  >>>''.join("_" if c in '!~@#$%^&*()-+={}[]:;<.>?/\'' else c for c in table)
'123____________|___"_______\\__,__'
  

 Or to make the lookup a bit faster, create a  set  from the chars in that string first: 

  >>> bad_chars = set('!~@#$%^&*()-+={}[]:;<.>?/\'')
>>> ''.join("_" if c in bad_chars else c for c in table)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29836515)
  .replace() function: 

  > 'aaba'.replace('a','').replace('b','')
< ''
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27758396)
 To get the character of a string  a  at index  i  you want to do  a[i] . However, if I'm understanding the problem correctly, there is an easier way to do what you want. 

 You can https://docs.python.org/2/tutorial/introduction.html#strings the last 6 characters of a string,  a  like so: 

  a[-6:]
  

 This will give you a 6-character string (assuming  a  has that many characters.) 

 So to concatenate the last 6 characters of a string to itself, you can do 

  a += a[-6:]
  

 i.e, you don't need to do this character by character. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13190993)
 If you need all occurrences: 

  import re

text = "ABCDEYYFGHIAAJKVLMNOPDCQRSTAAVVVUVWXYZ"
chars = "ADVY"
positions = [m.start() for m in re.finditer("|".join(map(re.escape, chars)), text)]
print(positions)
  

 http://ideone.com/3OxG07</h3>

  [0, 3, 5, 6, 11, 12, 15, 21, 27, 28, 29, 30, 31, 33, 36]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16135856)
 That depends on what you're actually working with. 

 There are two different types of 'string', the c++  string  class and the standard C-String. 

 The C-String is basically an array of characters, so you'd iterate over it with a for loop like this: 

  for(int i = Begin; i < Max; ++i) printf("%c", a[i]);
  

 Alternatively you could do this with: 

  printf("%3s", &a[Begin]);
  

 Where 3 is the number of characters you want...however for this to work, you'd have to know the part of the string you want at compile time (or construct the formatting string dynamically with sprintf. 

 If you wish to use the C++  string  you can use the  substr  function. 

  string a = "hello";
string b = a.substr(1, 4);  //b is 'ello'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29836521)
 The usual tool for this job is  str.translate  

<p 

  >>> 'hello=potato'.translate(None, '=p')
'hellootato'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29836554)
 My usual tool for this is the regular expression. 

  >>> import re
>>> invalidCharacters = r'[=p H]'
>>> mystring = re.sub(invalidCharacters, '', ' poH==hHoPPp p')
'ohoPP'
  

 If you need to constrain the number (i.e., the count) of characters you remove, see the  count  argument. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53380726)
 You can use a regular expression. 

  >>> import re
>>> 
>>> s = 'Hi %how are %YOU786$ex doing'
>>> re.findall('%([a-z]+)', s.lower())
>>> ['how', 'you']
  

 https://regex101.com/r/hPratm/2 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41491607)
 The documentation defines a string literal in this way: 

  stringliteral   ::=  [stringprefix](shortstring | longstring)
  

 You're using the  r  stringprefix. 

 Then we have these definitions for characters in the strings: 

  shortstringchar ::=  <any source character except "\" or newline or the quote>
longstringchar  ::=  <any source character except "\">
  

 where you will notice that the backwards slash is  not  one of the characters allowed in a  shortstring  or a  longstring . 



