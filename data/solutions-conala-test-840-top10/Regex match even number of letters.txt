Query: Regex match even number of letters
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2045187)
  'A*'  means match any number of  A 's.  Even 0. 

 Here's how to match a string with an even number of a's, upper or lower: 

  re.compile(r'''
    ^
    [^a]*
    (
        (
            a[^a]*
        ){2}
    # if there must be at least 2 (not just 0), change the
    # '*' on the following line to '+'
    )* 
    $
    ''',re.IGNORECASE|re.VERBOSE)
  

 You probably are using  a  as an example.  If you want to match a specific character other than  a , replace  a  with  %s  and then insert 

  [...]
$
'''%( other_char, other_char, other_char )
[...]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2045208)
 Try this regular expression: 

  ^[^A]*((AA)+[^A]*)*$
  

 And if the  A s donâ€™t need to be consecutive: 

  ^[^A]*(A[^A]*A[^A]*)*$
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2045286)
 '*' means 0 or more occurences
'AA' should do the trick. 

 The question is if you want the thing to match 'AAA'. In that case you would have to do something like: 

  r = re.compile('(^|[^A])(AA)+(?!A)',)
r.search(p)
  

 That would work for match even (and only even) number of'A'. 

 Now if you want to match 'if there is any even number of subsequent letters', this would do the trick: 

  re.compile(r'(.)\1')
  

 However, this wouldn't exclude the 'odd' occurences. But it is not clear from your question if you really want that. 

 Update:
This works for you test cases: 

  re.compile('^([^A]*)AA([^A]|AA)*$')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2047291)
 This searches for a block with an odd number of A's. If you found one, the string is bad for you: 

  (?<!A)A(AA)*(?!A)
  

 If I understand correctly, the Python code should look like: 

  if re.search("(?<!A)A(AA)*(?!A)", "AeAAi"):
   print "fail"
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54351867)
 You may use 

  ^[A-Za-z0-9]*?([0-9]+)$
  

 See the https://regex101.com/r/aCoDlc/1 

  Details  

 
  ^  - start of string 
  [A-Za-z0-9]*?  - any letters/digits, zero or more times, as few as possible (due to this non-greedy matching, the next pattern,  ([0-9]+) , will match all digits at the end of the string there are) 
  ([0-9]+)  - Group 1: one or more digits 
  $  - end of string. 
 

  

  m = re.search(r'^[A-Za-z0-9]*?([0-9]+)$') # Or, see below
# m = re.match(r'[A-Za-z0-9]*?([0-9]+)$') # re.match only searches at the start of the string
# m = re.fullmatch(r'[A-Za-z0-9]*?([0-9]+)') # Only in Python 3.x 
if m:
    print(m.group(1))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21698832)
 Use a capture group to get the letters after the extra capitals. 

  re.sub(r'^[A-Z]+([A-Z][a-z])', r'\1', string)
  

 This matches a sequence of uppercase letters, followed by an uppercase and then lowercase letter. The parentheses cause the match for the last two letters to be put in a capture group. In the replacement  \1  is replaced with the contents of the first capture group. 

 Or you can use lookahead: 

  re.sub(r'^[A-Z]+(?=[A-Z][a-z])', '', string)
  

 A lookahead specifies that the pattern matches only if it's followed by a match for the sub-pattern, but that sub-pattern isn't included in the match. So this matches a sequence of uppercase letters that must be followed by an uppercase and then lowercase letter. But only the initial sequence of uppercase letters is included in the match, which then gets replaced by the empty string. 

 Go to http://regular-expressions.info to learn all about regexp. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50736433)
 Since  a  is a string,  split  in your case only accepts a literal string to split, not a regex. To split with a regex pattern, you need  re.split . 

 However, you may use 

  import re
a = 'readyM01JUN_01_18_0144.xlsx'
m = re.search(r'\d([^_\d]+)_\d', a) # Or, r'\d([a-zA-Z]+)_\d'
if m:
    print(m.group(1))
  

 See the https://ideone.com/1ZmGyy 

  Pattern details  

 
  \d  - a digit 
  ([^_\d]+)  - Group 1 matching and capturing ( m.group(1)  will hold this value) 1+ chars other than digits and  _  (you may even use  ([a-zA-Z]+)  to match 1+ ASCII letters) 
  _\d  - a  _  and a digit. 
 

 See the https://regex101.com/r/GH4SYO/1. 

 Note that  re.search  returns the  first  leftmost match. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21611637)
 This is a bit complicated (if I understand your requirements): 

  regex = re.compile(
    r"""\b           # Match the start of a word
    [^\W\d_aeiou]*   # Match any number letters except vowels
    [aeiou]+         # Match one or more vowels
    [^\W\d_aeiou]*   # Match any number letters except vowels
    \b               # Match the start of a word""", 
    re.VERBOSE|re.IGNORECASE)
  

 You can then use it like this: 

  >>> regex.findall("A boy named Sue tried to kill a swamp monkey, but failed miserably. He then cried. Boo hoo.")
['A', 'boy', 'Sue', 'tried', 'to', 'kill', 'a', 'swamp', 'but', 'He', 'then', 'cried', 'Boo', 'hoo']
  

  Explanation: 
 

  [^\W\d_aeiou]  is a bit hard to understand: 

 
  \w  matches any letter, digit or underscore. 
  \W  matches any character that  \w  doesn't match. 
  [^\W]  therefore matches the same as  \w . But we can now add more characters to this negated character class that should be subtracted from the set of valid characters. 
  [^\W\d_aeiou]  therefore matches anything that  \w  matches, but without the digits, underscore or vowels. 
 The upside of this approach (instead of using  [bcdfghjklmnpqrstvwxyz]  is that  \w  is Unicode-aware (natively in Python 3, by request in Python 2 if you add the  re.U  flag) and will therefore not be limited to ASCII letters. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42740330)
 use  $  to match the end of the string, and non-matching lookbehind to check if the uppercase letters come after lowercase letters: 

  import re
name = "North CarolinaUNC"
name = re.sub(r"(?<=[a-z])[A-Z]+$","", name)
  

 results in  North Carolina  all right. 

 And with that expression,  "North Carolina UNC"  stays unmodified because the uppercase letters, even if at the end of the string, do not come after a lowercase letter. 



