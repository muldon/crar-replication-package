Query: Finding the sum of a nested list of ints
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15413788)
  sum(sum(a, []))
  

 The inner sum combines all the individual lists into one list. The outer sum then finds the actual sum. 

 For lists that are nested more than one deep, you can use this: 

  def recursiveSum(data):
    try:
        total = 0
        for item in data:
            total += recursiveSum(item)
        return total
    except TypeError: #data isn't iterable, it's probably a number
        return data

print recursiveSum([[[[1,2,3],[4,1]],[2,2,6]],3])
  

 output: 

  24
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25047602)
 One approach is to use a https://docs.python.org/2/tutorial/classes.html#generator-expressions: 

  total = sum(int(v) for name,v in table)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15413873)
 This does not create a new temporary list: 

  sum(sum(b) for b in a)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25047706)
 If you want to use lambda the following should solve it: 

  total = sum(map(lambda x: int(x[1]), table))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25047865)
 You can also get at the values in a dictionary: 

  total = sum(map(int, dict(table).values())
  

 This may be a little obscure. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15856198)
 You can use flatten function in the compiler.ast module to flatten the list. Then simply sum up all the elements. 

  >>> lists =  [1,[2,3],4]
>>> from compiler.ast import flatten
>>> sum(flatten(lists))
10
  

  EDIT : Only works with Python 2. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25047611)
  sum(map(int,zip(*table)[-1]))
  

 is one way to do it ... there are many options however 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2153459)
  a = [sum(x)/len(x) for x in zip(*a)]
# a is now [4, 5, 6] for your example
  

 In Python 2.x, if you don't want integer division, replace  sum(x)/len(x)  by  1.0*sum(x)/len(x)  above. 

 http://docs.python.org/library/functions.html#zip. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53227760)
 I'd use a function to calculate the sum for each state, then do the overall sum afterwards: 

  import itertools
from math import exp

def each_state(products):
     for state in products:
         yield sum(state)


Z = sum(exp(x) for x in each_state(itertools.product([1,-1],repeat=5)))
  



