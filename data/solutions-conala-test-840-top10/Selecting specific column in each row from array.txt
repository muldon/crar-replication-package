Query: Selecting specific column in each row from array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2111309)
 You can use: 

  a[np.arange(3), (0,1,0)]
  

 in your example above. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22930578)
 USE: 

   >>> a[[0,1,3]][:,[0,2]]
array([[ 0,  2],
   [ 4,  6],
   [12, 14]])
  

  

  >>> a[[0,1,3],::2]
array([[ 0,  2],
   [ 4,  6],
   [12, 14]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/23435869)
 You can do something like this:  

  In [7]: a = np.array([[1, 2, 3],
   ...: [4, 5, 6],
   ...: [7, 8, 9]])

In [8]: lst = [1, 0, 2]

In [9]: a[np.arange(len(a)), lst]
Out[9]: array([2, 4, 9])
  

 More on indexing multi-dimensional arrays: http://docs.scipy.org/doc/numpy/user/basics.indexing.html#indexing-multi-dimensional-arrays 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50600918)
 A simple way might look like: 

  In [1]: a = np.array([[1, 2, 3],
   ...: [4, 5, 6],
   ...: [7, 8, 9]])

In [2]: y = [1, 0, 2]  #list of indices we want to select from matrix 'a'
  

  range(a.shape[0])  will return  array([0, 1, 2])  

  In [3]: a[range(a.shape[0]), y] #we're selecting y indices from every row
Out[3]: array([2, 4, 9])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2144048)
 This isn't an answer so much as an attempt to document this a bit.   

  >>> import numpy as np
>>> A = np.array(range(6))
>>> A
array([0, 1, 2, 3, 4, 5])
>>> A.shape = (3,2)
>>> A
array([[0, 1],
       [2, 3],
       [4, 5]])
>>> A[(0,1,2),(0,1,0)]
array([0, 3, 4])
  

 Specifying a list (or tuple) of individual row and column coordinates allows  fancy indexing  of the array.  The first example in the comment looks similar at first, but the indices are slices.  They don't extend over the whole range, and the  shape  of the array that is returned is different: 

  >>> A[0:2,0:2]
array([[0, 1],
       [2, 3]])
  

 For the second example in the comment 

  >>> A[[0,1],[0,1]]
array([0, 3])
  

 So it seems that slices are different, but except for that, regardless of how indices are constructed, you can specify a tuple or list of (x-values, y-values), and recover those specific elements from the array. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23438663)
 You can do it by using iterator.  

  np.fromiter((row[index] for row, index in zip(X, Y)), dtype=int)
  

 Time: 

  N = 1000
X = np.zeros(shape=(N, N))
Y = np.arange(N)

#@Aशwini चhaudhary
%timeit X[np.arange(len(X)), Y]
10000 loops, best of 3: 30.7 us per loop

#mine
%timeit np.fromiter((row[index] for row, index in zip(X, Y)), dtype=int)
1000 loops, best of 3: 1.15 ms per loop

#mine
%timeit np.diag(X.T[Y])
10 loops, best of 3: 20.8 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52572653)
 You can make use of broadcasting and a row-wise mask to select elements not contained in your array for each row: 

   Setup   

  B = np.array([1, 0, 2, 0])
cols = np.arange(A.shape[1])
  

 

 Now use broadcasting to create a mask, and index your array. 

  mask = B[:, None] != cols
A[mask].reshape(-1, 2)
  

  

  array([[28, 52],
       [80, 66],
       [ 7, 18],
       [97, 68]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22310222)
 Is the kind of action that you want? 

  In [19]: x=np.arange(12,dtype=float).reshape(4,3)

In [20]: z=np.array([0,1,0,1])

In [21]: I=(z==1)

In [22]: x[I,:]=x[I,:]*.1

In [23]: x
Out[23]: 
array([[ 0. ,  1. ,  2. ],
       [ 0.3,  0.4,  0.5],
       [ 6. ,  7. ,  8. ],
       [ 0.9,  1. ,  1.1]])
  

 Row (or column) indexing (here with a boolean  I ) can be used on both sides of the equation, both for selecting rows to use, and rows to over write. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22927889)
 Fancy indexing requires you to provide all indices for each dimension. You are providing 3 indices for the first one, and only 2 for the second one, hence the error. You want to do something like this: 

  >>> a[[[0, 0], [1, 1], [3, 3]], [[0,2], [0,2], [0, 2]]]
array([[ 0,  2],
       [ 4,  6],
       [12, 14]])
  

 That is of course a pain to write, so you can let broadcasting help you: 

  >>> a[[[0], [1], [3]], [0, 2]]
array([[ 0,  2],
       [ 4,  6],
       [12, 14]])
  

 This is much simpler to do if you index with arrays, not lists: 

  >>> row_idx = np.array([0, 1, 3])
>>> col_idx = np.array([0, 2])
>>> a[row_idx[:, None], col_idx]
array([[ 0,  2],
       [ 4,  6],
       [12, 14]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/39131450)
 As a pure numpythonic approach you can get the indices from second axis using  np.take() , then the diagonal of the result would be your expected output: 

  np.diagonal(np.take(arr, idx, axis=1))
  

  

  >>> arr = np.array([[1, 2, 3],
... [4, 5, 6],
... [7, 8, 9]])
>>> 
>>> idx = [1, 0, 2]
>>> 
>>> np.diagonal(np.take(arr, idx, axis=1))
array([2, 4, 9])
  



