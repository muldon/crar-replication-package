Query: Add entry to list and remove first one in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10155705)
 Use http://docs.python.org/library/collections.html#collections.deque: 

  >>> import collections
>>> q = collections.deque(["herp", "derp", "blah", "what", "da.."])
>>> q.appendleft('wuggah')
>>> q.pop()
'da..'
>>> q
deque(['wuggah', 'herp', 'derp', 'blah', 'what'])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10155753)
 Use http://docs.python.org/library/collections.html#collections.deque 

  In [21]: from collections import deque

In [22]: d = deque([], 3)   

In [24]: for c in '12345678':
   ....:     d.appendleft(c)
   ....:     print d
   ....:
deque(['1'], maxlen=3)
deque(['2', '1'], maxlen=3)
deque(['3', '2', '1'], maxlen=3)
deque(['4', '3', '2'], maxlen=3)
deque(['5', '4', '3'], maxlen=3)
deque(['6', '5', '4'], maxlen=3)
deque(['7', '6', '5'], maxlen=3)
deque(['8', '7', '6'], maxlen=3)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10155734)
 Use  insert()  to place an item at the beginning of the list: 

  myList.insert(0, "wuggah")
  

 Use  pop()  to remove and return an item in the list. Pop with no arguments pops the last item in the list 

  myList.pop() #removes and returns "da..."
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43535067)
 The https://apt.alioth.debian.org/python-apt-doc/library/aptsources.sourceslist.html#aptsources.sourceslist.SourcesList.remove help text reads  remove(source_entry) , which indicates that what it wants is a  SourceEntry  object. As it hapens,  sources.add()  returns a  SourceEntry  object: 

  import aptsources.sourceslist as sl

sources = sl.SourcesList()
entry = sources.add('deb', 'mirror://mirrors.ubuntu.com/mirrors.txt', 'xenial', ['main'])
print(type(entry))
  

 Outputs: 

  <class 'aptsources.sourceslist.SourceEntry'>
  

 To remove the entry: 

  sources.remove(entry)
sources.save()
  

 You can also disable it (which will leave a commented-out entry in  sources.list : 

  entry.set_enabled(False)
sources.save()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10155774)
 Here's a one-liner, but it probably isn't as efficient as some of the others ... 

  myList=["wuggah"] + myList[:-1]
  

 Also note that it creates a new list, which may not be what you want ... 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33443240)
 These are methods you can try: 

  >>> my_list = ['hey', 'hi', 'hello', 'phil', 'zed', 'alpha']
>>> del my_list[0]
>>> my_list = ['hey', 'hi', 'hello', 'phil', 'zed', 'alpha']
>>> if 'hey' in my_list:     # you're looking for this one I think
...     del my_list[my_list.index('hey')]
... 
>>> my_list
['hi', 'hello', 'phil', 'zed', 'alpha']
  

 You can also use  filter : 

   my_list = filter(lambda x: x!='hey', my_list)
  

 Using  list comprehension : 

  my_list = [ x for x in my_list if x!='hey']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44599922)
 One possible solution is do the concatenation manually, here is some useful 
code: 

  import json
def append_to_json(_dict,path): 
    with open(path, 'ab+') as f:
    f.seek(0,2)                                #Go to the end of file    
    if f.tell() == 0 :                         #Check if file is empty
        f.write(json.dumps([_dict]).encode())  #If empty, write an array
    else :
        f.seek(-1,2)           
        f.truncate()                           #Remove the last character, open the array
        f.write(' , '.encode())                #Write the separator
        f.write(json.dumps(_dict).encode())    #Dump the dictionary
        f.write(']'.encode())                  #Close the array
  

 You should be careful when editing the file outside the script not add any spacing at the end. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33443219)
 First of all, never call something "list" since it clobbers the built-in type 'list'.  Second of all, here is your answer: 

  >>> my_list = ['hey', 'hi', 'hello', 'phil', 'zed', 'alpha']
>>> del my_list[1]
>>> my_list
['hey', 'hello', 'phil', 'zed', 'alpha']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16548340)
 First of all, only add  Tweet.get('text')  if there  is  a text entry: 

  with open ('output.txt') as fp:
    for line in iter(fp.readline,''):   
        Tweets=json.loads(line)
        if 'text' in Tweets:
            data.append(Tweets['text'])
  

 That'll not add  None  entries ( .get()  returns  None  if the  'text'  key is not present in the dictionary). 

 I'm assuming here that you want to further process the  data  list you are building here. If  not , you can dispense with the  for entry in data:  loops below and stick to one loop with  if  statements.  Tweets['text']  is the same value as  entry  in the  for entry in data  loops. 

 Next, you are looping over python  unicode  values, so use http://docs.python.org/2/library/stdtypes.html#string-methods to filter out what you don't want: 

  for entry in data:
    if not entry.startswith("Photo:"):
        print entry
  

 You  can  use a list comprehension here; the following would print all entries too, in one go: 

  print '\n'.join([entry for entry in data if not entry.startswith("Photo:")])
  

 In this case that doesn't really buy you much, as you are building one big string just to print it; you may as well just print the individual strings and avoid the string building cost. 

 Note that  all  your data is Unicode data. What you perhaps wanted is to filter out text that uses codepoints beyond  ASCII  points perhaps. You could use regular expressions to detect that there are codepoints beyond ASCII in your text 

  import re
nonascii = re.compile(ur'[^\x00-0x7f]', re.UNICODE)  # all codepoints beyond 0x7F are non-ascii

for entry in data:
    if entry.startswith("Photo:") or nonascii.search(entry):
        continue  # skip the rest of this iteration, continue to the next
    print entry
  

 Short demo of the non-ASCII expression: 

  >>> import re
>>> nonascii = re.compile(ur'[^\x00-\x7f]', re.UNICODE)
>>> nonascii.search(u'All you see is ASCII')
>>> nonascii.search(u'All you see is ASCII plus a little more unicode, like the EM DASH codepoint: \u2014')
<_sre.SRE_Match object at 0x1086275e0>
  



