Query: Removing control characters from a string in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19016117)
 There are  hundreds  of control characters in unicode.  If you are sanitizing data from the web or some other source that might contain non-ascii characters, you will need Python's http://docs.python.org/2/library/unicodedata.html.  The  unicodedata.category(…)  function returns the http://www.unicode.org/reports/tr44/#GC_Values_Table (e.g., control character, whitespace, letter, etc.) of any character.  For control characters, the category always starts with "C". 

 This snippet removes all control characters from a string. 

<pre class="lang-py prettyprint-override"> import unicodedata
def remove_control_characters(s):
    return "".join(ch for ch in s if unicodedata.category(ch)[0]!="C")
  

 

 Examples of http://www.unicode.org/reports/tr44/#GC_Values_Table: 

  >>> from unicodedata import category
>>> category('\r')      # carriage return --> Cc : control character
'Cc'
>>> category('\0')      # null character ---> Cc : control character
'Cc'
>>> category('\t')      # tab --------------> Cc : control character
'Cc'
>>> category(' ')       # space ------------> Zs : separator, space
'Zs'
>>> category(u'\u200A') # hair space -------> Zs : separator, space
'Zs'
>>> category(u'\u200b') # zero width space -> Cf : control character, formatting
'Cf'
>>> category('A')       # letter "A" -------> Lu : letter, uppercase
'Lu'
>>> category(u'\u4e21') # 両 ---------------> Lo : letter, other
'Lo'
>>> category(',')       # comma  -----------> Po : punctuation
'Po'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39416125)
 Anyone interested in a regex character class that matches any Unicode https://www.w3.org/TR/html5/infrastructure.html#control-characters may use  [\x00-\x1f\x7f-\x9f] . 

  

  >>> import unicodedata, re, sys
>>> all_chars = [chr(i) for i in range(sys.maxunicode)]
>>> control_chars = ''.join(c for c in all_chars if unicodedata.category(c) == 'Cc')
>>> expanded_class = ''.join(c for c in all_chars if re.match(r'[\x00-\x1f\x7f-\x9f]', c))
>>> control_chars == expanded_class
True
  

 So to remove the control characters using  re  just use the following: 

  >>> re.sub(r'[\x00-\x1f\x7f-\x9f]', '', 'abc\02de')
'abcde'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4326283)
 And for Python 2, with the builtin  translate : 

  import string
all_bytes = string.maketrans('', '')  # String of 256 characters with (byte) value 0 to 255

line.translate(all_bytes, all_bytes[:32])  # All bytes < 32 are deleted (the second argument lists the bytes to delete)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4324823)
 You could use http://docs.python.org/library/stdtypes.html#str.translate with the appropriate map, for example like this: 

  >>> mpa = dict.fromkeys(range(32))
>>> 'abc\02de'.translate(mpa)
'abcde'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51965205)
 There are tons of the control characters in the unicode. So, basically, you need to remove control characters, which is the one of the category in unicode chars. To do that I recommend you to use https://docs.python.org/2/library/unicodedata.html#unicodedata.category from https://docs.python.org/2/library/unicodedata.html#module-unicodedata module. 

 See code below: 

  import unicodedata


def remove_control_chars(s):
    return "".join(ch for ch in s if unicodedata.category(ch)[0] != "C")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54225260)
 This is the easiest, most complete, and most robust way I am aware of. It does require an external dependency, however. I consider it to be worth it for most projects. 

  pip install regex

import regex as re
def remove_control_characters(str):
    return re.sub(r'\p{C}', '', 'my-string')
  

  \p{C}  is the https://en.wikipedia.org/wiki/Unicode_character_property for control characters, so you can leave it up to the unicode consortium which ones of the millions of unicode characters available should be considered control. There are also other extremely useful character properties I frequently use, for example  \p{Z}  for any kind of whitespace. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44285106)
 's' is the string where you want to delete specific control characters.
As strings are immutable in python, after substitute operation you need to assign it to another string.   

  s = re.sub(r'[\n\r\t]*', '', s)  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51136255)
 Generic version with the regular expression (It will remove all the control characters): 

  import re
def remove_control_chart(s):
    return re.sub(r'\\x..', '', s)
  



