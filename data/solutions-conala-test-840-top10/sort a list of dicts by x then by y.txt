Query: sort a list of dicts by x then by y
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17822323)
 your appending a string not a dictionary....you can make it a dictionary using the json library 

  testList.sort(key=lambda x: json.loads(x)['stuff2'])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45244603)
 You could store the indices of keys in a dictionary and use those in the https://docs.python.org/3.6/library/functions.html#sorted. This would work in  O(n log(n))  time: 

  >>> keys = {next(iter(v)): i for i, v in enumerate(B)}
>>> keys
{'a': 0, 'e': 1, 'b': 2, 'g': 3, 'f': 4}    
>>> A.sort(key=lambda x: keys[next(iter(x))])
>>> A
[{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34708987)
 You could pass to  sorted   key  parameter with length of your dicts: 

  sorted_list = sorted(l, key = lambda x: len(x.keys())
  

  

  sorted_list = sorted(l, key = len)
  

 Where  l  is a list with your dicts 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17822335)
 You are appending string, not a dictionary. 
. 

  testList = list()
testList.append({"_id": aList["_id"], "stuff": aList["stuff"], "stuff2": aCount, "stuff3": anotherList, "stuff4": aList["stuff2"]})
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/73465)
  import operator
  

 To sort the list of dictionaries by key='name': 

  list_of_dicts.sort(key=operator.itemgetter('name'))
  

 To sort the list of dictionaries by key='age': 

  list_of_dicts.sort(key=operator.itemgetter('age'))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42926102)
 The outer dictionaries in your lists only have one key each in the format of a number followed by  'AM'  or  'PM . To sort the outer dictionaries, we can define the sort-key 

  def sortouter(dic):
    hour_str = dic.keys()[0] # list(dic.keys())[0] in Python 3
    hour, am_pm = hour_str.split()
    return (am_pm, int(hour))
  

 Assuming your list is named  dicts , apply by issueing 

  dicts.sort(key=sortouter)
  

 This will sort by  'AM' / 'PM'  first (coincidally, 'AM' comes before 'PM' lexicographically) and by numeric value of the hour second. 

 In order to sort each inner list, loop over your list of dictionaries and sort each of these lists by the only key (the weekday) they have. Of course, we need another sortkey to order the weekdays. 

  def sortinner(dic):
    day = dic.keys()[0] # Python 3: list(dic.keys())[0]        
    return {'Sunday': 0, 'Monday': 1, ..., 'Saturday': 7}[day]
  

 The loop: 

  for dic in dicts:
    for lst in dic.values(): # only one iteration with your current format
        lst.sort(key=sortinner)
  

 
   your solution works can you please explain how sortouter works in little more detail 
 

 When you call  dicts.sort(key=sortouter)  the dictionaries in the list  dicts  get passed to  sortouter  (parameter named  dic ).  

 The first line of the function simply gets the only key in each of the dictionaries in  dicts , for example  '02 AM' .  

 The second line splits the string by the blank and  - sticking to the example - assigns  '02'  to the name  hour  and  'AM'  to the name  am_pm .  

 Finally the sort-key that is returned is the tuple  ('AM', 2) . 

 Now, Python will sort the list of dictionaries  as if  it was a list of (AM/PM, integer) tuples (sorting something as if it looked like something else is the whole idea behind a sort-key). 

 Tuples are sorted lexicographically like strings, i.e. for two tuples  t  and  s  the tuple  t  is smaller than  s  if  t[0] < s[0] . If  t[0] == s[0]  then the next elements,  t[1]  and  s[1]  are compared, and so on. 

 Thus, since  'AM'  <  'PM'  (because  'A'  < ' P ') all  'AM' -dicts come before the  'PM' -dicts (Python does not even have to look at the integer in the return value of  sortouter  to make that decision). Within the group of either all  'AM' - or  'PM' -dicts, the second element of the tuple  sortouter  returns gets compared (since the first element is the same), so the dictionaries get sorted by ascending hour. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10915468)
 You can pass a http://wiki.python.org/moin/HowTo/Sorting#Key_Functions parameter to the  list.sort()  method, so the comparison will be made in function of the returning value of  key : 

  >>> a = [{23:100}, {3:103}, {2:102}, {36:103}, {43:123}]
>>> a.sort(key=lambda d: d.values()[0], reversed=True)
>>> a
[{23: 100}, {2: 102}, {3: 103}, {36: 103}, {43: 123}]
  

 In this case, the key is a function which receives a dictionary  d  and gets a list of its value with  .values() . Since there is just one value, we get this only value from the returned list. Then, the  list.sort()  method will compare those returned values, instead of the dictionaries themselves, when sorting. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33017376)
 You can do it using dictionary with weight of all statuses: 

  STATUS_RANK = {"ACTIVE": 1, "DEACTIVE": 2, "COMING": 3}

courses.sort(key=lambda x: STATUS_RANK[x['status']])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50335538)
 In python 3, the other answers no longer work because https://docs.python.org/3/library/stdtypes.html#dict.values now returns a dict view object rather than a list. To extract the value from the view object, we can use a combination of https://docs.python.org/3/library/functions.html#iter and https://docs.python.org/3/library/functions.html#next: 

  a.sort(key=lambda dic: next(iter(dic.values())), reverse=True)
  



