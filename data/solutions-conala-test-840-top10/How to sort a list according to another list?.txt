Query: How to sort a list according to another list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36828179)
 Another posibility is to sort  a , sort the indices of  b  according to  b  and than sort the  a  according to the indices 

  a.sort(key=lambda x: x[0])
ind = [i[0] for i in sorted(enumerate(b),key=lambda x: x[1])]
a = [i[0] for i in sorted(zip(a,ind),key=lambda x: x[1])]
  

 since every sorting takes n*log(n) this is still scalable for bigger lists 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18770238)
 Assuming there will always be an entry in  sorter_list  that matches the second element of each list in  lista : 

  sorted_lista = sorted(lista, key=lambda lst: sorter_list.index(lst[1]))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46381866)
 With  sorted  function: 

  a = ["x", "y", "z"]
b = [["y", 99], ["w", 65], ["z", 150]]
b_sorted = [i[0] for i in sorted(b, key=lambda x: x[1], reverse=True)]
a_sorted = sorted(a, key=lambda x: b_sorted.index(x) if x in b_sorted else len(a))

print(a_sorted)
  

 The output: 

  ['z', 'y', 'x']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18770346)
 To sort efficient I think it's better to create a dictionary from  sorter_list  

  sorter_dict = {x:i for i, x in enumerate(sorter_list)}
sorted_lista = sorted(lista, key=lambda lst: sorter_dict[lst[1]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29876793)
 The correct way if you have a dict is to sort the items by the key: 

  name = ['Megan', 'Harriet', 'Henry', 'Beth', 'George']

score_list = [9, 6, 5, 6, 10]
d = dict(zip(name, score_list))

from operator import itemgetter
print(sorted(d.items(), key=itemgetter(0)))
[('Beth', 6), ('George', 10), ('Harriet', 6), ('Henry', 5), ('Megan', 9)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24561757)
 I think your cat is off. 

  >>> new = [x[int(index) - 1] for index in y]
>>> new
['mango', 'cat', 'ant', 'pop', 'fog', 'orange', 'butter', 'milk', 'coconut', 'tree', 'sky', 'moon', 'dog']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46365677)
 You can lookup where each  [0]  element of  A  is located using  .index  in  B   

  >>> sorted(A, key = lambda i: B.index(i[0]))
[[6, 1], [1, 3], [3, 5]]
  

 or in-place sort 

  >>> A.sort(key = lambda i: B.index(i[0]))
>>> A
[[6, 1], [1, 3], [3, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29876625)
 You can sort them at the same time as tuples by using  zip . The sorting will be by name: 

  tuples = sorted(zip(name, score_list))
  

  

  name, score_list = [t[0] for t in tuples], [t[1] for t in tuples]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18770388)
 I'm newbie in python so it may not be the most optimized solution 

  sorted_lista=[]

for i in sorter_list:
    for j in lista:
        if i==j[1]:
            sorted_lista.append([j[0],j[1]])

print sorted_lista
  

 Output : 

  [['Robert', 'P3'], ['Thomas', 'S2'], ['John', 'B3']]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/29876617)
 One obvious approach would be to  zip  both the list sort it and then unzip it 

  >>> name, score = zip(*sorted(zip(name, score_list)))
>>> name
('Beth', 'George', 'Harriet', 'Henry', 'Megan')
>>> score
(6, 10, 6, 5, 9)
  



