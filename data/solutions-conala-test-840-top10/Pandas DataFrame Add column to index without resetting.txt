Query: Pandas DataFrame Add column to index without resetting
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11856979)
 We added an  append  option to  set_index . . 

 The command is: 

  df.set_index(['d'], append=True)
  

 (we don't need to specify ['a', 'b'], as they already are in the index and we're appending to them) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42473243)
 Each not empty http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe has  columns ,  index  and some values. 

 You can add default column value and create new column filled by scalar: 

  df[len(df.columns)] = 0
  

  

  df = pd.DataFrame({0:[1,2,3],
                   1:[4,5,6]})

print (df)
   0  1
0  1  4
1  2  5
2  3  6

df[len(df.columns)] = 0
print (df)
   0  1  2
0  1  4  0
1  2  5  0
2  3  6  0
  

 Also for creating new column with name the simpliest is: 

  df['new'] = 1
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45889515)
 Try resetting the index: 

  c.reset_index().merge(orders)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39616746)
 You need add parameter  drop=True  to http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html: 

  ...
df_projects = df_projects.rename('name').to_frame()
df_projects = df_projects.reset_index(drop=True)
...
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39004767)
 you can use  groupby(level=0)  + http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.cumcount.html: 

  In [7]: df['IndexInt'] = df.groupby(level=0).cumcount()+1

In [8]: df
Out[8]:
                  Whatev  IndexInt
Type Year
a    1990           This         1
     1994           That         2
     1996       SomeName         3
b    1992           This         1
     1997  SomeOtherName         2
c    2001  SomeThirdName         1
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18624069)
 Just call  reset_index() : 

  In [130]: s
Out[130]:
0           1
1999-03-31  SOLD_PRICE   NaN
1999-06-30  SOLD_PRICE   NaN
1999-09-30  SOLD_PRICE   NaN
1999-12-31  SOLD_PRICE     3
2000-03-31  SOLD_PRICE     3
Name: 2, dtype: float64

In [131]: s.reset_index()
Out[131]:
            0           1   2
0  1999-03-31  SOLD_PRICE NaN
1  1999-06-30  SOLD_PRICE NaN
2  1999-09-30  SOLD_PRICE NaN
3  1999-12-31  SOLD_PRICE   3
4  2000-03-31  SOLD_PRICE   3
  

 There are many ways to drop columns: 

 Call  reset_index()  twice and specify a column: 

  In [136]: s.reset_index(0).reset_index(drop=True)
Out[136]:
            0   2
0  1999-03-31 NaN
1  1999-06-30 NaN
2  1999-09-30 NaN
3  1999-12-31   3
4  2000-03-31   3
  

 Delete the column after resetting the index: 

  In [137]: df = s.reset_index()

In [138]: df
Out[138]:
            0           1   2
0  1999-03-31  SOLD_PRICE NaN
1  1999-06-30  SOLD_PRICE NaN
2  1999-09-30  SOLD_PRICE NaN
3  1999-12-31  SOLD_PRICE   3
4  2000-03-31  SOLD_PRICE   3

In [139]: del df[1]

In [140]: df
Out[140]:
            0   2
0  1999-03-31 NaN
1  1999-06-30 NaN
2  1999-09-30 NaN
3  1999-12-31   3
4  2000-03-31   3
  

 Call  drop()  after resetting: 

  In [144]: s.reset_index().drop(1, axis=1)
Out[144]:
            0   2
0  1999-03-31 NaN
1  1999-06-30 NaN
2  1999-09-30 NaN
3  1999-12-31   3
4  2000-03-31   3
  

 Then, after you've reset your index, just rename the columns 

  In [146]: df.columns = ['Date', 'Sales']

In [147]: df
Out[147]:
         Date  Sales
0  1999-03-31    NaN
1  1999-06-30    NaN
2  1999-09-30    NaN
3  1999-12-31      3
4  2000-03-31      3
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52238076)
 Inserting column names at the first row and resetting the indices. 

  import pandas as pd

df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})

df.loc[-1] = df.columns
df.index = df.index + 1
df = df.sort_index()
df.columns = [0,1]
df

    0   1
0   a   b
1   1   4
2   2   5
3   3   6
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38087019)
  UPDATE:  you can do it setting the proper indices and finally resetting the index of joined DF: 

  In [14]: df1.set_index('FirstName').combine_first(df2.set_index('FirstName')).reset_index()
Out[14]:
  FirstName  Uid    JoinDate   BirthDate
0     Alice  2.0         NaN  19950403.0
1       Bob  1.0  20160628.0  19910524.0
2   Charlie  3.0  20160627.0         NaN
  

  

  In [113]: df2.combine_first(df1)
Out[113]:
  FirstName  Uid    JoinDate  BirthDate
0       Bob    1  20160628.0   19910524
1     Alice    2         NaN   19950403
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44055613)
 Use,  set_index ,  stack , and  reset_index : 

  df.set_index('AXIS').stack().reset_index()
  

 Output: 

     AXIS level_1    0
0     X       A  100
1     X       B  101
2     X       C  102
3     X       D  103
4     Y       A  200
5     Y       B  201
6     Y       C  202
7     Y       D  203
8     Z       A  300
9     Z       B  301
10    Z       C  302
11    Z       D  303
  

 And, you can do some housekeeping with rename columns resetting index etc... 

  df.set_index('AXIS').stack().reset_index().rename(columns={'AXIS':'one','level_1':'two',0:'num'}).set_index(['one','two'])
  

 Output: 

           num
one two     
X   A    100
    B    101
    C    102
    D    103
Y   A    200
    B    201
    C    202
    D    203
Z   A    300
    B    301
    C    302
    D    303
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/42041242)
 Try either of the following lines. 

  df.loc[:, "1-3"] = s.iloc[1:4].values
# -OR-
df.loc[:, "1-3"] = s.iloc[1:4].reset_index(drop=True)
  

 Your original code is trying unsuccessfully to match the index of the data frame  df  to the index of the subset series  s.iloc[1:4] . When it can't find the  0  index in the series, it places a  NaN  value in  df  at that location. You can get around this by only keeping the values so it doesn't try to match on the index or resetting the index on the subset series. 

  >>> s.iloc[1:4]
1    2
2    3
3    5
dtype: int64
  

 Notice the index values since the original, unsubset series is the following. 

  >>> s
0    1
1    2
2    3
3    5
dtype: int64
  

 The index of the first row in  df  is 0. By dropping the indices with the  values  call, you bypass the index matching which is producing the  NaN . By resetting the index in the second option, you make the indices the same. 



