Query: List comprehension with an accumulator
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20222727)
 Since you're already using  numpy , you can use  cumsum : 

  >>> from numpy.random import rand
>>> x = rand(10)
>>> x
array([ 0.33006219,  0.75246128,  0.62998073,  0.87749341,  0.96969786,
        0.02256228,  0.08539008,  0.83715312,  0.86611906,  0.97415447])
>>> x.cumsum()
array([ 0.33006219,  1.08252347,  1.7125042 ,  2.58999762,  3.55969548,
        3.58225775,  3.66764783,  4.50480095,  5.37092001,  6.34507448])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47936397)
 Because your loop needs to keep a running state it cannot cleanly be transformed into a list comprehension, although https://stackoverflow.com/a/47803229/7207392 exist. 

 So if you want "something like" a list comprehension I recommend the next best thing: an accumulator. 

  from itertools import accumulate

def ema(x, n):
    xx = n*[sum(x[:n])/n] + x[n:]
    p, q = 2 / (n+1), (n-1) / (n+1)
    return list(accumulate(xx, lambda a, b: q*a + p*b))
  

  

  ema(test_list, 5)
# [4.8, 4.8, 4.8, 4.8, 4.8, 4.533333333333333, 5.355555555555555, 6.2370370370370365, 8.158024691358024, 10.105349794238682, 7.070233196159121, 6.713488797439414, 6.808992531626275, 5.539328354417517, 6.026218902945011, 6.684145935296673, 5.456097290197782, 4.637398193465188, 5.424932128976792]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20222754)
 Ok, you said you did not want  numpy  but here is my solution anyway.
It seems to me that you are simply taking the cumulative sum, thus use the  cumsum()  function. 

  import numpy as np
result = np.cumsum(some_array)
  

 For a random example 

  result = np.cumsum(np.random.uniform(size=100))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41062764)
 Just for fun: 

 One-liner mega-hack using list comprehension and an auxililary accumulator to reuse previously computed value 

  s=[];  s=[s[-1] for x in range(1,10) if not aux.append(x*s[-1] if aux else 1)]
  

 result: 

  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
  

 note: The  math.factorial  answer is the way when elements are random. Here it's faster because we can reuse previous results. 

 There's also another drawback: the need to store all elements in a  list  because python does not allow  if  and assignment like C does. So we have to append to a list and negate the  None  it returns so  if  test is  True  

 As I said: fun, but still a hack. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54507290)
 Here is how I can explain this to you: 

 First, once your  addition_str  is split, you get a list of strings. You need to turn them into integer to calculate the sum. 

 One efficient way to do that is to use a comprehension list: 

<pre class="lang-py prettyprint-override"> values = [int(s) for s in strings]
  

 But, you can also use a classic loop: 

<pre class="lang-py prettyprint-override"> values = []
for s in strings:
    values.append(int(s))
  

 Here,  values  is a list of integers, for instance:  [2, 5, 10, 20]  (without quotation). 

 To accumulate, you need an initial value (zero) then iterate the loop and add each value to your accumulator: 

<pre class="lang-py prettyprint-override"> acc = 0
for value in values:
    acc += value
  

 Try that and tell me if you don't get the right sum. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23747785)
 Say input is "Federal Bureau of Agencies" 

 Typing  third[0]  gives you the first element of the split, which is "Federal".  You want the first element of each element in the sprit.  Use a generator comprehension or list comprehension to apply  [0]  to each item in the list: 

  val = input("What would you like to acronymize? ")
print("".join(word[0] for word in val.upper().split()))
  

 In Python, it would not be idiomatic to use an explicit loop here.  Generator comprehensions are shorter and easier to read, and do not require the use of an explicit accumulator variable. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/844354)
 If you've got a single element,  a , that you want to add to your list  l , then putting  a  into its own list and extending  l  with it seems like adding unnecessary complexity.   

  l.append(a)
  

  

  l += [a]
  

 If  a  is already a list, then choosing 

  l += a
  

   

  l.extend(a)
  

 is a matter of preference, IMO. On the other hand, if you're going to be doing a lot of extends, you can get a perfmance boost by "hoisting" the method lookup: 

  extend = l.extend
f sublist in bunch_of_lists:
    extend(sublist)
  

 Finally, I think that the append operation isn't used too often in Pythonic code, because append is used very often in "accumulat" idioms, where I'd expect a me experienced Python programmer to use a list comprehension/etc. 

  

  l = []
f a in numbers:
    l.append(str(a))
  

  

  l = [str(a) f a in numbers]
  

  

  l = map(str, numbers)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52414754)
 Some context, a list comprehension is a sort of "imperative" syntax for the  map  and  filter  functions that exist in many functional programing languages. What you're trying to do is usually referred to as an  accumulate , which is a slightly different operation. You can't implement an  accumulate  in terms of a  map  and  filter  except by using side effects. Python allows you have side effects in a list comprehension so it's definitely possible but list comprehensions with side effects are a little wonky. Here's how you could implement this using accumulate: 

  nums = [1,1,0,1,1]

def accumulator(last, cur):
    return 1 if (last == 1 and cur == 1) else 0

list(accumulate(nums, accumulator))
  

  

  list(accumulate(nums, lambda last, cur: 1 if (last == 1 and cur == 1) else 0))
  

 Of course there are several ways to do this using an external state and a list comprehension with side effects. Here's an example, it's a bit verbose but very explicit about how state is being manipulated: 

  class MyState:
    def __init__(self, initial_state):
        self.state = initial_state
    def getNext(self, cur):
        self.state = accumulator(self.state, cur)
        return self.state

mystate = MyState(1)
[mystate.getNext(x) for x in nums]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20222645)
 In Python 3, you'd use http://docs.python.org/3/library/itertools.html#itertools.accumulate: 

  from itertools import accumulate

array = list(accumulate(rand(100)))
  

 Accumulate yields the running result of adding up the values of the input iterable, starting with the first value: 

  >>> from itertools import accumulate
>>> list(accumulate(range(10)))
[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
  

 You can pass in a different operation as a second argument; this should be a callable that takes the accumulated result and the next value, returning the new accumulated result. The https://docs.python.org/3/library/operator.html is very helpful in providing standard mathematical operators for this kind of work; you could use it to produce a running multiplication result for example: 

  >>> import operator
>>> list(accumulate(range(1, 10), operator.mul))
[1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
  

 The functionality is easy enough to backport to older versions (Python 2, or Python 3.0 or 3.1): 

  # Python 3.1 or before

import operator

def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --> 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total = func(total, element)
        yield total
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24412174)
 It is no secret that reduce is http://www.artima.com/weblogs/viewpost.jsp?thread=98196 of the Pythonistas. 

 Generically, https://docs.python.org/3.0/library/functools.html#functools.reduce is a http://en.wikipedia.org/wiki/Fold_%28higher-order_function%29#Folds_in_various_languages 

 It is conceptually easy to write a fold in Python that will fold left or right on a iterable: 

  def fold(func, iterable, initial=None, reverse=False):
    x=initial
    if reverse:
        iterable=reversed(iterable)
    for e in iterable:
        x=func(x,e) if x is not None else e
    return x
  

 Without some atrocious hack, this cannot be replicated in a comprehension because there is not accumulator type function in a comprehension.  

 Just use reduce -- or write one that makes more sense to you.  



