Query: How can I launch an instance of an application using Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25308893)
 When an application registers itself, only the first instance gets registered, until it dies and then the very next instance to register gets registered. 

 There's no registration queue, so when your first instance dies, the second keeps unregistered, so any call to  Excel.Application  will launch a third instance and they'll keep using it until it dies too. 

 In summary, the instances launched in between registered instances never get registered. 

 If you need to reuse an instance, you must keep a pointer to it. 

 That said, if you get an instance of an open Excel file, you might obtain a link to an unregistered Excel instance.  For instance, if Excel 1 (registered) has workbook 1 open, and Excel 2 (unregistered) has workbook 2 open, if you ask for workbook 2, you'll get Excel 2's instance (e.g. through  Workbook.Application ). 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/247740)
   

  os.system("start excel.exe <path/to/file>")
  

 (presuming it's in the path, and you're on windows) 

 and also on Windows, just  start <filename>  wks, too - if it's an associated extension already (as xls would be) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6351029)
 As others have stated, I would suggest os.system. In case anyone is looking for a Mac-compatible solution, here is an example: 

  import os
os.system("open /Applications/Safari.app")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28049193)
 mod_wsgi expects variable called  application . Try to do something like this 

  from example import app as application
  

 Note: don't do  application.run() . . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/249571)
 The  subprocess  module intends to replace several other, older modules and functions, such as: 

 
 os.system 
 os.spawn 
 os.popen 
 popen2. 
 commands. 
 

 . 

  import subprocess

process_one = subprocess.Popen(['gqview', '/home/toto/my_images'])

print process_one.pid
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45568876)
 The first question is  where to store the data so that it is accessible to both instances . You should always try to store data in a database rather than a filesystem, which allows multiple instances to access the same data. 

 You then have a choice whether to launch a new 'big' instance, or whether to simply Start/Stop it as required. When an EC2 instance is stopped, there is no charge for EC2 (but you will still pay for disk storage). 

 As for launching another instance, it can be  launched from a script  using the http://aws.amazon.com/cli/. The script could launch the instance with a http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html that executes commands when the instance starts. This could load and run your application. 

 Once your instance has finished processing, it can  shutdown the virtual machine . There is a  Shutdown Behavior  option that can either Stop or Terminate the EC2 instance. 

 You could also consider using https://aws.amazon.com/ec2/spot/ for the second instance -- they can save substantial costs and the worst case is they get terminated and you can try again later. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38622203)
 By "within the EC2 instance", I assume you want to execute the python code on EC2 instance. Once you've working AWS python code, it doesn't matter on which computer/machine you run, it will work as long as system meets python and network requirements.  

 If you're looking for  launch_time , you can use the following code. 

  import boto3

ec2 = boto3.resource('ec2', region_name='instance_region_name')
instance = ec2.Instance('instance_id')
print instance.launch_time.strftime("%Y-%m-%d %H:%M:%S")
  

 If you're looking for instance's creation time, Please refer my answer https://stackoverflow.com/a/38621178/6632342 

  Please Note that creation time and launch time both are different. You can launch the given instance as many times as you want, but creation happens only once  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23134724)
 This is not really a py2app problem, but caused by the way the platform works: when a user tries to open a file that's associated with an application that is already running the system doesn't start a second instance of the application but sends the already running application an event to tell it to open the new file. 

 To handle multiple files you should implemented some kind of GUI event loop (using PyObjC, Tk, ...) that can be used to receive the OSX events that are sent when a user tries to open a file for an already running application. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21150794)
 If you're trying to launch a new terminal window to run a new Python in (which isn't what your question asks for, but from a comment it sounds like it's what you actually want): 

 You can't. . 

 Python is just a command-line program that runs with whatever stdin/stdout/stderr it's given. If those happen to be from a terminal, then it's running in a terminal. It doesn't know anything about the terminal beyond that. 

 If you need to do this for some specific platform and some specific terminal program—e.g., Terminal.app on OS X, iTerm on OS X, the "DOS prompt" on Windows, gnome-terminal on any X11 system, etc.—that's generally doable, but the way to do it is by launching or scripting the terminal program and telling it to open a new window and run Python in that window. And, needless to say, they all have completely different ways of doing that. 

 And even then, it's not going to be possible in all cases. For example, if you ssh in to a remote machine and run Python on that machine, there is no way it can reach back to your machine and open a new terminal window. 

 On most platforms that have multiple possible terminals, you can write some heuristic code that figures out which terminal you're currently running under by just walking  os.getppid()  until you find something that looks like a terminal you know how to deal with (and if you get to  init / launchd /etc. without finding one, then you weren't running in a terminal). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/247761)
 I like popen2 for the ability to monitor the process. 

  excelProcess = popen2.Popen4("start excel %s" % (excelFile))
status = excelProcess.wait()
  

 http://www.python.org/doc/2.5.2/lib/module-popen2.html 

  EDIT : be aware that calling wait() will block until the process returns.  Depending on your script, this may not be your desired behavior. 



