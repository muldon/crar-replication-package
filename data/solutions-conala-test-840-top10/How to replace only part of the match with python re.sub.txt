Query: How to replace only part of the match with python re.sub
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32698699)
 You can use a group reference to match the first word and a negated character class to match the rest of the string between  <>  : 

  >>> s='<cross_sell id="123" sell_type="456">'
>>> re.sub(r'(\w+)[^>]+',r'\1',s)
'<cross_sell>'
  

  \w  is equal to  [A-Za-z0-9_] . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32698700)
 You can use substitution groups: 

  >>> my_string = '<cross_sell id="123" sell_type="456"> --> <cross_sell>'
>>> re.sub(r'(\<[A-Za-z0-9_]+)(\s[A-Za-z0-9_="\s]+)', r"\1", my_string)
'<cross_sell> --> <cross_sell>'
  

 Notice I put the first group (the one you want to keep) in parenthesis and then I kept that in the output by using the  "\1"  modifier (first group) in the replacement string. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36196270)
 You can do the following: 

  sub_str = re.search("(\d+)", str).group(1)
  

 Will find the "123" part. 

 Then you replace it: 

  str = str.replace(sub_str, "")
  

 Note that if you have more than [0-9] sequence you'll need to use  findall  and iterate manually on all matches. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27385073)
 Or you could just use the search function instead: 

  match=re.search(r'(<textarea.*>).*(</textarea>)', s)
output = match.group(1)+'bar'+match.group(2)
print output
>>>'<textarea id="Foo">bar</textarea>'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16762094)
 A variation and Python-3-only solution: 

  def make_create_footnote_numbers(start=1):
    count = start - 1
    def create_footnote_numbers(match):
        nonlocal count
        count += 1
        return "<sup>{}</sup>".format(count)
    return create_footnote_numbers

new_body_text = re.sub(pattern, make_create_footnote_numbers(), text)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37640741)
 To accomplish this task, you can instead replace consecutive whitespaces with a single space character, for example, using  re.sub . 
Example: 

  import re

def correct(string):
    fmatch = re.sub(r'\s+', ' ', string)
    return fmatch

print correct("This   is  very funny  and    cool.Indeed!")
  

 The output will be: 

  This is very funny and cool.Indeed!
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12037754)
 Use lookahead/lookbehind: 

  import re

print re.sub("(?<=[^a-zA-Z])pi(?=[^a-zA-Z])", "(math.pi)", "2pi3 + supirse")
  

 See here for the concrete produced result: http://ideone.com/rSd8H 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53868404)
 You may use 

  re.sub(r'FR\d+','FR',t)
  

 Alternatively, you may capture the part you need to keep with a https://www.regular-expressions.info/brackets.html and replace with  \1  https://www.regular-expressions.info/replacebackref.html: 

  re.sub(r'(FR)\d+', r'\1', t)
         ^--^- >>>----^
  

 See the https://ideone.com/E9hObh 

 A capturing group approach is flexible as it allows patterns of unlimited length. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25058657)
   .  doesn't match a line break character.   .  to match those too, use the https://docs.python.org/2/library/re.html#re.DOTALL flag: 

  new_string = re.sub(r"<!-V(.*?)V->", '', old_string, flags=re.DOTALL)
  

 There's also the option of replacing  .  with a character class that matches everything, by combining two complementary character classes: 

  [\s\S]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/28723856)
  

  sample = re.sub(r'<=/[a-z]{2}', 'WW', sample
  

 No need to check the string before with match.  re.sub  makes the replacement when the pattern is found. 

  <=..  is a lookbehind assertion and means  preceded by , it's only a check and is not part of the match result. So  /  is not replaced. 

 In the same way, you can add a lookahead  =_   (followed by  at the end of the pattern, if you want to check if there is the underscore. 



