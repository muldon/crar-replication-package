Query: How to find all occurrences of an element in a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6294205)
 You can use a list comprehension: 

  indices = [i for i, x in enumerate(my_list) if x == "whatever"]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42286705)
 You might use:- 

  [item for sub_list in a[1:] for item in sub_list].count(1) # 3
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42286278)
 Use https://docs.python.org/3/library/collections.html#collections.Counter subclass to count occurrences of any value: 

  import collections

a = [['a', 1], ['b', 1], [1, 1]]
counts = collections.Counter((l[1] for l in a))

print(counts[1])   # 3
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6294413)
 One more solution(sorry if duplicates) for all occurrences: 

  values = [1,2,3,1,2,4,5,6,3,2,1]
map(lambda val: (val, [i for i in xrange(len(values)) if values[i] == val]), values)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5829377)
 If you are using Python 2.7 or 3 and you want number of occurrences for each element: 

  >>> from collections import Counter
>>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']
>>> Counter(z)
Counter({'blue': 3, 'red': 2, 'yellow': 1})
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13707531)
 You can use  Counter  module from  collections , if you want to find the occurrences of each element in the list: - 

  >>> x = ['a','a','b','c','c','d']

>>> from collections import Counter
>>> count = Counter(x)
>>> count
Counter({'a': 2, 'c': 2, 'b': 1, 'd': 1})
>>> count.most_common()
[('a', 2), ('c', 2), ('b', 1), ('d', 1)]
  

 So, the first two elements are most common in your list. 

  >>> count.most_common()[0]
('a', 2)
>>> count.most_common()[1]
('c', 2)
  

 or, you also pass parameter to  most_common()  to specify how many  most-common  elements you want: - 

  >>> count.most_common(2)
[('a', 2), ('c', 2)]
  

  Update : -  

 You can also find out the  max  count first, and then find total number of elements with that value, and then you can use it as parameter in  most_common() : - 

  >>> freq_list = count.values()
>>> freq_list
[2, 2, 1, 1]
>>> max_cnt = max(freq_list)
>>> total = freq_list.count(max_cnt)

>>> most_common = count.most_common(total)
[('a', 2), ('c', 2)]

>>> [elem[0] for elem in most_common]
['a', 'c']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42286211)
 You could just use a generator and https://docs.python.org/2/library/functions.html#sum.  

  >>> a = [['a', 1], ['b', 1], [1, 1]]
>>> sum(ele[1] == 1 for ele in a)
3
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44099311)
 How about simply loop through each element in the list by checking the number of occurrences, then adding them to a set which will then print the duplicates. Hope this helps someone out there. 

  myList  = [2 ,4 , 6, 8, 4, 6, 12];
newList = set()

for i in myList:
    if myList.count(i) >= 2:
        newList.add(i)

print(list(newList))
## [4 , 6]
  



