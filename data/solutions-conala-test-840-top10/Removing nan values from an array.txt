Query: Removing nan values from an array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11620945)
  

  import math
print [value for value in x if not math.isnan(value)]
  

 For more, read on http://docs.python.org/tutorial/datastructures.html#list-comprehensions. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48823495)
 If you're using  numpy   

  # first get the indices where the values are finite
ii = np.isfinite(x)

# second get the values
x = x[ii]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29679784)
  filter(lambda v: v==v, x)
  

 works both for lists and numpy array
since v!=v only for NaN 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38001353)
  

  x = x[~numpy.isnan(x)]
  

  

  x = x[numpy.logical_not(numpy.isnan(x))]
  

 I found that resetting to the same variable (x) did not remove the actual nan values and had to use a different variable. Setting it to a different variable removed the nans.
e.g.  

  y = x[~numpy.isnan(x)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35154659)
 Assuming your array is of  float s now, you can identify all the columns which are NaN and use fancy indexing to retrieve the others: 

  d
array([[ 182.,   93.,  107.,   nan,   nan,   -1.],
       [ 182.,   93.,  107.,    4.,   nan,   -1.],
       [ 182.,   93.,  110.,   nan,   nan,   -1.],
       [ 188.,   95.,  112.,   nan,   nan,   -1.],
       [ 188.,   97.,  115.,   nan,   nan,   -1.],
       [ 188.,   95.,  112.,   nan,   nan,   -1.]])


d[:,~np.all(np.isnan(d), axis=0)]

array([[ 182.,   93.,  107.,   nan,   -1.],
       [ 182.,   93.,  107.,    4.,   -1.],
       [ 182.,   93.,  110.,   nan,   -1.],
       [ 188.,   95.,  112.,   nan,   -1.],
       [ 188.,   97.,  115.,   nan,   -1.],
       [ 188.,   95.,  112.,   nan,   -1.]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47486199)
 As shown by others  

  x[~numpy.isnan(x)]
  

 . But it will throw error if the numpy dtype is not a native data type, for example if it is object. In that case you can use pandas. 

  x[~pandas.isnan(x)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29438580)
 You could use boolean indexing to select only those columns which do not contain  nan : 

  >>> x[:, ~np.isnan(x).any(axis=0)]
array([[ 1.,  2.,  4.],
       [ 2.,  4.,  8.],
       [ 3.,  6.,  0.]])
  

 (This is nearly identical to the answer you've linked to; only the axes have been switched.) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11620982)
 If you're using numpy for your arrays, you can also use 

  x = x[numpy.logical_not(numpy.isnan(x))]
  

   

  x = x[~numpy.isnan(x)]
  

 [Thanks to chbrown for the added shorthand]  

  Explanation  

 The inner function,  numpy.isnan  returns a boolean/logical array which has the value  True  everywhere that  x  is not-a-number. As we want the opposite, we use the logical-not operator,  ~  to get an array with  True s everywhere that  x   is  a valid number. 

 Lastly we use this logical array to index into the original array  x , to retrieve just the non-NaN values. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45375766)
 The main problem with your code is, that  np.nan != np.nan is  True  

 You might also consider using arrays instead of lists. 

  import numpy as np
z = np.array(z)   #convert into array, which allows other indexing
ztt = z[np.logical_not(np.isnan(z))]
  



