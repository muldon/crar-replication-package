Query: How to convert list of numpy arrays into single numpy array?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17477059)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html: 

  >>> import numpy as np
>>> a = np.array([1,2,3,4])
>>> np.reshape(a, (-1, 1))
array([[1],
       [2],
       [3],
       [4]])
  

 If you want normal python list then use  list comprehension : 

  >>> a = np.array([1,2,3,4]) 
>>> [[x] for x in a]
[[1], [2], [3], [4]]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9216222)
 You could do this much faster with numpy itself like this: 

  >>> a = numpy.array([[1,2,3],[4,5,6],[7,8,9]])
>>> import StringIO
>>> s = StringIO.StringIO()
>>> numpy.savetxt(s, a.T, fmt="%d", delimiter=",", newline="\t")
>>> s.getvalue()
'1,4,7\t2,5,8\t3,6,9\t'
  

 This doesn't require allocating extra memory copying the array because  .T  returns a view of the array, not a copy. Numpy's savetext function should also be faster than doing this in python. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50950023)
 You can simply use  np.asarray  like so 

  import numpy as np

list_of_lists = [[np.random.normal(0, 1, (4, 4)) for _ in range(23)] 
                 for _ in range(2)]
a = np.asarray(list_of_lists)
a.shape
  

 The function will infer the shape of the list of lists for you and create an appropriate array. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9215916)
 You can transpose a list of lists using http://docs.python.org/library/functions.html#zip: 

  >>> zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
  

 Everything else is simple: 

  >>> "\t".join(",".join(map(str, r)) for r in zip(*a))
'1,4,7\t2,5,8\t3,6,9'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17477108)
 You can use  np.newaxis : 

  >>> a = np.array([1,2,3,4] 
array([1, 2, 3, 4])
>>> a[:,np.newaxis]
array([[1],
       [2],
       [3],
       [4]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49541038)
 Here is one way. 

  import numpy as np, pandas as pd

lst = [np.array([[0, 0, 0, 1, 0, 0, 0, 0, 0]], dtype=int),
       np.array([[0, 0, 3, 2, 0, 0, 0, 0, 0]], dtype=int)]

df = pd.DataFrame(np.vstack(lst))

#    0  1  2  3  4  5  6  7  8
# 0  0  0  0  1  0  0  0  0  0
# 1  0  0  3  2  0  0  0  0  0
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33718947)
 You could use http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html, which as the name suggests, basically concatenates all the elements of such an input list into a single NumPy array, like so - 

  import numpy as np
out = np.concatenate(input_list).ravel()
  

 If you wish the final output to be a list, you can extend the solution, like so - 

  out = np.concatenate(input_list).ravel().tolist()
  

  

  In [24]: input_list
Out[24]: 
[array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]]),
 array([[ 0.00353654]])]

In [25]: np.concatenate(input_list).ravel()
Out[25]: 
array([ 0.00353654,  0.00353654,  0.00353654,  0.00353654,  0.00353654,
        0.00353654,  0.00353654,  0.00353654,  0.00353654,  0.00353654,
        0.00353654,  0.00353654,  0.00353654])
  

 Convert to list - 

  In [26]: np.concatenate(input_list).ravel().tolist()
Out[26]: 
[0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654,
 0.00353654]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9215958)
 Use http://docs.python.org/library/functions.html#zip function to get  

  >>> a = [[1,2,3],[4,5,6],[7,8,9]]
>>> zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>>
  

 and than do your thing. 

  >>> a = [[1,2,3],[4,5,6],[7,8,9]]
>>> b = zip(*a)
>>> result = "\t".join([",".join(map(str, r)) for r in b])
>>> result
'1,4,7\t2,5,8\t3,6,9'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19938915)
 I agree with this last bit: 

 
   I suppose it may be easier in python/numpy to create one numpy array with all the values then split it into two separate arrays. If this is easier help with doing that would be appreciated. (How nice am I suggesting possible solutions! :P ) 
 

 You can http://docs.python.org/2/library/string.html#string.strip (to remove trailing comma) and http://docs.python.org/2/library/string.html#string.split (to break into list of single characters) each string in a http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions to get a list of rows 

  a = ['1, 2, 4, 5,', '2, 3, 6, 3,', '1, 1, 7, 6']
rows = [l.rstrip(',').split(',') for l in a]
rows
#[['1', ' 2', ' 4', ' 5'], ['2', ' 3', ' 6', ' 3'], ['1', ' 1', ' 7', ' 6']]
  

 Then convert it to an array of integers: 

  arr = np.array(rows, int)

arr
#array([[1, 2, 4, 5],
#       [2, 3, 6, 3],
#       [1, 1, 7, 6]])
  

 To get the two halves: 

  arr[:, :2] # first two columns
#array([[1, 2],
#       [2, 3],
#       [1, 1]])

arr[:, -2:] # last two columns
#array([[4, 5],
#       [6, 3],
#       [7, 6]])
  

 Or, to return two arrays: 

  a, b = np.split(arr, arr.shape[1]/2, axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4341378)
  newarray = np.dstack(mylist)
  

 . For example: 

  import numpy as np

# Here is a list of five 10x10 arrays:
x=[np.random.random((10,10)) for _ in range(5)]

y=np.dstack(x)
print(y.shape)
# (10, 10, 5)

# To get the shape to be Nx10x10, you could  use rollaxis:
y=np.rollaxis(y,-1)
print(y.shape)
# (5, 10, 10)
  



