Query: How can I convert an RGB image into grayscale in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12201744)
 How about doing it with https://pillow.readthedocs.io/en/latest/: 

  from PIL import Image
img = Image.open('image.png').convert('LA')
img.save('greyscale.png')
  

 

 Using matplotlib and http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale 

  Y' = 0.299 R + 0.587 G + 0.114 B 
  

  

  import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def rgb2gray(rgb):
    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])

img = mpimg.imread('image.png')     
gray = rgb2gray(img)    
plt.imshow(gray, cmap = plt.get_cmap('gray'))
plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48594967)
 Use img.Convert(), supports “L”, “RGB” and “CMYK.”  

  import numpy as np
from PIL import Image

img = Image.open("IMG/center_2018_02_03_00_34_32_784.jpg")
img.convert('L')

print np.array(img)
  

 Output:  

  [[135 123 134 ...,  30   3  14]
 [137 130 137 ...,   9  20  13]
 [170 177 183 ...,  14  10 250]
 ..., 
 [112  99  91 ...,  90  88  80]
 [ 95 103 111 ..., 102  85 103]
 [112  96  86 ..., 182 148 114]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33618483)
 Sounds like the image is being opened in grayscale mode. Try converting to RGB before accessing the pixel values. 

  img = Image.open(path).convert("RGB")
pixels = img.load()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29989836)
 I found that i could just build another image: 

  import sys
import os
import glob
import numpy
from PIL import Image

def tau_gamma_correct(pixel_channel):
    pixel_channel = pixel_channel**(1/2.2)
    return pixel_channel

#@param: rgb
#@result: returns grayscale value
def gleam(rgb):
    #convert rgb tuple to list
    rgblist = list(rgb)
    #gamma correct each rgb channel
    rgblist[0] = tau_gamma_correct(rgblist[0])
    print('gleamed red ' + str(rgblist[0]))
    rgblist[1] = tau_gamma_correct(rgblist[1])
    print('gleamed green ' + str(rgblist[1]))
    rgblist[2] = tau_gamma_correct(rgblist[2])
    print('gleamed blue ' + str(rgblist[0]))
    grayscale = (rgblist[0] + rgblist[1] + rgblist[2])/3
    print('grayscale '+ str(grayscale))
    return grayscale

# get a glob list of jpg filenames
files = glob.glob('*.jpg')
for file in files:
    file = open(file)
    filename = file.name
    image = Image.open(file)
    pix = image.load()
    width, height = image.size
    new_image = Image.new('L', image.size)
    #pixelmatrix = [width][height]
    pixelmatrix = numpy.zeros((width, height))
    #print(width,height)
    for x in range(0, width):
        for y in range(0, height):
            rgb = pix[x,y]
            print('current pixel value: '+str(rgb))
            # calc new pixel value and set to pixel
            #print(gleam(rgb))
            gray = gleam(rgb)
            print('changing to pixel value: '+str(gray))
            pixelmatrix[x,y] = gray
            new_image.save(filename + 'gray.gleam'+'.jpg')
    new_image.putdata(pixelmatrix)
    file.close()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51571053)
 Using https://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale  

  Y' = 0.299 R + 0.587 G + 0.114 B 
  

  

  import imageio
import numpy as np
import matplotlib.pyplot as plt

pic = imageio.imread('(image)')
gray = lambda rgb : np.dot(rgb[... , :3] , [0.299 , 0.587, 0.114]) 
gray = gray(pic)  
plt.imshow(gray, cmap = plt.get_cmap(name = 'gray'))
  

 However, the https://docs.gimp.org/2.6/en/gimp-tool-desaturate.html converting color to grayscale image software has three algorithms to do the task. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27982429)
 You can always read the image file as grayscale right from the beginning using http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_gui/py_image_display/py_image_display.html from OpenCV: 

  img = cv2.imread('messi5.jpg', 0)
  

 Furthermore, in case you want to read the image as RGB, do some processing and then convert to Gray Scale you could use http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html#cvtcolor from OpenCV: 

  gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33833956)
 Does this work for you? 

  from PIL import Image
import numpy as np

sample_img = Image.open('sample.png') 
rescaled = 255 * np.asarray(sample_img)/2**16
img = Image.fromarray(np.uint8(rescaled))
  

 Which gives: 

  >>> np.asarray(img)

array([[ 95,  96,  98, ...,  98, 105, 107],
       [ 93,  97,  99, ..., 100, 105, 108],
       [ 94,  99, 100, ..., 102, 105, 110],
       ..., 
       [130, 125, 125, ...,  97,  98, 100],
       [128, 120, 123, ...,  99,  99, 101],
       [125, 119, 120, ..., 101, 100, 101]], dtype=uint8)
  

 Which is a 'standard' 8-bit grayscale image. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34046455)
 The fastest and current way is to use http://pillow.readthedocs.org/en/3.0.x/, installed via  pip install Pillow . 

 The code is then: 

  from PIL import Image
img = Image.open('input_file.jpg').convert('L')
img.save('output_file.jpg')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18777949)
 I would suggest converting to grayscale, then simply applying a threshold (halfway, or mean or meadian, if you so choose) to it. 

  from PIL import Image

col = Image.open('myimage.jpg')
gry = col.convert('L')
grarray = np.asarray(gry)
bw = (grarray > grarray.mean())*255
imshow(bw)
  



