Query: re.split with spaces in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/113555)
  >>> import re
>>> re.split(r"(\s+)", "This is the string I want to split")
['This', ' ', 'is', ' ', 'the', ' ', 'string', ' ', 'I', ' ', 'want', ' ', 'to', ' ', 'split']
  

 Using the capturing parentheses in re.split() causes the function to return the separators as well. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25253160)
 If you use  .split(" ") , then your program will split on every single space, and not on any other whitespace. If you use  .split()  instead, the program will take into account multiple spaces, newlines, tabs and all other forms of whitespace. That should get you what you're looking for. 

  >>> teststr = "a   v w   ef sdv   \n   wef"
>>> print teststr
a   v w   ef sdv   
   wef
>>> teststr.split()
['a', 'v', 'w', 'ef', 'sdv', 'wef']
>>> teststr.split(" ")
['a', '', '', 'v', 'w', '', '', 'ef', 'sdv', '', '', '\n', '', '', 'wef']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16926952)
 If your pattern is simple enough for one (or maybe two)  replace , use it: 

  mystr.replace('-', ' ').split(' ')
  

 Otherwise, use RE as suggested by https://stackoverflow.com/a/16926888/2289509. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12683250)
 Use a negative lookahead and a negative lookbehind: 

  > s = "one two 3.4 5,6 seven.eight nine,ten"
> parts = re.split('\s|(?<!\d)[,.](?!\d)', s)
['one', 'two', '3.4', '5,6', 'seven', 'eight', 'nine', 'ten']
  

 In other words, you always split by  \s  (whitespace), and only split by commas and periods if they are  not  followed  (?!\d)  or preceded  (?<!\d)  by a digit. 

  http://ideone.com/FyS9m . 

  EDIT : As per @verdesmarald comment, you may want to use the following instead: 

  > s = "one two 3.4 5,6 seven.eight nine,ten,1.2,a,5"
> print re.split('\s|(?<!\d)[,.]|[,.](?!\d)', s)
['one', 'two', '3.4', '5,6', 'seven', 'eight', 'nine', 'ten', '1.2', 'a', '5']
  

 This will split  "1.2,a,5"  into  ["1.2", "a", "5"] . 

  <a href="http://ideone.com/wYZIb"  . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/113554)
 The hard part with what you're trying to do is that you aren't giving it a character to split on. split() explodes a string on the character you provide to it, and removes that character. 

 Perhaps this may help: 

  s = "String to split"
mylist = []
for item in s.split():
    mylist.append(item)
    mylist.append(' ')
mylist = mylist[:-1]
  

 Messy, but it'll do the trick for you... 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38956991)
 Assuming no spaces around  , : 

  with open('file.txt') as f:
    for line in f:
        print(line.split(',')[1])
  

 If there could be whitespaces, use  re.split() : 

  with open('file.txt') as f:
    for line in f:
        print(re.split(r'\s?,\s?', line)[1])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8864243)
 Split on two newlines separated by one or more spaces,
then strip trailing whitespace. 

  >>> import re
>>> target=[p.rstrip() for p in re.split('\n +\n', 'ClassId=A1\n    classname=A1\n   \nClassId=B1\n    classname=B1\n ')]
>>> target[0]
'ClassId=A1\n    classname=A1'
>>> target[1]
'ClassId=B1\n    classname=B1'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20612710)
 If none of your keys or values have spaces inside them, then you're free to eliminate  all  spaces with a single  replace  method: 

  >>> dict(item.split("=") for item in PARAMS.replace(" ", "").split(";"))
{'TEST': 'xy', 'TEST2': 'klklk'}
  

 This will eliminate more spaces than  strip  would, of course: 

  >>> PARAMS = 'TEST 3 = there should be spaces between these words '
>>> dict(item.split("=") for item in PARAMS.replace(" ", "").split(";"))
{'TEST3': 'thereshouldbespacesbetweenthesewords'}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2281308)
 Don't explicitly specify  ' '  as the delimiter.  line.split()  will split on all whitespace. It's equivalent to using  re.split : 

  >>> line = '  a b   c \n\tg  '
>>> line.split()
['a', 'b', 'c', 'g']
>>> import re
>>> re.split('\s+', line)
['', 'a', 'b', 'c', 'g', '']
>>> re.split('\s+', line.strip())
['a', 'b', 'c', 'g']
  



