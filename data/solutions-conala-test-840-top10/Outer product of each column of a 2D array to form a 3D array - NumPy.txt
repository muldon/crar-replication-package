Query: Outer product of each column of a 2D array to form a 3D array - NumPy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43148960)
 You can use  numpy.ix_ ; it adds axes to its operands such that they form an open grid. Below the shapes of A,B,C are  (2, 1, 1), (1, 3, 1)  and  (1, 1, 4) , so just multiplying them together results in the outer product. 

  a = np.arange(1, 3)
b = np.arange(1, 4)
c = np.arange(1, 5)
A,B,C = np.ix_(a,b,c)
A*B*C
# array([[[ 1,  2,  3,  4],
#         [ 2,  4,  6,  8],
#         [ 3,  6,  9, 12]],
#
#        [[ 2,  4,  6,  8],
#         [ 4,  8, 12, 16],
#         [ 6, 12, 18, 24]]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53918553)
 Yes, you can make use of NumPy's  outer() . This is basically an outer product problem where you simply sum the elements of the resulting outer product n*n matrix. Here, the only values which you are using in your matrix are the first row and the first column. 

 So, all you need to do is to take the outer product of the first row and the first column using  np.outer  (https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.outer.html). This is all what you are doing in your algorithm with nested for-loops.  

  Example  

  import numpy as np

f = np.random.randint(1, 9, (3, 3)) # Create a test 3x3 matrix 

col = f[:, 0] # first column enteries [5, 3, 8]
row = f[0, :] # first row enteries [5, 3, 4]
summ = np.sum(np.outer(row, col))

print (f)
print ('The sum is %d' %summ)

#[[5 3 4]
# [3 8 1]
# [8 7 2]]

# The sum is 192
  

  Alternative  as suggested by https://stackoverflow.com/users/901925/hpaulj is  

  np.einsum('i,j->', f[:,0], f[0,:])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43648198)
 You can use https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing: 

  idx = np.arange(N)  # or idx = range(N)
A[idx,:,idx].T
  

  Example : 

  import numpy as np
A = np.arange(27).reshape(3,3,3)

idx = np.arange(3)
A[idx,:,idx].T
#array([[ 0, 10, 20],
#       [ 3, 13, 23],
#       [ 6, 16, 26]])

np.column_stack( tuple(A[i,:,i] for i in range(3)) )
#array([[ 0, 10, 20],
#       [ 3, 13, 23],
#       [ 6, 16, 26]])
  

  Timing : it is faster for a large array 

  def adv_index(N):
    idx = range(N)
    return A[idx,:,idx].T

N = 100
import numpy as np
A = np.arange(N*N*N).reshape(N,N,N)
​    
%timeit np.column_stack(tuple(A[i,:,i] for i in range(N)))
# The slowest run took 4.01 times longer than the fastest. This could mean that an intermediate result is being cached.
# 1000 loops, best of 3: 210 µs per loop

%timeit adv_index(N)
# The slowest run took 5.87 times longer than the fastest. This could mean that an intermediate result is being cached.
# 10000 loops, best of 3: 51.1 µs per loop

(np.column_stack(tuple(A[i,:,i] for i in range(N))) == adv_index(N)).all()
# True
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41469928)
 One approach with https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html - 

  X.T[:,:,None]*X.T[:,None]
  

 Another with  broadcasting  and swapping axes afterwards - 

  (X[:,None,:]*X).swapaxes(0,2)
  

 Another with  broadcasting  and a multi-dimensional transpose afterwards - 

  (X[:,None,:]*X).T
  

 Another approach with https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html, which might be more intuitive thinking in terms of the iterators involved if you are translating from a loopy code - 

  np.einsum('ij,kj->jik',X,X)
  

 Basic idea in all of these approaches is that we  spread out  the last axis for elementwise multiplication against each other keeping the first axis aligned. We achieve this process of putting  against each other  by extending  X  to two  3D  array versions. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13684107)
 Use  * , the element-wise product with the appropriate broadcasting: 

  >>> b = array([1,2,3])
>>> C = arange(9).reshape(3,3)
>>> dot(diag(b), C)
array([[ 0,  1,  2],
       [ 6,  8, 10],
       [18, 21, 24]])
>>> atleast_2d(b).T * C
array([[ 0,  1,  2],
       [ 6,  8, 10],
       [18, 21, 24]])
  

  atleast_2d(b).T  (or  b.reshape(-1,1) ) reshapes the vector  b  to a column vector. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47277623)
 Several things are different.  In  numpy  arrays may be 0d or 1d or higher.  In MATLAB 2d is the smallest (and at one time the only dimensions).  MATLAB readily expands dimensions the end because it is  Fortran ordered .   numpy , is by default  c ordered , and most readily expands dimensions at the front. 

  In [1]: A = np.zeros([5,3])
In [2]: A[:,0].shape   
Out[2]: (5,)
  

 Simple indexing reduces a dimension, regardless whether it's  A[0,:]  or  A[:,0] .  Contrast that with happens to a 3d MATLAB matrix,  A(1,:,:)  v  A(:,:,1) . 

  numpy  does  broadcasting , adjusting dimensions during operations like sum and assignment.  One basic rule is that dimensions may be automatically expanded toward the start if needed: 

  In [3]: A[:,0] = np.ones(5)
In [4]: A[:,0] = np.ones([1,5])
In [5]: A[:,0] = np.ones([5,1])
...
ValueError: could not broadcast input array from shape (5,1) into shape (5)
  

 It can change  (5,)  LHS to (1,5), but can't change it to (5,1).   

 Another broadcasting example,  + : 

  In [6]: A[:,0] + np.ones(5);
In [7]: A[:,0] + np.ones([1,5]);
In [8]: A[:,0] + np.ones([5,1]);
  

 Now the (5,) works with (5,1), but that's because it becomes (1,5), which together with (5,1) produces (5,5) - an outer product broadcasting: 

  In [9]: (A[:,0] + np.ones([5,1])).shape
Out[9]: (5, 5)
  

 

  

  >> x = ones(2,3,4);
>> size(x(1,:,:))
ans =
   1   3   4
>> size(x(:,:,1))
ans =
   2   3
>> size(x(:,1,1) )
ans =
   2   1
>> size(x(1,1,:) )
ans =
   1   1   4
  

 

 To do the assignment that you want you adjust either side 

 Index in a way that preserves the number of dimensions: 

  In [11]: A[:,[0]].shape    
Out[11]: (5, 1)
In [12]: A[:,[0]] = np.ones([5,1])
  

 transpose the (5,1) to (1,5): 

  In [13]: A[:,0] = np.ones([5,1]).T
  

 flatten/ravel the (5,1) to (5,):  

  In [14]: A[:,0] = np.ones([5,1]).flat
In [15]: A[:,0] = np.ones([5,1])[:,0]
  

  squeeze ,  ravel  also work. 

 Some quick tests in Octave indicate that it is more forgiving when it comes to dimensions mismatch.  But the  numpy  prioritizes consistency.  Once the broadcasting rules are understood, the behavior makes sense. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26396812)
 When you do the dot product of two arrays, you are computing the dot product of every row of the first array with every column of the second. If your matrix-that-fits-in-a-vector (MTFIAV) is the first operand of the dot product, it is easy to see that you can factor the repeating value from the dot product, and do a single multiplication with the result of summing up every column of the second array: 

  >>> a = np.arange(3)
>>> a
array([0, 1, 2])
>>> aa = np.repeat(a, 5).reshape(len(a), -1)
>>> aa
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2]])

>>> np.dot(aa, b)
array([[  0,   0,   0,   0],
       [ 40,  45,  50,  55],
       [ 80,  90, 100, 110]])
>>> np.outer(a, b.sum(axis=0))
array([[  0,   0,   0,   0],
       [ 40,  45,  50,  55],
       [ 80,  90, 100, 110]])
  

 If your MTFIAV is the second operand, it isn't hard to see that the result will also be a MTFIAV, and that its vector representation can be obtained computing the dot product of the first operand with the vector: 

  >>> c = np.arange(12).reshape(4, 3)

>>> np.dot(c, aa)
array([[ 5,  5,  5,  5,  5],
       [14, 14, 14, 14, 14],
       [23, 23, 23, 23, 23],
       [32, 32, 32, 32, 32]])
>>> np.dot(c, a)
array([ 5, 14, 23, 32])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35525289)
 You could convert your 3D array to a Pandas Panel, then flatten it to a 2D DataFrame (using http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Panel.to_frame.html): 

  import numpy as np
import pandas as pd
np.random.seed(2016)

arr = np.random.randint(0, 1000, (5, 4, 3))
pan = pd.Panel(arr)
df = pan.swapaxes(0, 2).to_frame()
df.index = df.index.droplevel('minor')
df.index.name = 'Date'
df.index = df.index+1
df.columns = list('ABC')
  

  

          A    B    C
Date               
1     875  702  266
1     940  180  971
1     254  649  353
1     824  677  745
...
4     675  488  939
4     382  238  225
4     923  926  633
4     664  639  616
4     770  274  378
  

 

 Alternatively, you could reshape the array to shape  (20, 3) , form the DataFrame as usual, and then fix the index: 

  import numpy as np
import pandas as pd
np.random.seed(2016)

arr = np.random.randint(0, 1000, (5, 4, 3))
df = pd.DataFrame(arr.reshape(-1, 3), columns=list('ABC'))
df.index = np.repeat(np.arange(arr.shape[0]), arr.shape[1]) + 1
df.index.name = 'Date'
print(df)
  

  the same result. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42317106)
 You can use https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html - 

  np.einsum('ijk,ki->ji',c,x)
  

  

  In [155]: c
Out[155]: 
array([[[1, 2],
        [3, 4]],

       [[2, 1],
        [4, 3]],

       [[3, 2],
        [1, 4]]])

In [156]: x
Out[156]: 
array([[0, 1, 2],
       [3, 4, 5]])

In [157]: np.einsum('ijk,ki->ji',c,x)
Out[157]: 
array([[ 6,  6, 16],
       [12, 16, 22]])
  

 

 For the 3D case of  x , simply append the new dimension at the start of the string notation for  x  and correspondingly at the output string notation too, like so - 

  np.einsum('ijk,lki->lji',c,x)
  

  

  In [151]: c
Out[151]: 
array([[[1, 2],
        [3, 4]],

       [[2, 1],
        [4, 3]],

       [[3, 2],
        [1, 4]]])

In [152]: x
Out[152]: 
array([[[1, 2, 3],
        [1, 2, 3]],

       [[1, 0, 2],
        [1, 0, 2]],

       [[2, 3, 1],
        [0, 1, 0]]])

In [153]: np.einsum('ijk,lki->lji',c,x)
Out[153]: 
array([[[ 3,  6, 15],
        [ 7, 14, 15]],

       [[ 3,  0, 10],
        [ 7,  0, 10]],

       [[ 2,  7,  3],
        [ 6, 15,  1]]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/50034591)
 Unlike Matlab (which is column-major) NumPy uses https://en.wikipedia.org/wiki/Row-_and_column-major_order: grouping starts from the leftmost index. So,  ones((2, 3, 4))  consists of two arrays that are  ones((3, 4)) , and each of those consists of three arrays that are  ones((4,)) .  

 Left - to - right is outer - to - inner. Also, it is slowly-changing index - to - quickly-changing index (if one reads all the elements sequentially).  

  >>> np.ones((2, 3, 4))
array([[[ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.]],

       [[ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.]]])
  

 For a 2D array it's row-column. For 3D it is depth-row-column, etc: for 4D it's something-something-row-column.  



