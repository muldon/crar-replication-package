Query: python: how to convert currency to decimal?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3887500)
 Through decimal package 

  >>> dollars = '$5.99'
>>> import decimal
>>> decimal.Decimal(dollars[1:])
Decimal('5.99')
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3887487)
 If you want to use Decimal: 

  from decimal import Decimal
dollars = Decimal(dollars.strip('$'))
  

 From there adding is pretty simple 

  dollars += 1 # Would add 1 to your decimal
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9561821)
 There's an easy approach: 

  dollar_dec = float(dollars[1:])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48938099)
 If I were you, I would use BABEL: http://babel.pocoo.org/en/latest/index.html 

  from babel.numbers import format_decimal


format_decimal(188518982.18, locale='en_US')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15207532)
 Assuming the string stored in the variable  dollars  was generated using python's locale module. A potentially cleaner way to convert it back to float (decimal) is to use the  atof  function from the same module. It should work as long as you use the same  setlocale  parameters in both directions (from currency to string and vice-versa). 

  

  import locale
locale.setlocale(locale.LC_ALL, '')
value = 122445.56
value_s = locale.currency(value, grouping=True)
#generates $122,445.56
  

 to convert it back: 

  value2 = locale.atof(value_s[1:])
#value2 = 122445.56 
value == value2 #True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5757319)
 For currency calculations, I prefer this. 

  >>> penny=Decimal('0.01')
>>> Decimal('10').quantize(penny)
Decimal('10.00')
  

 . 

 For currency formatting, I use  format() . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3887483)
 If you'd prefer just an integer number of cents: 

  cents_int = int(round(float(dollars.strip('$'))*100))
  

 If you want a Decimal, just use... 

  from decimal import Decimal
dollars_dec = Decimal(dollars.strip('$'))
  

 If you know that the dollar sign will always be there, you could use  dollars[1:]  instead of  dollars.strip('$') , but using  strip()  lets you also handle strings that omit the dollar sign ( 5.99  instead of  $5.99 ). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13695755)
 If you're dealing with currency and accuracy matters, don't use  float , use  decimal . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21208495)
 In Python 3.x and 2.7, you can simply do this: 

  >>> '${:,.2f}'.format(1234.5)
'$1,234.50'
  

 The  :,  adds a comma as a thousands separator, and the  .2f  limits the string to two decimal places (or adds enough zeroes to get to 2 decimal places, as the case may be) at the end. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/10677455)
 For monetary applications, the  decimal  module is a good choice for floating point arithmetic.  To display decimal floats with commas, see the http://docs.python.org/library/decimal.html#recipes recipe: 

  def moneyfmt(value, places=2, curr='', sep=',', dp='.',
             pos='', neg='-', trailneg=''):
    """Convert Decimal to a money formatted string.

    places:  required number of places after the decimal point
    curr:    optional currency symbol before the sign (may be blank)
    sep:     optional grouping separator (comma, period, space, or blank)
    dp:      decimal point indicator (comma or period)
             only specify as blank when places is zero
    pos:     optional sign for positive numbers: '+', space or blank
    neg:     optional sign for negative numbers: '-', '(', space or blank
    trailneg:optional trailing minus indicator:  '-', ')', space or blank

    >>> d = Decimal('-1234567.8901')
    >>> moneyfmt(d, curr='$')
    '-$1,234,567.89'
    >>> moneyfmt(d, places=0, sep='.', dp='', neg='', trailneg='-')
    '1.234.568-'
    >>> moneyfmt(d, curr='$', neg='(', trailneg=')')
    '($1,234,567.89)'
    >>> moneyfmt(Decimal(123456789), sep=' ')
    '123 456 789.00'
    >>> moneyfmt(Decimal('-0.02'), neg='<', trailneg='>')
    '<0.02>'

    """
    q = Decimal(10) ** -places      # 2 places --> '0.01'
    sign, digits, exp = value.quantize(q).as_tuple()
    result = []
    digits = map(str, digits)
    build, next = result.append, digits.pop
    if sign:
        build(trailneg)
    for i in range(places):
        build(next() if digits else '0')
    build(dp)
    if not digits:
        build('0')
    i = 0
    while digits:
        build(next())
        i += 1
        if i == 3 and digits:
            i = 0
            build(sep)
    build(curr)
    build(neg if sign else pos)
    return ''.join(reversed(result))
  



