Query: python : how to convert string literal to raw string literal?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20045787)
 . A raw string literal does let you escape quotes, but the backslashes will  be included: 

  >>> r"\'"
"\\'"
  

 where Python echoes the resulting string as a string literal with the backslash escaped. 

 This is explicitly documented behaviour of the raw string literal syntax: 

 
   When an  'r'  or  'R'  prefix is present, a character following a backslash is included in the string without change, and all backslashes are left in the string. For example, the string literal  r"\n"  consists of two characters: a backslash and a lowercase  'n' . String quotes can be escaped with a backslash, but the backslash remains in the string; for example,  r"\""  is a valid string literal consisting of two characters: a backslash and a double quote;  r"\"  is not a valid string literal (even a raw string cannot end in an odd number of backslashes). 
 

 If you didn't use a raw string literal for the second parameter, Python would interpret the  \digit  combination as octal byte values: 

  >>> '\0'
'\x00'
  

 You can construct the same string without raw string literals with doubling the backslash: 

  >>> '\\1\'\'\\2'
"\\1''\\2"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30283185)
 Quote from https://docs.python.org/3.4/reference/lexical_analysis.html#literals: 

 
   Even in a raw literal, quotes can be escaped with a backslash, but the
  backslash remains in the result; for example,  r"\"" is a valid string
  literal consisting of two characters: a backslash and a double quote; 
  r"\" is not a valid string literal (even a raw string cannot end in an
  odd number of backslashes). Specifically, a raw literal cannot end in
  a single backslash (since the backslash would escape the following
  quote character). Note also that a single backslash followed by a
  newline is interpreted as those two characters as part of the literal,
  not as a line continuation. 
 

 So in raw string, backslash are not treated specially,   except   when preceding  "  or  ' . Therefore,  r'\'  or  r"\"  is not a valid string cause right quote is escaped thus making the string literal invalid. In such case, there's no difference whether  r  exists, i.e.  r'\'  is equivalent to  '\'  and  r"\"  is equivalent to  "\" . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29669609)
 Just convert to  raw_input  like this: 

  import ast
a = raw_input("Please enter a dictionary: ")
d = ast.literal_eval(a)
print d
  

  Output:  

  {'a': 1, 'b': 2}
  

  Explanation:  

  input()  is just like doing  eval(raw_input(....))  which at your case transforms the string to dict,  ast.literal_eval()  is expecting a string not a dict. 

 Also pay attention that at python 3.x there is no  raw_input()  since it's converted to  input()  

 You can also refer to this https://stackoverflow.com/q/4915361/1982962 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11170170)
 Raw strings can't end in single backslashes because of how the parser works (there is no actual escaping going on, though). The workaround is to add the backslash as a non-raw string literal afterwards: 

  >>> print(r'foo\')
  File "<stdin>", line 1
    print(r'foo\')
                 ^
SyntaxError: EOL while scanning string literal
>>> print(r'foo''\\')
foo\
  

 . You can add plus to make it clearer what is happening, but it's not necessary: 

  >>> print(r'foo' + '\\')
foo\
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13840497)
 You seem to be struggling with the idea that a RegEx isn't part of Python, but instead a different programming language with its own parser and compiler. Raw strings help you get the "source code" of a RegEx safely to the RegEx parser, which will then assign meaning to character sequences like  \d ,  \w ,  \n , etc... 

 The issue exists because Python and RegExps use  \  as escape character, which is, by the way, a coincidence - there are languages with other escape characters (like "`n" for a newline, but even there you have to use "\n" in RegExps). The advantage is that you don't need to differentiate between raw and non-raw strings in these languages, they won't both try to convert the text and butcher it, because they react to different escape sequences. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7262918)
 Python’s raw strings are just a way to tell the Python interpreter that it should interpret backslashes as literal slashes. If you read strings entered by the user, they are already past the point where they could have been raw. Also, user input is most likely read in literally, i.e. “raw”. 

 This means the interpreting happens somewhere else. But if you know that it happens, why not escape the backslashes for whatever is interpreting it? 

  s = s.replace("\\", "\\\\")
  

 (Note that you can't do  r"\"  as https://docs.python.org/2/reference/lexical_analysis.html#string-literals, but I could have used  r"\\"  as well for the second argument.) 

 If that doesn’t work, your user input is for some arcane reason interpreting the backslashes, so you’ll need a way to tell it to stop that. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4297521)
 Raw strings are for string literals (written directly in the source file), which doesn't seem to be the case here. In any case, forward slashes are not special characters -- they can be embedded in a regular string without problems. It's backslashes that normally have other meaning in a string, and need to be "escaped" so that they get interpreted as literal backslashes. 

 To replace backslashes with forward slashes: 

  # Python:
string = r'C:\dummy_folder\a.txt'
string = string.replace('\\', '/')

# Ruby:
string = 'C:\\dummy_folder\\a.txt'
string = string.gsub('\\', '/')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14635374)
 The reason you are encountering this is because of the behavior of the  r""  syntax, Taking some explanation from the http://docs.python.org/2/reference/lexical_analysis.html#string-literals 

 
   r"\"" is a valid string literal consisting of two characters: a backslash and a double quote; r"\" is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw string cannot end in a single backslash (since the backslash would escape the following quote character). 
 

 So you will need to use a normal escaped string for the last argument. 

  >>> foo = "/DIR/abc"
>>> print foo.replace(r"/DIR/", "\\\\MYDIR\\data\\")
\\MYDIR\data\abc
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17867246)
 You could use http://docs.python.org/2/library/re.html#re.split to split strings like  14 sur 20  or  14/20  into two pieces. 

 And you could use http://docs.python.org/2/library/bisect.html#bisect.bisect to convert the scores into letter grades.  

  import bisect
import re

def lettergrade(score, breakpoints = [40, 50, 60, 80], grades = 'EDCBA'):
    """
    >=80 -> A
    >=60 -> B
    >=50 -> C
    >=40 -> D
    else -> E
    """
    i = bisect.bisect(breakpoints, score)
    return grades[i]


grade = input("Entrez votre note : ")
a, b = map(int, re.split(r'sur|/', grade))
print(lettergrade(100.0*a/b))
  

 

    

  `re.split(r'sur|/', grade)` splits the string `grade` into a list of strings. It splits on the regex pattern `r'sur|/'`. This regex pattern matches the literal string `sur` or the forward-slash `/`. The `|` is the regex syntax for "or". 
  

 The  r  in front of  'sur|/'  is Python syntax which causes Python to interpret  'sur|/'  as a http://docs.python.org/2/tutorial/introduction.html#strings. This affects the way backslashes are interpreted. The http://docs.python.org/2/library/re.html#module-re explain its use this way: 

 
   Regular expressions use the backslash character ( '\' ) to indicate
  special forms or to allow special characters to be used without
  invoking their special meaning. This collides with Python’s usage of
  the same character for the same purpose in string literals; for
  example, to match a literal backslash, one might have to write  '\\\\' 
  as the pattern string, because the regular expression must be  \\ , and
  each backslash must be expressed as  \\  inside a regular Python string
  literal. 
  
   The solution is to use Python’s raw string notation for regular
  expression patterns; backslashes are not handled in any special way in
  a string literal prefixed with  'r' . So  r"\n"  is a two-character string
  containing  '\'  and  'n' , while  "\n"  is a one-character string
  containing a newline. Usually patterns will be expressed in Python
  code using this raw string notation. 
 

 For the full story on raw strings, see http://docs.python.org/2/reference/lexical_analysis.html. 

 Although in this case the raw string  r'sur|/'  is the same as ordinary string  'sur|/' , it is perhaps a good practice to always make regex patterns with raw strings. It does not hurt in this case, and it definitely helps in other cases. 

 Since  re.split  returns a list of strings,  map(int, ...)  is used to convert the strings into  ints : 

  In [37]: grade = '14 sur 20'

In [38]: re.split(r'sur|/', grade)
Out[38]: ['14 ', ' 20']

In [39]: map(int, re.split(r'sur|/', grade))
Out[39]: [14, 20]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51853396)
 Use a raw string (prepending string with  r  makes it a raw string) and  split  it: 

  s = r'\"H\00E6tta\"'

print(s.split('\\'))
# ['', '"H', '00E6tta', '"']
  

  Note : When we make  s  a raw string, the "literal" string (here) actually changes to  \\"H\\00E6tta\\"  (use  repr(s)  to view the change). This makes our  split  possible. 



