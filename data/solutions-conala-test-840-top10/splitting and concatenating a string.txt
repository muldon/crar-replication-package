Query: splitting and concatenating a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6726645)
 String to list: 

  >>> list('abc')
['a', 'b', 'c']
  

 List to string: 

  >>> ''.join(['a', 'b', 'c'])
'abc'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34062151)
 Use https://docs.python.org/2/library/stdtypes.html?highlight=join#str.join when concatenating strings: 

  lst = []
for line in my_file:
    if 'chr' in line:   
        word = line.split("\t")
        lst.extend(word[7].split(";"))
        lst.extend(word[9].split(":"))
        lst.extend(adp[0].split("="))
        out = '\t'.join(lst)
        outputfile.write(out)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45371976)
  l = [["$123,123,123", "$68,656", "$993,993,993,993", "$123,141,142,142"],
     ["$60", "$800,600", "$700,600,500", "$20,200,200,201"]]
[ ':'.join('"' + j + '"' for j in i) for i in l ]
  

 Output: 

  ['"$123,123,123":"$68,656":"$993,993,993,993":"$123,141,142,142"',
 '"$60":"$800,600":"$700,600,500":"$20,200,200,201"']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45371933)
  '"' + '":"'.join( str(j) for i in money for j in i) + '"'
  

 where money is your list of lists 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13881162)
 More efficient ways of concatenating strings are: 

  join():  

 Very efficent, but a bit hard to read. 

  >>> Section = 'C_type'  
>>> new_str = ''.join(['Sec_', Section]) # inserting a list of strings 
>>> print new_str 
>>> 'Sec_C_type'
  

  String formatting:  

 Easy to read and in most cases faster than '+' concatenating 

  >>> Section = 'C_type'
>>> print 'Sec_%s' % Section
>>> 'Sec_C_type'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32921144)
 searching in strings:  

 if not str(i) in distinct_string: 

 is much faster 

 then searching in lists 

 if not i in distinct_list: 

  here are lprofile lines for string search in OP code

Line #      Hits         Time  Per Hit   % Time      Line Contents 


    17     75000     80366013   1071.5     92.7       if not str(i) in distinct_string:
    18     50000      2473212     49.5      2.9                  distinct_string += str(i) + " "

and for list search in OP code

   39     75000    769795432  10263.9     99.1          if not i in distinct_list:
   40     50000      2813804     56.3      0.4              distinct_list.append(i)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15572451)
 Use http://docs.python.org/2/library/itertools.html#itertools.groupby together with http://docs.python.org/2/library/stdtypes.html#string-methods method: 

 
   Docstring: 
  
   groupby(iterable[, keyfunc]) -> create an iterator which returns
  (key, sub-iterator) grouped by each value of key(value). 
 

 

 
   Docstring: 
  
   S.isalpha() -> bool 
  
   Return True if all characters in S are alphabetic
  and there is at least one character in S, False otherwise. 
 

 

  In [1]: from itertools import groupby

In [2]: s = "125A12C15"

In [3]: [''.join(g) for _, g in groupby(s, str.isalpha)]
Out[3]: ['125', 'A', '12', 'C', '15']
  

 

 Or possibly  re.findall  or  re.split  from the http://docs.python.org/2/library/re.html: 

  In [4]: import re

In [5]: re.findall('\d+|\D+', s)
Out[5]: ['125', 'A', '12', 'C', '15']

In [6]: re.split('(\d+)', s)  # note that you may have to filter out the empty
                              # strings at the start/end if using re.split
Out[6]: ['', '125', 'A', '12', 'C', '15', '']

In [7]: re.split('(\D+)', s)
Out[7]: ['125', 'A', '12', 'C', '15']
  

 

 As for the performance, it seems that using a regex is probably faster: 

  In [8]: %timeit re.findall('\d+|\D+', s*1000)
100 loops, best of 3: 2.15 ms per loop

In [9]: %timeit [''.join(g) for _, g in groupby(s*1000, str.isalpha)]
100 loops, best of 3: 8.5 ms per loop

In [10]: %timeit re.split('(\d+)', s*1000)
1000 loops, best of 3: 1.43 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32921351)
 Note that it's generally better to use  timeit  to compare functions, which runs the same thing multiple times to get average performance, and to factor out repeated code to focus on the performance that matters. Here's my test script: 

  first = [x for x in range(999) if x % 2 == 0]
second = [x for x in range(999) if x % 4 == 0]

values = first + second

def str_method(values):
    distinct_string = ""
    for i in values:
        if not str(i) in distinct_string:
            distinct_string += str(i) + " "
    return [int(s) for s in distinct_string.split()]

def list_method(values):
    distinct_list = []
    for i in values:
        if not i in distinct_list:
            distinct_list.append(i)
    return distinct_list

def set_method(values):
    seen = set()
    return [val for val in values if val not in seen and seen.add(val) is None]

if __name__ == '__main__':
    assert str_method(values) == list_method(values) == set_method(values)
    import timeit
    funcs = [func.__name__ for func in (str_method, list_method, set_method)]
    setup = 'from __main__ import {}, values'.format(', '.join(funcs))
    for func in funcs:
        print(func)
        print(timeit.timeit(
            '{}(values)'.format(func),
            setup=setup,
            number=1000
        ))
  

 I've added int conversion to make sure that the functions return the same thing, and get the following results: 

  str_method
1.1685157899992191
list_method
2.6124089090008056
set_method
0.09523714500392089
  

 Note that it is not true that searching in a list is faster than searching in a string if you have to convert the input: 

  >>> timeit.timeit('1 in l', setup='l = [9, 8, 7, 6, 5, 4, 3, 2, 1]')
0.15300405000016326
>>> timeit.timeit('str(1) in s', setup='s = "9 8 7 6 5 4 3 2 1"')
0.23205067300295923
  

 Repeated  append ing to a list is not very efficient, as it means frequent resizing of the underlying object - the list comprehension, as shown in the  set  version, is more efficient. 



