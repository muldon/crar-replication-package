Query: How to retrieve only arabic texts from a string using regular expression?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36661915)
 You can use https://docs.python.org/3/library/re.html#re.sub to replace ascii characters with empty string. 

  >>> my_string="""
... What is the reason
... ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
... behind this?
... ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
... """
>>> print(re.sub(r'[a-zA-Z?]', '', my_string).strip())
ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ

ذَلِكَ الْكِتَابُ لَا رَيْبَ فِيهِ هُدًى لِلْمُتَّقِينَ
  

 Your regex didn't work because you are using Python 2 and your string is  str  you need to convert  my_string  to unicode for it to work. However it did perfectly work on Python3.x 

  >>> print "".join(re.findall(ur'[\u0600-\u06FF]', unicode(my_string, "utf-8"), re.UNICODE))
ذَلِكَالْكِتَابُلَارَيْبَفِيهِهُدًىلِلْمُتَّقِينَذَلِكَالْكِتَابُلَارَيْبَفِيهِهُدًىلِلْمُتَّقِينَ
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36662471)
 Your code is: 

  print re.findall(r'[\u0600-\u06FF]+',my_string)
  

 When matching a byte sequence, there is no such concept as Unicode code points. Therefore, the  \u  escape sequences in the regular expression don’t make any sense. They are not interpreted as you thought, but just mean  u . 

 So when parsing the regular expression for bytes, it is equivalent to: 

  print re.findall(r'[u0600-u06FF]+',my_string)
  

 This character class is interpreted as “one of  u060 , or a byte in the range  0-u , or one of  06FF ”. This, in turn, is equivalent to  [0-u] , since all the other bytes are already included in this range. 

  print re.findall(r'[0-u]+', my_string)
  

  

  my_string = "What is thizz?"
print re.findall(r'[\u0600-\u06FF]+',my_string)
['What', 'is', 'thi', '?']
  

 Note that the  zz  is not matched, since it comes behind  u  in the ASCII character set. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36662413)
 Your original code was correct, just needed to encode  my_string  with proper encoding, 'utf-8' and add  u  in your  re  pattern since you are working with Python2,  

  >>> for x in re.findall(ur'[\u0600-\u06FF]+', my_string.decode('utf-8')):
        print x


ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
  

 This will give you a list of matched unicode strings instead of single characters that you don't need to join them back with  ''.join  

 If you were in Python3, you don't need any of encoding tweeking as default encoding is 'utf-8': 

  >>> for x in re.findall(r'[\u0600-\u06FF]+', my_string):
        print(x)


ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
ذَلِكَ
الْكِتَابُ
لَا
رَيْبَ
فِيهِ
هُدًى
لِلْمُتَّقِينَ
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33877232)
 If you want shorthand character classes ( \w ,  \W ,  \b ,  \B ,  \d ,  \D ,  \s  and  \S ) to be Unicode-aware, use  re.U  (or  re.UNICODE ): 

  name = re.search(r"(?<=اسمي)\s\D\w+", H, re.U)
  

  re.M  flag is redundant here, since it only affects  ^  and  $ . 

  re.I  flag is redundant here, since Arabic characters don't have the concept of uppercase/lowercase. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39140877)
 You need to add this line to your code :
 from __future__ import unicode_literals  

  # encoding: utf-8
from __future__ import unicode_literals
import re
s="رااااائع"

s = re.sub(r'(.)\1+', r'\1', s)
print s
  

  

  رائع
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34559313)
 You do not say if this is Python 2 or 3.... If Python 2 - then you will have to play with encode and decode and there is no native Unicode. 

 However in Python 3 - this is how I would do this....
Sorry I can not good with Hebrew - small Arabic example instead.... . 

  import re
sentance='المتساقطة، تحت. من كردة مسارح قُدُماً ضرب, لان بشكل أكثر'
fs=re.search('لان', sentance)
if fs:
   print("Found it")
  

 I have no idea what the arabic expression is - I pulled it from http://generator.lorem-ipsum.info/_arabic. 

 I must stress - Unicode text is easy in Python3 but way way more pain in Python 2.... 

 Exact the same as my arabic example - using Hebrew lore-ipsum (which I never knew existed until 30 seconds ago). 

  import re
sen2="רביעי ביולוגיה את אתה. מתן של מיזם המלצת ליצירתה, גם שכל חשמל אדריכלות למתחילים. צילום הבאים בעברית אחד בה. בדף או ריקוד מונחים לחשבון, ב הקהילה רב־לשוני זכר, וספציפיים האנציקלופדיה אל חפש. מתן אל נפלו עזרה אנתרופולוגיה."
fs=re.search('בדף',sen2)
if fs:
   print("Found it")
  

 Looks ok to me.... 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38547309)
 You can try  {\(P\)(.*)\(P\)} , and use parenthesis in the pattern to capture everything between  {(P)  and  (P)} : 

  import re
re.findall(r'{\(P\)(.*)\(P\)}', "python {(P)hello world(P)} java")

# ['hello world']
  

  .*  also matches unicode characters, for example: 

  import re
str1 = "python {(P)£1,073,142.68(P)} java"
str2 = re.findall(r'{\(P\)(.*)\(P\)}', str1)[0]

str2
# '\xc2\xa31,073,142.68'

print str2
# £1,073,142.68
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48499154)
 The  string.punctuation  constant contains only the punctuation characters defined in ASCII, which does not even cover all signs used with the Latin script (eg. "fancy quotes" like «» are missing). 

 If you don't want to create a list of all punctuation characters yourself (I wouldn't), you can use the https://en.wikipedia.org/wiki/Unicode_character_property to decide if a character is punctuation or not.
The built-in  unicodedata  module gives you access to this information: 

  >>> import unicodedata as ud
>>> for c in 'abc: قيم ؟':
...     print((c, ud.category(c))
a Ll
b Ll
c Ll
: Po
  Zs
ق Lo
ي Lo
م Lo
  Zs
؟ Po
  

 All categories are two-letter codes, like "Ll" for "letter, lowercase" or "Po" for "punctuation, other".
All punctuation characters have a category that starts with "P". 

 You can use this information for filtering out punctuation characters (eg. using a generator expression): 

  >>> s = "أهلاً بالعالم في هذه التجربة ! علامات ،الترقيم ؟ ,? لا .اتذكرها"
>>> ''.join(c for c in s if not ud.category(c).startswith('P'))
'أهلاً بالعالم في هذه التجربة  علامات الترقيم   لا اتذكرها'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14237562)
  

  (?<=\d)(?=(\d{2}){0,2}\d{3}(\d{7})*(?!\d))
  

 For example: 

  >>> import re
>>> inp = ["1" + "0"*i for i in range(20)]
>>> [re.sub(r"(?<=\d)(?=(\d{2}){0,2}\d{3}(\d{7})*(?!\d))", ",", i) 
     for i in inp]
['1', '10', '100', '1,000', '10,000', '1,00,000', '10,00,000', '1,00,00,000', 
 '10,00,00,000', '100,00,00,000', '1,000,00,00,000', '10,000,00,00,000', 
 '1,00,000,00,00,000', '10,00,000,00,00,000', '1,00,00,000,00,00,000', 
 '10,00,00,000,00,00,000', '100,00,00,000,00,00,000', 
 '1,000,00,00,000,00,00,000', '10,000,00,00,000,00,00,000',
 '1,00,000,00,00,000,00,00,000']
  

 As a commented regex: 

  result = re.sub(
    r"""(?x)       # Enable verbose mode (comments)
    (?<=\d)        # Assert that we're not at the start of the number.
    (?=            # Assert that it's possible to match:
     (\d{2}){0,2}  # 0, 2 or 4 digits,
     \d{3}         # followed by 3 digits,
     (\d{7})*      # followed by 0, 7, 14, 21 ... digits,
     (?!\d)        # and no more digits after that.
    )              # End of lookahead assertion.""", 
    ",", subject)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30525843)
 Unfortunately, Kivy TextInput support for right-to-left is https://github.com/kivy/kivy/issues/1619 (checked 29/05/2015). Actually, Kivy is not supporting right-to-left not only to TextInput. 

 For static texts like labels , there is a hack by using https://github.com/mpcabd/python-arabic-reshaper and https://pypi.python.org/pypi/python-bidi (http://mpcabd.igeex.biz/python-arabic-text-reshaper/): 

  import arabic_reshaper
from bidi.algorithm import get_display

reshaped_text = arabic_reshaper.reshape(u'اللغة العربية رائعة')
bidi_text = get_display(reshaped_text)
  

   

 Yet, as for  TextInput  with a dynamic input, you had to override most of class methods to support RTL and you will end up like implementing the whole RTL support to kivy. 

 Here is an open attempt to implement https://github.com/kivy/kivy/pull/2411. Another closed one: https://github.com/kivy/kivy/pull/1614. 



