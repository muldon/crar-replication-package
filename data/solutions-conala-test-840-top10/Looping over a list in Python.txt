Query: Looping over a list in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/27443834)
 That happens because the length of the for is evaluated only at the beginning and you modify the list while looping on it: 

  >>> l = [1,2,3]
>>> l
[1, 2, 3]
>>> for a in l:
    print(a)
    print(l)
    l.remove(a)
    print(a)
    print(l)
    print("---")


1
[1, 2, 3]
1
[2, 3]
---
3
[2, 3]
3
[2]
---
>>>
  

  The value of the implicit variable used to index the list and loop over it increases and skip the second element. 

 If you want to empty a list, do a clear: 

  >>> l.clear()
>>> l
[]
  

 Or use a different way of looping over the list, if you need to modify it while looping over it. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5931250)
 Appending to the list while iterating through it will enter an infinite loop, since you are adding more elements to the loop in each iteration. 

 You should iterate on a copy of the list instead. For example, try the following: 

  for n in tuple(poss):
    poss.append(n+6)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53093292)
 You can just loop through your  dict  (yes its a dictionary not a `list), and print first item, 

  x = {'5ogb.pdb': [[['ASN', 15.0, 'A'], 8.0], [['ASN', 26.0, 'A'], 12.0]]} 
for list_object in x['5ogb.pdb']:
        print(list_object[0])

# output,
['ASN', 15.0, 'A']
['ASN', 26.0, 'A']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6295235)
 The syntax for slicing a list like this is:  l[1:]  

 To answer your question: 

  for i in l[1:]:
    print i
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6295209)
 Just use http://docs.python.org/tutorial/introduction.html#lists: 

  >>> l = ['a','b','c','d']
>>> for i in l[1:]:
...     print i
... 
b
c
d
  

 It will generate a new list with the items before  1  removed: 

  >>> l[1:]
['b', 'c', 'd']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6295394)
 My 5 cent: 

  start_from = 'b'

for val in l[l.index(start_from ) if start_from  in l else 0:]:
   print val
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6295224)
 This will loop through items in l beginning with 1: 

  for i in l[1:]:
    #do something with i
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27771637)
 This might be the easiest way to do it if your looking for the least lines of code to write. 

  A = [1,4,-1,3,2]
B = []

n = 0

while A[n] != -1:
    B.append(A[n])
    n = A[n]

B.append(-1)

print(len(B))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19290869)
 I'm able to modify a list while looping: 

  lst = range(10)  // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for i, elem in enumerate(lst):
    lst[i] = 0   // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  



