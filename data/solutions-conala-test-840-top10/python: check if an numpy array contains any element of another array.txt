Query: python: check if an numpy array contains any element of another array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36191034)
 You can use  any  built-in function and list comprehension: 

  >>> array1 = [10,5,4,13,10,1,1,22,7,3,15,9]
>>> array2 = [3,4,9,10,13,15,16,18,19,20,21,22,23]
>>> any(i in array2 for i in array1)
True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43563807)
 you can use  numpy.where  function 

 check this post 

 https://stackoverflow.com/questions/4588628/find-indices-of-elements-equal-to-zero-from-numpy-array 

  import numpy as np

#-----1D case------
A = np.array([0,1,2,3,1,4,5,1,2])
print(np.where(A==1))

>>> (array([1, 4, 7]),)

#-----2D case------
A = np.array([[0,1,2,3],[1,2,3,5],[1,2,3,1]])
print(np.where(A==1))

>>> (array([0, 1, 2, 2]), array([1, 0, 0, 3]))
  

 in the examples you provided where the sublists have different length  numpy.array  is not an option as you cannot transform your  list  to  array  (sublists length should be equal). here is one more solution: 

  B = [ [ 1, 0, 0, 1, 1 ], [ 0, 1, 1 ] ]
inds = [(i,j) for j,ls in enumerate(B) for i,e in enumerate(ls) if e==1]
print(inds)

>>>> [(0, 0), (3, 0), (4, 0), (1, 1), (2, 1)]
  

 where  ls  corresponds to sublist and  e  to the element of the sublist 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45072403)
 You can use https://docs.python.org/3/library/functions.html#zip to zip together each list and each sublist to compare them element-wise: 

 
   Make an iterator that aggregates elements from each of the iterables. 
  
   Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. [...]. 
 

  >>> def max_value(lst1, lst2):
        for subl1, subl2 in zip(lst1, lst2):
            for el1, el2 in zip(subl1, subl2):
                yield max(el1, el2)


>>> 
>>> a=[[2,4],[6,8]]
>>> b=[[1,7],[5,9]]
>>> 
>>> list(max_value(a, b))
[2, 7, 6, 9]
  

 If using NumPy, you can use https://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum.html#numpy-maximum: 

 
   Element-wise maximum of array elements. 
  
   Compare two arrays and returns a new array containing the element-wise maxima. [...]. 
 

  >>> import numpy as np
>>> 
>>> a = np.array([[2,4],[6,8]])
>>> b = np.array([[1,7],[5,9]])
>>> 
>>> np.maximum(a, b)
array([[2, 7],
       [6, 9]])
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36190579)
  

  >>> array1 = [10,5,4,13,10,1,1,22,7,3,15,9]
>>> array2 = [3,4,9,10,13,15,16,18,19,20,21,22,23]
>>> set(array1) & set(array2)
set([3, 4, 9, 10, 13, 15, 22])
  

 If you get result means there are common elements in both array. 

 If result is empty means no common elements. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36190611)
 Using Pandas, you can use  isin : 

  a1 = np.array([10,5,4,13,10,1,1,22,7,3,15,9])
a2 = np.array([3,4,9,10,13,15,16,18,19,20,21,22,23])

>>> pd.Series(a1).isin(a2).any()
True
  

 And using the http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html#numpy.in1d numpy function(per the comment from @Norman): 

  >>> np.any(np.in1d(a1, a2))
True
  

 For small arrays such as those in this example, the solution using set is the clear winner.  For larger, dissimilar arrays (i.e. no overlap), the Pandas and Numpy solutions are faster.  However, http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.intersect1d.html appears to excel for larger arrays. 

  Small arrays (12-13 elements)  

  %timeit set(array1) & set(array2)
The slowest run took 4.22 times longer than the fastest. This could mean that an intermediate result is being cached 
1000000 loops, best of 3: 1.69 µs per loop

%timeit any(i in a1 for i in a2)
The slowest run took 12.29 times longer than the fastest. This could mean that an intermediate result is being cached 
100000 loops, best of 3: 1.88 µs per loop

%timeit np.intersect1d(a1, a2)
The slowest run took 10.29 times longer than the fastest. This could mean that an intermediate result is being cached 
100000 loops, best of 3: 15.6 µs per loop

%timeit np.any(np.in1d(a1, a2))
10000 loops, best of 3: 27.1 µs per loop

%timeit pd.Series(a1).isin(a2).any()
10000 loops, best of 3: 135 µs per loop
  

  Using an array with 100k elements (no overlap) : 

  a3 = np.random.randint(0, 100000, 100000)
a4 = a3 + 100000

%timeit np.intersect1d(a3, a4)
100 loops, best of 3: 13.8 ms per loop    

%timeit pd.Series(a3).isin(a4).any()
100 loops, best of 3: 18.3 ms per loop

%timeit np.any(np.in1d(a3, a4))
100 loops, best of 3: 18.4 ms per loop

%timeit set(a3) & set(a4)
10 loops, best of 3: 23.6 ms per loop

%timeit any(i in a3 for i in a4)
1 loops, best of 3: 34.5 s per loop
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33218744)
 You can do  (y == z).all(1).any() . 

 To go into a bit more detail, numpy will element-by-element comparisons across higher dimensions automatically using something called "broadcasting".  So if  y  is your n-by-2 array, and  z  is your 1-by-2 array,  y == z  will compare each row of  y  with  z  element-by-element.  Then you can just use  all(axis=1)  to get the rows where all elements match, and  any()  to find out if any match. 

 So here it is in practice: 

  >>> y1 = np.array([[1, 2], [1, 3], [1, 2], [2, 2]])
>>> y2 = np.array([[100, 200], [100,300], [100, 200], [200, 200]])
>>> z = np.array([1, 2])
>>>
>>> (y1 == z).all(1).any()
True
>>> (y2 == z).all(1).any()
False
  

 This is considerably faster than doing a loop or generator-based approach since it vectorizes the operation. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45062498)
 You can use  0 in a . i.e  

  a = np.array([9,2,7,0])
(0 in a) == True 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16218007)
 Another option if you want an array: 

  >>> np.array((a, b, c)).argmax(axis=0)
array([1, 2, 0, 0])
  

  

  def f(my_list):
    return np.array(my_list).argmax(axis=0)
  

 This works with multidimensional arrays, too. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48065478)
 . We can first construct a numpy array that contains  L0 ,  L1  and  L2 : 

  A = np.array([L0, L1, L2])
  

 Next we construct a numpy array of  S : 

  B = np.array(S)
  

 now we have for  C = A[B]  (or  C = np.take(A,B,axis=0)  as suggested by @Divakar): 

  >>> C = np.take(A,B,axis=0)
>>> C
array([[[[b, 0],
         [b, b]],

        [[b, b],
         [b, 1]],

        [[b, b],
         [2, b]]],


       [[[b, b],
         [2, b]],

        [[b, 0],
         [b, b]],

        [[b, b],
         [b, 1]]]])
  

 This is of course not exactly what we intended: we want to obtain a 2D-array. We can do this by first transposing (or  swapaxes , like @PaulPanzer suggests) and then reshaping, we obtain: 

  >>> C.transpose(0,2,1,3).reshape(4,6)
array([[b, 0, b, b, b, b],
       [b, b, b, 1, 2, b],
       [b, b, b, 0, b, b],
       [2, b, b, b, b, 1]])
  

 Since  4  and  6  of course depend on the size of the dimensions of  L0 ,  L1 ,  L2  and  S , we can also calculate them based on that size: 

  A = np.array([L0, L1, L2])
B = np.array(S)
m, n = B.shape
_, u, v = A.shape
np.take(A,B,axis=0).swapaxes(1,2).reshape(u*m, v*n)
  

 Like @DSM says, from Numpy-1.13, there is https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.block.html#numpy.block function for this purpose, and we can write it as: 

  >>> np.block([[A[i] for i in row] for row in S])
array([[b, 0, b, b, b, b],
       [b, b, b, 1, 2, b],
       [b, b, b, 0, b, b],
       [2, b, b, b, b, 1]])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45062799)
 if a is a numpy array: 

  a = np.array([1, 2])
  

 then use: 

  1 in a
  

 which returns true, while: 

  0 in a
  

 returns false 



