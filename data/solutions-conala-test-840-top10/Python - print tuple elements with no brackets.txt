Query: Python - print tuple elements with no brackets
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19112784)
  mytuple  is already a list (a list of tuples), so calling  list()  on it does nothing. 

  (1.0,)  is a tuple with one item. You can't call string functions on it (like you tried). They're for string types. 

 To print each item in your list of tuples, just do: 

  for item in mytuple:
    print str(item[0]) + ','
  

  

  print ', ,'.join([str(i[0]) for i in mytuple])
# 1.0, ,25.34, ,2.4, ,7.4
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38443864)
  final  has a type of  str , as such, indexing it in position  0  will result in the first character of the  url  getting printed, specifically  h . 

 You either need to print all of  final  if you're using it as a  str : 

  print(final)
  

 or, if you must have a  list , make  final  a  list  in the  for  loop by enclosing it in square brackets  [] : 

  final = [base + links]
  

 then  print(final[0])  will print the first element of the  list  as you'd expect. 

 

 As @Bryan pointed out and I just noticed, it seems like you might be confused about the usage of  ()  in Python. Without a comma  ,  inside the  ()  they do absolutely nothing. If you add the comma, it turns them into  tuples  (not  lists , lists use square brackets  [] ).  

  

  base = ("https://www.inforge.net/xi/")
  

 results in  base  referring to a value of  str  type while: 

  base = ("https://www.inforge.net/xi/", )
# which can also be written as:
base =  "https://www.inforge.net/xi/",
  

 results in  base  referring to a value of  tuple  type with a single element. 

 The same applies for the name  links : 

  links = (tag.get('href'))   # 'str'
links = (tag.get('href'), ) # 'tuple'
  

 If you change  links  and  base  to be tuples then  final  is going to end up as a 2 element  tuple  after  final = base + links  is executed. So, in this case you should join the elements inside the tuple during your  print  call: 

  print ("".join(final))  # takes all elements in final and joins them together 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49265524)
 First, you are adding  zoo  to your tuple  new_zoo . You should unwrap it to extend  new_zoo  instead. 

  zoo = ('python', 'elephant', 'penguin')
new_zoo = ('monkey', 'camel', *zoo) # ('monkey', 'camel', 'python', 'elephant', 'penguin')
  

 Then for printing, one clean way to do is to unwrap your tuple in  print  and provide a separator. 

  print(*new_zoo, sep=', ')
# prints: monkey, camel, python, elephant, penguin
  

 If you want to store the printed string, there you can use  str.join . 

  new_zoo_string = ', '.join(new_zoo) # 'monkey, camel, python, elephant, penguin'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13022063)
 If you just want the strings: 

  print("\n".join(element for element, count in c.most_common(10)))
  

 If you want the strings and the counts printed in the form  ('foo', 11) : 

  print ("\n".join(str(element_and_count) 
       for element_and_count in c.most_common(10)))
  

 If you want the strings and counts in some other format of your choice: 

  print ("\n".join("{}: {}".format(element, count) 
       for element, count in c.most_common(10)))
  

  The  most_common  function returns  (element, count)  pairs. Those things are tuples, not strings. You can't just join tuples together. You can, of course, convert it to a string (option #2 above), but that only works if you actually want the format  ('foo', 11)  for each line. To get the other two options, you want to ignore half the tuple and use the other, or write your own format expression. 

 In any case, you want to do something to each member of the sequence returned by  most_common . The Pythonic way to do that is with a list comprehension or generator expression. 

 Meanwhile, you should learn how to debug these kinds of cases. When  join  gives you a  TypeError , break it up into pieces until you find the one that stores working (and try it with 2 instead of 10, just so there's less to read): 

  >>> print("\n".join(c.most_common(2)))
TypeError: sequence item 0: expected str instance, tuple found
>>> c.most_common(2)
[('I', 4), ('man', 1)]
  

  Each thing in the list is a tuple of two things, not just a string.  

  >>> help(c.most_common)
most_common(self, n=None) method of collections.Counter instance
    List the n most common elements and their counts from the most
    common to the least.  If n is None, then list all element counts.

    >>> Counter('abcdeabcdabcaba').most_common(3)
    [('a', 5), ('b', 4), ('c', 3)]
  

 OK, so it returns the most common elements  and their counts . I just want the elements.  

  >>> [element for element, count in c.most_common(2)]
['I', 'man']
  

 Now that's something I can join: 

  >>> '\n'.join([element for element, count in c.most_common(2)])
'I\nman'
  

 And I don't need both brackets and parents (I can just use an expression instead of a list comprehension): 

  >>> '\n'.join(element for element, count in c.most_common(2))
'I\nman'
  

 And now, I can print it: 

  >>> print('\n'.join(element for element, count in c.most_common(2)))
I
man
  

 And now that it's working, print all 10: 

  >>> print('\n'.join(element for element, count in c.most_common(10)))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11130859)
 Note that the  %  syntax is obsolete. Use  str.format , which is simpler and more readable: 

  t = 1,2,3
print 'This is a tuple {0}'.format(t)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49265498)
 You have to join the contents of  zoo  as well: 

  zoo=('python','elephant','penguin')
new_zoo=('monkey','camel',','.join(zoo))
final_zoo = ','.join(new_zoo)
  

 Output: 

  'monkey,camel,python,elephant,penguin'
  

 However, you can also iterate over the contents of  new_zoo  and apply  str.join : 

  zoo=('python','elephant','penguin')
new_zoo=('monkey','camel',zoo)
final_zoo = ','.join([i if not isinstance(i, tuple) else ','.join(i) for i in new_zoo])
  

 Output: 

  'monkey,camel,python,elephant,penguin'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1455632)
  >>> tup = (1, 2, 3)
>>> print "Here it is: %s" % (tup,)
Here it is: (1, 2, 3)
>>>
  

 Note that  (tup,)  is a tuple containing a tuple. The outer tuple is the argument to the % operator. The inner tuple is its content, which is actually printed. 

  (tup)  is an expression in brackets, which when evaluated results in  tup . 

  (tup,)  with the trailing comma is a tuple, which contains  tup  as is only member. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26420496)
 You can not use  join  with a  tuple  argument it just take  str  argument , So you can use a list comprehension to save in a list: 

  >>> b=[''.join(i) for i in a]
>>> b
['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
>>> for i in b :
...  print i
... 
abc
acb
bac
bca
cab
cba
  

 But if you just want to print , do this : 

  >>> for i in a :
...  print ''.join(i)
... 
abc
acb
bac
bca
cab
cba 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1455623)
  >>> thetuple = (1, 2, 3)
>>> print "this is a tuple: %s" % (thetuple,)
this is a tuple: (1, 2, 3)
  

 Making a singleton tuple with the tuple of interest as the only item, i.e. the  (thetuple,)  part, is the key bit here. 



