Query: Reading tab-delimited file with Pandas - works on Windows, but not on Mac
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38951835)
 The biggest clue is the rows are all being returned on one line. This indicates line terminators are being ignored or are not present.  

 You can specify the line terminator for csv_reader. If you are on a mac the lines created will end with  \r rather than the linux standard  \n  or better still the suspenders and belt approach of windows with  \r\n . 

  pandas.read_csv(filename, sep='\t', lineterminator='\r')
  

 You could also open all your data using the codecs package. This may increase robustness at the expense of document loading speed. 

  import codecs

doc = codecs.open('document','rU','UTF-16') #open for reading with "universal" type set

df = pandas.read_csv(doc, sep='\t')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32958345)
 Use regex with  python  engine 

  df = pd.read_csv('data.csv', sep=r'\,|\t', engine='python')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33524373)
 For the file that is tab-separated, you should use: 

  file = pd.read_csv(filename, sep="\t")
  

 Pandas  read_csv  has quite a lot of parameters, check it out in the http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50701273)
  import pandas
  

 It will convert tab delimiter text file into dataframe 

  dataframe = pandas.read_csv("SentiWS_v1.8c_Positive.txt",delimiter="\t")
  

 Write dataframe into CSV 

  dataframe.to_csv("NewProcessedDoc.csv", encoding='utf-8', index=False)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33524402)
 You need to tell Pandas that the file is tab delimited when you import it. You can pass a delimiter to the read_csv method but in your case, since the delimiter changes by file, you want to pass None - this will make Pandas auto-detect the correct delimiter. 

  

  pd.read_csv(filename,sep=None)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10220428)
  csv  supports tab delimited files. Supply the http://docs.python.org/library/csv.html#csv.reader: 

  import csv

txt_file = r"mytxt.txt"
csv_file = r"mycsv.csv"

# use 'with' if the program isn't going to immediately terminate
# so you don't leave files open
# the 'b' is necessary on Windows
# it prevents \x1a, Ctrl-z, from ending the stream prematurely
# and also stops Python converting to / from different line terminators
# On other platforms, it has no effect
in_txt = csv.reader(open(txt_file, "rb"), delimiter = '\t')
out_csv = csv.writer(open(csv_file, 'wb'))

out_csv.writerows(in_txt)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16703473)
 Using this code (Python2.7)  

  f = open("struct.txt")

for line in f:
    vals = [item for item in line.strip().split("\t") if item != '']
    if len(vals):
        print(vals[2])

f.close()
  

 And your source (which I edited to make sure it had tabs) I get the following output: 

  > python so_16703270.py
KEYWORD
автостраховка
страховкаавто
страховка автомобиля
  

 Are you sure you have tabs throughout in the file and not spaces in some places? 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45443606)
 The  \t  in your file is an actual backslash followed by a  t .  It is  not  a  tab .  You're going to have to use some escape characters on your  sep  parameter. 

  pd.read_csv('test.txt', sep=r'\\t', engine='python')

   col_a  col_b  col_c  col_d
0      4      3      2      1
1      4      3      2      1
  

  

  pd.read_csv('test.txt', sep='\\\\t', engine='python')

   col_a  col_b  col_c  col_d
0      4      3      2      1
1      4      3      2      1
  

 

 https://stackoverflow.com/a/4780104/2336654   

 The  r  is indicating that it is a raw string and special characters should be interpreted the raw character.  That is why in one solution I indicated that the string was raw and only had two backslashes.  In the other, I had to escape each backslash with another backslash, leaving four backslashes. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50129935)
 if you plan to load the data into pandas, you don't need  csv  at all. 

  import pandas as pd
df = pd.read_csv(filename, sep='\t\, names=['a','b','c',...])
  

 . 

 Afterwards you can write the dataframe as csv via 

  df.to_csv(filename, sep`='\t')
  



