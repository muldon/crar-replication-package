Query: Convert Python dictionary to JSON array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53341059)
 You need to iterate over keys and values for this dictionary and then assign the necessary keys in the new dictionary. 

  import json

input_dict = {'foo': 3, 'bar': 1}
result = []

for k, v in input_dict.items():
    result.append({'key': k, 'value': v})

print(json.dumps(result))
  

 And the result: 

  [{'value': 3, 'key': 'foo'}, {'value': 1, 'key': 'bar'}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53341113)
 This could be handled with a https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions: 

  import json
json_dict = {'foo': 3, 'bar': 1}
json_array = [ {'key' : k, 'value' : json_dict[k]} for k in json_dict]
print(json.dumps(json_array))
  

 output: 

 
   [{"key": "foo", "value": 3}, {"key": "bar", "value": 1}] 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53341124)
 Try this (Python 2.7 and above): 

  json_dict = {'foo': 3, 'bar': 1}  # your original dictionary;
json_array = []  # an array to store key-value pairs;

# Loop through the keys and values of the original dictionary:
for key, value in json_dict.items():
    # Append a new dictionaty separating keys and values from the original dictionary to the array:
    json_array.append({'key': key, 'value': value})
  

 One-liner that does the same thing: 

  json_array = [{'key': key, 'value': value} for key, value in {'foo': 3, 'bar': 1}.items()]
  

 Hope this helps! 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15010469)
 Use the json module from the library http://docs.python.org/2/library/json.html to convert the json to a Python dictionary 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31663477)
 Use the native python JSON library: 

  import json
json1 = '{\
    "choice_list": {\
        "name": "Boston Street Names",\
        "choices":[ {"value": "127906", "label": "DAVIS STREET"},\
                    {"value": "129909", "label": "NORTH QUINCY STREET" },\
                    { "value": "134194", "label": "ADAMS STREET" }]\
     } \
}'

json2 = '[{"value": "134484", "label": "PRISCILLA ALDEN ROAD"},\
 {"value": "134487", "label": "VAN BUREN DRIVE"}]'

res = json.loads(json1)
res['choice_list']['choices'] = json.loads(json2)
print json.dumps(res)
  

  

  {"choice_list":
    {"name": "Boston Street Names",
     "choices":
         [{"value": "134484","label": "PRISCILLA ALDEN ROAD"},
          {"value": "134487", "label": "VAN BUREN DRIVE"}]
    }
}
  

 The loads method takes in a JSON string and converts it to a python dictionary object (with all keys as unicode). You can then load the other JSON object, reference to the key you want to replace, and assign it. Then you just convert back to a JSON string.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11312799)
 You are adding the exact same dictionary to the list. You should create a new dictionary for each item in the list: 

  json.dumps([dict(mpn=pn) for pn in lst])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49627082)
 Use  json.dumps  before  json.loads  to convert your data to dictionary object This also helps prevent  valueError: Expecting property name enclosed in double quotes .  

    

  import json
myJSONStringList = ['{"user": "testuser", "data": {"version": 1, "timestamp": "2018-04-03T09:23:43.388Z"}, "group": "33"}',
'{"user": "otheruser", "data": {"version": 2, "timestamp": "2018-04-03T09:23:43.360Z", }, "group": "44"}']

print([json.loads(json.dumps(i)) for i in myJSONStringList])
  

  Output:  

  [u'{"user": "testuser", "data": {"version": 1, "timestamp": "2018-04-03T09:23:43.388Z"}, "group": "33"}', u'{"user": "otheruser", "data": {"version": 2, "timestamp": "2018-04-03T09:23:43.360Z", }, "group": "44"}']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11313014)
 As explained by others (in answers) you should create a new dictionary for each item on the list elsewhere you reference always the same dictionary 

  import json
part_nums = ['ECA-1EHG102','CL05B103KB5NNNC','CC0402KRX5R8BB104']

def json_list(list):
    lst = []
    for pn in list:
        d = {}
        d['mpn']=pn
        lst.append(d)
    return json.dumps(lst)

 json_list(part_nums)
  

   

  [{"mpn": "ECA-1EHG102"}, {"mpn": "CL05B103KB5NNNC"}, {"mpn": "CC0402KRX5R8BB104"}]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46104891)
 In php use http://php.net/manual/en/function.json-encode.php to format the data as json. 

 In python convert the json to a dictionary. 

 Maybe check this link to see how to convert json to dictionary in python: 
https://stackoverflow.com/questions/19483351/converting-json-string-to-dictionary-not-list 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53692796)
 it seems that there is some confusion between what a python dictionary is. The data you have in the array in  businesses  is actually a string in JavaScript Object Notation (JSON) and python sees it as a string. For you to use it as a python dictionary, you will need to convert it using python's  json  library. The conversion would look something like, 

  import json

python_obj = json.loads(json_str)
  

 The object you provided is an Array of a JSON string such as  

  businesses = ["{\"hours\":"
            "{"
            "\"tuesday\": [[\"11:30\", \"23:00\"]],"
            "\"thursday\": [[\"11:30\", \"23:00\"]],"
            "\"wednesday\": [[\"11:30\", \"23:00\"]],"
            "\"friday\": [[\"11:30\", \"23:00\"]],"
            "\"sunday\": [[\"9:00\", \"23:00\"]],"
            "\"monday\": [[\"11:30\", \"23:00\"]],"
            "\"saturday\": [[\"11:30\", \"23:00\"]]"
            "},"
            "\"name\": \"XYZ\""
        "}"]
  

 An array of a python dictionary would look like the following 

  businesses = [
    {
        "hours":{
            "tuesday":[["11:30","23:00"]],
            "thursday":[["11:30","23:00"]],
            "wednesday":[["11:30","23:00"]],
            "friday":[["11:30", "23:00"]],
            "sunday":[["9:00", "23:00"]],
            "monday":[["11:30", "23:00"]],
            "saturday":[["11:30", "23:00"]]
        },
        "name":"XYZ"
    }
]
  

 And so, the reason you are seeing it output each letter is because you are iterating through a string, not a python dictionary. When python iterates through a string, it looks through each character. Just like the following. 

  string_data = "123456789"
# will iterate through each character
for i in string_data:
    print(i) # will print 9 times each time outputting a character in order
  

 As for the function, you will need to make sure that when you do your time comparisons, you are using python time objects instead of strings since that will accurately compare time. I'm not entirely sure why the times are in listed in a nested array such as  [["11:30","23:00"]]  and so you will likely need to modify the following function if the data is formatted differently for other businesses. 

 This is a function that describes what you need. 

  import json, datetime

businesses = ["{\"hours\":"
            "{"
            "\"tuesday\": [[\"11:30\", \"23:00\"]],"
            "\"thursday\": [[\"11:30\", \"23:00\"]],"
            "\"wednesday\": [[\"11:30\", \"23:00\"]],"
            "\"friday\": [[\"11:30\", \"23:00\"]],"
            "\"sunday\": [[\"9:00\", \"23:00\"]],"
            "\"monday\": [[\"11:30\", \"23:00\"]],"
            "\"saturday\": [[\"11:30\", \"23:00\"]]"
            "},"
            "\"name\": \"XYZ\""
        "}"]


def count_businesses(business_list):
    """
    :param business_list: An array of business in JSON to query from
    :return: Int of the count of businesses that are open on Sunday before 10 am
    """

    # initialize the array that will contain the businesses that meet the search criteria
    businesses_found = []

    # python time object of 10:00am that will be used to check against
    opening_business_time = datetime.time(hour=10)

    # iterate through each busineses to check if it meets the search criteria
    for business in business_list:

        # since each business is in JSON, we convert it into a Python object
        business_obj = json.loads(business)

        # Look into the 'hours' key, then the 'sunday' key and get the first item in the array. ( i.e ["11:30","23:00"])
        sunday_hours = business_obj["hours"]["sunday"][0]

        # read in the sunday opening hours as a string from the first value of the array. {i.e "11:30")
        sunday_opening_hours_str = sunday_hours[0]

        # convert the sunday opening hours into a time object so it can be compared.
        # '%H:%M' looks for the format HH:MM in a string.
        # for more reference. https://docs.python.org/3.6/library/datetime.html#strftime-and-strptime-behavior
        sunday_opening_hours_time = datetime.datetime.strptime(sunday_opening_hours_str, '%H:%M').time()

        # if sunday opening hours is before 10 am
        if sunday_opening_hours_time < opening_business_time:

            # add the business object to the list
            businesses_found.append(business_obj)

    # returns the count of the businesses that met the search criteria
    return len(businesses_found)


total = count_businesses(businesses)

print(total)
  



