Query: Converting string to tuple and adding to tuple
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3945883)
 To turn the strings into tuples of ints (which is, I assume, what you want), you can use a regex like this: 

  x = "(1,2,3)"
t = tuple(int(v) for v in re.findall("[0-9]+", x))
  

 And you can use, say, http://docs.python.org/library/configparser.html to parse the config file. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16040302)
  x = ['q0','|','q1','q0','|','#','|','#']
','.join(x).replace(',|', '|').replace('|,','|')
  

 Had to edit because I forgot the comma on the other side, it's a bit ugly now 

 Alternatively, with regexp 

  re.sub(',?\|,?','|', ','.join(x))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54143292)
 Or use  str.split , and do  str.join  and  '</w>'  adding beforehand: 

  >>> counter = {'The': 6149,
     'Project': 205,
     'Gutenberg': 78,
     'EBook': 5,
     'of': 39169,
     'Adventures': 2,
     'Sherlock': 95,
     'Holmes': 198,
     'by': 6384,
     'Sir': 30,
     'Arthur': 18,
     'Conan': 3,
     'Doyle': 2,}
>>> {tuple((' '.join(k)+'</w>').split()):v for k,v in counter.items()}
{('T', 'h', 'e</w>'): 6149, ('P', 'r', 'o', 'j', 'e', 'c', 't</w>'): 205, ('G', 'u', 't', 'e', 'n', 'b', 'e', 'r', 'g</w>'): 78, ('E', 'B', 'o', 'o', 'k</w>'): 5, ('o', 'f</w>'): 39169, ('A', 'd', 'v', 'e', 'n', 't', 'u', 'r', 'e', 's</w>'): 2, ('S', 'h', 'e', 'r', 'l', 'o', 'c', 'k</w>'): 95, ('H', 'o', 'l', 'm', 'e', 's</w>'): 198, ('b', 'y</w>'): 6384, ('S', 'i', 'r</w>'): 30, ('A', 'r', 't', 'h', 'u', 'r</w>'): 18, ('C', 'o', 'n', 'a', 'n</w>'): 3, ('D', 'o', 'y', 'l', 'e</w>'): 2}
>>> 
  

  

  import timeit
print('bro-grammer:',timeit.timeit(lambda: [{(*a[:-1],f'a[-1]</w>',):b for a,b in counter.items()} for i in range(1000)],number=10))
print('Sandeep Kadapa:',timeit.timeit(lambda: [{tuple(key[:-1])+(key[-1]+'</w>',):value for key,value in counter.items()} for i in range(1000)],number=10))
print('U9-Forward:',timeit.timeit(lambda: [{tuple((' '.join(k)+'</w>').split()):v for k,v in counter.items()} for i in range(1000)],number=10))
  

 Output: 

  bro-grammer: 0.1293355557653911
Sandeep Kadapa: 0.20885866344797197
U9-Forward: 0.3026948357193003
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3946091)
 The easiest way to do this would be to use Michael Foord's http://www.voidspace.org.uk/python/configobj.html library. It has an http://www.voidspace.org.uk/python/articles/configobj.shtml#unrepr-mode, which'll directly convert the string into a tuple for you.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3945885)
 You can simply make a tuple of tuples like  

  new_tuple = (rect1,rect2) # ((2,2,10,10), (12,8,2,10))
  

 If you want to loop through values 

  for i in rect1+rect2:
    print i
  

 If you want to regroup the numbers you could do 

   tuple_regrouped = zip(rect1,rect2) #((2,12),(2,8),(10,2), (10,10))
  

 EDIT:
Didn't notice the string part.  If you have lines in strings, like from reading a config file, you can do something like 

   # line = "rect1 = (1,2,3,4)"
 config_dict = {}     
 var_name, tuple_as_str = line.replace(" ","").split("=")
 config_dict[var_name] = tuple([int(i) for i in tuple_as_str[1:-1].split(',')])
 # and now you'd have config_dict['rect1'] = (1,2,3,4)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3946174)
 Instead of using a regex or int/string functions, you could also use the  ast  module's  literal_eval  function, which only evaluates strings that are valid Python literals. This function is safe (according to the docs).
http://docs.python.org/library/ast.html#ast.literal_eval 

  import ast
ast.literal_eval("(1,2,3,4)") # (1,2,3,4)
  

 And, like others have said,  ConfigParser  works for parsing the INI file. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1679408)
   >>> a = {'foo': 'bar', 'baz': 'quux', 'hello': 'world'}
 >>> list(reduce(lambda x, y: x + y, a.items()))
 ['foo', 'bar', 'baz', 'quux', 'hello', 'world']
  

 To explain: a.items() returns a list of tuples. Adding two tuples together makes one tuple containing all elements. Thus the reduction creates one tuple containing all keys and values and then the list(...) makes a list from that. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3946094)
 Considering that cp is the ConfigParser object for the cfg file having the config. 

  [rects]
rect1=(2,2,10,10)
rect2=(12,8,2,10)


>> import ast 
>> tuple(ast.literal_eval(v[1]) for v in cp.items('rects')) 
   ((2,2,10,10), (12,8,2,10))
  

 Edit : Changed eval() to a safer version literal_eval()  
        From python docs -  literal_eval()  does following : 
            Safely evaluate an expression node or a string containing a Python
            expression.  The string or node provided may only consist of the following
            Python literal structures:  strings, numbers, tuples, lists, dicts, booleans,
            and None  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23173930)
 Use https://docs.python.org/2/library/ast.html#ast.literal_eval: 

  >>> import ast
>>> tc='(107, 189)'
>>> tc_tuple = ast.literal_eval(tc)
>>> tc_tuple
(107, 189)
>>> tc_tuple[0]
107
  



