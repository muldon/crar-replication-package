Query: Using variables in Python regular expression
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7580872)
 Use http://docs.python.org/library/stdtypes.html#string-formatting 

  for line in re.findall('(.+)%s(.+)' % Var_Name, Data):
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7580864)
 try this easy way : 

  for line in re.findall('(.+){0}(.+)'.format(Var_Name), Data):
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32081317)
  def repl(matchobj):
    if matchobj.group():
        #do something
        #return whatever you want to replace

my_str = "the brown fox"

pattern = r"\s+"
print re.sub(pattern, repl, my_str)
  

 You can define a function in  re.sub  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5900753)
 You could create the string using . 

  re.compile('{}-\d*'.format(user))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7580823)
 The first argument to the findall function is just a string. So you use string concatenation: 

  for line in re.findall('(.+)'+Var_Name+'(.+)', Data):
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5900723)
 Working as it should: 

  >>> user = 'heinz'
>>> import re
>>> regex = re.compile('%s-\d*'%user)
>>> regex.match('heinz-1')
<_sre.SRE_Match object at 0x2b27a18e3f38>
>>> regex.match('heinz-11')
<_sre.SRE_Match object at 0x2b27a2f7c030>
>>> regex.match('heinz-12345')
<_sre.SRE_Match object at 0x2b27a18e3f38>
>>> regex.match('foo-12345')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32032264)
  

  >>> s = '''#Example
x = 'foo = {}'

bar = {
  'col': 'blue'
}

print('Hello Wld')
yes = { "no={}" }'''
>>> re.findall(r'^\s*(\w+)\s*=\s*\{[^}]*\}', s, re.M)
['bar', 'yes']
  

    

  >>> [i f i in re.findall(r'\{(?:\{[^{}]*\}|[^{}])*\}|^\s*(\w+)\s*=\s*(?=\{)', s, re.M) if i]
['bar', 'yes']
>>> 
  

 If you want to define it as a function, you may use the below. 

  def check(s):
    return [i f i in re.findall(r'\{(?:\{[^{}]*\}|[^{}])*\}|^\s*(\w+)\s*=\s*(?=\{)', s, re.M) if i]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20450325)
 You can build regex dynamically: 

  regex = r'\w{{{},{}}}\Z'.format(minimum, maximum)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7580833)
 If you know that the variable cannot contain any characters with special meaning in a regular expression just use string concatenation or any of the other ways to create a string. 

  for line in re.findall('(.+)'+Var_Name+'(.+)', Data):
  

 If there is a chance the variable could contain special characters then escape it first: 

  for line in re.findall('(.+)'+re.escape(Var_Name)+'(.+)', Data):
  



