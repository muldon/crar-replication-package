Query: Accented characters in Matplotlib
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15974746)
 from matplotlib import rc 

  rcParams['text.latex.unicode']=True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2406765)
 . You can use TeX: 

  from matplotlib import rcParams
rcParams['text.usetex'] = True
ax = ... # Axes object
ax.set_yticklabels(['$\'{e}$', '$\tilde{a}$', '$\hat{a}$'])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2408847)
 Prefix the strings with  u  to tell Python that they are Unicode strings: 

  ax.set_yticklabels([u'é', u'ã', u'â'])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14390347)
 I also had this problem specifically when I was trying to use the annotate function. Here was my error message: 

  ValueError: matplotlib display text must have all code points < 128 or use Unicode strings
  

 And here's what I used to resolve this: 

  "accented string i.e. sāo paulo".decode('utf-8')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3704793)
 If all you want to do is degrade accented characters to their non-accented equivalent: 

  >>> import unicodedata
>>> unicodedata.normalize('NFKD', u"m\u00fasica").encode('ascii', 'ignore')
'musica'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8738553)
  >>> a = u'Le bébé (de 4 ans) a également un étrange "rire"'
>>> r = unicodedata.normalize('NFKD',a).encode('cp1256','ignore')
>>> r = unicode(re.sub('[^\w\s-]','',r).strip().lower())
>>> r = re.sub('[-\s]+','-',r)
>>> print r
le-bebe-de-4-ans-a-egalement-un-etrange-rire
  

 I use cp1256 (latin 1) to handle accented characters... 

 Perfect !  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31609516)
 Some languages have combining diacritics as language letters and accent diacritics to specify accent. 

 I think it is more safe to specify explicitly what diactrics you want to strip: 

  def strip_accents(string, accents=('COMBINING ACUTE ACCENT', 'COMBINING GRAVE ACCENT', 'COMBINING TILDE')):
    accents = set(map(unicodedata.lookup, accents))
    chars = [c for c in unicodedata.normalize('NFD', string) if c not in accents]
    return unicodedata.normalize('NFC', ''.join(chars))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3319744)
 The Windows command line uses cp437 encoding in US Windows.  You need utf-8: 

  >>> import sys
>>> sys.stdin.encoding
'cp437'
>>> print urllib.urlencode({'foo':raw_input('> ').decode('cp437').encode('utf8')})
> áéíóúñ
foo=%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA%C3%B1
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39612904)
  import unicodedata
s = 'Émission'
search_string = ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))
  

 For Python 3.X 

  print (search_string)
  

 For Python 2.X 

  print search_string
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36298642)
 Maybe try this function for your columns if you can't get Excel to cooperate.  It will remove the accents using the  unicodedata  library: 

  import unicodedata

def remove_accents(input_str):

    if type(input_str) == unicode:
        nfkd_form = unicodedata.normalize('NFKD', input_str)
        return u"".join([c for c in nfkd_form if not unicodedata.combining(c)])
    else:
        return input_str
  



