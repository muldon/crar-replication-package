Query: Replacing characters in a regex
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35044277)
 Use http://www.regular-expressions.info/lookaround.html in  re.sub  

  >>> import re
>>> s = ['taxes.............................       .7        21.4    (6.2)','regulatory and other matters..................$   39.9        61.5        41.1','Producer contract reformation cost recoveries............................   DASH        26.3        28.3']
>>> [re.sub(r'(?<!\d)\.(?!\d)', ' ', i) for i in s]
['taxes                                    .7        21.4    (6.2)', 'regulatory and other matters                  $   39.9        61.5        41.1', 'Producer contract reformation cost recoveries                               DASH        26.3        28.3']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46568763)
 Use https://docs.python.org/3.6/library/re.html#re.findall: 

  >>> text = '''PasforcÃ©menthttpwwwsudouestfr20101129lesyndromedeliledererevientdanslactualite2525391381php merci httpswwwgooglecomsilvous '''
>>> import re
>>> re.findall(r'http\S+', text)
['httpwwwsudouestfr20101129lesyndromedeliledererevientdanslactualite2525391381php', 'httpswwwgooglecomsilvous']
  

  

  >>> rep = re.compile(r'http\S+')
>>> rep.sub('', text)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25474533)
 You could try the below regex also, 

  (?<= |^)(\S+)(?: \1){2,}(?= |$)
  

 Sample code, 

  >>> import regex
>>> s = "hi hi hi hi some words words words which'll repeat repeat repeat repeat repeat"
>>> m = regex.sub(r'(?<= |^)(\S+)(?: \1){2,}(?= |$)', r'\1 \1', s)
>>> m
"hi hi some words words which'll repeat repeat"
  

 http://regex101.com/r/cN4tF8/12 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27480747)
 Your searching for special characters in your regex. . 

  text = 'AFL_v_CalcOneIntAreas (%as_Points[0].ub_X%);\n'
print(re.sub('as_Points\[0\]\.ub_X', '0x00', text))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29624300)
 Use http://www.regular-expressions.info/lookaround.html. 

  re.sub(r'\ba(?=\d{4}\b)','A',string)
  

 Assertions won't consume any characters but asserts whether a match is possible or not. So the above regex matches only the  a  which was followed by exactly 4 digits. Replacing the matched  a  with  A  will give you the desired output. 

  OR   

 http://www.regular-expressions.info/refcapture.html 

  re.sub(r'\ba(\d{4})\b',r'A\1',string)
  

 This would capture the 4 digit number which follows the letter  a  into a group. Later we could refer the captured characters by specifying it's index number in the replacement part like  \1  (refers the first group). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28957805)
 Use https://docs.python.org/2/library/re.html#re.escape. 

  >>> a = "hello i am stackoverflow.com user +-"
>>> print(re.sub(r'\\(?=[\s"])', r'', re.escape(a)))
hello i am stackoverflow\.com user \+\-
  

 
   re.escape(string) 
  
   Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it. 
 

  r'\\(?=[\s"])'  matches all the backslashes which exists just before to  space or double quotes. Replacing the matched backslashes with an empty string will give you the desired output.  

    

  >>> a = 'hello i am stackoverflow.com user "+-'
>>> print(re.sub(r'[\s"])\W)', r'\\\1', a))
hello i am stackoverflow\.com user "\+\-
  

  [\s"])\W)  captures all the non-word characters but not of space or double quotes. Replacing the matched characters with backslash + chars inside group index 1 will give you the desired output. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5424584)
 I believe a negative lookahead assertion will do what you want: 

  import re

regex = r'<(?!/?QUOTE\b)[^>]+>'

tests = [
    'a plain old string',
    'a string with <SOME> <XML TAGS="stuff">',
    'a string with <QUOTE>, </QUOTE>, and <QUOTE with="data">',
    'a string that has <QUOTEA> tags </QUOTEB>',
]

for i in tests:
    result = re.sub(regex, '', i)
    print('{}\n{}\n'.format(i, result))
  

 EDIT: How it works 

 Lookahead assertions, as the name suggests, "look ahead" in the string being matched, but don't consume the characters they're matching. You can do positive ( (?=...) ) and negative ( (?!...) ) lookaheads. (There are also positive and negative lookbehind assertions.) 

 So, the regex shown matches  <  for the beginning of a tag, then does a negative lookahead for  QUOTE  with an optional  /  before it ( /? ) and a word boundary behind it ( \b ). If that's matched, the regex does not match, and that tag is ignored. If it's not matched, the regex goes on to eat one or more non- >  characters, and the closing  > . I guess you might want to have it eat any whitespace following the tag, too - I didn't do that. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14447851)
 http://docs.python.org/2/library/re.html#re.sub accepts a function as replacement: 

 
  re.sub(pattern, repl, string, count=0, flags=0)
  
  
   If  repl  is a function, it is called for every non-overlapping occurrence of pattern. The function takes a single match object argument, and returns the replacement string. 
 

 Here's an example: 

  In [1]: import re

In [2]: def repl(m):
   ...:     return '#' * len(m.group())
   ...: 

In [3]: re.sub(r'<[^<>]*?>', repl,
   ...:     '<o:LastSaved>2013-01-21T21:15:00Z</o:LastSaved>')
Out[3]: '#############2013-01-21T21:15:00Z##############'
  

 The pattern I used may need some polishing, I'm not sure what's the canonical solution to matching XML tags is. But you get the idea. 



