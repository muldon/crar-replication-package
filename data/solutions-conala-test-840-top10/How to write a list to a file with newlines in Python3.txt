Query: How to write a list to a file with newlines in Python3
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40632882)
 python3: Google "list comphrension" if the square bracket syntax is new to you. 

   with open('data.txt') as f:
     lines = [ line.strip( ) for line in list(f) ]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7138705)
  myfile.close  -- get rid of that where you use  with .  with  aumatically closes  myfile , and you have  call  close  like  close()  anyway for it  do anything when you're not using  with . You should just always use  with  on Python 3. 

  with open('/path//filename.txt', mode='wt', encoding='utf-8') as myfile:
    myfile.write('\n'.join(lines))
  

 Don't use  print   write  files -- use  file.write . In this case, you want  write some lines with line breaks in between, so you can just join the lines with  '\n'.join(lines)  and write the string that is created directly  the file. 

 If the elements of  lines  aren't strings, try: 

      myfile.write('\n'.join(str(line) for line in lines))
  

 . 

 Your second version doesn't work for a different reason.   

  ['element1', 'element2', 'element3']
  

   

  def save__file(*text):
  

   

  [['element1', 'element2', 'element3']]
  

 because the  *  puts each argument it gets in a list, even if what you pass is already a list. 

 If you want  support passing multiple lists, and still write them one after another, do 

  def save__file(*text):

    with open('/path//filename.txt', mode='wt', encoding='utf-8') as myfile:
        for lines in text:
            myfile.write('\n'.join(str(line) for line in lines))
            myfile.write('\n')
  

 or, for just one list, get rid of the  *  and do what I did above. 

  Edit:  @Arafangion is right, you should probably just use  b  instead of  t  for writing  your files. That way, you don't have  worry about the different ways different platforms handle newlines. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3846817)
  sys.stdout.write  writes (only) strings without newlines unless specified. 

  >>> x = 4
>>> print x
4
>>> import sys
>>> sys.stdout.write(str(x)) # you have to str() your variables
4>>> # <- no newline
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21264264)
 As user2357112 pointed out, your strings have newlines at the end, so you can use http://docs.python.org/2/library/stdtypes.html#str.strip which removes leading and trailing whitespace, including newlines.  

  for t in sorted_words:
      wrds.write(' '.join(str(s).strip() for s in t) + '\n')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33832866)
 The hint about buffering is helpfull. The following information can be found in the Subprocess library module documentation: 

 
   bufsize will be supplied as the corresponding argument to the open()
  function when creating the stdin/stdout/stderr pipe file objects: 
  
   0 means unbuffered (read and write are one system call and can return short) 
  
   1 means line buffered (only usable if universal_newlines=True i.e., in a text mode) 
 

 and 

 
   If universal_newlines is False the file objects stdin, stdout and
  stderr will be opened as binary streams, and no line ending conversion
  is done. 
  
   If universal_newlines is True, these file objects will be opened as
  text streams in universal newlines mode using the encoding returned by locale.getpreferredencoding(False) 
 

 Putting it all together gives the following Python3 code: 

  import subprocess
process = subprocess.Popen(['/bin/bash'], shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
process.stdin.write('echo it works!\n')
print(process.stdout.readline())
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5429268)
 As other answers gave already pointed out, you can do it by appending a '\n' to  c+n  or by using the format string "%s%s\n". 

 Just as a matter of interest, I think it would be more pythonic to use a list comprehension instead of two nested loops: 

  data.write("\n".join("%s%s"%(c,n) for c in s_chars for n in nums))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21264190)
 Your word strings have newlines at the end of them. 

 If you want output in the following form: 

  wordone 0.0
wordtwo 0.0
wordthree 0.0
  

 you should take the newlines off, then use 

  for word, weight_or_whatever in sorted_words:
    wrds.write("{} {}\n".format(word, weight_or_whatever))
  

 (I'm not sure what the numbers represent.) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1982169)
 This should help (you'll probably have to play around with it to strip the newlines or format it however you want, but the basic idea should work): 

  f = open(r"temp.txt")
[[c for c in line] for line in f]
  



