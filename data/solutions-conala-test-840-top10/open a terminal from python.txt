Query: open a terminal from python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49587570)
 The following code will open a new terminal and execute the process: 

  process = subprocess.Popen(
    "sudo gnome-terminal -x python f.py", 
    stdout=subprocess.PIPE,
    stderr=None,
    shell=True
)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13185545)
 If you want to open the terminal application from a Python script you can use the http://docs.python.org/2/library/subprocess.html module. 

  >>> from subprocess import call
>>> call(["open", "/Applications/Utilities/Terminal.app"])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43892754)
 I can not test it on raspberry, but OS NOOBS should have  lxterminal  available and the following code should work. If there is no  lxterminal  on your system, install it or try replacing it in code below with  xterm  or  gnome-terminal  etc. Tested on Ubuntu 16. 

  import os
import time
import subprocess


# create custom pipe file
PIPE_PATH = "/tmp/my_pipe"
if os.path.exists(PIPE_PATH):
    os.remove(PIPE_PATH)
    os.mkfifo(PIPE_PATH)

# open terminal that reads from your pipe file
a = subprocess.Popen(['lxterminal', '-e', 'tail --follow {0}'.format(PIPE_PATH)])

# write to file and it will be displayed in the terminal window
message = "some message to terminal\n"
with open(PIPE_PATH, "w") as p:
    p.write(message)

time.sleep(5)

# close the terminal
a.terminate()
  

 You can adjust the writing to file and sleep according to your needs.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15285703)
 Add followings to your  ~/.  

  # Setting PATH for Python 2.7
PATH="/path/to/your/python2.7/bin:${PATH}"
export PATH
  

 Save the file and reopen the terminal. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43333278)
 The  exec  command replaces the currently running process with a new one, so if you have an exec in a list of commands to run, as soon as exec is run, nothing else will run.  So you're replacing  'bash -c \"exec bash; MY_COMMAND; exec bash\" '  with  bash , and then nothing after the  exec bash  is running.   

  os.system("gnome-terminal -e 'bash -c \"MY_COMMAND\" '")
  

 or if you need a terminal to stay open, try this: 

  os.system("gnome-terminal -e 'bash -c \"MY_COMMAND; sleep 1000000\" '")
  

 of if you want the terminal to stay open and be in a bash shell, try this: 

  os.system("gnome-terminal -e 'bash -c \"MY_COMMAND; bash\" '")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47519018)
 Like most terminals, gnome terminal needs http://manpages.ubuntu.com/manpages/trusty/man1/gnome-terminal.1.html to execute commands: 

  gnome-terminal [-e, --command=STRING] [-x, --execute]
  

 You probably need to add  -x  option: 

 
   x, --execute 
  
   Execute the remainder of the command line inside the terminal.  
 

  

  os.system("gnome-terminal -x python f.py")
  

 That would not run your process in the background unless you add  &  to your command line BTW. 

 The  communicate  attempt would need a newline for your input but should work too, but complex processes like terminals don't "like" being redirected. It seems like using an interactive tool backwards.
And again, that would block until termination. What  could  work would be to use  p.stdin.write("python f.py\n")  to give control to the python script. . 

 So it seems that you don't even need python do to what you want.   

  python f.py &
  

 . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10168166)
 http://docs.python.org/library/webbrowser.html 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15285745)
 The easier solution is to install it via MacPorts: 

  sudo port install python_select
port search python # Search for version you are looking for
sudo port install python27
sudo port select --set python python27
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7574911)
 There are a few choices: 

 
 add  ; read -p "Hit ENTER to exit"  to the end of the command line. 
 add  ; sleep 10  to the end of the command line to wait a bit, then exit. 
  Configure gnome terminal: 

 Go to the "Edit" menu and click "Current Profile". Click on the "Title and Command" tab. In there, there is a setting called "When command exits". Change it to "hold the terminal open".  You could also create a new profile.  
 



