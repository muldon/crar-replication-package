Query: Sort a list of tuples depending on two elements
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9376419)
  sorted(unsorted, key=lambda element: (element[1], element[2]))
  

 I've assumed an order for the keys from the sample output. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21718855)
 You can use http://docs.python.org/3/library/stdtypes.html#list.sort, its http://docs.python.org/3/glossary.html#key-function, and http://docs.python.org/3/library/operator.html#operator.itemgetter: 

  >>> from operator import itemgetter
>>> example = [['b',1],['b',2],['a',2]]
>>> example.sort(key=itemgetter(1,0))
>>> example
[['b', 1], ['a', 2], ['b', 2]]
>>>
  

 

 You could also use a http://docs.python.org/3/tutorial/controlflow.html#lambda-expressions instead of  operator.itemgetter : 

  example.sort(key=lambda x: (x[1], x[0]))
  

 but that would be slower. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4006464)
  >>> li = [(1106257, (255, 255, 255)), (1, (16, 16, 118)), (1, (32, 32, 128)), (1, (48, 48, 122)), (9, (249, 249, 249)), (1, (64, 64, 126)), (406, (247, 247, 251))]
>>> li.sort()
>>> li
[(1, (16, 16, 118)), (1, (32, 32, 128)), (1, (48, 48, 122)), (1, (64, 64, 126)), (9, (249, 249, 249)), (406, (247, 247, 251)), (1106257, (255, 255, 255))]
  

 Default behavior when comparing tuples is to compare first the first one, then the second one etc. You can override this by giving a custom compare function as argument to the sort().  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47537450)
 This solution is quite brute force; however, it is still a possibility: 

  from itertools import permutations
list = [1, 2, 3, 4]
final_list = ((i, sum(abs(i[b]-i[b+1]) for b in range(len(i)-1))) for i in permutations(list, len(list)))
final_lists = max(final_list, key=lambda x:x[-1])
  

 Output: 

  ((2, 4, 1, 3), 7)
  

 Note that the output is in the form:  (list, total_sum))  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4008182)
 What you ask is the default behaviour when comparing tuples. However, the generic answer to your question can be: 

  >>> import operator

>>> li = [(1106257, (255, 255, 255)), (1, (16, 16, 118)), (1, (32, 32, 128)), (1, (48, 48, 122)), (9, (249, 249, 249)), (1, (64, 64, 126)), (406, (247, 247, 251))]
>>> li.sort(key=operator.itemgetter(0))
>>> li
[(1, (16, 16, 118)), (1, (32, 32, 128)), (1, (48, 48, 122)), (1, (64, 64, 126)),
 (9, (249, 249, 249)), (406, (247, 247, 251)), (1106257, (255, 255, 255))]
  

 If you want to sort based on columns other than the first (0), change that number. For example, if you want to sort based on columns 2 then 1, you would provide  operator.itemgetter(2, 1)  as  key . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21718841)
  >>> lis = [['b',1],['b',2],['a',2]]
>>> sorted(lis, key=lambda x:x[::-1])
[['b', 1], ['a', 2], ['b', 2]]
  

 To sort the list in-place use  lis.sort(...) . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46564326)
 First thing first: modifying a list (or dict, set etc) while iterating over it is usually a very bad idea.  

 In your case, the simplest solution is probably to just merge the two lists first then sort the list using the  key  callback: 

  list1.extend(list2)
list1.sort(key=lambda x: x.date)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6864072)
 This returns a new object: 

  >>> import operator
>>> sorted(my_list, key=operator.itemgetter(2), reverse=True)
  

  

  >>> import operator
>>> mylist.sort(key=operator.itemgetter(2), reverse=True)
  

 If you want to sort by two values; assuming tuples are like (name, birthday, time); 

  >>> mylist.sort(key=operator.itemgetter(1, 2), reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13003961)
 If you don't mind sorting the lists in your dict, I would recommend to do this in two passes: 

  for L in my_dict.itervalues():
  L.sort(reverse=True)

import collections
my_sorted_dict = collections.OrderedDict((k, my_dict[k]) for k in sorted(my_dict, key=my_dict.get, reverse=True))
  



