Query: How to remove the space between subplots in matplotlib.pyplot?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36049914)
 The problem is the use of  aspect='equal' , which prevents the subplots from stretching to an arbitrary aspect ratio and filling up all the empty space. 

 Normally, this would work: 

  import matplotlib.pyplot as plt

ax = [plt.subplot(2,2,i+1) for i in range(4)]

for a in ax:
    a.set_xticklabels([])
    a.set_yticklabels([])

plt.subplots_adjust(wspace=0, hspace=0)
  

 The result is this: 

 https://i.stack.imgur.com/Wqj6o.png 

 However, with  aspect='equal' , as in the following code: 

  import matplotlib.pyplot as plt

ax = [plt.subplot(2,2,i+1) for i in range(4)]

for a in ax:
    a.set_xticklabels([])
    a.set_yticklabels([])
    a.set_aspect('equal')

plt.subplots_adjust(wspace=0, hspace=0)
  

 This is what we get: 

 <a href="https://i.stack.imgur.com/TQh97.png"  

 The difference in this second case is that you've forced the x- and y-axes to have the same number of units/pixel. Since the axes go from 0 to 1 by default (i.e., before you plot anything), using  aspect='equal'</codeforces each axis to be a square. Since the figure is not a square, pyplot adds in extra spacing between the axes horizontally. 

 To get around this problem, you can set your figure to have the correct aspect ratio. We're going to use the object-oriented pyplot interface here, which I consider to be superior in general: 

  import matplotlib.pyplot as plt

fig = plt.figure(figsize=(8,8)) # Notice the equal aspect ratio
ax = [fig.add_subplot(2,2,i+1) for i in range(4)]

for a in ax:
    a.set_xticklabels([])
    a.set_yticklabels([])
    a.set_aspect('equal')

fig.subplots_adjust(wspace=0, hspace=0)
  

 Here's the result: 

 <a href="https://i.stack.imgur.com/tkcva.png"  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41073007)
 Try to add to your code this line: 

  fig.subplots_adjust(wspace=0, hspace=0)
  

  

  ax.set_xticklabels([])
ax.set_yticklabels([])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20058199)
 You can use http://matplotlib.org/api/gridspec_api.html to control the spacing between axes. There's more http://matplotlib.org/users/gridspec.html here.  

  import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

plt.figure(figsize = (4,4))
gs1 = gridspec.GridSpec(4, 4)
gs1.update(wspace=0.025, hspace=0.05) # set the spacing between axes. 

for i in range(16):
   # i = i + 1 # grid spec indexes from 0
    ax1 = plt.subplot(gs1[i])
    plt.axis('on')
    ax1.set_xticklabels([])
    ax1.set_yticklabels([])
    ax1.set_aspect('equal')

plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45487279)
 Without resorting http://matplotlib.org/api/gridspec_api.html entirely, the following might also be used to remove the gaps by setting  wspace  and  hspace  to zero: 

  import matplotlib.pyplot as plt

plt.clf()
f, axarr = plt.subplots(4, 4, gridspec_kw = {'wspace':0, 'hspace':0})

for i, ax in enumerate(f.axes):
    ax.grid('on', linestyle='--')
    ax.set_xticklabels([])
    ax.set_yticklabels([])

plt.show()
plt.close()
  

 Resulting in: 

 https://i.stack.imgur.com/2FZrm.png 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41075262)
 A note at the beginning: If you want to have full control over spacing, avoid using  plt.tight_layout()  as it will try to arange the plots in your figure to be equally and nicely distributed. This is mostly fine and produces pleasant results, but adjusts the spacing at its will. 

 The reason the GridSpec example you're quoting from the Matplotlib example gallery works so well is because the subplots' aspect is not predefined. That is, the subplots will simply expand on the grid and leave the set spacing (in this case  wspace=0.0, hspace=0.0 ) independent of the figure size. 

 In contrast to that you are plotting images with  imshow  and the image's aspect is set equal by default (equivalent to  ax.set_aspect("equal") ). That said, you could of course put  set_aspect("auto")  to every plot (and additionally add   wspace=0.0, hspace=0.0  as arguments to GridSpec as in the gallery example), which would produce a plot without spacings.  

 However when using images it makes a lot of sense to keep an equal aspect ratio such that every pixel is as wide as high and a square array is shown as a square image. 
What you will need to do then is to play with the image size and the figure margins to obtain the expected result. The  figsize  argument to figure is the figure (width, height) in inch and here the ratio of the two numbers can be played with. And the subplot parameters http://matplotlib.org/api/figure_api.html#matplotlib.figure.SubplotParams can be manually adjusted to give the desired result. 
Below is an example: 

  import numpy as np
import matplotlib.pyplot as plt
from matplotlib import gridspec

nrow = 10
ncol = 3

fig = plt.figure(figsize=(4, 10)) 

gs = gridspec.GridSpec(nrow, ncol, width_ratios=[1, 1, 1],
         wspace=0.0, hspace=0.0, top=0.95, bottom=0.05, left=0.17, right=0.845) 

for i in range(10):
    for j in range(3):
        im = np.random.rand(28,28)
        ax= plt.subplot(gs[i,j])
        ax.imshow(im)
        ax.set_xticklabels([])
        ax.set_yticklabels([])

#plt.tight_layout() # do not use this!!
plt.show()
  

 https://i.stack.imgur.com/U0766.png 

  Edit:  
It is of course desireable not having to tweak the parameters manually. So one could calculate some optimal ones according to the number of rows and columns.  

  nrow = 7
ncol = 7

fig = plt.figure(figsize=(ncol+1, nrow+1)) 

gs = gridspec.GridSpec(nrow, ncol,
         wspace=0.0, hspace=0.0, 
         top=1.-0.5/(nrow+1), bottom=0.5/(nrow+1), 
         left=0.5/(ncol+1), right=1-0.5/(ncol+1)) 

for i in range(nrow):
    for j in range(ncol):
        im = np.random.rand(28,28)
        ax= plt.subplot(gs[i,j])
        ax.imshow(im)
        ax.set_xticklabels([])
        ax.set_yticklabels([])

plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28408633)
 Have you tried the tight layout functionality? 

  plt.tight_layout()
  

 See also http://matplotlib.org/users/tight_layout_guide.html 

  EDIT : Alternatively, you can use http://matplotlib.org/users/gridspec.html#adjust-gridspec-layout: 

  import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
images = [np.random.rand(40, 40) for x in range(68)]
gs = mpl.gridspec.GridSpec(17, 4)
gs.update(wspace=0.1, hspace=0.1, left=0.1, right=0.4, bottom=0.1, top=0.9) 
for i in range(68):
    plt.subplot(gs[i])
    plt.imshow(images[i])
    plt.axis('off')
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37722582)
 If  sharex  is not principal use this code: 

  import matplotlib.pyplot as plt
f, axs = plt.subplots(ncols=2)
for i in range(2):
    ax = axs[i]
    ax.set_xticks(range(6))
    ax.set_xticklabels([str(x)+"foo" for x in range(6)], rotation=45)
    ax.plot(range(6), range(6))
plt.show()
  

 https://i.stack.imgur.com/nDx26.png 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35431657)
 By switching to the mpl object-oriented style, you can plot both the image and the scatter plot on the same axes, and hence only have to set the whitespace once, by using  ax.imshow  and  ax.scatter . 

 In the example below, I've used http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.subplots_adjust to remove the whitespace around the axes, and  ax.axis('tight')  to set the axis limits to the data range. 

  import matplotlib.pyplot as plt
import numpy as np

# Load an image
im = plt.imread('stinkbug.png')

# Set the alpha
alpha = 0.5

# Some random scatterpoint data
sx = np.random.rand(100)
sy = np.random.rand(100)

# Creare your figure and axes
fig,ax = plt.subplots(1)

# Set whitespace to 0
fig.subplots_adjust(left=0,right=1,bottom=0,top=1)

# Display the image
ax.imshow(im,alpha=alpha,extent=(0,1,1,0))

# Turn off axes and set axes limits
ax.axis('tight')
ax.axis('off')

# Plot the scatter points
ax.scatter(sx, sy,c="gray",s=4,linewidths=.2,alpha=.5)

plt.show()
  

 https://i.stack.imgur.com/Bu4Xi.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21286710)
 You should use a scatterplot here 

  import matplotlib.pyplot as pyplot

Fig, ax = pyplot.subplots()
for i, (mark, color) in enumerate(zip(
    ['s', 'o', 'D', 'v'], ['r', 'g', 'b', 'purple'])):
    ax.scatter(i+1, i+1, color=color,
            marker=mark,
            facecolors='none',
            label=i)

ax.set_xlim(0,5)
ax.set_ylim(0,5)
ax.legend(scatterpoints=1)

pyplot.show()
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54915930)
 You can use  ax.get_shared_x_axes()  to get a Grouper object that contains all the linked axes. Then use  group.remove(ax)  to remove the specified axis from that group. You can also  group.join(ax1, ax2)  to add a new share. 

  import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots(2, 10, sharex='row', sharey='row', squeeze=False)

data = np.random.rand(20, 2, 10)
for row in [0,1]:
    for col in range(10):
        n = col*(row+1)
        ax[row, col].plot(data[n,0], data[n,1], '.')

a19 = ax[1,9]

shax = a19.get_shared_x_axes()
shay = a19.get_shared_y_axes()
shax.remove(a19)
shay.remove(a19)

a19.clear()
d19 = data[-1] * 5
a19.plot(d19[0], d19[1], 'r.')

plt.show(fig)
  

 This still needs a little tweaking to set the ticks, but the bottom-right plot now has its own limits.
https://i.stack.imgur.com/uP21r.png 



