Query: How do I join two dataframes based on values in selected columns?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40221544)
  UPDATE:  (for updated DFs and new desired DF) 

  In [286]: merged = pd.merge(df1, df2, on=['A','B'], how='outer', suffixes=('','_y'))

In [287]: merged.L.fillna(merged.pop('L_y'), inplace=True)

In [288]: merged
Out[288]:
   A  B    C    D    L    E    F
0  4  3  1.0  5.0  1.0  4.0  5.0
1  5  7  0.0  3.0  2.0  3.0  3.0
2  3  2  1.0  6.0  4.0  NaN  NaN
3  3  8  NaN  NaN  5.0  5.0  5.0
  

  

  In [284]: df1
Out[284]:
   A  B  C  D  L
0  4  3  1  5  1
1  5  7  0  3  2
2  3  2  1  6  4

In [285]: df2
Out[285]:
   A  B  E  F  L
0  4  3  4  5  1
1  5  7  3  3  2
2  3  8  5  5  5
  

  OLD answer:  

 you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html method: 

  In [193]: pd.merge(a,b, on=['A','B'], how='outer')
Out[193]:
   A  B    C    D    E    F
0  4  3  1.0  5.0  4.0  5.0
1  5  7  0.0  3.0  3.0  3.0
2  3  2  1.0  6.0  NaN  NaN
3  3  8  NaN  NaN  5.0  5.0
  

  

  In [194]: a
Out[194]:
   A  B  C  D
0  4  3  1  5
1  5  7  0  3
2  3  2  1  6

In [195]: b
Out[195]:
   A  B  E  F
0  4  3  4  5
1  5  7  3  3
2  3  8  5  5
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49328513)
 Mask  df1  with your  isin  condition before the  merge : 

  df1.where(df1.Col3.isin(['C', 'B']))[['ID']].merge(df2, how='left', on='ID')
  

  

  df1.mask(~df1.Col3.isin(['C', 'B']))[['ID']].merge(df2, how='left', on='ID')
  

  

      ID ColA ColB ColC ColD
0  NaN  NaN  NaN  NaN  NaN
1    2    A    C    X    4
2    3    B    B    Y    d
3  NaN  NaN  NaN  NaN  NaN
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29336440)
 You can also use set comprehension to join all common columns from an arbitrary list of DataFrames: 

  df_list = [df1, df2, df3]
common_cols = list(set.intersection(*(set(c) for c in df_list)))
df_new = pd.concat([df[common_cols] for df in df_list], ignore_index=True)
>>> df_new 
    A  B
0   1  4
1   2  5
2   3  6
3   8  5
4   9  6
5  10  7
6   1  4
7   2  5
8   3  7
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54496236)
 You could left join the  DataFrames  using https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html. By setting  indicator=True , it adds a column  _merge  which will have  'both'  if it occurs also in  dtt_selected  (and therefore should be dropped) and  'left_only'  if it was only in  dtt_main  (and thus should be kept). Now in hte next line, you can first keep only the columns that have  'left_only' , and then drop the now unnecessary  '_merge' -column: 

  df1 = dtt_main.merge(dtt_selected, how='left', indicator=True)
df1[df1['_merge'] == 'left_only'].drop(columns='_merge')
#Output
#   a  b data
#2  1  2    c
#3  2  2    d
#5  4  3    f
#6  5  4    g
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37467438)
 Use pandas  merge  method with  left_on  and  right_on  parameters. 

  left.merge(right, how='left',
          left_on=['A', 'B', 'C'],
          right_on=['AA', 'BB', 'CC'])[['A', 'B', 'C', 'DD']]
  

  

      A   B   C   DD
0  A1  B0  K0   D0
1  A1  B1  K1  NaN
2  A2  B2  K0  NaN
3  A3  B3  K1   D1
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36444572)
 I think you can first create columns  year  and  quarter  in both  DataFrames  by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.year.html and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.quarter.html in  df1  and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.split.html with converting to  int  by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.astype.html in  df2 . Then you can http://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge.html them by columns  year  and  quarter : 

  #if type of column fecha is to datetime, convert it
df1['fecha'] = pd.to_datetime(df1['fecha'])
df1['year'] = df1['fecha'].dt.year
df1['quarter'] = df1['fecha'].dt.quarter
print df1
           fecha  municipioid   latitud  longitud  numbanyo  numdormitorio  \
25138 2014-02-12         4353  0.705444 -0.064720       1.0            1.0   
25144 2014-05-06         4353  0.705444 -0.064720       1.0            1.0   
25185 2014-01-02         4353  0.705349 -0.064618       1.0            1.0   
25186 2014-02-12         4353  0.705353 -0.064620       1.0            1.0   
25201 2014-07-07         4353  0.705314 -0.064610       1.0            3.0   

       year  quarter  
25138  2014        1  
25144  2014        2  
25185  2014        1  
25186  2014        1  
25201  2014        3  

df2 = df2.reset_index()
df2[['year','quarter']] = df2['cuatrimestre'].str.split('Q', expand=True)
df2['year'] = df2['year'].astype(int)
df2['quarter'] = df2['quarter'].astype(int)
print df2
  cuatrimestre  dif_precio_vivienda  dif_rendimiento_ibex  year  quarter
0       2014Q1                  NaN                   NaN  2014        1
1       2014Q2             0.000000             -2.940238  2014        2
2       1995Q3             0.007233             -0.500118  1995        3
3       1995Q4             0.026514              0.535169  1995        4
4       1996Q1            -0.009417             -0.171129  1996        1
  



  print pd.merge(df1,df2, on=['year','quarter'], how='left')
       fecha  municipioid   latitud  longitud  numbanyo  numdormitorio  year  \
0 2014-02-12         4353  0.705444 -0.064720       1.0            1.0  2014   
1 2014-05-06         4353  0.705444 -0.064720       1.0            1.0  2014   
2 2014-01-02         4353  0.705349 -0.064618       1.0            1.0  2014   
3 2014-02-12         4353  0.705353 -0.064620       1.0            1.0  2014   
4 2014-07-07         4353  0.705314 -0.064610       1.0            3.0  2014   

   quarter cuatrimestre  dif_precio_vivienda  dif_rendimiento_ibex  
0        1       2014Q1                  NaN                   NaN  
1        2       2014Q2                  0.0             -2.940238  
2        1       2014Q1                  NaN                   NaN  
3        1       2014Q1                  NaN                   NaN  
4        3          NaN                  NaN                   NaN  
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53627232)
 Use left join with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html and then replace missing values by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html: 

  df = df1.merge(df2, on=['Name','Status'], how='left')
df['Temp'] = df['Temp'].fillna(0).astype(int)
df['Remarks'] = df['Remarks'].fillna('')

print (df)
      Name    Status  Dummy Remarks  Temp
0    Kumar      Done      1             0
1  Shankar  Progress      1    Good     5
2  Shankar      Done      2    Very     6
3    sekar        no      0             0
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37467197)
 It looks like you want to http://pandas.pydata.org/pandas-docs/stable/merging.html. 

 However at the moment the columns names don't match up (A is AA in  right ). 
So first let's normalize them: 

  In [11]: right.columns = right.columns.map(lambda x: x[0])
  

 Then we can merge on the shared columns: 

  In [12]: left.merge(right)
Out[12]:
    A   B   C   D
0  A1  B0  K0  D0
1  A3  B3  K1  D1

In [13]: left.merge(right, how="outer")
Out[13]:
    A   B   C    D
0  A1  B0  K0   D0
1  A1  B1  K1  NaN
2  A2  B2  K0  NaN
3  A3  B3  K1   D1
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44981172)
 use the merge function instead of concat 

  pd.merge(st,dtest2,how='outer',left_index=True,right_index=True).fillna(0)
  



