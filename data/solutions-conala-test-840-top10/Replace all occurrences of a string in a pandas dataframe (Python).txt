Query: Replace all occurrences of a string in a pandas dataframe (Python)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25698756)
 You can use  replace  and pass the strings to find/replace as dictionary keys/items: 

  df.replace({'\n': ' '}, regex=True)
  

 For example: 

  >>> df = pd.DataFrame({'a': ['1\n', '2\n', '3'], 'b': ['4\n', '5', '6\n']})
>>> df
   a    b
0  1\n  4\n
1  2\n  5
2  3    6\n

>>> df.replace({'\n': ' '}, regex=True)
   a      b
0  1   4 
1  2   5
2  3      6 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29465238)
 It seems Pandas has change its API to avoid ambiguity when handling regex. Now you should use: 

  df.replace({'\n': ' '}, regex=True)
  

 For example: 

  >>> df = pd.DataFrame({'a': ['1\n', '2\n', '3'], 'b': ['4\n', '5', '6\n']})
>>> df
   a    b
0  1\n  4\n
1  2\n  5
2  3    6\n

>>> df.replace({'\n': ' '}, regex=True)
   a      b
0  1   4 
1  2   5
2  3      6 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4628646)
 string https://docs.python.org/2/library/string.html#string.replace function perfectly solves this problem: 

 
   string.replace(s, old, new[, maxreplace]) 
  
   Return a copy of string s with all occurrences of substring old replaced by new. If the optional argument maxreplace is given, the first maxreplace occurrences are replaced. 
 

  >>> u'longlongTESTstringTEST'.replace('TEST', '?', 1)
u'longlong?stringTEST'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38117138)
 You did not specify a regex or require an exact match, hence str.replace worked 

  str.replace(old, new[, count])
  

 Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced. 

  DataFrame.replace(to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad', axis=None)

parameter: to_replace : str, regex, list, dict, Series, numeric, or None
  

 str or regex:
str: string exactly matching to_replace will be replaced with value
regex: regexs matching to_replace will be replaced with value 

 They're not actually in the string: you have unescaped control characters, which Python displays using the hexadecimal notation: 

 remove all non-word characters in the following way: 

  re.sub(r'[^\w]', '', '\x00\x00\x00\x08\x01\x008\xe6\x7f')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49413160)
 You can perform this task by forming a |-separated string. This works because https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html accepts regex: 

 
   Replace occurrences of pattern/regex in the Series/Index with some
  other string. Equivalent to str.replace() or re.sub(). 
 

 This avoids the need to create a dictionary. 

  import pandas as pd

df = pd.DataFrame({'A': ['LOCAL TEST', 'TEST FOREIGN', 'ANOTHER HELLO', 'NOTHING']})

pattern = '|'.join(['LOCAL', 'FOREIGN', 'HELLO'])

df['A'] = df['A'].str.replace(pattern, 'CORP')

#               A
# 0     CORP TEST
# 1     TEST CORP
# 2  ANOTHER CORP
# 3       NOTHING
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36587663)
 It works if you escape the pipe. 

  >>> df[0].str.replace(" \| ", "@")
0    abc@def
Name: 0, dtype: object
  

 The http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html function is equivalent to  re.sub : 

  import re

>>> re.sub(' | ', '@', "abc | def")
'abc@|@def'

>>> "abc | def".replace(' | ', '@')
'abc@def'
  

 
   Series.str.replace(pat, repl, n=-1, case=True, flags=0): Replace occurrences of pattern/regex in the Series/Index with some other string. Equivalent to str.replace() or re.sub(). 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54714263)
 Use: 

  m=df.eq('?').sum()
pd.DataFrame([m.values],columns=m.index)

   C1  C2  C3
0   2   2   1
  

   

  df.eq('?').sum().to_frame().T #thanks @user3483203

C1  C2  C3
0   2   2   1
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13437137)
 Strings in Python are immutable, so you cannot change them in place. Check out the http://docs.python.org/2/library/stdtypes.html?highlight=str.replace#str.replace:  

 
   Return a copy of the string with all occurrences of substring old replaced by new. If the 
  optional argument count is given, only the first count occurrences are replaced. 
 

  

  def changeWord(word):
    for letter in word:
        if letter != "i":
            word = word.replace(letter,"!")
    return word
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53240010)
 Another Option is to find the first one and only after replace all  X  occurrences. 

 Finally, concat the beginning to the start of the sentence  

  st = 'X did something. X found it to be good, and so X went home.'
first_found = st.find('X')
print (st[:first_found + 1] + st[first_found + 1:].replace('X', 'Y'))
# X did something. Y found it to be good, and so Y went home.
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/46901888)
 I would do this with vanilla python, first join the string: 

  In [11]: long_string = "".join(df[0]).lower()

In [12]: long_string[:50]  # all the words glued up
Out[12]: "perhaps she'll be the one for me.is it two or one?"

In [13]: for w in word_list:
     ...:     print(w, long_string.count(w))
     ...:
one 5
two 3
three 2
  

 If you want to return a Series, you could use a dict comprehension: 

  In [14]: pd.Series({w: long_string.count(w) for w in word_list})
Out[14]:
one      5
three    2
two      3
dtype: int64
  



