Query: Sort a list based on dictionary values in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17740708)
 Since you are starting from a dictionary presumably you need to end with one, rather than a list so: 

  >>> import collections
>>> d = {
...     "Random" : [1,2,3], "Stupid" :  [1], "Gross" : [1,1,1,1,1], "Ugly" : [2,1,1,1]
...     }
>>> sd = collections.OrderedDict(sorted(d.items(), key=lambda t: -len(t[1])))
>>> sd
OrderedDict([('Gross', [1, 1, 1, 1, 1]), ('Ugly', [2, 1, 1, 1]), ('Random', [1, 2, 3]), ('Stupid', [1])])
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17362960)
 Dictionaries in Python are orderless.  

 In order to actually store ordering, you will need to either have a list of tuples, or use a http://docs.python.org/2/library/collections.html#collections.OrderedDict. 

  >>> from collections import OrderedDict
>>> OrderedDict(sorted(d.items(), key=lambda item: len(item[1])))
OrderedDict([('category_3', ['z']), ('category_1', ['a', 'b']), ('category_2', ['c', 'd', 'e'])])
  

 The ordering is achieved here by using http://docs.python.org/3.3/library/functions.html#sorted, with a simple  key  function. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13208582)
 Using Python 3.2: 

  x = {"b":4, "a":3, "c":1}
for i in sorted(x.values()):
    print(list(x.keys())[list(x.values()).index(i)])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17740366)
 Do you mean  length ? 

  >>> sorted(d, key=lambda k: -len(d[k]))
['Gross', 'Ugly', 'Random', 'Stupid']
>>> sorted(d, key=lambda k: len(d[k]), reverse=True)
['Gross', 'Ugly', 'Random', 'Stupid']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18691307)
 I would convert the dictionary to a list of tuples and sort it based on weight (in reverse order for descending), then just remove the objects to get a list of the keys 

  l = documents.items()
l.sort(key=lambda x: x[1]['weight'], reverse=True)
result = [d[0] for d in l]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44148366)
 This method will not use lambda and works well on Python 3.6: 

   # sort dictionary by value
d = {'a1': 'fsdfds', 'g5': 'aa3432ff', 'ca':'zz23432'}
def getkeybyvalue(d,i):
    for k, v in d.items():
        if v == i:
            return (k)

sortvaluelist = sorted(d.values())

# In >> Python 3.6+ << the INSERTION-ORDER of a dict is preserved. That is,
# when creating a NEW dictionary and filling it 'in sorted order',
# that order will be maintained.
sortresult ={}
for i1 in sortvaluelist:   
    key = getkeybyvalue(d,i1)
    sortresult[key] = i1
print ('=====sort by value=====')
print (sortresult)
print ('=======================')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16435785)
   

  import operator    
x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}
  

 For Python 3.x:  x.items()  replacing  iteritems() . 

  >>> sorted_x
{0: 0, 1: 2, 2: 1, 3: 4, 4: 3}
  

 Or try with  collections.OrderedDict ! 

  x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
from collections import OrderedDict

od1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43715989)
 sort the dictionary from smallest to largest: 

  >>> sorted(beacons_detected.items(), key=lambda x: x[1][1])
[('55:c1:9a:41:4c:b9', ['-78', '1493580469']), ('5e:30:e7:12:97:64', ['-79', '1493587968']), ('9c:20:7b:e0:6c:41', ['-74', '1493622425'])]
  

 sort the dictionary from largest to smallest: 

  >>> sorted(beacons_detected.items(), key=lambda x: x[1][1], reverse=True)
[('9c:20:7b:e0:6c:41', ['-74', '1493622425']), ('5e:30:e7:12:97:64', ['-79', '1493587968']), ('55:c1:9a:41:4c:b9', ['-78', '1493580469'])]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52345214)
 Starting from Python 3.6,  dict  objects are now ordered by insertion order. It's officially in the specs of Python 3.7. 

  >>> words = {"python": 2, "blah": 4, "alice": 3}
>>> dict(sorted(words.items(), key=lambda x: x[1]))
{'python': 2, 'alice': 3, 'blah': 4}
  

 Before that, you had to use  OrderedDict . 

 https://docs.python.org/3.7/library/stdtypes.html#typesmapping says: 

 
   Changed in version 3.7: Dictionary order is guaranteed to be insertion
  order. This behavior was implementation detail of CPython from 3.6.  
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45244603)
 You could store the indices of keys in a dictionary and use those in the https://docs.python.org/3.6/library/functions.html#sorted. This would work in  O(n log(n))  time: 

  >>> keys = {next(iter(v)): i for i, v in enumerate(B)}
>>> keys
{'a': 0, 'e': 1, 'b': 2, 'g': 3, 'f': 4}    
>>> A.sort(key=lambda x: keys[next(iter(x))])
>>> A
[{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  



