Query: loop through a Python list by twos
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2990295)
  nums = range(10)
for i in range(0, len(nums)-1, 2):
    print nums[i]
  

 Kinda dirty but it works. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48062208)
 When you do  twos.append(ones) , you're passing the reference to the ones list, not the value itself. Therefore, when you do  twos[-1][-1] = 2 , it'll modify the value in the ones list itself, not a copy in the twos list. 

 To pass the value instead of the reference to the ones list, you can do: 

  twos.append(ones[:])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2990152)
 You can use for in range with a step size of 2: 

  Python 2  

  for i in xrange(0,10,2):
  print(i)
  

  Python 3  

  for i in range(0,10,2):
  print(i)
  

  Note:  Use xrange in Python 2 instead of range because it is more efficient as it generates an iterable object, and not the whole list.   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2990873)
 The simplest in my opinion is just this: 

  it = iter([1,2,3,4,5,6])
for x, y in zip(it, it):
    print x, y
  

 . . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2990151)
 If you're using Python 2.6 or newer you can use the grouper http://docs.python.org/library/itertools.html#recipes from the http://docs.python.org/library/itertools.html module: 

  from itertools import izip_longest

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
  

  

  for item1, item2 in grouper(2, l):
    # Do something with item1 and item2
  

 Note that in Python 3.x you should use  zip_longest  instead of  izip_longest . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46209579)
 You can use built in  any()  to check for two consecutive twos as the following: 

  def has22(nums):
    return True if any(nums[i] == 2 and nums[i+1] == 2 for i in range(len(nums)-1) else False
  

 Alternatively, you can modify your for loop to the following: 

  def has22(nums):
    for i in range(len(nums)-1):
        if nums[i] == 2 and nums[i+1] == 2:
            return True
    return False
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48062226)
  twos.append(ones)  does not copy  ones . 

 There is only ever one list  ones  in memory, which also goes by the following references:  

 
  terms[0]  
  twos[0]  
 

 and also  terms[-1]  and  twos[-1]  because  terms  and  twos  only have one element each, so the first is the last. 

 Now, when you  mutate   ones / terms[0] / terms[-1] / twos[0] / twos[-1]  you are mutating the same list in memory. 

 I highly recommend watching https://www.youtube.com/watch?v=_AEJHKGk9ns. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2990281)
 You can also use this syntax ( L[start:stop:step] ): 

  mylist = [1,2,3,4,5,6,7,8,9,10]
for i in mylist[::2]:
    print i,
# prints 1 3 5 7 9

for i in mylist[1::2]:
    print i,
# prints 2 4 6 8 10
  

 Where the first digit is the starting index (defaults to beginning of list or 0), 2nd is ending slice index (defaults to end of list), and the third digit is the offset or step. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44130904)
 Use a  list comprehension  to build the new tuple after  zipping  your list items in twos: 

  l = [i+(j,) for i, j in zip(lst[::2], lst[1::2])]
print(l)
# [(1, 'abc', 0.312), (2, 'def', 0.122), (1, 'abc', 0.999)]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54632868)
  shift </h3>

  ones = df.Event.eq(1)
twos = df.Event.eq(2)
ones_then_twos = ones & twos.shift(-1)

mask = ones_then_twos | ones_then_twos.shift()

df[mask]

   ID  Event     A
0   1      1   jdf
1   1      2   kfl
4   2      1   sdf
5   2      2  asas
  

 

  ones_then_twos  shifts the  twos  boolean series backwards by one to ensure that we have a two that follows a one. 

  ones_then_twos

0     True
1    False
2    False
3    False
4     True
5    False
6    False
Name: Event, dtype: bool
  

 But this only gets the ones that are followed by twos.  We also want the twos that are preceded by ones.  But these just come right after so we shift forward the same mask and use "or" to combine them: 

  ones_then_twos | ones_then_twos.shift()

0     True
1     True
2    False
3    False
4     True
5     True
6    False
Name: Event, dtype: bool
  

 This is the mask we use and you can see that it is  True  for both the ones and twos where twos come on the heels of ones. 



