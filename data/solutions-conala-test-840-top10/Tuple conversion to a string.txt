Query: Tuple conversion to a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33799695)
 Use https://docs.python.org/2/library/ast.html as below- 

  >>>import ast
>>>To=ast.literal_eval(To)
>>>print To
>>>('abc@hcl.com', 'xyz@hcl.com', 'accc@infy.com', 'satya@lab.com', 'ach@lab.com')
>>>len(To) 
>>>5
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33799771)
 Or if you don't want to use ast, you can simply run: 

  tuple(word[1:-1] for word in To.split(","))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33799901)
  Notes:  

 
 you can convert your  String  into  List  by splitting at  ,  
 you can then convert the  List  into  Tuple  
 

  Code:  

  To = "'abc@hcl.com','xyz@hcl.com','accc@infy.com','satya@lab.com','ach@lab.com'"
print tuple(To.split(","))
  

  Output:  

  ("'abc@hcl.com'", "'xyz@hcl.com'", "'accc@infy.com'", "'satya@lab.com'", "'ach@lab.com'")
  

 If you want to remove the  '  quotes 

  Code1:  

  print tuple(elem.strip("'") for elem in To.split(","))
  

  Output1:  

  ('abc@hcl.com', 'xyz@hcl.com', 'accc@infy.com', 'satya@lab.com', 'ach@lab.com')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12485326)
  ', '.join('(' + ', '.join(i) + ')' for i in L)
  

 Output: 

  '(Steve Buscemi, Mr. Pink), (Chris Penn, Nice Guy Eddie)'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7146047)
 The object  data  is a tuple. When you print a tuple, Python call  repr  for each element. If you want to format it another way, you have to do the conversion yourself. 

  >>> s = "ad\23e\4x{\s"
>>> d = (s,)
>>> print d
('ad\x13e\x04{\\s',)
>>> print '(%s,)' % (', '.join('"%s"' % _ for _ in d))
("adex{\s")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31268194)
 You created a tuple: 

  tow=myword, '|', mystr.index(myword)
  

 That's not a string object, that's a tuple containing three other objects, two of which are strings, one an integer. 

 When you then write that tuple to the file, Python has to convert it to a string. Converting any Python container (be that a tuple, a list, a set or a dictionary) will use the  repr()  representation of the contained objects. For strings, that means only printable ASCII characters are allowed and shown, everything else uses escape sequences, most often the  \xhh  form. 

 If that is not correct output for your usecase, you need to do the string conversion yourself. You could use string formatting: 

  tow = '{}|{}'.format(myword, mystr.index(myword))
  

 If you are producing a lot of  | -separated data, you may want to look at the  csv  module instead to handle the separator and file writing. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18344005)
  

  lst = [('item1', 'value1'), ('item2', 'value2'), ('item3', 'value3')]
print ', '.join(str(x) + '=' + str(y) for x, y in lst)
  

 I'm explicitly converting to string the items and values, if one (or both) are already strings you can remove the corresponding  str()  conversion: 

  print ', '.join(x + '=' + y for x, y in lst)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38186422)
  >>> ('a') == 'a'
True
  

 If you're not going to use a single element tuple, then the parenthesis are only grouping parenthesis (not a container), and they won't  stick  like you want them to, except you include them as part of the string with  a  or define a custom print function. 

 With the custom print function, you get to keep the conversion from list to tuple (i.e.  t = tuple(mylist) ) as is and also use the single element tuple as is: 

  def tuple_print(t):
    print(str(t).replace(',', '') if len(t) == 1 else t)
  

  Trials : 

  >>> def tuple_print(t):
...      print(str(t).replace(',', '') if len(t) == 1 else t)
...
>>> mylist = ["a"]
>>> t = tuple(mylist)
>>> t
('a',)
>>> tuple_print(t)
('a')
>>> t = ('a', 'b')
>>> tuple_print(t)
('a', 'b')
  



