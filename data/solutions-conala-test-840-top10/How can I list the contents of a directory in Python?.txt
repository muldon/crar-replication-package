Query: How can I list the contents of a directory in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45229501)
 Below code will list directories and the files within the dir. The other one is os.walk 

  def print_directory_contents(sPath):
        import os                                       
        for sChild in os.listdir(sPath):                
            sChildPath = os.path.join(sPath,sChild)
            if os.path.isdir(sChildPath):
                print_directory_contents(sChildPath)
            else:
                print(sChildPath)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2759343)
 http://diveintopython.net/file_handling/os_module.html: 

  import os
os.listdir("/home/username/www/")
  

 http://docs.python.org/library/glob.html#glob.glob: 

  glob.glob("/home/username/www/*")
  

 http://diveintopython.net/file_handling/os_module.html. 

 The  glob.glob  method above will not list hidden files. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5629275)
 You can use http//docs.python.org/library/os.html#os.listdir to list the contents of the current directory (".") 

  for name in os.listdir(".")
    if name.endswith(".txt")
        print(name)
  

 If you want the whole list as a Python list, use a  list comprehension  

  a = [name for name in os.listdir(".") if name.endswith(".txt")]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2759553)
  os.walk  can be used if you need recursion: 

  import os
start_path = '.' # current directory
for path,dirs,files in os.walk(start_path):
    for filename in files:
        print os.path.join(path,filename)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2759329)
  glob.glob  or  os.listdir  will do it. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20173900)
  

  import os

# Python 2.7
map( os.unlink, (os.path.join( mydir,f) for f in os.listdir(mydir)) )

# Python 3+
list( map( os.unlink, (os.path.join( mydir,f) for f in os.listdir(mydir)) ) )
  

 A more robust solution accounting for files and directories as well would be (2.7): 

  def rm(f):
    if os.path.isdir(f): return os.rmdir(f)
    if os.path.isfile(f): return os.unlink(f)
    raise TypeError, 'must be either file or directory'

map( rm, (os.path.join( mydir,f) for f in os.listdir(mydir)) )
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50241361)
 In Python 3.4+, you can use the new https://docs.python.org/3/library/pathlib.html package: 

  from pathlib import Path
for path in Path('.').iterdir():
    print(path)
  

  Path.iterdir()  returns an iterator, which can be easily turned into a  list : 

  contents = list(Path('.').iterdir())
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26284270)
 You're not passing a mode to open, so it's trying to open in read mode.  

  outfile = open('/outdirectory/%s.txt' % str(counter), "w") 
  

  

  out_directory = "/outdirectory"
if not os.path.exists(out_directory):
    os.makedirs(out_directory)

for counter in range(0, len(python_list)):
    file_path = os.path.join(out_directory, "%s.txt" % counter)
    with open(file_path, "w") as outfile:
        outfile.write(python_list[counter])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54679881)
 This is a working solution which stores both file names and file contents in a list, then joins the list filenames and creates a "combined" filename and then adds the contents of all the files to it, because lists append in order that the data is read this is sufficient (my example filenames are filea.txt and fileb.txt but it will work for the filenames you've used): 

  import os
import sys

path = sys.argv[1]
files = []
contents = []
for f in os.listdir(path):
    if f.endswith('.txt'): # in case there are other file types in there
        files.append(str(f.replace('.txt', ''))) #chops off txt so we can join later
        with open(f) as cat:
            for line in cat:
                contents.append(line) # put file contents in list

outfile_name = '_'.join(x for x in files)+'.txt' #create your output filename
outfile = open(outfile_name, 'w')
for line in contents:
    outfile.write(line)
outfile.close()
  

 to run this on a specific directory just pass it on the commandline: 

  $python3.6 catter.py /path/to/my_text_files/
  

 output filename: 

  filea_fileb.txt
  

 contents: 

  123123
21321
2344
23432
  



