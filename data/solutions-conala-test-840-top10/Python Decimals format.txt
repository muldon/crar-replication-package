Query: Python Decimals format
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2389916)
 Just use Python's standard http://docs.python.org/library/stdtypes.html#str.format: 

  >>> "{0:.2}".format(1.234232)
'1.2'
>>> "{0:.3}".format(1.234232)
'1.23'
  

 If you are using a Python version under 2.6, use 

  >>> "%f" % 1.32423
'1.324230'
>>> "%.2f" % 1.32423
'1.32'
>>> "%d" % 1.32423
'1'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53900757)
 If you are willing to use newer  format  you can do this: 

  >>> n = 4
>>> value = 20.283928
>>> '{:.{count}f}'.format(value, count=n)

'20.2839'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1598583)
 To round x to n decimal places use: 

  "{0:.{1}f}".format(x,n)
  

 where 0 and 1 stand for the first and second arguments of the str.format() method, respectively. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35805562)
 You could format your output like this; 

  a=1
for x in range(5):
    a += 0.1
    print("{:.9f}".format(a) )
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33854507)
 You can divide your number by 10000 or 100: 

  some_int = 12345678
print '{0:.4f}'.format(some_int / 10000.0)
print '{0:.2f}'.format(some_int / 100.0)
  

 or with a variable amount of decimals: 

  decimals = 3
print '{0:.{1}f}'.format(some_int / 10.0**decimals, decimals)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38629025)
 I just found out that it is possible to combine both the  {0}  and the  {digits}  notation. This is especially useful when you want to round all variables to a pre-specified number of decimals  with 1 declaration : 

  sName = 'Nander'
fFirstFloat = 1.12345
fSecondFloat = 2.34567
fThirdFloat = 34.5678
dNumDecimals = 2

print( '{0} found the following floats: {1:.{digits}f}, {2:.{digits}f}, {3:.{digits}f}'.format(sName, fFirstFloat, fSecondFloat, fThirdFloat, digits=dNumDecimals))
# Nander found the following floats: 1.12, 2.35, 34.57
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28007462)
 Using https://docs.python.org/3/library/stdtypes.html#str.format: 

  >>> '{:,.2f}'.format(1003.2)
'1,003.20'
  

 The  ','  format specification signals the use of a comma for a thousands separator. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19119772)
 0.4 and 0.40 are mathematically equivalent. 

 If you want to display them with two decimal places, use  {:.2f}  formatting: 

  >>> '{:.2f}'.format(0.4)
'0.40'
  



