Query: Construct pandas DataFrame from list of tuples
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50467345)
 Use nested list comprehension: 

  df = pd.DataFrame([[y[1] for y in  x] for x in example])
print (df)
    0   1
0   b   d
1  b1  d2
  

 

  df = pd.DataFrame([[y[1] for y in  x] for x in example], columns=['col1','col2'])
print (df)
  col1 col2
0    b    d
1   b1   d2
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45285342)
 Use  zip()  to create tuples 

  df = pd.DataFrame({'a':[1,3,5,6,7], 'b':[3,6,7,4,8]})
print(list(zip(df['a'], df['b']))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38558738)
  

  import pandas as pd
A1 = pd.DataFrame(A).stack().reset_index().drop('level_1', 1).rename(columns = {'level_0': "No", 0: "content"})

A1
#  No  content
#0  0        a
#1  0        b
#2  0        c
#3  1        c
#4  1        d
#5  1        e
#6  2        f
#7  2        g
#8  2        h
  

 Or you can flatten your list firstly and then construct data frame from it: 

  dicA = {"No":[], "content":[]}
for i, s in enumerate(A):
    for e in s:
        dicA['No'].append(i)
        dicA['content'].append(e)

import pandas as pd
pd.DataFrame(dicA)

#  No  content
#0  0        a
#1  0        b
#2  0        c
#3  1        c
#4  1        d
#5  1        e
#6  2        f
#7  2        g
#8  2        h
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50467474)
 For numeric data, you can use  numpy  indexing directly. This should be more efficient than a list comprehension, as  pandas  uses  numpy  internally to store data in contiguous memory blocks. 

  import pandas as pd, numpy as np

example = [[(1,2), (3,4)], [(5,6), (7,8)]]

df = pd.DataFrame(np.array(example)[..., 1],
                  columns=['col1', 'col2'])

print(df)

   col1  col2
0     2     4
1     6     8
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19961557)
 You can pivot your DataFrame after creating: 

  >>> df = pd.DataFrame(data)
>>> df.pivot(index=0, columns=1, values=2)
# avg DataFrame
1      c1     c2
0               
r1  avg11  avg12
r2  avg21  avg22
>>> df.pivot(index=0, columns=1, values=3)
# stdev DataFrame
1        c1       c2
0                   
r1  stdev11  stdev12
r2  stdev21  stdev22
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33700743)
 Pass a  list  of tuples instead of a tuple of tuples: 

  In [13]: pd.DataFrame(list(s))
Out[13]: 
   0  1  2   3
0  1  0  0   0
1  2  3  0   0
2  4  5  6   0
3  7  8  9  10
  

  pd.DataFrame(data)  follows different code paths when  data  is a tuple as opposed to a list.  

 Pandas developer https://github.com/pydata/pandas/issues/11522#issuecomment-154714142: 

 
   list-of-tuples is the specified type, tuple-of-tuple is not allowed as I think it can signify nested types that would require more parsing. 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52833293)
 You can try creating a dask dataframe from an existing pandas dataframe (to be able to use all pandas constructors): 

  df = pd.DataFrame([(21262, 'booking', 'NULL'), (21262, 'booking', 'NULL'), (21262, 'booking', 'NULL'), (21262, 'booking', ''), (21262, 'booking', 'NULL')])
ddf = dd.from_pandas(df, npartitions=2)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47547139)
 This is what I expected to see when I came to this question: 

  #!/usr/bin/env python

import pandas as pd


df = pd.DataFrame([(1, 2, 3, 4),
                   (5, 6, 7, 8),
                   (9, 0, 1, 2),
                   (3, 4, 5, 6)],
                  columns=list('abcd'),
                  index=['India', 'France', 'England', 'Germany'])
print(df)
  

  

           a  b  c  d
India    1  2  3  4
France   5  6  7  8
England  9  0  1  2
Germany  3  4  5  6
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37862313)
 I think you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_records.html with converting  tuples  to  list : 

  import pandas as pd

tuples = ((1,2,3),(4,6,7),(7,3,6),(8,2,7),(4,6,3),(7,3,6))

columnlist = ['a','b','c']
df = pd.DataFrame.from_records(list(tuples), columns=columnlist)
print (df)
   a  b  c
0  1  2  3
1  4  6  7
2  7  3  6
3  8  2  7
4  4  6  3
5  7  3  6
  

 Another solution with  DataFrame  constructor only: 

  import pandas as pd

tuples = ((1,2,3),(4,6,7),(7,3,6),(8,2,7),(4,6,3),(7,3,6))

columnlist = ['a','b','c']
df = pd.DataFrame(list(tuples), columns=columnlist)
print (df)
   a  b  c
0  1  2  3
1  4  6  7
2  7  3  6
3  8  2  7
4  4  6  3
5  7  3  6
  

 EDIT: 

 If check http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html and parameter  data : 

 
    data  : numpy ndarray (structured or homogeneous), dict, or DataFrame 
  
   Dict can contain Series, arrays, constants, or list-like objects 
 



