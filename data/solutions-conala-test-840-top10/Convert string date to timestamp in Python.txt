Query: Convert string date to timestamp in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39828833)
 I would suggest http://labix.org/python-dateutil: 

  import dateutil.parser
dateutil.parser.parse("01/12/2011", dayfirst=True).timestamp()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52512015)
 Simply use  datetime.datetime.strptime : 

  import datetime
stime = "01/12/2011"
print(datetime.datetime.strptime(stime, "%d/%m/%Y").timestamp())
  

  

  1322697600
  

 To use UTC instead of the local timezone use  .replace : 

  datetime.datetime.strptime(stime, "%d/%m/%Y").replace(tzinfo=datetime.timezone.utc).timestamp()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8400745)
 Use this, 

  datetime.datetime.fromtimestamp(t)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9597396)
 You can convert the current time like this 

  t=datetime.fromtimestamp(time.time())
t.strftime('%Y-%m-%d')
'2012-03-07'
  

 To convert a date in string to different formats. 

  import datetime,time

def createDateObject(str_date,strFormat="%Y-%m-%d"):    
    timeStamp = time.mktime(time.strptime(str_date,strFormat))
    return datetime.datetime.fromtimestamp(timeStamp)

def FormatDate(objectDate,strFormat="%Y-%m-%d"):
    return objectDate.strftime(strFormat)

Usage
=====
o=createDateObject('2013-03-03')
print FormatDate(o,'%d-%m-%Y')

Output 03-03-2013
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3682808)
 Use  datetime  module: 

  from datetime import datetime
ts = int("1284101485")

# if you encounter a "year is out of range" error the timestamp
# may be in milliseconds, try `ts /= 1000` in that case
print(datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S'))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20035328)
 To convert the string into a date object: 

  from datetime import date, datetime

date_string = "01/12/2011"
date_object = date(*map(int, reversed(date_string.split("/"))))
assert date_object == datetime.strptime(date_string, "%d/%m/%Y").date()
  

 The way to convert the date object into POSIX timestamp depends on timezone. From https://stackoverflow.com/a/8778548/4279: 

 
  date object represents midnight in UTC 

  import calendar

timestamp1 = calendar.timegm(utc_date.timetuple())
timestamp2 = (utc_date.toordinal() - date(1970, 1, 1).toordinal()) * 24*60*60
assert timestamp1 == timestamp2
   
  date object represents midnight in local time 

  import time

timestamp3 = time.mktime(local_date.timetuple())
assert timestamp3 != timestamp1 or (time.gmtime() == time.localtime())
   
 

 The timestamps are different unless midnight in UTC and in local time is the same time instance. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7273956)
 To parse the string into a  datetime.datetime  object: 

  In [23]: import datetime
In [29]: datetime.datetime.strptime('9/1/2011','%m/%d/%Y')
Out[29]: datetime.datetime(2011, 9, 1, 0, 0)
  

 Here is a little diagram describing how datetime/timetuple/timestamp conversions are done in Python: 

           o------------o
         |            |  dt.datetime.utcfromtimestamp (*)
         |            |<-----------------------------------o 
         |            |                                    |
         |  datetime  |                                    |
         |            |  dt.datetime.fromtimestamp         |
         |            |<----------------------------o      |
         |            |                             |      |
         o------------o                             |      |
            |   ^                                   |      |
 .timetuple |   |                                   |      |
            |   | dt.datetime(*tup[:6])             |      |
            v   |                                   |      |
         o------------o                          o------------o
         |            |-- calendar.timegm (*) -->|            |
         |            |                          |            |
         |            |---------- time.mktime -->|            |
         |  timetuple |                          |  timestamp |
         |            |<-- time.localtime -------|            |
         |            |                          |            |
         |            |<-- time.gmtime (*)-------|            |
         o------------o                          o------------o

(*) Interprets its input as being in UTC and returns output in UTC
  

 So, to convert it to a timestamp (regarding the input as a local datetime): 

  In [30]: import time

In [31]: time.mktime(datetime.datetime.strptime('9/1/2011','%m/%d/%Y').timetuple())
Out[31]: 1314849600.0
  

 To convert it to a timestamp (regarding the input as a UTC datetime): 

  In [32]: import calendar

In [33]: calendar.timegm(datetime.datetime.strptime('9/1/2011','%m/%d/%Y').timetuple())
Out[33]: 1314835200
  

 To convert it back to a string in MM/DD/YYYY format: 

  In [34]: timestamp=1314849600.0
In [35]: datetime.datetime.fromtimestamp(timestamp).strftime('%m/%d/%Y')
Out[35]: '09/01/2011'
  

 or (if the timestamp is with respect to UTC): 

  In [36]: datetime.datetime.utcfromtimestamp(timestamp).strftime('%m/%d/%Y')
Out[36]: '09/01/2011'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29688540)
 You can use the  datetime.datetime.strptime()  function to create a datetime object, then  datetime.datetime.strftime()  to return your correctly formatted date like so: 

  from datetime import datetime
dt = datetime.strptime('2015-04-08T07:52:00Z', '%Y-%m-%dT%H:%M:%SZ')
print dt.strftime('%d/%m/%Y')
  



