Query: join list of lists in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5465334)
  ",".join("'%s'" % qb[0] for qb in qb_data)
  

 You can still selectively pick out stuff in your generator expression/list comprehension, of course! 

 For example: 

  >>> qb_data = [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8', '9']]
>>> ",".join("'%s'" % qb[0] for qb in qb_data)
"'1','3','5','7'"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46103748)
 You can iterate through the outer list and then join the slice of the first two items: 

  def merge_names(lst):
   for l in lst:
      l[0:2] = [' '.join(l[0:2])]

merge_names(listoflist)
print(listoflist)
# [['BOTOS AUGUSTIN', 14, 'March 2016', 600, 'ALOCATIA'], ['HENDRE AUGUSTIN', 14, 'February 2015', 600, 'ALOCATIA']]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46103783)
 this simple list-comprehension should do the trick: 

  res = [[' '.join(item[0:2]), *item[2:]] for item in listoflist]
  

  join  the first two items in the list and append the rest as is. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/30315918)
 You can use  +  to join two lists, and  join  to join them. 

  brands = ["google", "apple", "intel", "qualcomm"]
otherBrands = ["nike", "reebok", "puma"]

print ":".join(brands + otherBrands)
  

 If you are looking for syntax similar to  qw  in Perl (to create a list of string literals without quotes), that does not exist in Python as far as I know. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33629819)
 The error you are getting because  join  wants elements to be  string  type, but in your list there is  integer  too, so 1st you have to convert them to type string. 

 you can use list comprehension and str and join to join them 

  >>> lists = [10,"test",10.5]
>>> ",".join(str(x) for x in lists)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20362283)
 You can use nested http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions with  str.join : 

  >>> lst = [['A',1,2],['B',3,4]]
>>> [", ".join([str(y) for y in x]) for x in lst]
['A, 1, 2', 'B, 3, 4']
>>>
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50366723)
 Try this if you are using python>=3.6: 

  [f'{i}_{j}' for i,j in zip(list_1, list_2)]
  

 If you using python3.5, you can do this: 

   ['{}_{}'.format(i,j) for i,j in zip(list_1, list_2)]
  

 also you can use this if you don't want to use formatted string: 

  ['_'.join([i,j]) for i,j in zip(list_1, list_2)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50367701)
 For ignoring the last element of every tuple in list_A, I found this to be the quickest way: 

  ["_".join(map(str, i)) for i in [x[:-1] for x in list_A] ]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8288104)
 If you just want a single element of the list, just index that element: 

  cmd = 'my_command ' + counters[0]
  

 If you want to join several elements, use the 'join()' method of strings: 

  cmd = 'my_command ' + " ".join(counters[0:2]) # add spaces between elements
  



