Query: Is there a Python Library that contains a list of all the ascii characters?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17915968)
 You can use the http://docs.python.org/2/library/string.html#string-constants module: 

  import string
print string.printable
  

  

  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17915960)
 . 

  ASCII = ''.join(chr(x) for x in range(128))
  

 If you need to check for membership, there are other ways to do it: 

  if c in ASCII:
    # c is an ASCII character

if c <= '\x7f':
    # c is an ASCII character
  

 If you want to check that an entire string is ASCII: 

  def is_ascii(s):
    """Returns True if a string is ASCII, False otherwise."""
    try:
        s.encode('ASCII')
        return True
    except UnicodeEncodeError:
        return False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5891509)
 ASCII defines 128 characters whose byte values range from 0 to 127 inclusive.  So to get a string of all the ASCII characters, you could just do  

  ''.join([chr(i) for i in range(128)])
  

 Only some of those are printable, however- the printable ASCII characters can be accessed in Python via 

  import string
string.printable
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5891469)
 The  string  constants may be what you want. (http://docs.python.org/library/string.html#string-constants) 

 
>>> import string
>>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
 

 If you want all printable characters: 

 
>>> string.printable
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-.@[\\]^_`{|}~ \t\n\r\x0b\x0c'
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5891492)
 Since ASCII printable characters are a pretty small list (bytes with values between 32 and 127), it's easy enough to generate when you need: 

  >>> for c in (chr(i) for i in range(32,127)):
...     print c
... 

!
"
#
$
%
... # a few lines removed :)
y
z
{
|
}
~
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4736440)
  .encode  is for converting a Unicode string ( unicode  in 2.x,  str  in 3.x) to a a byte string ( str  in 2.x,  bytes  in 3.x). 

 In 2.x, it's legal to call  .encode  on a  str  object.  Python implicitly decodes the string to Unicode first:  s.encode(e)  works as if you had written  s.decode(sys.getdefaultencoding()).encode(e) . 

 The problem is that the default encoding is "ascii", and your string contains non-ASCII characters.  You can solve this by explicitly specifying the correct encoding. 

  >>> '\xAF \xBE'.decode('ISO-8859-1').encode('UTF-8')
'\xc2\xaf \xc2\xbe'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35890514)
 If you have unicode strings you can use the "encode" function and then catch the exception: 

  try:
    mynewstring = mystring.encode('ascii')
except UnicodeEncodeError:
    print("there are non-ascii characters in there")
  

 If you have bytes, you can import the chardet module and check the encoding: 

  import chardet

# Get the encoding
enc = chardet.detect(mystring)['encoding']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53880673)
 The text is encoded with https://en.wikipedia.org/wiki/Quoted-printable, which is a way to encode non-ascii characters in ascii text.  You can decode it using python's https://docs.python.org/3.7/library/quopri.html#module-quopri module. 

  >>> import quopri
>>> bs = b'Gr=C3=BC=C3=9Fen'

>>> # Decode quoted-printable to raw bytes.
>>> utf8 = quopri.decodestring(bs)

>>> # Decode bytes to text.
>>> s = utf8.decode('utf-8')
>>> print(s)
Grüßen
  

 You may find that  quoted-printable  is the value of the email's  content-transfer-encoding  header. 



