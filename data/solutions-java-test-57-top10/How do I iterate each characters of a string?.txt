Query: How do I iterate each characters of a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7307017)
 http://download.oracle.com/javase/7/docs/api/java/lang/String.html#toCharArray%28%29 will convert a String to a char array. 

 Alternatively, iterate over the string's characters and store them into your array: 

  char[] myArray = ...
int index = ... 
for(int i = 0 ; i < string.length() ; i++) {
    char c = string.charAt(i);
    myArray[index] = c;
    index++;
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7189370)
 Iterate over the characters of the String and while storing in a new array/string you can append one space before appending each character.  

   

  StringBuilder result = new StringBuilder();

for(int i = 0 ; i < str.length(); i++)
{
   result = result.append(str.charAt(i));
   if(i == str.length()-1)
      break;
   result = result.append(' ');
}

return (result.toString());
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12216164)
 Split your string into char array using  yourString.toCharArray();  Then iterate through the characters and use  Character.isDigit(ch);  to identify if this is the numeric value. Or iterate through whole string and use  str.charAt(i) . For e.g: 

  public static void main(String[] args) {
    String str = "abc d 1234567890pqr 54897";
    StringBuilder myNumbers = new StringBuilder();
    for (int i = 0; i < str.length(); i++) {
        if (Character.isDigit(str.charAt(i))) {
            myNumbers.append(str.charAt(i));
            System.out.println(str.charAt(i) + " is a digit.");
        } else {
            System.out.println(str.charAt(i) + " not a digit.");
        }
    }
    System.out.println("Your numbers: " + myNumbers.toString());
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2772544)
 There really isn't a good answer. An iterator in Java specifically applies to a collection of discrete items (objects). You would think that a  String , which implements  CharSequence , should be a "collection" of discrete characters. Instead, it is treated as a single entity that happens to consist of characters.  

 In Java, it seems that iterators are only really applied to collections and not to a string. There is no reason why it is this way (near as I can tell - you would probably have to talk to Gosling or the API writers); it appears to be convention or a design decision. Indeed, there is nothing  preventing   CharSequence  from implementing  Iterable .  

 That said, you can iterate over the characters in a string like so: 

  for (int i = 0; i < str.length(); i++) {
  System.out.println(str.charAt(i));
}
  

  

  for(char c : str.toCharArray()) {
  System.out.println(c);
}
  

  

  "Java 8".chars().forEach(System.out::println);
  

 Also note that you cannot modify a character of a String in place because Strings are immutable. The mutable companion to a String is StringBuilder (or the older StringBuffer). 

  EDIT  

 To clarify based on the comments on this answer. I'm trying to explain  a possible rationale  as to why there is no Iterator on a  String . I'm not trying to say that it's not possible; indeed I think it would make sense for  CharSequence  to implement  Iterable . 

  String  provides  CharSequence , which, if only conceptually, is different from a  String . A  String  is usually thought of as a single entity, whereas  CharSequence  is exactly that: a sequence of characters. It would make sense to have an iterator on a sequence of characters (i.e., on  CharSequence ), but not simply on a  String  itself. 

 As Foxfire has rightly pointed out in the comments,  String  implements the  CharSequence  interface, so type-wise, a  String  is a  CharSequence . Semantically, it seems to me that they are two separate things - I'm probably being pedantic here, but when I think of a  String  I usually think of it as a single entity that happens to consist of characters. Consider the difference between the sequence of digits  1, 2, 3, 4  and the number  1234 . Now consider the difference between the string  abcd  and the sequence of characters  a, b, c, d . I'm trying to point out this difference.  

 In my opinion, asking why  String  doesn't have an iterator is like asking why  Integer  doesn't have an iterator so that you can iterate over the individual digits. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22799728)
 The problem is in how you iterate your strings. 

 When going from English to Morse, it is ok to just iterate single characters as you do here 

  for( int k = 0; k < inital.length(); k++) {
    output += morse(inital.charAt( k ));
}
  

 but when going from Morse to English you have to iterate several characters at once, because a symbol in Morse generally spans several characters. For instance, the Morse string  . ... ..  has three symbols that correspond to  abc  in English, but they have 2, 4 and 4 characters each. 

 So when iterating your Morse string, you have to split it by spaces, and iterate each of the substrings. In the case above, you'll iterate  . , then  ...  and then  ..  

  for(String symbol  inital2.split(" ")){
    output2 += english(symbol);
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/196834)
 I use a for loop to iterate the string and use  charAt()  to get each character to examine it.  Since the String is implemented with an array, the  charAt()  method is a constant time operation. 

  String s = "...stuff...";

for (int i = 0; i < s.length(); i++){
    char c = s.charAt(i);        
    //Process char
}
  

 That's what I would do.  . 

 .  It is all based on your personal style. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5692490)
 You can create an automaton for it:
 iterate over the string, insert each letter into the stack and replace it with a special character which is not in the original string (i.e. $), do not change digits at all.
 iterate over the string again, replace every $ with the head of the stack.
 note: since String is immutable you will need to first export it to a StringBuilder or CharSequence
  EDIT 
 for example: 

      String inp = "a45string1test";
    char[] cs = new char[inp.length()];
    inp.getChars(0, inp.length(), cs, 0);
    Stack<Character> stack = new Stack<Character>();
    for (int i =0;i<cs.length;i++) {
        if (Character.isDigit(cs[i])) continue;
        stack.push(cs[i]);
        cs[i] = '$';
    }
    for (int i=0;i<cs.length;i++) {
        if (cs[i] == '$') cs[i] = stack.pop();
    }
    System.out.println(cs);
  

 result will be  t45setgni1rtsa 
 complexity is O(n): iterating the string (twice) - since all stack operations are O(1). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38406648)
 In Java, a char is essentially an unsigned short.  In order to iterate through a string that has unicode characters outside of the range supported by char (the first 65536), you should use the following pattern, which stores each codepoint as an int. 

  for (int i = 0; i < str.length();) {
    int ch = str.codePointAt(i);
    // do stuff with ch...
    i += Character.charCount(ch);
}
  

 Java was designed with first-class support for the first 65536 characters, which at the time was an improvement over C/C++, which had first-class support for only the first 128 or 256 characters.  Unfortunately, it means that the above pattern is necessary in Java to support the out-of-range characters that are becoming more common. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26316721)
 You could iterate over the String's character array, and swap whenever you see either of the characters: 

  private static String swap(String str, char one, char two) {
    char[] chars = str.toCharArray();
    for (int i = 0; i < chars.length; i++) {
        if (chars[i] == one) {
            chars[i] = two;
        } else if (chars[i] == two) {
            chars[i] = one;
        }
    }
    return String.valueOf(chars);
}
  



