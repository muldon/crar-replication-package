Query: Reads a text file and displays it line by line
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9857707)
 Append the newline when reading lines.  

 For example 

  String output = "";
try {
    BufferedReader br = new BufferedReader(new FileReader(args[i]));
    while ((thisLine = br.readLine()) != null) {
        thisLine += "\n";
        output += thisLine;
    } 
} // end try
catch (IOException e) {
    System.err.println("Error: " + e);
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36657062)
  setText  does that, sets the text of the field 

 Now,  JTextArea  has a simple  read  method for reading content, for example 

  try (BufferedReader reader = new BufferedReader(new FileReader(new File("resources/New Text Document.txt")))) {
    textArea.read(reader, "File");
} catch (IOException exp) {
    exp.printStackTrace();
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30744664)
 You are adding the newline yourself.  

  while ((line = br.readLine()) != null) {
       textArea.appendText(line);
       textArea.appendText("\n");
}
  

 The second line in while-loop adds the next line. Everytime that statement gets executed, the cursor will go to next line.
So when the file cursor reads the last line from file, it appends it to the textArea and the then appends it with a new line character. Thats why you get extra blank line at the end. 

  if((line = br.readLine()) != null)
     textArea.appendText(line);
while ((line = br.readLine()) != null) {
       textArea.appendText("\n");
       textArea.appendText(line);
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16595868)
 You can read a file line-by-line using a  BufferedReader  and use the  append()  method of  JTextArea  for each line read. For convenience, wrap the  JTextArea  in a suitably sized  JScrollPane , as shown https://stackoverflow.com/a/14011536/230513. If you anticipate any latency, use a http://docs.oracle.com/javase/tutorial/uiswing/concurrency/worker.html to read in the background, and call  append()  in  process() . 

  BufferedReader in = new BufferedReader(new FileReader(fileName));
String s;
while ((s = in.readLine()) != null) {
    myTextArea.append(s + "\n");
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16104650)
 This is the problem: 

  while (br.readLine() != null) {
    System.out.println(br.readLine());
}
  

 You've got two calls to  readLine  - the first  only  checks that there's a line (but reads it and throws it away) and the second reads the  next  line.  

  String line;
while ((line = br.readLine()) != null) {
    System.out.println(line);
}
  

 Now we're only calling  readLine()   once  per loop iteration, and using the line that we've read both for the "have we finished?" and "print out the line" parts. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9857723)
 All JTextComponents have the ability to read in text files and write to text files while fully respecting the newline character for the current operating system, and it is often advantageous to use this.  In your case, you would use the JTextArea's  read(...)  method to read in the file while fully understanding the file system's native new-line character.  

  BufferedReader br = new BufferedReader(new FileReader(file));
textArea.read(br, null);
  

 Or for a more complete example: 

  import java.io.*;
import javax.swing.*;

public class TextIntoTextArea {
   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }

   private static void createAndShowGui() {
      JFileChooser fileChooser = new JFileChooser();
      int response = fileChooser.showOpenDialog(null);
      if (response == JFileChooser.APPROVE_OPTION) {
         File file = fileChooser.getSelectedFile();
         BufferedReader br = null;
         try {
            br = new BufferedReader(new FileReader(file));
            final JTextArea textArea = new JTextArea(20, 40);

            textArea.read(br, null); // here we read in the text file

            JOptionPane.showMessageDialog(null, new JScrollPane(textArea));
         } catch (FileNotFoundException e) {
            e.printStackTrace();
         } catch (IOException e) {
            e.printStackTrace();
         } finally {
            if (br != null) {
               try {
                  br.close();
               } catch (IOException e) {
               }
            }
         }
      }
   }
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31370997)
 You must use StringTokenizer! here an example and read this http://docs.oracle.com/javase/7/docs/api/java/util/StringTokenizer.html 

  private BufferedReader innerReader; 
public void loadFile(Reader reader)
        throws IOException {
    if(reader == null)
    {
        throw new IllegalArgumentException("Reader not valid!");
    }
        this.innerReader = new BufferedReader(reader);
    String line;
    try
    {
    while((line = innerReader.readLine()) != null)
    {
        if (line == null || line.trim().isEmpty())
            throw new IllegalArgumentException(
                    "line empty");
        //StringTokenizer use delimiter for split string
        StringTokenizer tokenizer = new StringTokenizer(line, ","); //delimiter is ","
        if (tokenizer.countTokens() < 4)
            throw new IllegalArgumentException(
                    "Token number not valid (<= 4)");
        //You can change the delimiter if necessary, string example
        /*
        Hello / bye , hi
        */
        //reads up "/"
        String hello = tokenizer.nextToken("/").trim();
        //reads up ","
        String bye = tokenizer.nextToken(",").trim();
        //reads up to end of line
        String hi = tokenizer.nextToken("\n\r").trim();
        //if you have to read but do not know if there will be a next token do this
        while(tokenizer.hasMoreTokens())
        {
          String mayBe = tokenizer.nextToken(".");
        }
    }
    } catch (Exception e) {
        throw new IllegalArgumentException(e);
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2864144)
 How about using Scanner? I think using Scanner is easier 

       private static void readFile(String fileName) {
       try {
         File file = new File(fileName);
         Scanner scanner = new Scanner(file);
         while (scanner.hasNextLine()) {
           System.out.println(scanner.nextLine());
         }
         scanner.close();
       } catch (FileNotFoundException e) {
         e.printStackTrace();
       }
     }
  

 http://www.java-tips.org/java-se-tips/java.util/scanning-text-with-java.util.scanner-3.html 



