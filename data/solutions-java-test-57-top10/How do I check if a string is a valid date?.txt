Query: How do I check if a string is a valid date?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/27780530)
 Write simple API that will validate string is date or not, 

 If  isValidDate(String date)  return  true  then your string is date otherwise it is not date. 

  public boolean isValidDate(String date){
   SimpleDateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
   boolean flag = true;

   try{
      dateFormat.parse(date); 
   }catch(ParseException e){
      flag = false;
   }
 return flag;
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33968683)
  Other person are also correct </P> 

 This is your answer 

  import java.text.ParseException;
import java.text.SimpleDateFormat;

public class date {
    public static boolean isValidDate(String inDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss:ms");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(inDate.trim());
        } catch (ParseException pe) {
            return false;
        }
        return true;
    }

    public static void main(String[] args) {

        System.out.println(isValidDate("20-01-2014"));
        System.out.println(isValidDate("11-04-2015 22:01:33:023"));

        System.out.println(isValidDate("32476347656435"));
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14727214)
 if you want to test if the date string is a valid date, better use  SimpleDateFormat  to check. don't use regex for that validation, how about month is 13? date is 50?  

 some example: 

  public boolean isValidDate(String dateString) {
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    try {
        df.parse(dateString);
        return true;
    } catch (ParseException e) {
        return false;
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27780444)
 You can check for a specific format using SimpleDateFormat ex: 

  DateFormat df = new SimpleDateFormat("mm/dd/yyyy");

try
{
   df.parse("01/05/2014");
}
catch(Exception e)
{
  //not a date
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14728229)
 You can check that the String follow the exact format of 4 digits, a dash  - , 2 digits, a dash  -  and 2 digits with @burning_LEGION's regex. However, it doesn't check whether the String represents a valid date. You can specify  9999-99-99  and it will pass the validation. 

 Using http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html is the proper method to check that the String is a valid date and it follows a given format of representation. SimpleDateFormat, apart from http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#format%28java.util.Date%29, can also be used to parse Date from String: http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#parse%28java.lang.String%29, http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#parse%28java.lang.String,%20java.text.ParsePosition%29. 

 By default, SimpleDateFormat is  lenient , which means it will allow nonsensical dates such as  2013-025-234  to pass. Use http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#setLenient%28boolean%29 to  false  will solve this problem. 

 However, another problem is that it will also ignore any garbage data that is after a valid date (e.g.  2012-03-23garbage#$%$#% ). Setting lenient doesn't solve this problem. We need to check the last position with  parse(String, ParsePosition)  method. 

  SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
// Make the parsing strict - otherwise, it is worse than regex solution
dateFormatter.setLenient(false); 

Date date = null;
ParsePosition pos = new ParsePosition(0);

date = dateFormatter.parse(inputString, pos);

if (date != null && pos.getIndex() == inputString.length()) {
    // These 3 points are ensured:
    // - The string only contains the date.
    // - The date follows the format strictly.
    // - And the date is a valid one.
} else {
    // Valid date but string contains other garbage
    // Or the string has invalid date or garbage
}
  

  SimpleDateFormat  will allow  2013-1-5  to pass, which I think is a reasonable leniency. If you don't want this, you can do a check against the regex before plugging the String into the  parse  method. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29038060)
  DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
formatter.setLenient(false);
try {
    Date date= formatter.parse("02/03/2010");
} catch (ParseException e) {
    //If input date is in different format or invalid.
}
  

 formatter.setLenient(false) will enforce strict matching. 

 If you are using Joda-Time -  

  private boolean isValidDate(String dateOfBirth) {
        boolean valid = true;
        try {
            DateTimeFormatter formatter = DateTimeFormat.forPattern("dd/MM/yyyy");
            DateTime dob = formatter.parseDateTime(dateOfBirth);
        } catch (Exception e) {
            valid = false;
        }
        return valid;
    }
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35197612)
 I think the simpliest is just to convert a string into a date object and convert it back to a string. The given date string is fine if both strings still match. 

  public boolean isDateValid(String dateString, String pattern)
{   
    try
    {
        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
        if (sdf.format(sdf.parse(dateString)).equals(dateString))
            return true;
    }
    catch (ParseException pe) {}

    return false;
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8428992)
  To chack whether a date is valid 
The following method returns if the date is in valid otherwise it will return false. 

  public boolean isValidDate(String date) {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/d");
        Date testDate = null;
        try {
            testDate = sdf.parse(date);
        }
        catch (ParseException e) {
            return false;
        }
        if (!sdf.format(testDate).equals(date)) {
            return false;
        }
        return true;

    }
  

 Have a look on the following class which can check whether the date is valid or not 

 ** Sample Example** 

  import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DateValidCheck {


    public static void main(String[] args) {

        if(new DateValidCheck().isValidDate("2011/12/12aaa")){
            System.out.println("...date is valid");
        }else{
            System.out.println("...date is invalid...");
        }

    }


    public boolean isValidDate(String date) {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/d");
        Date testDate = null;
        try {
            testDate = sdf.parse(date);
        }
        catch (ParseException e) {
            return false;
        }
        if (!sdf.format(testDate).equals(date)) {
            return false;
        }
        return true;

    }

}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20143333)
 You can check the format of the date by using a http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html like this, because using  regex  for validating date formats is a very bad practice, IMHO. 

  String strDate = "2010.12.25";
DateFormat df = new SimpleDateFormat("yyyy.MM.dd");
try {
    Date date = df.parse(strDate);
    // If it comes here, then its a valid format
} catch (ParseException pe) {
    // If it comes here, then its not a valid date of this format.
}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/1812997)
 I think this will be helpful:
http://www.javadb.com/check-if-a-string-is-a-valid-date 

 Basically, you don't really need to write the code to check whether the date is valid. You can use the SimpleDataFormat class from the java.text package, for example. 

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    System.out.print("Valid? " + isValidDate(scanner.nextLine()));
}

private boolean isValidDate(String inDate) {

    if (inDate == null)
      return false;

    //set the format to use as a constructor argument
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

    if (inDate.trim().length() != dateFormat.toPattern().length())
      return false;

    dateFormat.setLenient(false);

    try {
      //parse the inDate parameter
      dateFormat.parse(inDate.trim());
    }
    catch (ParseException pe) {
      return false;
    }
    return true;
  }
  



