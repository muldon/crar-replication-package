Query: Java Program to read number from Standard Input
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1867249)
 You will have to use  readLine() , do this in a loop, count the number of lines you've already read until you've reached the line number that you want to process. 

 There is no method in  BufferedReader  or other standard library class that will read line number N for you automatically. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7382154)
 You are printing an output every time an integer is read.  Your program is behaving as expected. 

 To get what you want, you need to scan  all  the input  before  you produce any output. 

  

          while (data != 0){
            data = input.nextInt();
            num[data]++;
        }

        for (int i = 1; i < 100; ++i) { // your version is 0...99, else array index out of bounds
            if (num[i] > 0) 
                System.out.println(i + " occurs " + num[i] + " times ");
        }
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28353606)
 When reader reaches the eof then it returns  -1  in case of  read()  method in  BufferedReader  but in case of  readLine()  method it returns  null .So you can do it by following way:-  

  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
String str="";
while((str=br.readLine())!=null)
{
    //It will ends when eof character will encounter
}
  

 Above program will till end of program will be reached. Hope this will help you. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41147944)
 Why your program doesn't work as expected 

 In your output, the strings "Please enter a number:" are chained without newlines, because you don't print the newlines in the program. When the program is running in interactive mode,  the user  enters the newlines. 

 There are no numbers in the output file, because your program doesn't print them to the standard output. Again, when the program is running in interactive mode,  the user  enters the numbers, but not the program. In the case of redirected output, the numbers coming from the input file are read by the program, but never printed to the standard output. 

 The correct way 

 You should check if the program is running in interactive mode (when the input is read from a TTY). 

  test/MyApp.java  

  package test;

import java.util.Scanner;
import java.io.Console;

class MyApp {
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        Console console = System.console();

        int[] numbers = new int[3];
        for (int i = 0; i < 3; i++){
            if (console != null) {
                System.out.print("Please enter a number: ");
            }
            numbers[i] = scanner.nextInt();
            System.out.printf("Number: %d\n", numbers[i]);
        }
    }
}
  

    

  $ printf '%d\n%d\n%d\n' 1 2 3 > file
$ javac -cp . test/MyApp.java
$ java -cp . test/MyApp < file > out
$ cat out
Number: 1
Number: 2
Number: 3
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17260213)
 Second answer above is the most simple one. 

  int n = Integer.parseInt(System.console().readLine());
  

 The question is "How to read from standard input". 

 A console is a device typically associated to the keyboard and display from which a program is launched. 

 You may wish to test if no Java console device is available, e.g. Java VM not started from a command line or  the standard input and output streams are redirected. 

  Console cons;
if ((cons = System.console()) == null) {
    System.err.println("Unable to obtain console");
    ...
}
  

 Using console is a simple way to input numbers. Combined with parseInt()/Double() etc. 

  s = cons.readLine("Enter a int: ");
int i = Integer.parseInt(s);    

s = cons.readLine("Enter a double: ");
double d = Double.parseDouble(s);
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16135156)
 Try stripping any whitespace from the string: 

          numberOfAttributes = Integer.parseInt(br.readLine().trim());
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8209162)
 You can read  /proc/uptime : 

  new Scanner(new FileInputStream("/proc/uptime")).next();
//"1128046.07" on my machine and still counting
  

 From http://en.wikipedia.org/wiki/Uptime: 

 
   Shows how long the system has been on since it was last restarted: 
 

  $ cat /proc/uptime
  350735.47 234388.90
  

 
   The first number is the  total number of seconds the system has been up . The second number is how much of that time the machine has spent idle, in seconds. 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27162212)
 This Works:) 

  I just submitted this code to codelab and it works just fine.  

 Write a loop that reads strings  from standard input where the string  is either "land", "air", or "water". The loop terminates  when "xxxxx" (five x characters ) is read in. Other strings  are ignored. After the loop, your code should print out 3 lines: the first consisting of the string  "land:" followed by the number of "land" strings  read in, the second consisting of the string  "air:" followed by the number of "air" strings  read in, and the third consisting of the string  "water:" followed by the number of "water" strings  read in. Each of these should be printed on a separate line.  

  int land = 0;
int air = 0;
int water = 0;
String word = "";
while(!(word.equals("xxxxx"))) {
 word = stdin.next();
if(word.equals("land")) {
    land++;
}else if(word.equals("air")) {
    air++;
}else if(word.equals("water")) {
    water++;
} 
}
System.out.println("land:" + land);
System.out.println("air:" + air);
System.out.println("water:" + water);
  



