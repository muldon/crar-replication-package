Query: Counting word occurrences in a text file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54104524)
 You seem to be counting the lines in your file instead : 

  map(line -> line.split("\\s+")) // this is a Stream<String[]>
  

 You shall further use https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#flatMap(java.util.function.Function) as: 

  long wordCount = Files.lines(Paths.get("sample.txt"))
        .map(line -> line.split("\\s+"))
        .flatMap(Arrays::stream)
        .distinct()
        .count();
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5102126)
  

  String text = "Question : how to search for a particular word in a " +
        "text file containing texts of words and return its " +
        "frequency or occurrences ?";

String word = "a";

int totalCount = 0;
int wordCount = 0;
Scanner s = new Scanner(text);
while (s.hasNext()) {
    totalCount++;
    if (s.next().equals(word)) wordCount++;
}

System.out.println("Word count:  " + wordCount);
System.out.println("Total count: " + totalCount);
System.out.printf("Frequency:   %.2f", (double) wordCount / totalCount);
  

 Output: 

  Word count:  2
Total count: 24
Frequency:   0.08
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28463174)
 In your code, you have the following: 

  // read in next line using Scanner object, inFile
in.nextLine();

// create another Scanner object in order to scan the line word by word
Scanner word = new Scanner(input); 
  

  

  // read in next line using Scanner object, inFile
String nextline = in.nextLine();

// create another Scanner object in order to scan the line word by
// word
Scanner word = new Scanner(nextline);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4094509)
 This is just a thought. There is one very easy way to do it. If you just need number of words and not actual words then just use Apache WordUtils 

  import org.apache.commons.lang.WordUtils;

public class CountWord {

public static void main(String[] args) {    
String str = "Just keep a boolean flag around that lets you know if the previous character was whitespace or not pseudocode follows";

    String initials = WordUtils.initials(str);

    System.out.println(initials);
    //so number of words in your file will be
    System.out.println(initials.length());    
  }
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13980675)
 Create a map to keep track of occurrences like so: 

     Scanner file = new Scanner(new File("text.txt")).useDelimiter("[^a-zA-Z]+");
   HashMap<String, Integer> map = new HashMap<>();

   while (file.hasNext()){
        String word = file.next().toLowerCase();
        if (map.containsKey(word)) {
            map.put(word, map.get(word) + 1);
        } else {
            map.put(word, 0);
        }
    }

    ArrayList<Map.Entry<String, Integer>> entries = new ArrayList<>(map.entrySet());
    Collections.sort(entries, new Comparator<Map.Entry<String, Integer>>() {

        @Override
        public int compare(Map.Entry<String, Integer> a, Map.Entry<String, Integer> b) {
            return a.getValue().compareTo(b.getValue());
        }
    });

    for(int i = 0; i < 10; i++){
        System.out.println(entries.get(entries.size() - i - 1).getKey());
    }
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4126807)
 I think a correct approach would be by means of Regex: 

  String fileContent = <text from file>;    
String[] words = Pattern.compile("\\s+").split(fileContent);
System.out.println("File has " + words.length + " words");
  

 . The "\s+" meaning is in http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30643178)
 This will count the occurrences of each character in an array 
    public class jazz { 

      public static void main(String[] args) {
        String [] arr = {"a", "b", "a","c", "d"}; 
        HashMap<String, Integer> map = new HashMap<String,Integer>(); 
         for (String i : arr) {
                if (map.get(i) == null) {
                    map.put(i, 1);
                } else {
                    map.put(i, map.get(i) + 1);
                }
         }
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10869825)
 Your map should be a  Map<String, Integer> : for each word, you have an integer storing the number of occurrences of the word. 

 To get the number of occurrences of a word:  Integer numberOfOccurrences = map.get(word);  

 To test if the word is in the map:  if (numberOfOccurrences != null)  

 To increment the number of occurrences:  numberOfOccurrences++;  

 To store this new value in the map:  map.put(word, numberOfOccurrences);  

 There is no reason to iterate over the map. You read your file word by word, and use the above to increment the occurrence of each word. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2635241)
 Splitting the Strings sounds like a lot of overhead just to find out the number of occurrences in a file. You could use  String.indexOf(String, int)  to recursively go through the whole line/file, like this: 

  int occurrences = 0;
int index = 0;
while (index < s.length() && (index = s.indexOf("the", index)) >= 0) {
    occurrences++;
    index + 3; //length of 'the'
}
  



