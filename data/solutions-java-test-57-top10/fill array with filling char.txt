Query: fill array with filling char
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9128764)
 Use  Arrays.fill  

    char f = '+';
  char [] c = new char [50];
  Arrays.fill(c, f)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13903233)
 StringBuilder is all you need 

  StringBuidler sb = new StringBuilder();
sb.append(c);
...
  

 then you can get char array from it if you really want it 

  char[] a = sb.toString().toCharArray();
  

 though typically it is just converted into a String  

   String s = sb.toString()
  

 there is also a method to work with StringBuilder internal char[] directly  

   char c = sb.charAt(i)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36785313)
 If you look into the definition of  fill(char[] a, char val)  available in  java.util.Arrays  Class. 

  

  public static void fill(Object[] a, Object val) {
        for (int i = 0, len = a.length; i < len; i++) //this loop will continues to the length of a.
            a[i] = val;
    }
  

 So, Complexity for this method would be  O(n) . where  n  is the length of Object Array  Object[] a  which you passed to the parameter. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20394238)
 
   1st question is:what is the name of {'a','b','c'} kind of stuff? Is it called array literals? 
 

 No Array literals in Java, they are filling array with elements, i.e initialization. 

 
   2nd question is: what is the difference between new char[]{'a','b','c'} with {'a','b','c'}? 
 

 That first one called as * inline array declaration*. 

 With second you can assign it to a array which already with a defined type. 

 Example by me here :https://stackoverflow.com/a/19658726/1927832 

 
   3rd question is: why I can't return a newly created array with {'a','b','c'}? I have to return new char[]{'a','b','c'}. 
 

 Because in the first case the type is missing, and compiler doesn't know which type of elements they are. 

 
   4th question: both new char[10] and new char[]{'a','b','c'} are constructors of array, right? 
 

 That is  creating  an array of chars with specified length. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9618700)
 Do you mean something like: 

  Arrays.fill(array, index, array.length, '\0');
  

  Of course, that will just overwrite the rest of the array with U+0000 values... there's no such thing as a  char[]  element being "empty". There will  always  be a  char  at every element in the array; U+0000 is  one  way of indicating "don't treat this as real data". 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7028111)
 You can use: 

  Arrays.fill(yourArray, ' ');// or any other char instead of ' '
  

  Arrays  class belongs to the  java.util  package. It uses generics so you can fill any kind of array. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13636038)
 With the Array String is similar to want you have done: 

  public static String[] rotate(String [] toRotate)
  {

      String [] returnChar = new String[toRotate[0].length()];
      String [] result = new String[toRotate[0].length()];
      Arrays.fill(returnChar, "");

      for(int rows = 0; rows<toRotate.length; rows++)
          for(int cols = 0 ; cols < toRotate[rows].length(); cols++)
              returnChar[cols] = returnChar[cols] + toRotate[rows].charAt(cols);

      for(int i = 0; i < returnChar.length; i++)
          result[i] =  new StringBuffer(returnChar[i]).reverse().toString();

      return result;
  }
  

 I go through all  char  in each  String  on array  toRotate , concat this char ( toRotate[rows].charAt(cols) ) to each String  returnChar[cols]  on the array  returnChar  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9128785)
 If you have another array of char,  char[] b  and you want to replace  c  with  b , you can use  c=b.clone(); . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2635763)
 You can create a  char[]  of the desired length,  Arrays.fill  it with spaces, and then create a  String  out of it (or just  append  to your own  StringBuilder  etc). 

  import java.util.Arrays;

int n = 6;
char[] spaces = new char[n];
Arrays.fill(spaces, ' ');
System.out.println(new String(spaces) + "!");
// prints "      !"
  

 If you're doing this with a lot of possible values of  n , instead of creating and filling  new char[n]  every time, you can create just one long enough string of spaces and take shorter  substring  as needed. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53550006)
 You can do this by looping over the original  char[] , and if the given character is not a space, then copy the corresponding letter of the key to the matching index of the  char[]  that you will return. You can find the matching letter of the key by using the  %  operator. The problem you encountered is that if the character at  i  is equal to a space,  i  will be incremented still and you will skip a letter for  key . To fix this you can add an extra counter variable: 

  public static char[] foo(char[] arr) {
    String key = "KEY";
    char[] copy = new char[arr.length];
    for(int i = 0, index = 0; i < arr.length; i++) {
        if(arr[i] != ' ') {
            copy[i] = key.charAt(index++ % key.length());
        } else {
            copy[i] = ' ';
        }
    }
    return copy;
}
  

   Output:   

  ['K','E','Y','K',' ','E','Y',' ','K','E','Y','K']
  



