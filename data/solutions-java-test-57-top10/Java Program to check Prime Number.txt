Query: Java Program to check Prime Number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46878248)
 Prime numbers have only 2 divisors the 1 and the number itself. So to check whether a number is prime or not you have to check all the possible divisors of that number.
For example: 

  boolean isPrimeNumber(int num){
    if(num < 2)
        return false;
    for(int i = 2; i <= Math.sqrt(num); i++){
        if(num % i == 0){
            return false;
        }
    }
    return true;
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46877958)
 you can do it in a more mathematical way and not only check until prime factor 7.
Here is my solution: 

  public static void main(final String[] args) {
    System.out.print("Enter a number: ");
    final Scanner key = new Scanner(System.in);
    final int in = key.nextInt();

    if (isPrime(in)) {
        System.out.println(in + " is a prime number");
    } else {
        System.out.println(in + " is not a prime number");
    }
}

private static boolean isPrime(final int in) {
    if (in < 2) return false;

    for (int i=2; i <= Math.sqrt(in); i++){
        if (in%i == 0){
            return false;
        }
    }
    return true;
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52183313)
  for (int j = 2; j <= arr[i] / 2; j++) {
    if (arr[i] % j == 0) {
        System.out.println("Number is not prime " + arr[i]);
        break;
    } else {
        System.out.println("Number is prime " + arr[i]);
        break;
    }
}
  

 Here you iterate  only once  and check if given number is dividable by 2 or not (i.e. this is equal to  arr[i] % 2 == 0 ). To check if given number is prime or not, you have to check all numbers from  2  to  sqrt(val) . 

 I recommend you to select this check into separate method. 

  import java.util.function.IntPredicate;

final IntPredicate isPrime = val -> {
    if (val < 2)
        return false;

    for (int i = 2, sqrt = (int)Math.sqrt(val); i <= sqrt; i++)
        if (val % i == 0)
            return false;

    return true;
};
  

 And your code looks much simpler: 

  int[] arr = { 2, 5, 9, 6, 7, 13, 2, 4, 42, 8 };

for (int val : arr) {
    if (isPrime.test(val))
        System.out.println("Number is prime " + val);
    else
        System.out.println("Number is not prime " + val);
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54647030)
 You can try below code. Hope it helps you, 

  import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class PrimeNumberTest {
    public static void main(String[] args) {
         List<Integer> list = new ArrayList<>(Arrays.asList(7, 11, 12, 23, 19, 7 ,113, 101)); 
         //To remove duplicates
         Set<Integer> set = new TreeSet<>(list);
         System.out.println(getPrimeNumbers(set).toString().replaceAll(",", "").replace("]", "").replace("[", ""));
    }
    //Method to get unique ordered set of prime numbers
    private static Set<Integer> getPrimeNumbers(Set<Integer> set) {
        Set<Integer> resultList=new TreeSet<>();
        set.forEach(ele->{
            //check for prime
            if(isPrime(ele)){
                //if prime number check for reverse and if true, add to result
                 if(isPrime(reverserNumb(ele)))
                     resultList.add(ele);
            }
        });
        return resultList;
    }

    private static boolean isPrime(int num){
        if(num<2)
            return false;
        // Check for even numbers
        if (num % 2 == 0) {
            return num == 2;
        }
      // Check for odd numbers
        for (int i = 3; i*i <= num; i += 2) {
            if (num % i == 0) {
                return false;
            }
        }

        return true;
    }
    private static int reverserNumb(int num) {
        return Integer.valueOf(new StringBuilder(String.valueOf(num)).reverse().toString());
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32786799)
 It's possible to check prime numbers with few lines using a  for  loop. It's better for performance. 

  Code to check prime numbers:  

      boolean isPrime = true;
    for (int i = 2; i < n && isPrime; i++) {
        isPrime = !(n % i == 0);
    }
  

  Full class according to your example:  

  import java.util.Scanner;

public class Prime {

    public static void main(String[] args) {
        System.out.println("Enter a number to check if it is prime:");
        Scanner kb = new Scanner(System.in);
        int n = kb.nextInt();

        boolean isPrime = true;
        for (int i = 2; i < n && isPrime; i++) {
            isPrime = !(n % i == 0);
        }

        System.out.println(n + " is prime - " + isPrime);
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25717239)
 You could really improve both functions: 

 Some notes about  IsItPrime : 

 
 Check first only for even numbers (you are doing this) 
 The for-loop could  begin  in 3 and increment by 2, to check only odd numbers, the even are checked in the previous point. 
 The for-loop only needs to check from  3 .. sqrt(N) + 1 , if the number is not prime. It would be a prime if the number is less or equal to  sqrt(N)  and devides  N . 
 

 Function  IsItPrime  improve: 

  public static boolean IsItPrime(int sPrime) {
    if (sPrime % 2 == 0 && sPrime != 2) {
        return false;
    }

    int sqrtPrime = (int)Math.sqrt(sPrime);
    for (int i = 3; i <= sqrtPrime; i += 2) {
        if (sPrime % i == 0) {
            return false;
        }
    }

    return true;
}
  

 Some notes about  IsItPalin : 

 
 The return result is swapped, when  sPrime == reverse  is palindrome, you must return  true , not  false . 
 The other problem is that in the function you are modifying the parameter  sPrime  in the while-loop, you need to save the original value for comparing in  sPrime == reverse . 
 

 Function  IsItPalin  improved: 

  public static boolean IsItPalin(int sPrime) {
    int sPrimeBackup = sPrime;
    int reverse = 0;

    while (sPrime > 0) {
        reverse = reverse * 10 + sPrime % 10;
        sPrime = sPrime / 10;
    }

    return (sPrimeBackup == reverse);
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32665997)
 You can take a look at this code.   

  import java.io.*;
public class Main {

     public static void main(String[] args) throws IOException {

        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        //How many prime numbers you want to print?
        String s = bf.readLine();
        int n = Integer.parseInt(s);
        int count = 0;
        boolean loop = true;
        for(int i =2 ; loop ; i++){

            if(isPrime(i))
                {
                System.out.println(i + " ");
                count++;
                }
            if(count == n)
                loop = false;
        }
    }
  

 The following isPrime() method checks whether a number is prime or not. If the number is prime, it returns true, otherwise false. 

      public static boolean isPrime(int num) {
        boolean prime = true;
        for(int i=2 ; i<= Math.sqrt(num);){
            if(num % i ==  0)
                {
                    prime = false;
                    break;
                }
            if(i >= 3)
            /* when i>=3 we do not need to check for every number. 
              For avoiding even numbers i is incremented by 2. 
              It reduces the number of looping */ 
                i+=2;
            else
                i++;
        }

        return prime;

    }
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54643368)
 You need to use TreeSet - which will contain only distinct elements and  give result in sorted form. You can refer to following code- 

    Set<Integer> set = new TreeSet<>();
            for(int i = 0; i < a.length; i++) {
                boolean isPrime = true;
                if(isPrime(a[i]) && isPrime(r[i]))
                    set.add(a[i]);
            }
Iterator it = set.iterator();
        while(it.hasNext())
            System.out.print(it.next() + " ");
  

 Also create a function for checking prime numbers - 

  private static boolean isPrime(int num) {
        if(num==1) return false;
        for(int i = 2; i <= num/2; ++i)
        {
            if(num % i == 0)
            {
               return false;
            }
        }
        return true;
    }
  



