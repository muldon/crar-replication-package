Query: set Timestamp to Database
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23697131)
 you can set Timestamp import java.sql.Timestamp; 

  stmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
  

  

  stmt.setDate(1, date);
  

 o/p will be: 2014-05-16 08:34:52.977 

 set your DB --column as Timestamp. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3677696)
 Use  java.sql.Timestamp  and  setTimestamp(int, Timestamp) .  java.sql.Date  is date-only, regardless of the type of the column it's being stored in. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13112851)
 What you need to use is the http://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html#setTimestamp%28int,%20java.sql.Timestamp%29 method instead of the setDate() method. 

 One of the ways you can set the timestamp would be as follows: 

  Timestamp timestamp = new Timestamp(new Date().getTime());
  

 You can then set the parameter as: 

  PrepStmt.setTimestamp(1, timestamp);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7626080)
 Use http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp%28int,%20java.sql.Timestamp%29 wherein you pass a http://download.oracle.com/javase/6/docs/api/java/sql/Timestamp.html which is constructed with http://download.oracle.com/javase/6/docs/api/java/lang/System.html#currentTimeMillis%28%29. 

<pre class="lang-java prettyprint-override"> preparedStatement.setTimestamp(index, new Timestamp(System.currentTimeMillis()));
// ...
  

 Alternativaly, if the DB supports it, you could also call a DB specific function to set it with the current timestamp. For example MySQL supports  now()  for this. E.g. 

<pre class="lang-sql prettyprint-override"> String sql = "INSERT INTO user (email, creationdate) VALUES (?, now())";
  

 Or if the DB supports it, change the field type to one which automatically sets the insert/update timestamp, such as http://dev.mysql.com/doc/refman/5.0/en/timestamp.html instead of  DATETIME  in MySQL. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8476247)
 If you're using the JDBC API to access the database, and you're using a  PreparedStatement  to for example execute an SQL INSERT statement, then you just set the timestamp as a parameter to the  PreparedStatement : 

  Timestamp ts = ...; // wherever you get this from

PreparedStatement ps = connection.prepareStatement("INSERT INTO MYTABLE (ts) VALUES (?)");
ps.setTimestamp(1, ts);
ps.executeUpdate();
  

 Likewise, when you're doing a query that returns a timestamp, get it from the  ResultSet  by calling  getTimestamp  on it. Example: 

  Timestamp result = null;

Statement st = connection.createStatement();
ResultSet rs = st.executeQuery("SELECT ts FROM MYTABLE WHERE ...");
if (rs.next()) {
    result = rs.getTimestamp(1);
}
  

 See the http://docs.oracle.com/javase/tutorial/jdbc/index.html. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23847504)
 You can create a method getCurrentTimeStamp() and call it from JDBC statement 

 preparedStatement.setTimestamp(4,getCurrentTimeStamp()); 

 Method: 

 private static java.sql.Timestamp getCurrentTimeStamp() { 

  java.util.Date today = new java.util.Date();
return new java.sql.Timestamp(today.getTime());
  

 } 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3677702)
 Not exactly sure what you need to use, but 

  ps.setDate();
  

 expects a column type of Date. So it's normalizing it, removing the time. 

  

  ps.setTimetamp();
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43584581)
 The best practice is to save your data as a  TIMESTAMP  like this  ServerValue.TIMESTAMP . 

  DatabaseReference ref = FirebaseDatabase.getInstance().getReference();
Map map = new HashMap();
map.put("timestamp", ServerValue.TIMESTAMP);
ref.child("yourNode").updateChildren(map);
  

 Also remember, when you set the  TIMESTAMP , you set it as a  Map , but when you retrieve it, you retrieve it as a  Long . To get the data back, i suggest you use this method: 

  public static String getTimeDate(long timestamp){
    try{
        DateFormat dateFormat = getDateTimeInstance();
        Date netDate = (new Date(timestamp));
        return dateFormat.format(netDate);
    } catch(Exception e) {
        return "date";
    }
}
  

  Edit:  The model class should look like this: 

  public class YourModelClass {
    //private fields
    private Map<String, String> timestamp;

    public YourModelClass() {}

    //public setters and getters for the fields

    public void setTimestamp(Map<String, String> timeStamp) {this.timestamp= timestamp;}
    public Map<String, String> getTimestamp() {return timestamp;}
}
  

 Remember,  ServerValue.TIMESTAMP  is just a token that Firebase Realtime Database converts to a number on server side when it's used as a child value during write operation. The date only appears in the database after the write operation completes. 

 To get the  timestamp , there is also another approach, which would be to write a frunction in https://firebase.google.com/docs/functions/ and it will be as easy as: 

  exports.currentTime = functions.https.onRequest((req, res) => {
    res.send({"timestamp":new Date().getTime()})
})
  

 You can host this in Cloud Function and get the server timestamp without user interaction. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12970809)
 You can convert  Date  to  Timestamp  as follows: 

  Timestamp timestamp = new Timestamp(date.getTime());
  

 And if you want timestamp of current date: 

  new Timestamp(System.currentTimeMillis())
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/27263877)
 If you want to insert your date on a database I would first do what Daniel suggested: 

  XMLGregorianCalendar xgc=<assume this is initialized>;
Date timestamp=xgc.toGregorianCalendar().getTime();
  

 and later insert it through a PreparedStatement as Timestamp in milliseconds (Epoch time). That way you won't loose precision. 

  preparedStatement.setTimestamp(colNum,new Timestamp(timestamp.getTime()));
  



