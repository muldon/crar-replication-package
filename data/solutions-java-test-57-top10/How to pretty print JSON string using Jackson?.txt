Query: How to pretty print JSON string using Jackson?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21105219)
 The new way using Jackson 1.9+ is the following: 

  Object json = OBJECT_MAPPER.readValue(diffResponseJson, Object.class);
String indented = OBJECT_MAPPER.writerWithDefaultPrettyPrinter()
                               .writeValueAsString(json);
  

 The output will be correctly formatted! 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22032786)
 For Jackson 1.9, We can use the following code for pretty print. 

  ObjectMapper objectMapper = new ObjectMapper();
objectMapper.enable(SerializationConfig.Feature.INDENT_OUTPUT);
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30411180)
 The jackson API has changed: 

  new ObjectMapper()
.writer()
.withDefaultPrettyPrinter()
.writeValueAsString(new HashMap<String, Object>());
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14532435)
 To indent any old JSON, just bind it as  Object , like: 

  Object json = mapper.readValue(input, Object.class);
  

 and then write it out with indentation: 

  String indented = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json);
  

 this avoids your having to define actual POJO to map data to. 

 Or you can use  JsonNode  (JSON Tree) as well. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28185720)
 You can use  Pretty Print JSON  Output (Jackson). 

 Bellow are some examples  

 
  Convert Object and print its output in JSON format. 

   User user = new User();
 //...set user data
 ObjectMapper mapper = new ObjectMapper();
 System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(user));
   
  Pretty Print JSON String 

   String test = "{\"age\":29,\"messages\":[\"msg 1\",\"msg 2\",\"msg 3\"],\"name\":\"myname\"}";

 Object json = mapper.readValue(test, Object.class);    
 System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json));
   
 

 Reference : http://www.mkyong.com/java/how-to-enable-pretty-print-json-output-jackson/ 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21885785)
 If you are using jackson you can easily achieve this with configuring a  SerializationFeature  in your  ObjectMapper : 

  com.fasterxml.jackson.databind.ObjectMapper mapper = new ObjectMapper();

mapper.configure(SerializationFeature.INDENT_OUTPUT, true);

mapper.writeValueAsString(<yourObject>);
  

 .  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14516240)
 https://stackoverflow.com/a/6339454/61624.  It says it's using Spring, but I think that should still help you in your case.  Let me inline the code here so it's more convenient: 

  import java.io.FileReader;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.ObjectWriter;

public class Foo
{
  public static void main(String[] args) throws Exception
  {
    ObjectMapper mapper = new ObjectMapper();
    MyClass myObject = mapper.readValue(new FileReader("input.json"), MyClass.class);
    // this is Jackson 1.x API only: 
    ObjectWriter writer = mapper.defaultPrettyPrintingWriter();
    // ***IMPORTANT!!!*** for Jackson 2.x use the line below instead of the one above: 
    // ObjectWriter writer = mapper.writer().withDefaultPrettyPrinter();
    System.out.println(writer.writeValueAsString(myObject));
  }
}

class MyClass
{
  String one;
  String[] two;
  MyOtherClass three;

  public String getOne() {return one;}
  void setOne(String one) {this.one = one;}
  public String[] getTwo() {return two;}
  void setTwo(String[] two) {this.two = two;}
  public MyOtherClass getThree() {return three;}
  void setThree(MyOtherClass three) {this.three = three;}
}

class MyOtherClass
{
  String four;
  String[] five;

  public String getFour() {return four;}
  void setFour(String four) {this.four = four;}
  public String[] getFive() {return five;}
  void setFive(String[] five) {this.five = five;}
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20871355)
 You can replace your  System.out  call with the following:  

  Object json = mapper.readValue(readFile(fileName, StandardCharsets.UTF_8), Object.class);
System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json));
  

 This should properly indent your json.  

 Hope this helps.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43519315)
 You may find the Jackson  JSON serializer  useful for this purpose. The Jackson library may already be part of your stack. If not, find the required dependencies below. 

  private static final ObjectMapper OBJECT_MAPPER_SINGLETON = new ObjectMapper();
public static String toStringUsingJackson(final Object object) {
    try {
        return OBJECT_MAPPER_SINGLETON.writeValueAsString(object);
    } catch (final JsonProcessingException e) {
        return String.valueOf(object);
    }
}
  

 Sample output: 

 
   {"name":"John Doe","age":42} 
 

 Required  maven/gradle dependencies : 

 
 jackson-core, groupId=com.fasterxml.jackson.core 
 jackson-databind, groupId=com.fasterxml.jackson.core 
 



