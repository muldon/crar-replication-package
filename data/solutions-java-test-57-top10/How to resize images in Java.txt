Query: How to resize images in Java
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19898341)
 For ImageMagic 1.4.0 

  // create command
ConvertCmd cmd = new ConvertCmd();

// create the operation, add images and operators/options
IMOperation op = new IMOperation();
op.addImage("source_picture.jpg"); // source file
op.resize(800,600);
// of op.resize(800); // and height calculate automatically
op.addImage("resized_picture.jpg"); // destination file file

// execute the operation
cmd.run(op);
  

  

  <dependency>
    <groupId>org.im4java</groupId>
    <artifactId>im4java</artifactId>
    <version>1.4.0</version>
</dependency>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16076530)
 The Java API does not provide a standard scaling feature for images and downgrading image quality. 

 Because of this I tried to use cvResize from JavaCV but it seems to cause problems. 

 I found a good library for image scaling: simply add the dependency for "java-image-scaling" in your pom.xml.  

  <dependency>
    <groupId>com.mortennobel</groupId>
    <artifactId>java-image-scaling</artifactId>
    <version>0.8.6</version>
</dependency>
  

 In the maven repository you will get the recent version for this. 

 . In your java program 

  ResampleOp resamOp = new ResampleOp(50, 40);
BufferedImage modifiedImage = resamOp.filter(originalBufferedImage, null);
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13892750)
 You should try out imgscalr:  

 https://github.com/thebuzzmedia/imgscalr 

 http://www.htmlgoodies.com/beyond/java/create-high-quality-thumbnails-using-the-imgscalr-library.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32740879)
  BufferedImage images = ImageIO.read(new File("image.jpg")); 
    int type = (images.getTransparency() == Transparency.OPAQUE)
            ? BufferedImage.TYPE_INT_RGB
            : Buffenter code hereeredImage.TYPE_INT_ARGB;
    BufferedImage finalImage = images;
    int w = 40;
    int h = 40;
    BufferedImage resizedImage = new BufferedImage(w, h, type);
    Graphics2D g2 = resizedImage.createGraphics();
    g2.drawImage(finalImage, 0, 0, null);
    g2.dispose();
    finalImage = resizedImage;
  

 This will resize  bufferedImage  to given dimensions and returns new  bufferedImage . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9804943)
 Images resized with standard Java libraries have poor quality.
I would use http://www.imagemagick.org/script/index.php with Java libs like http://im4java.sourceforge.net/. It is necessary to install ImageMagic on a server. 

 So for example resizing image to thumb with white background could look like this: 

  private static void toThumb(File original) {
        // create command
        ConvertCmd cmd = new ConvertCmd();

        // create the operation, add images and operators/options
        IMOperation op = new IMOperation();
        op.addImage(original.getPath());
        op.thumbnail(THUMB_WIDTH, THUMB_WIDTH);
        op.unsharp(0.1);
        op.gravity("center");
        op.background("white");
        op.extent(THUMB_WIDTH, THUMB_WIDTH);
        op.addImage(original.getPath());

        try {
            // execute the operation
            cmd.run(op);
        } catch (IOException ex) {
            Logger.error("ImageMagic - IOException %s", ex);
        } catch (InterruptedException ex) {
            Logger.error("ImageMagic - InterruptedException %s", ex);
        } catch (IM4JavaException ex) {
            Logger.error("ImageMagic - IM4JavaException %s", ex);
        }

    }
  

 Add im4java to your dependencies: 

  require:
    - play ]1.2,)
    - repositories.thirdparty -> im4java 1.1.0

repositories:

    - im4java:
        type:       http
        artifact:   http://maven.cedarsoft.com/content/repositories/thirdparty/[module]/[module]/[revision]/[module]-[revision].[ext]
        contains:
            - repositories.thirdparty -> *
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6586119)
 You can't easily resize an image from one file size to another, BUT, most JPG/PNG/GIF/etc. tend to have similar file-sizes based on their resolutions. For example, a 200kb compressed JPG might typically be say 1280x960 in size. If that is the case, you would just target all your resize operations to size the target images to that size and get roughly the size constraint you want. 

 One really easy way to do this is to use very simple java https://github.com/thebuzzmedia/imgscalr (Apache 2 license) that just does everything right for you. Example code to resize would look like this: 

  BufferedImage img = ImageIO.read(...); // load image
BufferedImage scaledImg = Scalr.resize(img, 1280, 960);
  

 Your image proportions are honored, the library makes a best-guess at the method it should use based on the amount of change in the image due to scaling (FASTEST, BALANCED or QUALITY) and the best supported Java2D image types are always used to do the scaling to avoid the issue of "black" results or really terrible looking output (e.g. overly dithered GIF images). 

 Also, if you want to force it to output the best looking result possible in Java, the API call would look like this: 

  BufferedImage img = ImageIO.read(...); // load image
BufferedImage scaledImg = Scalr.resize(img, Method.QUALITY, 1280, 960);
  

 The library use the Java2D recommended incremental scaling for you to give you the best looking result. 

 You can read through all the comments in the library (the code itself is doc'ed heavily) to see all the different JDK bugs that are worked around or optimizations that are made to improve the performance or memory usage. I spent a LOT of time tuning this implementation and have had a lot of good feedback from folks deploying it in web apps and other Java projects. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4366717)
 . Recently I used https://code.google.com/p/java-image-scaling/ and it works fine. Also  java.awt  has  Image.getScaledInstance(..  and I guess http://java.sun.com/javase/technologies/desktop/media/jai/ also has such options. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9403763)
 You are calling resize() on each image, but not replacing the images in the array. So the output of resize() is being thrown away: 

   myImages[i] = ImageIO.read(new File(imagePath)); // create an image
 resize(myImages[i]); // returns resized img, but doesn't assign it to anything
 imglab[i] = new JLabel(new ImageIcon(myImages[i])); // uses _original_ img
  

 You need to change the middle line to: 

   myImages[i] = resize(myImages[i]);
  

 to make this work. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6444133)
 You have 3 option for this 

 1) Resize the images themselves using Gimp, Photoshop, etc. 

 2) Create an icon dynamically 

  Image i = icon.getImage();
if(i != null){
   int width = (int)(size * fraction);
   int height =(int)(size*icon.getIconHeight()/icon.getIconWidth()*fraction);
   miniature = new ImageIcon(i.getScaledInstance(width, height, Image.SCALE_SMOOTH));
}
  

 3) on the paint of your frame you can use scale 

  private void scaledDrawing(Graphics g, float scale){
   Graphics2D g2 = (Graphics2D) g;
   AffineTransform at = new AffineTransform();
   AffineTransform save = g2.getTransform();
   at.setToIdentity();
   at.scale(goa.getScale().x, goa.getScale().y);
   g2.transform(at);
   image.paintIcon(c, g2);
   g2.setTransform(save);
}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32758346)
 Ya guys i have solved the problem . Actually i have to specify the image type of the output image  

  public static void main(String... args) throws Exception {   
           IMOperation op = new IMOperation();
            op.addImage();                       
            op.resize(350)
            op.addImage("jpg:-")               
            BufferedImage images = ImageIO.read(new File("image.jpg")); 

            // set up command
            ConvertCmd convert = new ConvertCmd();
            Stream2BufferedImage s2b = new Stream2BufferedImage();
            convert.setOutputConsumer(s2b);

            // run command and extract BufferedImage from OutputConsumer
            convert.run(op,images);
            BufferedImage img = s2b.getImage();
        }
  



