Query: Java Program to Calculate average of numbers using Array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10791579)
 Use a double for the sum, otherwise you are doing an integer division and you won't get any decimals: 

  private double calculateAverage(List <Integer> marks) {
    if (marks == null || marks.isEmpty()) {
        return 0;
    }

    double sum = 0;
    for (Integer mark : marks) {
        sum += mark;
    }

    return sum / marks.size();
}
  

 or using the Java 8 stream API: 

      return marks.stream().mapToInt(i -> i).average().orElse(0);
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32135007)
 If using  Java8  you can get the average of the values from a List as follows: 

      List<Integer> intList = Arrays.asList(1,2,2,3,1,5);

    Double average = intList.stream().mapToInt(val -> val).average().orElse(0.0);
  

 This has the advantage of having no moving parts.  It can be easily adapted to work with a List of other types of object by changing the map method call.   

 For example with Doubles:  

      List<Double> dblList = Arrays.asList(1.1,2.1,2.2,3.1,1.5,5.3);
    Double average = dblList.stream().mapToDouble(val -> val).average().orElse(0.0);
  

 . mapToDouble is required because it returns a DoubleStream which has an  average  method, while using  map  does not.  

  

  @Test
public void bigDecimalListAveragedCorrectly() {
    List<BigDecimal> bdList = Arrays.asList(valueOf(1.1),valueOf(2.1),valueOf(2.2),valueOf(3.1),valueOf(1.5),valueOf(5.3));
    Double average = bdList.stream().mapToDouble(BigDecimal::doubleValue).average().orElse(0.0);
    assertEquals(2.55, average, 0.000001);
}
  

 using  orElse(0.0)  removes problems with the Optional object returned from the  average  being 'not present'. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31021873)
 With Java 8 it is http://www.leveluplunch.com/java/examples/calculate-average-of-list/: 

  OptionalDouble average = marks
            .stream()
            .mapToDouble(a -> a)
            .average();
  

 Thus your average value is average.getAsDouble() 

  return average.isPresent() ? average.getAsDouble() : 0; 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26990905)
 First of all average of integers can be floating point. So make the return type of your function to float or double.
Now, 
If you have set of  n  numbers with average of  x  and you want to add one more number to the set (say  b ). New average will be ((n * x) + b) / (n + 1). Use the same trick in your code.   

  public float findAvg(int a[], int n)
{
    float sum,avg;
    if(n==1)
    {
        sum=a[0];
    }
    else 
    {
        // Calculate sum of n-1 numbers = (n-1) * (avg of n-1 numbers)
        // and add nth number to it ( i.e. a[n-1])
        sum= a[n-1]+ (n-1) * findAvg(a,n-1);
    }
    avg = sum/n;
    return avg;
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15315741)
 Instead of using a statically-sized array you could use a dynamically-sized  List : 

  import java.util.List;
import java.util.LinkedList;

// . . .

private static void infoMenu1(Scanner sc) throws FileNotFoundException {
    File file = new File("data.txt");
    sc = new Scanner(file);

    List<Integer> numbers = new LinkedList<Integer>();

    while (sc.hasNextInt()) {
        numbers.add(sc.nextInt());
    }

    System.out.println("The average of the numbers in the file is: " + avg(numbers));
}

public static int avg(List<Integer> numbers) {
    int sum = 0;
    for (Integer i : numbers) {
        sum += i;
    }
    return (sum / numbers.size());
}
  

 This has added the benefit of allowing you to read in more than 100 numbers. Since the  LinkedList  allows you to perform an arbitrary number of  add  operations, each in constant time, you don't need to know how many numbers (or even an upper-bound on the count) before reading the input. 

 As kkonrad also mentioned, you may or may not actually want to use a floating-point value for your average. Right now you're doing integer arithmetic, which would say that the average of  1  and  2  is  1 . If you want  1.5  instead, you should consider using a  double  to compute the average: 

  public static double avg(List<Integer> numbers) {
    double sum = 0;
    for (Integer i : numbers) {
        sum += i;
    }
    return (sum / numbers.size());
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45514709)
 You can use standard looping constructs or iterator/listiterator for the same : 

  List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);
double sum = 0;
Iterator<Integer> iter1 = list.iterator();
while (iter1.hasNext()) {
    sum += iter1.next();
}
double average = sum / list.size();
System.out.println("Average = " + average);
  

 If using Java 8, you could use Stream or IntSream operations for the same : 

  OptionalDouble avg = list.stream().mapToInt(Integer::intValue).average();
System.out.println("Average = " + avg.getAsDouble());
  

 Reference : http://www.topjavatutorial.com/java/calculating-sum-average-arraylist-integers/ 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46305025)
 Your problem seems to bee on this line: 

  if(Averages.size() < avg) aveless++;
  

 You should be checking  Averages.get(i) < avg  instead, otherwise what is the point of looping? 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46985266)
 @alfasin 's answer is great, here is a java 8 solution : 

  public static int getRowAverage(int index, int[]... examples) {
    return Arrays.stream(examples)
            .mapToInt(ex -> ex[index]).sum() / examples.length;

}
  

  

  public static void main(String[] args) {
    int[] example1 = {85, 80, 85};
    int[] example2 = {75, 91, 52};
    int[] example3 = {92, 89, 78};
    // for row 1 (index 0)
    int average_row_1 = getRowAverage(0, example1, example2, example3);
    System.out.println(average_row_1);
}
  



