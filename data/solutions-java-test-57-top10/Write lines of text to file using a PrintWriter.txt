Query: Write lines of text to file using a PrintWriter
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15727263)
 PrintWriter.printf seems to be the most appropriate 

  PrintWriter pw = new PrintWriter(new FileWriter("output.txt"));
    for (int i = 0; i < 10; i++) {
        pw.printf("Result %d : %s %n",  i, ans);
    }
    pw.close();
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9919216)
      try 
    {
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("outfilename", true)));
    out.println("the text");
    out.close();
     } catch (IOException e) {
    }
  

 The second parameter to the  FileWriter  constructor will tell it to  append  to the file (as opposed to clearing the file). 

 Using a  BufferedWriter  is recommended for an expensive writer (i.e. a  FileWriter ), and using a  PrintWriter  gives you access to println syntax that you're probably used to from System.out. 

 But the  BufferedWriter  and  PrintWriter  wrappers are not strictly necessary. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15726985)
 Your code is creating a new file for every line. Pull the file open outside of the for loop. 

  FileWriter f0 = new FileWriter("output.txt");

String newLine = System.getProperty("line.separator");


for(i=0;i<10;i++)
{
    f0.write("Result "+ i +" : "+ ans + newLine);
}
f0.close();
  

 If you want to use  PrintWriter , try this 

  PrintWriter f0 = new PrintWriter(new FileWriter("output.txt"));

for(i=0;i<10;i++)
{
    f0.println("Result "+ i +" : "+ ans);
}
f0.close();
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17623058)
 To directly answer your question: 

 you can, and you can also use BufferedWriter to do so. 

  BufferedReader br = new BufferedReader(new FileReader(new File("Filepath")));
BufferedWriter bw = new BufferedWriter(new FileWriter(new File("Filepath")));
String l;
while((l=br.readLine())!=null){

    ... do stuff ...

    bw.write("what you did");

}

bw.close();
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21549462)
 Create PrintWriter instance out of your while loop.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19978656)
 Try to use  out.flush();  right after the line  out.print(text);  

 Here is a proper way to write in a file : 

  public void new_file_with_text(String text, String fname) {
    try (FileWriter f = new FileWriter(fname)) {
        f.write(text);
        f.flush();
    } catch (IOException e) {
       e.printStackTrace();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32797775)
 Files contain bytes. . 

 Characters are written into files by transforming characters into bytes, using an encoding. Many such encodings exist. For example, ASCII allows transforming 128 different characters to bytes. UTF-8 allows encoding any Unicode character to bytes. The two encodings, for example, transform the character '1' into the byte 49. '2' would be transformed into the byte 50. 

 When using a PrintWriter with a file name as argument, the PrintWriter actually opens a FileOuptutStream to write bytes to the file. When you write characters to the PrintWriter, the PrintWriter transforms characters to bytes using an encoding, and then write those bytes to the FileOutputStream, which writes the bytes to the file. 

 So, for example, if you use the following program: 

  public class Main {
    public static void main(String[] args) throws Exception {
        FileOutputStream fos = new FileOutputStream(new File("data")) ; 
        for(int i = 49; i <= 58; ++i)
            fos.write(i);
        fos.close();
    }
}
  

 and then open the file with a text editor, you should see  123456789  in the file, because the code writes the byte representation (in ASCII or UTF8) of those characters directly. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17765712)
 Using java.nio.http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html along with java.nio.file.http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardOpenOption.html 

      PrintWriter out = null;
    BufferedWriter bufWriter;

    try{
        bufWriter =
            Files.newBufferedWriter(
                Paths.get("log.txt"),
                Charset.forName("UTF8"),
                StandardOpenOption.WRITE, 
                StandardOpenOption.APPEND,
                StandardOpenOption.CREATE);
        out = new PrintWriter(bufWriter, true);
    }catch(IOException e){
        //Oh, no! Failed to create PrintWriter
    }

    //After successful creation of PrintWriter
    out.println("Text to be appended");

    //After done writing, remember to close!
    out.close();
  

 This creates a  BufferedWriter  using Files, which accepts  StandardOpenOption  parameters, and an auto-flushing  PrintWriter  from the resultant  BufferedWriter .  PrintWriter 's  println()  method, can then be called to write to the file. 

 The  StandardOpenOption  parameters used in this code: opens the file for writing, only appends to the file, and creates the file if it does not exist. 

  Paths.get("path here")  can be replaced with  new File("path here").toPath() .
And  Charset.forName("charset name")  can be modified to accommodate the desired  Charset . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18718947)
 You are using a FileWriter (or a FileOutputStream in the second example). These are not buffered! So they write single chars resp. . 

 That means, you should wrap the FileWriter in a BufferedWriter (or the FileOutputSystem in a BufferedOutputSystem). 

  private static void write(StringBuilder sb, Boolean append) throws Exception {
    File file = File.createTempFile("foo", ".txt");
    Writer writer = new BufferedWriter(new FileWriter(file.getAbsoluteFile(), append));
    PrintWriter out = new PrintWriter(writer);
    try {
        out.print(sb);           
        out.flush();
        writer.flush();
    } finally {
        writer.close();
        out.close();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6092332)
 Every time you call  WriteToFile.write , it reopens the file for writing, truncating the file's original contents. You should open the file once, in the constructor (and store the  PrintWriter  in a field), and add a  close  method that calls  close  for the  PrintWriter . 

 On the calling side, do this: 

  WriteToFile writer = new WriteToFile(filename);
try {
    // writer.write(...);
} finally {
    writer.close();
}
  

 By having the  close  call in a  finally  block, you ensure the file is closed even if an exception causes the function to quit early. 



