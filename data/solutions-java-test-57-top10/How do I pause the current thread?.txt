Query: How do I pause the current thread?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2029212)
 As already mentioned by other posters, if you just want the thread to pause for some time use  Thread.sleep() . 

 If you want the thread to do something, but want to make it stop after a while, use something like: 

  class Foo implements Runnable {
    private volatile boolean killed = false;

    public void run() {
        while (!killed) {
            try { doOnce(); } catch (InterruptedException ex) { killed = true; }
        }
    }

    public void kill() { killed = true; }
    private void doOnce() throws InterruptedException { /* .. */ }
}
  

 and from the main thread, do: 

  Foo foo = new Foo(); 
Thread thread = new Thread(foo);
thread.start();

/* when you want to stop it */
foo.kill();
thread.interrupt();
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4801363)
 The  Thread.interrupt()  method interrupts the specific Thread that the instance references to: 

  Thread x = getSomeThreadInstance();
x.interrupt();
  

 The x variable can refer to any thread instance. 

 The  Thread.currentThread().interrupt()  method is the same as before, but applied to the current Thread, interrupting only the current thread of execution.  

  Thread x = Thread.currentThread();
x.interrupt();
  

 About  Thread.sleep()  and  Thread.currentThread().sleep()  there is no difference.  sleep()  is a static method on the http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Thread.html#sleep%28long%29, and makes no difference on the way you call it. Calling it causes the current thread of execution to pause for the indicated amount of time. 

 Nonetheless, one should not call static method on an instance, which means static method should be called in a static way. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19552281)
 If you're trying to just pause for a second, http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait%28long%29 is the wrong method. You want http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep%28long%29 instead. 

  try {
    Thread.sleep(1);  // Pause for 1 millisecond.
}
catch (InterruptedException e) {
}
  

 
   sleep()  pauses the current thread for the specified interval. Note that the time is specified in milliseconds, so 1 means 1 millisecond. To pause for 1 second pass 1000.  
   wait()  is a synchronization-related method used to coordinate activity among different threads. It needs to be called from inside a  synchronized  block in tandem with some other thread calling  notify()  or  notifyAll() . It should  not  be used to simply add a delay to your program.  
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5843123)
 The only actual call is 

  Thread.sleep(5000);
  

 The other is an oddity of java that you can call static method's through instance variables. 

 You should always use 

  Thread.sleep(5000);
  

 As it is better self-documenting that it is the current thread 'always' that is being slept on.  

  myThread.sleep(5000);
  

 You are not sleeping the myThread thread, you are sleeping the current thread. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1538514)
 Based on your comments it sounds like you are doing something like this: 

  Thread thread = new Thread(new Runnable(){
    public void run() { // do stuff }});

thread.start();
...
thread.wait();
  

 There are three problems.   

 
  As others have said,  obj.wait()  can only be called if the current thread holds the primitive lock / mutex for  obj .  If the current thread does not hold the lock, you get the exception you are seeing.  
  The  thread.wait()  call does not do what you seem to be expecting it to do.  Specifically,  thread.wait()   does not  cause the nominated thread to wait.  Rather it causes  the current thread  to wait until some other thread calls  thread.notify()  or  thread.notifyAll() . 

 There is actually no safe way to force a  Thread  instance to pause if it doesn't want to.  (The nearest that Java has to this is the deprecated  Thread.suspend()  method, but that method is inherently unsafe, as is explained in the Javadoc.) 

 If you want the newly started  Thread  to pause, the best way to do it is to create a  CountdownLatch  instance and have the thread call  await()  on the latch to pause itself.  The main thread would then call  countDown()  on the latch to let the paused thread continue.  
  Orthogonal to the previous points, using a  Thread  object as a lock / mutex may cause problems.  For example, the javadoc for  Thread::join  says: 

 
   This implementation uses a loop of  this.wait  calls conditioned on  this.isAlive . As a thread terminates the  this.notifyAll  method is invoked. It is recommended that applications not use  wait ,  notify , or  notifyAll  on  Thread  instances. 
  
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16870085)
 Acorrding to http://docs.oracle.com/javase/tutorial/essential/concurrency/join.html 

 The join method allows one thread to wait for the completion of another. If  t  is a Thread object whose thread is currently executing, 

  t.join();
  

 causes the current thread to pause execution until t's thread terminates. Overloads of join allow the programmer to specify a waiting period.  

 
   SO it clearly tells that if you join a thread then the current thread
  will wait until the termination of thread. So if a thread is not
  started yet how can it be terminated. 
 

  Proof By Contradiction :D  

 say you can join a thread  t  without starting.  

  t.join();
  

 now as per the behavior of join current thread will be waiting. Now say some evil thinking (!) comes to your mind and you haven't started the thread (:D).  Imagine this scenario and you will find your answer 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43868184)
  join( ): Waits for this thread to die. 

 The https://docs.oracle.com/javase/tutorial/essential/concurrency/join.html method allows one thread to wait for the completion of another. If t is a Thread object whose thread is currently executing, 

  t.join();
  

 causes the current thread to pause execution until t's thread terminates. 

  wait() : Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. 

  notify() : Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. 

  notifyAll() :Wakes up all threads that are waiting on this object's monitor. A thread waits on an object's monitor by calling one of the wait methods. 

 Refer to below posts for more details. 

 https://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep/37215119#37215119 

 https://stackoverflow.com/questions/7842265/difference-between-synchronized-block-with-wait-notify-and-without-them 

 Examples: 

 https://stackoverflow.com/questions/2536692/a-simple-scenario-using-wait-and-notify-in-java 

 http://howtodoinjava.com/core-java/multi-threading/how-to-work-with-wait-notify-and-notifyall-in-java/ 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24104332)
 Use  Thread.sleep(1000) ; 

  1000  is the number of milliseconds that the program will pause. 

  try
{
    Thread.sleep(1000);
}
catch(InterruptedException ex)
{
    Thread.currentThread().interrupt();
}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13690496)
 You need to provide additional logic to your simulation thread that will accept "signals" from controlling (GUI) thread and wait for the next controlling signal to resume execution. 

 For example you can use  volatile boolean isPaused  instance field in simulation thread. Set it to true/false to pause/resume simulation thread. In simulation thread implement corresponding logic: 

  public void run() {
    while (true) {
        simulate();
        while (isPaused) {
            Thread.sleep(100);
        }
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/14304134)
  public class StockMonitor extends Thread {

    private boolean suspend = false; 
    private volatile Thread thread;

    public StockMonitor() {
        thread = this;
    }

    // Use name with underscore, in order to avoid naming crashing with
    // Thread's.
    private synchronized void _wait() throws InterruptedException {
        while (suspend) {
            wait();
        }
    }

    // Use name with underscore, in order to avoid naming crashing with
    // Thread's.
    public synchronized void _resume() {
        suspend = false;
        notify();
    }

    // Use name with underscore, in order to avoid naming crashing with
    // Thread's.
    public synchronized void _suspend() {
        suspend = true;
    }  

     public void _stop() { 
        thread = null;
        // Wake up from sleep.
        interrupt();     
     }

     @Override
     public void run() {
        final Thread thisThread = Thread.currentThread();
        while (thisThread == thread) {
            _wait();
            // Do whatever you want right here.
        }
     }
}
  

 Calling  _resume  and  _suspend  will enable you to resume and pause the  Thread .  _stop  will let you stop the thread gracefully. Note that, once you stop the  Thread , there is no way to resume it again. The  Thread  is no longer usable. 

 The code is being picked from a real world open source project : http://jstock.hg.sourceforge.net/hgweb/jstock/jstock/file/b17c0fbfe37c/src/org/yccheok/jstock/engine/RealTimeStockMonitor.java#l247 



