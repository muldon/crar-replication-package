Query: Find maximum element of ArrayList
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19546722)
 We can simply use  Collections.max()  and  Collections.min()  method. 

  public class MaxList {
    public static void main(String[] args) {
        List l = new ArrayList();
        l.add(1);
        l.add(2);
        l.add(3);
        l.add(4);
        l.add(5);
        System.out.println(Collections.max(l)); // 5
        System.out.println(Collections.min(l)); // 1
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24352857)
 If you want to use an  ArrayList  you can check fro maximum with linear time by, 

  public static Integer getMaximum(List<Integer> coll) {
  if (coll == null) {
    return null;
  }
  Integer i = coll.get(0);
  for (int t = 1; t < coll.size(); t++) {
    Integer v = coll.get(i);
    if (v != null && v > i) {
      i = v;
    }
  }
  return i;
}
  

 Or, you could change that to a  SortedSet<Integer> set = new TreeSet<Integer>();  then the maximum element is always  set.last();  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43701445)
 As your  ArrayList  contains  Forecast  objects you'll need to define how the  max  method should find the maximum element within your  ArrayList . 

 something along the lines of this should work: 

  ArrayList<Forecast> forecasts = new ArrayList<>();
// Forecast object which has highest temperature
Forecast element = Collections.max(forecasts, Comparator.comparingInt(Forecast::getTemperature));
// retrieve the maximum temperature
int maxTemperature = element.getTemperature();
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24352786)
 You can use this  

   Collections.max(arrayList);
  

 To know more about read  http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#max%28java.util.Collection%29 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39253962)
 Here is the fucntion 

  public int getIndexOfMax(ArrayList<Integer> arr){
    int MaxVal = arr.get(0); // take first as MaxVal
    int indexOfMax = -1; //returns -1 if all elements are equal
    for (int i = 0; i < arr.size(); i++) {
        //if current is less then MaxVal
        if(arr.get(i) < MaxVal ){
            MaxVal = arr.get(i); // put it in MaxVal
            indexOfMax = i; // put index of current Max
        }
    }
    return indexOfMax;  
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16840396)
  public int getMax(ArrayList list){
    int max = Integer.MIN_VALUE;
    for(int i=0; i<list.size(); i++){
        if(list.get(i) > max){
            max = list.get(i);
        }
    }
    return max;
}
  

 From my understanding, this is basically what Collections.max() does, though they use a comparator since lists are generic. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40091297)
 Here are three more ways to find the maximum value in a list, using streams: 

  List<Integer> nums = Arrays.asList(-1, 2, 1, 7, 3);
Optional<Integer> max1 = nums.stream().reduce(Integer::max);
Optional<Integer> max2 = nums.stream().max(Comparator.naturalOrder());
OptionalInt max3 = nums.stream().mapToInt(p->p).max();
System.out.println("max1: " + max1.get() + ", max2: " 
   + max2.get() + ", max3: " + max3.getAsInt());
  

 All of these methods, just like  Collections.max , iterate over the entire collection, hence they require time proportional to the size of the collection. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8304795)
 You can use the  Collections API  to achieve what you want easily -  read efficiently  - enough
https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#max-java.util.Collection- 

  Collections.max(arrayList);
  

 
   Returns the maximum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18547014)
 This question is almost a year old but I have found that if you make a custom comparator for objects you can use Collections.max for an array list of objects.  

  import java.util.Comparator;

public class compPopulation implements Comparator<Country> {
    public int compare(Country a, Country b) {
        if (a.getPopulation() > b.getPopulation())
            return -1; // highest value first
        if (a.getPopulation() == b.Population())
            return 0;
        return 1;
    }
}
ArrayList<Country> X = new ArrayList<Country>();
// create some country objects and put in the list
Country ZZ = Collections.max(X, new compPopulation());
  



