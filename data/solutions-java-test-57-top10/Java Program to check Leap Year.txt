Query: Java Program to check Leap Year
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52164114)
 
  If a year is a century year, meaning divisible by  100 , then it needs to be divisible by  400  to be called as a  leap year .  
  If a year is not a century year, then it needs to be divisible by  4  to be called as a leap year.  
 

 Below Code uses  binary search  to check if a number is divisible by another number or not(since  /  is not allowed, I am not sure if you could use  %  though). 

      public static boolean isLeapYear(int year){
        return isDivisible(1,year,100,year) ? isDivisible(1,year,400,year) : isDivisible(1,year,4,year);
    }

    private static boolean isDivisible(int low,int high,int divisor,int dividend){
        int mid = 0;
        while(low <= high){
            mid = low + ((high - low) >> 1);
            int result = divisor * mid;
            if(result == dividend) return true;
            else if(result > dividend) high = mid - 1;
            else low = mid + 1;
        }

        return false;
    }
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18607741)
 Try   GregorianCalendar  http://docs.oracle.com/javase/6/docs/api/java/util/GregorianCalendar.html 

  GregorianCalendar gc = new GregorianCalendar();
if (gc.isLeapYear(year) ) 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52158643)
 .  Since division or mod by powers of 2 (in this case, 4), is just a bit check. 

  boolean isLeapYear( int year ) {
    return (( year & 3 ) == 0 );  // if the bottom two bits are 0, then the int is divisible by 4
}
  

 Note this isn't perfect, as some centuries aren't leap years, but it seems that's not relevant to your question (as you now state). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26407124)
 One way would be to create a  TemporalAdjuster  that returns the next 29th February and check if  maturity  is before or after that date. Example (not tested): 

  public static TemporalAdjuster nextOrSame29Feb() {
  return temporal -> {
    LocalDate input = LocalDate.from(temporal);
    if (input.isLeapYear()) {
      LocalDate feb29 = input.with(MonthDay.of(FEBRUARY, 29));
      if (!input.isAfter(feb29)) return feb29;
    }
    for (int year = input.getYear() + 1; ; year++) {
      if (Year.isLeap(year)) return LocalDate.of(year, FEBRUARY, 29);
    }
  };
}
  

 And your code becomes: 

  boolean contains29Feb = !maturity.isBefore(beginDate.with(nextOrSame29Feb()));
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7395759)
 If you use the http://download.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html, you could do as below 

 
   Determines if the given year is a leap year. Returns true if the given
  year is a leap year. To specify BC year numbers, 1 - year number must
  be given. For example, year BC 4 is specified as -3. 
 

  GregorianCalendar cal = new GregorianCalendar();

if(cal.isLeapYear(year))
{
    System.out.print("Given year is leap year.");
}
else
{ 
    System.out.print("Given year is not leap year.");
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37571983)
 You can ask the http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html#isLeapYear(int) class for this: 

  boolean isLeapyear = new GregorianCalendar().isLeapYear(year);
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25617941)
 Apart from the algorithm you can calculate leap year using java's built in Calendar api.  

  static boolean isLeapYear(int year){
    Calendar calendar= Calendar.getInstance();
    calendar.set(Calendar.YEAR,year);
    return calendar.getActualMaximum(Calendar.DAY_OF_YEAR) > 365;
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37380349)
  java.time.Year::isLeap  

 I'd like to add the new https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html way of doing this with the https://docs.oracle.com/javase/8/docs/api/java/time/Year.html class and https://docs.oracle.com/javase/8/docs/api/java/time/Year.html#isLeap-- method: 

  java.time.Year.of(year).isLeap()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26132756)
 check the following lines: 

  if (year % 100 ==0);
else 
  

 300 % 100 == 0, nothing is output. 



