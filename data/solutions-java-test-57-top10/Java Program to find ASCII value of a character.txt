Query: Java Program to find ASCII value of a character
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37431302)
 In your case, you have four ascii characters and then you have the other chinese character, so you can check, using a for loop, when a char is no more an ascii. 

 So, if char is different from ascii, then is, in this case I mean, a chinese character. 

  for(int i = 0; i < str.length(); i++) {
    char c = str.charAt(i);
    int char = (int) c;
    if(char < 0 || char > 255) // Is not ascii
    System.out.println("The first chinese char is: " + str.charAt(i);
 }
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27210524)
 You can check for ASCII values: 

 if character has ascii value between 48 and 57(both inclusive) then it is a number. 

 if it is between 65 and 90 (both inclusive) then it is an Uppercase alphabet. 

 if it is between 97 and 122 (both inclusive) then it is a Lowercase alphabet 

 you can refer this http://www.asciitable.com/ for ASCII table 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27996506)
 The problem is that you're using the unicode value of the character when it's a digit. 

  

  max = c;
  

 ... you should use: 

  max = c - '0';
  

 Also note that  Character.isLetter  returns  true  for all unicode letters, including Arabic letters and letters from other alphabets, that have much higher unicode codepoint values; likewise for  Character.isDigit  

 In your case, you're only capable of handling Latin characters from the ASCII character set, so to be safe it's better to check for that specifically.
And you're not checking correctly for the maximum value (you're comparing the unicode codepoint to the max, not the converted value) 

              int v = 0;
            if (c >= '0' && c <= '9') {
                v = c - '0';
            } else if (c >= 'A' && c <= 'Z') {
                v = 10 + (c - 'A');
            }
            if (v > max) {
                max = v;
            }
  

 Full program: 

  public static int findBase(String str) {
    int max = 0;
    str = str.toUpperCase();
    for (int i = 0; i < str.length(); i++) {
        char c = str.charAt(i);
        int v = 0;
        if (c >= '0' && c <= '9') {
            v = c - '0';
        } else if (c >= 'A' && c <= 'Z') {
            v = 10 + (c - 'A');
        }
        if (v > max) {
            max = v;
        }
    }
    return max + 1;
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23576571)
 Well, I don't know exactly what character encodings you will be examining, but if you are constraining yourself to only ASCII characters, you can use a simple array of 128 elements.  

  public static String uniqueLetters(String s) {
   // storage for ascii characters
   char[] letters = new char[128];

   // mark counts of all letters
   for(int i = 0; i < s.length(); i++) {
      letters[ (int)s.charAt(i) ]++;
   }

   // find unique letters
   String uniques = "";
   for(int i = 0; i < letters.length; i++) {
      if ( letters[i] == 1 ) {
         uniques += Character.toString( (char)letters[i] );
      }
   }

   return uniques;
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16778173)
 The  ?  makes the entire character group optional. So your regex essentially means "find any character<sup>* ... or not". And the "or not" part means it matches the empty string. 

 <sup>* not really "any", just those characters that are represented in ASCII. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32163975)
 That is because, when you assign a character type to integer, the JVM will assign the ASCII value rather than an int format of char as you expect. 

 Try something like parseInt... 

  for (int i = 0; i < ch.length; i++)
{
    sum += Integer.parseInt(ch[i]);
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16458641)
 Convert the char to int. 

      String name = "admin";
    int ascii = name.toCharArray()[0];
  

  

  int ascii = name.charAt(0);
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31435327)
 There are couple of excellent answers already provided above. So I don't want to repeat what's everything already said. But did want to add couple of things to help with the above program as I just worked through the same program and had couple of questions but after spending some time, I have more clarity on this program. 

 First of all "checker" is used to track the character which is already traversed in the String in order to see if there are any characters are getting repeated. 

 Now "checker" is an int data type so it can only have 32 bits or 4 bytes (depending upon platform) so this program can only work correctly for a character set within a range of 32 characters. That's the reason, this program subtracts 'a' from each character in order to make this program run for only lower case characters. However if you mix lower and upper case characters then it would not work. 

 By the way, if you do not subtract 'a' from each character (see below statement) then this program will work correctly for only String with upper case characters or String with only lower case characters. So the scope of above program increases from just lower case characters to upper case characters too but they can't be mixed together. 

  int val = str.charAt(i) - 'a'; 
  

 However I wanted to write a generic program using Bitwise Operation which should work for any ASCII characters without worrying about upper case, lower case, numbers or any special character. In order to do this, our "checker" should be large enough to store 256 characters (ASCII Character Set size). But an int in Java would not work as it can only store 32 bits. Hence in below program, I am using BitSet class available in JDK which can have any user defined size passed while instantiating a BitSet object. 

 Here is a program which does the same thing as above program written using Bitwise operator but this program will work for a String with any character from ASCII character set. 

  public static boolean isUniqueStringUsingBitVectorClass(String s) {

    final int ASCII_CHARACTER_SET_SIZE = 256;

    final BitSet tracker = new BitSet(ASCII_CHARACTER_SET_SIZE);

    // if more than  256 ASCII characters then there can't be unique characters
    if(s.length() > 256) {
        return false;
    }

    //this will be used to keep the location of each character in String
    final BitSet charBitLocation = new BitSet(ASCII_CHARACTER_SET_SIZE);

    for(int i = 0; i < s.length(); i++) {

        int charVal = s.charAt(i);
        charBitLocation.set(charVal); //set the char location in BitSet

        //check if tracker has already bit set with the bit present in charBitLocation
        if(tracker.intersects(charBitLocation)) {
            return false;
        }

        //set the tracker with new bit from charBitLocation
        tracker.or(charBitLocation);

        charBitLocation.clear(); //clear charBitLocation to store bit for character in the next iteration of the loop

    }

    return true;

}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16458684)
 It's simple, get the character you want, and convert it to int. 

  String name = "admin";
int ascii = name.charAt(0);
  



