Query: Java Program to display first 100 prime numbers
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22508935)
 Store the primes in an array and display them at the end, outside the loop. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54060189)
 To print the output after the user finished entering the numbers you need to use arrays or  List . I wrote your function using  ArrayList  to accumulate the user input, then calculate the prime numbers and finally display the results.  

 On the first part I change the way the input is asked to retry the input if there was an error during parsing. This way you don't loose all the numbers previously entered. 

  List<Integer> numbers = new ArrayList<>();  
InputStreamReader read = new InputStreamReader(System.in);
BufferedReader in = new BufferedReader(read);

System.out.println("Enter " + total + " numbers: ");
int total = 20;
for (int i = 1; i <= total; i++) {
    try {
        System.out.print(i + " of " + total + ": ");
        numbers.add(Integer.parseInt(in.readLine()));
    } catch (NumberFormatException e) {
        System.err.println("Cannot parse input as integer");
        i--;
    }
}
  

 This is not related to your question, but I also did some changes to the way you are calculating the prime numbers to make it run faster when looping over large values.  

  List<Integer> primes = new ArrayList<>();

System.out.println("Calculating primes...");
for (int n : numbers) {
    boolean isPrime = true;
    if (n > 1) {
        for (int dividend = 2; dividend <= n / 2; dividend++) {
            if (n % dividend == 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime)
            primes.add(n);
    }
}
  

 Finally to print the list of prime numbers I am first sorting the list in ascending order using the Java 8 natural order comparator. This makes the output easier to read. 

  primes.sort(Comparator.naturalOrder());
if (primes.isEmpty()) {
    System.out.println("No prime numbers found");
} else {
    System.out.println("primes: " + primes);
}
  

  Sample output  

 
Enter 20 numbers: 
1 of 20: 1
2 of 20: 2
3 of 20: 3
4 of 20: 4
5 of 20: 5
6 of 20: 7
7 of 20: 9
8 of 20: 11
9 of 20: 13
10 of 20: 17
11 of 20: 
<b>Cannot parse input as integer</b>
11 of 20: 99999999999999
<b>Cannot parse input as integer</b>
11 of 20: 123456789
12 of 20: 987654321
13 of 20: 41
14 of 20: 71
15 of 20: 98
16 of 20: 1239213
17 of 20: 9214134713
<b>Cannot parse input as integer</b>
17 of 20: 84379811
18 of 20: 12312
19 of 20: 245
20 of 20: 13
Calculating primes...
primes: [2, 3, 5, 7, 11, 13, 13, 17, 41, 71]
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54647030)
 You can try below code. Hope it helps you, 

  import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class PrimeNumberTest {
    public static void main(String[] args) {
         List<Integer> list = new ArrayList<>(Arrays.asList(7, 11, 12, 23, 19, 7 ,113, 101)); 
         //To remove duplicates
         Set<Integer> set = new TreeSet<>(list);
         System.out.println(getPrimeNumbers(set).toString().replaceAll(",", "").replace("]", "").replace("[", ""));
    }
    //Method to get unique ordered set of prime numbers
    private static Set<Integer> getPrimeNumbers(Set<Integer> set) {
        Set<Integer> resultList=new TreeSet<>();
        set.forEach(ele->{
            //check for prime
            if(isPrime(ele)){
                //if prime number check for reverse and if true, add to result
                 if(isPrime(reverserNumb(ele)))
                     resultList.add(ele);
            }
        });
        return resultList;
    }

    private static boolean isPrime(int num){
        if(num<2)
            return false;
        // Check for even numbers
        if (num % 2 == 0) {
            return num == 2;
        }
      // Check for odd numbers
        for (int i = 3; i*i <= num; i += 2) {
            if (num % i == 0) {
                return false;
            }
        }

        return true;
    }
    private static int reverserNumb(int num) {
        return Integer.valueOf(new StringBuilder(String.valueOf(num)).reverse().toString());
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34080304)
 A Method for Testing Primality</h3>

 I would  start  by extracting the method for testing primality, specifically only test for even and then you can test odd numbers less than or equal to the square root of the value.  

  private static boolean isPrime(int n) {
    if (n == 1 || n == 2) {
        return true;
    } else if (n % 2 == 0) {
        return false;
    }
    for (int i = 3; i <= Math.sqrt(n); i += 2) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
  

 Only Mersenne Primes</h3>

 Since we only need the first 6 Mersenne primes we can limit the iteration of values (and  primality  testing) to the Mersenne numbers.  

  public static void printMersennePrimes() {
    int counter = 0;

    for (int i = 2; counter < 6; i++) {
        int val = (int) Math.pow(2, i) - 1;
        if (isPrime(val)) {
            System.out.printf("2^%d - 1 (%d)%n", i, val);
            counter++;
        }
    }
}
  

 Which I ran, and got the results specified in the https://en.wikipedia.org/wiki/Mersenne_prime Wikipedia page, 

 
   The first four Mersenne primes M<sub>2</sub> = 3, M<sub>3</sub> = 7, M<sub>5</sub> = 31 and M<sub>7</sub> = 127 were known in antiquity. The fifth, M<sub>13</sub> = 8191, was discovered anonymously before 1461; the next two (M<sub>17</sub> and M<sub>19</sub>) were found by Cataldi in 1588. 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10319818)
 So basically what you have to do is have a function which checks whether a number is prime or not. After that, you have to start counting from 2 and pass each number to that function. If it returns true, print it and record the fact that you found a prime. When you did this 100 times, you can stop. The following code implements exactly this: 

  public class OneHundredPrimes
{
    public static boolean isPrime(int x)
    {
        for (int i = 2; i <= Math.sqrt(x); i++) {
            if (x % i == 0) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args)
    {
        int currentNumber = 2;
        int primesFound = 0;

        while (primesFound < 100) {
            if (isPrime(currentNumber)) {
                primesFound++;

                System.out.print (currentNumber + " ");
                if (primesFound % 10 == 0) {
                    System.out.println();
                }
            }

            currentNumber++;
        }
    }
}
  

 If something is unclear, ask. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54643368)
 You need to use TreeSet - which will contain only distinct elements and  give result in sorted form. You can refer to following code- 

    Set<Integer> set = new TreeSet<>();
            for(int i = 0; i < a.length; i++) {
                boolean isPrime = true;
                if(isPrime(a[i]) && isPrime(r[i]))
                    set.add(a[i]);
            }
Iterator it = set.iterator();
        while(it.hasNext())
            System.out.print(it.next() + " ");
  

 Also create a function for checking prime numbers - 

  private static boolean isPrime(int num) {
        if(num==1) return false;
        for(int i = 2; i <= num/2; ++i)
        {
            if(num % i == 0)
            {
               return false;
            }
        }
        return true;
    }
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40709963)
 You can't use  i  again, you need to use a new variable (I used  currentPrime ).
Because  i  is your prime number itself, not the index of the prime. 

 Also you need to add change  i = 1  to  int i = 1  in the for loops otherwise the code wont compile. 

      int currentPrime = 1;

    for (int i = 1; i <= 100; i++) {

        int counter=0;

        for(int num =i; num>=1; num--)
        {
            if(i % num == 0)
            {
                counter = counter + 1;
            }
        }
        if (counter == 2)
        {
            //Display the output of 5 numbers per row.
            System.out.print(" " + i);
            currentPrime++;

            if(currentPrime % 5 == 1)
            {
                System.out.print("\n");
            }
            //Prime number is assigned to the empty string class variable.
            displayPrimes = displayPrimes + i + " ";
        }
    }
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34080275)
 You had two problems. The first was as Scary Wombat suggested with  break ing after setting  isPrime  to  true  in the for loop. 

 Your second problem is that you are not resetting  isPrime  to  true  ever. Once you find a nonprime number, your primality checking for loop never executes since  isPrime  is always  false . Put  isPrime = true;  as the first line of code of the outer  while  loop, and that should do the trick. 

 . Since you start  counter  at  0  and go to  <= 6 , you actually print 7 primes instead of 6. Put  < 6  or  <= 5  instead. 



