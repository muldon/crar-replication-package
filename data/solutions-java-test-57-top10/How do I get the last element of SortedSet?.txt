Query: How do I get the last element of SortedSet?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8360827)
 A  Collection  is not a necessarily ordered set of elements so there may not be a concept of the "last" element.  If you want something that's ordered, you can use a  SortedSet  which has a  last()  method.  Or you can use a  List  and call  mylist.get(mylist.size()-1);  

 If you  really  need the last element you should use a  List  or a  SortedSet .  But if all you have is a  Collection  and you really, really,  really  need the last element, you could use  toArray()  or you could use an  Iterator  and iterate to the end of the list.   

 For example: 

  public Object getLastElement(final Collection c) {
    final Iterator itr = c.iterator();
    Object lastElement = itr.next();
    while(itr.hasNext()) {
        lastElement = itr.next();
    }
    return lastElement;
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8772337)
 As an alternative you can set listOfSources as a SortedSet 

  SortedSet<String> listOfSources = new TreeSet<String>();
  

 Then you can use  last()  method without casting to TreeSet 

  listOfSources.remove(listOfSources.last());
  

 I think that this is a preferred approach since you suppose that your Set has an order. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21231121)
 This is not an exact answer to this question, but in case the objects should be sorted SortedSet has a first() method: 

  SortedSet<String> sortedSet = new TreeSet<String>();
sortedSet.add("2");
sortedSet.add("1");
sortedSet.add("3");
String first = sortedSet.first(); //first="1"
  

 The sorted objects must implement the Comparable interface (like String does) 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/582513)
 Throw the Set into a List and use subList(). I'm not sure how performant it is to create the List, so you'd have to run some tests. . 

      List f = new ArrayList( summaries);
    List lastTwentyFive = f.subList( summaries.size() - 25, summaries.size() );
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21382386)
 You may want to take a look at https://github.com/geniot/indexed-tree-map/blob/master/src/src/main/java/com/dictiography/collections/IndexedTreeMap.java in https://github.com/geniot/indexed-tree-map 

 Use exact(size-25) to get to the element at index without iteration. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/581716)
 SortedSet <T>  was designed assuming a very simple iteration model, forward only, thus finding the top n entries is easy but finding the last would require an expensive read through the iterator maintaining a window of the last n entries. 

 http://java.sun.com/javase/6/docs/api/java/util/NavigableSet.html adding in 1.6 solves this (and the only SortedSet implementation from 1.4 TreeSet implements it so it is likely to be a drop in replacement for you). 

  NavigableSet<T> set = new TreeSet<T>();
// add elements
set.descendingIterator() // iterate over the last n entires as needed
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/581700)
 A different data structure would be more appropriate for this operation. 

  This is not an elegant way or very efficient , but assuming the SortedSet is in ascending order you could get the Last() item and remove it, storing it in another list, and repeat 25 times. You would then have to put these elements back again! 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/581691)
 You need a  NavigableSet .  Else youâ€™ll have to do it inefficiently, iterating through the whole  SortedSet  and collecting elements into a  Queue  that you keep trimmed at 25 elements. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/582933)
 Reverse your sort and take the first 25 items. You can then reverse those which will be efficient as its only 25 items. 

 Bruce 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36169364)
 You can use the SortedSet interface as your declaration (which has the  first()  and  last()  methods). 



