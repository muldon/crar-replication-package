Query: Returns intersection of two collections
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38769092)
 Union: 

  Set<Integer> union = new HashSet<>(grp1);
union.addAll(grp2);
  

 Intersection: 

  Set<Integer> intersection = new HashSet<>(grp1);
intersection.retainAll(grp2);
  

  

  Set<Integer> diff = new HashSet<>(grp1);
diff.removeAll(grp2);
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8064719)
 If you can use http://commons.apache.org/collections/, you are looking for http://commons.apache.org/collections/apidocs/org/apache/commons/collections/CollectionUtils.html#disjunction%28java.util.Collection,%20java.util.Collection%29. It returns the symmetric difference of both Collections. 

 If not, substract ( removeAll ) the intersection ( retainAll ) of both sets to the union of both ( addAll ):  

  Set<String> intersection = new HashSet<String>(set1);
intersection.retainAll(set2);

Set<String> difference = new HashSet<String>();
difference.addAll(set1);
difference.addAll(set2);
difference.removeAll(intersection);
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38769445)
 https://github.com/google/guava has these operations in it's https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Sets.html class. 

  Set<Integer> union = Sets.union(set1, set2);
Set<Integer> intersection = Sets.intersection(set1, set2);
Set<Integer> difference = Sets.difference(set1, set2);
  

 All of these return unmodifiable views, backed by the original Sets. 

 See https://github.com/google/guava/wiki/CollectionUtilitiesExplained#sets 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3601980)
 You may just use the methods of java collections such as  addAll(Collection) ,  removeAll(Collection)  and  retainAll(Collection) . 

 For example, the intersection of two sets: 

  public Set<V> intersection(Set<? extends V> a, Set<? extends V> b) {
  // you may swap a and b, so a would contain the smaller collection
  Set<V> result = new HashSet<V>(a);
  result.retainAll(b);
  return result;
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8882139)
 Yes there is  retainAll  check out http://docs.oracle.com/javase/tutorial/collections/interfaces/set.html 

  Set<Type> intersection = new HashSet<Type>(s1);
intersection.retainAll(s2);
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15575578)
 Here is an algorithm that you could follow to accomplish the task: 

 
 Construct a union of the two arrays 
 Construct the intersection of the two arrays 
 Subtract the intersection from the union to get your result 
 

 Java collections support http://docs.oracle.com/javase/6/docs/api/java/util/Collection.html#addAll%28java.util.Collection%29, http://docs.oracle.com/javase/6/docs/api/java/util/Collection.html#removeAll%28java.util.Collection%29, and http://docs.oracle.com/javase/6/docs/api/java/util/Collection.html#retainAll%28java.util.Collection%29. Use  addAll  to construct unions,  retainAll  for constructing intersections, and  removeAll  for subtraction, http://ideone.com/ijLfd0: 

  // Make the two lists
List<Integer> list1 = Arrays.asList(1, 2, 3, 4);
List<Integer> list2 = Arrays.asList(2, 3, 4, 6, 7);
// Prepare a union
List<Integer> union = new ArrayList<Integer>(list1);
union.addAll(list2);
// Prepare an intersection
List<Integer> intersection = new ArrayList<Integer>(list1);
intersection.retainAll(list2);
// Subtract the intersection from the union
union.removeAll(intersection);
// Print the result
for (Integer n : union) {
    System.out.println(n);
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33525962)
 Intersection:  original.retainAll(selected) .  

 After that original will contain only elements present in both collections. Returns true if anything changed. 

  WARNING : This method is very slow for large collections 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13990198)
 // CollectionUtils.intersection(ownerList, bcList) returns a collection contains in both ownerList, bcList 

 CollectionUtils.union unions the listof bc into a unique list 

 private List getAuthorisedBCList(List bcList, Set> bcOwnersList) {
        List listList= new ArrayList(); 

      for(List<String> ownerList : bcOwnersList){
        listList = (List<String>) CollectionUtils.union(listList,CollectionUtils.intersection(ownerList, bcList));
    }
    return listList;
}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42882039)
 You don't show what  arr  is but since it has a  contains  method I'm going to assume it is a collection.  So if you were to put your keys into a static collection like a Set and if  arr  is a collection of some type as well, you could use  Collections.disjoint .   disjoint  returns true if there is no intersection between two collections. 

  import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class Test {
  static Set<Character> keys = new HashSet<Character>(Arrays.asList('*','/','-','+','%'));

  static class SOne {
    Set<Character> arrs = null;
    SOne(String line) {
      arrs = line.chars().mapToObj(e->(char)e).collect(Collectors.toSet());
    }
    public boolean Contains(Set<Character> checkset) {
      return !Collections.disjoint(arrs, checkset);
    }
  }

  static public void main(String args[]) {
    SOne sOne = new SOne("Does not contain");
    SOne sTwo = new SOne("Does contain a + sign");

    if(sOne.Contains(keys)) {
      System.out.println("Fail: Contains a key");
    } else {
      System.out.println("Pass: Does not contain a key");
    }

    if(sTwo.Contains(keys)) {
      System.out.println("Pass: Contains a key");
    } else {
      System.out.println("Fail: Does not contain a key");
    }
  }
}
  



