Query: Java Program to Check Even or Odd Number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45789981)
 You can use the modulus operator, but that can be slow. A more efficient way would be to check the lowest bit because that determines whether a number is even or odd. The code would look something like this: 

  public static void main(String[] args) {        
    System.out.println("Enter a number to check if it is even or odd");        
    System.out.println("Your number is " + (((new Scanner(System.in).nextInt() & 1) == 0) ? "even" : "odd"));        
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42025448)
 Check your code, you are using / instead of % in this if condition: 

   if((number%10)/2!=0)
  

  

  if((number%10)%2!=0)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49252788)
 This following program can handle large numbers ( number of digits greater than 20 ) 

  package com.isEven.java;
import java.util.Scanner;

public class isEvenValuate{

public static void main(String[] args) {            

        Scanner in = new Scanner(System.in);
        String digit = in.next();

        int y = Character.getNumericValue(digit.charAt(digit.length()-1));

        boolean isEven = (y&1)==0? true:false;

        if(isEven)
            System.out.println("Even");
        else
            System.out.println("Odd");

    }
}
  

 Here is the output :: 

    122873215981652362153862153872138721637272
  Even
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51629034)
 You need to keep generating random numbers until you get an odd one, so  int randomNum = ThreadLocalRandom.current().nextInt(1, 43 + 1)  should be inside the loop.  First, check if the number is indeed an odd one or not, and return only if this is true. With this, you can even return from outside of the loop.  

  int randomNum = 0;
do {
  randomNum = ThreadLocalRandom.current().nextInt(1, 43 + 1);
} while (randomNum % 2 == 1);

return Integer.toString(randomNum);
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33580224)
 There are a few core issues in the code based on the desired results that you described. The most glaring issue I see is that you intend for the game to essentially "start from scratch" at the beginning of each round, but you never actually reset the numEven and numOdd variables. This is the source of your print results seeming random. For example, if you started a game and input the number: 

 34567 

 The game would process the number and say that it is a favorable number because it is odd, has an odd number of odd digits (3), and has an even number of even digits (2). However, upon playing the game again, it would execute the same code  without setting the variables back to 0 , which means that upon entering: 

 34567 

 The game would process this number as a bad number because the accumulated value of odd digits would be 6 instead of 3 (since 3 the first time + 3 the second time results in 6), and 6 is even. So what we want to do is this: 

  ...

int n;

do
{
    int numEven = 0;
    int numOdd = 0;

    System.out.print("Enter a number: ");
    n = scan.nextInt();

...
  

 By placing the numEven and numOdd declarations inside of the "do" block,  they are local variables  which only exist for the duration of the do block. We could also do something as simple as this: 

  ...

    else
    {
        System.out.println("Wallace didn't like your number.");
    }
    numEven = 0;
    numOdd = 0;
}
while (n > 0);

...
  

 Just resetting the values will help us to keep track of the actual intended values of numOdd and numEven more consistently. 

 With regard to the program closing when you input a single digit number, I'm not sure. That doesn't make sense because since it is a do-while loop it should at  least  execute once, and issue one of the print statements. I'm loading this code into my IDE right now to give it a run through. I'll update my answer if I find something. 

 -EDIT-: Upon reading your question again, it seems that you may not be suggesting that the program closes  before  actually completing any of its functions, but simply that it closes at all. The reason for the closing of the program is that you are performing an integer division arithmetic function where you probably want to be using a different type of number. Let me explain: 

 In normal human counting, we have our natural set of numbers which have no decimal points. They usually start like this: 

 1, 2, 3, 4, 5 ... 

 Then we have a separate set of numbers for math where we operate with more precision: 

 0.5, 1.4232, 3.142 ... 

 When we are talking about numbers with normal human language, we assume that dividing 1 by 2 results in 0.5. However, computers do not implicitly know this. In order for a computer to reach the conclusion "0.5" from the division of 1 by 2, you need to explicitly tell it that it should use a certain type of number to produce that output. 

 The "normal" numbers I referenced earlier are most loosely related to the  integer  in programming. It's basically a number without a decimal point. What that means is that whenever you divide two integers together, you  always get another integer as the result . So if you were to divide 1 by 2, the computer would not interpret the result as 0.5 because that number has a decimal. Instead, it would round it down to the nearest integer, which in this case is 0. 

 So for a more specific example referencing the actual question at hand, let's say we input the number 5 into our program. It goes through all of the calculations for odds and evens, but eventually gets to this line: 

  n /= 10
  

 This is where things get funky. We are dividing two integers, but their result does not come out as a perfect integer. In this case, the result of 5 / 10 is again 0.5.  But for the computer , since we are dividing two integers, the result 0.5 just won't do, so after rounding down to the nearest integer we get 0. At this point, there is one fatal mistake: 

  (while n > 0);
  

 When we perform this check, we get  false  and the while loop ends.  Because after performing n /= 10, n becomes 0. And 0 is  not  greater than 0. 

  The best thing to do is probably just use a floating point number to perform the calculations. In Java, this is pretty easy. All we really have to do is: 

  n /= 10.0
  

 When Java sees that we are dividing by 10.0, which is not an integer, it automatically converts "n" to a floating point number to divide by 10.0. In this case then, if n is 5, our result in dividing 5 by 10.0 will be 0.5.  

  (while n > 0);
  

 This becomes true! And the loop does not break. 

 I am going to put all of these changes into my IDE just to confirm that everything is working as intended for me. I would suggest you give it a try too to see if it fixes your problems. 

 Hope this helps. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14923514)
 You can use a fact that every odd number have  1  at the end of its binary representation so it looks like  ???????1  where  ?  can be either 0 or 1. Here is how you can check it with binary AND ->  &   

  public static boolean isEven(int num) {
    return (num & 1) == 0;
}
  

 It works like this: 

 for odd numbers  

            ????????1 -> any odd number
          000000001 -> one
AND       ---------
result    000000001 -> one
  

 for even numbers 

            ????????0 -> any even number
          000000001 -> one
AND       ---------
result    000000000 -> zero
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29592885)
 A little modification to your program will yield the desired result.  

  public static void main(String[] args) {

    //Odd Numbers
    int[] randomNumbers = new int[25];
    int[] evenNumbers = new int[25];
    int[] oddNumbers = new int[25];
    int k = 0, l = 0;
    for (int index = 0; index < randomNumbers.length; index++) {
        randomNumbers[index] = (int) (Math.random() * 99);
    }
    for (int i = 0; i < 25; i++) {
        if (randomNumbers[i] % 2 == 0) {
            evenNumbers[k] = randomNumbers[i];
            k++;
        } else {
            oddNumbers[l] = randomNumbers[i];
            l++;
        }
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35811752)
 You have to check for each digit at a time:   

  int odd, even, zero, value;
value = scan.nextInt();

while(value > 0) {
    int digit = value%10; //isolates only the last digit
    if(digit==0)zero++;
    else if(digit%2==0)even++;
    else odd++;
    value /= 10; //removes the last digit
}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37503941)
 
   although it does not run 
 

 Yes it does. It's just that the execution can get stuck in the infinite loops in the  OddNumbers  and  EvenNumbers  methods.
 

 
  while ( currentNumber <= 99 ) {
    if ( storage[currentNumber] % 2 != 0 ) {
        oddArray[currentNumber] = currentValue;
    }
    else {
        continue;
    }
  
 

 The problem is that when  storage[currentNumber]  is even,
the program executes the  else  branch with the  continue  statement,
and since  currentNumber  hasn't changed, and so  storage[currentNumber]  hasn't changed either, it's still even, and the  else  branch will be executed again, and again, and again, forever.  EvenNumber  has the same problem too. 

 Here's a fix for  OddNumbers : 

  public static int[] OddNumbers(int[] storage) {
    int[] oddArray = new int[storage.length];

    int oddIndex = 0;
    for (int num : storage) {
        if (num % 2 != 0) {
            oddArray[oddIndex++] = num;
        }
    }

    return Arrays.copyOf(oddArray, oddIndex);
}
  

 An extra touch I did in this method is the  Arrays.copyOf  call,
chopping off the excess elements of the array that would be otherwise 0. 

 Then when you print the content of this array in  main , write like this: 

  System.out.println("The odd numbers are: " + "\n");

for (int num : oddArray) {
    System.out.println(num);
}
  

 Follow the same pattern to fix  EvenNumbers . 

 As @Mureinik pointed out,
the loop in  main  populating  storage  is also broken.
And you have several other coding issues,
for example the random number generation is particularly ugly and using an obsolete technique. 

  

  import java.util.Arrays;
import java.util.Random;

public class Assignment8 {
    public static void main(String[] args) {
        Random random = new Random();

        int[] storage = new int[100];    
        for (int i = 0; i < storage.length; i++) {
            storage[i] = random.nextInt(25);
        }

        System.out.println("The odd numbers are: " + "\n");

        int oddArray[] = OddNumbers(storage);
        for (int num : oddArray) {
            System.out.println(num);
        }

        System.out.println("\n" + "The even numbers are: " + "\n");

        int evenArray[] = EvenNumbers(storage);
        for (int num : evenArray) {
            System.out.println(num);
        }
    }

    public static int[] OddNumbers(int[] storage) {
        int index = 0;
        int[] result = new int[storage.length];

        for (int num : storage) {
            if (num % 2 != 0) {
                result[index++] = num;
            }
        }

        return Arrays.copyOf(result, index);
    }

    public static int[] EvenNumbers(int storage[]) {
        int index = 0;
        int[] result = new int[storage.length];

        for (int num : storage) {
            if (num % 2 == 0) {
                result[index++] = num;
            }
        }

        return Arrays.copyOf(result, index);
    }
}
  



