Query: Append string to a text file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19084474)
 In  EDIT 2:  

  while((line = bufferedReader.readLine()) != null)
{
  sb.append(line); //append the lines to the string
  sb.append('\n'); //append new line
} //end while
  

 you are reading the text file, and appending a newline to it.   Don't append newline, which will not show a newline in some simple-minded Windows editors like Notepad.  Instead append the OS-specific line separator string using: 

  sb.append(System.lineSeparator());   ( for Java 1.7 and 1.8 ) 
 or  
 sb.append(System.getProperty("line.separator"));  ( Java 1.6 and below ) 

 Alternatively, later you can use  String.replaceAll()  to replace  "\n"  in the string built in the StringBuffer with the OS-specific newline character: 

  String updatedText = text.replaceAll("\n", System.lineSeparator())  

 but it would be more efficient to append it while you are building the string, than append  '\n'  and replace it later. 

 Finally, as a developer, if you are using notepad for viewing or editing files, you should drop it, as there are far more capable tools like http://notepad-plus-plus.org/, or your favorite Java IDE. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30480913)
 Try with bufferFileWriter.append, it works with me. 

  FileWriter fileWriter;
try {
    fileWriter = new FileWriter(file,true);
    BufferedWriter bufferFileWriter = new BufferedWriter(fileWriter);
    bufferFileWriter.append(obj.toJSONString());
    bufferFileWriter.newLine();
    bufferFileWriter.close();
} catch (IOException ex) {
    Logger.getLogger(JsonTest.class.getName()).log(Level.SEVERE, null, ex);
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22609585)
 
    
 

  import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
  

 
   Code 
 

  public void append()
{
    try
    {
        String path = "D:/sample.txt";

        File file = new File(path);

        FileWriter fileWriter = new FileWriter(file,true);

        BufferedWriter bufferFileWriter  = new BufferedWriter(fileWriter);

        fileWriter.append("Sample text in the file to append");

        bufferFileWriter.close();

        System.out.println("User Registration Completed");

    }catch(Exception ex)
    {
        System.out.println(ex);
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43568889)
 You append Strings  a  StringBuilder  instance and then do nothing with it. And nothing you do in your code can change the content of the empty  String  created by  String  textData=new String();  anyway, since  String  is an immutable class. 

  

  new StringBuilder().append(textData).append(text).String();
  

  

  textData = new StringBuilder().append(textData).append(text).String();
  

 BTW, it might make more sense  cancel the  textData  variable, and have a  StringBuilder  variable instead. This way you won't have  create a new  StringBuilder  in each iteration of your loop. And At any time you can obtain the  String  representation of the current content of the  StringBuilder . 

  StringBuilder sb=new StringBuilder();

while (scanFile.hasNext()) {
    String text = scanFile.next();
    System.out.println(text);
    sb.append(text);
    System.out.println(sb);
}

System.out.println(sb);
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7159076)
 You can do that way: 

  final URL myUrl= new URL("http://www.example.com/file.xml");
final InputStream in= myUrl.openStream();

final StringBuilder out = new StringBuilder();
final byte[] buffer = new byte[BUFFER_SIZE_WHY_NOT_1024];

try {
   for (int ctr; (ctr = in.read(buffer)) != -1;) {
       out.append(new String(buffer, 0, ctr));
   }
} catch (IOException e) {
   // you may want to handle the Exception. Here this is just an example:
   throw new RuntimeException("Cannot convert stream to string", e);
}

final String yourFileAsAString = out.toString();
  

 Then the content of your file is stored in the  String  called  yourFileAsAString .  

 You can insert it in your  JTextArea  using http://download.oracle.com/javase/1.4.2/docs/api/javax/swing/JTextArea.html#insert%28java.lang.String,%20int%29 or append it using  JTextArea.append(yourFileAsAString) . 
In this last case, you can directly append the readed text to the  JTextArea  instead of using a  StringBuilder . To do so, just remove the  StringBuilder  from the code above and modify the  for()  loop the following way: 

  for (int ctr; (ctr = in.read(buffer)) != -1;) {
    youJTextArea.append(new String(buffer, 0, ctr));
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14198380)
      String str;
    String path = "C:/Users/...the path..../iin.txt"; // you can input also..i created this way :P

    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter pw = new PrintWriter(new FileWriter(path, true));

    try 
    {
       while(true)
        {
            System.out.println("Enter the text : ");
            str = br.readLine();
            if(str.equalsIgnoreCase("exit"))
                break;
            else
                pw.println(str);
        }
    } 
    catch (Exception e) 
    {
        //oh noes!
    }
    finally
    {
        pw.close();         
    }
  

 this will do what you intend for.. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21179957)
 Split the string in to string array and write using above method (I assume your text contains \n to get new line) 

  String[] test = test.split("\n");
  

   

  bufferedWriter.write(test[i]);
bufferedWriter.newline();
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1625266)
 You can use  fileWriter  with a flag set to  true  , for appending. 

  try
{
    String filename= "MyFile.txt";
    FileWriter fw = new FileWriter(filename,true); //the true will append the new data
    fw.write("add a line\n");//appends the string to the file
    fw.close();
}
catch(IOException ioe)
{
    System.err.println("IOException: " + ioe.getMessage());
}
  



