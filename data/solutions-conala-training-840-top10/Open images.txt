Query: Open images
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45284244)
 You can use glob to read the images one by one 

  import glob
from PIL import Image


images=glob.glob("*.jpg")
for image in images:
    img = Image.open(image)
    img1 = img.resize(50,50)
    img1.save("newfolder\\"+image)    
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13866041)
 To read an image file from a resource, open it with a QFile and pass the raw data to a file-like object that can be used by PIL: 

  from PyQt4.QtCore import QFile
from cStringIO import StringIO
from PIL import Image, ImageWin
import res_rc

stream = QFile(':/images/image.png')
if stream.open(QFile.ReadOnly):
    data = stream.readAll()
    stream.close()
    image = Image.open(StringIO(data))
    dim = ImageWin.Dib(image)
  

 Note that resources are designed to be  compiled into  the application, and so they are strictly read-only. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47978493)
 You need to do  from PIL import Image , then you could do  Image.open(path + "/" + f).show() .  

  import os, os.path
from PIL import Image

imgs = []

path = "path/to/directory" 

valid_images = [".jpg", ".gif", ".png", ".tga"]
print(valid_images)

for f in os.listdir(path):   
    ext = os.path.splitext(f)[1]
    if ext in valid_images:
        imgs.append(path + "/" + f)
    img = Image.open(path + "/" + f)
    img.show()

print(imgs)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19575539)
 . Here's a quick rev that'll do that. 

  from multiprocessing import Pool
import os

path1 = "some/path"
path2 = "some/other/path"

listing = os.listdir(path1)    

p = Pool(5) # process 5 images simultaneously

def process_fpath(path):
    im = Image.open(path1 + path)    
    im.resize((50,50))                # need to do some more processing here             
    im.save(os.path.join(path2,path), "JPEG")

p.map(process_fpath, listing)
  

 (edit: use http://docs.python.org/2/library/multiprocessing.html instead of  Thread , see that doc for more examples and information) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19346966)
 If you want to process each image individually (assuming you're using PIL or Pillow) then do so sequentially: 

  import os
from glob import glob

try:
    # PIL
    import Image
except ImportError:
    # Pillow
    from PIL import Image

def process_image(img_path):
    print "Processing image: %s" % img_path
    # Open the image
    img = Image.open(img_path)

    # Do your processing here
    print img.info

    # Not strictly necessary, but let's be explicit:
    # Close the image
    del img

images_dir = "/home/user/images"

if __name__ == "__main__":
    # List all JPEG files in your directory
    images_list = glob(os.path.join(images_dir, "*.jpg"))

    for img_filename in images_list:
        img_path = os.path.join(images_dir, img_filename)
        process_image(img_path)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10077910)
 Your import appears to be the problem. Use this instead of "import Image": 

  from PIL import Image
  

  

  image = Image.open('/example/path/to/image/file.jpg/')
image.thumbnail((80, 80), Image.ANTIALIAS)
image.save('/some/path/thumb.jpg', 'JPEG', quality=88)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44112050)
 Your command... 

  mnist = input_data.read_data_sets('C:\\Users\\uidj8441\\Documents\\PYTHON\\0_projects\\open MNIST data\\open_mnist_data\\open_mnist_data\\',one_hot=True)
  

 ... download the  MNIST  datasets from Google servers, put the compressed files into your folder  C:\\Users\\uidj8441\\Documents\\PYTHON\\0_projects\\open MNIST data\\open_mnist_data\\open_mnist_data\\  and encode the targets as  one_hot . 

 Now, you can access the 3 datasets, namely  train ,  test ,  validation . 

 E.g. at train stage, your command will start with  mnist.train.{something} , versus  mnist.{something}  that you are doing in your code above. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24325889)
  with open(images/pic{}.jpg','wb') as f: 
 should be  with open('images/pic_%s.jpg'%i,'wb')  

 You should write each file for different src, you can use a set to make the  src  list unique, then write each request result to file named from 1 to N 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53570674)
 (Using only matplotlib, gzip and numpy)
 Extract image data: 

  import gzip
f = gzip.open('train-images-idx3-ubyte.gz','r')

image_size = 28
num_images = 5

import numpy as np
f.read(16)
buf = f.read(image_size * image_size * num_images)
data = np.frombuffer(buf, dtype=np.uint8).astype(np.float32)
data = data.reshape(num_images, image_size, image_size, 1)
  

 Print images: 

  import matplotlib.pyplot as plt
image = np.asarray(data[2]).squeeze()
plt.imshow(image)
  

 https://i.stack.imgur.com/kyyPx.png 

 Print first 100 labels: 

  f = gzip.open('train-labels-idx1-ubyte.gz','r')
for i in range(0,100):
    f.read(8)
    buf = f.read(1 * 32)
    labels = np.frombuffer(buf, dtype=np.uint8).astype(np.int64)
    print(labels)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45058787)
 .DS_Store is a file created by the mac filesystem (when you open a directory with finder) when you walk the directory you should ignore it  

  try:
 im = Image.open(os.path.join(path_to_images, f))
except:
 print 'fail to read', path_to_images
  

 
 you can add a try and except block as in the above example 
 or  if f !.DS_Store'  
 split to check if the file extension is an image  name, ext image.jpg'.split(".")   if ext in ['jpg', 'png' ... ]  
 



