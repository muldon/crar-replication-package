Query: Python: How do I format a date in Jinja2?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51775164)
 Now you can use it like this in template without any filters 

  {{ car.date_of_manufacture.strftime('%Y-%m-%d') }}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17382079)
 Here's the filter that I ended up using for strftime in Jinja2 and Flask 

  @app.template_filter('strftime')
def _jinja2_filter_datetime(date, fmt=None):
    date = dateutil.parser.parse(date)
    native = date.replace(tzinfo=None)
    format='%b %d, %Y'
    return native.strftime(format) 
  

 And then you use the filter like so: 

  {{car.date_of_manufacture|strftime}}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4830613)
 I think you have to write your own filter for that. It's actually the example for custom filters in the documentation: http://jinja.pocoo.org/docs/api/#custom-filters 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18667904)
 Google App Engine users : If you're moving from Django to Jinja2, and looking to replace the date filter, note that the % formatting codes are different. 

 The strftime % codes are here: http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23644242)
 For Bootstrap Datepicker, the correct date format attribute is  data-date-format  as mentioned in the http://bootstrap-datepicker.readthedocs.org/en/release/options.html. Updated code for the datepicker – 

  <input data-provide="datepicker" data-date-format="mm/dd/yyyy" id="deadline"  type="text" value="{{ form.deadline.data }}" name="deadline" required></input>
  

 Above correction should solve your issue. But since you asked, you can also set the desired date format in the view – 

  form.deadline.data = ptask.deadline.strftime("%m/%d/%Y")
  

 You can insert this line at the last (or second last) line of your view code after you have populated the rest of the fields in the form. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4830620)
 There are two ways to do it. The direct approach would be to simply call (and print) the strftime() method in your template, for example 

  {{ car.date_of_manufacture.strftime('%Y-%m-%d') }}
  

 Another, sightly better approach would be to define your own filter, e.g.: 

  from flask import Flask
import babel

app = Flask(__name__)

def format_datetime(value, format='medium'):
    if format == 'full':
        format="EEEE, d. MMMM y 'at' HH:mm"
    elif format == 'medium':
        format="EE dd.MM.y HH:mm"
    return babel.dates.format_datetime(value, format)

app.jinja_env.filters['datetime'] = format_datetime
  

 (This filter is based on babel for reasons regarding i18n, but you can use strftime too). The advantage of the filter is, that you can write 

  {{ car.date_of_manufacture|datetime }}
{{ car.date_of_manufacture|datetime('full') }}
  

 which looks nicer and is more maintainable. Another common filter is also the "timedelta" filter, which evaluates to something like "written 8 minutes ago". You can use  babel.dates.format_timedelta  for that, and register it as filter similar to the datetime example given here. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20317900)
 Why not just use pythons built-in date data type? 

  from datetime import date

# list your dates    
l = [date(2013, 12, 1), date(2013, 8, 28), ]
l.sort()

template = env.get_template('mytemplate.html')
print template.render(dates=l)
  

  

  {% for year_group in dates|groupby('year') %}
{% for by_year in year_group.list %}
<li class="year">
    #
     
    {% for month_group in by_year|groupby('month') %}
    {% for by_month in month_group.list %}
    <li class="month">
        #
         
        {% for day_group in by_month|groupby('day') %}
        {% for by_day in day_group.list %}
              <li class="day">by_day.day 
        {% endfor %}
        {% endfor %}
         
     
    {% endfor %}
    {% endfor %}
     
 
{% endfor %}
{% endfor %}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30326890)
 Here is a working example for Django+jinja2: 

  from jinja2 import PackageLoader, Environment 
from django.utils import translation
  

 ... 

  jinja_environment = Environment(loader=PackageLoader('website', 'templates'),
                                extensions=['jinja2.ext.i18n'])

jinja_environment.install_gettext_translations(translation)

template = jinja_environment.get_template('test.jinja.html')

page_next_app_table = template.render()
  

 ...  

 In test.jinja.html: 

  <html>
<b> {{ _( "Traslate This" ) }}:</b>
</html>
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4829057)
 Within the template, no, you cannot import python code. 

 The way to do this is to register the function as a jinja2 http://jinja.pocoo.org/docs/api/#custom-filters, like this: 

 In your python file: 

  from dates.format import timesince

environment = jinja2.Environment(whatever)
environment.filters['timesince'] = timesince
# render template here
  

  

  {% macro time(mytime) %}
<a title="{{ mytime }}">{{ mytime|timesince }} 
{% endmacro %}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/17856433)
 from jinja2 import Template 

  template = Template(
            "{{ name }} ;"
            "{{ ' 'if age }}{{age if age }}{{' 'if age}};"
            "{{ ' ' if email}};{{ email if email}}{{ ' ' if email}};")

for item in mylist:
    people_tag =template.render(
                    name= item['name'],
                    age = item.get('age'),
                    email= item.get('email'))
  

 o/p  

 abc ; 25 ; abc@gmail.com; 

 xyz;;; 



