Query: How to sort a Pandas DataFrame according to multiple criteria?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19248579)
 If you sort df by column 'a' first then you don't need to sort the 'bins' column 

  import pandas as pd
import numpy as np
df = pd.DataFrame({"a": np.random.randn(10)})
# for versions older than 0.17.0
df.sort(by=['a'],inplace=True)
# if running a newer version 0.17.0 or newer then you need
df.sort_values(by=['a'],inplace=True)
# bin according to cut
df["bins"] = pd.cut(df.a, np.linspace(-2,2,6))
df

Out[37]:
          a          bins
6 -1.273335    (-2, -1.2]
7 -0.604780  (-1.2, -0.4]
1 -0.467994  (-1.2, -0.4]
8  0.028114   (-0.4, 0.4]
9  0.032250   (-0.4, 0.4]
3  0.138368   (-0.4, 0.4]
0  0.541577    (0.4, 1.2]
5  0.838290    (0.4, 1.2]
2  1.171387    (0.4, 1.2]
4  1.770752      (1.2, 2]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36319313)
 Since pandas .17, the new way to sort is to use sort_values. The preferred solutions becomes: 

  import pandas as pd
import numpy as np
df = pd.DataFrame({"a": np.random.randn(10)})
df.sort_values('a',inplace=True)
# bin according to cut
df["bins"] = pd.cut(df.a, np.linspace(-2,2,6))
df
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35768306)
 Since pandas 0.17.0, http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort.html is deprecated and replaced by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html: 

  df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13636662)
 By using http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort.html 

  df.sort(['Peak', 'Weeks'], ascending=[True, False])
  

 Will sort into ascending order of peak position, then within that descending order of length in charts. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13866073)
 On pandas 0.9.1 and higher this should work (this is with 0.10.0b1): 

 ( Edit:  As of Pandas 0.19, method  sort_index  is deprecated. Prefer http://pandas.pydata.org/pandas-docs/version/0.19.1/generated/pandas.DataFrame.sort_values.html?highlight=sort_values#pandas.DataFrame.sort_values) 

  In [23]: songs.sort_index(by=['Peak', 'Weeks'], ascending=[True, False])
Out[23]: 
                                      Song  Peak  Weeks
10                           She Loves You     1     36
118                               Hey Jude     1     27
20                I Want To Hold Your Hand     1     24
22                       Can't Buy Me Love     1     17
56                                   Help!     1     17
76                        Paperback Writer     1     16
109                   All You Need Is Love     1     16
45                             I Feel Fine     1     15
29                      A Hard Day's Night     1     14
48                          Ticket To Ride     1     14
85                           Eleanor Rigby     1     14
87                        Yellow Submarine     1     14
173            The Ballad Of John And Yoko     1     13
60                             Day Tripper     1     12
61                      We Can Work It Out     1     12
117                           Lady Madonna     1      9
8                           From Me To You     1      7
115                          Hello Goodbye     1      7
155                               Get Back     1      6
2                         Please Please Me     2     20
107                   Magical Mystery Tour     2     16
176                              Let It Be     2     14
93                              Penny Lane     2     13
92               Strawberry Fields Forever     2     12
0                               Love Me Do     4     26
166                          Come Together     4     10
157                              Something     4      9
58                               Yesterday     8     21
135                   Back In The U.S.S.R.    19      3
164                     Here Comes The Sun    58     19
96   Sgt. Pepper's Lonely Hearts Club Band    63     12
105     With A Little Help From My Friends    63      7
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19473752)
  df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)
  

 If you want the sorted result for future use,  inplace=True  is required. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40262748)
 I think you need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html: 

  all_data = all_data.sort_index()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52608886)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reindex.html: 

  L = ['Z','B','class','A']
df = df.reindex(columns=L)
  

  

  df = df[L]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/49980577)
 I believe need https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html for positions by sorted array and then get values by indices in arr and assign back: 

  arr = df[['A.1', 'B.1']].values.argsort()
print (arr)
[[1 0]
 [0 1]]

df[['A.1', 'B.1']] = df[['A.1', 'B.1']].values[np.arange(len(arr))[:,None], arr]
df[['A.2', 'B.2']] = df[['A.2', 'B.2']].values[np.arange(len(arr))[:,None], arr]
print (df)
   ii A.1  A.2 B.1  B.2
0   1  Ly  bar  Xy  foo
1   2  Ab  bar  Ko  foo
  

  

  print (df)
   ii A.1  A.2 B.1  B.2
0   1  Ly  bar  Xy  mat
1   2  Ab  zul  Ko  foo
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/42463021)
 You just have to ensure you denote the format specification properly, and you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html to convert them to  actual  datetimes before http://pandas.pydata.org/pandas-docs/version/0.18.1/generated/pandas.Series.sort_values.html#pandas.Series.sort_values.  

  pd.to_datetime(stamps, format="%Y%m%d:%H:%M:%S.%f").sort_values()
  

 This is much more direct than decomposing the timestamps in components and performing a multiple-criteria sort as you were attempting. 

    

  >>> stamps
0    20140804:10:00:13.281486
1    20140804:10:00:13.400113
2    20140804:10:00:13.555512
3    20140804:10:00:13.435677
dtype: object

>>> pd.to_datetime(stamps, format="%Y%m%d:%H:%M:%S.%f").sort_values()
0   2014-08-04 10:00:13.281486
1   2014-08-04 10:00:13.400113
3   2014-08-04 10:00:13.435677
2   2014-08-04 10:00:13.555512
dtype: datetime64[ns]
  



