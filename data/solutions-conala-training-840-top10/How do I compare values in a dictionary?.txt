Query: How do I compare values in a dictionary?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52896309)
 You can get the intersection of your list and the values of  dict1  using sets: 

  for key in dict1.keys():
    count = len(set(dict1[key]) & set(list1))
    print("{0}: {1}".format(key,count))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1911765)
 You can use sets for this too 

  >>> a = {'x': 1, 'y': 2}
>>> b = {'y': 2, 'x': 1}
>>> set(a.iteritems())-set(b.iteritems())
set([])
>>> a['y']=3
>>> set(a.iteritems())-set(b.iteritems())
set([('y', 3)])
>>> set(b.iteritems())-set(a.iteritems())
set([('y', 2)])
>>> set(b.iteritems())^set(a.iteritems())
set([('y', 3), ('y', 2)])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52459066)
 You can use the  &  operator with to find the matching keys      

  for i in d1.keys() & d2.keys():
    print("'{}', '{}'".format(d1[i], d2[i]))
  

 
  ~/python/stack/sept/twenty_2$ python3.7 alice.py
'fariborz', 'daei'
'jadi', 'jafar
  
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52896281)
 You can use the following dict comprehension: 

  {k: sum(1 for i in l if i in list1) for k, l in dict1.items()}
  

 Given your sample input, this returns: 

  {'first': 2, 'second': 1}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52896362)
 I would make a  set  out of  list1  for the O(1) lookup time and access to the  intersection  method. Then employ a dict comprehension. 

  >>> dict1={'first':['hi','nice'], 'second':['night','moon']}
>>> list1= [ 'nice','moon','hi']
>>> 
>>> set1 = set(list1)
>>> {k:len(set1.intersection(v)) for k, v in dict1.items()}
{'first': 2, 'second': 1}
  

  intersection  accepts any iterable argument, so creating sets from the values of  dict1  is not necessary. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42711200)
 You can do this simply with a dictionary comprehension. 

  dict1 = {
    'a': ['a1', 'a2'],
    'b': ['b1', 'b2'],
    'c': ['c1', 'c2']
}
dict2 = {
    'a': ['a1', 'a3'],
    'b': ['b1', 'b2', 'b3', 'b4'],
    'd': ['d1', 'd2']
}

d = { key : [element for element in elements if element not in dict1.get(key, [])] 
    for key, elements in dict2.items()
}
print(d)
  

 However, I suspect you made a mistake in the question. 

 
   show only items that in  dict2  but not in  dict1  
 

 That would look like this: 

  {
    'a': ['a3'],
    'b': ['b3', 'b4'],
    'd': ['d1', 'd2']
}
  

 Which is not the example output you provided. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52458795)
 You can iterate over the intersection of the keys of the two dicts, and print the corresponding values of the two dicts after mapping them to the  repr  function, which would help quote the strings: 

  for k in dict_one.keys() & dict_two.keys():
    print(','.join(map(repr, (dict_one[k], dict_two[k]))))
  

 This outputs: 

  'fariborz','daei'
'jadi','jafar'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53004286)
 This will compare each value in the dictionary and if it's match in the list. 

  Simplistic answer..  

  >>> l
[1, 2, 3, 4]

>>> d
{2: 'a', 4: 'b'}

>>> [value for (key,value) in d.items() if key in l] 
['a', 'b']
  



