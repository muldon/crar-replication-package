Query: Converting NumPy array into Python List structure?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26926062)
 I suppose, you mean converting a list into a numpy array?
 

  import numpy as np

# b is some list, then ...    
a = np.array(b).reshape(lengthDim0, lengthDim1);
  

 gives you a as an array of list b in the shape given in reshape. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39682665)
 The numpy .tolist method produces nested arrays if the numpy array shape is 2D. 

 if flat lists are desired, the method below works. 

  import numpy as np
from itertools import chain

a = [1,2,3,4,5,6,7,8,9]
print type(a), len(a), a
npa = np.asarray(a)
print type(npa), npa.shape, "\n", npa
npa = npa.reshape((3, 3))
print type(npa), npa.shape, "\n", npa
a = list(chain.from_iterable(npa))
print type(a), len(a), a`
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50051946)
  tolist()  works fine even if encountered a nested array, say a pandas  DataFrame ; 

  my_list = [0,1,2,3,4,5,4,3,2,1,0]
my_dt = pd.DataFrame(my_list)
new_list = [i[0] for i in my_dt.values.tolist()]

print(type(my_list),type(my_dt),type(new_list))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1966210)
 Use http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tolist.html: 

  import numpy as np
>>> np.array([[1,2,3],[4,5,6]]).tolist()
[[1, 2, 3], [4, 5, 6]]
  

 Note that this converts the values from whatever numpy type they may have (e.g. np.int32 or np.float32) to the "nearest compatible Python type" (in a list). If you want to preserve the numpy data types, you could call list() on your array instead, and you'll end up with a list of https://docs.scipy.org/doc/numpy-1.10.0/reference/arrays.scalars.html. (Thanks to Mr_and_Mrs_D for pointing that out in a comment.) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32636961)
 If  array1  looks something like - 

  array1 = np.array([np.array([729, 733]), np.array([124, 122]) ...])
  

 Though given your code (and usage of  array1.append()  , it looks like  array1  is a list) . You can first convert the  array1  list into  numpy.array  as - 

  narray1 = np.array(array1)           #This step not necessary , if array1 is already numpy array , in that case use `array1` instead of `narray1` .
  

 Then if there are only two values per elements, you can do - 

  final_list = zip(company,state,narray1[:,0], narray1[:,1])
  

 

  

  In [59]: array1 = [np.array([729, 733]), np.array([124, 122])]

In [60]: company = ['OT', 'OT']

In [61]: state = ['Alabama', 'Alabama']

In [62]: narray1 = np.array(array1)

In [63]: final_list = zip(company,state,narray1[:,0], narray1[:,1])

In [65]: final_list
Out[65]: [('OT', 'Alabama', 729, 733), ('OT', 'Alabama', 124, 122)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32637788)
 It looks like you are trying to create a structured array, or its list equivalent (a list of tuples) 

 For convenience, lets just creat a list of tuples with your data.  I won't get into the details of how this can be created from the other pieces (for now): 

  In [19]: data = [('OT', 'Alabama', 729, 733),
('OT', 'Alabama', 124, 122),
('OT', 'Arizona', 122, 124)]
  

 Define a compound  dtype  (one of several possible formats): 

  In [23]: dt = np.dtype('S2,S10,i,i')
  

 and the structured array: 

  In [24]: A=np.array(data,dtype=dt)

In [25]: A
Out[25]: 
array([('OT', 'Alabama', 729, 733), ('OT', 'Alabama', 124, 122),
       ('OT', 'Arizona', 122, 124)], 
      dtype=[('f0', 'S2'), ('f1', 'S10'), ('f2', '<i4'), ('f3', '<i4')])
  

 which can be accessed by field name: 

  In [26]: A['f1']
Out[26]: 
array(['Alabama', 'Alabama', 'Arizona'], 
      dtype='|S10')

In [27]: A['f2']
Out[27]: array([729, 124, 122])
  

 convert back to a list of tuples: 

  In [28]: A.tolist()
Out[28]: 
[('OT', 'Alabama', 729, 733),
 ('OT', 'Alabama', 124, 122),
 ('OT', 'Arizona', 122, 124)]
  

 You can also create an empty (or zero) array of the right size and dtype, and fill it, row by row, or field by field 

  A1 = np.zeros((3,),dtype=dt)
A1['f0']=['OT','OT','OT']
A1['f2']=np.array([729,124,122])
etc
  

 if the numbers are in a (3,2) integer array, you could use: 

  A1['f2']=x[:,0]
A1['f3']=x[:,1]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40267599)
  .astype(np.object_)  is most likely the thing you need. Consider this matlab code: 

  x = [1 2 3 4]
y = num2cell(x)
y(end) = 'hello'
  

 In numpy, that translates to: 

  x = np.array([1, 2, 3, 4])
y = x.astype(np.object_)
y[-1] = 'hello'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24799752)
 I had the same problem with a deeply nested structure of different rpy2 vector types. I couldn't find a direct answer anywhere on stackoverflow, so here's my solution.
Using CT Zhu's answer, I came up with the following code to convert the complete structure to python types recursively. 

<pre class="lang-python prettyprint-override"> from rpy2.robjects.vectors import DataFrame, FloatVector, IntVector, StrVector, ListVector
import numpy
from collections import OrderedDict

def recurList(data):
    rDictTypes = [ DataFrame,ListVector]
    rArrayTypes = [FloatVector,IntVector]
    rListTypes=[StrVector]
    if type(data) in rDictTypes:
        return OrderedDict(zip(data.names, [recurList(elt) for elt in data]))
    elif type(data) in rListTypes:
        return [recurList(elt) for elt in data]
    elif type(data) in rArrayTypes:
        return numpy.array(data)
    else:
        if hasattr(data, "rclass"): # An unsupported r class
            raise KeyError('Could not proceed, type {} is not defined'.format(type(data)))
        else:
            return data # We reached the end of recursion
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40268293)
 In the good old days (around v. 3.0) MATLAB had only one data structure, a matrix.  It could contain numbers or characters, and was always 2d. 

 Cells were added to contain more general objects, including matrices and strings.  They were still 2d. 

 Python had lists, which are 1d, but can contain anything.   numpy  is built on Python, adding the multidimensional arrays.  But lists are still available. 

 So potentially anything that converts an array to a list is an equivalent to  num2cell  - not exact, but with overlapping functionality. 

  In [246]: A=np.arange(24).reshape(2,3,4)   # 3d array
  

 Wrapping in a list, gives us a list of 2 arrays (2d): 

  In [247]: B=list(A)
In [248]: B
Out[248]: 
[array([[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]]), 
 array([[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]])]
  

  tolist  method performs complete conversion to lists (nested). 

  In [249]: C=A.tolist()
In [250]: C
Out[250]: 
[[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
 [[12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]]
  

  list(A)  is not common, and may be used in error when  tolist  is meant. 

  np.split(A,...)  is similar to  B , but the subarrays are still 3d. 

  unpacking  even works, basically because  A  is an iterable,  [a for a in A]  splits  A  on the 1st dimension. 

  In [257]: a,b=A
In [258]: a
Out[258]: 
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
  

 There is an object dtype, with lets you put objects, including other arrays, in an array.  But as has been shown in many SO questions, these can be tricky to construct.   np.array  tries to construct the highest dimension array possible.  You have to perform some tricks to get around that. 

  In [259]: Z=np.empty((2,),dtype=object)
In [260]: Z
Out[260]: array([None, None], dtype=object)
In [261]: Z[0]=A[0]
In [262]: Z[1]=A[1]
In [263]: Z
Out[263]: 
array([ array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]]),
       array([[12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])], dtype=object)
  

 ================ 

 In an Octave session: 

  >> anum = [1,2,3,4]
anum =

   1   2   3   4

>> acell = num2cell(anum)
acell =
{
  [1,1] =  1
  [1,2] =  2
  [1,3] =  3
  [1,4] =  4
}
>> save -7 test.mat anum acell
  

 the  scipy.io.loatmat  version 

  In [1822]: data = io.loadmat('../test.mat')
In [1823]: data
Out[1823]: 
{'__globals__': [],
 '__header__': b'MATLAB 5.0 MAT-file, written by Octave 4.0.0, 
     2016-10-27 00:59:27 UTC',
 '__version__': '1.0',
 'acell': array([[array([[ 1.]]), array([[ 2.]]), array([[ 3.]]),
      array([[ 4.]])]], dtype=object),
 'anum': array([[ 1.,  2.,  3.,  4.]])}
  

 The  matrix  is rendered as a 2d array;  the  cell  as an object type array (2d), containing, in this case, 2d arrays.  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48810517)
 Use https://docs.scipy.org/doc/numpy-dev/user/quickstart.html for that type of indexing: 

  import numpy as np
temp = [(1, 0, 1, 0, 2), (1, 0, 1, 0, 5), (1, 0, 2, 0, 2), (1, 0, 2, 0, 5)]

a = np.array(temp)
a[:, 0]
  

 returns 

  array([1, 1, 1, 1])
  

  Note : all of your inner lists must be of the same size at for this to work. Otherwise the array constructor will return an array of Python lists. 



