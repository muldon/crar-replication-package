Query: What's the fastest way to locate a list element within a list in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20683577)
 If the key occurs exactly once, 

  zip(*thelist)[0].index("332")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20683224)
  .  Without iterating you cannot find it, unless the list is already sorted. You can improve your code like this, with http://docs.python.org/2/library/functions.html#enumerate and list comprehension. 

  [index for index, item in enumerate(thelist) if item[0] == "332"]
  

 This will give the indices of all the elements where the first element is  332 . 

 If you know that  332  occurs only once, you can do this 

  def getIndex():
    for index, item in enumerate(thelist):
       if item[0] == "332":
          return index
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9547549)
  

  element = browser.find_elements_by_xpath("//div[@style='visibility: visible; display: block;']/iframe[@style='height: 600px;']")
  

 If you want only the first iframe in the specified div each time (as shown in your answer), do then 

  iframe=element[0]
  

 If you want to extract what is inside the iframe then you can do this: 

  iframe_content = iframe.text
  

 An alternative way to locate the first iframe of the specified div is by using a similar function that returns one item instead of a list: 

  element = browser.find_element_by_xpath("//div[@style='visibility: visible; display: block;']/iframe[1]")
  

 Above we used  find_element_by_xpath  instead of  find_elements_by_xpath  to just locate the first iframe of the specified div. Take in mind that I didn't specified the iframe by its style (e.g. height: 600px). But this can be done here too in a similar way as I explained above using find_elements_by_xpath. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26580493)
 The problem is that there are multiple  iframe  tags on the page.  

  driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[1])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54181155)
 You will need to switch to iframe before interacting with elements inside of it: 

  iframe = driver.find_element_by_id("codefile_iframe")    
driver.switch_to.frame(iframe)
  

 And then continue with the wait and click. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6630259)
 The  fastest  is probably to use built-in support in python. Here I'm thinking about the http://docs.python.org/library/bisect.html module. Below I'm using a dictionary to quickly check in O(1) if a value is in the list; if not,  bisect  is used to find values smaller than and larger than the sought value. 

  #!/usr/bin/env python

import bisect

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect.bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect.bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

# First create a test-list (49996 items)
i=1.0
R=[1.0]
D={}
while i < 10000:
    i+=0.2
    i=round(i,2)
    D[i]=True
    R.append(i)

# Locate a value, in this case 100.3 which is not in the list
x=100.3
if D.has_key(x):
    print "found", x
else:
    print find_lt(R, x)
    print find_gt(R, x)
  

 Output for  x=100.3 : 

  100.2
100.4
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17557000)
   .//  at the start of the xpath: 

  list  = child.find_element_by_xpath('.//li[@class="listItem"]')
  

   .//  means to search anywhere within the  child  element. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44734278)
 Here is the Answer to your Question: 

 As the locator  //*[@id="loginidtext"]  is within  topwindow  iframe, we have to switch over to the iframe first as follows: 

  from selenium import webdriver
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

binary = FirefoxBinary('C:\\Program Files\\Mozilla Firefox\\firefox.exe')
driver = webdriver.Firefox(firefox_binary=binary, executable_path="C:\\Utility\\BrowserDrivers\\geckodriver.exe")
driver.get('https://matrix.tjc.edu.sg/?topleft=toprow.php&bottomright=bottomrow.php')
driver.maximize_window()
driver.implicitly_wait(20)
driver.switch_to.frame("topwindow")
BCnumber = driver.find_element_by_xpath('//*[@id="loginidtext"]')
BCnumber.send_keys('loginid')
  

 Let me know if this Answers your Question. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20683555)
 No-one's mentioned this yet, so I will - if you need to find an item by its value quickly (and presumably more than just once), you should change the data structure you use to be one that supports the kind of access you need. Lists support fast access by index, but not by item value. If you stored the information in a dict keyed by the first element in the lists, you would be able to find rows  very  quickly by that first value: 

  # Make a dict from the list of lists:
itemLookup = {item[0]: item for item in theList}

itemLookup["51"] # -> ["51", "stuC", "stuD"]
  

 So the brief answer is no (although there is a quick-ish way using bisection if the list is sorted), the longer answer is use a dictionary if you want fast lookup. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43024383)
 The way you are trying to use  find_element_by_class_name  locator is not correct as this locator doesn't support compound classes within. 

 You need to use either  xpath  or  cssSelector  if class attribute have more then one class name : 

  driver.find_element_by_xpath("//button[@class='mn-person-card__person-btn-ext button-secondary-medium']").click()
  



