Query: How to check if all elements of a list matches a condition?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10666231)
 If you want to check if any item in the list violates a condition use  all : 

  if all([x[2] == 0 for x in lista]):
    # Will run if all elements in the list has x[2] = 0 (use not to invert if necessary)
  

 To remove all elements not matching, use  filter  

  # Will remove all elements where x[2] is 0
listb = filter(lambda x: x[2] != 0, listb)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10666222)
 You could use itertools's takewhile like this, it will stop once a condition is met that fails your statement. The opposite method would be dropwhile 

  for x in itertools.takewhile(lambda x: x[2] == 0, list)
    print x
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31390492)
 The  all()  function is used to check if all the condition are satisfied .We are getting elements from list_1 and checking if that is available in list_2 if all are available then we print "yes" 

  list_one=[1,2,3] 
list_two=[1,2,3,4]
if all(a in list_two for a in list_one):
    print "yes"
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10666320)
 The best answer here is to use http://docs.python.org/library/functions.html#all, which is the builtin for this situation. We combine this with a https://www.youtube.com/watch?v=t85uBptTDYY to produce the result you want cleanly and efficiently. For example: 

  >>> items = [[1, 2, 0], [1, 2, 0], [1, 2, 0]]
>>> all(item[2] == 0 for item in items)
True
>>> items = [[1, 2, 0], [1, 2, 1], [1, 2, 0]]
>>> all(item[2] == 0 for item in items)
False
  

 And, for his filter example, a list comprehension: 

  >>> [x for x in items if x[2] == 0]
[[1, 2, 0], [1, 2, 0]]
  

 If you want to check at least one element is 0, the better option is to use http://docs.python.org/library/functions.html#any which is more readable: 

  >>> any(item[2] == 0 for item in items)
True
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10665602)
 You are not permitted to remove elements from the list while iterating over it using a  f  loop. 

 The best way to rewrite the code depends on what it is you're trying to do. 

 F example, your code is equivalent to: 

  f item in a:
  print item
a[:] = []
  

 Alternatively, you could use a  while  loop: 

  while a:
  print a.pop(0)
  

 
   I'm trying to remove items if they match a condition. Then I go to next item.  
 

 You could copy every element that  doesn't  match the condition into a second list: 

  result = []
f item in a:
  if condition is False:
    result.append(item)
a = result
  

 Alternatively, you could use http://docs.python.g/library/functions.html#filter  a list comprehension and assign the result back to  a : 

  a = filter(lambda item:... , a)
  

  

  a = [item f item in a if ...]
  

 where  ...  stands f the condition that you need to check. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25467561)
 You cannot use  in  membership testing with a substring; you'd have to loop over  keyList   again  to test each substring. 

 It'd be far more efficient to grou all strings by prefix: 

  by_prefix = {}
for x in keyList:
    by_prefix.setdefault(x.rsplit('_', 1)[0], []).append(x)

for prefix, matches in by_prefix.iteritems():
    print 'Matches for {} are {}'.format(prefix, by_prefix[prefix])
  

 This only prints the matching elements; all  other  keys are those that didn't match, but they'll be printed on their own: 

  >>> keyList = ["pass1_v1", "pass1_v3", "pass1_v5", "pass2_v1", "pass2_v3", "pass3_v4"]
>>> by_prefix = {}
>>> for x in keyList:
...     by_prefix.setdefault(x.rsplit('_', 1)[0], []).append(x)
... 
>>> for prefix, matches in by_prefix.iteritems():
...     print 'Matches for {} are {}'.format(prefix, by_prefix[prefix])
... 
Matches for pass2 are ['pass2_v1', 'pass2_v3']
Matches for pass1 are ['pass1_v1', 'pass1_v3', 'pass1_v5']
Matches for pass3 are ['pass3_v4']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40569131)
  n=int(input("Please enter the list length "))
A=[]

for i in range (0,n):
    print("Entering element ",i)
    CurEl=int(input("Please enter the element "))
    A.append(CurEl)
print(A)

#checking if they are in it
list_to_check = [1,2,3]        #note 1
for each in A:
    if each in list_to_check:  #note 2
        list_to_check.remove(each) #note 3
    if list_to_check == []:    #note 4
        print("yes, 1 2 3 are in it")
        break                  #note 5
else:                          #note 6
    print("no, 1 2 3 are not in it")

#checking the order
list_to_check = [1,2,3]
check_slot_counter = 0         #note 7
for each in A:
    if each == list_to_check[check_slot_counter]:
        check_slot_counter += 1 #note 8
    if check_slot_counter == 3:
        print("yes, 1 2 3 are in order")
        break
else:
    print("no, 1 2 3 are not in order")
  

 note 1: we are making a list to check if 1,2,3 against. Think of it as a note as you go buying grocery 

 note 2: we are using  in  to check if an object is 'in' a list for example here we are looping through the list we created  A  and can be thought as for each in A, if each is in list_to_check, then that condition pass and execute what's in the if statement 

 note 3: we are removing the item we found and matched from our list_to_check because we've found it, so we don't have to check again.  remove()  function takes an argument and it removes that item from the list you provide. 

 note 4: checking if our list is empty, if it is we know we have found all the items in our list meaning it passes. 

 note 5:  break  breaks out of the for loop with out needing to finish the for loop. Since we found everything we needed, we don't need to check for further matches. 

 note 6: for loops can have an  else  code block. They can be thought of as  if-else  blocks but in for loop, the  else  code block will run once after the for loop completes. Note that the  else  won't run if you  break  out of the for loop. This is a neat trick since if we have found everything need to find, we break out of the for loop, "else" we didn't find what we looked for and the for loop finished meaning we went through the list  A .  

 note 7: a counter checking in the list so we can go in order from checking what's in the list. 

 note 8:  variable += int  is basically  variable = variable + 1  a cleaner way of incrementing the counter. If our counter is 3, we went through our list, so we know it's in order. Since we are going through the  A  list one at a time in order, and we only increment the counter once we matches something, we know it's in order or not. It seems like you know how to access lists through index, and this is one way to do it. 

 I know there are a lot of other ways that are better solutions but since you said you are new, and wanting to learn, I feel this is the best way to go. You learn a few tricks and it's not overly complicated since everything is pretty logically layed out in also plain english.  

 As for why your code wasn't working you are not iterating (going through your list) you are only checking in range of 0 to size of list, basically,  0, 1, 2, 3, 4, 5, ..., n . To iterate through a list you have to use  for temp_variable in list_name:  see my example.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34118255)
 You can slice a list. Take the first four elements: 

  >>> L = ['1','1','1','1','2','2','2'] 
>>> L[:4]
['1', '1', '1', '1']
  

  

  >>> L[-3:]
['2', '2', '2']
  

 A https://docs.python.org/3.4/library/stdtypes.html#set does not allow duplicates.  

   >>> set(L[:4])
 {1}
  

 That means if he length of this set is 1, all elements in the sliced list are the same. 

  

  >>> len(set(L[:4])) == 1 and len(set(L[-3:])) == 1
True
  

 shows you that your condition is met. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42244301)
 To check that all iterables match, just have a flag that is assumes they do, but is false if any doesn't match. E.g (I havne't ran this code). 

  def iterChecker(list):
    regex = compile("([A-Z]{2})(\d+)")
    checker = []
    all_match = True
    for l in list:
        if regex.match(l):
            checker.append(l)
            if len(checker) == len(list):
                print("Everything is ok")
        else:
            all_match = False
            print("Elements that do not match: %s" % l)
    if all_match:
        print("All match")
  



