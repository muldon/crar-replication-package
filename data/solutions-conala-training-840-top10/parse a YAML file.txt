Query: parse a YAML file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50432697)
  Example:  

 defaults.yaml 

  url: https://www.google.com
  

 environment.py 

  from ruamel import yaml

data = yaml.safe_load(open('defaults.yaml'))
data['url']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47021947)
 Import yaml module and load the file into a dictionary called 'my_dict': 

  import yaml
my_dict = yaml.load(open('filename'))
  

 That's all you need. Now the entire yaml file is in 'my_dict' dictionary. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54590729)
 This is perfectly valid YAML. It is PyYAML that is the problem. Like all other YAML processors that fail to load this, that I know about, it can  parse  that YAML without problems (and  compose  if the processor implements that step), but fail during the  constructing  step of the loading process. 

 If you would use  ruamel.yaml  (disclaimer: I am the author of that package) and have your input
in the file  input.yaml : 

  import sys
from pathlib import Path
import ruamel.yaml

file_name = Path('input.yaml')

yaml = ruamel.yaml.YAML()
data = yaml.load(file_name)
print(data['base::files'][('/apps/ecert-public', '/apps/ecert-public/config', '/apps/ecert-public/releases')]['ensure'])
print('\n-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-\n')
yaml.dump(data, sys.stdout)
  

  

  directory

-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-

base::files:

  /var/log/fpm:
    ensure: directory
    mode: '777'

  /etc/nginx/ssl/cert:
    ensure: directory

  /apps:
    ensure: directory
    owner: user
    group: user


  [/apps/ecert-public, /apps/ecert-public/config, /apps/ecert-public/releases]:
    ensure: directory
    owner: user
    group: user

  [/apps/site-public, /apps/site-public/config, /apps/site-public/releases]:
    ensure: directory
    owner: user
    group: user
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28559739)
 This is how i can read from the above file i mentioned, parse and update as needed. 

  import yaml

fname = "some.yaml"

stream = open(fname, 'r')
data = yaml.load(stream)

data['instances'][0]['host'] = '1.2.3.4'
data['instances'][0]['username'] = 'Username'
data['instances'][0]['password'] = 'Password'

with open(fname, 'w') as yaml_file:
    yaml_file.write( yaml.dump(data, default_flow_style=False))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1774043)
 The easiest and pureist method without relying on C headers is PyYaml: 

  #!/usr/bin/env python

import yaml

with open("example.yaml", 'r') as stream:
    try:
        print(yaml.load(stream))
    except yaml.YAMLError as exc:
        print(exc)
  

 And that's it.  More info here: 

 http://pyyaml.org/wiki/PyYAMLDocumentation 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18437951)
 According to http://pyyaml.org/wiki/PyYAMLDocumentation you must use  CLoader / CSafeLoader  (and  CDumper ): 

  import yaml
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader

config_file = "test.yaml"

stream = open(config_file, "r")
sensors = yaml.load(stream, Loader=Loader)
  

 This gives me 

  real    0m0.503s
  

  

  real    0m2.714s
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13675971)
 This format is not JSON, but YAML, which you can parse with http://pyyaml.org/: 

  >>> import yaml
>>> s = '{a: 1, b: 2}'
>>> d = yaml.load(s)
>>> d
{'a': 1, 'b': 2}
>>> type(d)
<type 'dict'>
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38922434)
 If you have YAML that conforms to the http://www.yaml.org/spec/1.2/spec.html (released 2009) then you should use https://pypi.python.org/pypi/ruamel.yaml/ (disclaimer: I am the author of that package).
It is essentially a superset of PyYAML, which supports most of YAML 1.1 (from 2005). 

 If you want to be able to preserve your comments when round-tripping, you certainly should use ruamel.yaml.    

 Upgrading @Jon's example is easy: 

  import ruamel.yaml as yaml

with open("example.yaml") as stream:
    try:
        print(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        print(exc)
  

 Use  safe_load()  unless you really have full control over the input, need it (seldom the case) and know what you are doing. 

 If you are using pathlib  Path  for manipulating files, you are better of using the new API ruamel.yaml provides: 

  from ruamel.yaml import YAML
from pathlib import Path

path = Path('example.yaml')
yaml = YAML(typ='safe')
data = yaml.load(path)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16028076)
 The http://en.wikipedia.org/wiki/YAML parser can help you figure out what datatype your string is. Use  yaml.load() , and then you can use  type(result)  to test for type: 

  >>> import yaml

>>> a = "545.2222"
>>> result = yaml.load(a)
>>> result
545.22220000000004
>>> type(result)
<type 'float'>

>>> b = "31"
>>> result = yaml.load(b)
>>> result
31
>>> type(result)
<type 'int'>

>>> c = "HI"
>>> result = yaml.load(c)
>>> result
'HI'
>>> type(result)
<type 'str'>
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32916367)
  with open("employees.yaml", 'r') as stream:
    out = yaml.load(stream)
    print out['Employees']['user']
  

 Should already give you list of users.Also note that your yaml missing one dash after user node 



