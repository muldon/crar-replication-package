Query: Sum the second value of each tuple in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16643634)
 You can use  collections.defaultdict : 

  >>> from collections import defaultdict
>>> from operator import mul
>>> lis = [(0,2),(1,3),(2,4),(0,5),(1,6)]
>>> dic = defaultdict(list)
>>> for k,v in lis:
    dic[k].append(v)  #use the first item of the tuple as key and append second one to it
...     

#now multiply only those lists which contain more than 1 item and finally sum them.
>>> sum(reduce(mul,v) for k,v in dic.items() if len(v)>1)
 28
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46982791)
 Use a  defaultdict  as a grouper: 

  >>> from collections import defaultdict
>>> grouper = defaultdict(lambda: (0,0))
>>> list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]
>>> for a, b, c in list_of_tuples:
...     x, y = grouper[a]
...     grouper[a] = (x + b, y + c)
...
>>> grouper
defaultdict(<function <lambda> at 0x102b240d0>, {1: (5, 5), 2: (3, 0)})
  

 Now, you can always get a list of tuples back like this: 

  >>> [(k, a, b) for k, (a, b) in grouper.items()]
[(1, 5, 5), (2, 3, 0)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28921462)
  

  def foo(lst):
    d = {}
    for (k,v) in lst: d[k] = d.get(k,0) + v     # Accumulate
    return max(d.items(), key=lambda x:x[1])[0] # Find max value, return corresponding key

print foo([(1,200),(1,50),(2,275)])             # 2
print foo([(1,100),(2,50),(2,300),(1,1000)])    # 1
  

 Or if you wanted the key and sum: 

  def foo(lst):
    d = {}
    for (k,v) in lst: d[k] = d.get(k,0) + v     # Accumulate
    return max(d.items(), key=lambda x: x[1])   # Find max value, return corresponding tuple

print foo([(1,200),(1,50),(2,275)])             # (2, 275)
print foo([(1,100),(2,50),(2,300),(1,1000)])    # (1, 1100)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46982739)
 You can use https://docs.python.org/3/library/itertools.html#itertools.groupby to group based on the first item, and then take the cumulative sums of all the last two items in each group: 

  from itertools import groupby

list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]
lst = [(k,)+tuple(sum(x) for x in zip(*g))[1:] 
                         for k, g in groupby(list_of_tuples, lambda x: x[0])]
print(lst)
# [(1, 5, 5), (2, 3, 0)]
  



