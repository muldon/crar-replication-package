Query: Converting string series to float list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46981302)
 You need convert the string to list first 

  a = '[123.34 , -12333]'
res = map(float, a[1:-1].split(','))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4004554)
 Try a list comprehension: 

  s = '5.2 5.6 5.3'
floats = [float(x) for x in s.split()]
  

 In Python 2.x it can also be done with map: 

  floats = map(float, s.split())
  

 Note that in Python 3.x the second version returns a map object rather than a list. If you need a list you can convert it to a list with a call to  list , or just use the list comprehension approach instead. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52096408)
 Use  list comprehension : 

  s1 = pd.Series(['' if pd.isnull(x) else int(x) for x in s], index=s.index)

print (s1.apply(type))
0    <class 'int'>
1    <class 'int'>
2    <class 'int'>
3    <class 'str'>
dtype: object

print (s1.tolist())
[129944444999999920, 1001, 1119999999912, '']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41385398)
 You can use https://docs.python.org/3/library/functions.html#map like this: 

  list(map(float, x[0].split(',')))
  

 https://docs.python.org/3/library/functions.html#map takes a function ( float  in our case) and an iterable ( in our case this list:  x[0].split(',') ).  float  function is called for each item of our list  x[0].split(',')  

 It is equivalent to this https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions: 

  [float(item) for item in x[0].split(',')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41385382)
  x  is a list with one string, so to access that string you need  x[0] . That string is comma-separated, so you need to specify the delimiter:  split(',') . (Otherwise,  split()  tries to split a string on whitespace, https://docs.python.org/3/library/stdtypes.html#str.split.) 

  

  [float(i) for i in x[0].split(',')]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43128278)
 You can cast to to string, conditional on not being null. 

  x[x.notnull()] = x.astype(str)

x
Out[32]
0      NaN
1    123.0
2      NaN
3    456.0
dtype: object

x.values
Out[33]: array([nan, '123.0', nan, '456.0'], dtype=object)

x.isnull()
Out[34]
0     True
1    False
2     True
3    False
dtype: bool
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48827395)
 Use helper  Series : 

  df = pd.concat({k:pd.Series(v) for k, v in d.items()}).unstack().astype(float).sort_index()
df.columns = 'col1  col2  col3'.split()
  

 Another solution is convert not list values to one element list and then http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_dict.html: 

  d = {k:v if isinstance(v, list) else [v] for k, v in d.items()}
df = pd.DataFrame.from_dict(d, orient='index').astype(float).sort_index()
df.columns = 'col1  col2  col3'.split()


print (df)
   col1  col2  col3
a   1.2   1.0   1.1
b   5.8   1.0   2.0
c   9.5   0.9   NaN
h   1.9   6.1   NaN
l   1.0   8.0   NaN
o   5.0   NaN   NaN
p   3.0   1.1   NaN
v   1.8   0.0   NaN
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46587712)
 When converting a float to an integer, I found out using df.dtypes that the column I was trying to round off was an object not a float.  The round command won't work on objects so to do the conversion I did: 

 df['a'] = pd.to_numeric(df['a'])  
df['a'] = df['a'].round(0).astype(int) 

 or as one line: 

  df['a'] = pd.to_numeric(df['a']).round(0).astype(int)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8233460)
  

  >>> a = u'{0.128,0.128,0.133,0.137,0.141,0.146,0.15,0.155,0.159,0.164,0.169,0.174,0.179,0.185,0.19,0.196,0.202,0.208,0.214,0.22}'
>>> [float(i) for i in a.strip('{}').]
[0.128, 0.128, 0.133, 0.137, 0.141, 0.146, 0.15, 0.155, 0.159, 0.164, 0.169, 0.174, 0.179, 0.185, 0.19, 0.196, 0.202, 0.208, 0.214, 0.22]
  

 Unicode is very similar to  str  and you can use  .split() , as well as  strip() . Furthermore, casting to  float  works the way it works for  str . 

 So, first strip your string of the unnecessary curly braces ( {  and  } ) by using  .strip('{}') , then split the resulting string by commas ( , ) using  . . After that you can just use list comprehension, converting each item to  float , as in the example above. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/19027455)
 Try converting with astype: 

  new_re_df = [s.iloc[np.where(ts.astype(int) == int(i))] for i in ts]
  

  Edit  

 On suggestion by @Rutger Kassies a nicer way would be to cast series and then groupby: 

  rise_p['ts'] = (rise_p.time / 100).astype('int')

ts_grouped = rise_p.groupby('ts')

...
  



