Query: copy a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/184660)
 If you want a shallow copy (elements aren't copied) use: 

  lst2=lst1[:]
  

 If you want to make a deep copy then use the copy module: 

  import copy
lst2=copy.deepcopy(lst1)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6612823)
 Use http://docs.python.org/library/copy.html#copy.deepcopy for a deep copy: 

  import copy
copy_list = copy.deepcopy(original_list)
  

 For a shallow copy use http://docs.python.org/library/copy.html#copy.copy: 

  import copy
copy_list = copy.copy(original_list)
  

 or slice with no endpoints specified : 

  copy_list = original_list[:]
  

 See the http://docs.python.org/library/copy.html for an explanation about deep & shallow copies. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16872030)
  copy.copy  performs a shallow copy as opposed to  copy.deepcopy  which performs a deep copy. 

  

  li = [1, 2, 3, 4]
  

 you will not notice any difference, because you are copying immutable objects, however consider: 

  >>> import copy
>>> x = copy.copy(li)
>>> x
[[1, 2], [3, 4]]
>>> x[0][0] = 9
>>> li
[[9, 2], [3, 4]]
  

 Since a shallow copy only makes copies of each reference in the list, manipulating these copied references will still affect the original list.  

 However the following code: 

  >>> x.append(1)
  

 will have no effect on the original list. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54142619)
 @user2357112 is right, really, what part makes you thing that is a deep copy? 

 Actually @jonrsharpe is also right. 

 all copy ways, see below, are shallow copies: 

  l=l.copy()
l=l[:]
l=list(l)
...
  

  Only   copy.deepcopy  is a deep copy: 

  from copy import deepcopy
l=deepcopy(l)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16536145)
 both with  list(my_list)  and  my_list[:]  you get a shallow copy of the list. 

  id(copy_my_list[0]) == id(my_list[0])
#  True
  

 so use  copy.deepcopy  to avoid your problem: 

  copy_my_list = copy.deepcopy(my_list)
id(copy_my_list[0]) == id(my_list[0])
#  False
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23997043)
 To make a proper copy use  copy  module 

  b = copy.deepcopy(a)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6612818)
 This will work. 

  import copy
copy_list = copy.copy(original_list)
  

   

  copy_list = list(original_list)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50373643)
 Note that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use  copy.copy()  or  copy.deepcopy()  rather than the alternatives, for example in Python 3: 

  import copy

class MyList(list):
    pass

lst = MyList([1,2,3])

lst.name = 'custom list'

d = {
'original': lst,
'slicecopy' : lst[:],
'lstcopy' : lst.copy(),
'copycopy': copy.copy(lst),
'deepcopy': copy.deepcopy(lst)
}


for k,v in d.items():
    print('lst: {}'.format(k), end=', ')
    try:
        name = v.name
    except AttributeError:
        name = 'NA'
    print('name: {}'.format(name))
  

 Outputs: 

  lst: original, name: custom list
lst: slicecopy, name: NA
lst: lstcopy, name: NA
lst: copycopy, name: custom list
lst: deepcopy, name: custom list
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19952361)
  

  org_list = ['y', 'c', 'gdp', 'cap']
  

 you create the list object, and give it the name "org_list". 

  

  copy_list = org_list
  

 you just mean, "the name copy_list refers to the same object as org_list does". 

 If your list only contains immutable types, then you can create a copy by 

  copy_list = list(org_list)
  

 But note that this is only valid if the list objects are immutable, because it creates a SHALLOW copy, i.e. the list is copied, but every element on the list is not duplicated. 

 If you have i.e. a list of lists and want EVERYTHING to be duplicated, you need to perform a DEEP copy: 

  import copy
org_list = ['y', 'c', ['gdp', 'rtd'], 'cap']
copy_list = copy.deepcopy(org_list)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/26562235)
 
   What are the options to clone or copy a list in Python? 
 

 In Python 3, a shallow copy can be made with: 

  a_copy = a_list.copy()
  

 In Python 2 and 3, you can get a shallow copy with a full slice of the original: 

  a_copy = a_list[:]
  

 Explanation 

 There are two semantic ways to copy a list. A shallow copy creates a new list of the same objects, a deep copy creates a new list containing new equivalent objects. 

 Shallow list copy 

 A shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists.  

 There are different ways to do this in Python 2 and 3. The Python 2 ways will also work in Python 3. 

 Python 2</h3>

 In Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original: 

  a_copy = a_list[:]
  

 You can also accomplish the same thing by passing the list through the list constructor,  

  a_copy = list(a_list)
  

 but using the constructor is less efficient: 

  >>> timeit
>>> l = range(20)
>>> min(timeit.repeat(lambda: l[:]))
0.30504298210144043
>>> min(timeit.repeat(lambda: list(l)))
0.40698814392089844
  

 Python 3</h3>

 In Python 3, lists get the  list.copy  method: 

  a_copy = a_list.copy()
  

 In Python 3.5: 

  >>> import timeit
>>> l = list(range(20))
>>> min(timeit.repeat(lambda: l[:]))
0.38448613602668047
>>> min(timeit.repeat(lambda: list(l)))
0.6309100328944623
>>> min(timeit.repeat(lambda: l.copy()))
0.38122922903858125
  

 Making another pointer does  not  make a copy 

 
    Using new_list = my_list then modifies new_list every time my_list changes.   
 

  my_list  is just a name that points to the actual list in memory. When you say  new_list = my_list  you're not making a copy, you're just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists.  

  >>> l = [[], [], []]
>>> l_copy = l[:]
>>> l_copy
[[], [], []]
>>> l_copy[0].append('foo')
>>> l_copy
[['foo'], [], []]
>>> l
[['foo'], [], []]
  

 The list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy. 

 Deep copies 

 To make a https://docs.python.org/library/copy.html: 

  import copy
a_deep_copy = copy.deepcopy(a_list)
  

 To demonstrate how this allows us to make new sub-lists: 

  >>> import copy
>>> l
[['foo'], [], []]
>>> l_deep_copy = copy.deepcopy(l)
>>> l_deep_copy[0].pop()
'foo'
>>> l_deep_copy
[[], [], []]
>>> l
[['foo'], [], []]
  

 And so we see that the deep copied list is an entirely different list from the original. You could roll your own function - but don't. You're likely to create bugs you otherwise wouldn't have by using the standard library's deepcopy function. 

 Don't use  eval  

 You may see this used as a way to deepcopy, but don't do it: 

  problematic_deep_copy = eval(repr(a_list))
  

 
 It's dangerous, particularly if you're evaluating something from a source you don't trust. 
 It's not reliable, if a subelement you're copying doesn't have a representation that can be eval'd to reproduce an equivalent element. 
 .  
 

 In 64 bit Python 2.7: 

  >>> import timeit
>>> import copy
>>> l = range(10)
>>> min(timeit.repeat(lambda: copy.deepcopy(l)))
27.55826997756958
>>> min(timeit.repeat(lambda: eval(repr(l))))
29.04534101486206
  

 on 64 bit Python 3.5: 

  >>> import timeit
>>> import copy
>>> l = list(range(10))
>>> min(timeit.repeat(lambda: copy.deepcopy(l)))
16.84255409205798
>>> min(timeit.repeat(lambda: eval(repr(l))))
34.813894678023644
  



