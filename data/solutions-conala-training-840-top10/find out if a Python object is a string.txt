Query: find out if a Python object is a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1303252)
 Python 2 

 Use  isinstance(obj, basestring)  for an object-to-test  obj . 

 https://docs.python.org/2.7/library/functions.html#basestring. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37808689)
 I found this ans more  pythonic : 

  if type(aObject) is str:
    #do your stuff here
    pass
  

 since type objects are singleton,  is  can be used to do the compare the object to the str type 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1969504)
 if string in [x.name for x in list_of_x] 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29271813)
 "MatchObjects" have a https://docs.python.org/2/library/re.html#re.MatchObject.start method you can use: 

  import re

def custom(s):
    mat = re.search(r'[^\x20-\x7E]', s)
    if mat: return mat.start()
    return -1  # ?? match failed

string = "abcdeÿÿaaaabbbÿÿcccdddÿÿeeeÿÿ"
print(custom(string))  # 5
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8097170)
  zzz  as defined in your post is a plain  str  object, not a  unicode  object, so there is no way to indicate that it is something it actually isn't.  You can convert the  str  object to a  unicode  object, though, by specifying an encoding: 

  s.find(zzz.decode("utf-8"))
  

 Substitue  utf-8  by whatever encoding the string is encoded in. 

 Note that in your example 

  zzz = '\u0101'
  

  zzz  is a plain string of length 6.  There is no easy way to fix this wrong string literal afterwards, except for hacks along the lines of 

  ast.literal_eval("u'" + zzz + "'")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49133019)
 This is one functional way: 

  from operator import attrgetter

result = max(map(len, map(attrgetter('name'), l)))

# 7
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1969510)
  any(obj for obj in objs if obj.name==name)
  

 Note, that it will stop looping after first match found. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36644833)
 You need to use the  (?!.\(object\))  negative lookahead after "class ": 

  class (?!.\(object\)).
  

 See the https://regex101.com/r/vG7tA5/1 

 The  .\(object\)).  subpattern matches any 0+ characters other than a newline that is not followed with  (object) . It effectively grabs all the line up to its end, and does not find any  (object)  after it.   .  does not even match anything as all the characters already "belong" to the first  . . 

 In  (?!.\(object\)) , the check occurs after consuming  class +space, and fails the match once there is an  (object)  somewhere further on the current line. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29271776)
 If you want to use this 2 function use the first group of  re.search  within  find  : 

  >>> g = "abcdeÿÿaaaabbbÿÿcccdddÿÿeeeÿÿ"
>>> import re
>>> g.find(re.search(r'[^\x20-\x7E]',g).group(0))
5
  

 But if you just want to find the index  re.search  has the  start  method that return the index of matched string : 

  >>> re.search(r'[^\x20-\x7E]',g).start()
5 
  

 Also you can do it without regex : 

  >>> import string
>>> next(i for i,j in enumerate(g) if j not in string.ascii_letters)
5
  



