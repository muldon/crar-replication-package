Query: Convert scientific notation to decimal - python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16962569)
 Use string formatting: 

  >>> "{:.50f}".format(float(a[0]/a[1]))
'0.00000031994439558937568872208504280885144055446290'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5786139)
  '{0:f}'.format(Decimal('0.0000001'))
  

 The above should work for you 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19864272)
 Here's an example using the  format()  function: 

  >>> "{:.2E}".format(Decimal('40800000000.00000000000000'))
'4.08E+10'
  

 
  https://docs.python.org/3.3/library/string.html#formatspec  
  http://www.python.org/dev/peps/pep-3101/  
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28223273)
 If you do  "{:.3e}".  you will get 3 digits after decimal, that is  

  >>> a = 31234.34234
>>> "{:.3e}".format(a)
'3.123e+04'
  

 To get what you want, you need to do  "{:.2e}". .  

  >>> "{:.2e}".format(a)
'3.12e+04'
>>> float("{:.2e}".format(a))
31200.0
  

 Converting it back to  float  will give you the original value 

 As a function 

  def estim(x):
    x = abs(x)
    a=("{:.2e}".)
    print(a)
    return a
  

 Tip: 

 You can use  %  (It might be deprecated) 

  >>> a = 31234.34234
>>> "%e"%a
'3.123434e+04'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22040174)
 To convert a Decimal to scientific notation without needing to specify the precision in the format string, and without including trailing zeros, I'm currently using 

  def sci_str(dec):
    return ('{:.' + str(len(dec.normalize().as_tuple().digits) - 1) + 'E}').format(dec)

print( sci_str( Decimal('123.456000') ) )    # 1.23456E+2
  

 To keep any trailing zeros, just remove the  normalize() .  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5786153)
 See http://docs.python.org/library/stdtypes.html#string-formatting, especially the floating point conversions: 

 
   'e'   Floating point exponential format (lowercase).  (3) 
  
   'E'   Floating point exponential format (uppercase).  (3) 
  
   'f'   Floating point decimal format.  (3) 
  
   'F'   Floating point decimal format.  (3) 
  
   'g'   Floating point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.  (4) 
  
   'G'   Floating point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.  (4) 
 

 An example, using  f  format. 

  >>> ["%10.7f" %i for i in rates]
[' 0.1000000', ' 0.0000010', ' 0.0000001']
>>> 
  

 You can also use the newer (starting 2.6) http://docs.python.org/library/stdtypes.html#str.format method: 

  >>> ['{0:10.7f}'.format(i) for i in rates]
[' 0.1000000', ' 0.0000010', ' 0.0000001']
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28398027)
 If you want to produce a float, you will have to specify the float type: 

  >>> '{:2.4f}'.format(3454356.7)
'3454356.7000'
  

 Otherwise, if you don’t specify a type, Python will choose  g  as the type for which precision will mean the precision based on its http://en.wikipedia.org/wiki/Significant_figures, the digits  before  and  after  the decimal point. And since you have a precision of  4 , it will only display 4 digits, falling back to scientific notation so it doesn’t add false precision. 

 
   The  precision  is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with  'f'  and  'F' , or  before and after the decimal point for a floating point value formatted with  'g'  or  'G'  . For non-number types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The precision is not allowed for integer values. 
 

 (https://docs.python.org/3/library/string.html#formatstrings, emphasis mine) 

 Finally, note that the width (the  2  in above format string) includes the  full width , including digits before the decimal point, digits after it, the decimal point itself,  and  the components of the scientific notation. The above result would have a width of 12, so in this case, the width of the format string is simply ignored. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36054151)
 You cannot change this by default. The default behavior when displaying a float is always to move to scientific notation if the exponent is larger than the float’s precision. 

 The only way to change this is by  explicitly  formatting it in another way. If you know what precision your displayed number should have, you can use https://docs.python.org/3/library/functions.html#format: 

  >>> number
1.1e+23
>>> format(number, 'f')
'110000000000000004194304.000000'
>>> format(number, '.0f')
'110000000000000004194304'
  

 You can also use that with format strings: 

  >>> 'The number is {:.0f}'.format(number)
'The number is 110000000000000004194304'
  

 If your goal is to conver the float into an integer, then you should just do that. Integers have infinite precision, so they are not displayed using scientific notation. You could for example  round  or cut off the digits after the decimal point: 

  >>> round(number)
110000000000000004194304
>>> int(number)
110000000000000004194304
  

 For high-precision decimals, you can use the https://docs.python.org/3/library/decimal.html type. It allows for decimals to have an arbitrary precision: 

  >>> from decimal import Decimal
>>> d = 10**23 * Decimal('1.1')
>>> d
Decimal('110000000000000000000000.0')
>>> int(d)
110000000000000000000000
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42749484)
   

  x = Decimal('40800000000.00000000000000')
  

 Starting from Python 3,  

  '{:.2e}'.format(x)
  

 is the recommended way to do it. 

  e  means you want scientific notation, and  .2  means you want 2 digits after the dot. So you will get  x.xxE±n  



