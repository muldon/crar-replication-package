Query: How do I sort a list of strings in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17474264)
 You want to sort based on the  float  values (not string values), so try:     

  >>> b = ["949.0","1099.0"]
>>> b.sort(key=float)
>>> b
['949.0', '1099.0']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17474238)
 They are both sorted.
'1' comes before '9'. Look at here:
http://www.asciitable.com/ 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17474253)
 Convert them to  int  or  float  or even  decimal  (since it has trailing numbers) 

  >>> b = [float(x) for x in b]
>>> b.sort()
>>> b
[949.0, 1099.0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37355570)
 The idea is to associate to each char the index in the specified order and use the indexes of the string chars to do the order comparison. 

  Note : only works with Python 3 

  Sort one char strings  

  ORDER = "0123456789aàáäåæbcçdeèéêfghiìíîjklmnñoòóôöøpqrsßtuùúüvwxyzžα"
# associate each char with the index in the string
# this makes sort faster for multiple invocations when compared with
# ORDER.index(c)
POS = {c:p for (p, c) in enumerate(ORDER)}

lst = ['x', 'h', 'ê', 'ø', '5', 'ž', 'z', 'α', '3', '1']

lst.sort(key = lambda c: POS[c])
# or, suggested by wim
lst.sort(key = POS.get)
  

  Sort any length strings  

  class MyStrOrder:
    def __init__(self, inner):
        self.inner = inner

    def __lt__(self, other):
        for i in range(min(len(self.inner), len(other.inner))):
            a = POS.get(self.inner[i])
            b = POS.get(other.inner[i])
            if a != b:
                return a < b
        return len(self.inner) < len(other.inner)

lst = ["abc", "ab", "aá"]
lst.sort()
print(lst)

lst = ["abc", "ab", "aá"]
lst.sort(key = MyStrOrder)
print(lst)
  

 Outputs: 

  ['ab', 'abc', 'aá']
['aá', 'ab', 'abc']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17474283)
 use a http://docs.python.org/2/reference/expressions.html#lambda inside sort to convert them to float and then sort properly: 

  a = sorted(a, key=lambda x: float(x))
  

 so you will mantain them as strings but sorted by value and not lexicographically 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28524048)
 Using https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions and https://docs.python.org/2/library/stdtypes.html#str.join: 

  >>> l1 = ["bba", "yxx", "abc"]
>>> [''.join(sorted(s)) for s in l1]
['abb', 'xxy', 'abc']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32119310)
 Because you have a list of strings , so it is getting sorted in lexicographical order , If you are sure the list only have float values (in strings , the use the keys argument to convert those strings to float while sorting. Example - 

  l.sort(float
  

 If you want to convert the complete list to float (since you say you want to take mean / median , etc later  , then use - 

  l = list(map(float, l
  

 For Python 2.x , the list(.. is not needed as map( returns a list .  

 And if you are converting the complete list to float , then you do not need the above sort( method with keys argument , normal .sort( should work. 



