Query: Is there a more elegant way for unpacking keys and values of a dictionary into two lists, without losing consistence?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6612795)
 What about using http://docs.python.org/library/stdtypes.html#dict.keys and http://docs.python.org/library/stdtypes.html#dict.values? 

  keys, values = my_dict.keys(), my_dict.values()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31990656)
 You could get a list of tuples of the keys and values this way: 

  key_values = [(k, v) for k, vs in a.items() for v in vs]
  

 and then from the list get a list of the keys and the values if this is more valuable: 

  keys = [i[0] for i in key_values]
values = [i[1] for i in key_values]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/613218)
 It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listâ€”probably a list of tuples. 

  

  import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
  

  sorted_x  will be a list of tuples sorted by the second element in each tuple.   . 

 And for those wishing to sort on keys instead of values: 

  import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))
  

 In Python3 since unpacking is not allowed https://stackoverflow.com/a/15712231/4293057 we can use  

  x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_by_value = sorted(x.items(), key=lambda kv: kv[1])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53148192)
 When dictionaries are iterated as lists the iteration takes the keys of it, f example 

  f key in tmp:
    print(key)
  

  

  f key in tmp.keys():
    print(key)
  

 in this case, unpacking as  *tmp  is equivalent to  *tmp.keys() , igning the values. If you want to use the values you can use  *tmp.values() . 

 Double asterisk is used f when you define a function with keywd parameters such as 

  def foo(a, b):
  

  

  def foo(**kwargs):
  

 here you can ste the parameters in a dictionary and pass it as  **tmp . In the first case keys must be strings with the names of the parameter defined in the function firm. And in the second case you can wk with  kwargs  as a dictionary inside the function. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50151720)
 If you don't have to use list comprehension, a generator could be used: 

  def flat(l):
    for k, v in l.items():
        if type(v) == list:
            for x in v:  
                yield x
        else:
            yield v

kwargs = {'key1': 1,
          'key2': 2,
          'key3list': [1,2,3,4]}

print(tuple(flat(kwargs)))
  

 Output: 

  (1, 2, 1, 2, 3, 4)
  

 Note that the  dict  has no order so the resulting tuple can change based on the order that  items()  returns the dictionary items. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31670784)
 You can use https://docs.python.org/3/library/functions.html#zip function : 

  >>> zip(*d.values())
[(5, 1, 1), (6, 2, 2), (5, 3, 1), (6, 7, 2), (5, 8, 1), (6, 9, 2)]
  

 If you care about the order you should pass the values by a custom order to  zip  function.for example : 

  zip(d['x_axis'], d['y_axis'], d['z_axis'])
  

 Or use an  collections.OrderedDict  if you want to use  values()  and unpacking : 

  >>> from collections import OrderedDict
>>> d=OrderedDict([(u'x_axis', [1, 2, 3, 7, 8, 9]),(u'y_axis', [5, 6, 5, 6, 5, 6]), (u'z_axis', [1, 2, 1, 2, 1, 2])])
>>> 
>>> zip(*d.values())
[(1, 5, 1), (2, 6, 2), (3, 5, 1), (7, 6, 2), (8, 5, 1), (9, 6, 2)]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41743710)
 Using a combination of list and dictionary comprehensions 

  [{k: v} for k, v in zip(wcD, D2)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15366545)
 Use the proper data type for the job. Your goal should be to have workable code, not that you use the same data type all over the place. 

 If your dictionary only contains  one  key and  one  value, you can get either with indexing: 

  key = list(d)[0]
value = list(d.values())[0]
  

  

  key, value = list(d.items())[0]
  

 The  list  calls are needed because in Python 3,  .keys() ,  .values()  and  .items()  return dict views, not lists. 

 Another option is to use sequence unpacking: 

  key, = d
value, = d.values()
  

  

  (key, value), = d.items()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33161299)
 I recommend making a single dictionary with keys like the original dictionaries and values of  list s containing each of the original dictionaries' appropriate values: 

  >>> dict_list = [{'key1':1, 'key2':2}, {'key1': 3, 'key2':4}]
>>> dct = {}
>>> for d in dict_list:
...     for k in d:
...         dct.setdefault(k, []).append(d[k])
...
>>> dct
{'key1': [1, 3], 'key2': [2, 4]}
  



