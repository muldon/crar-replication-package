Query: Get index values of Pandas DataFrame as list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18360223)
 To get the  index  values as a  list / list  of  tuple s f  Index / MultiIndex  do: 

  df.index.values.tolist()  # an ndarray method, you probably shouldn't depend on this
  

  

  list(df.index.values)  # this will always wk in pandas
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24511366)
 DataFrames have a  dropna  method: 

  import pandas
import numpy

d = pandas.DataFrame({'A': [1, 2, 3, numpy.nan], 
                      'b': [1, 2, numpy.nan, 3],
                      'c': [1, numpy.nan, 2, 3]})
d.dropna(subset=['b'])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54260016)
 A dataframe is a two-dimensional object. To reflect this, you need to feed a nested list. Each sublist, in this case the  only  sublist, represents a row. 

  df = pd.DataFrame([list_values], columns=list_columns)

print(df)

#     a   b   c   d   e   f   g   h   k    l    m    n
# 0  11  22  33  44  55  66  77  88  99  100  111  222
  

 If you supply an index with length greater than 1, Pandas broadcasts for you: 

  df = pd.DataFrame([list_values], columns=list_columns, index=[0, 1, 2])

print(df)

#     a   b   c   d   e   f   g   h   k    l    m    n
# 0  11  22  33  44  55  66  77  88  99  100  111  222
# 1  11  22  33  44  55  66  77  88  99  100  111  222
# 2  11  22  33  44  55  66  77  88  99  100  111  222
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39832803)
 IIUC you need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html: 

  start = pd.to_datetime('2015-02-24')
rng = pd.date_range(start, periods=5)

df = pd.DataFrame({'a': range(5), 'b':list('ABCDE')}, index=rng)  
print (df)
            a  b
2015-02-24  0  A
2015-02-25  1  B
2015-02-26  2  C
2015-02-27  3  D
2015-02-28  4  E

print (df.values)
[[0 'A']
 [1 'B']
 [2 'C']
 [3 'D']
 [4 'E']]
  

 if need index values also first convert  datetime  to  string  values in  index  and then use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html for converting  index  to column: 

  df.index = df.index.astype(str)
print (df.reset_index().values)
[['2015-02-24' 0 'A']
 ['2015-02-25' 1 'B']
 ['2015-02-26' 2 'C']
 ['2015-02-27' 3 'D']
 ['2015-02-28' 4 'E']]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38487981)
 Just look at the index if you have an Index. If you have a MultiIndex, see @jezrael's answer with  get_level_values . 

  means.index.tolist()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45962644)
 Use DataFrame constructor only with parameter columns: 

  df = pd.DataFrame(a, columns=['a'])
print (df)
            a
0   26.854065
1   27.854065
2   28.854065
3   29.854065
4   30.854065
5   31.854065
6   32.854065
7   33.854065
8   34.854065
9   35.854065
10  36.854065
11  37.854065
12  38.854065
13  39.854065
14  40.854065
15  41.854065
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17242374)
 To get a NumPy array, you should use the  values  attribute: 

  In [1]: df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['a', 'b', 'c']); df
   A  B
a  1  4
b  2  5
c  3  6

In [2]: df.index.values
Out[2]: array(['a', 'b', 'c'], dtype=object)
  

  This accesses how the data is already stored, so there's no need for a conversion. 
Note: This attribute is also available for many other pandas' objects.  

  In [3]: df['A'].values
Out[3]: Out[16]: array([1, 2, 3])
  

 

 To get the index as a list, call  tolist : 

  In [4]: df.index.tolist()
Out[4]: ['a', 'b']
  

 . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19961557)
 You can pivot your DataFrame after creating: 

  >>> df = pd.DataFrame(data)
>>> df.pivot(index=0, columns=1, values=2)
# avg DataFrame
1      c1     c2
0               
r1  avg11  avg12
r2  avg21  avg22
>>> df.pivot(index=0, columns=1, values=3)
# stdev DataFrame
1        c1       c2
0                   
r1  stdev11  stdev12
r2  stdev21  stdev22
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50107507)
 You can use the ascending parameter in sort_index, but you must pass it as a list for it to work correctly as of pandas 0.22.0. 

  import pandas as pd
import numpy as np
df = pd.DataFrame({'idx_0':[2]*6+[1]*5,
                   'idx_1':[6,4,2,10,18,5,11,1,7,9,3],
                   'value_1':np.arange(11,0,-1),
                   'MyName':list('SORTEDFRAME')})

df = df.set_index(['idx_0','idx_1'])
df
  

 Output: 

              MyName  value_1
idx_0 idx_1                
2     6          S       11
      4          O       10
      2          R        9
      10         T        8
      18         E        7
      5          D        6
1     11         F        5
      1          R        4
      7          A        3
      9          M        2
      3          E        1
  

 Sorting by values and index should get "FRAMESORTED" instead of "SORTEDFRAME" 

  df.sort_values('value_1', ascending=False)\
  .sort_index(level=0, ascending=[True])
  

 Output: 

              MyName  value_1
idx_0 idx_1                
1     11         F        5
      1          R        4
      7          A        3
      9          M        2
      3          E        1
2     6          S       11
      4          O       10
      2          R        9
      10         T        8
      18         E        7
      5          D        6
  

 Note you must pass  ascending  parameter in  sort_index  as a list and not as a scalar.  . 



