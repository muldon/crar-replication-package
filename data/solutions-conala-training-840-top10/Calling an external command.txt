Query: Calling an external command
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23030076)
 Use https://docs.python.org/2/library/subprocess.html: 



<pre class="lang-python prettyprint-override"> from subprocess import call

# using list
call(["echo", "Hello", "world"])

# single string argument varies across platforms so better split it
call("echo Hello world".
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/89262)
 https://docs.python.org/2/library/subprocess.html 

 ...or for a very simple command: 

  import os
os.system('cat testfile')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50101887)
 It can be this simple: 

  import os
cmd = "your command"
os.system(cmd)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26305089)
 There is also http://plumbum.readthedocs.org/en/latest/ 

  >>> from plumbum import local
>>> ls = local["ls"]
>>> ls
LocalCommand(<LocalPath /bin/ls>)
>>> ls()
u'build.py\ndist\ndocs\nLICENSE\nplumbum\nREADME.rst\nsetup.py\ntests\ntodo.txt\n'
>>> notepad = local["c:\\windows\\notepad.exe"]
>>> notepad()                                   # Notepad window pops up
u''                                             # Notepad window is closed by user, command returns
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51553614)
 use the os module 

  import os
os.system("your command")
  

  

  import os
os.system("ifconfig")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37877635)
 In Windows you can just import the  subprocess  module and run external commands by calling  subprocess.Popen() ,  subprocess.Popen().communicate()  and  subprocess.Popen().wait()  as below: 

  # Python script to run a command line
import subprocess

def execute(cmd):
    """
        Purpose  : To execute a command and return exit status
        Argument : cmd - command to execute
        Return   : exit_code
    """
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (result, error) = process.communicate()

    rc = process.wait()

    if rc != 0:
        print "Error: failed to execute command:", cmd
        print error
    return result
# def

command = "tasklist | grep python"
print "This process detail: \n", execute(command)
  

 Output: 

  This process detail:
python.exe                     604 RDP-Tcp#0                  4      5,660 K
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16072857)
 Without the output of the result: 

  import os
os.system("your command here")
  

 With output of the result: 

  import commands
commands.getoutput("your command here")
or
commands.getstatusoutput("your command here")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49644672)
  Calling an external command in Python  

 A simple way to call an external command is using  os.system(...) . And this function returns the exit value of the command. But the drawback is we won't get stdout and stderr. 

  ret = os.system('some_cmd.sh')
if ret != 0 :
    print 'some_cmd.sh execution returned failure'
  

  Calling an external command in Python in background  

  subprocess.Popen  provides more flexibility for running an external command rather than using  os.system . We can start a command in the background and wait for it to finish. And after that we can get the stdout and stderr. 

  proc = subprocess.Popen(["./some_cmd.sh"], stdout=subprocess.PIPE)
print 'waiting for ' + str(proc.pid)
proc.wait()
print 'some_cmd.sh execution finished'
(out, err) = proc.communicate()
print 'some_cmd.sh output : ' + out
  

  Calling a long running external command in Python in the background and stop after some time  

 We can even start a long running process in the background using  subprocess.Popen  and kill it after sometime once its task is done. 

  proc = subprocess.Popen(["./some_long_run_cmd.sh"], stdout=subprocess.PIPE)
# Do something else
# Now some_long_run_cmd.sh exeuction is no longer needed, so kill it
os.system('kill -15 ' + str(proc.pid))
print 'Output : ' proc.communicate()[0]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31618111)
 Using the  Popen  function of the  subprocess  Python module is the simplest way of running Linux commands. In that, the  Popen.communicate()  function will give your commands output. For example 

  import subprocess

..
process = subprocess.Popen(..)   # Pass command and arguments to the function
stdout, stderr = process.communicate()   # Get command output and error
..
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13106558)
 This is how I run my commands. This code has everything you need pretty much 

  from subprocess import Popen, PIPE
cmd = "ls -l ~/"
p = Popen(cmd , shell=True, stdout=PIPE, stderr=PIPE)
out, err = p.communicate()
print "Return code: ", p.returncode
print out.rstrip(), err.rstrip()
  



