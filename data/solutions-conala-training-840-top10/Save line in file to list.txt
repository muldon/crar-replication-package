Query: Save line in file to list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13434166)
 You can use  map  with  str  here: 

  pList = [5, 9, 2, -1, 0]
with open("data.txt", 'w') as f:
    f.write("\n".join(map(str, pList)))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/51707744)
 You could change your code to check if anything was found on each different line: 

  var=[]
with open('C:/Maryam/example/test.txt', 'r') as file:
    for line in file:
        was_found=False
        for item in var:
            if item in line:
                var.append(line)
                was_found=True
        if not was_found:
            var.append("NA")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51715650)
 The 'for-break-else' construction can be used,too: 

  for item in ls:
    if item in line:
        var.append(line)
        break
else:
        var.append("NA")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39112767)
  >>> [line.split() for line in open('File.txt')]
[['hi'], ['hello'], ['cat'], ['dog']]
  

 Or, if we want to be more careful about making sure that the file is closed: 

  >>> with open('File.txt') as f:
...    [line.split() for line in f]
... 
[['hi'], ['hello'], ['cat'], ['dog']]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27745826)
  pickle  and other serialization packages work.    .py  file that you can then import. 

  >>> score = [1,2,3,4,5]
>>> 
>>> with open('file.py', 'w') as f:
...   f.write('score = %s' % score)
... 
>>> from file import score as my_list
>>> print(my_list)
[1, 2, 3, 4, 5]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39112753)
  sentence_lists = []
with open('file') as f:
    for s in f:
        sentence_lists.append([s.strip()])
  

  
simplified as per  idjaw : 

  with open('file') as f:
    sentence_list = [[s.strip()] for s in f]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51707771)
 I will suggest to use a dictionary instead of a list so you can store an entry for each element to search and the corresponding line (if any,  NA  otherwise): 

  # Initialize the result dictionary
result = {}
for name in ls:
    result[name] = 'NA'

# Process the file
with open('C:/Maryam/example/test.txt', 'r') as file:
    for line in file:
        # For each line check if it contains a reserved keyword
        for name in result.keys():
            if name in line:
                result[name] = line

# Show result (key = name, value = line content)
result

# Show only the values (line contents)
result.values()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13434105)
 Simply open your file, join your list with the desired delimiter, and print it out. 

  outfile = open("file_path", "w")
print >> outfile, "\n".join(str(i) for i in your_list)
outfile.close()
  

 Since the list contains integers, it's needed the conversion. (Thanks for the notification,  Ashwini Chaudhary). 

 No need to create a temporary list, since the generator is iterated by the join method (Thanks, again, Ashwini Chaudhary). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47897111)
 I agree with another response -- the best you can do is to  json.dump  each  dict  individually and write the commas and newlines manually. Here is how I would do that: 

  import json

data = [
    {"key01":"value","key02":"value"},
    {"key11":"value","key12":"value"},
    {"key21":"value","key22":"value"}
]

import json
with open('file.json', 'w') as fp:
    fp.write(
        '[' +
        ',\n'.join(json.dumps(i) for i in data) +
        ']\n')
  

 Result: 

<pre class="lang-json prettyprint-override"> [{"key01": "value", "key02": "value"},
{"key12": "value", "key11": "value"},
{"key22": "value", "key21": "value"}]
  



