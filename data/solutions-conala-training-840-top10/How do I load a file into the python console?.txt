Query: How do I load a file into the python console?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5280207)
 You can just use an import statement: 

  from file import *
  

 So, for example, if you had a file named  my_script.py  you'd load it like so: 

  from my_script import *
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5280202)
  

  python file.py
  

 From the Python command line 

  impt file
  

  

  from file impt *
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/23549245)
 If you're using IPython, you can simply run: 

  %load path/to/your/file.py
  

 See http://ipython.org/ipython-doc/rel-1.1.0/interactive/tutorial.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5280205)
 For Python 2 (see other answers for Python 3) give this a try: 

  execfile('file.py')
  

 Example usage: 

  C:\junk>copy con execfile_example.py
a = [9, 42, 888]
b = len(a)
^Z
        1 file(s) copied.

C:\junk>\python27\python
Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> execfile('execfile_example.py')
>>> a
[9, 42, 888]
>>> b
3
>>>
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36491928)
 Open command prompt in the folder in which you files to be imported are present. when you type 'python', python terminal will be opened. Now you can use    import script_name  Note: no .py extension to be used while importing.  https://stackoverflow.com/questions/60904/how-can-i-open-a-cmd-window-in-a-specific-location 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12058784)
 You need to load and parse the YAML file: 

  import yaml
logging.config.dictConfig(yaml.load(open('logging.config', 'r')))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5280210)
 From the man page: 

 
   -i     When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command.  It does not read the $PYTHONSTARTUP file.  This can be useful to inspect global variables or a stack trace when a script raises an exception. 
 

 So this should do what you want: 

  python -i file.py
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27097587)
 When you click run (in pycharm) it executes the file in a different instance of python for debugging and all that. The python console window, is totally different. Its not linked to your code. Its there to execute python commands and tests stuff just like you would do in IDLE. 

 When you do  Execute Selection in Console , this basically executes your file in the console instead of running it on its own. 

 Its something like this you would do in IDLE when you want to execute your file:
 exec(open("mycode.py").read())  

 Edit: In your python console, you can execute the above command to load your file in the console. But this is basically the same thing as selecting  Execute Selection in Console  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39143606)
 Ok, so normally to get it done, you have to rewrite python  print  built-in function. But... There is ipython, which provides some hooks. 

 First you need to have  ipython  installed: 

  #bash
sudo pip install ipython
  

 (I'm using sudo to simple locate then folder I need to reach, read further) 

 After ipython installation you'll have ipython extensions folder available, so get to it: 

  #bash
cd ~/.ipython/extensions/
  

 and create there let's say a file called  print_to_file.py , here is its content: 

  #python
class PrintWatcher(object):
    def __init__(self, ip):
        self.shell = ip

    def post_execute(self):
        with open('/home/turkus/shell.txt', 'a+') as f:
            in_len = len(self.shell.user_ns['In'])
            i = in_len - 1

            in_ = self.shell.user_ns['In'][i]
            out = self.shell.user_ns['Out'].get(i, '')
            # you can edit this line if you want different input in shell.txt
            f.write('{}\n{}\n'.format(in_, out))


def load_ipython_extension(ip):
    pw = PrintWatcher(ip)
    ip.events.register('post_run_cell', pw.post_execute)
  

 After saving a file just run: 

  #bash
ipython profile create 

# you will get something like that:
[ProfileCreate] Generating default config file: u'/home/turkus/.ipython/profile_default/ipython_config.py'
  

 Now get back to setting up our hook. We must open  ipython_config.py  created under path above and put there some magic (there is a lot of stuff there, so go to the end of file): 

  # some commented lines here
c = get_config()
c.InteractiveShellApp.extensions = [
    'print_to_file'
]
  

 After saving it, you can run  ipython  and write your code. Every your input will be written in a file under path you provided above, in my case it was: 

  /home/turkus/shell.txt
  

  Notes  

 You can avoid loading your extension every time  ipython  fires up, by just delete  'print_to_file'  from  c.InteractiveShellApp.extensions  list in  ipython_config.py . But remember that you can load it anytime you need, just by typing in  ipython  console: 

  âžœ  ~ ipython
Python 2.7.12 (default, Jul  1 2016, 15:12:24) 
Type "copyright", "credits" or "license" for more information.

IPython 4.0.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: %load_ext print_to_file
  

 Any change in  print_to_file.py  is being reflected in open ipython shell after using  %reload_ext print_to_file  command, so you don't have to exit from and fire up it again. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44798966)
 As you can see in https://docs.djangoproject.com/en/dev/topics/logging/#using-logging
Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework is very simple.  

 So what you see in your console is not really logging but something else 

 If you want to get the stuff in your console into my file you can use pipe and  tee : 

  [the command you want to run] | tee you_log_file.log
  

 For example: 

  ifconfig | tee ifconfig.log
  

 you will get the output in your console and the file ifconfig.log. 



