Query: How do I draw a grid onto a plot in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8210686)
 You want to use  pyplot.grid : 

  x = numpy.arange(0, 1, 0.05)
y = numpy.power(x, 2)

fig = plt.figure()
ax = fig.gca()
ax.set_xticks(numpy.arange(0, 1, 0.1))
ax.set_yticks(numpy.arange(0, 1., 0.1))
plt.scatter(x, y)
plt.grid()
plt.show()
  

  ax.xaxis.grid  and  ax.yaxis.grid  can control grid lines properties. 

   


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43007677)
 using  rcParams  you can show grid very easily as follows 

  plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['axes.edgecolor'] = 'white'
plt.rcParams['grid.alpha'] = 1
plt.rcParams['grid.color'] = "#cccccc"
  

 If grid is not showing even after changing these parameters then use 

  plt.grid(True)
  

  

  plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37896687)
 To show a grid line on every tick, add  

  plt.grid(True)
  

  For example:  

  import matplotlib.pyplot as plt

points = [
    (0, 10),
    (10, 20),
    (20, 40),
    (60, 100),
]

x = list(map(lambda x: x[0], points))
y = list(map(lambda x: x[1], points))

plt.scatter(x, y)
plt.grid(True)

plt.show()
  

 https://i.stack.imgur.com/f5coW.png 

 

 In addition, you might want to customize the styling (e.g. solid line instead of dashed line), add: 

  plt.rc('grid', linestyle="-", color='black')
  

  For example:  

  import matplotlib.pyplot as plt

points = [
    (0, 10),
    (10, 20),
    (20, 40),
    (60, 100),
]

x = list(map(lambda x: x[0], points))
y = list(map(lambda x: x[1], points))

plt.rc('grid', linestyle="-", color='black')
plt.scatter(x, y)
plt.grid(True)

plt.show()
  

 <a href="https://i.stack.imgur.com/xdwNu.png"  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8210731)
 The http://matplotlib.sourceforge.net/examples/index.html is a very useful source. The example relevant for your question: 

 http://matplotlib.sourceforge.net/mpl_examples/pylab_examples/scatter_demo2.py
http://matplotlib.sourceforge.net/users/screenshots.html#scatter-demo 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31400007)
 An easy way would be to add a grid just by calculating some pixels yourself: 

  from graphics import *

def main():
    win = GraphWin('Floor', 500, 500)

    win.setCoords(0.0, 0.0, 10.0, 10.0)
    win.setBackground("yellow")

    # draw grid
    for x in range(10):
        for y in range(10):
            win.plotPixel(x*50, y*50, "blue")

    square = Rectangle(Point(5,5), Point(6,6))
    square.draw(win)
    square.setFill("black")

    win.getMouse()
    win.close()

main()
  

 Which adds a 10x10 pixel grid to your yellow window: 

   

 You could do the same by drawing whole lines (as described in the http://mcsp.wartburg.edu/zelle/python/graphics/graphics/node5.html) if necessary, at cost of drawing speed (depending on how big your grid size should be). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20036478)
 . The trick I've used is to double-up each x and y-coordinate with  np.repeat  and then offset them by 1 to generate the coordinates of each corner. Let me know if this needs better explanation. You can add grid lines with  plt.grid(True) . 

  import numpy as np
import matplotlib.pyplot as plt

data = [1, 0, 0, 1, 1, 0, 1, 0]
xs = np.repeat(range(len(data)), 2)
ys = np.repeat(data, 2)
xs = xs[1:]
ys = ys[:-1]
plt.plot(xs, ys)
plt.ylim(-0.5, 1.5)
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53156234)
 You overwrote the  canvas '  draw  method without reimplementing it. But since you do not want to update your plot on every draw-event anyways, I'd suggest to call the method to update the plot differently, e.g.  draw_lists . Inside  draw_lists  you would then need to call the  draw  method of the canvas (or in this case better  draw_idle ). 

  from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

class Plotter(FigureCanvasTkAgg):

    def __init__(self, master):

        self.figure = Figure(dpi=100)
        super().__init__(self.figure, master=master)
        self.axes = self.figure.add_subplot(111)
        self.get_tk_widget().grid(column=0, row=0, sticky='nsew')

    def draw_lists(self):

        self.axes.clear()
        x_list = [x for x in range(0, 100)]
        y_list = [x^3 for x in x_list]
        self.axes.plot(x_list, y_list, color='y')
        self.draw_idle()



from tkinter import ttk 
import tkinter as tk


class MainApplication(ttk.Frame):

    def __init__(self, master, *args, **kwargs):

        super().__init__(root)
        self.grid(column=0, row=0, sticky='nsew')

        frame = ttk.Frame(self, borderwidth=8)
        frame.grid(column=0, row=0, sticky='nsew')
        frame.rowconfigure(0, weight=1)

        notes = ttk.Notebook(frame)
        notes.grid(column=0, row=0, sticky='nsew')
        notes.rowconfigure(0, weight=1)

        page = ttk.Frame(notes)
        notes.add(page, text='Picture')


        plot = Plotter(page)

        input_frame = ttk.Frame(self)
        input_frame.grid(column=1, row=0, sticky='nsew')

        # this binding doesn't update the plot
        button = ttk.Button(input_frame, text='Plot', \
                            command=lambda: plot.draw_lists())
        button.grid(column=0, row=4, columnspan=2, sticky='ew')


root = tk.Tk() 
MainApplication(root)
root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36152188)
 By creating a  JointGrid  in seaborn, you have created three axes, the main  ax_joint , and the two marginal axes. 

 To plot something else on the joint axes, we can access the joint grid using  grid.ax_joint , and then create plot objects on there as you would with any other  matplotlib   Axes  object. 

 For example: 

  import seaborn as sns
import matplotlib.pyplot as plt

iris = sns.load_dataset("iris")    
grid = sns.JointGrid(iris.petal_length, iris.petal_width, space=0, size=6, ratio=50)

# Create your scatter plot
grid.plot_joint(plt.scatter, color="g")

# Create your line plot.
grid.ax_joint.plot([0,4], [1.5,0], 'b-', linewidth = 2)
  

 As an aside, you can also access the marginal axes of a  JointGrid  in a similar way: 

  grid.ax_marg_x.plot(...)
grid.ax_marg_y.plot(...)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5136064)
 What you want is the  grid  keyword (if I understood the question correctly): 

  fig=figure()
ax = fig.add_subplot(111,projection="3d")
ax.plot(X,Y,Z)
ax.grid(on=False)
show()
  

 It would help to see how you are setting up your plot, but at least for me messing around in  pylab ,  ax.grid(on=False)  did the trick. This turns off the grid projected onto the sides of the cube. See the mplot3d API for more details: 

 http://matplotlib.sourceforge.net/mpl_toolkits/mplot3d/api.html 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43645995)
 The circle in this polar representation will not look like a circle on a rectangular grid (i.e. "round"). Apart from that you can draw a circle just as you would on the cartesian plane, starting in polar coordinates, transforming to cartesian coordinates, offset the center and use the plot function. 

  summerAzi = np.array([0, 360])
summerAlt = -np.array([40, 4])
summerX, summerY = myMap(summerAzi, summerAlt)

phi = np.linspace(0,2.*np.pi)
r = np.abs(np.diff(summerAlt))/2.
x = r*np.cos(phi)
y = -r*np.sin(phi)+summerAlt.mean()
X,Y= myMap(x,y)

myMap.plot(X,Y, color="crimson")
myMap.plot(summerX, summerY, color="gold", marker="o")
  

 https://i.stack.imgur.com/RO7rv.png 



