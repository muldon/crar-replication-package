Query: How can I access elements inside a list within a dictionary python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29882045)
 You can join the elements of categories: 

  >>> categories = [u'Transfer', u'Withdrawal', u'ATM']
>>> ",".join(categories)
u'Transfer,Withdrawal,ATM'
  

 and use it instead when printing your output: 

  ",".join(trans['category'])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38148358)
 You can use  .values()  to access the  values in the dictionary, then iterate over the values lists and index the respective items in the tuple: 

  tuple1_vector = []
tuple2_vector = []
for v in d.values():
    for t in v:
        tuple1_vector.append(t[0])
        tuple2_vector.append(t[1]) 
  

 You can also do this with a list comprehension: 

  tuple1_vector = [t[0]  for v in d.values() for t in v]
tuple2_vector = [t[1]  for v in d.values() for t in v]

print(tuple1_vector)
# ['Cats', 'Dogs', 'Hi', 'Bye']
print(tuple2_vector)
# ['Blue', 'Red', 1, 2]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44146446)
 You have to access elements of the dictionary using their key.
In the example keys are 'A' and 'B'.
You are trying to access the dictionary using an integer and that gives you the range error. 

 The following function works: 

  def divide_dic(dic):
    dic2 = {}

    # Iterate through the dictionary based on keys.
    for dic_iter in dic:

        # Create a copy of the dictionary list divided by 2.
        list_values = [ (x / 2) for x in  dic[dic_iter] ]

        # Add the dictionary entry to the new dictionary.
        dic2.update( {dic_iter : list_values} )

    return dic2
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3817574)
 You can declare a dictionary inside a dictionary by nesting the {} containers: 

  d = {'dict1': {'foo': 1, 'bar': 2}, 'dict2': {'baz': 3, 'quux': 4}}
  

 And then you can access the elements using the [] syntax: 

  print d['dict1']           # {'foo': 1, 'bar': 2}
print d['dict1']['foo']    # 1
print d['dict2']['quux']   # 4
  

 Given the above, if you want to add another dictionary to the dictionary, it can be done like so: 

  d['dict3'] = {'spam': 5, 'ham': 6}
  

 or if you prefer to add items to the internal dictionary one by one: 

  d['dict4'] = {}
d['dict4']['king'] = 7
d['dict4']['queen'] = 8
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52682745)
 If the list elements are hashable, you can use  .setdefault  to build an inverse mapping like so: 

  >>> sample_dict = {"1": ['a','b','c'], "2": ['d','e','f'], "3": ['g','h','a']}
>>> aux = {}
>>> for k, v in sample_dict.items():
...     for i in v:
...         aux.setdefault(i, []).append(k)
... 
>>> [[v, k] for k, v in aux.items() if len(v) > 1]
[[['1', '3'], 'a']]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22783812)
 Your code is not appending elements to the lists; you are instead replacing the list with single elements. To access values in your existing dictionaries, you must use indexing, not attribute lookups ( item['name'] , not  item.name ). 

 Use https://docs.python.org/2/library/collections.html#collections.defaultdict: 

  from collections import defaultdict

example_dictionary = defaultdict(list)
for item in root_values:
    example_dictionary[item['name']].append(item['value'])
  

  defaultdict  is a  dict  subclass that uses the https://docs.python.org/2/library/stdtypes.html#mapping-types-dict to auto-materialize values if the key doesn't yet exist in the mapping. 

 or use https://docs.python.org/2/library/stdtypes.html#dict.setdefault: 

  example_dictionary = {}
for item in root_values:
    example_dictionary.setdefault(item['name'], []).append(item['value'])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9153682)
 To get all the first elements: 

  zip(*your_list)[0]
  

  zip(*some_iterable)  does some kind of matrix inversion - you should play a bit with it to get an idea. 

 To remove all the first values from a set of iterables you may choose a few ways.  E.g.: 

  [item[1:] for item in your_list]  # probably the best
zip(*zip(*your_list)[1:])  # tricky and probably slow one
  

 To sum your values you'd need a dictionary: 

  >>> from collections import defaultdict
>>> l = [[1, 23], [2, 34], [3, 45], [1, 45], [2, 44]]
>>> d = defaultdict(int)
>>> for item in l:
    d[item[0]] += item[1]

>>> d.items()
[(1, 68), (2, 78), (3, 45)]
  

 We use  defaultdict  here to be able to perform this  d[item[0]] += item[1]  assigment.  With simple  dict  we'd get a  KeyError , since our  d  is empty.  But  defaultdict  in this case just returns default value -  int() , which is  0 . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38088525)
 A bit more straightforward is: 

  df['C'] = df['A'] + df['B'].apply(lambda x:x[1])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38148313)
 I assume you mean your dict is: 

  your_dict = {'Key1': [('Hi', 1), ('Bye', 2)], 'Key2': [('Cats', 'Blue'), ('Dogs', 'Red')]}
  

 You can iterate over all the keys, get whatever tuple is in there, and then iterate over all the entries inside that tuple. There probably is an easier way but this should at least get you there: 

  for key in your_dict:
    for t in your_dict[key]:
        for i in t:
            print(i)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/46306694)
 'temp_C' is a key inside dictionary that is inside a list that is inside a dictionary 

 This way works: 

  wjson['data']['current_condition'][0]['temp_C']
>> '10'
  



