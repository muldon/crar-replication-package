Query: Python: Want to use a string as a slice specifier
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12616901)
 You can use the built-in  slice  function 

  s = slice(1,3)
b[s,s]

ds = (s,s)
b[ds]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13324646)
 This can be done without much hacking by using a list comprehension. We split the string on  : , passing the split items as arguments to the  slice()  builtin. This allows us to quite nicely produce the slice in one line, in a way which works in every case I can think of: 

  slice(*[int(i.strip()) if i else None for i in string_slice.split(":")])
  

 By using the  slice()  builtin, we neatly avoid having to deal with too many edge cases ourselves. 

 Example usage: 

  >>> some_list = [1, 2, 3]
>>> string_slice = ":2"
>>> some_list[slice(*[int(i.strip()) if i else None for i in string_slice.split(":")])]
[1, 2]
>>> string_slice = "::-1"
>>> some_list[slice(*[int(i.strip()) if i else None for i in string_slice.split(":")])]
[3, 2, 1]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13324730)
  

  eval("L[%s]" % S) 
  

  warning - http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html if S is coming from an external(unreliable) source.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12618222)
 http://docs.scipy.org/doc/numpy/reference/generated/numpy.s_.html#numpy-s provide a convenient way of doing this: 

  the_slice = numpy.index_exp[1:3, 1:3]
b[the_slice]
  

 They can't do anything that you can't do with a combination of  slice , tuples,  None , and  Ellipsis , but they allow you to use exactly the same syntax as you would use to slice an array (the only difference between  s_  and  index_exp  is that for a one-dimensional slice,  s_  returns a slice object, while  index_exp  wraps it in a tuple). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52668745)
 (Using function semantics) Calling the  slice  class instantiates a  slice  object (start,stop,step), which you can use as a slice specifier later in your program: 

  >>> myname='Rufus'
>>> myname[::-1] # reversing idiom
'sufuR'

>>> reversing_slice=slice(None,None,-1) # reversing idiom as slice object
>>> myname[reversing_slice]
'sufuR'

>>> odds=slice(0,None,2) # another example
>>> myname[odds]
'Rfs'
  

 If you had a slice you often used, this is preferable to using constants in multiple program areas, and save the pain of keeping 2 or 3 references that had to be typed in
each time. 

 Of course, it does make it look like an index, but after using Python a while, you learn that everything is not what it looks like at first glance, so I recommend naming your variables better (as I did with  reversing_slice , versus  odds  which isn't so clear. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20686663)
 Using http://docs.python.org/2/library/stdtypes#str.format or http://docs.python.org/2/library/functions.html#format with  ,  as format specifier: 

  >>> '{:,}'.format(12345)
'12,345'
>>> format(12345, ',')
'12,345'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30076885)
 You can Use  format  

 Or %s specifier 

  print "Your total trip cost is: {}".format(trip_cost(city, days, spending_money))
  

  

  print "Your total trip cost is: %s"%(trip_cost(city, days, spending_money))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53011402)
 A format specifier can itself contain replacement fields. You can use:    

  print("{0:^{num}s}".format("hello", num=30))
#                hello 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39133360)
 As an alternative to https://stackoverflow.com/q/312443, for strings, you can use a regex to group and replace: 

  >>> '0b' + re.sub(r'(\d{4})(?!$)', r'\1_', format(int('0x1234', 16), '016b'))
'0b0001_0010_0011_0100'
  

 In Python 3.6, you will be able to do this with a format specifier (see https://www.python.org/dev/peps/pep-0515/#further-changes) 

  '0b' + format(int('0x1234', 16), '016_b')
  

 or, if you prefer: 

  '0b{:016_b}'.format(int('0x1234', 16))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30781664)
 To be safe (in the sense: this will work in all cases), you need to index both row index and columns, for which you can use  pd.IndexSlice  to do this easily: 

  In [26]: idx = pd.IndexSlice

In [27]: df.loc[idx[:, :, 'C1', :],:]
Out[27]:
                           value
first second third fourth
A0    B0     C1    D0          2
                   D1          3
      B1     C1    D0         10
                   D1         11
A1    B0     C1    D0         18
                   D1         19
      B1     C1    D0         26
                   D1         27
A2    B0     C1    D0         34
                   D1         35
      B1     C1    D0         42
                   D1         43
A3    B0     C1    D0         50
                   D1         51
      B1     C1    D0         58
                   D1         59
  

 Here  idx[:, :, 'C1', :]  is an easier way to write  [slice(None), slice(None),'C1', slice(None)] . Instead of  pd.IndexSlice , you can also use  np.s_  which is a bit shorter. 

 The reason that the other ones work, I am not fully sure of. But see the note in the documentation here: http://pandas.pydata.org/pandas-docs/stable/advanced.html#using-slicers (the first red warning box) where it is stated that: 

 
   You should specify all axes in the  .loc  specifier, meaning the indexer for the index and for the columns. Their are some ambiguous cases where the passed indexer could be mis-interpreted as indexing  both  axes, rather than into say the MuliIndex for the rows. 
 



