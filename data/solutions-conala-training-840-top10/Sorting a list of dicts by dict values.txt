Query: Sorting a list of dicts by dict values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10732553)
 or may be you can simply do  

  Updated  for sort by values  

  In [41]: r={"data": [{"L": "Leinster"}, {"RN": "Roscommon"}, {"G": "Galway"}, {"LS": "Laois"}, {"LD": "Longford"}, {"OY": "Offaly"}, {"KK": "Kilkenny"}, {"SO": "Sligo"}, {"C": "Connaught"}, {"CO": "Cork"}, {"M": "Munster"}, {"WD": "Waterford"}, {"CE": "Clare"}]}

In [42]: for v in r.itervalues():
....:     v.sort(key=dict.values)
....: 

In [43]: r
Out[43]:  
{'data': [{'CE': 'Clare'},
      {'C': 'Connaught'},
      {'CO': 'Cork'},
      {'G': 'Galway'},
      {'KK': 'Kilkenny'},
      {'LS': 'Laois'},
      {'L': 'Leinster'},
      {'LD': 'Longford'},
      {'M': 'Munster'},
      {'OY': 'Offaly'},
      {'RN': 'Roscommon'},
      {'SO': 'Sligo'},
      {'WD': 'Waterford'}]}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16412601)
 You can't sort a dict, but can get a sorted list of keys, values or (key,values) pairs.  

  >>> dic = {'i': {'Fisher': -0.2222222222222222, '#': 1}, 'of': {'Fisher': 2.0, '#': 1}, 'will': {'Fisher': 3.5, '#': 1}, 'course': {'Fisher': 4.0, '#': 1}}

>>> sorted(dic.items(), key=lambda x: x[1]['Fisher'], reverse=True)
[('course', {'Fisher': 4.0, '#': 1}),
 ('will', {'Fisher': 3.5, '#': 1}),
 ('of', {'Fisher': 2.0, '#': 1}),
 ('i', {'Fisher': -0.2222222222222222, '#': 1})
]
  

 Or create an http://docs.python.org/2/library/collections.html?highlight=ordereddict#ordereddict-examples-and-recipes(introduced in Python 2.7) after getting the sorted (key,value) pairs: 

  >>> from collections import OrderedDict
>>> od = OrderedDict(sorted(dic.items(), key=lambda x: x[1]['Fisher'], reverse=True))
>>> od
OrderedDict([
('course', {'Fisher': 4.0, '#': 1}),
('will', {'Fisher': 3.5, '#': 1}),
('of', {'Fisher': 2.0, '#': 1}),
('i', {'Fisher': -0.2222222222222222, '#': 1})
])
  

 For your dictionary, try this: 

  >>> from collections import OrderedDict
>>> dic = wd[wc][dist][True]
>>> wd[wc][dist][True]= OrderedDict(sorted(dic.items(), key=lambda x: x[1]['Fisher'], reverse=True))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9849262)
 Iterating over a dictionary (which is what the  sorted  function does) will give you only it's keys: 

  >>> sorted(mydict)
[u'den', u'jaime', u'jon', u'rob']
  

 Instead you want to sort both the keys and values - to do this, you would use  mydict.items()  (or  mydict.iteritems() , which is more efficient with large dicts): 

  >>> sorted(mydict.items())
[(u'den', 26), (u'jaime', 31), (u'jon', 30), (u'rob', 42)]
  

 Then your code would work as expected: 

  >>> from operator import itemgetter
>>> sorted(mydict.items(), key = itemgetter(1))
[(u'den', 26), (u'jon', 30), (u'jaime', 31), (u'rob', 42)]
  

 You may also want to sort with the dict's key as the secondary sort value, in case multiple keys have the same value: 

  >>> mydict={u'a': 1, 'z': 1, 'd': 1}
>>> sorted(mydict.items(), key = itemgetter(1))
[(u'a', 1), ('z', 1), ('d', 1)]
>>> sorted(mydict.items(), key = itemgetter(1, 0))
[(u'a', 1), ('d', 1), ('z', 1)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47359345)
 You have two issues: Sorting the nested dictionary of dicts and maintaining the sorted result in a dict. In Python, dicts are unordered.  

 To sort the dict of dicts that you used as an example: 

  import calendar 
months=list(calendar.month_name)       # use a dict if you have lots of data...
myDictODicts= {'Green Cars': {'April': 11455.0, 'March': 12210, 'February': 2559, 'August': 1439, 'July': 4921, 'January': 340, 'December': 340, 'November': 340, 'October': 306, 'September': 6}, 
'Yellow cars': {'April': 192914, 'March': 20187, 'February': 20994, 'January': 230625, 'December': 208422, 'November': 17914, 'October': 170835, 'September': 185357, 'July': 226697, 'May': 1852, 'August': 22096}, 
'Red Cars': {'April': 159, 'March': 1400, 'February': 2620, 'January': 237, 'August': 2959, 'July': 6943}}

for k in myDictODicts:
    print(k, sorted(myDictODicts[k].items(), key=lambda t: months.index(t[0])))
  

  

  Green Cars [('January', 340), ('February', 2559), ('March', 12210), ('April', 11455.0), ('July', 4921), ('August', 1439), ('September', 6), ('October', 306), ('November', 340), ('December', 340)]
Yellow cars [('January', 230625), ('February', 20994), ('March', 20187), ('April', 192914), ('May', 1852), ('July', 226697), ('August', 22096), ('September', 185357), ('October', 170835), ('November', 17914), ('December', 208422)]
Red Cars [('January', 237), ('February', 2620), ('March', 1400), ('April', 159), ('July', 6943), ('August', 2959)]
  

 You can either use the list of tuples or recreate a dict directly using those. 
With Python 3.6, you can turn that sorted list of tuples back into a dict that will maintain its insertion order. You can also use an https://docs.python.org/3.5/library/collections.html#collections.OrderedDict that will appear to the rest of your code as a  dict  would. 

 Example: 

  from collections import OrderedDict
nd={}
for k in myDictODicts:
    nd[k]=OrderedDict(sorted(myDictODicts[k].items(), key=lambda t: months.index(t[0])))

>>> nd
{'Green Cars': OrderedDict([('January', 340), ('February', 2559), ('March', 12210), ('April', 11455.0), ('July', 4921), ('August', 1439), ('September', 6), ('October', 306), ('November', 340), ('December', 340)]), 'Yellow cars': OrderedDict([('January', 230625), ('February', 20994), ('March', 20187), ('April', 192914), ('May', 1852), ('July', 226697), ('August', 22096), ('September', 185357), ('October', 170835), ('November', 17914), ('December', 208422)]), 'Red Cars': OrderedDict([('January', 237), ('February', 2620), ('March', 1400), ('April', 159), ('July', 6943), ('August', 2959)])}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45246448)
 You can avoid sorting by iterating over the existing, ordered keys in  B : 

 
 Merge list  A  into a single lookup dict 
 Build a new list from the order in  B , using the lookup dict to find the value matching each key 
 

 Code: 

  import itertools

merged_A = {k: v for d in A for k, v in d.items()}
sorted_A = [{k: merged_A[k]} for k in itertools.chain.from_iterable(B)]
# [{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  

 

 If required, you can preserve the original dict objects from  A  instead of building new ones: 

  keys_to_dicts = {k: d for d in A for k in d}
sorted_A = [keys_to_dicts[k] for k in itertools.chain.from_iterable(B)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47913285)
 You can sort both lists before comparing them and compare the sorted results: 

  >>> list_dict_a = [
        {'expiration_date': None, 'identifier_country': None, 'identifier_number': 'Male', 'identifier_type': 'Gender', 'issue_date': None},
        {'expiration_date': None, 'identifier_country': 'VE', 'identifier_number': '1234567', 'identifier_type': 'Foo No.', 'issue_date': None}]

>>> list_dict_b = [
        {'identifier_country': 'VE', 'expiration_date': None, 'identifier_type': 'Foo No.', 'issue_date': None, 'identifier_number': '1234567'},
        {'identifier_country': None, 'expiration_date': None, 'identifier_type': 'Gender', 'issue_date': None, 'identifier_number': 'Male'}]

>>> list_dict_a == list_dict_b
False
>>> def key_func(d):
        items = ((k, v if v is not None else '') for k, v in d.items())
        return sorted(items)
>>> sorted(list_dict_a, key=key_func) == sorted(list_dict_b, key=key_func)
True
  

 The order of the dicts within each list will then not matter. 

 Passing the  key  function is needed, because dicts are not orderable, thus we need to tell the sorting function what key to use for each pair of dict objects when comparing them. A key for each dictionary is simply a sorted list of its (key, value) pairs. 

 The key function calculates a key for each dict as follows: 

  >>> dict_a0 = list_dict_a[0]
>>> key_func(dict_a0)
[('expiration_date', ''), ('identifier_country', ''), ('identifier_number', 'Male'), ('identifier_type', 'Gender'), ('issue_date', '')]
  

  Footnotes  

 In order for this list of (key, value) pairs to be comparable with other dicts' lists,  None  values had to be converted to an empty string. This allows None values to be comparable with other non-None values. 

 The underlying assumption in the solution above is that all dictionary values in your case are either strings or  None , and that "empty" values are consistently represented as  None  (and not e.g. by an empty string). If this is not the case,  key_func()  would have to be adjusted accordingly to assure that the resulting lists are always comparable to each other for any dict value expected in the data. 

 Also, for large dicts this key function might not be ideal, because comparisons of key pairs would be too slow. It would thus be better to instead calculate a unique hash value for each dict (but the same hash for dicts that compare equal). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10915468)
 You can pass a http://wiki.python.org/moin/HowTo/Sorting#Key_Functions parameter to the  list.sort()  method, so the comparison will be made in function of the returning value of  key : 

  >>> a = [{23:100}, {3:103}, {2:102}, {36:103}, {43:123}]
>>> a.sort(key=lambda d: d.values()[0], reversed=True)
>>> a
[{23: 100}, {2: 102}, {3: 103}, {36: 103}, {43: 123}]
  

 In this case, the key is a function which receives a dictionary  d  and gets a list of its value with  .values() . Since there is just one value, we get this only value from the returned list. Then, the  list.sort()  method will compare those returned values, instead of the dictionaries themselves, when sorting. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50335538)
 In python 3, the other answers no longer work because https://docs.python.org/3/library/stdtypes.html#dict.values now returns a dict view object rather than a list. To extract the value from the view object, we can use a combination of https://docs.python.org/3/library/functions.html#iter and https://docs.python.org/3/library/functions.html#next: 

  a.sort(key=lambda dic: next(iter(dic.values())), reverse=True)
  



