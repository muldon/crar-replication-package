Query: How to sort python list of strings of numbers
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17474264)
 You want to sort based on the  float  values (not string values), so try:     

  >>> b = ["949.0","1099.0"]
>>> b.sort(key=float)
>>> b
['949.0', '1099.0']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17474253)
 Convert them to  int  or  float  or even  decimal  (since it has trailing numbers) 

  >>> b = [float(x) for x in b]
>>> b.sort()
>>> b
[949.0, 1099.0]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17474238)
 They are both sorted.
'1' comes before '9'. Look at here:
http://www.asciitable.com/ 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29373934)
 You could provide a custom  key  argument which gives a lower value to strings than it does to ints: 

  >>> c = ['c', 'b', 'd', 'a', 4, 2, 1, 3]
>>> c.sort(key = lambda item: ([str,int].index(type(item)), item))
>>> c
['a', 'b', 'c', 'd', 1, 2, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24624700)
  >>> a = ['big', 'apple', '42nd street', '25th of May', 'subway']
>>> sorted(a, key=lambda x: (x[0].isdigit(), x))
['apple', 'big', 'subway', '25th of May', '42nd street']
  

 Python's sort functions take an optional  key  parameter, allowing you to specify a function that gets applied before sorting. Tuples are sorted by their first element, and then their second, and so on. 

 You can read more about sorting https://wiki.python.org/moin/HowTo/Sorting. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17474283)
 use a http://docs.python.org/2/reference/expressions.html#lambda inside sort to convert them to float and then sort properly: 

  a = sorted(a, key=lambda x: float(x))
  

 so you will mantain them as strings but sorted by value and not lexicographically 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37596095)
 Use a custom compare function that converts the strings into sub-lists of integers. Those will sort correctly without problems. 

  In [4]: ls = ['1.1', '1.10', '1.2', '1.2.3', '1.2.1', '1.9']

In [5]: def section(s):
   ...:     return [int(_) for _ in s.split(".")]
   ...:

In [6]: sorted(ls, key=section)
Out[6]: ['1.1', '1.2', '1.2.1', '1.2.3', '1.9', '1.10']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29374562)
 Let's say we have a hybrid list like this: 

  c = ['s', 'a',2 , 'j', 9, 'e', 11, 't', 'k', 12, 'q']
  

 first we need to slice up the list into two separate parts (strings and integers), sort them individually and then append them in the end. Here's one way to do it: 

  >>> c = sorted([i for i in c if not str(i).isdigit()]) + sorted([i for i in c if str(i).isdigit()])
  

  

  >>> c
['a', 'e', 'j', 'k', 'q', 's', 't', 2, 9, 11, 12]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52656558)
 Since you're dealing with numbers (that, in this case, are <10) and strings, you can simplify your key and remove the  lambda : 

  >>> sorted(lst, key=str)
[0, 3, 7, 'E', 'J']
  

 Or, even better, use  list.sort  for an in-place sorting. 

  >>> lst.sort(key=str)
>>> lst
[0, 3, 7, 'E', 'J']
  

 Each item will be sorted based on the ASCII value of the  str -ified value.  

 Note that, if you're dealing with numbers >=10 (highly likely), then this solution will end up sorting the numbers lexicographically. To get around that, you will end up needing the lambda. 

  >>> lst.sort(key=lambda x: (isinstance(x, str), x)))
  

 Which is @jpp's solution. 



