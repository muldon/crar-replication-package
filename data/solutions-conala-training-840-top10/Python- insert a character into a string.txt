Query: Python- insert a character into a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2657733)
  

  def insert_newlines(string, every=64):
    lines = []
    for i in xrange(0, len(string), every):
        lines.append(string[i:i+every])
    return '\n'.join(lines)
  

 shorter but less readable (imo): 

  def insert_newlines(string, every=64):
    return '\n'.join(string[i:i+every] for i in xrange(0, len(string), every))
  

 The code above is for Python 2.x. For Python 3.x, you want to use  range  and not  xrange : 

  def insert_newlines(string, every=64):
    lines = []
    for i in range(0, len(string), every):
        lines.append(string[i:i+every])
    return '\n'.join(lines)

def insert_newlines(string, every=64):
    return '\n'.join(string[i:i+every] for i in range(0, len(string), every))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2657703)
  

  s = "0123456789"*100 # test string
import re
print re.sub("(.{64})", "\\1\n", s, 0, re.DOTALL)
  

 http://docs.python.org/library/re.html#re.DOTALL is the equivalent to Perl's  s/  option. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31407441)
 Replace this line 

  f.write(str(lines))
  

  

  f.write(''.join(lines))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13655431)
 This method will take care of commas if they are already there. 

  str = '-27.5916-086.5640'
import re
",".join(re.findall('([\+-]\d+\.\d+)',str))
'-27.5916,-086.5640'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31751872)
 https://docs.python.org/2/library/itertools.html has a nice recipe for a function  grouper  that is good for this, particularly if your final slice is less than 64 chars and you don't want a slice error: 

  def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
  

 Use like this: 

  big_string = <YOUR BIG STRING>
output = '\n'.join(''.join(chunk) for chunk in grouper(big_string, 64))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13213885)
 Yes, with http://docs.python.org/2/howto/unicode.html#unicode-literals-in-python-source-code: 

  print u'This is a full block: \u2588'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16689652)
  >>> 'The Quick Brown Fox'.replace(' ', '-')
'The-Quick-Brown-Fox'
  

 Maybe you want to replace  any  whitespace, in which case: 

  >>> '-'.join('The   Quick  \nBrown\t Fox'.split())
'The-Quick-Brown-Fox'
  

  

  >>> import re
>>> re.sub(r'\s+', '-', 'The   Quick  \nBrown\t Fox')
'The-Quick-Brown-Fox'
  



