Query: Python: slicing a multi-dimensional array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35205413)
 It might pay to explore the  shape  and individual entries as we go along. 

  

  >>> a = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])
>>> a.shape
(16, )
  

 This is a one-dimensional array of length 16. 

 Now let's try 

  >>> a = a.reshape(2,2,2,2)
>>> a.shape
(2, 2, 2, 2)
  

 It's a multi-dimensional array with 4 dimensions. 

 Let's see the 0, 1 element: 

  >>> a[0, 1]
array([[5, 6],
   [7, 8]])
  

 Since there are two dimensions left, it's a matrix of two dimensions. 

 

 Now  a[:, 1]  says: take  a[i, 1  for all possible values of  i : 

  >>> a[:, 1]
array([[[ 5,  6],
    [ 7,  8]],

   [[13, 14],
    [15, 16]]])
  

 It gives you an array where the first item is  a[0, 1] , and the second item is  a[1, 1] . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25712796)
  x  is a two dimensional array, an instance of NumPy's  ndarray  object. You can index/slice these objects in essentially two ways: basic and advanced.  

  y[2]  fetches the row at index 2 of the array, returning the array  [6 7 8] . You're doing  basic  slicing because you've specified only an integer. You can also specify a tuple of slice objects and integers for basic slicing, e.g.  x[:,2]  to select the right-hand column.  

 With basic slicing, you're also reducing the number of dimensions of the returned object (in this case from two to just one): 

 
   An integer, i, returns the same values as i:i+1 except the dimensionality of the returned object is reduced by 1. 
 

 So when you ask for the shape of  y , this is why you only get back one dimension (from your two-dimensional  x ). 

  Advanced  slicing occurs when you specify an  ndarray : or a tuple with at least one sequence object or  ndarray . This is the case with  x[2:,:]  since  2:  counts as a sequence object. 

 You get back an  ndarray . When you ask for its shape, you will get back all of the dimensions (in this case two): 

 
   The shape of the output (or the needed shape of the object to be used for setting) is the broadcasted shape. 
 

 In a nutshell, as soon as you start slicing along any dimension of your array with  : , you're doing advanced slicing and not basic slicing. 

 One brief point worth mentioning: basic slicing returns a view onto the original array (changes made to  y  will be reflected in  x ). Advanced slicing returns a brand new copy of the array. 

 You can read about array indexing and slicing in much more detail http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2725783)
 Two dimensional numpy arrays are indexed using  a[i,j]  (not  a[i][j] ), but you can use the same slicing notation with numpy arrays and matrices as you can with ordinary matrices in python (just put them in a single  [] ): 

 
>>> from numpy import array
>>> a = array([[1,2,3],[3,4,5],[4,5,6]])
>>> a[:,1:]
array([[2, 3],
       [4, 5],
       [5, 6]])
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50886442)
 In the line  test = diagram[i:(i+size)][j]  you do not get the index error on  [i:(i+size)]  but on  [j] . After slicing,  diagram[i:(i+size)]  is a list of two lists, and  j  is  2 , thus  that  index is out of bounds. 

 Also note that the  [j]  will index into that list of lists, not into the individual lists, i.e. it will get you a row, not a column of the diagram. Most likely, you need a list comprehension of the slice, getting the  j th element of each row: 

  test = [line[j] for line in diagram[i:(i+size)]]
  

 Or you could use  numpy  and it's multi-dimensional slicing: 

  import numpy as np
diagram = np.array(diagram)
  

 and then use  [...,...]  instead of  [...][...] : 

  test = diagram[i:(i+size),j]
  

 But this does not really allow to extract diagonals from the matrix, as seems to be needed for finding the word (assuming that that's what you want). For this, you could again use list comprehension and combine them with  enumerate  to get the position of the current letter and offset it accordingly: 

  test = [line[j-c] for c, line in enumerate(diagram[i:(i+size)])]
# ['h', 'i']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50143327)
  >>> x = arange(20).reshape(4,5)
>>> x array([[ 0,  1,  2,  3,  4],
        [ 5,  6,  7,  8,  9],
        [10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]])
  

 if you want the second column you can use 

  >>> x[:, 1]
array([ 1,  6, 11, 16])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9972440)
 It slices with a tuple. What exactly the tuple means depends on the object being sliced. In NumPy arrays, it performs a m-dimensional slice on a n-dimensional array. 

  >>> class C(object):
...   def __getitem__(self, val):
...     print val
... 
>>> c = C()
>>> c[1:2,3:4]
(slice(1, 2, None), slice(3, 4, None))
>>> c[5:6,7]
(slice(5, 6, None), 7)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28364590)
 You can use this as well: 

  values = np.array([[1,2,3],[4,5,6]])
values[...,0] # first column
#[1,4]
  

 Note: This is not working for built-in array and not aligned (e.g. np.array([[1,2,3],[4,5,6,7]]) ) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35722148)
  """
Create multi-dimensional array for given dimensions - (x1, x2, x3, ..., xn)

@author: Naimish Agarwal
"""


def multi_dimensional_array(value, *dim):
    """
    Create multi-dimensional array
    :param dim: a tuple of dimensions - (x1, x2, x3, ..., xn)
    :param value: value with which multi-dimensional array is to be filled
    :return: multi-dimensional array
    """

    if len(dim) > 1:
        return [multi_dimensional_array(value, *dim[1:]) for _ in xrange(dim[0])]
    else:
        return [value for _ in xrange(dim[0])]


if __name__ == "__main__":
    multi_array = multi_dimensional_array(False, *(2, 3, 1))
    print multi_array
  

 Prefer  numpy.ndarray  for multi-dimensional arrays. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14451035)
 I think this would be considered  pythonic : 

  for item in a[:3]:
    print item
  

  Edit : since a matter of seconds made this answer redundant, I will try to provide some background information: 

  Array slicing  allows for quick selection in sequences like Lists of Strings. A subsequence of a one-dimensional sequence can be specified by the indices of left and right endpoints: 

  >>> [1,2,3,4,5][:3] # every item with an index position < 3
[1, 2, 3]
>>> [1,2,3,4,5][3:] # every item with an index position >= 3
[4, 5]
>>> [1,2,3,4,5][2:3] # every item with an index position within the interval [2,3)
[3]
  

 Note that the left http://en.wikipedia.org/wiki/Interval_%28mathematics%29, the right one is not. You can add a third argument to select only every  n th element of a sequence: 

  >>> [1,2,3,4,5][::2] # select every second item from list
[1, 3, 5]
>>> [1,2,3,4,5][::-1] # select every single item in reverse order
[5,4,3,2,1]
>>> [1,2,3,4,5][1:4:2] # every second item from subsequence [1,4) = [2,3,4]
[2, 4]
  

 By converting lists to http://www.numpy.org/ arrays, it is even possible to perform multi-dimensional slicing: 

  >>> numpy.array([[1,2,3,4,5], [1,2,3,4,5]])[:, ::2]
array([[1, 3, 5],
       [1, 3, 5]])
  



