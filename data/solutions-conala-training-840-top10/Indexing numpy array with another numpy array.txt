Query: Indexing numpy array with another numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52153901)
 Using https://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html and Boolean indexing: 

  b[np.in1d(b, a)] = 1

print(b)

array([  0,   1,   2,   3,   4,   5,   1,  77,  78,  79,   1, 121, 122,
         1, 159,   1, 200, 201])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19058836)
 Use  np.take  with the  axis  keyword argument: 

  >>> a = np.arange(2*3*4).reshape(2, 3, 4)
>>> a
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
>>> b = np.arange(3)
>>> np.random.shuffle(b)
>>> b
array([1, 0, 2])
>>> np.take(a, b, axis=1)
array([[[ 4,  5,  6,  7],
        [ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[16, 17, 18, 19],
        [12, 13, 14, 15],
        [20, 21, 22, 23]]])
  

 If you want to use fancy indexing, you just need to pad the indexing tuple with enough empty slices: 

  >>> a[:, b]
array([[[ 4,  5,  6,  7],
        [ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[16, 17, 18, 19],
        [12, 13, 14, 15],
        [20, 21, 22, 23]]])
  

  

  >>> axis = 1
>>> idx = (slice(None),) * axis + (b,)
>>> a[idx]
array([[[ 4,  5,  6,  7],
        [ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[16, 17, 18, 19],
        [12, 13, 14, 15],
        [20, 21, 22, 23]]])
  

 But  np.take  should really be your first option. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6914245)
   

  a += numpy.histogram(b, numpy.arange(len(a)+1))[0]
  

 This will return  a = array([ 0.,  2.,  0.,  0.,  0.])  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46416019)
 You want to slice along the second dimension.  However, keep in mind that  numpy  uses zero based indexing.  You'll need  [1, 2, 0, 1, 2]  instead of  [2, 3, 1, 2, 3]    

  a = np.array([
    [1, 2, 3],
    [2, 3, 4]])

a[:, [1, 2, 0, 1, 2]]

array([[2, 3, 1, 2, 3],
       [3, 4, 2, 3, 4]])

â€‹
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45483577)
 Since the title is referring to indexing a  2D  array with another  2D  array, a general numpy solution can be found https://stackoverflow.com/a/45483236/4055338. 

 In short:
A 2D array of indices of shape (n,m)  with arbitrary large dimension m , named  inds , is used to access elements of another 2D array of shape (n,k), named  B : 

  # array of index offsets to be added to each row of inds
offset = np.arange(0, inds.size, inds.shape[1])

# numpy.take(B, C) "flattens" arrays B and C and selects elements from B based on indices in C
Result = np.take(B, offset[:,np.newaxis]+inds)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19647926)
 This is what fancy indexing is there for: 

  targetdata = originaldata[mapping[..., 0], mapping[..., 1]]
  

 As a simple example: 

  >>> original_data = np.arange(6).reshape(2, 3)
>>> original_data
array([[0, 1, 2],
       [3, 4, 5]])
>>> mapping = np.array([[[1,0], [1, 1], [1, 2]],   # swap rows and reverse
...                     [[0, 2], [0, 1], [0, 0]]]) # the second one
>>> original_data[mapping[..., 0], mapping[..., 1]]
array([[3, 4, 5],
       [2, 1, 0]])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45363142)
 From 1d to 2d array, you can use the  np.diagflat  method, which  Create a two-dimensional array with the flattened input as a diagonal : 

  import numpy as np
a = np.asarray([1, 2, 3])

np.diagflat(a)
#array([[1, 0, 0],
#       [0, 2, 0],
#       [0, 0, 3]])
  

 More generally, you can create a zeros array and assign values in place with  advanced indexing : 

  a = np.asarray([[1, 2, 3], [4, 5, 6]])

result = np.zeros((a.shape[0],) + a.shape)
idx = np.arange(a.shape[0])
result[idx, idx, :] = a

result
#array([[[ 1.,  2.,  3.],
#        [ 0.,  0.,  0.]],

#       [[ 0.,  0.,  0.],
#        [ 4.,  5.,  6.]]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31386502)
 You need to put the indices in a list not tuple,numpy use tuples for indexing multi-dimensional arrays : 

  >>> x[[1,2]]
array([1, 2])

>>> x[(1,2)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: too many indices
  

 Another example : 

  >>> x = np.array([6,4,0,8,77,11,2,12,67,90])
>>> x[[6,0]]
array([2, 6])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8743724)
  

  import numpy as np
np.random.seed(0)

n,m,k = 2,3,5
A = np.arange(n*m*k,0,-1).reshape((n,m,k))
print(A)
# [[[30 29 28 27 26]
#   [25 24 23 22 21]
#   [20 19 18 17 16]]

#  [[15 14 13 12 11]
#   [10  9  8  7  6]
#   [ 5  4  3  2  1]]]

B = np.random.randint(k, size=(n,m))
print(B)
# [[4 0 3]
#  [3 3 1]]
  

 To create this array,    

  print(A.reshape(-1, k)[np.arange(n * m), B.ravel()])
# [26 25 17 12  7  4]
  

 as a  nxm  array using fancy indexing: 

  i,j = np.ogrid[0:n, 0:m]
print(A[i, j, B])
# [[26 25 17]
#  [12  7  4]]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6914184)
 When you use an integer array for indexing another array, NumPy cannot create an adequate view, since the resulting array may not be representable with strides.  Therefore, it will return a copy: 

  >>> a = np.zeros(5)
>>> b = np.array([1, 1])
>>> c = a[b]
>>> c
array([ 0.,  0.])
>>> c.base is a
False
  

 When using this index with in-place operations like  += , NumPy will interpret it differently than you expect.  Instead of "Walk the index array and perform the operation on each element in turn", it will first select all values that are indexed by  b  (in this case, just one element with index  1 ), then perform the operation on these elements  once . 



