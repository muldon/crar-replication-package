Query: Create random list of integers in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53982679)
 that's what I would do: 

  import random
a = random.randint(0,100)
b = []
for i in range(0,a):
    b.append(random.randint(0,100))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53982605)
 Use the below code, bunch of  random.randint  and on single  random.sample : 

  import random
l=[random.randint(0,100) for i in range(100)]
print(random.sample(l,random.randint(0,100)))
  

 Output: 

  [27, 44, 80, 95, 54, 41, 52, 26, 21, 26, 91, 92, 10, 85, 13, 62, 30, 45, 0, 24, 58, 11, 95, 17, 0, 29, 37, 66]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48266981)
 Loop while the number is in the output list: 

  if item == "rand": 
    new_variable = int(random.randint(0, 4))
    while new_variable in output_list:
        new_variable = int(random.randint(0, 4))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53105269)
 You don't want to add random, unique integers 5 times; you want to add random, unique integers until your list contains 5 elements. This'll do it: 

  import random

def generatePassword() :
    lis = []
    while len(lis) < 5:
        #This checks to see if there are duplicate numbers
        r = random.randint(1,9)
        if r not in lis :
            lis.append(r)
    return lis
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40916932)
  my_list.sort()  sorts the list itself. If you want to store your sorted list in  answer , you should use: 

  answer = sorted(my_list)
  

 You can also use a list comprehension to generate your first list as follows: 

  >>> random
>>> 
>>> my_list = [random.randint(0, 1000) for i in range(100)]
>>> answer = sorted(my_list)
>>> answer.pop()
996  # This should be different each time
  

 Now, your function can be: 

  def max(my_list):
    # sort list from least to greatest
    answer = sorted(my_list)
    # get last item in list (max value)
    max = answer.pop()

    return max
  

 If you still want to use the same list, you can do: 

  my_list.sort()
max = my_list.pop()
  

  Note that:  I prefer to call the list  my_list  because  list  is a python keyword. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47213212)
  import random
def f():
  n= input("give n : ")
  return sum([random.randint(0,10) for i in range(n)])
  

 this will return the sum of  10 random number between 0 and 10 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48267245)
 I fixed the error pointed out in the comments.
Here are two functions that satisfy your ask: 

  import random
input_list = [1, 3, "rand", 2]

def rand_replacer(my_list):
    output_list = []
    for item in my_list:
        if item == "rand":
            while True:
                new_variable = random.randint(0, 4)
                if new_variable not in my_list:
                    output_list.append(new_variable)
                    break
        else:
            output_list.append(item)
    return output_list
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49077066)
 If you want to stick to numpy, you can use the  'S1'  data-type, which are just length-1 byte-strings. So, the  ord  corresponds to the same number as an 8-bit unsigned integer. So you  could  use  numpy.random.randint  to generate random unsigned 8-bit integers, and  cast them to byte-strings : 

  >>> ord('a'), ord('z')
(97, 122)
>>> np.random.randint(97, 123, (3, 5, 4), dtype=np.uint8).view('S1')
array([[[b'p', b'q', b'b', b'x'],
        [b'm', b'x', b'e', b'f'],
        [b'u', b'h', b'e', b'd'],
        [b'o', b'n', b'w', b'v'],
        [b'z', b'q', b'g', b'e']],

       [[b'f', b'o', b'c', b'j'],
        [b'z', b'x', b'l', b'x'],
        [b'u', b'f', b'w', b'r'],
        [b'q', b'z', b'm', b'o'],
        [b't', b'e', b'm', b'e']],

       [[b'f', b'i', b'x', b'k'],
        [b'z', b'w', b'm', b'g'],
        [b't', b'f', b'u', b'q'],
        [b'e', b'w', b'w', b'r'],
        [b'e', b'q', b'a', b'g']]],
      dtype='|S1')
  

 Note, it is twice as fast and requires one-quarter the memory: 

  In [8]: %timeit np.random.choice(list(string.ascii_lowercase),  size=(10, 10, 10))
24.8 µs ± 311 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

In [9]: %timeit np.random.randint(97, 123, (10, 10, 10), dtype=np.uint8).view('S1')
7.45 µs ± 95.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

In [10]: %timeit np.random.choice(list(string.ascii_lowercase),  size=(10, 100, 10))
116 µs ± 2.33 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)

In [11]: %timeit np.random.randint(97, 123, (10, 100, 10), dtype=np.uint8).view('S1')
53.4 µs ± 641 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

In [12]: %timeit np.random.choice(list(string.ascii_lowercase),  size=(10, 100, 100))
993 µs ± 8.34 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

In [13]: %timeit np.random.randint(97, 123, (10, 100, 100), dtype=np.uint8).view('S1')
503 µs ± 6.13 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

In [14]: %timeit np.random.choice(list(string.ascii_lowercase),  size=(100, 100, 100))
9.99 ms ± 58.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

In [15]: %timeit np.random.randint(97, 123, (100, 100, 100), dtype=np.uint8).view('S1')
5.06 ms ± 129 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15342464)
  def randomTen():
    """return list of ten integers and the number of times each one
    appears"""
    firstList= []
    for num in range(1,11):
        x= int(random.randint(1,6))
        firstList.append(x)
    return firstList
  

 You create an empty list firstList, append elements to it, and then return it. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/9755557)
 If the list of N numbers from 1 to N is randomly generated, then yes, there is a possibility that some numbers may be repeated. 

 If you want a list of numbers from 1 to N in a random order, fill an array with integers from 1 to N, and then use a http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle or Python's https://docs.python.org/3.6/library/random.html#random.shuffle. 



