Query: Custom Python list sorting
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50297733)
 You can define a custom sort order in a dict 

  sortorder={"sun":0, "mon":1, "tue":2, "wed":3, "thu":4, "fri":5, "sat":6}
  

 and then use this in the sort function: 

  list.sort(key=lambda x: sortorder[x["day"]])
  

 This sorts the list inplace without returning a copy. 

 If you need a copy of the list which is sorted, then you can use 

  sortedlist=sorted(list, key=lambda x: sortorder[x["day"]])
  

 Notice that it is bad practice to call a list  list  because you overwrite python internals with this. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8983001)
 With x[0] always larger than x[1]: 

  lst.st(key=(lambda x: x[0]-x[1]), reverse=True)
  

  

  lst.st(key=(lambda x: x[1]-x[0]))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7997011)
 Python's sorting is stable, so you will maintain the order after the first item regardless. 

  li1.sort(key=lambda x: not x.startswith('b.'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52782558)
 Just use  sort  with a custom key function: 

  data = [[2,1,2],[0,3,9],[1,2,9],[1,1,2],[3,2,7]]


data.sort(key=lambda x: max(x[0:2]),reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39004861)
 You can reverse the order when the sort looks at them. Just don't alter the original list items. 

 sorted(l, key=lambda x: (x[1], x[0])) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10646243)
 If I'm understanding you correctly, you want to know how to apply the key sorting technique when the key should apply to an element of your object.  In other words, you want to apply the key function to 'wordx', not the ['wordx', ...] element you are actually sorting.   

  my_alphabet = "..."

def my_key(elem):
    word = elem[0]
    return [my_alphabet.index(c) for c in word]

my_list.sort(key=my_key)
  

 or using the style in your first link: 

  my_alphabet = "..."
my_list.sort(key=lambda elem: [my_alphabet.index(c) for c in elem[0]])
  

 Keep in mind that my_list.sort will sort in place, actually modifying your list.  sorted(my_list, ...) will return a new sorted list. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49328978)
 Use the  key  argument and a list with the custom sorting order. 

  sort_order = [30, 883, 547, 898]
items.sort(key=lambda d: sort_order.index(d['id']))
  

 Using @Sphinx 's recommendation, you could index the list beforehand for some added speed improvement  O(1)  instead of  O(n)  

  sort_order_index = {val: i for i, val in enumerate(sort_order)}
items.sort(key=lambda d: sort_order_index.get(d['id'], 0))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/440611)
 To do so, you need to implement a custom compare: 

  def myCompare(x, y):
   x_name = " ".join(x.split()[2:])
   y_name = " ".join(y.split()[2:])
   return cmp(x_name, y_name)
  

 Then you use that compare definition as the input to your sort function: 

  myList.sort(myCompare)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51707915)
 This does not work in Python 3. 

 You can use functools cmp_to_key to have old-style comparison functions work though. 

  from functools import cmp_to_key

def cmp_items(a, b):
    if a.foo > b.foo:
        return 1
    elif a.foo == b.foo:
        return 0
    else:
        return -1

cmp_items_py3 = cmp_to_key(cmp_items)

alist.sort(cmp_items_py3)
  



