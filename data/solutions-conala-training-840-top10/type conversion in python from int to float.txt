Query: type conversion in python from int to float
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48682440)
  def int_float_none(x):
    # it may be already int or float 
    if isinstance(x, (int, float)):
        return x
    # all int like strings can be converted to float so int tries first 
    try:
        return int(x)
    except (TypeError, ValueError):
        pass
    try:
        return float(x)
    except (TypeError, ValueError):
        return None
  

 Function above for any object passed will return int or float conversion or None. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50699342)
 The exact error is  OverflowError: int too large to convert to float  

 Which also means that any  int  that generates that error is by definition  bigger  then any possible float. So just checking if it's bigger should return  True .  

 I'm not entirely sure, but I wouldn't be surprised if the implementation is just catching this error in the background (when trying to cast to  float ) and returning  True  in that case. 

 That is always true with the exception of  float('inf')  which is a special case that should return  False  (and does) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35251064)
 It is specified in the  Semantics for True division  in  https://www.python.org/dev/peps/pep-0238/ : 

 
   True division for  int s and  long s  will convert the arguments to
     float   and then apply a  float  division.  That is, even  2/1  will
    return a  float  ( 2.0 ), not an  int .  For  float s and  complex , it       will be the same as classic division. 
 

 So an automatic conversion is performed when an  int  is found. Note that this is the default behaviour in Python 3. In python 2 you'll need to  import  from  __future__  in order to have similar results.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2375344)
 To convert from a numeric type to a string: 

  str(100)
  

 To convert from a string to an int: 

  int("100")
  

 To convert from a string to a float: 

  float("100")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52557195)
  10 == 10.0  translates to a call to  (10).__eq__(10.0)  (or even more formally,  int.__eq__(10, 10.0) ). The implementation of  int.__eq__  can handle comparisons to other types, but there is no type conversion at the language level. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40707186)
 what works is  data_df['grade'] = int(pd.to_numeric(data_df['grade'])) 
The method  as_type(int)  throws and error because it want's to tell you, that no exact conversion from float to integer is possible and you will lose information.
My solution will truncate the integer (i.e. 1.9 will become 1), so you might want to specifiy in your question wether you want to convert float to integer by truncation or by rounding (i.e. 1.9 will become 2) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47311467)
 <strike>Try This ( in python You should do that with while ): 

  N = 1000
p = 2

while p*p <= N:

    p = p + 1
    w = p*p
    print(p)

    while w <= N:
        w = w + p
        print(w)
  

 </strike> 

  UPDATE :  

 The reason that you get the error "TypeError: 'float' object cannot be interpreted as an integer" is that the "range" function expects "integers" as arguments, whereas "N ** 0.5" is of type float, so is "N ** 0.5+1". To resolve this issue you can simply use "int" function to the conversion from float to integer. The following code is what you are looking for: 

  N = 1000
for p in range(2, int(N ** 0.5) + 1, 1):
    for w in range(p * p, N + 1, p):
        print(p, w)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36085637)
 There is no  special  reason. Python is simply applying its general principle of not performing implicit conversions, which are well-known causes of problems, particularly for newcomers, in languages such as Perl and Javascript. 

  int(some_string)  is an explicit request to convert a string to integer format; the rules for this conversion specify that the string must contain a valid integer literal representation.  int(float)  is an explicit request to convert a float to an integer; the rules for this conversion specify that the float's fractional portion will be truncated. 

 In order for  int("3.1459")  to return  3  the interpreter would have to implicitly convert the string to a float. Since Python doesn't support implicit conversions, it chooses to raise an exception instead. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53775063)
 You can change the type to numpy int or float by using 

  df.astype(np.float64)
  

 after conversion you will get 

  dtype: float64
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/50699471)
 From the https://github.com/python/cpython/blob/2.7/Objects/floatobject.c#L400: 

  /* Comparison is pretty much a nightmare.  When comparing float to float,
 * we do it as straightforwardly (and long-windedly) as conceivable, so
 * that, e.g., Python x == y delivers the same result as the platform
 * C x == y when x and/or y is a NaN.
 * When mixing float with an integer type, there's no good *uniform* approach.
 * Converting the double to an integer obviously doesn't work, since we
 * may lose info from fractional bits.  Converting the integer to a double
 * also has two failure modes:  (1) a long int may trigger overflow (too
 * large to fit in the dynamic range of a C double); (2) even a C long may have
 * more bits than fit in a C double (e.g., on a 64-bit box long may have
 * 63 bits of precision, but a C double probably has only 53), and then
 * we can falsely claim equality when low-order integer bits are lost by
 * coercion to double.  So this part is painful too.
 */
  

 As such, the potential pitfalls of conversion are taken into account. 



