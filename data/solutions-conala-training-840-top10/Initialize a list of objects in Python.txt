Query: Initialize a list of objects in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/24161085)
 Lists in Python can grow as needed, they are not fixed in length like you might be used to in C or C++. 

 Therefore, there is no need to "initialize" a list in Python. Just create it when you need it, and then add to it as you like. 

 You absolutely don't need a "zeroed list" of your Ghost objects, simply do this: 

  scary_farm = []  # This is an empty list.
ghosts = []

# .. much later down in your code

mean_ghost = Ghost(scary_level=10, voice='Booooo!')
ghosts.append(mean_ghost)

casper = Ghost(scary_level=-1, voice="I'm the friendly ghost. Hee hee!")
ghosts.append(casper)

# ... later on
scary_farm.append(ghosts) # Now you have your 2-D list

for item in scary_farm:
    for ghost in item:
        print('{0.voice}'.format(ghost))
  

 Note you also don't need a list of indexes when stepping through a list  or any collection  in Python. In C/C++ you might be used to: 

  for(i = 0; i < 10; i++)
{ 
    cout << scary_farm[i] << endl;
}
  

 But this is not required in Python as collection types can be iterated over directly. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50723178)
 You can use  np.array  function and initialize it from standard python list as following: 

  class Image:
def __init__(self):
    self.pixels = np.array([Pixel() for i in range(2 * 2)]).reshape([2, 2])
  

 The result is as following: 

  [[<__main__.Pixel object at 0x00000218B89F6438>
  <__main__.Pixel object at 0x00000218B89F64A8>]
 [<__main__.Pixel object at 0x00000218B89F4D68>
  <__main__.Pixel object at 0x00000218B89F43C8>]]
  

 As you see they are not the same object. 

 Note that it will not hart your time complexity since in any case you need to initialize  O(n)  objects.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24806479)
 Array analogue for the python's 

  a = []
for i in range(5):
    a.append(i)
  

  

  import numpy as np

a = np.empty((0))
for i in range(5):
    a = np.append(a, i)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1807374)
 You should note that Python's equvalent for Java code
(creating array of 100  null  references to Object): 

  Object arr = new Object[100];
  

 or C++ code: 

  Object **arr = new Object*[100];
  

  

  arr = [None]*100
  

  

  arr = [Object() for _ in range(100)]
  

 The second would be the same as Java's: 

  Object arr = new Object[100];
for (int i = 0; i < arr.lenght; i++) {
    arr[i] = new Object();
}
  

 In fact Python's capabilities to initialize complex data structures are far better then Java's. 

 

 Note:
C++ code: 

  Object *arr = new Object[100];
  

 would have to do as much work as Python's list comprehension: 

 
  allocate continuous memory for 100 Objects  
  call Object::Object() for each of this Objects  
 

 And the result would be a completely different data structure. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12791510)
 The problem is that they're all the same exact list in memory. When you use the  [x]*n  syntax, what you get is a list of  n  many  x  objects, but they're all references to the same object. They're not distinct instances, rather, just  n  references to the same instance. 

 To make a list of 3 different lists, do this: 

  x = [[] for i in range(3)]
  

 This gives you 3 separate instances of  [] , which is what you want 

  [[]]*n  is similar to 

  l = []
x = []
for i in range(n):
    x.append(l)
  

 While  [[] for i in range(3)]  is similar to: 

  x = []
for i in range(n):
    x.append([])   # appending a new list!
  

 

  In [20]: x = [[]] * 4

In [21]: [id(i) for i in x]
Out[21]: [164363948, 164363948, 164363948, 164363948] # same id()'s for each list,i.e same object


In [22]: x=[[] for i in range(4)]

In [23]: [id(i) for i in x]
Out[23]: [164382060, 164364140, 164363628, 164381292] #different id(), i.e unique objects this time
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10941064)
 Using  *  to duplicate elements in lists is a shallow copy operation, so you will end up with multiple references to the same mutable objects if you use this on a list that contains mutable objects. 

 Instead, use the following to initialize your nested list: 

  out = [[0]*3 for _ in range(3)]
  

 You can see that with your method, each entry in  out  is actually a reference to the same list, which is why you see the behavior that you do: 

  >>> out = [[0]*3]*3
>>> out[0] is out[1] is out[2]
True
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33513257)
 varunl's currently accepted answer 

   >>> l = [None] * 10
 >>> l
 [None, None, None, None, None, None, None, None, None, None]
  

 . Unfortunately if you want to create a list-of-lists you will run into referencing errors. Example in Python 2.7.6: 

  >>> a = [[]]*10
>>> a
[[], [], [], [], [], [], [], [], [], []]
>>> a[0].append(0)
>>> a
[[0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]
>>> 
  

 As you can see, each element is pointing to the same list object. To get around this, you can create a method that will initialize each position to a different object reference. 

  def init_list_of_objects(size):
    list_of_objects = list()
    for i in range(0,size):
        list_of_objects.append( list() ) #different object reference each time
    return list_of_objects


>>> a = init_list_of_objects(10)
>>> a
[[], [], [], [], [], [], [], [], [], []]
>>> a[0].append(0)
>>> a
[[0], [], [], [], [], [], [], [], [], []]
>>> 
  

 There is likely a default, built-in python way of doing this (instead of writing a function), but I'm not sure what it is.   

 Edit: It's  [ [] for _ in range(10)]  

 Example :  

  >>> [ [random.random() for _ in range(2) ] for _ in range(5)]
>>> [[0.7528051908943816, 0.4325669600055032], [0.510983236521753, 0.7789949902294716], [0.09475179523690558, 0.30216475640534635], [0.3996890132468158, 0.6374322093017013], [0.3374204010027543, 0.4514925173253973]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4562455)
 The way I usually do that is by creating a regular list, then append my stuff into it, and finally transform the list to a numpy array as follows : 

  import numpy as np
big_array = [] #  empty regular list
for i in range(5):
    arr = i*np.ones((2,4)) # for instance
    big_array.append(arr)
big_np_array = np.array(big_array)  # transformed to a numpy array
  

 of course your final object takes twice the space in the memory at the creation step, but appending on python list is very fast, and creation using np.array() also. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51886052)
  import numpy as np

mat = np.array([[1, 1, 0, 0, 0],
                [0, 1, 0, 0, 1],
                [1, 0, 0, 1, 1],
                [0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1]])

print mat.shape
print mat
  

 output: 

  (5, 5)
[[1 1 0 0 0]
 [0 1 0 0 1]
 [1 0 0 1 1]
 [0 0 0 0 0]
 [1 0 1 0 1]]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13409107)
  i = [0] * 5
  

 Warning: be careful when the things in the list are mutable objects, such as nested lists. You're making five references to the same object, which will bite you when you start manipulating the list items. . For mutable objects: 

  i = [[] for _ in xrange(5)]   # range(5) on Python 3.x
  



