Query: How to execute a command in the terminal from a Python script?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48594005)
  import os
os.system("echo 'hello world'")
  

 This should work. I do not know how to print the output into the python Shell.  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33065666)
 The  echo  terminal command  echoes  its arguments, so printing the command to the terminal is the expected result.   

 Are you typing  echo driver.exe bondville.dat  and is it running your  driver.exe  program? 
If not, then you need to get rid of the echo in the last line of your code: 

  os.system(command)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3731000)
 There are several ways to do this: 

 A simple way is using the os module: 

  import os
os.system("ls -l")
  

 More complex things can be achieved with the subprocess module:
for example: 

  import subprocess
test = subprocess.Popen(["ping","-W","2","-c", "1", "192.168.1.70"], stdout=subprocess.PIPE)
output = test.communicate()[0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3617745)
 The following works fine for me:
write the python code you want to execute in the line you want. 

  import os
print(os.listdir('.'))
  

 after that visually select the lines you want to execute in python  

  :'<,'>!python
  

 and after that the python code will replaced by the python output. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3730982)
 
 https://stackoverflow.com/questions/3729366/custom-standard-input-for-python-subprocess 
 

 In fact any question on subprocess will be a good read 

 
<li 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47519018)
 Like most terminals, gnome terminal needs http://manpages.ubuntu.com/manpages/trusty/man1/gnome-terminal.1.html to execute commands: 

  gnome-terminal [-e, --command=STRING] [-x, --execute]
  

 You probably need to add  -x  option: 

 
   x, --execute 
  
   Execute the remainder of the command line inside the terminal.  
 

  

  os.system("gnome-terminal -x python f.py")
  

 That would not run your process in the background unless you add  &  to your command line BTW. 

 The  communicate  attempt would need a newline for your input but should work too, but complex processes like terminals don't "like" being redirected. It seems like using an interactive tool backwards.
And again, that would block until termination. What  could  work would be to use  p.stdin.write("python f.py\n")  to give control to the python script. . 

 So it seems that you don't even need python do to what you want.   

  python f.py &
  

 . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49587570)
 The following code will open a new terminal and execute the process: 

  process = subprocess.Popen(
    "sudo gnome-terminal -x python f.py", 
    stdout=subprocess.PIPE,
    stderr=None,
    shell=True
)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46609905)
 You can use the  yes  command like so: 

  #!/usr/bin/python3
import os


def regenerate_key():
    os.system('cd /var/www/laravel_blog && yes yes | php artisan key:generate')

if __name__ == "__main__":
    regenerate_key()
  

 The command  yes yes  just echos "yes" to the terminal for the duration of the other command. You can confirm this behavior by just typing  yes yes  into a terminal.  Remember that Ctrl+C stops command execution.   



