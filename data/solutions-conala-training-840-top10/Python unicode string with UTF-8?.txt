Query: Python unicode string with UTF-8?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4182757)
 If I understand you correctly, you have a utf-8 encoded byte-string in your code. 

 Converting a byte-string to a unicode string is known as decoding (unicode -> byte-string is encoding). 

 You do that by using the http://docs.python.org/library/functions.html#unicode function or the http://docs.python.org/library/stdtypes.html#str.decode method.  

  unicodestr = unicode(bytestr, encoding)
unicodestr = unicode(bytestr, "utf-8")
  

  

  unicodestr = bytestr.decode(encoding)
unicodestr = bytestr.decode("utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27205998)
 Might be a bit overkill, but when I work with ascii and unicode in same files, repeating decode can be a pain, this is what I use: 

  def make_unicode(input):
    if type(input) != unicode:
        input =  input.decode('utf-8')
        return input
    else:
        return input
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14306718)
 You should use: 

 
   
     
       title.encode('raw_unicode_escape') 
     
   
 

 Python2: 

  print(u'\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))
  

 Python3: 

  print(u'\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape').decode('utf8'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4182635)
  >>> plain_string = "Hi!"
>>> unicode_string = u"Hi!"
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)
  

 ^ This is the difference between a byte string (plain_string) and a unicode string. 

  >>> s = "Hello!"
>>> u = unicode(s, "utf-8")
  

 ^ Converting to unicode and specifying the encoding. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3182748)
 a) Try to put it through the method below. 

 b) 

  >>> u'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
u'Sopet\xf3n'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3487443)
 A Python  unicode  object is a sequence of Unicode codepoints and by definition proper unicode. A python  str  string is a sequence of bytes that might be Unicode characters encoded with a certain encoding (UTF-8, Latin-1, Big5,...). 

 The first question there is if  source  is a  unicode  object or a  str  string.
That  source.encode("utf-8")  works just means that you  can  convert  source  to a UTF-8 encoded string, but are you doing it before you pass it to the database function? The database seems to expect it's inputs to be encoded with UTF-8, and complains that the equivalent of  source.decode("utf-8")  fails. 

 If  source  is a  unicode  object, it should be encoded to UTF-8 before you pass it to the database: 

  source = u'abc'
call_db(source.encode('utf-8'))
  

 If  source  is a  str  encoded as something else than Utf-8, you should decode that encoding and then encode the resulting Unicode object to UTF-8: 

  source = 'abc'
call_db(source.decode('Big5').encode('utf-8'))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22615366)
 This is not utf-8: 

  print txt.decode('iso8859-1')
Out[14]: médico
  

 If you want utf-8 string, use: 

  txt.decode('iso8859-1').encode('utf-8')
Out[15]: 'm\xc3\xa9dico'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12053219)
  try:
    string.decode('utf-8')
    print "string is UTF-8, length %d bytes" % len(string)
except UnicodeError:
    print "string is not UTF-8"
  

 In Python 2,  str  is a sequence of bytes and  unicode  is a sequence of characters.  You use  str.decode  to decode a byte sequence to  unicode , and  unicode.encode  to encode a sequence of characters to  str .  So for example,  u"é"  is the unicode string containing the single character U+00E9 and can also be written  u"\xe9" ; encoding into UTF-8 gives the byte sequence  "\xc3\xa9" . 

 In Python 3, this is changed;  bytes  is a sequence of bytes and  str  is a sequence of characters. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17199950)
 If you really want  "\u00c2\u00a9"  as the output, give  json  a Unicode string as input. 

  >>> print json.dumps(u'\xc2\xa9')
"\u00c2\u00a9"
  

 You can generate this Unicode string from the raw bytes: 

  s = unicode('©', 'utf-8').encode('utf-8')
s2 = u''.join(unichr(ord(c)) for c in s)
  

 I think what you really want is  "\xc2\xa9"  as the output, but I'm not sure how to generate that yet. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12349833)
 You need to  decode  utf-8 strings into a unicode object.  

  string_data.encode('utf-8')
  

  

  string_data.decode('utf-8')
  

 assuming  string_data  is actually an utf-8 string. 

  to summarize: To get an utf-8 string from a unicode object you  encode  the unicode (using the utf-8 encoding), and to turn a string to a unicode object you  decode  the string using the respective encoding. 

 For more details on the concepts I suggest reading http://www.joelonsoftware.com/articles/Unicode.html (not Python specific). 



