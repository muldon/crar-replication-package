Query: convert list of tuples to multiple lists in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8081593)
 Use: 

  a = [(1,2),(3,4),(5,6),]    
b = zip(*a)
>>> [(1, 3, 5), (2, 4, 6)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5378255)
 Using lists instead of tuples as dict values: 

  l=[ [1, 'A'], [1, 'B'], [2, 'C'] ]
d={}
for key, val in l:
    d.setdefault(key, []).append(val)

print d
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8081580)
 The built-in function  zip()  will almost do what you want: 

  >>> zip(*[(1, 2), (3, 4), (5, 6)])
[(1, 3, 5), (2, 4, 6)]
  

 The only difference is that you get tuples instead of lists.  You can convert them to lists using 

  map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37074754)
 Here is a shorter version with list comprehension: 

  >>> d = {'key1': 'string1', 'key2': 15, 'key3': ['item1', 'item2', 'item3', 'item4']}
>>> parameters = [(k, v1) for k, v in d.iteritems() for v1 in (v if isinstance(v, list) else [v])]
>>> parameters
[('key3', 'item1'), ('key3', 'item2'), ('key3', 'item3'), ('key3', 'item4'), ('key2', 15), ('key1', 'string1')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8081590)
 From the http://docs.python.org/library/functions.html: 

 
   zip() in conjunction with the * operator can be used to unzip a list: 
 

 Specific example: 

  >>> zip((1,3,5),(2,4,6))
[(1, 2), (3, 4), (5, 6)]
>>> zip(*[(1, 2), (3, 4), (5, 6)])
[(1, 3, 5), (2, 4, 6)]
  

 Or, if you really want lists: 

  >>> map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
[[1, 3, 5], [2, 4, 6]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5378250)
  from collections import defaultdict

d1 = defaultdict(list)

for k, v in l:
    d1[k].append(v)

d = dict((k, tuple(v)) for k, v in d1.iteritems())
  

  d  contains now  {1: ('A', 'B'), 2: ('C',)}  

  d1  is a temporary defaultdict with lists as values, which will be converted to tuples in the last line. This way you are appending to lists and not recreating tuples in the main loop. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1014499)
 As a python newbie I would try this 

  def f(t):
    if type(t) == list or type(t) == tuple:
        return [f(i) for i in t]
    return t

t = (1,2,[3,(4,5)]) 
f(t)
>>> [1, 2, [3, [4, 5]]]
  

  

  def f(t):
    return [f(i) for i in t] if isinstance(t, (list, tuple)) else t
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9051552)
 there is a python built in function:
list and tuple 

 list( the tuple)...to conver tuple to list
tuple( the list )....to convert list to tuple  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5506527)
 To convert  list_of_lists  to a tuple of tuples, use 

  tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6698717)
 Convert your lists to tuples: 

  dict((tuple(a), b) for a,b in [([1,2,3,4],2),([5,6,7],3)])
  

 If you are using Python >= 2.7 you can use dict-comprehensions: 

  {tuple(a): b for a,b in [([1,2,3,4],2),([5,6,7],3)]}
  



