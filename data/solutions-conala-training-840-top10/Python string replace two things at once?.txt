Query: Python string replace two things at once?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8687091)
 If you are OK with two lines, this is more elegant. 

  d={'a':'b','b':'a'}
''.join(d[s] for s in "abaababbd" if s in d.keys())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54329375)
  replace  should work. 

  my_string = r'\\ServerA\DriveB\5.FolderC\A.TXT'
my_string = my_string.replace('\\', '/')
  

 Two things that commonly go wrong: 

 
 If you're not assigning back to a variable. 
 If you're not escaping the  \ . 
 

 Also, note that I'm using a raw string (using an  r  prefix) to make sure characters aren't escaped in the original string. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42487795)
  str.replace  is using  replace  in its static form (calling the method from the type-class  str  instead of an  str  object). 

  str.replace  will actually need  3  arguments: the string to act on, the char or string to replace and the new char or string. 

  .replace('d', 'z')  is equivallent to  str.replace(, 'd', 'z') : 

  print(.replace('d', 'z'))
# abcz
print(str.replace(, 'd', 'z'))
# abcz
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12437738)
 This answer is for Python 2 and will only work for ASCII strings: 

 The string module contains two things that will help you: a list of punctuation characters and the "maketrans" function.  Here is how you can use them: 

  import string
replace_punctuation = string.maketrans(string.punctuation, ' '*len(string.punctuation))
text = text.translate(replace_punctuation)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6486930)
  

  re.sub(r'\\', r'\\\\', string)
  

 As  r'\'  is not a valid string 

 BTW, you should always use raw ( r'' ) strings with regex as many things are done with backslashes. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8687114)
 Your example is a little bit abstract but in the past I've used http://code.activestate.com/recipes/81330-single-pass-multiple-replace/ which builds a regular expression to do single-pass multiple replace. Here's my tweaked version of it: 

  import re 

def multiple_replace(dict, text): 
  regex = re.compile("|".join(map(re.escape, dict.keys())))
  return regex.sub(lambda mo: dict[mo.group(0)], text) 
  

 Note that the keys (searchstrings) are re.escaped. 

  

  from utils import multiple_replace

print multiple_replace({
    "a": "b",
    "b": "a"
}, "ab") 
  

  UPDATE:  

 By now this is basically the same as https://stackoverflow.com/a/8687035/63736 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30220374)
 It seems to me that if you have two strings  stringA  and  stringB  (presumably lines from a larger text split on  \n ) such that  stringB  is always a substring of  stringA , and you want to find the  extra stuff  in  stringA , then it'd be easiest to do something like 

  stringA = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus aliquam leo odio, ut posuere dui rutrum ac. Nulla facilisi."
stringB = "ut posuere dui rutrum ac"

print stringA.replace(stringB, '')
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus aliquam leo odio, . Nulla facilisi."
  

 

 Edit:  Using your example text from the updated OP, you could do  

  textA = 'The first paragraph of the book is written well' 
textB = 'the book is written well'
text_diff = textA.lower().replace(textB.lower(), '')
  

  

  'the first paragraph of'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24412820)
  \N  is two character string. (same as  '\\N' ) 

  >>> '\N'
'\\N'
>>> len('\N')
2
  

 But iterating a string yields single character strings. 

  >>> for ch in 'ab\Ncd':
...     print ch
...
a
b
\
N
c
d
  

 The code never replace  \  followed by  N . 

 How about call replace multiple times? 

  for old, new in map_dict.iteritems():
    line = line.replace(old, new)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12501143)
 Yes, that doc is correct, since it is referring to using  string.replace()  as a  stand alone function .  

  >>> import string
>>> string.replace("a","a","b")
'b'
  

 This is different from calling  replace()  as a  method of a given string , like this: 

  >>> 'a'.replace('a','b')
'b'
  

 They are two different things that have different syntax but are designed to have the same results. So calling one with the other's syntax will result in an error. For example: 

  >>> 'a'.replace('a','a','b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: an integer is required
  



