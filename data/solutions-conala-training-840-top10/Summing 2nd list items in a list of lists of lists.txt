Query: Summing 2nd list items in a list of lists of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37619560)
 Try this one-line approach using list comprehension: 

  [sum([x[1] for x in i]) for i in data]
  

 Output: 

  data = [[[1, 3],[2, 5],[3, 7]],[[1,11],[2,15]]]
[sum([x[1] for x in i]) for i in data]
Out[19]: [15, 26]
  

 If you want the output to be a list of list, then use  

  [[sum([x[1] for x in i])] for i in data]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37619528)
 Something like this is pretty short and concise, using list comprehensions and  map  (I try not to use nested comprehensions if I can avoid it) 

  import operator

f = operator.itemgetter(1)
[sum(map(f, x)) for x in data]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53508918)
 You can define a separate method to get the sum of all differences between the 2nd and 1st elements of all lists in a list and then generate your  result  with a "dictionary comprehension": 

  def diff_sums(l):
    return sum(x[2] - x[1] for x in l)

dictex = {'cat': {'a': [[1, 3, 5], [2, 2, 7]], 'b': [[1, 3, 7], [2, 2, 7]], 'c': [[1, 2, 7], [2, 2, 7]]},
          'dog': {'a': [[1, 2, 5], [2, 2, 7]], 'b': [[1, 2, 7], [2, 2, 7]], 'c': [[1, 3, 7], [2, 2, 7]]},
          'moose': {'a': [[1, 1, 5], [2, 2, 7]], 'b': [[1, 1, 7], [2, 2, 7]], 'c': [[1, 1, 7], [2, 2, 7]]}}

result = {animal: {k: diff_sums(v) for k, v in num_lists.items()} for animal, num_lists in dictex.items()}
print(result)
  

  Output  

  {'cat': {'a': 7, 'b': 9, 'c': 10}, 
 'dog': {'a': 8, 'b': 10, 'c': 9}, 
 'moose': {'a': 9, 'b': 11, 'c': 11}}
  

 

 To write this to a CSV file, you can use the https://docs.python.org/3/library/csv.html#csv.writer module: 

  import csv

columns = ['animal', 'a', 'b', 'c']
data = [[animal] + [v[c] for c in columns[1:]] for animal, v in result.items()]
with open('mydata.csv', 'w') as csvfile:
    writer = csv.writer(csvfile, delimiter=',')
    for line in [columns] + data:
        writer.writerow(line)
  

  Output  

  animal,a,b,c
cat,7,9,10
dog,8,10,9
moose,9,11,11
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23023693)
  >>> mx = []
>>> mn = []
>>> for i, j in _list:
...     mx.append(i)
...     mn.append(j)
...
>>> x = (max(mx), max(mn))
>>> x
(3, 4)
  

 Append each value to a list, and then get the maximum. From that, create a tuple. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21631102)
 You can do something like this: 

  def make_dict(seq):
    dic =  {}
    for i, lis in enumerate(seq):
        indices = {}
        for j, item in enumerate(lis):
            indices.setdefault(item, [i]).append(j)
        for k, v in indices.items():
            dic.setdefault(k, []).append(v)
    return dic

lis = [['d', 'e', 'f','d'], ['d', 'g','f']]
  

  Output:  

  >>> my_dict = make_dict([['d', 'e', 'f','d'], ['d', 'g','f']])
>>> my_dict['d']
[[0, 0, 3], [1, 0]]
>>> my_dict['e']
[[0, 1]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35797587)
 You can zip the first list with the reverse of second one (using  itertools.izip_longest ) then join the columns using  itertools.chain : 

  >>> d=['a','b','c','d']
>>> e=['w','x','y','z']
>>> 
>>> from itertools import chain, zip_longest # in python 2 use izip_longest
>>> 
>>> list(chain(*izip_longest(d, e[::-1])))
['a', 'z', 'b', 'y', 'c', 'x', 'd', 'w']
  

 The advantage of using  zip_longest()  is that it takes a  fillvalue  argument which will be passed to fill the omitted items when the length of your lists are not equal. 

 If you are sure that the length of the lists are equal you better to use built-in function  zip() . 

  >>> d=['a','b']
>>> e=['w','x','y','z']
>>> list(chain(*izip_longest(d, e[::-1], fillvalue='')))
['a', 'z', 'b', 'y', '', 'x', '', 'w']
  

 More pythonic way suggested by @Jon Clements: 

  list(chain.from_iterable(zip_longest(d, reversed(e))))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37619718)
 @mathmax and @BrendanAbel have offered Pythonic and performant solutions. However, I want to throw this transpositional approach into the ring for the sake of its brevity and trickyness: 

  [sum(zip(*x)[1]) for x in data]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42883870)
 .   zip  iterates the lists in parallel, giving you the first items, then the 2nd items, etc.: 

  l1 = [0, 1, 1, 0, 1]
l2 = [0, 0, 1, 1, 0]

L = [[],[]]
for a,b in zip(l1,l2):
    L[b].append(a)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23023689)
 This would do the trick: 

  (max(a[0] for a in list), max(a[1] for a in list))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/9173081)
 For a flexible number of values per item and even less characters, you can use 

  In [1]: [sum(values) for values in zip(*l)[1:]]
Out[1]: [37, 10]
  

  zip  yields tuples of combinations of corresponding items (i.e. a tuple with all the 1st items, a tuple with all the 2nd items, etc), which can be summed up each (except for the first string value). Of course, you can still prepend  ""  or whatever you like at the beginning if needed. 



