Query: Find max length of each column in a list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53680939)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html with  max : 

  #if strings

#import ast

#print (type(df.loc[0, 'day']))
#<class 'str'>

#df['day'] = df['day'].apply(ast.literal_eval)
  

 

  print (type(df.loc[0, 'day']))
<class 'list'>

df['day'] = df['day'].apply(max)
  

 Or list comprehension: 

  df['day'] = [max(x) for x in df['day']]
  

 

  print (df)
   day plcae
0    5     A
1    4     B
2    2     C
3    4     D
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43958134)
 It's a list of lists (of length 1) of tuples, so we have to do just a bit of legwork. 

  import pandas as pd

df = pd.DataFrame([d[0] for d in data])
df[0].max()
df[1].max()
df[0].mean()
df[0].min()
  

 Tons of operations are supported. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50109314)
 You can ignore the keys of the dictionary and instead, use a double  max : 

  x = {'a': [[1], [1, 2, 3], [1], [1]], 'c': [[1], [1, 2], [1], [1]], 'b': [[1], [1, 2], [1], [1]]}
result = max(max(map(len, i)) for i in x.values())
  

 Output: 

  3
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50109353)
 You can also use  itertools.chain : 

  from itertools import chain

res = max(map(len, chain.from_iterable(x.values())))

# 3
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43821984)
 First, extract all the strings of interest with a list comprehension: 

  xs = [v[index] for v in d.values()]
  

 Next, take max over the lens of the strings: 

  print(max(map(len, xs)))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49432887)
  

  df = pd.DataFrame(data =[["a", "b", "c", ["d", "e"]],
                         ["a", "b", "c", ["e"]],
                         ["l", "m", "n", ["o"]]],
                  columns = ["c1", "c2", "c3", "c4"])

df['len'] = df['c4'].apply(len)

max_groups = df[df.groupby(['c1', 'c2', 'c3'])['len'].transform(max) == df['len']]
  

 We add an extra column corresponding to the length of the list in  c4 , and then filter the dataframe to those records where the length of  c4  is the same as the max length of  c4  for the grouping. This returns  max_groups  as: 

    c1 c2 c3      c4  len
0  a  b  c  [d, e]    2
2  l  m  n     [o]    1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50109333)
 . 

  >>> counts = [len(b) for a in x.values() for b in a]
[1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1]

>>> max(counts)
3
  

 Or for optimal performance, use a generator: 

  max(len(b) for a in x.values() for b in a)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49101984)
 You can use  pd.Series.values.tolist()  and pass this to  pd.DataFrame . The solution will work for any max length of list within your list of lists. 

 You can, if you wish, drop unwanted columns afterwords via https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html. 

    

  import pandas as pd

lst = [[[1]],
       [[1, 2]],
       [[1, 2, 3]],
       [[1, 2, 3, 4, 5]],
       [[1, 2, 3, 4]]]

df = pd.DataFrame(lst)
df['Col'] = 5

#                  0  Col
# 0              [1]    5
# 1           [1, 2]    5
# 2        [1, 2, 3]    5
# 3  [1, 2, 3, 4, 5]    5
# 4     [1, 2, 3, 4]    5
  

    

  df2 = df.drop(0, 1).join(pd.DataFrame(df[0].values.tolist()))

#    Col  0    1    2    3    4
# 0    5  1  NaN  NaN  NaN  NaN
# 1    5  1  2.0  NaN  NaN  NaN
# 2    5  1  2.0  3.0  NaN  NaN
# 3    5  1  2.0  3.0  4.0  5.0
# 4    5  1  2.0  3.0  4.0  NaN
  

  Explanation  

 
  pd.DataFrame  accepts a list of lists with variable length as an input. 
  df[0].values.tolist()  returns the jagged list of lists via the numpy representation of the series. 
  join  joins on index by default. 
 



