Query: Python: How to check a string for substrings from a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8122096)
  

  any(substring in string for substring in substring_list)
  

 It will return  True  if any of the substrings in  substring_list  is contained in  string . 

 Note that there is a Python analogue of https://stackoverflow.com/questions/500925/to-check-if-a-string-contains-an-element-from-a-list-of-strings-is-there-a-b/500930#500930 in the linked question: 

  from itertools import imap
any(imap(s.__contains__, substring_list))
  

 Probably the above version using a generator expression is clearer though. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49170357)
 There is a regex module in python (https://docs.python.org/3.6/library/re.html) 

 That should do exactly the same thing just with 

  import re
m = re.search("i*(?<!\\.)cake.*", your_string)
for match in m:
  print(m)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45926812)
  

  string_list = ['item1', 'item2', 'subject3', 'subject4']

substrings = ['item', 'subject']

any(any(b in i for b in substrings) for i in string_list)
  

 Output: 

  True
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43804181)
 I'd do it this way: 

  In [148]: df
Out[148]:
             OLD_COL
0          apple pie
1       black cherry
2  banana lemon drop

In [149]: pat = '.*({}).*'.format('|'.join(substring_list))

In [150]: pat
Out[150]: '.*(apple|banana|cherry).*'

In [151]: df['NEW_COL'] = df['OLD_COL'].str.replace(pat, r'\1')

In [152]: df
Out[152]:
             OLD_COL NEW_COL
0          apple pie   apple
1       black cherry  cherry
2  banana lemon drop  banana
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49170586)
 You can use regex here. you can make regex on the go like. 

  substring_list = ['aa', 'bb', 'dd', 'ef']
if re.match(r"({})cake".format("|".join(substring_list)), input_string):
    return True
  

  

  def check_if_char_appears(input_string):
    substring_list = ['aa', 'bb', 'dd', 'ef']
    sub_string_re = "|".join(substring_list) # 'aa|bb|dd|ef'
    re_string = r"({})cake".format(sub_string_re) # (aa|bb|dd|ef)cake
    if re.match(re_string, input_string):
        return True
    return False


input_string = 'aacake'
print(check_if_char_appears(input_string))

input_string = 'aakkcake'
print(check_if_char_appears(input_string))
  

  

  True
False
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31827354)
 You can do something like this: 

  bitmap_id = 'HelloWorld'
blacklist = ['SLIDE', 'ICON', 'BOT']
if not filter(lambda x: x in bitmap_id, blacklist):
    print bitmap_id
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53327114)
 I think the "easiest" implemented solution would be to use a regex-expression. In regex the pipe  |  means or. By doing  '|'.join(yourlist)  we get the substrings we want to check.  

  import pandas as pd
import numpy as np

list_ = ['abc', 'def', 'xyz']

df = pd.DataFrame({
    'CheckCol': ['a','ab','abc','abd-def']
})

df['NewCol'] = np.where(df['CheckCol'].str.contains('|'.join(list_)), df['CheckCol'], '')

print(df)

#  CheckCol   NewCol
#0        a         
#1       ab         
#2      abc      abc
#3  abd-def  abd-def
  

 

  NOTE:  Your variable name  list  was changed to  list_ . Try to avoid using the reserved Python namespace. 



