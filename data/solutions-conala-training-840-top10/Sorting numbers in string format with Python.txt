Query: Sorting numbers in string format with Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2597110)
 This works: 

  keys.sort(key=lambda x: map(int, x.split('.')))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2759769)
  from distutils.version import StrictVersion
keys.sort(key=StrictVersion)
  

 Since chapter numbers are a subset of version numbers, this covers your needs. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/21431115)
 To change sorting key, use https://docs.python.org/2/library/stdtypes.html?highlight=list#mutable-sequence-types: 

  >>>s = ['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
>>> s.sort(key = lambda x: x.split()[1])
>>> s
['variable3 (name1)', 'variable2 (name2)', 'variable1 (name3)']
>>> 
  

 Works the same way with https://docs.python.org/3/library/functions.html#sorted: 

  >>>s = ['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
>>> sorted(s)
['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
>>> sorted(s, key = lambda x: x.split()[1])
['variable3 (name1)', 'variable2 (name2)', 'variable1 (name3)']
>>> 
  

 Note that, as described in the question, this will be an alphabetical sort, thus for 2-digit components it will not interpret them as numbers, e.g. "11" will come before "2". 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20073217)
 Yes, that works with any date in that format, because they are: 

 
 using the same length, zero-padded numbers 
 in the same order 
 ordered by most significant to least significant; year, month, day, hour, minute, second 
 

 This makes them lexicographically orderable, which is exactly the order sorting would apply. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24576638)
 Use a  key  function with  sorted() ; this'll parse the dates  just for sorting , leaving the original values untouched: 

  SortedList = sorted(MyList, key=lambda d: datetime.strptime(d, "%d/%m/%Y"))
  

 The list is then sorted on the return values of the  key  function instead of the values themselves. Internally, Python  decorates  the values (produces tuples of  (key(v), None, v) ,  with  None  making sure  v  is not involved in breaking ties), sorts these, then un-decorates again. 

  

  >>> from datetime import datetime
>>> MyList = ['25/4/2014', '2/12/2014', '15/7/2014']
>>> sorted(MyList, key=lambda d: datetime.strptime(d, "%d/%m/%Y"))
['25/4/2014', '15/7/2014', '2/12/2014']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22804994)
 . You're sorting by the date field in a stupid format that doesn't sort according to the actual date. If you use the standard ISO format (YYYY-MM-DD), it will sort as you expect. Also if you use a python data structure used for date, e.g. from the datetime module, it will sort as you expect. 

  import datetime

mylist = [
    ['CustomerID_12345', 'TransactionID_1001', datetime.date(2012, 12, 13)],
    ['CustomerID_12345', 'TransactionID_1002', datetime.date(2013, 3, 12)],
    ...
]
  

 . This could help you if you're reading your data somewhere and want to convert it from the original string format to the internal representation. 

  import datetime

mylist = [
    ['CustomerID_12345', 'TransactionID_1001',
        datetime.datetime.strptime('12/31/2012', '%m/%d/%Y').date()],
    ['CustomerID_12345', 'TransactionID_1002',
        datetime.datetime.strptime('3/12/2013', '%m/%d/%Y').date()],
    ...
]
  

 Alternatively, using strings only... 

  mylist = [
    ['CustomerID_12345', 'TransactionID_1001', '2012-31-12'],
    ['CustomerID_12345', 'TransactionID_1002', '2013-03-12'],
    ...
]
  

 If you already have an array like the one in your question, you can convert it easily: 

  new_list = [f1, f2, datetime.datetime.strptime(f3, '%m/%d/%Y').date()
    for f1, f2, f3 in old_list]
  

 Just a sidenote, the M/D/YYYY (4/2/2014) format was one of the most stupid date formats ever created, only M/D/YY (4/2/14) being worse than that. 

 The best formats order units by descending size, as this is the direction we use for numbers as well. Those, when proper zero padding is used, can be sorted easily (2014-04-02) and that's why they found their place in computers and especially file names. The not so great formats order units by ascending size, not respecting the way we write down numbers, this system is being used in my country (today is 2.4.2014). But mishmash formats that don't sort units by size in ascending nor descending order are something we should have killed centuries ago. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17474264)
 You want to sort based on the  float  values (not string values), so try:     

  >>> b = ["949.0","1099.0"]
>>> b.sort(key=float)
>>> b
['949.0', '1099.0']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12658517)
 It is sorting by alphabetical order, so you need to break up the numbers and convert them to ints and sort with that. (Numbers in strings are treated as just characters, so it "sees" "A10" and tries to sort it first by "A", then by "1", and then by "0.") For example: 

  >>> sorted(dir, key=lambda x: int(x[1:]))
['A1', 'A2', 'A3', 'A10']
  

 If you are going to have other letters besides "A" in  dir , you'll need a more complicated sorting method, but it will be something along the same lines. (If you explain what  dir  contains more, I can write an example for that.) As mgilson's comment points out, if the elements of  dir  follow the 1 char + number format, then you could take advantage of tuple sorting and do something like this: 

  >>> dir.append('B12')
>>> sorted(dir, key=lambda x: (x[0],int(x[1:])))
['A1', 'A2', 'A3', 'A10', 'B12']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7638912)
 You could use http://nedbatchelder.com/blog/200712/human_sorting.html: 

  import numpy as np
import re

def atoi(text):
    try:
        return int(text)
    except ValueError:
        return text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    '''    
    return [ atoi(c) for c in re.split('([-]?\d+)', text) ]

a = np.array(["3", "-2", "-1", "0", "2", "word"])
print(sorted(a,key=natural_keys))
# ['-2', '-1', '0', '2', '3', 'word']

a = np.array(["3", "-2", "-1", "0", "2", "word", "-1 word", "-2 up"])
print(sorted(a,key=natural_keys))
# ['-2', '-2 up', '-1', '-1 word', '0', '2', '3', 'word']
  



