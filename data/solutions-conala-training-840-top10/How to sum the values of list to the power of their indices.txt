Query: How to sum the values of list to the power of their indices
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40639982)
 You can do this with numpy, which is often faster than iterating through lists: 

  In [1]: import numpy as np

In [2]: l = [0, 3, 4, 1]

In [3]: np.array(l) ** np.arange(len(l))
Out[3]: array([ 1,  3, 16,  1])

In [4]: np.array(l) ** np.arange(1, len(l) + 1)
Out[4]: array([ 0,  9, 64,  1])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50605933)
 In python  **  is the sign for exponent, so  x ** 2  is  x^2  (or x squared). 

  x += g  is the same as  x = x + g  

  sum += digit ** power  ==  sum = sum + (digit ** power)  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19314351)
 If you simply want to retrieve the values in an array from a list of indices, and sum them, you can do: 

  import numpy as np
a = np.array([[1,2,3],[4,5,6],[7,8,9]])
ind = [[0,1],[2,2],[1,1]]
values = a[zip(*ind)]
b = values.sum()
# b = 2+9+5 = 16
  

 Note that I set indices  ind  as a list of indices pairs, and thus  zip  is necessary. Obviously this can be done in multiple ways.  a[...]  just needs to get a list or tuple (not numpy array) of indices grouped by axis, i.e.  a[(0,2,1),(1,2,1)] . 

 Now to make arbitrary addition or subtraction, there are multiple ways possible. For example: 

  import numpy as np
a = np.array([[1,2,3],[4,5,6],[7,8,9]])
ind = [[0,1],[2,2],[1,1]]   # indices in array
op = [1,1,-1]               # 1 for addition, -1 for subtraction
values = a[zip(*ind)]*op
b = values.sum()
# b = 2+9-5 = 6
  

 One last point: this method is useful for a set of indices of arbitrary size (i.e. which would be a parameter of your code). For 3 specific values, its is better to do it explicitly as in your code. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52826136)
 Run the  sum  on the  groupby , and then  reset_index()  to flatten it.  

  df.groupby(['YEAR', 'REGION']).sum().reset_index()

#    YEAR REGION  POWER
# 0  2009   East  19.30
# 1  2009   West   3.43
# 2  2010  North  19.40
# 3  2010   West  14.90
# 4  2011   East  16.66
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40639102)
 Use https://docs.python.org/3/library/functions.html#enumerate to get the index and supply that to https://docs.python.org/3/library/functions.html#sum: 

  sum(j ** i for i,j in enumerate(l, 1))
  

 Specifying the  start  argument to  enumerate  as  1  assures indices will start from  1  (as you want) and not from  0  (the default which you get with a plain  enumerate ): 

  >>> l = [3, 0, 2]    
>>> sum(j ** i for i,j in enumerate(l, 1))
11
  

 In a functional spirit, you could also utilize https://docs.python.org/3/library/functions.html#map with https://docs.python.org/3/library/itertools.html#itertools.count from https://docs.python.org/3/library/itertools.html passing in https://docs.python.org/3/library/functions.html#pow as the function to be mapped: 

  >>> from itertools import count
>>> sum(map(pow, l, count(1)))
11
  

 These pretty much execute in approximately the same time; the generator expression to  sum  though offers a slight advantage of flexibility. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51269358)
 The following solution, relying on https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.sum.html#scipy.ndimage.sum is highly optimized for speed: 

  import numpy as np
A = np.array([[0.52,0.25,-0.45,0.13], [-0.14,-0.41,0.31,-0.41]])
B = np.array([[1,3,1,2], [3,0,2,2]])
import scipy.ndimage
print(scipy.ndimage.sum(A, B, index=[0,1,2,3]))
  

 You may have to work a little for having the  index  parameter be exactly what you want. It is the list of the indices you want to get in the result. Maybe the following will be a good starting point: 

  print(scipy.ndimage.sum(A,B, index=np.unique(B)))
  

 but if you know by advance the list of all indices, it will be more efficient to hard-code it here. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15926944)
 I would first group the values in a new dict and then sum then. Takes a bit more space but it's easy and fast: 

  from collections import defaultdict
from itertools import groupby

power = defaultdict(list)
usage = defaultdict(list)

for i, time in enumerate(data['time']):
    power[time].append(data['power'][i])
    usage[time].append(data['usage'][i])

times = [key for key,group in groupby(data['time'])]

print {    'time': times,
           'power' : [sum(power[time]) for time in times],
           'usage' : [sum(usage[time]) for time in times]
       }
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51268854)
 The https://github.com/EelcoHoogendoorn/Numpy_arraysetops_EP package has efficient and simple solutions to this problem (disclaimer: I am its author): 

  import numpy_indexed as npi
keys, values = npi.group_by(B.flatten()).sum(A.flatten())
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50605991)
  while temp > 0:
    digit = temp % 10 
    sum += digit ** power
    temp //= 10
  

 
  Take the last digit of  temp   
  Add to  sum  the  digit  to the power of  power   
 Delete the last digit of  temp  
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/23686864)
 You are on the right path. Using  np.tril_indices  you can indeed smartly index these lower triangles. What remains to be improved is the actual indexing/slicing of the data.  

 Please try this (copy and pasteable): 

  import numpy as np
shape = (3, 10, 10, 19, 75, 10, 10)
p = np.arange(np.prod(shape)).reshape(shape)  # this is not symmetric, but not important

ix, iy = np.tril_indices(10)
# In order to index properly, we need to add axes. This can be done by hand or with this
ix1, ix2 = np.ix_(ix, ix)
iy1, iy2 = np.ix_(iy, iy)

p_ltriag = p[:, ix1, iy1, :, :, ix2, iy2]
print p_ltriag.shape  # yields (55, 55, 3, 19, 75), axis order can be changed if needed

q = np.zeros_like(p)
q[:, ix1, iy1, :, :, ix2, iy2] = p_ltriag  # fills the lower triangles on both sides
q[:, ix1, iy1, :, :, iy2, ix2] = p_ltriag  # fills the lower on left, upper on right
q[:, iy1, ix1, :, :, ix2, iy2] = p_ltriag  # fills the upper on left, lower on right
q[:, iy1, ix1, :, :, iy2, ix2] = p_ltriag  # fills the upper triangles on both sides
  

 The array  q  now contains a symmetrized version of  p  (where the upper triangles were replaced with the content of the lower triangles). Note that the last line contains  iy  and  ix  indices in inversed order, essentially creating a transpose of the lower triangular matrix. 

  Comparison on lower triangles 
In order to compare back, we set all the upper triangles to  0  

  ux, uy = np.triu_indices(10)
p[:, ux, uy] = 0
q[:, ux, uy] = 0
p[:, :, :, :, :, ux, uy] = 0
q[:, :, :, :, :, ux, uy] = 0

print ((p - q) ** 2).sum()  # euclidean distance is 0, so p and q are equal

print ((p ** 2).sum(), (q ** 2).sum())  # prove that not all entries are 0 ;) - This has a negative result due to an overflow
  



