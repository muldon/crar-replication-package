Query: Python Regex replace
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18043582)
 If the string to be replaced is constant you don't need a regex. Simply use  replace : 

  >>> str1 = r'''hfo/gfbi/mytag=a_17014b_82c'''
>>> str1.replace('a_17014b_82c','myvalue')
'hfo/gfbi/mytag=myvalue'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11475905)
 . Regular expressions in Python are handled by the http://docs.python.org/library/re.html module. 

  article = re.sub(r'(?is)</html>.+', '</html>', article)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29947784)
 You can use positive  look around  with re.sub : 

  >>> s = '[i1]scale=-2:givenHeight_1[o1];'
>>> re.sub(r'(?<=:).*(?=\[)','360',s)
'[i1]scale=-2:360[o1];'
  

 The preceding regex will replace any thing that came after  :  and before  [  with an  '360' . 

 Or based on your need you can use  str.replace  directly : 

  >>> s.replace('givenHeight_1','360')
'[i1]scale=-2:360[o1];'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7293785)
 I think you don't really need a regex. 

  for x in v:
  s = s.replace('blah', x, 1)
  

 However if you really wanted a regex: 

  import re
for x in v:
  s = re.sub('blah', x, s, count=1)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7293780)
 In this case, you don't need regex: 

  s.replace("blah","%s")%v
  

 the replace produces "%s %s %s", then you use the format operator 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23826576)
 You need to use https://docs.python.org/2/howto/regex.html to be able to use regex in search replace. 

  # your code goes here
import re
line = "something with space . dot";
line = re.sub(r'[. \n]+', ",", line);
print line;
  

 http://ideone.com/Cxxggk 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6921477)
 (I assume you're using python 3, since you're using unicode characters in regular strings. For python 2, add  u  before each string literal.) 

 Python 3 

  import re

name = "拉柏多公园"
# the string of Chinese characters, with any number of spaces interspersed.
# The regex will match any surrounding spaces.
regex = r"\s*拉\s*柏\s*多\s*公\s*园\s*"
  

 So you can replace each string with 

  reline = re.sub(regex, ' ' + name + ' ', line)
  

 Python 2 

  # -*- coding: utf-8 -*-

import re

name = u"拉柏多公园"
# the string of Chinese characters, with any number of spaces interspersed.
# The regex will match any surrounding spaces.
regex = ur"\s*拉\s*柏\s*多\s*公\s*园\s*"
  

 So you can replace each string with 

  reline = re.sub(regex, u' ' + name + u' ', line)
  

 Discussion 

 The result will be surrounded by spaces. More generally, if you want it to work at the start or end of the line, or before commas or periods, you'll have to replace  ' ' + name + ' '  with something more sophisticated. 

 Edit: fixed. Of course, you have to use the  re  library function. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41426010)
  replace  in  pandas  lets you use  regex  and  (  has special meaning in  regex  so use  \(   

  df['Title'] = df['Title'].str.replace('\(\(\(', '>>')
  

 pandas doc: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html 



