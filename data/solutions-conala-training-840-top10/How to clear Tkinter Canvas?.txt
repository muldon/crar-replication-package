Query: How to clear Tkinter Canvas?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13825958)
 To delete everything on a canvas, call the  delete  method with an argument of  "all" . I don't know anything about matplotlib, but I'm guessing you would do something like this:  

  canvas.get_tk_widget().delete("all")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15840231)
 Every canvas item is an object that Tkinter keeps track of. If you are clearing the screen by just drawing a black rectangle, then you effectively have created a memory leak -- eventually your program will crash due to the millions of items that have been drawn. 

 To clear a canvas, use the http://effbot.org/tkinterbook/canvas.htm#Tkinter.Canvas.delete-method method. Give it the special parameter  "all"  to delete all items on the canvas (the string  "all" " is a special tag that represents all items on the canvas): 

  canvas.delete("all")
  

 If you want to delete only certain items on the canvas (such as foreground objects, while leaving the background objects on the display) you can assign tags to each item. Then, instead of  "all" , you could supply the name of a tag.  

 If you're creating a game, you probably don't need to delete and recreate items. For example, if you have an object that is moving across the screen, you can use the http://effbot.org/tkinterbook/canvas.htm#Tkinter.Canvas.move-method or http://effbot.org/tkinterbook/canvas.htm#Tkinter.Canvas.coords-method method to move the item.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43954698)
 As Bryan Oakley suggested you can store the id's of the widgets you want to get rid of in a list to make it easier to  destroy()  them all in the  callback()  function. Here's showing the modification to your code that would do thatâ€”note the lines with a  # ADDED  comments. 

  from tkinter import *
from PIL import Image, ImageTk

canvas_width = 360
canvas_height = 525
file = r"C:\Users\kraak\Desktop\PyCharm Community Edition 2017.1.2\borderedpaper.GIF"
master = Tk()
canvas = Canvas(master, width=canvas_width, height=canvas_height)
canvas_entry_widgets = []  # ADDED

old_img = PhotoImage(file=file)
new_img = old_img.subsample(3, 3)
canvas.create_image(-11, -10, anchor=NW, image=new_img)
canvas.create_window(0, 0, height=1, width=1, anchor=NW)
canvas.create_text(0, 0, text="Test")

e1 = Entry(canvas)
canvas.create_window(250, 60, window=e1, height=15, width=100)
label = Label(text="Enter an adjective.")
label.place(x=40, y=50)
e1.focus_set()
canvas_entry_widgets.append(e1)  # ADDED

e2 = Entry(canvas)
canvas.create_window(250, 85, window=e2, height=15, width=100)
label = Label(text="Enter a nationality.")
label.place(x=40, y=75)
e2.focus_set()
canvas_entry_widgets.append(e2)  # ADDED

def callback():
    print("Pizza was invented by a " + (e1.get()) + " " + (e2.get()))
    # destroy the canvas entry widgets and clear the list  # ADDED
    while canvas_entry_widgets:                            # ADDED
        widget = canvas_entry_widgets.pop()                # ADDED
        widget.destroy()                                   # ADDED

def answer():
    button = Button(text="Submit.", command=callback)
    button.place(x=150, y=460)

answer()
canvas.pack()

mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12187591)
  #call the clear method on your axes
self.ax.clear()

#plot the new data
self.ax.set_ylim(min(newy), max(newy))
self.ax.semilogx(newx, newy, 'o-')

#call the draw method on your canvas
self.canvas.draw()
  

 hope this helps 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26992825)
 You could place colored rectangles on the canvas on click and remove them when clicked again: 

  import Tkinter as tk

# Set number of rows and columns
ROWS = 5
COLS = 5

# Create a grid of None to store the references to the tiles
tiles = [[None for _ in range(COLS)] for _ in range(ROWS)]

def callback(event):
    # Get rectangle diameters
    col_width = c.winfo_width()/COLS
    row_height = c.winfo_height()/ROWS
    # Calculate column and row number
    col = event.x//col_width
    row = event.y//row_height
    # If the tile is not filled, create a rectangle
    if not tiles[row][col]:
        tiles[row][col] = c.create_rectangle(col*col_width, row*row_height, (col+1)*col_width, (row+1)*row_height, fill="black")
    # If the tile is filled, delete the rectangle and clear the reference
    else:
        c.delete(tiles[row][col])
        tiles[row][col] = None

# Create the window, a canvas and the mouse click event binding
root = tk.Tk()
c = tk.Canvas(root, width=500, height=500, borderwidth=5, background='white')
c.pack()
c.bind("<Button-1>", callback)

root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15048852)
 The only thing you have to do is bind  "<Button-1>"  and  "<ButtonRelease-1>"  to the canvas: 

  from Tkinter import Tk, Canvas

start = None

def onclick_handler(event):
    global start
    start = (event.x, event.y)

def onrelease_handler(event):
    global start
    if start is not None:
        x = start[0]
        y = start[1]
        event.widget.create_line(x, y, event.x, event.y)
        start = None

master = Tk()
canvas = Canvas(master, width=200, height=200)
canvas.bind("<Button-1>", onclick_handler)
canvas.bind("<ButtonRelease-1>", onrelease_handler)
canvas.pack()
master.mainloop()
  

 I don't like at all using global variables, it is much cleaner to wrap all the widgets and related functions in a class. However, as an example I think it is clear enough. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36642092)
 I'm not in business with the FigureCanvasTkAgg thing, but as long as it based on the tk.Canvas this should work: 

 In tk.Canvas you just use 

  canv=tk.Canvas(master=root, bd=0, highlightthickness=0)
  

 Try to add the following parameters to the FigureCanvasTkAgg call: bd, highlightthickness. 

  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15774025)
 In my opinion, this is layout can be much easier with the pack geometry manager. One of the problems is that you are trying to make the width and the height of each widget fit in its place with  rowspan  and  columspan  options. Also, since  canvas is inside a frame, you have to think that it is like inside a new window, so a simple call to  canvas.grid()  would be enough. 

 However, with  pack()  you just have to put  textbox ,  run_button  and  clear_button  inside a new frame: 

  left_frame = Frame(root)
textbox = Text(left_frame, ...)
run_button = Button(left_frame, ...)
clear_button = Button(left_frame, ...)

canvas_frame= Frame(root, ...)
canvas_frame.configure(borderwidth=1.5,background='black')
canvas = Canvas(canvas_frame, ...)
console = Text(root, ...)

left_frame.pack(side=LEFT)
textbox.pack()
run_button.pack(side=LEFT)
clear_button.pack()
canvas_frame.pack()
canvas.pack()
console.pack()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45856151)
 you are plotting two plots on top of each other: 

  from tkinter import *
from windrose import WindroseAxes
from matplotlib import pyplot as plt
import numpy as np
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.animation as animation
from matplotlib import style
import tkinter as tk


root = Tk()
style.use("ggplot")

fig = plt.figure(figsize=(6,4),dpi=100)
#a = fig.add_subplot(111) # this gives you the square grid in the background

def animate(i):
    ws = np.random.random(500) * 6
    wd = np.random.random(500) * 360

#    a.clear() # not needed if plot doesn't exist
    fig.clear() # we need to clear the figure you're actually plotting to
    rect = [0.1,0.1,0.8,0.8] 
    wa = WindroseAxes(fig, rect)
    fig.add_axes(wa)
    wa.bar(wd, ws, normed=True, opening=0.8, edgecolor='white')
    wa.set_legend()

canvas = FigureCanvasTkAgg(fig,root)
canvas.show()
canvas.get_tk_widget().pack(side=tk.BOTTOM,fill=tk.BOTH,
                     expand=True,anchor='s')

ani = animation.FuncAnimation(fig, animate, interval=1000)
root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/11893324)
 You can use the canvas as if it were a frame in order to draw your own window borders. Like you said, however, you cannot draw canvas items on top of widgets embedded in a canvas; widgets always have the highest stacking order. There is no way around that, though it's not clear if you really need to do that or not. 

 Here's a quick and dirty example to show how to create a window with a gradient for a custom border. To keep the example short I didn't add any code to allow you to move or resize the window. Also, it uses a fixed color for the gradient.  

  import Tkinter as tk

class GradientFrame(tk.Canvas):
    '''A gradient frame which uses a canvas to draw the background'''
    def __init__(self, parent, borderwidth=1, relief="sunken"):
        tk.Canvas.__init__(self, parent, borderwidth=borderwidth, relief=relief)
        self._color1 = "red"
        self._color2 = "black"
        self.bind("<Configure>", self._draw_gradient)

    def _draw_gradient(self, event=None):
        '''Draw the gradient'''
        self.delete("gradient")
        width = self.winfo_width()
        height = self.winfo_height()
        limit = width
        (r1,g1,b1) = self.winfo_rgb(self._color1)
        (r2,g2,b2) = self.winfo_rgb(self._color2)
        r_ratio = float(r2-r1) / limit
        g_ratio = float(g2-g1) / limit
        b_ratio = float(b2-b1) / limit

        for i in range(limit):
            nr = int(r1 + (r_ratio * i))
            ng = int(g1 + (g_ratio * i))
            nb = int(b1 + (b_ratio * i))
            color = "#%4.4x%4.4x%4.4x" % (nr,ng,nb)
            self.create_line(i,0,i,height, tags=("gradient",), fill=color)
        self.lower("gradient")

class SampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.wm_overrideredirect(True)
        gradient_frame = GradientFrame(self)
        gradient_frame.pack(side="top", fill="both", expand=True)
        inner_frame = tk.Frame(gradient_frame)
        inner_frame.pack(side="top", fill="both", expand=True, padx=8, pady=(16,8))

        b1 = tk.Button(inner_frame, text="Close",command=self.destroy)
        t1 = tk.Text(inner_frame, width=40, height=10)
        b1.pack(side="top")
        t1.pack(side="top", fill="both", expand=True)

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
  



