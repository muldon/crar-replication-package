Query: print number with commas as thousands separators
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16924278)
 One liner for Python 2.5+ and Python 3 (positive int only): 

  ''.join(reversed([x + (',' if i and not i % 3 else '') for i, x in enumerate(reversed(str(1234567)))]))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10742904)
 For Python â‰¥ 2.7: 

  "{:,}".format(value)
  

 Per https://docs.python.org/library/string.html#format-specification-mini-language, 

 
   The  ','  option signals the use of a comma for a thousands separator. For a locale aware separator, use the  'n'  integer presentation type instead. 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4113289)
 Here's one that works for floats too: 

  def float2comma(f):
    s = str(abs(f)) # Convert to a string
    decimalposition = s.find(".") # Look for decimal point
    if decimalposition == -1:
        decimalposition = len(s) # If no decimal, then just work from the end
    out = "" 
    for i in range(decimalposition+1, len(s)): # do the decimal
        if not (i-decimalposition-1) % 3 and i-decimalposition-1: out = out+","
        out = out+s[i]      
    if len(out):
        out = "."+out # add the decimal point if necessary
    for i in range(decimalposition-1,-1,-1): # working backwards from decimal point
        if not (decimalposition-i-1) % 3 and decimalposition-i-1: out = ","+out
        out = s[i]+out      
    if f < 0:
        out = "-"+out
    return out
  

 Usage Example: 

  >>> float2comma(10000.1111)
'10,000.111,1'
>>> float2comma(656565.122)
'656,565.122'
>>> float2comma(-656565.122)
'-656,565.122'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13090418)
 I have found another solution: 

  '{:,.2f}'.format(num).replace(".","%").replace(",",".").replace("%",",")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46465860)
 Slightly expanding the answer of Ian Schneider: 

 If you want to use a custom thousands separator, the simplest solution is: 

  '{:,}'.format(value).replace(',', your_custom_thousands_separator)
  

 Examples 

  '{:,.2f}'.format(123456789.012345).replace(',', ' ')
  

 If you want the German representation like this, it gets a bit more complicated: 

  ('{:,.2f}'.format(123456789.012345)
          .replace(',', ' ')  # 'save' the thousands separators 
          .replace('.', ',')  # dot to comma
          .replace(' ', '.')) # thousand separators to dot
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32050746)
 You can also use  '{:n}'.format( value )  for a locale representation. I think this is the simpliest way for a locale solution. 

 For more information, search for  thousands  in https://docs.python.org/3.5/library/string.html#format-specification-mini-language. 

 For currency, you can use  locale.currency , setting the flag  grouping : 

  Code  

  import locale

locale.setlocale( locale.LC_ALL, '' )
locale.currency( 1234567.89, grouping = True )
  

  Output  

  'Portuguese_Brazil.1252'
'R$ 1.234.567,89'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38553110)
 This is what I do for floats.  Although, honestly, I'm not sure which versions it works for - I'm using 2.7: 

  my_number = 4385893.382939491

my_string = '{:0,.2f}'.format(my_number)
  

 Returns: 4,385,893.38 

  Update: I recently had an issue with this format (couldn't tell you the exact reason), but was able to fix it by dropping the  0 :  

  my_string = '{:,.2f}'.format(my_number)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1823189)
 Here is the locale grouping code after removing irrelevant parts and cleaning it up a little: 

 (The following only works for integers) 

  def group(number):
    s = '%d' % number
    groups = []
    while s and s[-1].isdigit():
        groups.append(s[-3:])
        s = s[:-3]
    return s + ','.join(reversed(groups))

>>> group(-23432432434.34)
'-23,432,432,434'
  

 

 There are already some good answers in here. I just want to add this for future reference. In python 2.7 there is going to be a format specifier for thousands separator. According to http://docs.python.org/dev/whatsnew/2.7.html#pep-378-format-specifier-for-thousands-separator it works like this 

  >>> '{:20,.2f}'.format(f)
'18,446,744,073,709,551,616.00'
  

 In python3.1 you can do the same thing like this: 

  >>> format(1234567, ',d')
'1,234,567'
  



