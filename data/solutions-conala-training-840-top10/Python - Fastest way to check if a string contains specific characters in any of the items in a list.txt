Query: Python - Fastest way to check if a string contains specific characters in any of the items in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14411670)
  filter(lambda x: lestring.count(x), lelist)
  

 That will return all the strings that you're trying to find as a list. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14411674)
 You can try list comprehension with membership check 

  >>> lestring = "Text123"
>>> lelist = ["Text", "foo", "bar"]
>>> [e f e in lelist if e in lestring]
['Text']
  

 Compared to your implementation, though LC has an implicit loop but its faster as there is no explicit function call as in your case with  count  

 Compared to Joe's implementation, yours is way faster, as the filter function would require to call two functions in a loop,  lambda  and  count  

  >>> def joe(lelist, lestring):
    return ''.join(random.sample(x + 'b'*len(x), len(x)))

>>> def uz(lelist, lestring):
    f x in lelist:
        if lestring.count(x):
            return 'Yep. "%s" contains characters from "%s" item.' % (lestring, x)


>>> def ab(lelist, lestring):
    return [e f e in lelist if e in lestring]

>>> t_ab = timeit.Timer("ab(lelist, lestring)", setup="from __main__ impt lelist, lestring, ab")
>>> t_uz = timeit.Timer("uz(lelist, lestring)", setup="from __main__ impt lelist, lestring, uz")
>>> t_joe = timeit.Timer("joe(lelist, lestring)", setup="from __main__ impt lelist, lestring, joe")
>>> t_ab.timeit(100000)
0.09391469893125759
>>> t_uz.timeit(100000)
0.1528471407273173
>>> t_joe.timeit(100000)
1.4272649857800843
  

 

 Jamie's commented solution is slower f shter string's. Here is the test result 

  >>> def jamie(lelist, lestring):
    return next(itertools.chain((e f e in lelist if e in lestring), (None,))) is not None

>>> t_jamie = timeit.Timer("jamie(lelist, lestring)", setup="from __main__ impt lelist, lestring, jamie")
>>> t_jamie.timeit(100000)
0.22237164127909637
  

 

 If you need Boolean values, f shter strings, just modify the above LC expression 

  [e in lestring f e in lelist if e in lestring]
  

 Or f longer strings, you can do the following 

  >>> next(e in lestring f e in lelist if e in lestring)
True
  

   

  >>> any(e in lestring f e in lelist)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51465423)
 Here's some possible ways to achieve this task: 

  def attempt1(string):
    return "".join([v for v in string if v not in ("a", "e", "i", "o", "u")])


def attempt2(string):
    for v in ("a", "e", "i", "o", "u"):
        string = string.replace(v, "")
    return string


def attempt3(string):
    import re
    for v in ("a", "e", "i", "o", "u"):
        string = re.sub(v, "", string)
    return string


def attempt4(string):
    return string.replace("a", "").replace("e", "").replace("i", "").replace("o", "").replace("u", "")


for attempt in [attempt1, attempt2, attempt3, attempt4]:
    print(attempt("murcielago"))
  

 ./;:" the examples use the vowels... and yeah, "murcielago" is the Spanish word to say bat... funny word as it contains all the vowels :) 

 PS2: If you're interested on performance you could measure these attempts with a simple code like: 

  import timeit


K = 1000000
for i in range(1,5):
    t = timeit.Timer(
        f"attempt{i}('murcielago')",
        setup=f"from __main__ import attempt{i}"
    ).repeat(1, K)
    print(f"attempt{i}",min(t))
  

  

  attempt1 2.2334518376057244
attempt2 1.8806643818474513
attempt3 7.214925774955572
attempt4 1.7271184513757465
  

 So it seems attempt4 is the fastest one for this particular input. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25611163)
 If your list only contains characters, you can definitely write 

<pre class="lang-py prettyprint-override"> print ''.join(b) in ''.join(a)
  

 Output: 

  True
  

 This does not work, e.g. if  a = ['abc', 'def', 'ghi']  and  b = ['bc', 'd'] . It yields  True , because  bcd  is in  abcdefghi . 

  

  print '@'+'@'.join(b)+'@' in '@'+'@'.join(a)+'@'
  

 In case  a  or  b  contain items with character  '@'  you might replace it by some unused character. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44756571)
 You could use https://docs.python.org/3.6/library/collections.html#collections.Counter. Just build two counters and use the https://docs.python.org/3.6/library/collections.html#collections.Counter.subtract method to check if there're any negative counts: 

  >>> c1 = Counter(characters)
>>> c2 = Counter(message)
>>> c1.subtract(c2)
>>> all(v >= 0 for v in c1.values())
False
  

 This should work in linear time. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27781638)
 Using https://stackoverflow.com/questions/6750240/how-to-do-re-compile-with-a-list-in-python 

 Consider memory and building time or expression, compile in advance. 

  lista = [...]
lista_escaped = [re.escape(item) for item in lista]
bad_match = re.compile('|'.join(lista_escaped))
is_bad = bad_match.search(message, re.IGNORECASE)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15751247)
 I don't know if will be faster, but this regular expression might satisfy you: 

  couplet = re.compile(r'(.).*\1')
result_strings = [s if not re.search(couplet, s) for s in candidate_strings]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44757752)
 There is maybe a faster way of doing this, apparently due to the cost of creating the all() generator (https://stackoverflow.com/questions/11583869/why-is-pythons-all-function-so-slow) perhaps a for loop is faster, Expanding on @eugene y's answer: 

  from collections import Counter
import time

message = "hello"
characters = "hheeooasdadsfgfdgfdhgfdlkgkfd"

def check1(message,characters):
    c1 = Counter(characters)
    c2 = Counter(message)
    c1.subtract(c2)
    return all(v > -1 for v in c1.values())

def check2(message,characters):
    c1 = Counter(characters)
    c2 = Counter(message)
    c1.subtract(c2)
    for v in c1.values():
        if v < 0:
            return False
    return True

st = time.time()
for i in range(350000):
    check1(message,characters)
end = time.time()
print ("all(): "+str(end-st))

st = time.time()
for i in range(350000):
    check2(message,characters)
end = time.time()
print ("for loop: "+str(end-st))
  

 results: 

  all(): 5.201688051223755
for loop: 4.864434719085693
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44757261)
 Here is another solution compared to eugene's solution and jbndlr's solution. 

  def test1(input_word, alphabet):
    alp_set = set(list(alphabet))
    in_set = set(list(input_word))
    return in_set.issubset(alp_set)

def test2(input_word, alphabet):
    c1 = collections.Counter(alphabet)
    c2 = collections.Counter(input_word)
    c1.subtract(c2)
    return all(v >= 0 for v in c1.values())

def check(msg, chars):
    c = list(chars)  # Creates a copy
    try:
        for m in msg:
            c.remove(m)
    except ValueError:
        return False
    return True

input_word = "hello"
alphabet = "hheellooasdadsfgfdgfdhgfdlkgkfd"


start_time = time.time()
for i in range(10000):
    test1(input_word,alphabet)
print("--- %s seconds ---" % (time.time() - start_time))

start_time = time.time()
for i in range(10000):
    test2(input_word,alphabet)
print("--- %s seconds ---" % (time.time() - start_time))

start_time = time.time()
   for i in range(10000):
       check(input_word,alphabet)
   print("--- %s seconds ---" % (time.time() - start_time))

>> --- 0.03100299835205078 seconds ---
>> --- 0.24402451515197754 seconds ---
>> --- 0.022002220153808594 seconds ---
  

 ⇒ jbndlr's solution is the fastest - for this test case.  

 Another testcase:  

  input_word = "hellohellohellohellohellohellohellohellohellohellohellohellohello"
alphabet =   
  

  

  >> --- 0.21964788436889648 seconds ---
>> --- 0.518169641494751 seconds ---
>> --- 1.3148927688598633 seconds ---
  

 ⇒ test1 is fastest 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48759497)
 You need to escape the special characters like  \  in the string before inserting them into the array, like this: 

  In [2]: something = ["\\", "/"]
In [3]: something
Out[3]: ['\\', '\/']
  

 Printing it will give you the escaped backslash 

  In [12]: something = ["\\", "/"]
In [13]: something
Out[13]: ['\\', '/']
In [14]: print ', '.join(something)
\, /
  



