Query: Get the immediate minimum among a list of numbers in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29476051)
 Use  heapq.nlargest  and  heapq.nsmallest  

  import heapq

num_list = [1, 2, 3, 4]

heapq.nlargest(2, num_list)
heapq.nsmallest(2, num_list)
#>>> [4, 3]
#>>> [1, 2]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29472024)
 next lowest to 3: 

  max([x for x in num_list if x < 3])
  

 next greatest to 2: 

  min([x for x in num_list if x > 2])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29472326)
  TL;DR  Either  min(n for n in my_list if n>lower_bound)  or  max(n for n in my_list if n<upper_bound)  

 

 A much faster alternative for finding the  immediate minimum  or the  immediate maximum  is  numpy  

  >>> import numpy as np
>>> np.random.seed(10)
>>> a = np.random.random(10000)
>>> a[a>0.7].min()
0.69999533217645671
>>> a[a<0.7].max()
0.70003449227846715
  

 If you are uncomfortable using the  numpy  machinery
and want to deal simply with a list 

  >>> a = list(a)
  

 then you can use the  min  and  max  builtins along with generator
expressions 

  >>> min(n for n in a if n>0.7)
0.69999533217645671
>>> max(n for n in a if n<0.7)
0.70003449227846715
>>>
  

 Using lists you have, of course, the same results but beware that there is a difference in performance: using  ipython  and  %timeit  to get the timings, I had 871 Âµs using  numpy  and 13.8 ms using regular lists for the 100000 elements array/list of the previous examples. 

 HTH, ciao 

 

  Post Scriptum  

 The solutions in my answer are all O(n), compared with the O(n log n) of methods that use sorting --- further, for large data sets the  numpy  approach  should  (italics because I have no testing at hand...) be affected by a small multiplicative factor. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29471933)
 You can use  sorted  : 

  >>> l=sorted(num_list,reverse=True)
>>> l[l.index(3)+1]
2
  

 But as a more pythonic way as Frerich Raabe says in comment you dont need to sore whole of list you can find the max value on elements that are lower than 3 : 

  >>> max(i for i in num_list if i<3)
2
  

 And for next largest after 2 you can use  min  :  

  >>> min(i for i in num_list if i>2)
3
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29472064)
 I see your question is tagged [lower-bound] and [upperbound]. If your list is sorted, Python has an equivalent of C++ <algorithm>'s  lower_bound  and  upper_bound . They're in the  bisect  module. They return the indices of the begin and immediately after the end of a range of some specific value. 

  In [1]: import bisect

In [2]: A = [0, 1, 3, 3, 5]

In [3]: A[bisect.bisect_left(A, 3)-1]
Out[3]: 1

In [4]: A[bisect.bisect_right(A, 3)]
Out[4]: 5
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33623262)
 You might want to take a look at  heapq : 

  In [109]: L = [random.randint(1,1000) for _ in range(100)]

In [110]: heapq.nsmallest(10, L)
Out[110]: [1, 17, 17, 19, 24, 37, 37, 45, 63, 73]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52348522)
 The  min()  function expects an iterable like a list which it will then yield the smallest element from. 

 E.g.  min([1,0,3])  gives  0 . 

 So if you want to use it, you must create a list (or other iterable) of the odd numbers that you can then pass into it: 

  def min_odd(x):
    odds = []
    for i in x:
        if i % 2 != 0:
            odds.append(i)
    return min(odds)
  

 note that we could also use a list-comprehension: 

  def min_odd(x):
    return min([i for i in x if i % 2 != 0])
  

 . 

 

 An alternative method would be to store the current minimum odd value in a variable and update this variable if we come across a smaller odd value: 

  def min_odd(x):
   min_v = float('inf')
   for i in x:
      if i % 2 != 0 and i < min_v:
         min_v = i
   return min_v
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11964572)
 I guess you are trying to do something like this: 

  data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []

while data_list:
    minimum = data_list[0]  # arbitrary number in list 
    for x in data_list: 
        if x < minimum:
            minimum = x
    new_list.append(minimum)
    data_list.remove(minimum)    

print new_list
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33623498)
 If the list of the kth smallest numbers doesn't need to be sorted, this can be done in O(n) time with a selection algorithm like https://en.wikipedia.org/wiki/Introselect. The standard library doesn't come with one, but NumPy has http://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html for the job: 

  partitioned = numpy.partition(l, k)
# The subarray partitioned[:k] now contains the k smallest elements.
  



