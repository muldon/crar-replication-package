Query: loop through an IP address range
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13368863)
 You can use https://docs.python.org/2/library/itertools.html#itertools.product: 

  for i,j in product(range(256),range(256)):
    print "192.168.{0}.{1}".format(i,j)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33801373)
 Using netaddr module:
http://netaddr.readthedocs.io/en/latest/api.html#netaddr.IPSet.iter_ipranges 

  from netaddr import iter_iprange
generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)
generator.next() # 192.168.1.1
generator.next() # 192.168.1.2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13368679)
 Did you try, you know, looping with  range ? 

  for i in range(256):
    for j in range(256):
        ip = "192.168.%d.%d" % (i, j)
        print ip
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47196808)
 If you want to loop through a network you can define a network using ipaddress module. Such as ipaddress.IPv4Network('192.168.1.0/24') 

  import ipaddress
for ip in ipaddress.IPv4Network('192.168.1.0/24'):
    print(ip)
  

 This will produce a result like this: 

  192.168.1.0
192.168.1.1
192.168.1.2
192.168.1.3
  

 But if you want to iterate through a range of ip's, you might need to convert between ip and integer.  

  >>> int(ipaddress.IPv4Address('10.0.0.1'))
167772161
  

  

  start_ip = ipaddress.IPv4Address('10.0.0.1')
end_ip = ipaddress.IPv4Address('10.0.0.5')
for ip_int in range(int(start_ip), int(end_ip)):
    print(ipaddress.IPv4Address(ip_int))
  

 will produce a result like: 

  10.0.0.1
10.0.0.2
10.0.0.3
10.0.0.4
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49817102)
 "IP addresses with / in them" as you call them are not actually IP addresses. They are IP networks (which means a range of IP addresses) in something called "CIDR Notation". 

 You can process IP networks using  ipaddress.ip_network() . For example: 

  >>> ipn = ipaddress.ip_network("2001:200:e000::/35")
>>> ipn.num_addresses
9903520314283042199192993792
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41509123)
 The idea is to split the IP and check every component separately. 

  mask = "26.83.152.12-192"
IP = "26.83.152.19"
def match(mask, IP):
   splitted_IP = IP.split('.')
   for index, current_range in enumerate(mask.split('.')):
      if '-' in current_range:
         mini, maxi = map(int,current_range.split('-'))
      else:
         mini = maxi = int(current_range)
      if not (mini <= int(splitted_IP[index]) <= maxi):
         return False
   return True
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33107499)
 This should work for you, though I haven't tested it. 

  ip=raw_input("Enter an ip address:")
partToFetch= int(ip.split(".")[3])
for i in range(partToFetch,256):
    print "192.168.1.{0}".format(str(i))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36456290)
 You can use string format function to convert the numbers to binary. I made this function:
 

  def ip2bin(ip):
    octets = map(int, ip.split('/')[0].split('.')) # '1.2.3.4'=>[1, 2, 3, 4]
    binary = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(*octets)
    range = int(ip.split('/')[1]) if '/' in ip else None
    return binary[:range] if range else binary
  

 This will return a binary IP or IP range, so you can use it to test if an IP is in a range: 

<pre class="lang-py prettyprint-override"> >>> ip2bin('255.255.127.0')
'11111111111111110111111100000000'
>>> ip2bin('255.255.127.0/24')
'111111111111111101111111'
>>> ip2bin('255.255.127.123').startswith(ip2bin('255.255.127.0/24'))
True
  



