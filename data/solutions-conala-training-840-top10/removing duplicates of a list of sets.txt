Query: removing duplicates of a list of sets
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32297056)
 An alternative using a loop: 

  result = list()
for item in L:
    if item not in result:
        result.append(item)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32296966)
 The best way is to convert your sets to  frozenset s (which are hashable) and then use  set  to get only the unique sets, like this 

  >>> list(set(frozenset(item) for item in L))
[frozenset({2, 4}),
 frozenset({3, 6}),
 frozenset({1, 2}),
 frozenset({5, 6}),
 frozenset({1, 4}),
 frozenset({3, 5})]
  

 If you want them as sets, then you can convert them back to  set s like this 

  >>> [set(item) for item in set(frozenset(item) for item in L)]
[{2, 4}, {3, 6}, {1, 2}, {5, 6}, {1, 4}, {3, 5}]
  

 

 If you want the order also to be maintained, while removing the duplicates, then you can use https://docs.python.org/3/library/collections.html#collections.OrderedDict, like this 

  >>> from collections import OrderedDict
>>> [set(i) for i in OrderedDict.fromkeys(frozenset(item) for item in L)]
[{1, 4}, {1, 2}, {2, 4}, {5, 6}, {3, 6}, {3, 5}]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32297339)
 Here is another alternative 

  yourNewSet = map(set,list(set(map(tuple,yourSet))))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14832994)
 You can use sets: 

  first_list = [1, 2, 2, 5]
second_list = [2, 5, 7, 9]

resultList= list(set(first_list) | set(second_list))

print(resultList)
# Results in : resultList = [1,2,5,7,9]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19147809)
 Use the http://docs.python.org/3.3/library/stdtypes.html#set-types-set-frozenset in Python. You can freely convert lists to sets with  set()  and sets to lists with  list() . sets in Python pretty much follow the definition of http://en.wikipedia.org/wiki/Set_%28mathematics%29. This just means that all items in a set are distinct by definition. Converting a list to a set implicitly removes all duplicates. 

  

  >>> a = [1, 5, 7, 3]
>>> b = [1, 2, 3, 4, 5, 6, 7]
>>> set(a).issubset(b)
True
>>> b = [5, 6, 7, 8, 9, 10]
>>> set(a).issubset(b)
False
  

  

  >>> a = [1, 2, 3, 4, 5, 6, 7]
>>> b = [5, 6, 7, 8, 9, 10]
>>> list(set(a).intersection(b))
[5, 6, 7]
  

 Combining the two sets and removing duplicates: 

  >>> a = [1, 2, 3, 4, 5, 6, 7]
>>> b = [5, 6, 7, 8, 9, 10]
>>> list(set().union(a, b))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31999082)
 below code is simple for removing duplicate in list 

  def remove_duplicates(x):
    a = []
    for i in x:
        if i not in a:
            a.append(i)
    return a

print remove_duplicates([1,2,2,3,3,4])
  

 it returns [1,2,3,4] 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7961428)
 Try using sets: 

  import sets
t = sets.Set(['a', 'b', 'c', 'd'])
t1 = sets.Set(['a', 'b', 'c'])

print t | t1
print t - t1
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12389407)
 This might help    

  def union(a,b):
    for e in b:
        if e not in a:
            a.append(e)
  

 The union function merges the second list into first, with out duplicating an element of a, if it's already in a. Similar to set union operator. This function does not change b. If a=[1,2,3] b=[2,3,4]. After union(a,b) makes a=[1,2,3,4] and b=[2,3,4] 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51190888)
 Python first evaluates the list comprehension and then assigns it to  newList , so you cannot refer to it during execution of the list comprehension.   

 You can remove dublicates in two ways:- 
1. Using for loop 

  rand_list = [1,2,2,3,3,4,5]
new_list=[]
for i in rand_list:
    if i not in new_list:
        new_list.append(i)
  

<ol start="2">
  Convert list to set,then again convert set to list,and at last sort the new list. 
Since set stores values in any order so when we convert set into list you need to sort the list so that you get the item in ascending order      

  rand_list = [1,2,2,3,3,4,5]
 sets = set(rand_list)
 new_list = list(sets)
 new_list.   
 



