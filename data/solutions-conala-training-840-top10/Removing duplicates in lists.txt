Query: Removing duplicates in lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46707294)
 Without using set  

  data=[1, 2, 3, 1, 2, 5, 6, 7, 8]
uni_data=[]
for dat in data:
    if dat not in uni_data:
        uni_data.append(dat)

print(uni_data) 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46752164)
 Another way to do that is: 

  >>> list1 = [[1,2], [1,3], [3,5], [4,1], [9,6]]
>>> list2 = [[1,2], [1,3], [3,5], [6,6], [0,2], [1,7], [7,7]] 
>>> k = list1+list2 #We combine both the lists
>>> z = [] #Declare an empty list
>>>for i in k: #Loop through every element of the combined list
       if i in z: #If the element is already in the final list
           pass #Do nothing
       else: #If the element in the combined list is not not there in the final list
           z.append(i) #Append that element to the final list
>>>print z
>>>[[1, 2], [1, 3], [3, 5], [4, 1], [9, 6], [6, 6], [0, 2], [1, 7], [7, 7]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31999082)
 below code is simple for removing duplicate in list 

  def remove_duplicates(x):
    a = []
    for i in x:
        if i not in a:
            a.append(i)
    return a

print remove_duplicates([1,2,2,3,3,4])
  

 it returns [1,2,3,4] 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46752038)
 You need to convert sub-lists [mutable] to tuples [immutable] and get the set 

  set([tuple(i) for i in list1+list2])
  

 Output: 

  {(0, 2), (1, 2), (1, 3), (1, 7), (3, 5), (4, 1), (6, 6), (7, 7), (9, 6)}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29639138)
  

  myList = [1, 2, 3, 1, 2, 5, 6, 7, 8]
cleanlist = []
[cleanlist.append(x) for x in myList if x not in cleanlist]
  

 Output: 

  >>> cleanlist 
[1, 2, 3, 5, 6, 7, 8]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50948607)
 Very simple way in Python 3: 

  >>> n = [1, 2, 3, 4, 1, 1]
>>> n
[1, 2, 3, 4, 1, 1]
>>> m = sorted(list(set(n)))
>>> m
[1, 2, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46752043)
 
   Is it because set operation cannot be used in nested lists? 
 

 Yes, this is because lists are mutable, so a list can change after creation, which means the hash used in the set can change. 

 However a tuple is is immutable, so you can use those in a set: 

   list1 = [[1,2], [1,3], [3,5], [4,1], [9,6]]
 list2 = [[1,2], [1,3], [3,5], [6,6], [0,2], [1,7], [7,7]]
  

 convert them to tuples: 

   tuple1 = [tuple(l) for l in list1]

 tuple2 = [tuple(l) for l in list2]

 not_in_tuples = set(tuple2) - set(tuple1)
  

 result for  not_in_tuples : 

   {(0, 2), (1, 7), (6, 6), (7, 7)}
  

 and to combine them back to what you want in  results : 

  results = list1 + list(map(list, not_in_tuples))
  

  

  [[1, 2], [1, 3], [3, 5], [4, 1], [9, 6], [0, 2], [1, 7], [7, 7], [6, 6]]
  

  EDIT   

 If interested in preserving order of both lists after adding them together: 

  list1 = [[1,2], [1,3], [3,5], [4,1], [9,6]]
list2 = [[1,2], [1,3], [3,5], [6,6], [0,2], [1,7], [7,7]]

intersection = set(map(tuple, list1)).intersection(set(map(tuple, list2)))

result = list1 + [list(t) for t in map(tuple, list2) if t not in intersection]
  

  

  [[1, 2], [1, 3], [3, 5], [4, 1], [9, 6], [6, 6], [0, 2], [1, 7], [7, 7]]
  



