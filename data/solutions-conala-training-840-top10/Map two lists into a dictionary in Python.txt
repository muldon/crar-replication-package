Query: Map two lists into a dictionary in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42889025)
 You can use a list comprehension to create the desired output: 

  >>> [(k, sum(v)) for k, v in D.items()]   # Py2 use D.iteritems()
[(1, 60), (2, 537), (3, 20)]
  

 On my computer, this runs about 50% quicker than the  map(lambda:.., D)  version. 
Note: On py3  map  just returns a generator so you need to  list(map(...))  to get the real time it takes. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15834272)
  In [12]: list1 = ('a','b','c')

In [13]: list2 = ('1','2','3')

In [14]: list3 = ('4','5','6')

In [15]: zip(list2, list3)
Out[15]: [('1', '4'), ('2', '5'), ('3', '6')]

In [16]: dict(zip(list1, zip(list2, list3)))
Out[16]: {'a': ('1', '4'), 'b': ('2', '5'), 'c': ('3', '6')}

In [17]: dict(zip(list1, zip(map(int, list2), map(int, list3))))
Out[17]: {'a': (1, 4), 'b': (2, 5), 'c': (3, 6)}

In [18]: dict(zip(list1, map(list, zip(map(int, list2), map(int, list3)))))
Out[18]: {'a': [1, 4], 'b': [2, 5], 'c': [3, 6]}
  

 For an arbitrary number of lists, you could do this: 

  dict(zip(list1, zip(*(map(int, lst) for lst in (list2, list3, list4, ...)))))
  

 Or, to make the values lists rather than tuples, 

  dict(zip(list1, map(list, zip(*(map(int, lst) for lst in (list2, list3, list4, ...))))))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32048772)
 Use  map  to convert lists  to sets and  reduce  to apply the intersection.  

  reduce(lambda x,y: x&y, map(set, hitdict.values()))
  

  

  set([2, 3])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15183119)
 The quick and easy answer is  dict(zip(x,y)) , if you're ok with the keys being strings.  otherwise, use  dict(zip(map(int,x),y))  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15813714)
 If there are duplicate keys in the first list that map to different values in the second list, like a 1-to-many relationship, but you need the values to be combined or added or something instead of updating, you can do this: 

  i = iter(["a", "a", "b", "c", "b"])
j = iter([1,2,3,4,5])
k = list(zip(i, j))
for (x,y) in k:
    if x in d:
        d[x] = d[x] + y #or whatever your function needs to be to combine them
    else:
        d[x] = y
  

 In that example,  d == {'a': 3, 'c': 4, 'b': 8}  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29208244)
  index = ['a','b','c','d']
val = [[1,11,21,31],[3,13,23,33],[7,17,27,37]]

print dict(zip(index, zip(*val)))
  

 Output: 

  {'a': (1, 3, 7), 'c': (21, 23, 27), 'b': (11, 13, 17), 'd': (31, 33, 37)}
  

 If you need list instead of tuple. 

  print dict(zip(index, [list(i) for i in zip(*val)]))
  

 Output: 

  {'a': [1, 3, 7], 'c': [21, 23, 27], 'b': [11, 13, 17], 'd': [31, 33, 37]}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46624334)
 You need to use  zip  here to iterate through both lists concurrently. Then for every such list, we use  dictionary comprehension  to map the elements in the list to their counterparts. 

  

  [{k:[sub1[v] for v in vs] for k, vs in sub2.items()}
 for sub1, sub2 in zip(list_1, list_2)]
  

 this produces - with your sample input: 

  >>> list_1 = [['a','b','c'], ['d','e','f']]
>>> list_2 = [{'key_11': [0,2] , 'key_12': [0]}, {'key_21': [2,0], 'key_22': [1]}]
>>> [{k:[sub1[v] for v in vs] for k, vs in sub2.items()}
...  for sub1, sub2 in zip(list_1, list_2)]
[{'key_12': ['a'], 'key_11': ['a', 'c']}, {'key_21': ['f', 'd'], 'key_22': ['e']}]
  

  

 The outer part is  list comprehension . We iterate over  zip(list_1, list_2)  so we obtain the rows of  list_1  and  list_2  so to speak. These rows  sub1  and  sub2  are a list and a dictionary respectively. 

 For every such  sub1, sub2 , we construct a dictionary in the resulting list. This dictionary is constructed with  dictionary comprehension   {k:[sub1[v] for v in vs] for k, vs in sub2.items()} . We iterate through the key-value tuples in the  sub2  (the  sub2.items()  and for every such key-value pair we associate the key  k , with a value that is constructed through list comprehension again, based on the value of the dictionary  vs . 

  vs  is thus a list associated with the key in the dictionary, all we have to do is obtain the element that is associated with the index, so we perform a mapping  [sub1[v] for v in vs] . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27304201)
 If the key/value entries in your list  x  are evenly spaced, here's an alternative way to build the dictionary. It uses a few of Python's built in features and functions: 

  >>> keys = x[::3]
>>> values = [map(int, pair) for pair in zip(x[1::3], x[2::3])]
>>> dict(zip(keys, values))
{'a': [3, 4], 'b': [1, 2], 'c': [4, 5]}
  

 To explain what's being used here: 

 
 list slicing to create new lists from  x :  x[start:stop:step]  
 here  zip  takes two lists and makes a list of tuples containing the n-th elements of each list 
  map(int, pair)  turns a tuple of digit strings into a list of integers 
  values  is constructed with list comprehension - the  map  function is applied to each pair 
  dict  turns a list of pairs into dictionary keys/values 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51883006)
 You can also unpack using  str.get  

  vals = df.id.map(d)
df.latitude, df.longitude = vals.str.get(0), vals.str.get(1)
  

 Notice that this works if all values in  id  are in  d  

 If they are not, can do 

  vals =df.id.map(d).fillna(df[['latitude', 'longitude']].agg(tuple,1))
df.latitude, df.longitude = vals.str.get(0), vals.str.get(1)
  



