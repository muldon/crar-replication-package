Query: check if a variable exists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4353005)
 You may check if x is in  globals()  or  locals() . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/843293)
 To check the existence of a local variable: 

  if 'myVar' in locals():
  # myVar exists.
  

 To check the existence of a global variable: 

  if 'myVar' in globals():
  # myVar exists.
  

 To check if an object has an attribute: 

  if hasattr(obj, 'attr_name'):
  # obj.attr_name exists.
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26616037)
   

  'var' in dir(obj)
  

 For example,  

  >>> class Something(object):
...     pass
...
>>> c = Something()
>>> c.a = 1
>>> 'a' in dir(c)
True
>>> 'b' in dir(c)
False
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/30651757)
 A simple way is to initialize it at first saying  myVar = None  

 Then later on:    

  if myVar is not None:
    # Do something
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7580608)
 How about  dir()  function before  getattr() ? 

  >>> "mymethod" in dir(dyn)
True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20927345)
 You suggested  try   except . You could indeed use that: 

  try:
    variable
except NameError:
    print("Not in scope!")
else:
    print("In scope!")
  

 This checks if  variable  is in scope (it doesn't call the function). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44505593)
 You can check to see if the variable is in the dictionaries returned by  globals()  and  locals() . (Thank you to Aaron for reminding me to add the full code) 

 For a local variable: 

  if locals().get('abc'):
    print(abc)
  

 For a global variable: 

  if globals().get('abc'):
    print(abc)
  

 For an environment variable: 

  if os.environ.get('abc')=='True':
    #abc is set to True
  

 More information here: 

 https://docs.python.org/3/library/functions.html#locals
https://docs.python.org/3/library/functions.html#globals 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/843286)
  catch  is called http://docs.python.org/reference/compound_stmts.html#the-try-statement in Python. other than that it's fine for such simple cases. There's the http://docs.python.org/library/exceptions.html#exceptions.AttributeError that can be used to check if an object has an attribute. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44505524)
 You could use a Try Except Block. 

  try:
    # Try calling ABC here anyway you like
    # Here I am just printing it
    print(abc)
except NameError:
    print("Variable ABC does not exist")
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4353046)
 As they say in Python, "it's better to ask forgiveness than permission". So, just try and access the variable, and catch the error if it doesn't exist. 

  try:
    x
    print "x exists"
except UnboundLocalError:
    print "x doesn't exist"
  

 . Usually, you would always set the variable before checking its value. 



