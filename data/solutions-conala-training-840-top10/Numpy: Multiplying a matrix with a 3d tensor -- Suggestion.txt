Query: Numpy: Multiplying a matrix with a 3d tensor -- Suggestion
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40782979)
 You could also use Einstein summation notation: 

  P = numpy.random.randint(1,10,(5,3))
P.shape
T = numpy.random.randint(1,10,(2,3,4))
T.shape

numpy.einsum('ij,kjl->kil',P,T)
  

 which should give you the same results as: 

  P.dot(T).transpose(1,0,2)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37738355)
  

  x[:,:,None] * y[:,None,:]
  

 Just posting it as an answer so that people know there's an answer to this. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49731940)
 You can use https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.diagonal.html 

  np.diagonal(a, axis1=1, axis2=2)
  

 Example: 

  In [10]: a = np.arange(3*4*5).reshape(3,4,5)

In [11]: a
Out[11]: 
array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  7,  8,  9],
        [10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]],

       [[20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29],
        [30, 31, 32, 33, 34],
        [35, 36, 37, 38, 39]],

       [[40, 41, 42, 43, 44],
        [45, 46, 47, 48, 49],
        [50, 51, 52, 53, 54],
        [55, 56, 57, 58, 59]]])

In [12]: np.diagonal(a, axis1=1, axis2=2)
Out[12]: 
array([[ 0,  6, 12, 18],
       [20, 26, 32, 38],
       [40, 46, 52, 58]])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50709941)
 You can do this by multiplying it by a diagonal array with an extra axis: 

  >>> a = np.arange(16).reshape(4,4)
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
>>> a*np.eye(4)[:,np.newaxis]
array([[[  0.,   0.,   0.,   0.],
        [  4.,   0.,   0.,   0.],
        [  8.,   0.,   0.,   0.],
        [ 12.,   0.,   0.,   0.]],

       [[  0.,   1.,   0.,   0.],
        [  0.,   5.,   0.,   0.],
        [  0.,   9.,   0.,   0.],
        [  0.,  13.,   0.,   0.]],

       [[  0.,   0.,   2.,   0.],
        [  0.,   0.,   6.,   0.],
        [  0.,   0.,  10.,   0.],
        [  0.,   0.,  14.,   0.]],

       [[  0.,   0.,   0.,   3.],
        [  0.,   0.,   0.,   7.],
        [  0.,   0.,   0.,  11.],
        [  0.,   0.,   0.,  15.]]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52878532)
 That can be done with https://www.tensorflow.org/api_docs/python/tf/gather, using the  axis  parameter: 

  import tensorflow as tf
import numpy as np

a = np.arange(18).reshape((2,3,3))
idx = [2,0,1]
b = a[:, idx, :]
c = a[:, :, idx]

aT = tf.constant(a)
idxT = tf.constant(idx)
bT = tf.gather(aT, idxT, axis=1)
cT = tf.gather(aT, idxT, axis=2)

with tf.Session() as sess:
    b1, c1=sess.run([bT, cT])

print(np.allclose(b, b1))
print(np.allclose(c, c1))
  

 Output: 

<pre class="lang-none prettyprint-override"> True
True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53584011)
 A vectorized way to do it: 

  # Gets the triangle matrix
d_tensor = np.zeros(128, 128, 60, 3, 3)
triu_idx = np.triu_indices(3)
d_tensor[:, :, :, triu_idx[0], triu_idx[1]] = d
# Make it symmetric
diagonal = np.zeros(128, 128, 60, 3, 3)
idx = np.arange(3)
diagonal[:, :, :, idx, idx] = d_tensor[:, :, :, idx, idx]
d_tensor = np.transpose(d_tensor, (0, 1, 2, 4, 3)) + d_tensor - diagonal
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51729145)
 Here's one way: 

  import numpy as np

src = np.array([[2, 9, 0, 2, 4],
                [0, 1, 8, 8, 0],
                [1, 0, 3, 0, 0],
                [0, 0, 0, 0, 7]])
# Masked indices of non-zero positions
idx = np.arange(len(src))[:, np.newaxis] * (src != 0)
# Sort to and pick valid indices at the end
idx = np.sort(idx, axis=0)[-2:]
# Get values
trg = src[idx, np.arange(src.shape[1])]
print(trg)
  

 Output: 

  [[2 9 8 2 4]
 [1 1 3 8 7]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/39794464)
 The CP product of, for example, 4 matrices 

   

 can be expressed using https://en.wikipedia.org/wiki/Einstein_notation as 

   

 or in numpy as 

  numpy.einsum('az,bz,cz,dz -> abcd', A, B, C, D)
  

 so in your case you would use 

  numpy.einsum('az,bz->ab', P.U[0], P.U[1])
  

 or, in your 3-matrix case 

  numpy.einsum('az,bz,cz->abc', P.U[0], P.U[1], P.U[2])
  

  sktensor.ktensor.ktensor  also have a method  totensor()  that does exactly this: 

  np.allclose(np.einsum('az,bz->ab', P.U[0], P.U[1]), P.totensor())
>>> True
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12732099)
 If  matrix  is compatible, then you could (and probably should) put it in a  numpy  array. It's a very handy library for numeric computations and comes with lots of functions: depending on what you want to do, you may also want to look at  scipy . 

  import numpy as np

a = np.array(matrix)
a += 5.5555
  

 Given some random data as an example: 

  from numpy.random import random_sample

>>> a = random_sample( (3, 3, 3) )
>>> a
array([[[ 0.98899266,  0.10761687,  0.7784259 ],
        [ 0.79253918,  0.450742  ,  0.46417501],
        [ 0.71733034,  0.26575819,  0.19360072]],

       [[ 0.41609296,  0.96195897,  0.32777537],
        [ 0.59527144,  0.96655918,  0.50073892],
        [ 0.70797323,  0.406036  ,  0.47092251]],

       [[ 0.8572665 ,  0.00076713,  0.25379833],
        [ 0.03426925,  0.59837259,  0.85390736],
        [ 0.78306972,  0.00238982,  0.28702393]]])
>>> a += 5.55555
>>> a
array([[[ 6.54454266,  5.66316687,  6.3339759 ],
        [ 6.34808918,  6.006292  ,  6.01972501],
        [ 6.27288034,  5.82130819,  5.74915072]],

       [[ 5.97164296,  6.51750897,  5.88332537],
        [ 6.15082144,  6.52210918,  6.05628892],
        [ 6.26352323,  5.961586  ,  6.02647251]],

       [[ 6.4128165 ,  5.55631713,  5.80934833],
        [ 5.58981925,  6.15392259,  6.40945736],
        [ 6.33861972,  5.55793982,  5.84257393]]])
  



