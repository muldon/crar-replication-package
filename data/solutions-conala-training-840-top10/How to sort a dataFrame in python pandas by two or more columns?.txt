Query: How to sort a dataFrame in python pandas by two or more columns?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33837592)
 As of pandas 0.17.0,  DataFrame.sort()  is deprecated, and set to be removed in a future version of pandas. The way to sort a dataframe by its values is now is  DataFrame.sort_values  

 As such, the answer to your question would now be 

  df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36438038)
 First concatenate your column to your dataframe. 

  df2 = pd.concat([df, pd.DataFrame(tmp)], axis=1)
  

 Then rename the columns to the desired end result. 

  df2.columns = [0, 1, 2, 3, 4, 6, 5]
  

 Now sort on the renamed columns. 

  df2.sort_index(axis=1, inplace=True)

>>> df2
   0  1  2  3  4  5  6
0  6  7  4  5  2  2  1
1  0  3  1  3  3  3  4
2  9  8  4  3  6  5  2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42436754)
 You can use pandas' categorical Series for this purpose which supplies the functionality of an individual sort order: 

   df[0] = pd.Categorical(df[0], order)
 print(df.sort_values([0, 1]))

    0   1   2
 0  a   1   0
 3  a   2   3
 2  c   1   2
 5  c   2   5
 4  aa  1   4
 1  aa  2   1
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50304139)
  nlargest  function on the dataframe will do your work,  df.nlargest(#of rows,'column_to_sort')  

  import pandas
df = pd.DataFrame({'A':[1,1,1,2,2,2,2,3,4],'B':[1,2,3,1,2,3,4,1,1]})
df.nlargest(5,'B')
Out[13]: 
    A      B
6   2      4
2   1      3
5   2      3
1   1      2
4   2      2
# if you want only certain column in the output, the use

df.nlargest(5,'B')['A']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50985498)
 For large dataframes of numeric data, you may see a significant performance improvement via https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.lexsort.html, which performs an indirect sort using a sequence of keys: 

  import pandas as pd
import numpy as np

np.random.seed(0)

df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])
df1 = pd.concat([df1]*100000)

def pdsort(df1):
    return df1.sort_values(['a', 'b'], ascending=[True, False])

def lex(df1):
    arr = df1.values
    return pd.DataFrame(arr[np.lexsort((-arr[:, 1], arr[:, 0]))])

assert (pdsort(df1).values == lex(df1).values).all()

%timeit pdsort(df1)  # 193 ms per loop
%timeit lex(df1)     # 143 ms per loop
  

 One peculiarity is that the defined sorting order with  numpy.lexsort  is reversed:  (-'b', 'a')  sorts by series  a  first. We negate series  b  to reflect we want this series in descending order. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49265839)
 You can reset the index then sort them by chosen columns. Hope this helps. 

  import pandas as pd

mdf = pd.DataFrame([[1,2,50],[1,2,20],
                [1,5,10],[2,8,80],
                [2,5,65],[2,8,10]
               ], columns=['src','dst','n']); 
mdf = mdf.groupby(['src','dst'])['n'].agg(['sum','count']); 
mdf.reset_index(inplace=True)
mdf.sort_values(['src', 'sum'], ascending=[True, False], inplace=True)
print(mdf)

Result:
       src dst sum  count
    0   1   2   70   2
    1   1   5   10   1
    3   2   8   90   2
    2   2   5   65   1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17141755)
 As of the 0.17.0 release, the http://pandas.pydata.g/pandas-docs/version/0.17.0/generated/pandas.DataFrame.st.html method was deprecated in fav of http://pandas.pydata.g/pandas-docs/stable/generated/pandas.DataFrame.st_values.html.   st  was completely removed in the 0.20.0 release. The arguments (and results) remain the same: 

  df.st_values(['a', 'b'], ascending=[True, False])
  

 

 You can use the ascending argument of <a href="http://pandas.pydata.g/pandas-docs/stable/generated/pandas.DataFrame.st.html" : 

  df.st(['a', 'b'], ascending=[True, False])
  

 F example: 

  In [11]: df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])

In [12]: df1.st(['a', 'b'], ascending=[True, False])
Out[12]:
   a  b
2  1  4
7  1  3
1  1  2
3  1  2
4  3  2
6  4  4
0  4  3
9  4  3
5  4  1
8  4  1
  

 

 As commented by @renadeen 

 
   St isn't in place by default! So you should assign result of the st method to a variable  add inplace=True to method call. 
 

 that is, if you want to reuse df1 as a sted DataFrame: 

  df1 = df1.st(['a', 'b'], ascending=[True, False])
  

  

  df1.st(['a', 'b'], ascending=[True, False], inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40610648)
  

  dataframe.sort_values(by = 'date', ascending = False, inplace = True)
dataframe.to_dict()
  

 docs here http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35731606)
 You could use pd.apply. 

  Eg:

A = pd.DataFrame(np.random.randint(0,100,(4,5)), columns=['one','two','three','four','five']) 
print (A)

   one  two  three  four  five
0    2   75     44    53    46
1   18   51     73    80    66
2   35   91     86    44    25
3   60   97     57    33    79

A = A.apply(np.sort, axis = 1) 
print(A)

   one  two  three  four  five
0    2   44     46    53    75
1   18   51     66    73    80
2   25   35     44    86    91
3   33   57     60    79    97
  

 Since you want it in descending order, you can simply multiply the dataframe with -1 and sort it. 

  A = pd.DataFrame(np.random.randint(0,100,(4,5)), columns=['one','two','three','four','five'])
A = A * -1
A = A.apply(np.sort, axis = 1)
A = A * -1
  



