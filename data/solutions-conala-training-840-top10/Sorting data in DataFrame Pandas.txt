Query: Sorting data in DataFrame Pandas
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47500596)
 If you are inserting data from a list, this might help -  

  import pandas as pd

df = pd.DataFrame( [ [1,2,3], [2,5,7], [7,8,9]], columns=['A', 'B', 'C'])

print(df)
df.loc[-1] = [1,2,3] # list you want to insert
df.index = df.index + 1  # shifting index
df = df.sort_index()  # sorting by index
print(df)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48099713)
 Unstack would work. 

  df = pd.DataFrame([[1,.5,.75],[0.5,1,0.1],[0.75, 0.1, 1] ], index=['A','B','C'], columns =['A','B','C'])

df.unstack()


A  A    1.00
   B    0.50
   C    0.75
B  A    0.50
   B    1.00
   C    0.10
C  A    0.75
   B    0.10
   C    1.00
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38616603)
 Use  sort_index  specifying  level : 

  df.sort_index(level=2)
  

  

  df.sort_index(level=-1)
  

  

  df.sort_index(level='time')
  

 All yield: 

 https://i.stack.imgur.com/DbxlB.png 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40676527)
 I think it is possible by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reindex.html, first can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.sort_values.html for sorting: 

  df = pd.DataFrame({'A':[1,2,3],
                   'B':[4,5,6],
                   'C':[7,8,9],
                   'D':[1,3,5],
                   'E':[5,3,6],
                   'F':[7,4,3]})

print (df)
   A  B  C  D  E  F
0  1  4  7  1  5  7
1  2  5  8  3  3  4
2  3  6  9  5  6  3

print (df.A / df.D)
0    1.000000
1    0.666667
2    0.600000
dtype: float64

print ((df.A / df.D).sort_values())
2    0.600000
1    0.666667
0    1.000000
dtype: float64

print (df.reindex((df.A / df.D).sort_values().index))
   A  B  C  D  E  F
2  3  6  9  5  6  3
1  2  5  8  3  3  4
0  1  4  7  1  5  7
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38125280)
 You passed a dict as the data param so the order is not the same as the order of key creation as the order is not the same, you can specify the column order by passing a list of the columns as the arg for  columns  param: 

  In [307]:
testDf = pd.DataFrame({'c':[1,2],'b':[2,2],'a':[3,4]}, columns=['c','b','a'])
testDf

Out[307]:
   c  b  a
0  1  2  3
1  2  2  4
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26595696)
 You can solve this by https://stackoverflow.com/q/4836710/190597: 

  import re
import pandas as pd
def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    def atoi(text):
        return int(text) if text.isdigit() else text

    return [atoi(c) for c in re.split('(\d+)', text)]

columns = ['DIV10', 'DIV11', 'DIV12', 'DIV3', 'DIV4', 'DIV5']    
df = pd.DataFrame([[1]*len(columns)], columns=columns)
print(df)
#    DIV10  DIV11  DIV12  DIV3  DIV4  DIV5
# 0      1      1      1     1     1     1

df = df.reindex(columns=sorted(df.columns, key=natural_keys))
print(df)
  

  

     DIV3  DIV4  DIV5  DIV10  DIV11  DIV12
0     1     1     1      1      1      1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38125284)
 You need add parameter  columns  to http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html constructor, because  dict  is unordered: 

  print (pd.DataFrame({'c':[1,2],'b':[2,2],'a':[3,4]}, columns=['c','b','a']))
   c  b  a
0  1  2  3
1  2  2  4
  

 http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe: 

 
   Along with the data, you can optionally pass  index  (row labels) and  columns  (column labels) arguments. If you pass an index and / or columns, you are guaranteeing the index and / or columns of the resulting DataFrame. Thus, a dict of Series plus a specific index will discard all data not matching up to the passed index. 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34426920)
 How's about this: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html by the http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.cumcount.html and then the value itself: 

  In [11]: df = pd.DataFrame({"s": [1,4,2,4,3,1,1,2,4,3,2,1,4,3,2,3]})

In [12]: df.groupby("s").cumcount()
Out[12]:
0     0
1     0
2     0
3     1
4     0
5     1
6     2
7     1
8     2
9     1
10    2
11    3
12    3
13    2
14    3
15    3
dtype: int64

In [13]: df["s_cumcounts"] = df.groupby("s").cumcount()

In [14]: df.sort_values(["s_cumcounts", "s"])
Out[14]:
    s  s_cumcounts
0   1            0
2   2            0
4   3            0
1   4            0
5   1            1
7   2            1
9   3            1
3   4            1
6   1            2
10  2            2
13  3            2
8   4            2
11  1            3
14  2            3
15  3            3
12  4            3

In [15]: df = df.sort_values(["s_cumcounts", "s"])

In [16]: del df["s_cumcounts"]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42198767)
 New Answer 

 Consider dataframes  d1  and  d2  

  d1 = pd.DataFrame([
        [1, 2],
        [3, 4]
    ], ['A', 'B'], ['X', 'Y'])

d2 = pd.DataFrame([
        [4, 3],
        [2, 1]
    ], ['B', 'A'], ['Y', 'X'])

(d1.reindex(columns=d2.columns).values[:, None]
     == d2.values).all(-1).any(-1).all()

True
  

 Old Answer 

 Consider dataframes  d1  and  d2  

  d1 = pd.DataFrame([
        [1, 2],
        [3, 4]
    ], ['A', 'B'], ['X', 'Y'])

d2 = pd.DataFrame([
        [4, 3],
        [2, 1]
    ], ['B', 'A'], ['Y', 'X'])
  

 You want to reindex one like the other and use  pd.DataFrame.equals  

  d1.reindex_like(d2).equals(d2)

True
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54378929)
 May be this could help, where you can get the result with single sorting! 

  pd.DataFrame(list(df.apply(lambda x : sorted((x,c) for x,c in zip(x,df.columns)),axis=1)),
             index=df.index)

         0           1              2
U1  (0.0, 'U2') (0.2, 'U3')     (1.0, 'U1')
U2  (0.0, 'U3') (0.4, 'U1')     (1.0, 'U2')
U3  (0.0, 'U1') (0.45, 'U2')    (1.0, 'U3')
  



