Query: In python 2.4, how can I execute external commands with csh instead of bash?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/533422)
  

  >>> os.system("tcsh your_own_script")
  

 Or just write the script and add 

  #!/bin/tcsh
  

 at the beginning of the file and let the OS take care of that. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/533435)
 . I don't have tcsh installed but with zsh: 

  >>> os.system ("zsh -c 'echo $0'")
zsh
0
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/321950)
  import pexpect
child = pexpect.spawn('server stop')
child.expect_exact('Password:')

child.sendline('password')

print "Stopping the servers..."

index = child.expect_exact(['Server processes successfully stopped.', 'Server is not running...'], 60)
child.expect(pexpect.EOF)
  

 Did the trick!  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/809168)
 Add  input=  in  proc.communicate()  make it run, for guys who like to use standard lib. 

  from subprocess import Popen, PIPE
proc = Popen(['server', 'stop'], stdin=PIPE)
proc.communicate(input='password')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7234676)
 You don't need to do anything.
Commands (such that a Python script) that you start from a shell (such as csh) will inherit the shell's stdin (and stdout, stderr)  by default  unless you actively do something to prevent it. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3258304)
 What made you think os.system would use csh? It uses standard C function system, that on Unix system will call just basic /bin/sh. This will not be csh, but most probably bash, or some simpler version of it. 

 BTW: note that what you do with shell environment in os.system will not affect subsequent calls to os.system, because each is run in different subshell. In other words, changes made to the environment are lost. And your call to alias fails, because /bin/sh uses different syntax for aliases than csh. 

 You could workaround this by running not  foo , but something along the lines: 

  os.system("/bin/csh -i -c 'foo arg1 arg2'")
  

 Note the option  -i  which is supposed to force csh to read startup scripts. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/230862)
 Use http://www.python.org/doc/2.5.2/lib/module-subprocess.html.  Call Popen() to create your process and use communicate() to send it text.  Sorry, forgot to include the PIPE.. 

  from subprocess import Popen, PIPE

proc = Popen(['server', 'stop'], stdin=PIPE)

proc.communicate('password')
  

 You would do better do avoid the password and try a scheme like sudo and sudoers.  Pexpect, mentioned elsewhere, is not part of the standard library. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35230259)
 You can check the shell environment by using  

  import os
shell = os.environ['SHELL']
  

 Then you can make sure  shell  is set to  /bin/csh  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/359737)
 To do that, you would have to: 

 
 supply the  shell=True  argument in the  subprocess.Popen  call, and 
 separate the commands with:

 
  ;  if running under a *nix shell (bash, ash, sh, ksh, csh, tcsh, zsh etc) 
  &  if running under the  cmd.exe  of Windows 
  
 



