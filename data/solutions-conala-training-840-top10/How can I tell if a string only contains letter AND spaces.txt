Query: How can I tell if a string only contains letter AND spaces
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50377104)
 You can use  str.join : 

  mat_input = [['v', 'e', 'd', 'j', 'n', 'a', 'e', 'o'], ['i', 'p', 'y', 't', 'h', 'o', 'n', 'u'], ['s', 'u', 'e', 'w', 'e', 't', 'a', 'e']]
words_to_search = ['python', 'fox']
joined_input = list(map(''.join, mat_input))
results = {i:any(i in b or i in b[::-1] for b in joined_input) for i in words_to_search}
  

 Output: 

  {'python': True, 'fox': False}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29454791)
 You can use a  generator expression  within https://docs.python.org/2/library/functions.html#all built-in function :  

  if all(i.isalpha() or i.isspace() for i in my_string)
  

 But note that  i.isspace()  will check if the character is a whitespace if you just want  space  you can directly compare with space : 

  if all(i.isalpha() or i==' ' for i in my_string)
  

  

  >>> all(i.isalpha() or i==' ' for i in 'test string')
True
>>> all(i.isalpha() or i==' ' for i in 'test    string') #delimiter is tab
False
>>> all(i.isalpha() or i==' ' for i in 'test#string')
False
>>> all(i.isalpha() or i.isspace() for i in 'test string')
True
>>> all(i.isalpha() or i.isspace() for i in 'test       string')
True
>>> all(i.isalpha() or i.isspace() for i in 'test@string')
False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20544177)
 This code will check if the string only contains numbers and space character. 

  if re.match("^[0-9 ]+$", myString):
    print "Only numbers and Spaces"
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33961917)
 without seeing what your file is like its hard to tell what exactly to use so if you could update the question that would be great 

 but currently you are looping through each letter instead of the words... use split() to split the words into a list and change that list then rejoin the words together to have a string without the words that contain your letter 

  words = ''
with open(ifile_name,"r") as file:
    for line in file:
        list_of_words = line.split(' ')
        for key, word in enumerate(list_of_words):
            if 'l' in word:
                list_of_words[key] = ''

        words += ' '.join(w for w in list_of_words if w != '')
        words += '\n'

with open(ofile_name, "w+") as file:
    file.write(words)
  

 the nice thing with this is you dont have any issues with white space. you will get a regular string with single spaces 

 EDIT: as pointed out in the comments a better way to do this (non in memory one for the whole file) is to do it inline  

  with open(ifile_name,"r") as in_file, open(ofile_name, "w+") as out_file:
    for line in file:
        list_of_words = line.split(' ')
        for key, word in enumerate(list_of_words):
            if 'l' in word:
                list_of_words[key] = ''

        out_file.write(' '.join(w for w in list_of_words if w != ''))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32899130)
 Use  .strip()  at the end.  .strip()  removes leading and trailing whitespace from a string. You can read more about it in the https://docs.python.org/3/library/stdtypes.html#str.strip. 

  def spaceitout(string,amount):
    amountint= int(amount)
    pile= ""
    for char in string:
        pile= pile + char + " "*amount
    return pile.strip()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33131804)
 You can use negative lookahead in your regex: 

  patter = r"^\s*$)[<>'.,?\[\] \w\d-]+$"
  

  \s*$)  is the negative lookahead to fail the match if input has just 0 or more spaces. 

    

  >>> print bool(re.match(patter, " "))
False
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41497483)
 How about  split  on  [^A-Za-z ]|  and take the first element? You can trim possible white spaces later: 

  import re
re.split("[^A-Za-z ]|  ", "My string is #not very beautiful")[0].strip()
# 'My string is'

re.split("[^A-Za-z ]|  ", "this is the last  example")[0].strip()
# 'this is the last'

re.split("[^A-Za-z ]|  ", "Are you 9 years old?")[0].strip()
# 'Are you'
  

 

  [^A-Za-z ]|  contains two patterns, the first pattern is a single character which is neither a letter nor a white space; the second pattern is a double white space; Split on one of these two patterns, the first element after the split should be what you are looking for. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46334284)
 Instead of just removing white spaces, for removing any char before first letter, do this :  

  #s is your string
for i,x in enumerate(s):
    if x.isalpha()         #True if its a letter
    pos = i                   #first letter position
    break

new_str = s[pos:]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53749846)
 You could iterate over words in the sentence taking only consonants only if the word contains atleast one consonant: 

  data = "Have a Nice Day"

splitted = data.split()
for i, x in enumerate(splitted):
    if not all(y in 'aeiou' for y in x.lower()):
        splitted[i] = ''.join([y for y in x if y.lower() not in 'aeiou'])

print(' '.join(splitted)) 
# Hv a Nc Dy
  



