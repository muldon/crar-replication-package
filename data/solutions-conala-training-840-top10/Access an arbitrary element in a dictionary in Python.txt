Query: Access an arbitrary element in a dictionary in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/27820611)
 For both Python 2 and 3: 

  import six

six.next(six.itervalues(d))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34892000)
 In python3  

  list(dict.values())[0]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52367131)
 simplest way for python3: 

  list(dict.keys())[0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39292164)
 to get a key</h3>

  next(iter(mydict))
  

 to get a value</h3>

  next(iter(mydict.values()))
  

 to get both</h3>

  next(iter(mydict.items())) # or next(iter(mydict.viewitems())) in python 2
  

 The first two are Python 2 and 3. The last two are lazy in Python 3, but not in Python 2. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47496249)
 No external libraries, works on both Python 2.7 and 3. 

  >>> list(set({"a":1, "b": 2}.values()))[0]
1
  

 For aribtrary key just leave out .values() 

  >>> list(set({"a":1, "b": 2}))[0]
'a'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34933893)
 . . 

  py 2 & 3  

  a = {"a":2,"b":3}
a[list(a)[0]] # the first element is here
>>> 2
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17085251)
 If you only need to access one element (being the first by chance, since dicts do not guarantee ordering) you can simply do this in  Python 2 : 

  my_dict.keys()[0]     -> key of "first" element
my_dict.values()[0]   -> value of "first" element
my_dict.items()[0]    -> (key, value) tuple of "first" element
  

 Please note that (at best of my knowledge) Python does not guarantee that 2 successive calls to any of these methods will return list with the same ordering. This is not supported with Python3. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3098077)
 Ignoring issues surrounding dict ordering, this might be better: 

  next(dict.itervalues())
  

 This way we avoid item lookup and generating a list of keys that we don't use. 

 Python3 

  next(iter(dict.values()))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25626583)
 You can Print Element on separate line like this : 

        >>> d={'one-to-ten':[1,2,3,4,5,6,7,8,9,10],'elevent to twenty':[11,12,13,14,15,16,17,18,19,20]}
       for i,j in d.items():
             print "element in "+str(i)
             for m in d[i]:
                        print m
  

 output  

   element in one-to-ten
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 element in elevent to twenty
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4809123)
  popitem()  is arbitrary but not random. If you want to access a random element 

  import random
key = random.choice(d.keys())
val = d[key]
del d[key]
  



