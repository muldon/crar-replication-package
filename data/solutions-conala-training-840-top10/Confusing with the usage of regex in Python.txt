Query: Confusing with the usage of regex in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6001226)
 That's not a regular for, not in the C-language sense. It's a Python http://docs.python.org/tutorial/datastructures.html#list-comprehensions. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22229410)
 
  You get the final  ''  because  [a-z]*  is matching the empty string at the end.  
  The character  'o'  is missing because you have told  re.findall  to match  groups , and each group has a single character.  Put another way, you’re doing the equivalent of 

  m = re.match(r'([a-z])*', 'op')
m.group(1)
  

 which will return  'p' , because that’s the last thing captured by the parens (capture group 1).  
  Again, you’re matching groups, but this time multi-character groups.  
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27806747)
 This should do: 

  import re
def get_last_part(d):
    m = re.match('[^_]*_(.*)', d)
    if m:
        return m.group(1)
    else:
        return None

print get_last_part('WebSpherePMI_jvmRuntimeModule_ProcessCpuUsage')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6001224)
 You are confused because you are looking at a list comprehension. 

 Read more http://docs.python.org/tutorial/datastructures.html#list-comprehensions 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6001223)
 That's not a mere loop/if, but a http://docs.python.org/tutorial/datastructures.html#list-comprehensions 

 In particular this piece of code: 

  return [note for note in self.notes if note.match(filter)]
  

 for each note in  self.notes  returns only those notes matching the filter condition. 

 This is basically a filter, but in general you can use list comprehensions also to "transform" list elements e.g.: 

  [1000 * x for x in myNumbers if x < 2]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44315573)
  (1)*  means "match 0 or more 1's". So for  100  it matches the 1, the empty string between 0 and 0, and the empty string after the last 0. You then replace the empty strings with '*'. 1+ requires at least one 1 in the match, so it won't match the boundary between characters. 

 For those readers curious, yes the python output is  *0*0*  and not  **0*0* . Here is a test python http://%3Cscript%20src=%22//repl.it/embed/I2Jz/0.js%22%3E%3C/script%3E to play with. (Regex101 has the wrong output for this, because it does not use an actual python regex engine. Online Regex testers will usually use PCRE (which is provided in PHP and Apache HTTP Server), and fake the target regex engine. Always test your regex in live code!) 

 Here you can see in JavaScript the output will be  **0*0*  (it will match the empty string between 1 and 0 as a new match) This is a prime example of why 'regex flavor' is important. Different engines use slightly different rules. (in this case, if the new match starts at 0 or the character boundary) 

 <div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"> console.log("100".replace(/(1)*/g, '*'))  
</div>
</div>
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30226456)
 There are a couple of issues here - how arguments are parsed, and how the usage is formatted. 

 A couple of quick fixes: 

 Use  --  to mark the end of the optionals list, and the start of the positional(s). 

 Another possibility is to turn your  positional  into a  optional .  That is, give it a simple flag, and  required  parameter if needed.  Then it can be placed anywhere in the subparser's input. 

 

<p addresses this issue of a positional following a * optional.  It makes the same quick suggestions.  It also shows how the help formatter can be changed to not move the positional to the end of the usage.  But it doesn't address the multi-line usage case. 

 Usage order is also discussed in a more recent SO question, 
https://stackoverflow.com/a/29619171/901925 

 

 If you don't like the default argument groupings (positionals and optionals), you can use  argument_groups  with different titles and descriptions.   and '*', and 'required' parameters, names like 'optionals' and 'positionals' can be confusing.  I'm trying to use 'flagged' for 'optionals', in the hope that it is less confusing. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44317102)
  regex = r"1*"
p = re.compile(regex)
test_str = "100"
for m in p.finditer(test_str):
    print(m.start(), m.group())
  

 Outputs 4 matches (that's why regex101 shows 4 matches): 

  0 1
1 
2 
3 
  

 While  re.sub()  replaces 3 positions which is a cause of  re.sub()  advancing after a zero-length match (https://docs.python.org/3/library/re.html#re.sub): 

 
   sub(pattern, repl, string, count=0, flags=0)</h3>
  
   Return the string obtained by replacing the leftmost  non-overlapping  occurrences of
   pattern  in string by the replacement  repl . 
  
   ... 
  
   Empty matches for the pattern are replaced only when not adjacent to a
  previous match, so  sub('x*', '-', 'abc')  returns  '-a-b-c-' . 
 

 What does a non-overlapping occurrence mean? http://www.regular-expressions.info/zerolength.html: 

 
   the first match ended at the start of the string, where the first
  match attempt began. The regex engine needs a way to avoid getting
  stuck in an infinite loop that forever finds the same zero-length
  match at the start of the string. 
  
   The simplest solution, which is used by most regex engines, is to
  start the next match attempt one character after the end of the
  previous match, if the previous match was zero-length. 
 

 In this case, the second match attempt begins at the position between the 1 and the 0 in the string, hence the difference.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25404855)
 Just use capturing groups in the same regex, 

  >>> import re
>>> s = "00:00:01,478 --> 00:00:04,020"
>>> m = re.sub(r'([0-9]{2}:[0-9]{2}:[0-9]{2}),([0-9]{3})', r'\1.\2', s)
                 ^                          ^ ^        ^
>>> m
'00:00:01.478 --> 00:00:04.020'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22229642)
 Example 1</h3>

  re.findall(r'[a-z]*',"f233op")
  

 This pattern is matching zero-or-more instances of lower case alphabet characters.  The ZERO-or-more part is key here, since a match of nothing, starting from every index position in the string, is just as valid as a match of  f  or  op .  The last empty string returned is the match starting from the end of the string (the position between  p  and  $  (end of string). 

 Example 2</h3>

  re.findall(r'([a-z])*',"f233op")
  

 Now you are matching character groups, consisting of a single lower-case alphabet character.  The  o  is no longer returned because this is a greedy search, and the last valid matched group will be returned.  So if you changed the string to  f233op12fre , the final  e  would be returned, but no the preceding  f  or  r .  Likewise, if you take out the  p  in your string, you still see that  o  is returned as a valid match. 

 Conversely, if you tried to make this regex non-greedy by adding a  ?  .  ([a-z])*? ), the returned set of matches would all be empty strings, since a valid match of nothing has a higher precedence of a valid match of something. 

 Example 3</h3>

  re.findall(r'([a-z]*)',"f233op")
  

 Nothing is different in the matched characters, but now you are returning character groups instead of raw matches.  The output of this regex query will be the same as your first example, but you'll notice that if you add an additional matching group, you will suddenly see the results of each match attempt grouped into tuples: 

  IN : re.findall(r'([a-z]*)([0-9]*)',"f233op")
OUT: [('f', '233'), ('op', ''), ('', '')]  
  

 Contrast this with the same pattern, minus the parenthesis (groups), and you'll see why they are important: 

  IN : re.findall(r'[a-z]*[0-9]*',"f233op")
OUT: ['f233', 'op', ''] 
  

 Also...</h3>

 It can be useful to plug regex patterns like these into regex diagram generators like http://www.regexplained.co.uk/ to see how the pattern matching logic works.  For example, as an explanation as to why your regex is always returning empty character string matches, take a look at the difference between the patterns http://tinyurl.com/owzux3h and http://tinyurl.com/qd26e3s. 

 Don't forget to check the http://docs.python.org/2/library/re.html if you get stuck, they actually give a pretty stellar explanation for the standard regex syntax. 



