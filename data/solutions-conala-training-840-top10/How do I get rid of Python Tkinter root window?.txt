Query: How do I get rid of Python Tkinter root window?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26932613)
 On OSX, iconify seems to work better: 

  root = Tkinter.Tk()
root.iconify()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1407700)
 Probably the vast majority of of tk-based applications place all the components in the default root window. This is the most convenient way to do it since it already exists. Choosing to hide the default window and create your own is a perfectly fine thing to do, though it requires just a tiny bit of extra work.  

 To answer your specific question about how to hide it, use the http://effbot.org/tkinterbook/wm.htm#Tkinter.Wm.withdraw-method method of the root window: 

  import Tkinter as tk
root = tk.Tk()
root.withdraw()
  

 If you want to make the window visible again, call the http://effbot.org/tkinterbook/wm.htm#Tkinter.Wm.deiconify-method (or wm_deiconify) method. 

  root.deiconify()
  

 Once you are done with the dialog, you can destroy the root window along with all other tkinter widgets with the http://effbot.org/tkinterbook/widget.htm#Tkinter.Widget.destroy-method method: 

  root.destroy()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36630843)
 The code you have does <b>not</b> execute after  root.mainloop() .  

 Even if you do a simple  print("Hello World")  statement after  root.mainloop() , it wont execute until your Tkinter window closes.  

 This is because  root.mainloop()  is an infinte-loop, constantly running your tkinter window. 

      root.mainloop() #Runs your tkinter window
    print("Hello World") #<-- Will not be executed until your root.mainloop() stops
  

 

 So the question is: how do we get your <b>"closing the window after 5 seconds"</b> to work during  root.mainloop ... 

 The answer is through the use of  root.after(miliseconds,desiredFunction) . 

 

 Here is your program with the desired effect of closing after 5 seconds: 

  from tkinter import *
import time

root = Tk()
text = "Hello World"
theLabel = Label(root,text = text,font=("Arial",200),height = 100,)
theLabel.pack()

#after 5000 miliseconds(5 seconds) of root being 'alive', execute root.destroy()
root.after(5000, root.destroy) #notice no parenthesis () after destroy

root.mainloop()
  

 

 Hopefully this is what you were looking for! 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1407668)
 I haven't tested since I don't have any Python/TKinter environment, but try this. 

 In pure Tk there's a method called "wm" to manage the windows. There you can do something like "wm withdraw .mywindow" where '.mywindow' is a toplevel. 

 In TkInter you should be able to do something similar to: 

  root = Tkinter.Tk()
root.withdraw() # won't need this
  

 If you want to make the window visible again, call the http://effbot.org/tkinterbook/wm.htm#Tkinter.Wm.deiconify-method (or wm_deiconify) method.  

  root.deiconify()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17932601)
 Tkinter requires that a root window exist before you can create any other widgets, windows or dialogs. If you try to create a dialog before creating a root window, tkinter will automatically create the root window for you. 

 The solution is to explicitly create a root window, then withdraw it if you don't want it to be visible. 

 You should always create exactly one instance of  Tk , and your program should be designed to exit when that window is destroyed.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17280890)
 Tkinter must have a root window. If you don't create one, one will be created for you. If you don't want this root window, create it and then hide it: 

  import Tkinter as tk
root = tk.Tk()
root.withdraw()
tkMessageBox.showinfo("Say Hello", "Hello World")
  

 Your other choice is to  not  use tkMessageBox, but instead put your message in the root window. The advantage of this approach is you can make the window look exactly like you want it to look. 

  import Tkinter as tk
root = tk.Tk()
root.title("Say Hello")
label = tk.Label(root, text="Hello World")
label.pack(side="top", fill="both", expand=True, padx=20, pady=20)
button = tk.Button(root, text="OK", command=lambda: root.destroy())
button.pack(side="bottom", fill="none", expand=True)
root.mainloop()
  

 (personally I would choose a more object-oriented approach, but I'm trying to keep the code small for this example) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1067995)
 The  trick  is to invoke withdraw on the Tk root top-level: 

  >>> import tkMessageBox, Tkinter
>>> Tkinter.Tk().withdraw()
>>> tkMessageBox.askquestion(
...     title="Symbol Display",
...     message="Is the symbol visible on the console")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17931432)
 Create root window explicitly, then withdraw. 

  from Tkinter import *
from tkMessageBox import *
Tk().withdraw()
askyesno('Verify', 'Really quit?')
  

 Not beautiful solution, but it works. 

 

  UPDATE  

 Do not create the second Tk window. 

  from Tkinter import *
from tkMessageBox import *

root = Tk()
root.withdraw()
showinfo('OK', 'Please choose')
root.deiconify()

# Do not create another Tk window. reuse root.

root.title("Report month")
...
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43382060)
 To avoid a "flash" as the root window is created, use this slight variation on the accepted answer: 

  import Tkinter as tk
root = tk.Tk()
root.overrideredirect(1)
root.withdraw()
tkMessageBox.showinfo("Say Hello", "Hello World")
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44329688)
 I believe what you want to do is use  

  root.wm_attributes('-fullscreen','true')  

 Try this instead. It should do the trick. 

  from tkinter import *
root = Tk()

root.wm_attributes('-fullscreen','true')

def quitApp():
    root.destroy()

button = Button(text = 'QUIT', command = quitApp).pack()

root.mainloop()
  

 If this does not work because of the MacOS then take a look at this http://wiki.tcl.tk/13428 This useful page has sever examples of how to manage mack windows in tkinter. And I believe what you may need to get borderless fullscreen. 

 This bit of code might be what you need: 

  root.tk.call("::tk::unsupported::MacWindowStyle", "style", root._w, "plain", "none")
  

 Note: If you do use this option then you will need to remove  root.wm_attributes('-fullscreen','true')  from your code or just comment it out. 

 Update: 

 There is also another bit of code for tkinter 8.5+. 

 If you are using python with tkinter 8.5 or newer: 

  root.wm_attributes('-fullscreen', 1)
  



