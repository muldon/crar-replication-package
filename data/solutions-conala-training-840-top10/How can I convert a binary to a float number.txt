Query: How can I convert a binary to a float number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38283005)
 This works for me.
Tested with Python3.4: 

  def float_to_bin(num):
    return bin(struct.unpack('!I', struct.pack('!f', num))[0])[2:].zfill(32)

def bin_to_float(binary):
    return struct.unpack('!f',struct.pack('!I', int(binary, 2)))[0]

float_to_bin(bin_to_float(float_to_bin(123.123))) == float_to_bin(123.123)
>>> True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8751666)
  float(int('-0b1110',0))
  

 That works for me. 

 If you have a 64-bit string that represents a floating point number rather than an integer, you can do a three-step conversion - the first step turns the string into an integer, the second converts it into an 8-byte string, and the third re-interprets those bits as a float. 

  >>> import struct
>>> s = '0b0100000000101001000101111000110101001111110111110011101101100100'
>>> q = int(s, 0)
>>> b8 = struct.pack('Q', q)
>>> struct.unpack('d', b8)[0]
12.546
  

 Of course you can combine all those steps into a single line. 

  >>> s2 = '0b1100000000101100000000000000000000000000000000000000000000000000'
>>> struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]
-14.0
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8762541)
 In one of your comments you indicated that the binary number represents a float in 8 byte long IEEE 754 binary64 format. However that is inconsistent with the  -0b1110  value you showed as an example, so I've ignored it and used my own which is in the proper format as example input data for testing the answer shown below. 

 Essentially what is done is first the binary string is converted into an integer value, then next into a string of raw bytes which is passed to  struct.unpack()  for final conversion to a floating point value. The   bin_to_float()   function shown below drives the process. Although not illustrated, binary input string arguments can be prefixed with '0b' . 

  from codecs import decode
import struct
import sys


def bin_to_float(b):
    """ Convert binary string to a float. """
    bf = int_to_bytes(int(b, 2), 8)  # 8 bytes needed for IEEE 754 binary64.
    return struct.unpack('>d', bf)[0]


def int_to_bytes(n, length):  # Helper function
    """ Int/long to byte string.

        Python 3.2+ has a built-in int.to_bytes() method that could be used
        instead, but the following works in earlier versions including 2.x.
    """
    return decode('%%0%dx' % (length << 1) % n, 'hex')[-length:]


def float_to_bin(value):  # For testing.
    """ Convert float to 64-bit binary string. """
    [d] = struct.unpack(">Q", struct.pack(">d", value))
    return '{:064b}'.format(d)


if __name__ == '__main__':

    for f in 0.0, 1.0, -14.0, 12.546, 3.141593:
        print('Test value: %f' % f)
        binary = float_to_bin(f)
        print(' float_to_bin: %r' % binary)
        floating_point = bin_to_float(binary)  # Round trip.
        print(' bin_to_float: %f\n' % floating_point)
  

 Output: 

<pre class="lang-none prettyprint-override"> Test value: 0.000000
 float_to_bin: '0000000000000000000000000000000000000000000000000000000000000000'
 bin_to_float: 0.000000

Test value: 1.000000
 float_to_bin: '0011111111110000000000000000000000000000000000000000000000000000'
 bin_to_float: 1.000000

Test value: -14.000000
 float_to_bin: '1100000000101100000000000000000000000000000000000000000000000000'
 bin_to_float: -14.000000

Test value: 12.546000
 float_to_bin: '0100000000101001000101111000110101001111110111110011101101100100'
 bin_to_float: 12.546000

Test value: 3.141593
 float_to_bin: '0100000000001001001000011111101110000010110000101011110101111111'
 bin_to_float: 3.141593
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40050134)
 You could write your own, if you only care about three decimal places then set  n to 3: 

  def frac_to_oct(f, n=4):
    # store the number before the decimal point
    whole = int(f)
    rem = (f - whole) * 8
    int_ = int(rem)
    rem = (rem - int_) * 8
    octals = [str(int_)]
    count = 1
    # loop until 8 * rem gives you a whole num or n times
    while rem and count < n:
        count += 1
        int_ = int(rem)
        rem = (rem - int_) * 8
        octals.append(str(int_))
    return float("{:o}.{}".format(whole, "".join(octals)))
  

 Using your input  12.325 : 

  In [9]: frac_to_oct(12.325)
Out[9]: 14.2463
In [10]: frac_to_oct(121212.325, 4)
Out[10]: 354574.2463

In [11]: frac_to_oct(0.325, 4)
Out[11]: 0.2463
In [12]: frac_to_oct(2.1, 4)
Out[12]: 2.0631
In [13]:  frac_to_oct(0)
Out[13]: 0.0
In [14]:  frac_to_oct(33)
Out[14]: 41.0
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24279934)
 You can convert it to a decimal with this code. Not the most efficient, but works: 

  s = "100.0011" # binary number
n = s.index(".") # number of positions before the decimal point
r = 0 # result

for digit in s.replace(".", ""): # iterate through each digit ommiting the point '.'
    r += int(digit) * 2 ** (n-1) # multiplicate the digit by the respective power of 2
    n -= 1

print r # 4.1875
  

    Remember how you convert a binary number into a decimal (base 10): 

  100.0011  -> 1       0       0   .   0          0          1          1
powerOf 2 ->    4       2       1      1/2        1/4        1/8        1/16
                |       |       |       |          |          |          |
             1*2^2 + 0*2^1 + 0*2^0 + 0*2^(-1) + 0*2^(-2) + 1*2^(-3) + 1*2^(-4)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24682634)
 A 4-byte IEEE format floating point number holds approximately 7 digits. What you want to do is round the result of  unpack  to a total of 7 digits. From there the normal Python conversion from float to string will hide all the floating point nastiness from you. 

  def magnitude(x):
    return 0 if x==0 else int(math.floor(math.log10(abs(x)))) + 1

def round_total_digits(x, digits=7):
    return round(x, digits - magnitude(x))

>>> round_total_digits(struct.unpack('<f', '\x94\x53\xF0\x40')[0])
7.510202
>>> round_total_digits(struct.unpack('<f', '\x0C\x02\x0F\x41')[0])
8.938
>>> x = struct.unpack('<f', struct.pack('<f', 12345.67))[0]
>>> x
12345.669921875
>>> round_total_digits(x)
12345.67
  

 Note that if your numbers did not originate from a direct conversion of a decimal number but were the result of a calculation, this could  reduce  the total accuracy. . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28978232)
  >>> import struct
>>> struct.pack('d', float('nan'))
b'\x00\x00\x00\x00\x00\x00\xf8\x7f'
  

 if you want a double-precision (8-byte) binary representation in little-endian format.  See https://docs.python.org/2/library/struct.html for all details of how to use big-endian and/or single-precision (4-byte) format instead. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54168810)
 Just a little addition, if you want the a float number as output from the unpack method instead of a tuple just write  

  >>> [x] = struct.unpack('f', b'\xdb\x0fI@')
>>> x
3.1415927410125732
  

  

  >>> [x,y] = struct.unpack('ff', b'\xdb\x0fI@\x0b\x01I4')
>>> x
3.1415927410125732
>>> y
1.8719963179592014e-07
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42956514)
 Using  struct.pack  and  struct.unpack : 

  >>> import struct
>>> n = '00111111100000000000000000000000'
>>> struct.unpack('f', struct.pack('i', int(n, 2[0]
1.0
  

 
  int(.., 2  to convert the binary representation to  int  (base 2 
  struct.pack('i', ..  to convert bytes ( i : 32bit int 
  struct.unpack('f', ...[0]  to convert bytes back to float. 
 

 For other  struct  format character, see https://docs.python.org/3/library/struct.html#format-characters. 



