Query: Elegant way to transform a list of dict into a dict of dicts
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54684759)
 This should be a little bit cleaner: 

  from sklearn.preprocessing import RobustScaler

X = [{'a':1, 'b':1}]
keys = sorted(X[0].keys())

scaler = RobustScaler()
transformed = scaler.fit_transform([list(x.values()) for x in X])

result = [dict(zip(keys, x)) for x in transformed]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8304026)
  d = {}
for i in listofdict:
   d[i.pop('name')] = i
  

 if you have Python2.7+: 

  {i.pop('name'): i for i in listofdict}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54687030)
 When you have your data as list of dict, then pandas Dataframe would be an ideal choice! 

 After scaling, you have to use the column names of the dataframe to create the dictionary back. 

  import pandas as pd
from sklearn.preprocessing import RobustScaler


my_dict1 = {'a': 1324, 'b': 2, 'c': 3}
my_dict2 = {'a': 13, 'b': 123, 'c': 31}
X = [my_dict1, my_dict2]

#[{'a': 1324, 'b': 2, 'c': 3}, {'a': 13, 'b': 123, 'c': 31}]

df = pd.DataFrame(X)
scaler = RobustScaler()
transformed = scaler.fit_transform(df)
transformed_x = [dict(zip(df.columns,x)) for x in transformed]

#[{'a': 1.0, 'b': -1.0, 'c': -1.0}, {'a': -1.0, 'b': 1.0, 'c': 1.0}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39804103)
 According to the docs,  fit_transform  can take an iterable. If the memory issue is coming from the size of the list, consider using a generator instead of a  list , which will yield your  dict s one at a time as it is iterated.
 

  _dicts = (create_dict_feature(line) for line in fp)
dv = DictVectorizer(sparse=True)
dv.fit_transform(_dicts)
  

 This won't help much if  fit_transform  accumulates the  dict s or  Mapping s just as you were doing before. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54788453)
 Can transform them both to dicts: 

  tf = [(('0', 'CD'), 0.0036429872495446266), (('09:00', 'CD'), 0.0018214936247723133)]

tf_dict = dict(tf)
print(tf_dict) 
>> {('0', 'CD'): 0.0036429872495446266, ('09:00', 'CD'): 0.0018214936247723133}

idf = [(('0', 'CD'), 2.4385423487861106), (('09:00', 'CD'), 2.739572344450092)]
idf_dict = dict(idf)


# now you have same keys in both dicts
res = {k: v*idf_dict[v] for k,v in tf_dict.items()}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10949895)
 You need to transform string-valued features to numeric ones in a NumPy array; http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.DictVectorizer.html does that for you. 

  samples = [['asdf', '1'], ['asdf', '0']]
# turn the samples into dicts
samples = [dict(enumerate(sample)) for sample in samples]

# turn list of dicts into a numpy array
vect = DictVectorizer(sparse=False)
X = vect.fit_transform(samples)

clf = DecisionTreeClassifier()
clf.fit(X, ['2', '3'])
  

 Remember to use  vect.transform  on the test samples, after converting those to dicts. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8304020)
  dict((d['name'], d) for d in listofdict)
  

 is the easiest if you don't mind the  name  key remaining in the  dict . 

 If you want to remove the  name s, you can still easily do it in one line: 

  dict(zip([d.pop('name') for d in listofdict], listofdict))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14986258)
 Use a dictionary comprehension, available in python 2.7+ 

  In [93]: {x[1]:x for x in lol}
Out[93]: 
{'DS_11': ['geo', 'DS_11', 45.3, 90.1, 10.2],
 'DS_12': ['geo', 'DS_12', 5.3, 0.1, 0.2],
 'DS_14': ['mao', 'DS_14', 12.3, 90.1, 1]}
  



