Query: Python - sum values in dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4880985)
 Sure there is. Here is a way to sum the values of a dictionary. 

  >>> d = {'key1':1,'key2':14,'key3':47}
>>> sum(d.values())
62
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22351528)
 With a dict comprehension, using  sum()  to sum the nested dictionary values; Python 2.6 or before would use  dict()  and a generator expression: 

  # Python 2.7
{k: sum(float(f) for f in v.itervalues()) for k, v in mydict.iteritems()}
# Python 3.x
{k: sum(map(float, v.values())) for k, v in mydict.items()}
# Python 2.6 and before
dict((k, sum(float(f) for f in v.values())) for k, v in mydict.iteritems())
  

 You may want to store float values to begin with though. 

  

  >>> mydict ={'Plekhg2': {'Bcells': '233.55', 'DendriticCells': '190.12'}, 
...   'Barxxxx': {'Bcells': '132.11', 'DendriticCells': '92.01'}, }
>>> {k: sum(float(f) for f in v.itervalues()) for k, v in mydict.iteritems()}
{'Plekhg2': 423.67, 'Barxxxx': 224.12}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12684294)
  

  sum(d.values())
  

 Or maybe that: 

  def sumcount(d):
    return sum(d.values())
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47047698)
 This can be done in single line using dict  comprehension  and  map  like this: 

  #from __future__ import division # use for Python 2.x
p = {"key1":{"keyA":{"value1": 1, "value2":3}, "keyB":{"value1":3,"value2":4}}}

p = {kOuter:{kInner:{kVal: vVal/sum(map(lambda x: sum(x.values()), vOuter.values())) for kVal, vVal in vInner.iteritems()} for kInner, vInner in vOuter.iteritems()} for kOuter, vOuter in p.iteritems()}
  

  

  p = {
        kOuter:{
            kInner:{
                kVal: vVal/sum(map(lambda x: sum(x.values()), vOuter.values())) for kVal, vVal in vInner.iteritems()
            } 
            for kInner, vInner in vOuter.iteritems()
        } 
        for kOuter, vOuter in p.iteritems()
    }
  

  OUTPUT  

  >>> p
>>> 
{'key1': {'keyB': {'value2': 0.36363636363636365, 'value1': 0.2727272727272727}, 'keyA': {'value2': 0.2727272727272727, 'value1': 0.09090909090909091}}}
  

 The only problem with this is that the sum is calculated repeatedly, you can fix that by calculating the sum for each of your  key1 ,  key2 ... before this dict comprehension and use the stored values instead, like this : 

  keyTotals = {kOuter:sum(map(lambda x: sum(x.values()), vOuter.values())) for kOuter, vOuter in p.iteritems()}
  

 and then you can simply access the sums calculated above by keys, like this: 

  p = {kOuter:{kInner:{kVal: vVal/keyTotals[kOuter] for kVal, vVal in vInner.iteritems()} for kInner, vInner in vOuter.iteritems()} for kOuter, vOuter in p.iteritems()}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50954961)
  

  d = {'a':[{'a1':1},{'a2':5},{'a3':4}], 'b':[{'b1':0},{'b2':1},{'b3':2}], 'c':[{'c1':1},{'c2':2}]}
new_d = {a:(sum(list(i.values())[0] for i in b), b) for a, b in d.items()}
final_result = sorted(new_d.items(), key=lambda x:x[-1][0], reverse=True)
  

 Output: 

  ('a', (10, [{'a1': 1}, {'a2': 5}, {'a3': 4}])), ('c', (3, [{'c1': 1}, {'c2': 2}])), ('b', (3, [{'b1': 0}, {'b2': 1}, {'b3': 2}]))]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4880971)
  

  sum(d.values())
  

 In Python<3, you may want to use  itervalues  instead (which does not build a temporary list).  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15350749)
 Use a nested comprehension: 

  sum(x for counter in numbers.values() for x in counter.values())
  

 Or sum first the counters (starting with an empty one), and then their values: 

  sum(sum(numbers.values(), Counter()).values())
  

 Or first each counter's values, and then the intermediate results: 

  sum(sum(c.values()) for c in numbers.values())
  

 Or use chain: 

  from itertools import chain
sum(chain.from_iterable(d.values() for d in numbers.values()))
  

 I prefer the first way. 



