Query: round number to nearest integer
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2356515)
 https://docs.python.org/2/library/math.html#math.ceil to round up: 

  >>> import math
>>> math.ceil(5.4)
6.0
  

  NOTE : The input should be float. 

 If you need an integer, call  int  to convert it: 

  >>> int(math.ceil(5.4))
6
  

 BTW, use  math.floor  to round  down  and  round  to round to nearest integer. 

  >>> math.floor(4.4), math.floor(4.5), math.floor(5.4), math.floor(5.5)
(4.0, 4.0, 5.0, 5.0)
>>> round(4.4), round(4.5), round(5.4), round(5.5)
(4.0, 5.0, 5.0, 6.0)
>>> math.ceil(4.4), math.ceil(4.5), math.ceil(5.4), math.ceil(5.5)
(5.0, 5.0, 6.0, 6.0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17142031)
 One of these should work: 

  import math
math.trunc(1.5)
> 1
math.trunc(-1.5)
> -1
math.floor(1.5)
> 1
math.floor(-1.5)
> -2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17142025)
 I think you need a floor function : 

 http://docs.python.org/2/library/math.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38115077)
 Use  round(x, y) . It will round up your number up to your desired decimal place. 

 For example: 

  >>> round(32.268907563, 3)
32.269
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25361807)
 There is no need for step 1. Just divide the value by 2, round up to the nearest integer, then multiply by 2 again: 

  import math

def round_up_to_even(f):
    return math.ceil(f / 2.) * 2
  

  

  >>> import math
>>> def round_up_to_even(f):
...     return math.ceil(f / 2.) * 2
... 
>>> round_up_to_even(1.25)
2
>>> round_up_to_even(3)
4
>>> round_up_to_even(2.25)
4
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21686833)
 You want to use the math.floor() command. . 

  >>> import math
>>> print (math.floor(5.6))
5.0
  

 You can also round up with  math.ceil()  or round to the nearest integer with  round() . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23943890)
 If you don't want to import math, you could use: 

  int(round(x))  

 Here's a piece of documentation: 

  >>> help(round)
Help on built-in function round in module __builtin__:

round(...)
    round(number[, ndigits]) -> floating point number

    Round a number to a given precision in decimal digits (default 0 digits).
    This always returns a floating point number.  Precision may be negative.
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50636755)
 You should use the  round  function and then cast to integer type. However, do not use a second argument to the  round  function. By using 2 there it will round to 2 decimal places, the  cast  to integer will then  round down  to the nearest number. 

 Instead use: 

  df2 = df.withColumn("col4", func.round(df["col3"]).cast('integer'))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29651462)
 To get floating point result simply use: 

  round(x-0.5)
  

 It works for negative numbers as well. 



