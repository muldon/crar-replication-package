Query: Trimming a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36343726)
 You can use https://docs.python.org/2/library/stdtypes.html#str.split: 

  >>> s = "AAAGCTTACGAAAAAAACGTA"
>>> s.split("AAAA", 1)[0]
'AAAGCTTACG'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5925319)
  re.search(r'\d+.\d+','123+55.[)]1').group()
  

 This should work. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40141638)
 If you're really set on using regular expressions: 

  re.sub(r'^\s+|\s+$', '', schoolstring)
  

 This will work for: 

  '   this is a test   '   # multiple leading and trailing spaces
' this is a test '       # one leading and trailing space
'this is a test'         # no leading or trailing spaces
'\t\tthis is a test\t\t' # leading or trailing whitespace characters
  

 This expression one or more whitespace characters from the start  ^\s+  of the string or  |  one or more whitespace characters from the end of the string  \s+$ . 

 However,  string.strip()  is simpler for removing leading and trailing space. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5925325)
 This is a simple regular expression: 

  import re

s = "5+5.[)]1"
s = re.search("\d+\+\d+", s).group()
print(s) # 5+5
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28156257)
 Try something like this: 

  def trim_to_fit(to_trim, to_fit):
     # calculate how many times the string needs
     # to be self - concatenated
     times_to_concatenate = len(to_fit) // len(to_trim) + 1
     # slice the string to fit the target
     return (to_trim * times_to_concatenate)[:len(to_fit)]
  

 It uses https://stackoverflow.com/a/509295/948550, and the fact that a multiplication of a  X  and a string in python concatenates the string  X  times. 

 Output: 

  >>> trim_to_fit('test', 'stackoverflow')
'testtesttestt'
  

 You can also create an endless circular https://wiki.python.org/moin/Generators over the string: 

  # improved by Rick Teachey
def circular_gen(txt):
    while True:
        for c in txt:
            yield c
  

 And to use it: 

  >>> gen = circular_gen('test')
>>> gen_it = [next(gen) for _ in range(len('stackoverflow'))]
>>> ''.join(gen_it)
'testtesttestt'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47153886)
 In one step with https://docs.python.org/3/library/re.html#re.sub function: 

  import re

words = ['bees', 'xerez']
result = [re.sub(r'^x|[ts]$', '', w) for w in words]

print(result)
  

 The output: 

  ['bee', 'erez']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40740861)
 use string rstrip method to strip off unwanted  _  

  s = 'anything__'
s = s.rstrip('_') # s becomes 'anything'
  

 regex is a bit overkill for this, it can be done as below 

  import re
s = 'anything__'
s = re.sub('_+$', '', s)  # s becomes 'anything'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36343690)
 You could use a greedy match and replace with nothing. 

  import re
new_string = re.sub(r'AAAA.*', '', original_string)
  

 Alternatively,  AAAA  can also be expressed as  A{4}  if you find it more readable. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42728047)
 I would use a https://docs.python.org/3/library/re.html#regular-expression-syntax (with a negative lookbehind for the possible dot as mentioned in the comment): 

  metadata_author = re.compile(r'(?<=(?<!\.)\bauthor:).+')
with open(tempfile, encoding='latin-1') as search:
    for line in search:
        result = metadata_author.search(line)
        if result:
            author = result.group().strip()
            print(author)
  

  re.search  returns a match object, and not a string, so to get the matching string you have to call  result.group() . 

 If you want to remove all whitespace (instead of just trimming), use  re.sub(r'\s*', '', result.group())  instead of  result.group().strip() . 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36343685)
 Just  find  those  AAAA  if any, and slice: 

  >>> s = "AAAGCTTACGAAAAAAACGTA"
>>> s[:s.find("AAAA")]
'AAAGCTTACG'
  

 However, this way you should first check whether the string contains  AAAA , otherwise it will slice away the last character. 



