Query: In Python, how do I convert all of the items in a list to floats?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50542830)
 This would be the an other method (without using any loop!) 

  import numpy as np
list(np.float_(list_name))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34658667)
 You can use numpy to convert a list directly to a floating array or matrix. 

      import numpy as np
    list_ex = [1, 0] # This a list
    list_int = np.array(list_ex) # This is a numpy integer array
  

 If you want to convert the integer array to a floating array then add 0.  

      list_float = np.array(list_ex) + 0. # This is a numpy floating array
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22351543)
 Use a dict comprehension and  sum , since the values are strings you'll have to convert them to floats first using  float . 

  >>> {k:sum(float(x) for x in v.itervalues()) for k, v in d.iteritems()}
{'Plekhg2': 423.67, 'Barxxxx': 224.12}
  

 For Python 3 use  .items()  and  .values()  instead of the  .iter(values|items) . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44027551)
 You can read the file and split it into a a list, then iterate through the list and try to convert to a float, if its successful then add it to the floats list. like the following: 

      with open('file.txt', 'r') as f:
        data = f.read().split()
        floats = []
        for elem in data:
            try:
                floats.append(float(elem))
            except ValueError:
                pass
        print floats
  

 output: 

  [31332.22342, 293023.32323, 32332.32323]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47797591)
  

  import re
import itertools
s = ['0.0000    0.0012    0.0024    0.0037    0.0049', '0.0061    0.0073    0.0085    0.0097    0.0110', '0.0122    0.0134    0.0146    0.0158    0.0170', '1.0000']
new_s = map(float, itertools.chain(*[re.split('\s+', i) for i in s]))
  

 Output: 

  [0.0, 0.0012, 0.0024, 0.0037, 0.0049, 0.0061, 0.0073, 0.0085, 0.0097, 0.011, 0.0122, 0.0134, 0.0146, 0.0158, 0.017, 1.0]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4004554)
 Try a list comprehension: 

  s = '5.2 5.6 5.3'
floats = [float(x) for x in s.split()]
  

 In Python 2.x it can also be done with map: 

  floats = map(float, s.split())
  

 Note that in Python 3.x the second version returns a map object rather than a list. If you need a list you can convert it to a list with a call to  list , or just use the list comprehension approach instead. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46981302)
 You need convert the string to list first 

  a = '[123.34 , -12333]'
res = map(float, a[1:-1].split(','))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48441455)
 Loop over each item and make an attempt to convert. If the conversion fail then you know it's not convertible. 

  def tryconvert(s):
    try:
        return int(s)
    except ValueError:
        try:
            return float(s)
        except ValueError:
            return s

lst = ['3', '7', 'foo', '2.6', 'bar', '8.9']
newlst = [tryconvert(i) for i in lst]
print(newlst)
  

 Output: 

  [3, 7, 'foo', 2.6, 'bar', 8.9]
  



