Query: reverse a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13530822)
  lines.sort(key=itemgetter(2), reverse=True)
  

 or if you just want to reverse the list 

  lines.reverse()
  

 or if you want to copy the list into a new, reversed list 

  reversed(lines)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28937092)
 This is to duplicate the list: 

  L = [0,10,20,40]
p = L[::-1]  #  Here p will be having reversed list
  

 This is to reverse the list in-place: 

  L.reverse() # Here L will be reversed in-place (no new list made)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33443551)
 You can use  list.reverse()  to reverse the list, then  list.pop()  to remove the last element, for example: 

  l = [0, 1, 2, 3, 4]
l.reverse()
print l
[4, 3, 2, 1, 0]


l.pop()
0
l.pop()
1
l.pop()
2
l.pop()
3
l.pop()
4
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5817112)
 The built-in method  reverse  of a list on python doesn't return the reversed list. 

 It reverses the list in place. 

 So, if you want to reverse your list, like in your code, just do: 

  a = [1,2,3,4]
a.reverse()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10859168)
 The reason your code doesn't work is because if  i  is a list of lists, you don't  deep_reverse  the lists within  i . 

 You only need to change one line of your code to the following: 

  def is_list(p):
    return isinstance(p, list)

def deep_reverse(a):
    a.reverse()
    for i in a:
        if is_list(i):
            deep_reverse(i)  # <=== This is what changed
            print a
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6827449)
  >>> a = [3, 4, 5]
>>> print a.reverse()
None
>>> a
[5, 4, 3]
>>>
  

 It's because  reverse()  does not return the list, rather it reverses the list in place. So the return value of  a.reverse()  is  None  which is shown in the  print . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18261428)
 Use a list comprehension: 

  [sublist[::-1] for sublist in outerlist]
  

  

  >>> outerlist = [[1, 2], [3, 4], [5, 6]]
>>> [sublist[::-1] for sublist in outerlist]
[[2, 1], [4, 3], [6, 5]]
  

 This produces a  new  list. You can also reverse sublists in place by calling the  list.reverse()  method on each one in a loop: 

  for sublist in outerlist:
    sublist.reverse()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4280712)
 list.reverse reverses inplace. That is: 

  >>> l = [1, 2, 3]
>>> l.reverse()
>>> l
[3, 2, 1]
  

 Please consult the http://docs.python.org/, things like these are laid out there. You can also try the 'help' built-in: 

 
   
     
       
         help(l.reverse) Help on built-in function reverse: 
       
     
   
  
   reverse(...)
      L.reverse() -- reverse  IN PLACE  
 



