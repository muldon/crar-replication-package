Query: count how many of an object type there are in a list Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25355733)
  a = [1, 1.23, 'abc', 'ABC', 6.45, 2, 3, 4, 4.98]

sum(isinstance(i, int) for i in a)
  

 which returns 

  4
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28663926)
 Convert your array  y  to list  l  and then do  l.count(1)  and  l.count(0)  

  >>> y = numpy.array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])
>>> l = list(y)
>>> l.count(1)
4
>>> l.count(0)
8 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45019663)
 Just use  Counter  from  collections : 

  from collections import Counter
A = [[x,y],[a,b],[c,f],[e,f],[a,b],[x,y]]

new_A = map(tuple, A) #must convert to tuple because list is an unhaable type

final_count = Counter(new_A)


#final output:

for i in set(A):
   print i, "=", final_count(tuple(i))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20167138)
 The  count()  method counts the number of times an object appears in a list: 

  a = [5,6,7,2,4,8,5,2,3]
print a.count(5)  # prints 2
  

 But if you're interested in the total of every object in the list, you could use the following code: 

  counts = {}
for n in a:
    counts[n] = counts.get(n, 0) + 1
print counts
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25355760)
 There are many ways to do it. 

 Here's one that takes advantage of the list fast https://docs.python.org/2.7/library/functions.html#map function and the C-speed https://docs.python.org/2.7/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange method using them both as they were intended: 

  >>> a = [1, 1.23, 'abc', 'ABC', 6.45, 2, 3, 4, 4.98]
>>> map(type, a).count(int)
4
  

 In Python 3,  map()  returns an iterator so you need a small modification,  list(map(type, a)).count(int) . 

 The other approaches using  sum()  and  Counter()  as also reasonable (readable and used as intended) but are a bit slower. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25682221)
 Use the  Counter  ! 

  from collections import Counter

type_counts = Counter(type(x) for x in a)

assert type_counts[int] == 4
assert type_counts[float] == 3
assert type_counts[str] == 2
  

 This won't help you if you want to count all types  and subtypes  of a particular type though. For instance, the  basestring  type does not appear in the results and I can't use the above code to count it. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25355727)
 Use  isinstance  to do your type checks, and then  sum  the Boolean values to get the count ( True  is 1,  False  is 0): 

  sum(isinstance(x, int) for x in a)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41307198)
 To count the number of occurrences, you can use https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html: 

  In [75]: boo = np.array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])

# use bool value `True` or equivalently `1`
In [77]: uniq, cnts = np.unique(boo, return_counts=1)
In [81]: uniq
Out[81]: array([0, 1])   #unique elements in input array are: 0, 1

In [82]: cnts
Out[82]: array([8, 4])   # 0 occurs 8 times, 1 occurs 4 times
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35549699)
 What about using https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.count_nonzero.html, something like  

  >>> import numpy as np
>>> y = np.array([1, 2, 2, 2, 2, 0, 2, 3, 3, 3, 0, 0, 2, 2, 0])

>>> np.count_nonzero(y == 1)
1
>>> np.count_nonzero(y == 2)
7
>>> np.count_nonzero(y == 3)
3
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/28664837)
 For your case you could also look into http://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html 

  In [56]: a = np.array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])

In [57]: np.bincount(a)
Out[57]: array([8, 4])  #count of zeros is at index 0 : 8
                        #count of ones is at index 1 : 4
  



