Query: Add Multiple Columns to Pandas Dataframe from Function
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52876868)
 You can using  concat  , with dataframe constructor  

  unpackdf=pd.DataFrame(df.apply(lambda x : tuple_unpack(x.col_1,x.col_2),1).tolist(),columns=['col1','col2'],index=df.index)
yourdf=pd.concat([unpackdf,df],axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46197147)
 If you need to   create multiple columns at once  : 

 
  Create the dataframe: 

  import pandas as pd
df = pd.DataFrame({"A": [10,20,30], "B": [20, 30, 10]})
   
  Create the function: 

  def fab(row):                                                  
    return row['A'] * row['B'], row['A'] + row['B']
   
  Assign the new columns: 

  df['newcolumn'], df['newcolumn2'] = zip(*df.apply(fab, axis=1))
   
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49379799)
 I think need parameter  axis=1  for processes by rows in http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html: 

 
    axis : {0 or 'index', 1 or 'columns'}, default 0   
  
    0  or  index : apply function to each column 
   1  or  columns : apply function to each row 
 

  df = df.apply(lambda x: add(x['a'], x['c']), axis=1)
print (df)
0   -0.802652
1    0.145142
2   -1.160743
dtype: float64
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50010925)
 Update your function such that it returns a pandas Series instead of a python list.  

  def add_subtract_list(a, b):
  return pd.Series([1,2,3,4])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47983541)
 Adding  pd.Series  

  df[['sum', 'difference']] = df.apply(
    lambda row: pd.Series(add_subtract(row['a'], row['b'])), axis=1)
df
  

  

     a  b  sum  difference
0  1  4    5          -3
1  2  5    7          -3
2  3  6    9          -3
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42634214)
 As of Pandas version 0.16.0 you can use  assign  as follows: 

  df = pd.DataFrame({"A": [1,2,3], "B": [4,6,9]})
df.assign(C = df.A + df.B)

# Out[383]: 
#    A  B   C
# 0  1  4   5
# 1  2  6   8
# 2  3  9  12
  

 You can add multiple columns this way as follows: 

  df.assign(C = df.A + df.B,
          Diff = df.B - df.A,
          Mult = df.A * df.B)
# Out[379]: 
#    A  B   C  Diff  Mult
# 0  1  4   5     3     4
# 1  2  6   8     4    12
# 2  3  9  12     6    27
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47969796)
 Add extra brackets when querying for multiple columns. 

  import pandas as pd
import numpy as np

def myfunc1(row):
    C = row['A'] + 10
    D = row['A'] + 50
    return [C, D]

df = pd.DataFrame(np.random.randint(0,10,size=(2, 2)), columns=list('AB'))

df[['C', 'D']] = df.apply(myfunc1 ,axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41964958)
 The issue is with the assignment, not  myfunc  

 When you try to unpack a dataframe as a tuple, it returns the column lables.  That's why you get (0, 1) for everything 

  df['e'], df['f'] = pd.DataFrame([[8, 9]] * 1000000, columns=['Told', 'You'])
print(df)

   a  b  c  d     e    f
0  3  0  1  2  Told  You
1  0  1  1  2  Told  You
2  2  2  2  1  Told  You
3  2  3  3  3  Told  You
  

 Use  join  

  df.join(df.apply(lambda x: myfunc(x['a'],x['b'],x['c']),axis=1))
  

 Or  pd.concat  

  pd.concat([df, df.apply(lambda x: myfunc(x['a'],x['b'],x['c']),axis=1)], axis=1)
  

 both give 

     a  b  c  d    e    f
0  3  0  1  2  NaN  NaN
1  0  1  1  2  1.0  1.0
2  2  2  2  1  NaN  NaN
3  2  3  3  3  NaN  NaN
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52854800)
 There is a clean, one-line way of doing this in Pandas: 

  df['col_3'] = df.apply(lambda x: f(x.col_1, x.col_2), axis=1)
  

 This allows  f  to be a user-defined function with multiple input values, and uses (safe) column names rather than (unsafe) numeric indices to access the columns. 

 Example with data (based on original question): 

  import pandas as pd

df = pd.DataFrame({'ID':['1', '2', '3'], 'col_1': [0, 2, 3], 'col_2':[1, 4, 5]})
mylist = ['a', 'b', 'c', 'd', 'e', 'f']

def get_sublist(sta,end):
    return mylist[sta:end+1]

df['col_3'] = df.apply(lambda x: get_sublist(x.col_1, x.col_2), axis=1)
  

 Output of  print(df) : 

    ID  col_1  col_2      col_3
0  1      0      1     [a, b]
1  2      2      4  [c, d, e]
2  3      3      5  [d, e, f]
  



