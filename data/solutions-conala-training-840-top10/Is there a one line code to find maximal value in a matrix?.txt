Query: Is there a one line code to find maximal value in a matrix?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35837624)
 using  numpy.amax : 

  import numpy as np
>>> my_array
array([[1, 2, 3],
       [9, 8, 6]])
>>> np.amax(my_array)
9
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35837720)
 You can also flatten your array: 

  from itertools import chain

flatten = chain.from_iterable

max(flatten(matrix))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35837378)
 By matrix, I assume you mean a 2d-list. 

  max([max(i) for i in matrix])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32243952)
 After reading the matrix from the file: 

  with open('matrix.txt', 'r') as f:
  lines=[line.split() for line in f.readlines()]
  

 You can find all the 1 indices with one line: 

  indices=[[(i,j) for i,a in enumerate(line) if a==1] for j,line in enumerate(lines)]
  

 And if you want to flatten the array: 

  indices=reduce(list.__add__,indices)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44509071)
 I would use the argmax function instead of the max & dimshuffle approach. Argmax returns the indices of the maximum values, rather than the values themselves. 

  tmp = T.argmax(inp, axis = 0)
  

 You can then initialize a matrix with all zeros and use your tmp array to set the desired indices to 1.0 (I'm not able to test/provide code for this part right now, but it should be trivial) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44509394)
  

  out = T.eye(3)[T.argmax(inp, axis=0)].T  # replace 3 with number of rows
  

 This will output: 

  0.0   0.0   0.0   1.0
1.0   0.0   1.0   0.0
0.0   1.0   0.0   0.0
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51252680)
 First, locate the part of the dataframe that has non-zero rows. Then find the maximal values and compare them to the matrix: 

  affected = (df != 0).any(axis=1)
nz = df[affected]
df[affected] = (nz.T == nz.max(axis=1)).T.astype(int)
#    x  y  z
#0   0  1  0
#1   0  0  1
#2   1  0  0
#3   0  0  0
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49169143)
  df.iloc[df['columnX'].argmax()]
  

  argmax()  would provide the index corresponding to the max value for the columnX.  iloc  can be used to get the row of the DataFrame df for this index. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/10213167)
 You might also try  idxmax : 

  In [5]: df = pandas.DataFrame(np.random.randn(10,3),columns=['A','B','C'])

In [6]: df
Out[6]: 
          A         B         C
0  2.001289  0.482561  1.579985
1 -0.991646 -0.387835  1.320236
2  0.143826 -1.096889  1.486508
3 -0.193056 -0.499020  1.536540
4 -2.083647 -3.074591  0.175772
5 -0.186138 -1.949731  0.287432
6 -0.480790 -1.771560 -0.930234
7  0.227383 -0.278253  2.102004
8 -0.002592  1.434192 -1.624915
9  0.404911 -2.167599 -0.452900

In [7]: df.idxmax()
Out[7]: 
A    0
B    8
C    7
  

 e.g. 

  In [8]: df.loc[df['A'].idxmax()]
Out[8]: 
A    2.001289
B    0.482561
C    1.579985
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35837818)
 You can use https://www.python.org/dev/peps/pep-0289/ to find the maximum in your matrix. That way you can avoid building the full list of matrix elements in memory. 

  maximum = max(max(row) for row in matrix)
  

 instead of list comprehension as given in a previous answer https://stackoverflow.com/a/35837378/3375713 

  maximum = max([max(row) for row in matrix])
  

 This is from PEP (the https://www.python.org/dev/peps/pep-0289/#rationale section): 

 
   ...many of the use cases do not need to have a full list created in
  memory. Instead,  they only need to iterate over the elements one at a
  time.  
  
   ... 
  
   Generator expressions are especially useful with functions like sum(), min(), and max() that reduce an iterable input to a single value 
  
   ... 
  
   The utility of generator expressions is greatly enhanced when combined with reduction functions like sum(), min(), and  max() . 
 

 Also, take a look at this SO post: https://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension. 



