Query: regex to get all text outside of brackets
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17285047)
 If there are never nested brackets: 

  ([^[\]]+)(?:$|\[)
  

 Example: 

  >>> import re
>>> s = 'Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]'
>>> re.findall(r'([^[\]]+)(?:$|\[)', s)
['Josie Smith ', 'Mugsy Dog Smith ']
  

  

  ([^[\]]+)   # match one or more characters that are not '[' or ']' and place in group 1
(?:$|\[)    # match either a '[' or at the end of the string, do not capture
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17285011)
  

   outside = re.findall(r"[^[]+(?=\[[^]]*]|$)", example_str)
  

 In other words: All that is not an opening square bracket followed by something inside square brackets or the end of the string 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41739209)
 If you want to go with regex and still handle nested brackets, you can go with: 

  import re
expr = re.compile("(?:^|])([^[\]]+)(?:\[|$)")

print(expr.findall("myexpr[skip this[and this]]another[and skip that too]"))
  

 This will yield  ['myexpr', 'another'] . 

 The idea is to match anything between the beginning of the string or a  ]  and the end of the string or a  [ . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3430015)
  

  re.findall('[^()]+', mystring)
  

 Splitting would work, too: 

  re.split('[()]', mystring)
  

 Either way, the text before the first parenthesis will be the first item in the resulting array, and the text inside the first set of parens will be the second item. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17285014)
 If there are no nested brackets, you can just do this: 

  re.findall(r'(.\[.\]', example_str)
  

 

 However, you don't even really need a regex here. Just split on brackets: 

  (s.split(']')[-1] for s in example_str.split('['))
  

 

 The only reason your attempt didn't work: 

  re.findall(r"(.\[.*\]+", example_str)
  

 … is that you were doing a non-greedy match within the brackets, which means it was capturing everything from the first open bracket to the last close bracket, instead of capturing just the first pair of brackets. 

 

 Also, the  +  on the end seems wrong. If you had  'abc [def][ghi] jkl[mno]' , would you want to get back  ['abc ', '', ' jkl'] , or  ['abc ', ' jkl'] ? If the former, don't add the  + . If it's the latter, do—but then you need to put the whole bracketed pattern in a non-capturing group:  r'(.:\[.\])+ . 

 

 If there might be additional text after the last bracket, the  split  method will work fine, or you could use  re.split  instead of  re.findall … but if you want to adjust your original regex to work with that, you can. 

 In English, what you want is any (non-greedy) substring before a bracket-enclosed substring  or  the end of the string, right? 

 So, you need an alternation between  \[.\]  and  $ . Of course you need to group that in order to write the alternation, and you don't want to capture the group.  

  re.findall(r"(.:\[.\]|$)", example_str)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3429092)
 Up until the paren:  regex = re.compile("(.\s*\(")  

 Inside the first set of parens:  regex = re.compile("..\)")  

 Edit: Single regex version:  regex = re.compile("(.\s*.\)")  

 Example output: 

  >>> import re
>>> r1 = re.compile("(.\s*\(")
>>> r2 = re.compile("..\)")
>>> text = "this is so cool (234)"
>>> m1 = r1.match(text)
>>> m1.group(1)
'this is so cool'
>>> m2 = r2.match(text)
>>> m2.group(1)
'234'
>>> r3 = re.compile("(.\s*.\)")
>>> m3 = r3.match(text)
>>> m3.group(1)
'this is so cool'
>>> m3.group(2)
'234'
>>> 
  

 Note of course that this won't work right with multiple sets of parens, as it's only expecting one parenthesized block of text (as per your example). The language of matching opening/closing parens of arbitrary recurrence is not regular. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9104130)
 Here is how you can do it: 

  In [14]: a = re.compile(r"(\w+|\[\w+\])").findall(text)

In [15]: print a
['aaaa', '[ab]', '[cd]', '[ef]']
  

 Each match returns one group of letters (with or without brackets). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13527500)
 Here's a regular expression solution: 

  >>> s = '[00451] Kayle - 2/3/15 - Win - 2012-11-22'

>>> import re
>>> re.match(r'\[(\d+)\]', s).group(1)
00451
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38845325)
 You may use your own pattern in https://docs.python.org/2/library/re.html#re.findall to grab all the contents inside  [...] : 

  import re
var = 'u16 arrayName_1[8][7]'
index = re.findall(r'\[(.*?)\]', var)
print(index) # => ['8', '7']
  

 See https://ideone.com/JFfHYD 

 To only match digits inside, use  \[([0-9]+)]  regex. Also, you do not have to escape the  ]  symbol outside the character class, and you should consider using raw string literals to define your regex patterns to avoid confusion with unescaped backslashes. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/39601804)
 Make  '  optional and outside the capturing group 

  m = re.findall(r"\['?([A-Za-z0-9_]+)'?\]", s)
  



