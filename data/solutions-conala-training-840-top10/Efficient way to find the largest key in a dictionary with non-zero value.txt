Query: Efficient way to find the largest key in a dictionary with non-zero value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1556050)
 To get the largest key, you can use the http://docs.python.org/3.1/library/functions.html#max function and inspect the keys like this: 

  max(x.iterkeys())
  

 To filter out ones where the value is 0, you can use a http://docs.python.org/reference/expressions.html#grammar-token-generator_expression: 

  (k for k, v in x.iteritems() if v != 0)
  

 You can combine these to get what you are looking for (since  max  takes only one argument, the parentheses around the generator expression can be dropped): 

  max(k for k, v in x.iteritems() if v != 0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1555991)
 Something like this should be reasonably fast: 

  >>> x = {0: 5, 1: 7, 2: 0}
>>> max(k for k, v in x.iteritems() if v != 0)
1
  

 (removing the  != 0  will be slightly faster still, but obscures the meaning somewhat.) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50849388)
 I would do it the following way: 

  >>> x = np.array([[1,0,0], [0,2,0], [1,1,0]])
>>> x
array([[1, 0, 0],
       [0, 2, 0],
       [1, 1, 0]])
>>> np.nonzero(x)
(array([0, 1, 2, 2]), array([0, 1, 0, 1]))

# if you want it in coordinates
>>> x[np.nonzero(x)]
array([1, 2, 1, 1])
>>> np.transpose(np.nonzero(x))
array([[0, 0],
       [1, 1],
       [2, 0],
       [2, 1])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52164216)
 Assuming the  dict  is named  a : 

  from operator import itemgetter

a = {1:0, 2:1, 3:2}
# remove zeros
no_zeros = {k: v for k, v in a.items() if v != 0} # can use `if v`
# find minimal key and value (by value)
key, val = min(no_zeros.items(), key=itemgetter(1))
# key = 2, val = 1
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4588654)
 http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html is my favorite. 

  >>> x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])
>>> numpy.where(x == 0)[0]
array([1, 3, 5])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1555997)
 Python's max function takes a  key=  parameter for a "measure" function. 

  data = {1: 25, 0: 75}
def keymeasure(key):
    return data[key] and key

print max(data, key=keymeasure)
  

 Using an inline lambda to the same effect and same binding of local variables: 

  print max(data, key=(lambda k: data[k] and k))
  

 last alternative to bind in the local var into the anonymous key function 

  print max(data, key=(lambda k, mapping=data: mapping[k] and k))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41732745)
 There is https://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html#numpy-argwhere, 

  import numpy as np
arr = np.array([[1,2,3], [0, 1, 0], [7, 0, 2]])
np.argwhere(arr == 0)
  

 which returns all found indices as rows: 

  array([[1, 0],    # Indices of the first zero
       [1, 2],    # Indices of the second zero
       [2, 1]],   # Indices of the third zero
      dtype=int64)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33265891)
 Get the indices of non-zero elements with http://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html and stack them up in columns with http://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html and finally find the  max  along the columns with http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.max.html. The implementation would look something like this - 

  np.column_stack((np.nonzero(A))).max(0)
  

 Looks like there is a built-in function http://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html for getting indices of all non-zero elements stacked in a  2D  array.  

  np.argwhere(A).max(0)
  

  

  In [50]: A
Out[50]: 
array([[[1, 1, 0],
        [1, 1, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [1, 0, 0],
        [1, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]])

In [51]: np.column_stack((np.nonzero(A))).max(0)
Out[51]: array([1, 2, 1])

In [52]: np.argwhere(A).max(0)
Out[52]: array([1, 2, 1])
  



