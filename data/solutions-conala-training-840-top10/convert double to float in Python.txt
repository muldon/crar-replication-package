Query: convert double to float in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/482423)
  >>> x = "2342.34"
>>> float(x)
2342.3400000000001
  

 There you go.  Use float (which behaves like and has the same precision as a C,C++, or Java double). 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16591883)
 Use the  value  property on a  c_double . 

  >>> ctypes.c_double(-10.0).value
-10.0
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38831910)
 You need to convert the hex digits to a binary string first: 

  struct.unpack('d', "4081637ef7d0424a".decode("hex"))
  

  

  struct.unpack('d', binascii.unhexlify("4081637ef7d0424a"))
  

 The latter version wks in both Python 2 and 3, the fmer only in Python 2 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20530734)
 Python has the http://docs.python.org/2/library/struct.html to convert bytes back to  float  values: 

  import struct

value = struct.unpack('d', bytes)[0]
  

 Here  'd'  signifies that a double value is expected (in native endianess, as 8 bytes). See the module documentation for more options, including specifying endianess. 

 Another option is to turn your  bytes  value into an http://docs.python.org/2/library/array.html; you'd use this is if you had a homogenous sequence of doubles: 

  import array

doubles_sequence = array.array('d', bytes)
  

 where every 8 bytes is interpreted as a double value, making  doubles_sequence  a sequence of doubles, addressable by index. To support a different endianess, you can swap the byte order with  doubles_sequence.byteswap() . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13291643)
 You can use the http://docs.python.org/2/library/struct.html to play with numerical representations: 

  import struct

>>> struct.unpack("f", struct.pack("f", 0.00582811585976))
(0.005828116089105606,)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25191773)
 
   I suspect the solution might be to convert double to real. 
 

 .  You have real data.  TA-lib doesn't like "real data". You want to convert it to double float data.  

 re: qcc's unexplained answer: 

 f8 is a 64 bit "double precision" floating point number.
http://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html 

 TA-lib wants numpy arrays of "double" floats as inputs. 

 http://en.wikipedia.org/wiki/Double-precision_floating-point_format 

 There are several methods you can use to get where you're going, probably the best for your purposes is: 

      real_data = [135.01, 133.0, 134.0, 131.0, 133.0, 131.0]
    float_data = [float(x) for x in real_data]
    np_float_data = np.array(float_data)
    np_out = talib.SMA(np_float_data,3)
  

 Here are several others: 

 1) 

      real_data = [float(x) for x in [135.01, 133.0, 134.0, 131.0, 133.0, 131.0]]
    np_real_data = np.array(real_data)
    np_out = talib.SMA(np_real_data,3)
  

 2) 

      real_data = [135.01, 133.0, 134.0, 131.0, 133.0, 131.0]
    np_real_data = np.array(real_data, dtype='f8')
    np_out = talib.SMA(np_real_data,3)
  

 3) 

      real_data = [135.01, 133.0, 134.0, 131.0, 133.0, 131.0]
    np_real_data = np.array(real_data, dtype=float)
    np_out = talib.SMA(np_real_data,3)
  

 4) 

      real_data = map(float, [135.01, 133.0, 134.0, 131.0, 133.0, 131.0])
    np_real_data = np.array(real_data)
    np_out = talib.SMA(np_real_data,3)
  

 5) 

      real_data = [float(135.01), float(133.0), float(134.0), float(131.0), 
                 float(133.0), float(131.0)]
    np_real_data = np.array(real_data)
    np_out = talib.SMA(np_real_data,3)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29367650)
 Here is my solution. I first create random numbers with random.uniform, format them in to string with double precision and then convert them back to float. You can adjust the precision by changing '.2f' to '.3f' etc.. 

  import random
from decimal import Decimal

GndSpeedHigh = float(format(Decimal(random.uniform(5, 25)), '.2f'))
GndSpeedLow = float(format(Decimal(random.uniform(2, GndSpeedHigh)), '.2f'))
GndSpeedMean = float(Decimal(format(GndSpeedHigh + GndSpeedLow) / 2, '.2f')))
print(GndSpeedMean)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48434143)
 Be aware that if your string number contains more than 15 significant  digits  float(s)  will round it.In those cases it is better to use  Decimal  

 Here is an explanation and some code samples: 
https://docs.python.org/3/library/sys.html#sys.float_info 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8150957)
 Try  printf("%f", c_double(10.1))  

 Explanation:  printf()  is a varargs function. The format parameters explain which type you can expect on the stack. 

 The problem: There is no way to distinguish between  float  and  double  arguments when looking at the format but  float  uses 4 bytes while  double  uses 8. So how can  printf()  tell which one has been pushed on the stack by the code? 

 Answer:  float s are always converted to  double . This way, all floating point types always use the same number of bytes on the stack and  printf()  can figure out their address. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/1053135)
 The Python code appears to work. The problem is in the C code: you have the  long long  filled out right, but then you convert the integer value directly into floating point, rather than  reinterpreting the bytes  as a  double . If you throw some pointers/addressing at it it works: 

  jkugelman$ cat float.c
#include <stdio.h>

int main(void)
{
    unsigned long x[2] = {1719614413, 1073127582};
    double d = *(double *) x;

    printf("%f\n", d);
    return 0;
}
jkugelman$ gcc -o float float.c 
jkugelman$ ./float 
1.414214
  

 Notice also that the format specifier for  double  (and for  float ) is  %f , not  %lf .  %lf  is for  long double . 



