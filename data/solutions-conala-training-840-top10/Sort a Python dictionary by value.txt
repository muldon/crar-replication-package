Query: Sort a Python dictionary by value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9610676)
 You could use an http://docs.python.org/dev/library/collections.html#collections.OrderedDict: 

  >>> from collections import OrderedDict
>>> od = OrderedDict(sorted(d.items(),
                     key=lambda t: t[1]['votes'],
                     reverse=True))
>>> od
OrderedDict([(3, {'votes': 98, 'id': 14}),
             (2, {'votes': 10, 'id': 12}),
             (1, {'votes': 2, 'id': 10})])
  

 where  d  is your original dictionary. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16365450)
  

  [key for key,value in sorted(dic.items() ,key=lambda x : x[1]) if value < threshold]
  

 or use  operator.itemgetter : 

  >>> from operator import itemgetter
>>> [key for key,value in sorted(dic.items() ,key= itemgetter(1) ) if value < threshold]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28839925)
 To match the actual output you want you have to use two keys to sort negating the int value with  - : 

  d = {'a':10,'b':20,'c':5,'d':5,'e':5}

for k,v in sorted(d.items(),key=lambda x:(-x[1],x[0])):
    print("{} {}".format(k,v))
  

 Output: 

  b 20
a 10
c 5
d 5
e 5
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51446259)
 With Python 2 you can do this with a custom cmp function: 

  def compare(a,b):
  if a[1] < b[1]:
    return 1
  elif a[1] > b[1]:
    return -1
  else:
    if a[0] < b[0]:
      return -1
    elif a[0] > b[0]:
      return 1
    else:
      return 0

d={"h":3,"g":1,"w":1}
items = d.items()
items = sorted(items, cmp=compare)
print items
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28839263)
 You can create a list of sorted tuples in this manner, but note that dictionaries themselves are unordered, so you cannot sort the dictionary itself (unless you use something like https://docs.python.org/2/library/collections.html#collections.OrderedDict 

  >>> d = {'a':10,'b':20,'c':5,'d':5,'e':5}
>>> list(sorted(d.items(), key = lambda i : (i[1],i[0]), reverse = True))
[('b', 20), ('a', 10), ('e', 5), ('d', 5), ('c', 5)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51446153)
 From Python 3.6 the dicts are ordered, but to be sure one needs to use  OrderedDict  from  collections  module: 

  from collections import OrderedDict

d={'g':1,'w':1,'h':3}

o = OrderedDict(sorted(((k, v) for k, v in d.items()), key=lambda v: (-v[1], v[0])))
print(o)
  

 Output: 

  OrderedDict([('h', 3), ('g', 1), ('w', 1)])
  



