Query: Python string formatting when string contains "%s" without escaping
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3413862)
  >>> re.search(r'\bharry\b','[harry] blah',re.IGNORECASE)
<_sre.SRE_Match object at 0x7f14d22df648>
>>> re.search(r'\b\[harry\]\b','[harry] blah',re.IGNORECASE)
>>> re.search(r'\[harry\]','[harry] blah',re.IGNORECASE)
<_sre.SRE_Match object at 0x7f14d22df6b0>
>>> re.search(r'\[harry\]','harry blah',re.IGNORECASE)
  

 The problem is the  \b , not the brackets. A single backslash is correct for escaping. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2847311)
 You could (and should) use the http://docs.python.org/tutorial/inputoutput.html#fancier-output-formatting (if you have Python 2.6 or higher) instead: 

  "Day old bread, 50% sale {0}".format("today")
  

 http://docs.python.org/library/string.html#formatstrings. 

 The docs also say that the old  %  formatting will eventually be removed from the language, although that will surely take some time. The new formatting methods are way more powerful, so that's a Good Thing. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54801585)
 What you need is called "quotes escaping". The most simple way to do that is: 

  nickname='A"B'
query = 'create (n:Person {{nickname: "{0}"}}) return n;'.format(nickname.replace('"','\\"'))
print(query)

>>> 
create (n:Person {nickname: "A\"B"}) return n;
  

 If you would like a more "formal" way, you can do following: 

  import json
person = {'nickname': 'A"B'}
query = 'create (n:Person {0}) return n;'.format(json.dumps(person))
print(query)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19034895)
 The  r..  string modifier causes the  ..  string to be interpreted  literally . That means,  rMy\Path\Without\Escaping  will evaluate to  My\Path\Without\Escaping  - without causing the backslash to escape characters. The prior is equivalent to  My\\Path\\Without\\Escaping  string, but without the raw modifier. 

 Note: The string  cannot  end with an odd number of backslashes, i.e  rBad\String\Example\  is not a correct string. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16832355)
 This is not a Python problem; this is django escaping your template variable. Use the https://docs.djangoproject.com/en/dev/ref/templates/builtins/#safe to correct the template output. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2179521)
  >>> '\\&' == '\&'
True
>>> len('\\&')
2
>>> print('\\&')
\&
  

 Or in other words:  '\\&'  only contains one backslash. It's just escaped in the python shell's output for clarity. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2847294)
 Not really - escaping your % signs is the price you pay for using string formatting. You could use string concatenation instead:  'Day old bread, 50% sale ' + whichday  if that helps... 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18469868)
 The triple-quote approach won't work if your source string contains Python escape characters.  For example, the sequence  \n  means newline, and is interpreted (correctly) as one character, not two. 

 If you want a general solution in which all the characters provided in your input are captured as-is and without escaping / interpretation, use the raw string approach via a leading  r  outside the quotes: 

  >>> s = '\n\n\n'
>>> print len(s)
3
  

 . 

  >>> r = r'\n\n\n'
>>> print len(r)
6
  

 No special cases to worry about. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2847307)
 Escaping a '%' as '%%' is not a workaround. If you use String formatting that is the way to represent a '%' sign. If you don't want that, you can always do something like: 

  print "Day old bread, 50% sale " + "today"
  

 e.g. not using formatting.  

 Please note that when using string concatenation, be sure that the variable is a string (and not e.g. None) or use  str(varName) . Otherwise you get something like 'Can't concatenate str and NoneType'. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/23248997)
 You can use regular expressions to replace % by %% where % is not followed by ( 

  def format_with_dict(str, dictionary):
    str = re.sub(r"%([^\(])", r"%%\1", str)
    str = re.sub(r"%$", r"%%", str)  # There was a % at the end?
    return str % dictionary
  

 This way: 

  print format_with_dict('Day old bread, 50% sale %(when)s', {'when': 'today'})
  

 Will output: 

 
   Day old bread, 50% sale today 
 

 This method is useful to avoid "not enough arguments for format string" errors. 



