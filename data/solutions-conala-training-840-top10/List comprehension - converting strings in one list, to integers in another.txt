Query: List comprehension - converting strings in one list, to integers in another
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45407350)
 Code 

  first_map = {1: ["a"], 2: ["a", "b"], 3: ["a"], 4: ["b", "cd"], 6: ["a", "cd"]}
second_map = {}
for key, value in first_map.items():
    for i in value:
        if i in second_map:
            second_map[i].append(key)
        else:
            second_map[i] = [key]
print(second_map)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52936162)
 If all strings are the same length (this is crucial to building a contiguous array), then use  view  to efficiently separate the characters. 

  r = np.array(example_list)
r = r.view('<U1').reshape(*r.shape, -1).astype(int)

print(r)
array([[0, 1, 0],
       [1, 0, 1]])
  

 You could also go the list comprehension route. 

  r = np.array([[*map(int, list(l))] for l in example_list])

print(r)
array([[0, 1, 0],
       [1, 0, 1]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4328406)
 Converting strings with newlines to an integer is not a problem (but  int("1a")  would be ambiguous, for example, so Python doesn't allow it). 

 The mapping in your code passes a sublist to the lambda function, one after another. Therefore you need to iterate over the inner lists again: 

  >>> line = [['10', '13\n'], ['3', '4\n'], ['5', '3\n'], ['1', '13']]
>>> print map(lambda sublist: map(int, sublist), line)
[[10, 13], [3, 4], [5, 3], [1, 13]]
  

 For increasing by one, it would be as simple as above: 

  map(lambda sublist: map(lambda x: int(x)+1, sublist), line)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40498134)
  

  >>> example = "56 65 74 100 99 68 86 180 90"
>>> example.split()
['56', '65', '74', '100', '99', '68', '86', '180', '90']
  

  

  >>> [sum(map(int,s)) for s in example.split()]
[11, 11, 11, 1, 18, 14, 14, 9, 9]
>>> 
  

 They key here is that strings are  already iterable . No need to convert them to lists. 

 Also, note that your last comprehension has the for-expressions backwards and should throw an error. Instead, this is probably what you meant: 

  >>> [[int(x)] for y in list_of_lists for x in y]
[[5], [6], [6], [5], [7], [4], [1], [0], [0], [9], [9], [6], [8], [8], [6], [1], [8], [0], [9], [0]]
  

 I'm not sure how you are getting 9's and 0's. 

 What you probably wanted was something like: 

  >>> l_o_l = [[int(y) for y in x] for x in list_of_lists]
>>> l_o_l
[[5, 6], [6, 5], [7, 4], [1, 0, 0], [9, 9], [6, 8], [8, 6], [1, 8, 0], [9, 0]]
  

 And then, finally, use the following: 

  >>> [sum(l) for l in l_o_l]
[11, 11, 11, 1, 18, 14, 14, 9, 9]
>>> 
  

 But again, this approach is over-engineered because  strings are already iterable . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45407297)
 For the love of one-liners (note heavily inefficient!) 

  d2 = {val [key for key in d if val in d[key]] for lst in d.itervalues() for val in lst}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45407317)
  z = {1:["a"], 2:["a","b"], 3:["a"], 4:["b", "cd"], 6:["a","cd"]}
d = dict()

for k, v in z.iteritems():
    for i in v: 
        if i in d: 
            d[i].append(k)
        else:   
            d[i] = [k]
  

 Using  iteritems()  over  items()  is a little better because the former creates a generator in Python 2. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54713697)
 You cannot directly convert lists to  int , but you can individually convert their elements  with a list comprehension: 

  mydict_int = dict((k, [int(s) for s in v]) for k,v in mydict.items())
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4329461)
 Using argument unpacking. 

  pairs=[['10', '13\n'], ['3', '4\n'], ['5', '3\n'], ['1', '13']]
[[int(x) + 1, int(y) + 1] for x, y in pairs]
  

 One loop, no lambda. 



