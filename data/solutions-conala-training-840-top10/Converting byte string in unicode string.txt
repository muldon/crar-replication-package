Query: Converting byte string in unicode string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4182757)
 If I understand you correctly, you have a utf-8 encoded byte-string in your code. 

 Converting a byte-string to a unicode string is known as decoding (unicode -> byte-string is encoding). 

 You do that by using the http://docs.python.org/library/functions.html#unicode function or the http://docs.python.org/library/stdtypes.html#str.decode method.  

  unicodestr = unicode(bytestr, encoding)
unicodestr = unicode(bytestr, "utf-8")
  

  

  unicodestr = bytestr.decode(encoding)
unicodestr = bytestr.decode("utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14443797)
 To decode a byte sequence from latin 1 to Unicode, use the http://docs.python.org/2/library/stdtypes.html#str.decode: 

  >>> '\xe9'.decode('latin1')
u'\xe9'
  

 Python uses  \xab  escapes for unicode codepoints below  \u00ff .  

  >>> '\xe9'.decode('latin1') == u'\u00e9'
True
  

 The above Latin-1 character can be encoded to UTF-8 as: 

  >>> '\xe9'.decode('latin1').encode('utf8')
'\xc3\xa9'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6773312)
 Can't be done. Using  %02X  loses too much information. You should be using something like UTF-8 first and converting that, instead of inventing a broken encoding. 

  >>> u"Knödel".encode('utf-8').encode('hex')
'4b6ec3b664656c'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10750628)
 You have byte strings containing unicode escapes. You can convert them to unicode with the  unicode_escape  codec: 

  >>> print "H\u00eatres et \u00e9tang".decode("unicode_escape")
Hêtres et étang
  

 And you can encode it back to byte strings: 

  >>> s = "H\u00eatres et \u00e9tang".decode("unicode_escape")
>>> s.encode("latin1")
'H\xeatres et \xe9tang'
  

 You can filter and decode the non-unicode strings like: 

  for s in l: 
    if not isinstance(s, unicode): 
        print s.decode('unicode_escape')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14443847)
  >>> u"é".encode('utf-8')
'\xc3\xa9'
  

 You've got a UTF-8 encoded byte sequence. Don't try to print encoded bytes directly. To print them you need to decode the encoded bytes back into a Unicode string. 

  >>> u"é".encode('utf-8').decode('utf-8')
u'\xe9'
>>> print u"é".encode('utf-8').decode('utf-8')
é
  

 Notice that encoding and decoding are opposite operations which effectively cancel out. You end up with the original  u"é"  string back, although Python prints it as the equivalent  u'\xe9' .  

  >>> u"é" == u'\xe9'
True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11342994)
 Guessing at all the things omitted from the original question, but, assuming Python 2.x the key is to read the error messages carefully: in particular where you call 'encode' but the message says 'decode' and vice versa, but also the types of the values included in the messages. 

 In the first example  string  is of type  unicode  and you attempted to decode it which is an operation converting a byte string  to  unicode. Python helpfully attempted to convert the unicode value to  str  using the default 'ascii' encoding but since your string contained a non-ascii character you got the error which says that Python was unable to  encode  a  unicode  value. Here's an example which shows the type of the input string: 

  >>> u"\xa0".decode("ascii", "ignore")

Traceback (most recent call last):
  File "<pyshell#7>", line 1, in <module>
    u"\xa0".decode("ascii", "ignore")
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 0: ordinal not in range(128)
  

 In the second case you do the reverse attempting to encode a byte string. Encoding is an operation that converts unicode to a byte string so Python helpfully attempts to convert your byte string to unicode first and, since you didn't give it an ascii string the default ascii decoder fails: 

  >>> "\xc2".encode("ascii", "ignore")

Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    "\xc2".encode("ascii", "ignore")
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19258774)
 Since you're using python 2,  s = "سلام"  is a byte string (in whatever encoding your terminal uses, presumably utf8): 

  >>> s = "سلام"
>>> s
'\xd8\xb3\xd9\x84\xd8\xa7\xd9\x85'
  

 You cannot  encode  byte strings (as they are already "encoded"). You're looking for unicode ("real") strings, which in python2 must be prefixed with  u :  

  >>> s = u"سلام"
>>> s
u'\u0633\u0644\u0627\u0645'
>>> '{:b}'.format(int(s.encode('utf-8').encode('hex'), 16))
'1101100010110011110110011000010011011000101001111101100110000101'
  

 If you're getting a byte string from a function such as  raw_input  then your string is already encoded - just skip the  encode  part: 

  '{:b}'.format(int(s.encode('hex'), 16))
  

 or (if you're going to do anything else with it) convert it to unicode: 

  s = s.decode('utf8')
  

 This assumes that your input is UTF-8 encoded, if this might not be the case, check  sys.stdin.encoding  first. 

 i10n stuff is complicated, here are two articles that will help you further: 

 
  http://www.joelonsoftware.com/articles/Unicode.html  
  http://kunststube.net/encoding/  
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32752736)
 Likely the  a  string is actually a unicode string. To write it to a byte stream you should encode it into a byte string in a specified encoding,  windows-1250  in your case,  utf-8  in my. Just use  a.encode(<encoding>) before sending result to the foo.write()`: 

  foo.write(a.encode("utf-8"))
  

 Also I would process the whole data in  unicode  converting to a byte string immediately before sending the data "outside" (to a file, to a remote destination, etc) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23999703)
 To convert character offsets to byte offsets when needed, I  encode('utf8')  the text leading up to the found substring if there are any non-ASCII characters in the input text, and take its length as begin offset. 

  # Check if text contains non-ASCII characters
needs_offset_conversion = len(text) != len(text.encode('utf8'))

def get_byte_offsets(text, character_offset, substr, needs_conversion):
    if needs_conversion:
        begin_offset = len(text[:character_offset].encode('utf8'))
        end_offset = begin_offset + len(substr.encode('utf8'))
    else:
        begin_offset = character_offset
        end_offset = character_offset + len(substr)
    return begin_offset, end_offset
  

 This implementation works, but it encodes a (large) part of the text for each found substring. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13838041)
 In strings (or Unicode objects in Python 2),  \u  has a special meaning, namely saying, "here comes a Unicode character specified by it's Unicode ID". Hence  u"\u0432"  will result in the character в. 

 The  b''  prefix tells you this is a sequence of 8-bit bytes, and bytes object has no Unicode characters, so the  \u  code has no special meaning. Hence,  b"\u0432"  is just the sequence of the bytes  \ , u , 0 , 4 , 3  and  2 . 

 Essentially you have an 8-bit string containing not a Unicode character, but the specification of a Unicode character. 

 You can convert this specification using the unicode escape encoder. 

  >>> c.decode('unicode_escape')
'в'
  



