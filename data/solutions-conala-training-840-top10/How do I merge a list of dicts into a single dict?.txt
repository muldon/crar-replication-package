Query: How do I merge a list of dicts into a single dict?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3495395)
 This works for dictionaries of any length: 

  >>> result = {}
>>> for d in L:
...    result.update(d)
... 
>>> result
{'a':1,'c':1,'b':2,'d':2}
  

 As a https://www.python.org/dev/peps/pep-0274/: 

  # Python >= 2.7
{k: v for d in L for k, v in d.items()}

# Python < 2.7
dict(pair for d in L for pair in d.items())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3495257)
  >>> L=[{'a': 1}, {'b': 2}, {'c': 1}, {'d': 2}]    
>>> dict(i.items()[0] for i in L)
{'a': 1, 'c': 1, 'b': 2, 'd': 2}
  

 Note: the order of 'b' and 'c' doesn't match your output because dicts are unordered 

 if the dicts can have more than one key/value 

  >>> dict(j for i in L for j in i.items())
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34759288)
 In case of Python 3.3+, there is a https://docs.python.org/3/library/collections.html#collections.ChainMap: 

  >>> from collections import ChainMap
>>> a = [{'a':1},{'b':2},{'c':1},{'d':2}]
>>> dict(ChainMap(*a))
{'b': 2, 'c': 1, 'a': 1, 'd': 2}
  

 Also see: 

 
 https://stackoverflow.com/questions/23392976/what-is-the-purpose-of-collections-chainmap 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54274910)
 I would do this by performing a recursive merge on a https://stackoverflow.com/a/26496899/4909087 https://docs.python.org/3/library/collections.html#collections.defaultdict object. 

  from collections import defaultdict

def merge(d, new_d):
    for k, v in new_d.items():
        if isinstance(v, dict):
            merge(d[k], v)
        else: 
            d[k] = d.setdefault(k, 0) + v

# https://stackoverflow.com/a/19189356/4909087    
nested = lambda: defaultdict(nested)
d = nested()

for subd in data:
    merge(d, subd)
  

  

 Using https://stackoverflow.com/a/26496899/4909087 to convert it back, we have: 

  default_to_regular(d)
# {
#     "fruits": {
#         "apples": 17,
#         "oranges": 27,
#         "grapes": 44
#     },
#     "vegetables": {
#         "carrots": 21,
#         "beans": 12,
#         "peas": 9
#     },
#     "grains": 9,
#     "meats": 6
# }
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47347065)
 Merging three dicts a,b,c in a single line without any other modules or libs 

 If we have the three dicts 

  a = {"a":9}
b = {"b":7}
c = {'b': 2, 'd': 90}
  

 Merge all with a single line and return a dict object using 

  c = dict(a.items() + b.items() + c.items())
  

 Returning 

  {'a': 9, 'b': 2, 'd': 90}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36497625)
 Let  dicts  be your original list of dictionaries. This idea maps unique combinations of user and id to  defaultdict(list)  objects. The final result will be the list of values from that dictionary. 

  from collections import defaultdict
tmp = defaultdict(dict)

for info in dicts:
    tmp[(info['user'], info['id'])].setdefault('key', []).append(info['key'])
    tmp[(info['user'], info['id'])].setdefault('value', []).append(info['value'])

for (user, id_), d in tmp.items(): # python2: use iteritems
    d.update(dict(user=user, id=id_))

result = list(tmp.values()) # python2: tmp.values() already gives a list
del tmp
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49356965)
  

  final_one=[]
for i in data:
    final=[]
    temp={}
    for m,n in i.items():
        if not isinstance(n,list):
            temp[m]=n
        else:
            final+=n
    for h in final:
        h.update(temp)
    final_one+=final
print(final_one)
  

 output: 

  [{'COUNT': 25, 'NAME': 'CLFRW0134W', 'LASTOCCURED': '2018-03-12 12:11:23', 'JVM_NAME': 'TestiingAWS01', 'GCCOUNT': 10}, {'COUNT': 10, 'NAME': 'SRV0145GH', 'LASTOCCURED': '2018-03-12 12:11:42', 'JVM_NAME': 'TestiingAWS01', 'GCCOUNT': 10}, {'COUNT': 25, 'NAME': 'CLFRW0134W', 'LASTOCCURED': '2018-03-13 12:14:23', 'JVM_NAME': 'QAAWS02', 'GCCOUNT': 10}, {'COUNT': 10, 'NAME': 'SRV0145GH', 'LASTOCCURED': '2018-03-18 12:55:23', 'JVM_NAME': 'QAAWS02', 'GCCOUNT': 10}]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16259217)
 In Python 3, you can use http://docs.python.org/3/library/collections.html#collections.ChainMap which groups multiple dicts or other mappings together to create a single, updateable view: 

  >>> from collections import ChainMap
>>> x = {'a':1, 'b': 2}
>>> y = {'b':10, 'c': 11}
>>> z = ChainMap({}, y, x)
>>> for k, v in z.items():
        print(k, '-->', v)

a --> 1
b --> 10
c --> 11
  



