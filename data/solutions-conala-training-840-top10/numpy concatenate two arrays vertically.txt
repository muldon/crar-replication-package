Query: numpy concatenate two arrays vertically
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29654759)
 Use http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html: 

  In [4]:

import numpy as np
a = np.array([1,2,3,4])
b = np.array([5,6,7,8])
c = np.vstack((a,b))
c
Out[4]:
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])

In [5]:

d = np.array ([[1,2,3,4],[5,6,7,8]])
d
â€‹
Out[5]:
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])
In [6]:

np.equal(c,d)
Out[6]:
array([[ True,  True,  True,  True],
       [ True,  True,  True,  True]], dtype=bool)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43371883)
 If the actual problem at hand is to concatenate two 1-D arrays vertically, and we are not fixated on using  concatenate  to perform this operation, I would suggest the use of  https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html : 

  In []: a = np.array([1,2,3])
In []: b = np.array([4,5,6])
In []: np.column_stack((a, b))
array([[1, 4],
       [2, 5],
       [3, 6]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29913056)
 A not well known feature of numpy is to use  r_ . This is a simple way to build up arrays quickly: 

  import numpy as np
a = np.array([1,2,3])
b = np.array([4,5,6])
c = np.r_[a[None,:],b[None,:]]
print(c)
#[[1 2 3]
# [4 5 6]]
  

 The purpose of  a[None,:]  is to add an axis to array  a . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29654719)
 To use  concatenate , you need to make  a  and  b  2D arrays instead of 1D, as in 

  c = concatenate((atleast_2d(a), atleast_2d(b)))
  

 Alternatively, you can simply do 

  c = array((a,b))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29656839)
 Maybe it's not a good solution, but it's simple way to makes your code works, just add reshape: 

  a = array([1,2,3,4])
b = array([5,6,7,8])

c = concatenate((a,b),axis=0).reshape((2,4))

print c
  

  

  [[1 2 3 4]
 [5 6 7 8]]
  

 In general if you have more than 2 arrays with the same length: 

  reshape((number_of_arrays, length_of_array))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22407489)
 Not sure whether there's a better way (i.e. a one-liner), but you could just do this: 

  z = np.zeros((3,3))
z[:2,:2] = a
z[:,2] = z[2,:] = array([4, 5, 6])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29654757)
 The problem is that both  a  and  b  are 1D arrays and so there's only one axis to join them on. 

 Instead, you can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html ( v  for  vertical ): 

  >>> np.vstack((a,b))
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])
  

 Also,  row_stack  is an alias of the  vstack  function: 

  >>> np.row_stack((a,b))
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])
  

 It's also worth noting that multiple arrays of the same length can be stacked at once. For instance,  np.vstack((a,b,x,y))  would have four rows. 

 Under the hood,  vstack  works by making sure that each array has at least two dimensions (using  atleast_2D ) and then calling  concatenate  to join these arrays on the first axis ( axis=0 ). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42738514)
  a = np.array([1,2,3])
b = np.array([4,5,6])
np.array((a,b))
  

  

  np.array([[1,2,3], [4,5,6]])
  

 Regardless of whether it is a list of lists or a list of 1d arrays,  np.array  tries to create a 2d array. 

 But it's also a good idea to understand how  np.concatenate  and its family of  stack  functions work.  In this context  concatenate  needs a list of 2d arrays (or any anything that  np.array  will turn into a 2d array) as inputs.   

  np.vstack  first loops though the inputs making sure they are at least 2d, then does concatenate.  Functionally it's the same as expanding the dimensions of the arrays yourself. 

  np.stack  is a new function that joins the arrays on a new dimension.  Default behaves just like  np.array . 

 Look at the code for these functions.  If written in Python you can learn quite a bit.  For  vstack : 

  return _nx.concatenate([atleast_2d(_m) for _m in tup], 0)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21888214)
 Because both  a  and  b  have only one axis, as their shape is  (3) , and the axis parameter specifically refers to the axis of the elements to concatenate. 

 this example should clarify what  concatenate  is doing with axis. Take two vectors with two axis, with shape  (2,3) : 

  a = np.array([[1,5,9], [2,6,10]])
b = np.array([[3,7,11], [4,8,12]])
  

 concatenates along the 1st axis (rows of the 1st, then rows of the 2nd): 

  np.concatenate((a,b), axis=0)
array([[ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11],
       [ 4,  8, 12]])
  

 concatenates along the 2nd axis (columns of the 1st, then columns of the 2nd): 

  np.concatenate((a, b), axis=1)
array([[ 1,  5,  9,  3,  7, 11],
       [ 2,  6, 10,  4,  8, 12]])
  

 to obtain the output you presented, you can use  vstack  

  a = np.array([1,2,3])
b = np.array([4,5,6])
np.vstack((a, b))
array([[1, 2, 3],
       [4, 5, 6]])
  

 You can still do it with  concatenate , but you need to reshape them first: 

  np.concatenate((a.reshape(1,3), b.reshape(1,3)))
array([[1, 2, 3],
       [4, 5, 6]])
  

 Finally, as proposed in the comments, one way to reshape them is to use  newaxis : 

  np.concatenate((a[np.newaxis,:], b[np.newaxis,:]))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51892833)
 You could use  numpy.concatenate  for this purpose: 

  import numpy as np
import cv2
image1 = cv.imread('someimage')
image2 = cv.imread('anotherimage')
final = np.concatenate((image1, image2), axis = 0)
cv2.imwrite('final.png', final)
  

  axis = 0  concatenates images vertically 

  axis = 1  concatenates images horizontally 



