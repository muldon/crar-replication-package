Query: Print multiple arguments in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51220445)
 Use  f-string : 

  print(f'Total score for {name} is {score}')
  

 Or 

 Use  .format : 

  print("Total score for {} is {}".format(name, score))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35778174)
  print("Total score for %s is %s  " % (name, score))
  

  %s  can be replace by  %d  or  %f  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44499454)
 When you have multiple positional arguments in the  print  function, it writes the  str  fm of those arguments with the  sep  string between them - which in the default case is one space ( ' ' ).  There are many ways to print two variables on two separate lines. 

  print(my_var1)
print(my_var2)
  

  

  f var in (my_var1, my_var2):
    print(var)
  

  

  print(my_var1, my_var2, sep='\n')
  

  the myriad of other examples here. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12922376)
  

  print s + ':'
  

 or use string formatting: 

  print '{0}:'.format(s)
  

 On python 3, the  print()  function can also be told to use an empty separator between multiple arguments, instead of a space: 

  print(s, ':', sep='')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34392868)
 This is what I do: 

  print("Total score for " + name + " is " + score)
  

 Remember to put a space after  for  and before and after  is . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47968290)
 # "How to take multiple arguments". 

  def f1(args):
    a, b, c = args[0] , args[1] , args[2]
    return a+b+c

if __name__ == "__main__":
    import multiprocessing
    pool = multiprocessing.Pool(4) 

    result1 = pool.map(f1, [ [1,2,3] ])
    print(result1)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27253083)
  a = 1.23981321
b = 34
c = 9.567123

print('{:.4f} - {:.4f} - {:.4f}'.format(a, b, c)) # Original

print('{a:{f}} - {b:{f}} - {c:{f}}'.format(a=a, b=b, c=c, f='.4f')) # New
  

 It's easier to do if you use keyword arguments so you can have  {a} , as opposed to positional arguments. This allows you to use the format  f = '.4f'  in multiple places in your format string. 

 If you need to keep everything short though, then you can mix positional and keyword arguments (thanks to Martijn for tip) and also put your fmt string on a separate line 

  fmt = '{:{f}} - {:{f}} - {:{f}}'
print(fmt.format(a, b, c, f='.4f'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29428023)
 You should be giving args in array 

  from multiprocessing import Pool
import time

def printed(*args):
    print 'here now '
    return args[0][0]

class A(object):
    def __init__(self):
        self.pool = Pool(8)

    def callme(self):
        print self.pool.map(printed,[(1,2),(3,4)])
if __name__ == '__main__':
    aa = A()
    aa.callme()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37911923)
 The  %d    %s  string formatting "comms" are used to format strings. The  %d  is for numbers,   %s  is for strings. 

 For an example: 

  print("%s" % "hi")
  

  

  print("%d" % 34.6)
  

 To pass multiple arguments: 

  print("%s %s %s%d" % ("hi", "there", "user", 123456))  will return  hi there user123456  



