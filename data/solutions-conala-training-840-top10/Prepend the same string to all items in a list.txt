Query: Prepend the same string to all items in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13331423)
 use a http://docs.python.org/2/reference/expressions.html#list-displays: 

  In [1]: a = [1,2,3,4]

In [2]: ["hello" + str(x) for x in a]
Out[2]: ['hello1', 'hello2', 'hello3', 'hello4']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13331424)
 Use a http://docs.python.org/2/reference/expressions.html#list-displays: 

  ['hello{0}'.format(i) for i in a]
  

 A list comprehension lets you apply an expression to each element in a sequence. 

  

  >>> a = [1,2,3,4]
>>> ['hello{0}'.format(i) for i in a]
['hello1', 'hello2', 'hello3', 'hello4']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51563582)
 Use  items()  of dictionary to get key, value and prepend them to list: 

  lst = [('1', '1')]
lst = list({'All': 'All'}.items()) + lst

print(lst)
# [('All', 'All'), ('1', '1')]
  

  Note :  {'All': 'All'}  is a dictionary itself, so  dict({'All': 'All'})  in your code is unnecessary. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9173081)
 For a flexible number of values per item and even less characters, you can use 

  In [1]: [sum(values) for values in zip(*l)[1:]]
Out[1]: [37, 10]
  

  zip  yields tuples of combinations of corresponding items (i.e. a tuple with all the 1st items, a tuple with all the 2nd items, etc), which can be summed up each (except for the first string value). Of course, you can still prepend  ""  or whatever you like at the beginning if needed. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28829204)
 You can use https://docs.python.org/2/library/itertools.html%23itertools.groupby with https://docs.python.org/2/library/functions.html%23enumerate here. Here we are grouping the item at white spaces using  not str.isspace , so  k  will be True for non-whitespace characters and False for white spaces, hence the  if k  condition. Now as each group is an iterator we need to call next() on it to get the starting index as well as the first character. Now to get the rest of the group items use a list-comprehension and pass it to str.join to get a string. Don't forget to prepend the item we popped earlier to this string: 

  from itertools import groupby

str_ = '  d     A7    g7'

for k, g in groupby(enumerate(str_), lambda x: not x[1].isspace()):
    if k:
        pos, first_item = next(g)
        print pos, first_item + ''.join([x for _, x in g])
  

 Output: 

  2 d
8 A7
14 g7
  

 If the above solution seems complicated, then one can also use re.finditer. The match objects returned by re.finditer have methods like .start() and group(), they correspond to the start index of the matched group and the group itself respectively. 

  import re

str_ = '  d     A7    g7'

for m in re.finditer(r'\S+', str_):
    index, item = m.start(), m.group()
    # now do something with index, item
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51563576)
 When you use a  dict  in as an iterable, you only iterate over its keys.  If you instead want to iterate over its key/value pairs, you have to use the  dict.items  view.   

  l = [('1', '1')]
d = dict({'All': 'All'})
print([*d.items(), *l])
# [('All', 'All'), ('1', '1')]
  

 The  *  syntax is https://www.python.org/dev/peps/pep-0448/. 

  l[:0] = d.items()
  

  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19736099)
 You could use http://docs.python.org/2/library/collections.html#deque-objects: 

  import collections
a = collections.deque([1, 2, 3])
b = [4, 5, 6]
a.extendleft(b[::-1])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19736094)
 This is what you need ;-) 

  a = b + a
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13331474)
 One more option is to use http://docs.python.org/2/library/functions.html#map: 

  a = range(10)
map(lambda x: 'hello%i' % x, a)
  

 Edit as per WolframH comment: 

  map('hello{0}'.format, a)
  



