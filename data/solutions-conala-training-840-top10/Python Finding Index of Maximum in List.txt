Query: Python Finding Index of Maximum in List
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40315992)
 For finding max: 

  print reduce(lambda x,y: x if x>y else y, map(int,raw_input().split()))
  

 For finding min: 

  print reduce(lambda x,y: x if x<y else y, map(int,raw_input().split()))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11530816)
 Update: 

  max_idx = -1
max_val = a[0]
for i in xrange(1, len(a)):
    if a[i] > max_val:
        max_val = a[i]
        max_idx = i
  

 This doesn't shadow built-in function  max() , and also will give correct answers for lists that consist of only negative values. 

 

    

  a.index(max(a))
  

 will do the trick. 

 Built-in function  max(a)  will find the maximum value in your list  a , and list function
 index(v)  will find the index of value  v  in your list. By combining them, you get what you are looking for, in this case the index value  3 . 

   .index()  will find the index of the  first  item in the list that matches, so if you had several identical "max" values, the index returned would be the one for the first. 

 For more information:  

 
 http://docs.python.org/library/functions.html#max 
 http://docs.python.org/tutorial/datastructures.html 
 

 In the spirit of "Simple is better than complex." (Zen of Python) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31105620)
 The index of the max of a list: 

  def argmax(lst):
  return lst.index(max(lst))
  

 If there are duplicate max values in lst, this will return the index of the first maximum value found. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48106104)
  

  myList = [10, 7, 11, 5, 8, 9, 6]
min_index = myList.index(min(myList)) 
print(max(myList[min_index:]))
  

 Output 

  9
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11530997)
 In my code I would use this: 

  >>> max(enumerate(a),key=lambda x: x[1])[0]
3
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48106109)
  

  myList = [10, 7, 11, 5, 8, 9, 6]
abs_max = max(myList[myList.index(min(myList)):])
  

 Output: 

  9
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26143309)
 Use the argmax method of the numpy.array object. 

  import numpy as np
np.array(a).argmax()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11530863)
 You can use  enumerate  to also give you an index while iterating through a list: 

  >>> a = [2, 1, 5, 234, 3, 44, 7, 6, 4, 5, 9, 11, 12, 14, 13]
>>> maxIndex, maxNumber = 0, 0
>>> for index, number in enumerate(a):
        if number > maxNumber:
            maxIndex = index
            maxNumber = number

>>> maxIndex, maxNumber
(3, 234)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11530835)
  

  max( (v, i) for i, v in enumerate(a) )[1]
  

 This avoids having to  .index()  the list after. 



