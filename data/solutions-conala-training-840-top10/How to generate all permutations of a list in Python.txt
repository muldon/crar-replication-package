Query: How to generate all permutations of a list in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7140205)
  list2Perm = [1, 2.0, 'three']
listPerm = [[a, b, c]
            for a in list2Perm
            for b in list2Perm
            for c in list2Perm
            if ( a != b and b != c and a != c )
            ]
print listPerm
  

 Output: 

  [
    [1, 2.0, 'three'], 
    [1, 'three', 2.0], 
    [2.0, 1, 'three'], 
    [2.0, 'three', 1], 
    ['three', 1, 2.0], 
    ['three', 2.0, 1]
]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/104471)
 And in http://docs.python.org/dev/whatsnew/2.6.html onwards: 

  import itertools
itertools.permutations([1,2,3])
  

 (returned as a generator.  Use  list(permutations(l))  to return as a list.) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43018229)
 Another solution: 

  def permutation(flag, k =1 ):
    N = len(flag)
    for i in xrange(0, N):
        if flag[i] != 0:
            continue
        flag[i] = k 
        if k == N:
            print flag
        permutation(flag, k+1)
        flag[i] = 0

permutation([0, 0, 0])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36102351)
 Generate all possible permutations 

 I'm using python3.4: 

  def calcperm(arr, size):
    result = set([()])
    for dummy_idx in range(size):
        temp = set()
        for dummy_lst in result:
            for dummy_outcome in arr:
                if dummy_outcome not in dummy_lst:
                    new_seq = list(dummy_lst)
                    new_seq.append(dummy_outcome)
                    temp.add(tuple(new_seq))
        result = temp
    return result
  

  

  lst = [1, 2, 3, 4]
#lst = ["yellow", "magenta", "white", "blue"]
seq = 2
final = calcperm(lst, seq)
print(len(final))
print(final)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/170248)
  The following code with Python 2.6 and above ONLY  

 First, import  itertools : 

  import itertools
  

 Permutation (order matters):</h3>

  print list(itertools.permutations([1,2,3,4], 2))
[(1, 2), (1, 3), (1, 4),
(2, 1), (2, 3), (2, 4),
(3, 1), (3, 2), (3, 4),
(4, 1), (4, 2), (4, 3)]
  

 Combination (order does NOT matter):</h3>

  print list(itertools.combinations('123', 2))
[('1', '2'), ('1', '3'), ('2', '3')]
  

 Cartesian product (with several iterables):</h3>

  print list(itertools.product([1,2,3], [4,5,6]))
[(1, 4), (1, 5), (1, 6),
(2, 4), (2, 5), (2, 6),
(3, 4), (3, 5), (3, 6)]
  

 Cartesian product (with one iterable and itself):</h3>

  print list(itertools.product([1,2], repeat=3))
[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
(2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/52194943)
 you are confusing  permutations  with  product : 

  len(list(itertools.permutations([4,8,15],3)))
# return 6
len(list(itertools.product([4,8,15], repeat=3)))
# return 27
  



