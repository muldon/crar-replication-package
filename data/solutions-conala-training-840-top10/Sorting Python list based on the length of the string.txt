Query: Sorting Python list based on the length of the string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31800325)
 Write a function lensort to sort a list of strings based on length.  

  def lensort(a):
    n = len(a)
    for i in range(n):
        for j in range(i+1,n):
            if len(a[i]) > len(a[j]):
                temp = a[i]
                a[i] = a[j]
                a[j] = temp
    return a
print lensort(["hello","bye","good"])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36335468)
  The easiest way to do this is:  

 
   list.sort(key = lambda x:len(x)) 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2587513)
 The same as in Eli's answer - just using a shorter form, because you can skip a  lambda  part here.  

 Creating new list: 

  >>> xs = ['dddd','a','bb','ccc']
>>> sorted(xs, key=len)
['a', 'bb', 'ccc', 'dddd']
  

 In-place sorting: 

  >>> xs.sort(key=len)
>>> xs
['a', 'bb', 'ccc', 'dddd']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33413584)
 Use  lambda  function as key for sort in couple with  len  method of string: 

  mylist.sort(key=lambda x: len(x[0]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35891779)
 If I understand correctly, you have a string such as  'ADFE'  and you have a list such as  [('FE', 3), ('A', 5), ('D', 6)] .  You then want to sort that list based on the string.  To do that, you can use  sorted()  with a key: 

  letters = 'ADFE'
old = [('FE', 3), ('A', 5), ('D', 6)]
new = sorted(old, key=lambda x: letters.index(x[0]))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20429944)
  

  def max_only(lst):
    result, maxlen = [], -1
    for item in lst:
        itemlen = len(item)
        if itemlen == maxlen:
            result.append(item)
        elif itemlen > maxlen:
            result[:], maxlen = [item], itemlen
    return result
  

  max(iterable)  has to loop through the whole list once, and a list comprehension picking out items of matching length has to loop through the list  again . The above version loops through the input list just once. 

 If your input list is not a sequence but an iterator, this algorithm will still work while anything that has to use  max()  won't; it'd have exhausted the iterator just to find the maximum length. 

 Timing comparison on 100 random words between length 1 and 9, repeated 1 million times: 

  >>> import timeit
>>> import random
>>> import string
>>> words = [''.join([random.choice(string.ascii_lowercase) for _ in range(1, random.randrange(11))]) for _ in range(100)]
>>> def max_only(lst):
...     result, maxlen = [], -1
...     for item in lst:
...         itemlen = len(item)
...         if itemlen == maxlen:
...             result.append(item)
...         elif itemlen > maxlen:
...             result[:], maxlen = [item], itemlen
...     return result
... 
>>> timeit.timeit('f(words)', 'from __main__ import max_only as f, words')
23.173006057739258
>>> def max_listcomp(lst):
...     max_ = max(len(x) for x in lst)
...     return [x for x in lst if len(x) == max_]
>>> timeit.timeit('f(words)', 'from __main__ import max_listcomp as f, words')
36.34060215950012
  

 Replacing  result.append()  with a cached  r_append = result.append  outside the  for  loop shaves off another 2 seconds: 

  >>> def max_only(lst):
...     result, maxlen = [], -1
...     r_append = result.append
...     for item in lst:
...         itemlen = len(item)
...         if itemlen == maxlen:
...             r_append(item)
...         elif itemlen > maxlen:
...             result[:], maxlen = [item], itemlen
...     return result
... 
>>> timeit.timeit('f(words)', 'from __main__ import max_only as f, words')
21.21125817298889
  

 And by popular request, a  min_only()  version: 

  def min_only(lst):
    result, minlen = [], float('inf')
    r_append = result.append
    for item in lst:
        itemlen = len(item)
        if itemlen == minlen:
            r_append(item)
        elif itemlen < minlen:
            result[:], minlen = [item], itemlen
    return result
  

 More fun still, a completely different tack: sorting on length: 

  from itertools import groupby

def max_only(lst):
    return list(next(groupby(sorted(lst, key=len, reverse=True), key=len))[1])[::-1] 

def min_only(lst):
    return list(next(groupby(sorted(lst, key=len), key=len))[1]) 
  

 These work by sorting by length, then picking out the first group of words with equal length. For  max_only()  we need to sort in reverse, then re-reverse the result. Sorting has a O(NlogN) cost, making this less efficient than the O(2N) solutions in other answers here or my O(N) solution above: 

  >>> timeit.timeit('f(words)', 'from __main__ import max_only_sorted as f, words')
52.725801944732666
  

 Still, the sorting approach gives you a fun one-liner. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17474264)
 You want to sort based on the  float  values (not string values), so try:     

  >>> b = ["949.0","1099.0"]
>>> b.sort(key=float)
>>> b
['949.0', '1099.0']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43651311)
 You want to sort not just the  lista  list, but also all the strings in it.  

  >>> lista = ['H', 'A', 'C', 'K', 'HA', 'HC', 'HK', 'AC', 'AK', 'CK']
>>> for i, string in enumerate(lista):           
...     lista[i] = ''.join(sorted(list(string))) 
...                                              
>>> lista                                        
['H', 'A', 'C', 'K', 'AH', 'CH', 'HK', 'AC', 'AK', 'CK']                                   
>>> lista.sort(key=lambda s: (len(s), s))        
>>> lista                                        
['A', 'C', 'H', 'K', 'AC', 'AH', 'AK', 'CH', 'CK', 'HK']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/49781369)
 You have a  really  long time limit. That's enough time to go through every possible length-k string, in order, and compare those strings against every string in your input list. 

  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/19729956)
 Well you can make the lambda simpler: 

  l.sort(key=lambda t: len(t[1]), reverse=True)
  

 Also, don't use  list  as a variable name; it's already taken by a built-in function. 



