Query: Python: trying to lower a string and remove non-alphanumeric characters aside from space
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30693824)
 You could use this, 

  re.sub(r'[^\sa-zA-Z0-9]', '', text).lower().strip()
  

  Example:  

  >>> import re
>>> def removePunctuation(s):
        return re.sub(r'[^\sa-zA-Z0-9]', '', s).lower().strip()

>>> print removePunctuation('Hi, you!')
hi you
>>> print removePunctuation(' No under_score!')
no underscore
  

    

  re.sub('(?!\s)[\W_]', '', text).lower().strip()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41961882)
 You can do it with two  sub s: 1) replace spaces with  - ; 2) remove other unwanted characters: 

  s = 'Hello, world!'

import re
re.sub("[^a-zA-Z_-]", "", re.sub("\s+", "-", s))
# 'Hello-world'
  

 If you want to keep digits in your string: 

  re.sub("[^a-zA-Z0-9_-]", "", re.sub("\s+", "-", s))
# 'Hello-world'
  

 Here  [^a-zA-Z_-]  matches a single character that is not a letter(upper and lower case), underscore and dash, the dash needs to be placed at the end of the character class  []  so that it won't be treated as range but literal. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9429431)
  "to use regex to remove @tags from a string"  

  import re

text = ' you @warui  and @madawar '
stripped_text = re.sub(r'@\w+', '', text)
# stripped_text == ' you   and  '
  

 or do you want to  extract  them? 

  import re

text = ' you @warui  and @madawar '
tags = re.findall(r'@\w+', text)
# tags == ['@warui', '@madawar']
  

 A @tag is defined as  @  followed by  at least  one alphanumeric character, that's why  @\w+  is better than  @\w* . Also you don't need to modify the case-sensitiveness, because  \w  matches both lower and upper characters. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40052318)
 You can use lookarounds in your regex: 

  >>> input = "Hello!!!, i didn''''t don't like to 'some String' .... isn't"
>>> regex = r'\W+(?!<!\S)\W+'
>>> print re.sub(regex, '', input, 0, re.IGNORECASE).split()
['Hello', 'i', "didn''''t", "don't", 'like', 'to', 'some', 'String', "isn't"]
  

 https://regex101.com/r/qiNd4L/5 

  \W+(?!<!\S)\W+  matches a non-word, non-space character that doesn't have a letter at previous position or a letter at next position after 1 or more non-space characters. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48028731)
 With the  re.UNICODE  flag (and, at least in my version of Python, also without it), the class  \w  includes many "non-English" alphanumeric characters, such as Greek letters, umlauts, ligatures, and others. If you want to remove those, too, you should not use  \w  but a more "explicit" character class such as  a-zA-Z0-9 . 

  >>> pattern = re.compile('([^\s\w]|_)+', re.UNICODE)
>>> pattern.sub("", text)
'ß\n     \n\n Æ \n\nªºß πº\nß ß\nπ πÆ ÆØÆ\nÆØµ\nπµ\n µ\n  \nÆÆ\n πÆµ\n\n  πº\n πº\n \nØππØ πº\nºªß πº'
>>> pattern = re.compile('[^\sa-zA-Z0-9]+', re.UNICODE)
>>> pattern.sub("", text)
'\n     \n\n  \n\n \n \n  \n\n\n \n  \n\n \n\n  \n \n \n \n '
  

 Or you could explicitly set the  re.ASCII  flag so that  \w  is actually equivalent to  [a-zA-Z0-9_]  

  >>> re.sub("[^\s\w]", "", text, flags=re.UNICODE)
'ß\n     \n\n Æ \n\nªºß πº\nß ß\nπ πÆ ÆØÆ\nÆØµ\nπµ\n µ\n  \nÆÆ\n πÆµ\n\n  πº\n πº\n \nØππØ πº\nºªß πº'
>>> re.sub("[^\s\w]", "", text, flags=re.ASCII)
'\n     \n\n  \n\n \n \n  \n\n\n \n  \n\n \n\n  \n \n \n \n '
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3562026)
  >>> import re
>>> test = "i am test-ing., i am test.ing-, i am_, test_ing,"
>>> re.sub(r'([^\w\s]|_)+(?=\s|$)', '', test)
'i am test-ing i am test.ing i am test_ing'
  

 Matches one or more non-alphanumeric characters ( [^\w\s]|_ ) followed by either a space ( \s ) or the end of the string ( $ ). The  (?= )  construct is a lookahead assertion: it makes sure that a matching space is not included in the match, so it doesn't get replaced; only the  [\W_]+  gets replaced. 

 Okay, but why  [^\w\s]|_ , you ask? The first part matches anything that's not alphanumeric or an underscore ( [^\w] ) or whitespace ( [^\s] ), i.e. punctuation characters. Except we do want to eliminate underscores, so we then include those with  |_ . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11902143)
  import re
string = open('a.txt').read()
new_str = re.sub('[^a-zA-Z0-9\n\.]', ' ', string)
open('b.txt', 'w').write(new_str)
  

 It will change every non alphanumeric char to white space. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7358582)
 You could use a regular expression: 

  import re
mystring = re.sub(r"^\W+", "", mystring)
  

 This removes all non-alphanumeric characters from the start of your string: 

  Explanation:  

  ^   # Start of string
\W+ # One or more non-alphanumeric characters
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29187367)
 After using  lower() , you can use  re.sub(r'([a-z])-([a-z])', r'\1\2', s)  to remove hyphens.  

 Then  re.split(r'[^a-z]') , to split the words.  

  s = s.lower()
s = re.sub(r'([a-z])-([a-z])', r'\1\2', s)
s = re.split(r'[^a-z]', s)
  

 This solution may (or may not) be faster  depending on the text it is used on . It does have some probable speed ups though:  

 
 Ignoring numbers allows usage of  [a-z]  instead of  \w . 
  lower()  being called first, allows  re.sub()  to search for half the letters; that is  [a-z]  instead of  [A-Za-z] . 
 Assuming no spaces before and after hyphens (since usually that should be the case) allows replacing of  '\s*-\s*'  with a faster  [a-z]-[a-z]  
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35614234)
 R uses TRE (POSIX) or PCRE regex engine depending on the  perl  option (or function used). Python uses a modified, much poorer Perl-like version as  re  library. Python does not support  POSIX character classes , as  http://www.regular-expressions.info/posixbrackets.html  that matches  alpha  (letters) and  num  (digits). 

 In Python,  [:alnum:]  can be replaced with  [^\W_]  (or ASCII only  [a-zA-Z0-9] ) and the negated  [^[:alnum:]]  - with  [\W_]  ( [^a-zA-Z0-9]  ASCII only version). 

 The  [^[:alnum:]['-]  matches  any 1 symbol other than alphanumeric (letter or digit),  [ ,  ' , or  -  .  That means the R question you refer to does not provide a correct answer . 

 You can use the http://ideone.com/m2OdLQ: 

  import re
p = re.compile(r"(\b[-']\b)|[\W_]")
test_str = "No -  d'Ante compactified on a calabi-yau threefold @ ,."
result = p.sub(lambda m: (m.group(1) if m.group(1) else " "), test_str)
print(result)
  

 The https://regex101.com/r/bS5cY6/1 matches and captures intraword  -  and  '  and we restore them in the  re.sub  by checking if the capture group matched and re-inserting it with  m.group(1) , and the rest (all non-word characters and underscores) are just replaced with a space.  

 If you want to remove sequences of non-word characters with one space, use 

  p = re.compile(r"(\b[-']\b)|[\W_]+") 
  



