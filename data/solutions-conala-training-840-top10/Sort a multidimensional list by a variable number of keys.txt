Query: Sort a multidimensional list by a variable number of keys
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1683863)
 This will sort by columns 2 and 3: 

  a.sort(key=operator.itemgetter(2,3))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1683868)
 Make sure you have converted the numbers to ints, otherwise they will st alphabetically rather than numerically 

  # St the list in place
def stByColumn(A,*args):
    impt operat
    A.st(key=operat.itemgetter(*args))
    return A
  

   

  # Leave the iginal list alone and return a new sted one
def stByColumn(A,*args):
    impt opertat
    return sted(A,key=operat.itemgetter(*args))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46059323)
 What you want is called an http://en.wikipedia.org/wiki/Associative_array, in python these are called http://docs.python.org/tutorial/datastructures.html#dictionaries. 

  fruitsDict = {}

fruitsDict["apple"] = ["A red fruit","sort of ball"]
fruitsDict["orange"] = ["An orange fruit","a ball"]
fruitsDict["banana"] = ["A yellow fruit","a fruit"]
fruitsDict["blueberry"] = ["A blue fruit","a berry"]
  

 If you want to get the keys of the dictionary as strings you can use 

  for key, value in fruitsDict.items():
      print(key,value[1])
  

 Output: 

 
   Apple sort of ball 
  Orange a ball 
  Banana a fruit 
  Blueberry a berry 
 

 Click http://www.tutorialspoint.com/execute_python_online.php?PID=0Bw_CjBb95KQMalhuWW9DNE90bGM for a working example in tutorials point    


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1683903)
 The key idea here (pun intended) is to use a key function that returns a tuple.
Below, the key function is  lambda x: (x[idx] for idx in args) 
 x  is set to equal an element of aList -- that is, a row of data. It returns a tuple of values, not just one value. The sort() method sorts according to the first element of the list, then breaks ties with the second, and so on. See http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys 

  #!/usr/bin/env python
import csv
def sortByColumn(aList,*args):
    aList.sort(key=lambda x: (x[idx] for idx in args))
    return aList

filename='file.txt'
def convert_ints(astr):
    try:
        return int(astr)
    except ValueError:
        return astr    
biglist=[[convert_ints(elt) for elt in line]
         for line in csv.reader(open(filename,'r'),delimiter='\t')]

for row in sortByColumn(biglist,0):
    print row

for row in sortByColumn(biglist,2,3):
    print row
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38670975)
  sorted(list, key=lambda x: x[1])
  

 Note: this works on time variable too. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20183097)
 You can use the sorted method with a key. 

  sorted(a, key=lambda x : x[1])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21770290)
 You can't sort the dictionary itself. Dictionary in python does not have an order. 

 
 Trying to sort dictionary will pass keys of the dictionary to the  key  function.  sub_links[x]  =>  sub_links['about-us'] ;  sub_links[x]['order']  fails because  sub_links[x]  returns a  list. 
 

 You can sort the list inside the dictionary:  d['about-us']  

 

 Also the usage of the  sorted  function should be changed: http://docs.python.org/3/library/functions.html#sorted passes each item to the key function, not the index of the item. 

  >>> sorted(d['about-us'], key=lambda x: int(x['order']))
[{'uri': 'about', 'name': 'ABOUT', 'order': u'1'},
 {'uri': 'constitution', 'name': 'CONSTITUTION', 'order': u'2'},
 {'uri': 'executive-committee', 'name': 'EXECUTIVE COMMITTEE', 'order': u'3'},
 {'uri': 'financial-info', 'name': 'FINANCIAL INFO', 'order': u'4'},
 {'uri': 'sponsors-and-affiliations', 'name': 'SPONSORS AND AFFILIATIONS', 'order': u'5'}]
  

 If you need to sort all the dictionary values in place, loop over the values. 

  for value in d.values(): # use `itervalues` In Python 2.x
    value.sort(key=lambda x: int(x['order']))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43618044)
 Iterating a dict yields the keys, so you need to lookup  x  in the dict again:  

  sorted(data, key=lambda x: int(data[x]['hitrate']))
  

 If you want the values too, then sort the items: 

  sorted(data.items(), key=lambda item: int(item[1]['hitrate']))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34722667)
 You could use @manu190455 solution but sort it before passing to  pandas.DataFrame  with  sorted  and  key  argument: 

  d = { 'I1' : [['A',1],['B',2],['C',3]],
    'I2' : [['B',2],['D',4]],
    'I3' : [['A',2],['E',5]]}

sorted_d = sorted(d.items(), key = lambda x: x[0])

In [263]: sorted_d
Out[263]:
[('I1', [['A', 1], ['B', 2], ['C', 3]]),
 ('I2', [['B', 2], ['D', 4]]),
 ('I3', [['A', 2], ['E', 5]])]

df = pd.DataFrame([dict(val) for key, val in sorted_d])

In [265]: df
Out[265]:
    A   B   C   D   E
0   1   2   3 NaN NaN
1 NaN   2 NaN   4 NaN
2   2 NaN NaN NaN   5
  



