Query: Functional statement in Python to return the sum of certain lists in a list of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35707788)
 Using  sum  with a generator expression isn't what I'd call functional style 

  >>> from functools import reduce
>>> from operator import add
>>> x = [[4], [6, 4, 9], [4, 6], [0], []]
>>> reduce(add, filter(1 .__lt__, map(len, x)))
5
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35707452)
 If you wanted a functional approach  filter   sum  and  map  would do the job: 

  In [10]: x = [[4], [6, 4, 9], [4, 6], [0], []]

In [11]: sum(map(len, filter(lambda s: len(s) > 1, x)))
Out[11]: 5
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35707446)
 You mentioned a  map  approach as well.  Here's one that works 

  x = [[4], [6, 4, 9], [4, 6], [0], []]

In [2]: sum(map(lambda x: len(x) if len(x) > 1 else 0, x))
Out[2]: 5
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35707260)
 You had a good start, but you made it much more complicated than it needed to be. 

 You can just sum a generator. 

  sum(len(y) for y in x if len(y) > 1)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18976068)
 You are asking about list comprehensions. It's Python's way to do the functional maps (applying a function to each element of a list) and filters (filtering lists on certain conditions). 

 The easiest way to explain this would be with some examples. 

  

  >>> l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> [2 * i for i in l]
[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
>>> [i for i in l if i > 5]
[6, 7, 8, 9, 10]
  

 Now these can be combined, and you can use any number of for's: 

  >>> # squares of even numbers below 10
>>> [i * i for i in range(10) if i%2 == 0]
[0, 4, 16, 36, 64]
>>> # concatenating all lists
>>> ll = [[1, 2], [3, 4], [5, 6], [7, 8], [8, 10]]
>>> [i for l in ll for i in l]
[1, 2, 3, 4, 5, 6, 7, 8, 8, 10]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35707266)
 Why you just don't use a https://www.python.org/dev/peps/pep-0289/ within  sum() ? 

  >>> x = [[4], [6, 4, 9], [4, 6], [0], []]
>>> 
>>> sum(len(i) for i in x if len(i)>1)
5
  

 Read this article about the fate of  reduce()  in Python 3000 by Guido van van Rossum. http://www.artima.com/weblogs/viewpost.jsp?thread=98196 

 And if you are looking for a functional way as a logical approach you can just use  map()  and  sum()  and still without  reduce()  and  filter()  :-) 

  >>> x = [[4], [6, 4, 9], [4, 6], [0], []]
>>> 
>>> sum(map(lambda i:bool(i and i.pop(0) and i)+len(i), x))
5
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35707344)
 I agree with other answers that your attempt was complicated and there could be simple solution for your question, But I would like to guide you in your attempt. You were close, a little modification in your attempt -  

  x = [[4], [6, 4, 9], [4, 6], [0], []]
reduce(lambda x,y: (len(x) + len(y)) if isinstance(x, list) else (x + len(y)), filter((lambda x: len(x) > 1), x))
# result would be 5
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47927295)
  map  applies a function to every element in the list. Instead, you can use  reduce : 

  a = [1, 2, 3, 4]
sum_a = reduce(lambda x, y:x+y, a)
  

 In this case, purely  sum  can be used, however, to be more functional,  reduce  is a better option. 

 Or, in Python3: 

  from functools import reduce
a = [1, 2, 3, 4]
sum_a = reduce(lambda x, y:x+y, a)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45891880)
 Functional solution 

 The https://docs.python.org/2.7/library/functions.html#map and https://docs.python.org/2.7/library/functions.html#max functions make short work of this problem: 

  >>> R1 = [10, 20, 30, 40, 50]
>>> R2 = [5, 10, 45, 40, 45]
>>> list(map(max, R1, R2))
[10, 20, 45, 40, 50]
  

 List comprehension solution 

 Another technique to is to use a https://docs.python.org/2.7/reference/expressions.html#conditional-expressions in a https://docs.python.org/2.7/glossary.html#term-list-comprehension: 

  >>> [n if n>m else m for n, m in zip(R1, R2)]
[10, 20, 45, 40, 50]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34522757)
 This problem could be also solved in a functional way: 

 
  You have to multiply all values in the list - this is what  functools.reduce  +  operator.mul  for  
  You have to sum up all values in all inner lists - this is what  sum  for  
 

 Example: 

  In [5]: ar = "0.212,1.231,0.112:1.001,3.212,0.002:0.002,0.0001,1.1"

In [6]: import operator

In [7]: import functools

In [8]: functools.reduce(operator.mul, (sum(float(x) for x in s.split(',')) for s in ar.split(':')))
Out[8]: 7.223521582500001
  



