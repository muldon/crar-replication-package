Query: Most pythonic way to convert a list of tuples
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50727221)
 The most pythonic solution is 

  tuples = [(1, 2), (3, 4)]

tuple_strings = ['(%s, %s)' % tuple for tuple in tuples]

result = ', '.join(tuple_strings)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3292660)
 You can try something like this (http://ideone.com/VfbJp): 

  myList = [(1,2),(3,4)]
print ",".join("(%s,%s)" % tup for tup in myList)
# (1,2),(3,4)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14831861)
 You can use http://www.youtube.com/watch?v=pShL9DCSIUw: 

  >>> list_of_tuples = [(1, 2), (4, 5)]
>>> list_of_lists = [list(elem) for elem in list_of_tuples]

>>> list_of_lists
[[1, 2], [4, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11696117)
 Using  map()  and  join() : 

  tuple_list = [('this', 'is'), ('is', 'the'), ('the', 'first'), ('first', 'document'), ('document', '.')]

string_list = map(' '.join, tuple_list) 
  

 As inspectorG4dget pointed out, list comprehensions are the most pythonic way of doing this: 

  string_list = [' '.join(item) for item in tuple_list]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11788636)
 An alternate way: 

  zip( mylist[:-1:2], mylist[1::2] )
  

 Which produces a list of tuples: 

  >>> zip(mylist[:-1:2],mylist[1::2])
[(1, 2), (3, 4), (5, 6)]
  

 If you really want a list of lists: 

  map(list, zip(mylist[:-1:2],mylist[1::2]))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11696333)
 This does it: 

  >>> l=[('this', 'is'), ('is', 'the'), ('the', 'first'), 
('first', 'document'), ('document', '.')]
>>> ['{} {}'.format(x,y) for x,y in l]
['this is', 'is the', 'the first', 'first document', 'document .']
  

 If your tuples are variable length (or not even), you can also do this: 

  >>> [('{} '*len(t)).format(*t).strip() for t in [('1',),('1','2'),('1','2','3')]]
['1', '1 2', '1 2 3']   #etc
  

  

  >>> [' '.join(t) for t in [('1',),('1','2'),('1','2','3'),('1','2','3','4')]]
['1', '1 2', '1 2 3', '1 2 3 4']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25635129)
 An easier way to read that comprehension is to think of the solution without the comprehension.  

  >>> lot = [ ('a','b'),('c','d') ]
>>> result = []
>>> for a_tuple in lot:
...     for item in a_tuple:
...             result.append(item)
...
>>> result
['a', 'b', 'c', 'd']
  

 In case of list comprehensions where two loops are involved, you just write the order of the loops exactly as in the above "non list comprehension" solution, but all in a line: 

  >>> result = [item for a_tuple in lot for item in a_tuple]
>>> result
['a', 'b', 'c', 'd']
  

 This should answer why the code breaks if you take off the second loop. And yes, using list comprehensions are considered "pythonic". 



