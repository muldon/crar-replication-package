Query: know if an object has an attribute
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/611708)
 You can use  hasattr()  or catch  AttributeError , but if you really just want the value of the attribute with a default if it isn't there, the best option is just to use  getattr() : 

  getattr(a, 'property', 'default value')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17735716)
 You need to look at the class (this is the case f descripts in general), which f objects you can find via the  class  attribut  by using the type function: 

  >>> obj.__class__.my_property
<property object at 0xb74bd16c>
  

  

  >>> type(obj).my_property
<property object at 0xb720b93c>
  

 These result in the same "property object" as if you were to directly check the attribute of the class (implying you know the class' name in your code instead of checking it dynamically like you probably should rather do): 

  >>> A.my_property
<property object at 0xb7312345>
  

 So to test if a specific attribut of an object is a property, this would be one solution: 

  >>> isinstance(type(obj).my_property, property)
True
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8004255)
 In case you even know what this attribute is called when you write code, you can 

  my_guy = Person()

attr = 'secret_habit'  # this could be read from file, keybrd etc.
value = 'wont tell you'
setattr( my_guy, attr, value)

print(my_guy.secret_habit)
  

  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41392643)
 Hope you expecting hasattr(), but try to avoid hasattr() and please prefer getattr(). getattr() is faster than hasattr() 

  using hasattr():  

   if hasattr(a, 'property'):
     print a.property
  

  same here i am using getattr to get property if there is no property it return none  

     property = getattr(a,"property",None)
    if property:
        print property
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44691795)
  EDIT :This approach has serious limitation. It should work if the object is an  iterable  one. Please check the comments below. 

 If you are using  Python 3.6  or higher like me there is a convenient alternative to check whether an object has a particular attribute: 

  if 'attr1' in obj1:
    print("attr1 = {}".format(obj1["attr1"]))
  

 However, I'm not sure which is the best approach right now. using  hasattr() , using  getattr()  or using  in . Comments are welcome. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11322148)
 The  operator.attrgetter  function does this: 

  class Foo: pass
f = Foo()
f.bar = Foo()
f.bar.baz = Foo()
f.bar.baz.quux = "Found me!"

import operator
print operator.attrgetter("bar.baz.quux")(f)     # prints "Found me!"
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2317942)
  dir(object)  will give you all its attribute names. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/610922)
 According to pydoc, hasattr(obj, prop) simply calls getattr(obj, prop) and catches exceptions. So, it is just as valid to wrap the attribute access with a try statement and catch AttributeError as it is to use hasattr() beforehand. 

  a = SomeClass()
try:
    return a.fake_prop
except AttributeError:
    return default_value
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30137597)
 . 

 Python first looks for the attribute in the instance and, if it's not found there, it looks in the class (and base classes...). For example consider: 

  class Foo:
     x = 42

f = Foo()
g = Foo()

g.x = 99

print(f.x, g.x)
  

 will show you that  f  is accessing  42  while  g  is accessing  99 . 

 To access the class attribute even if there is an instance attribute with the same name you can use either 

 
  Foo.x  
  getattr(Foo, 'x')  
  Foo.__dict__['x']  
 

 because in Python classes are regular object instances too 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43709261)
 The attribute is https://www.pygame.org/docs/ref/pygame.html#pygame.version.ver, so you need to use: 

  import pygame
print(pygame.version.ver)
  



