Query: Casting an int to a string in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6330101)
 There is something similar: 

  >>> word="15"
>>> x=int(word)
>>> x
15


>>> word="fifteen"
>>> x=int(word)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'fifteen'


>>> try: 
...     x=int(word)
... except ValueError:
...     x=None
... 
>>> x is None
True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6330109)
 Think not, but you may implement your own: 

  def safe_cast(val, to_type, default=None):
    try:
        return to_type(val)
    except (ValueError, TypeError):
        return default

safe_cast('tst', int) # will return None
safe_cast('tst', int, 0) # will return 0
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43025196)
 You aren't properly casting the string to an int. 

  import random

number_of_sides = input("How many sides should the die have?")
number_of_sides_int = int(number_of_sides)

print("OK, the number of sides on the die will be " + number_of_sides)

number = random.randint(1, number_of_sides_int)

print(number)
  

 Rather than casting the string to an int, you are making the variable  number_of_sides  into the Python type  int . That's is why the error may have been confusing, but Python  int  is a python  type . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11559133)
 No string formatting: 

  >> print 'Foo',0
Foo 0
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3944897)
  x = 1
y = "foo" + str(x)
  

 Please see the Python documentation: https://docs.python.org/2/library/functions.html#str 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26330367)
 The reason is that  int  is doing two different things in your two examples. 

 In your first example,  int  is converting a string to an integer. When you give it  10.2 , that is not an integer so it fails. 

 In your second example,  int  is casting a floating point value to an integer. This is defined to truncate any fractional part before returning the integer value. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11559122)
 Modern string formatting: 

  "{} and {}".format("string", 1)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38022159)
 You can use https://docs.python.org/3/library/stdtypes.html#str.split inside a https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions to do this.  

 As  [1 2 3]  is not the proper representation of a python list in a string, we can remove the brackets to get  '1 2 3'  which on splitting becomes  ['1', '2', '3'] . This can be easily converted to a integer nested list by casting it to an int using the https://docs.python.org/3/library/functions.html#int callable.  

  >>> l = ['[12 9 15]','[98 12 18]','[56 45 45]']   
>>> [[int(j) for j in i[1:-1].split()] for i in l]
[[12, 9, 15], [98, 12, 18], [56, 45, 45]]
  

 For further reading https://stackoverflow.com/q/34835951/4099593  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3944906)
 You can use  str()  to cast it, or formatters: 

  "ME%d.txt" % (num,)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/31131547)
 In the case of integers that are included at the string, if you want to avoid casting them to  int  individually you can do: 

  mList = [int(e) if e.isdigit() else e for e in mStr.split(',')]
  

 It is called  list comprehension , and it is based on set builder notation. 

   

  >>> mStr = "1,A,B,3,4"
>>> mList = [int(e) if e.isdigit() else e for e in mStr.split(',')]
>>> mList
>>> [1,'A','B',3,4]
  



