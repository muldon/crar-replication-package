Query: Regular expression syntax for "match nothing"?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14131772)
 Nothing prevents you from simply doing this: 

  re.match('<some_match_symbols>' + '<my_match>' + '<some_other_match_symbols>', mystring)
  

 Regular expressions are nothing else than a string containing some special characters, specific to the regular expression syntax. But they are still strings, so you can do whatever you are used to do with strings. 

 The  r'â€¦'  syntax is btw. a raw string syntax which basically just prevents any escape sequences inside the string from being evaluated. So  r'\n'  will be the same as  '\\n' , a string containing a backslash and an  n ; while  '\n'  contain a line break. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/940846)
 Maybe  '.{0}' ? 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/942122)
    should always fail to match.  .  If what is in the parentheses matches then the whole match fails.  Given that it has nothing in it, it will fail the match for anything (including nothing). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4596316)
 You have to import the  re  module and test it that way: 

  import re

if re.match(r'.*apps\.facebook\.com.*', string):
    # it matches!
  

 You can use  re.search  instead of  re.match  if you want to search for the pattern anywhere in the string.  re.match  will only match if the pattern can be located at the beginning of the string. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/940840)
 This shouldn't match anything: 

  re.compile('$^')
  

 So if you replace regexp1, regexp2 and regexp3 with '$^' it will be impossible to find a match. Unless you are using the multi line mode. 

 

 After some tests I found a better solution 

  re.compile('a^')
  

 It is impossible to match and will fail earlier than the previous solution. You can replace a with any other character and it will always be impossible to match 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/940934)
 To match an empty string - even in multiline mode - you can use  \A\Z , so: 

  re.compile('\A\Z|\A\Z*|\A\Z+')
  

 The difference is that  \A  and  \Z  are start and end of  string , whilst  ^  and  $  these can match start/end of  lines , so  $^|$^*|$^+  could potentially match a string containing newlines (if the flag is enabled). 

 And to fail to match anything (even an empty string), simply attempt to find content before the start of the string, e.g: 

  re.compile('.\A|.\A*|.\A+')
  

 Since no characters can come before \A (by definition), this will always fail to match. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/941007)
 You could use 
 \z..  
This is the absolute end of string, followed by two of anything 

 If  +  or  *  is tacked on the end this still works refusing to match anything   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1619583)
 You need to wrap the group name in parentheses. The syntax for named groups is  (?P<name>regex) , not  ?P<name>regex .  Also, if you don't want to require a trailing slash, you should make it optional. 

 It's easy to test regular expression matching with the Python interpreter, for example: 

  >>> import re
>>> re.match(r'^org/?P<company_name>\w+/$', 'org/companyA')
>>> re.match(r'^org/(?P<company_name>\w+)/?$', 'org/companyA')
<_sre.SRE_Match object at 0x10049c378>
>>> re.match(r'^org/(?P<company_name>\w+)/?$', 'org/companyA').groupdict()
{'company_name': 'companyA'}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21856152)
 The regular expression specified is interpreted by  tcl , not by  python . 

 Tcl use different syntax for word boundary:  \y  instead of  \b . (See http://www.regular-expressions.info/wordboundaries.html, especially  Tcl Word Boundaries  part.) 

 The line should be replaced with: 

  index = self.text.search(r'\y%s\y' % myWord, INSERT, backwards=True, regexp=True)
  



