Query: Appending to list in Python dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31307630)
 You could simply append new dictionary: 

  for i in range(3):
    data.append({"item1": i+1, "item2": i+2})
  

 Or, even better, use list comprehension: 

  data = [{"item1": i+1, "item2": i+2} for i in range(3)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28718815)
 You could use https://docs.python.org/3/library/collections.html from collections module. 

  >>> from collections import defaultdict
>>> data = [(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3)]
>>> m = defaultdict(list)
>>> for i,j in data:
        m[i].append(j)


>>> m
defaultdict(<class 'list'>, {1: [2, 3, 4], 2: [1, 2, 3]})
>>> dict(m)
{1: [2, 3, 4], 2: [1, 2, 3]}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35995543)
 You can use a list comprehension: 

 For Python 2: 

  cluster_list = [{k: v} for k, v in centroid.iteritems()]
# [{'A': [1.0, 1.0]}, {'B': [2.0, 1.0]}]
  

 For Python 3: 

  cluster_list = [{k: v} for k, v in centroid.items()]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39502188)
 Just put  dict = {}  inside the loop.  

  >>> dict = {}
>>> list = []
>>> for x in range(0, 100):
       dict[1] = x
       list.append(dict)
       dict = {}

>>> print list
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23724433)
 When you create the  adict  dictionary outside of the loop, you are appending the same dict to your  alist  list. It means that all the copies point to the same dictionary and you are getting the last value  {1:99}  every time. Just create every dictionary inside the loop and now you have your 100 different dictionaries. 

  alist = []
for x in range(100):
    adict = {1:x}
    alist.append(adict)
print(alist)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23724156)
 You need to append a  copy , otherwise you are just adding references to the same dictionary over and over again: 

  yourlist.append(yourdict.copy())
  

 I used  yourdict  and  yourlist  instead of  dict  and  list ; you don't want to mask the built-in types. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30820425)
 You're appending to the value (which is a list in this case), not the key. 

  myDict['games'].append(...)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22496696)
   How does one insert a key value pair into a python list?   

 . What you can do is "imitate" this by appending tuples of 2 elements to the list: 

  a = 1
b = 2
some_list = []
some_list.append((a, b))
some_list.append((3, 4))
print some_list
>>> [(1, 2), (3, 4)]
  

 But the correct/best way would be using a dictionary: 

  some_dict = {}
some_dict[a] = b
some_dict[3] = 4
print some_dict
>>> {1: 2, 3: 4}
  

  Note:   

 
 Before using a dictionary you should read the Python documentation, some tutorial or some book, so you get the full concept. 
 Don't call your list as  list , because it will hide its built-in implementation. Name it something else, like  some_list ,  L , ... 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3419217)
 Just use append: 

  list1 = [1, 2, 3, 4, 5]
list2 = [123, 234, 456]
d = {'a': [], 'b': []}
d['a'].append(list1)
d['a'].append(list2)
print d['a']
  



