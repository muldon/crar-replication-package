Query: Pandas DataFrame to List of Dictionaries
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41946965)
 Easy: 

  pd.concat([pd.DataFrame(l) for l in my_list],axis=1).T
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44957133)
 You can also use  pd.DataFrame.from_dict(d)  as : 

  In [8]: d = [{'points': 50, 'time': '5:00', 'year': 2010}, 
   ...: {'points': 25, 'time': '6:00', 'month': "february"}, 
   ...: {'points':90, 'time': '9:00', 'month': 'january'}, 
   ...: {'points_h1':20, 'month': 'june'}]

In [12]: pd.DataFrame.from_dict(d)
Out[12]: 
      month  points  points_h1  time    year
0       NaN    50.0        NaN  5:00  2010.0
1  february    25.0        NaN  6:00     NaN
2   january    90.0        NaN  9:00     NaN
3      june     NaN       20.0   NaN     NaN
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20638258)
 Supposing  d  is your list of dicts, simply: 

  pd.DataFrame(d)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48265154)
 You could use  pd.DataFrame  again: 

  test1.append(pd.DataFrame(a), ignore_index=True)
  

 Output: 

      id  value
0    0    354
1    1    324
2    2    211
3    3     78
4    4    644
5    5    198
6    6    342
7    0    354
8    1    324
9    2    211
10   3     78
11   4    644
12   5    198
13   6    342
  

 Or use  pd.concat  

  pd.concat([test1,pd.DataFrame(a)])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33020669)
 In pandas 16.2, I had to do  pd.DataFrame.from_records(d)  to get this to work. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23342526)
 Try using  pandas.concat  and  DataFrame.apply  as  joris  proposed in the comment: 

  import pandas, collections
Point = collections.namedtuple('Point', ['x', 'y', 'val'])
p1 = Point(1,2,{'name':'foo', 'age':12})
p2 = Point(3,4,{'name':'bar', 'age':24})
df = pandas.DataFrame([p1, p2])
print pandas.concat([df.iloc[:,:2],df[2].apply(pandas.Series)],axis=1)
  

 Output: 

     0  1  age name
0  1  2   12  foo
1  3  4   24  bar
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52019569)
 Use  pd.concat . 

  import numpy as np
import pandas as pd

datas = [
    {'begin_bal': np.arange(100), 'prin': np.arange(100)},
    {'begin_bal': np.arange(50), 'prin': np.arange(50)},
    {'begin_bal': np.arange(360), 'prin': np.arange(360)},
]

pd.concat(pd.DataFrame(data) for data in datas)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43392235)
 Pandas do exactly that for you !  

  >>> import pandas as pd
>>> t = [{'v1': 100, 'v2': 50}]
>>> df=pd.DataFrame(t)
>>> df
    v1  v2
0  100  50
  

    

  >>> import pandas as pd
>>> t = [{'v1': 100, 'v2': 50}]
>>> df=pd.DataFrame([t[0]['v1']], index=None, columns=['var1'])
>>> df
    0
0  100  
  



