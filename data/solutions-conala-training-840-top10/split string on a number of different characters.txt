Query: split string on a number of different characters
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1000600)
 Not very fast but does the job: 

  def my_split(text, seps):
  for sep in seps:
    text = text.replace(sep, seps[0])
  return text.split(seps[0])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/373576)
 This one replaces all of the separators with the first separator in the list, and then "splits" using that character. 

  def split(string, divs):
    for d in divs[1:]:
        string = string.replace(d, divs[0])
    return string.split(divs[0])
  

 output: 

  >>> split("a b.c", " .")
['a', 'b', 'c']

>>> split("a b.c", ".")
['a b', 'c']
  

 I do like that 're' solution though. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19211830)
  

  from itertools import groupby
sep = ' .,'
s = 'a b.c,d'
print [''.join(g) for k, g in groupby(s, sep.__contains__) if not k]
  

 An explanation is here https://stackoverflow.com/a/19211729/2468006 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21568355)
 http://docs.python.org/2/library/stdtypes.html#str.partition returns a tuple of three elements. String before the partitioning string, the partitioning string itself and the rest of the string. So, it has to be used like this 

  first, middle, rest = name.partition(" ")
print first, rest
  

 To use the http://docs.python.org/2/library/stdtypes.html#str.split, you can simply print the splitted strings like this 

  print name.split(" ")
  

 But, when you call it like this, if the string has more than one space characters, you will get more than two elements. For example 

  name = "word1 word2 word3"
print name.split(" ")          # ['word1', 'word2', 'word3']
  

 If you want to split only once, you can specify the number times to split as the second parameter, like this 

  name = "word1 word2 word3"
print name.split(" ", 1)       # ['word1', 'word2 word3']
  

 But, if you are trying to split based on the whitespace characters, you don't have to pass  " " .  

  name = "word1 word2 word3"
print name.split()            # ['word1', 'word2', 'word3']
  

 If you want to limit the number of splits, 

  name = "word1 word2 word3"
print name.split(None, 1)     # ['word1', 'word2 word3']
  

  Note:  Using  None  in  split  or specifying no parameters, this is what happens 

 Quoting from the http://docs.python.org/2/library/stdtypes.html#str.split 

 
   If sep is not specified or is None, a different splitting algorithm is
  applied: runs of consecutive whitespace are regarded as a single
  separator, and the result will contain no empty strings at the start
  or end if the string has leading or trailing whitespace. Consequently,
  splitting an empty string or a string consisting of just whitespace
  with a None separator returns []. 
 

 So, you can change your program like this 

  print "Partition:"
first, middle, rest = name.partition(" ")
for current_string in (first, rest):
    print current_string

print "Split:"
for current_string in name.split(" "):
    print current_string
  

 Or you can use http://docs.python.org/2/library/stdtypes.html#str.join method like this 

  print "Partition:"
first, middle, rest = name.partition(" ")
print "\n".join((first, rest))

print "Split:"
print "\n".join(name.split())
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40955737)
 Raw string vs Python string 

   r'","'  </h3>

 The  r  is to  indicate  it's a  raw string . 

 How is a raw string different then python string? 

 The  special characters loose  their  special meaning inside  a  raw string . For eg  \n  is a newline character inside a python string which will loose it's meaning in a raw string and will simply mean backslash followed by n. 

  string.split()  

  string.split()  will break and split the  string  on the argument that is passed and return all the parts in a list. The list will not include the splitting character(s). 

   string.split('","')   will break and split the string on every  ","  and return all the broken parts in a list excluding  ","  

 Eg: 

  print 'Hello world","there you are'.split(r'","')
  

 Output: 

  ['Hello world', 'there you are']
  

 

 

 

  split()  can do even more... 

 You can specify how many parts you want your string to break into by passing in an extra parameter.  

 Lets consider this string:  'hello,world,there,you,are'  

 
 Split on all commas and break into n+1 parts where n is the number of commas: 
 

<pre class="lang-py prettyprint-override"> >>>print 'hello,world,there,you,are'.split(',')
['hello', 'world', 'there', 'you', 'are']
  

<ol start="2">
 Split on first comma and break only into 2 parts. 
 

<pre class="lang-py prettyprint-override"> >>>'hello,world,there,you,are'.split(',',1)  
['hello', 'world,there,you,are']
  

<ol start="3">
 Split on first and second comma and break into 3 parts. And so on... 
 

<pre class="lang-py prettyprint-override"> >>>'hello,world,there,you,are'.split(',',2)
['hello', 'world', 'there,you,are']
  

 

 And even more... 

 From the docs: 

 If splitting character(s) i.e separator is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns []. 

 For example, 

  

  >>>' 1  2   3  '.split()
['1', '2', '3']

>>>'  1  2   3  '.split(None, 1)
['1', '2   3  ']

>>>''.split()
[]

>>>'    '.split()
[]


>>>'      '.split(None)
[]
  

 

 And even... 

   
.
  
.
  
. 

 What? 

 Isn't it enough that you are looking for more? Don't be so greedy :P.
Just question yourself ? , it will make you non-greedy :D (You will get the joke if you know regular expressions) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2622633)
 You can do this two different ways: 

  >>> import re, textwrap
>>> s = 'A string with words'
>>> textwrap.wrap(s, 15)
['A string with', 'words']
>>> re.findall(r'\b.{1,15}\b', s)
['A string with ', 'words']
  

 Note the slight difference in space handling. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28489061)
 
   However, I wanted to know if there is a way to split with two characters at once. 
 

 It is possible using https://docs.python.org/3.4/library/re.html#re.split: 

  re.split(r'\|--|:', your_string)
  



