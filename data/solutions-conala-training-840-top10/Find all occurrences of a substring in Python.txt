Query: Find all occurrences of a substring in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51207335)
 This does the trick for me using re.finditer 

  import re

text = 'This is sample text to test if this pythonic '\
       'program can serve as an indexing platform for '\
       'finding words in a paragraph. It can give '\
       'values as to where the word is located with the '\
       'different examples as stated'

#  find all occurances of the word 'as' in the above text

find_the_word = re.finditer('as', text)

for match in find_the_word:
    print('start {}, end {}, search string \'{}\''.
          format(match.start(), match.end(), match.group()))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34445090)
 Again, old thread, but here's my solution using a  generator  and plain  str.find .  

  def findall(p, s):
    '''Yields all the positions of
    the pattern p in the string s.'''
    i = s.find(p)
    while i != -1:
        yield i
        i = s.find(p, i+1)
  

 Example</h3>

  x = 'banananassantana'
[(i, x[i:i+2]) for i in findall('na', x)]
  

 returns 

  [(2, 'na'), (4, 'na'), (6, 'na'), (14, 'na')]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4664946)
 You can use  re.finditer()  for non-overlapping matches.  

  >>> import re
>>> aString = 'this is a string where the substring "is" is repeated several times'
>>> print [(a.start(), a.end()) for a in list(re.finditer('is', aString))]
[(2, 4), (5, 7), (38, 40), (42, 44)]
  

 but  won't  work for: 

  In [1]: aString="ababa"

In [2]: print [(a.start(), a.end()) for a in list(re.finditer('aba', aString))]
Output: [(0, 3)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4665027)
  >>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int
  

  

  def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches

list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]
  

 No temporary strings or regexes required. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25606236)
 This thread is a little old but this worked for me: 

  numberString = "onetwothreefourfivesixseveneightninefiveten"
testString = "five"

marker = 0
while marker < len(numberString):
    try:
        print(numberString.index("five",marker))
        marker = numberString.index("five", marker) + 1
    except ValueError:
        print("String not found")
        marker = len(numberString)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19720214)
 . 

  def locations_of_substring(string, substring):
    """Return a list of locations of a substring."""

    substring_length = len(substring)    
    def recurse(locations_found, start):
        location = string.find(substring, start)
        if location != -1:
            return recurse(locations_found + [location], location+substring_length)
        else:
            return locations_found

    return recurse([], 0)

print(locations_of_substring('this is a test for finding this and this', 'this'))
# prints [0, 27, 36]
  

 No need for regular expressions this way. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4664915)
 Here's a (very inefficient) way to get  all  (i.e. even overlapping) matches: 

  >>> string = "test test test test"
>>> [i for i in range(len(string)) if string.startswith('test', i)]
[0, 5, 10, 15]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19848403)
 For this job,  str.find  isn't very efficient.  Instead, http://docs.python.org/2.7/library/stdtypes.html#str.count should be what you use: 

  >>> s = 'xyzbobxyzbobxyzbob'
>>> s.count('bob')
3
>>> s.count('xy')
3
>>> s.count('bobxyz')
2
>>>
  

 

 Or, if you want to get overlapping occurrences, you can use Regex: 

  >>> from re import findall
>>> s = 'bobobob'
>>> len(findall('(?=bob)', s))
3
>>> s = "bobob"
>>> len(findall('(?=bob)', s))
2
>>>
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4664889)
 There is no simple built-in string function that does what you're looking for, but you could use the more powerful http://www.regular-expressions.info/: 

  import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]
  

 If you want to find overlapping matches, http://www.regular-expressions.info/lookaround.html will do that: 

  [m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]
  

 If you want a reverse find-all without overlaps, you can combine positive and negative lookahead into an expression like this: 

  search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]
  

 http://docs.python.org/library/re.html#re.finditer returns a http://wiki.python.org/moin/Generators, so you could change the  []  in the above to  ()  to get a generator instead of a list which will be more efficient if you're only iterating through the results once. 



