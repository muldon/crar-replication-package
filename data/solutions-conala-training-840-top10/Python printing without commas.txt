Query: Python printing without commas
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35401579)
 If the list is  

  l=[1,2,3,4,5]
  

 Printing the list without bracket and commas: 

  print " ".join(map(str,l))

#1 2 3 4 5
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17757511)
 You can convert it to a string, and then to an int: 

  print(int("".join(str(x) for x in [7,7,7,7])))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17757999)
   .format  from Python 2.6 and higher. 

  >>> print '{}{}{}{}'.format(*[7,7,7,7])
7777
>>> data = [7, 7, 7, 7] * 3
>>> print ('{}'*len(data)).format(*data)
777777777777777777777777
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11707302)
 I would come to this short answer: 

  ' '.join(str(a)+b for a,b in my_list)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37260521)
 You can use a list comprehension within  str.join() : 

  >>> print '\n'.join([' '.join(i) for i in a])
zero one
0 1
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43177870)
 Example you have a list called names. 

  names = ["Sam", "Peter", "James", "Julian", "Ann"]
for name in range(len(names)):
    print names[name],
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11746582)
 A general, safe and recursive solution, that works if the data contains commas: 

  def my_repr(o):
    if isinstance(o, list):
        return '[' + ' '.join(my_repr(x) for x in o) + ']'
    else:
        return repr(o)
  

 The CPython implementation of  list_repr  uses essential this algorithm (using  _PyString_Join ). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7494403)
 You're printing the returned  list  value, which Python fmats with brackets and quotes. To print just the first element from the list: 

  print Lookup.get_key(2)[0]
  

 To print the elements of the list separated by commas: 

  print ", ".join(str(x) f x in Lookup.get_key(2))
  

  

  print ", ".join(map(str, Lookup.get_key(2)))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17757544)
 If you're using Python 3, or appropriate Python 2.x version with  from __future__ import print_function  then: 

  data = [7, 7, 7, 7]
print(*data, sep='')
  

  

  print ''.join(map(str, data))
  



