Query: python: append values to a set
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3392372)
 Use  update  like this: 

  keep.update(newvalues)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31972583)
 Define set 

  a = set()
  

 Use add to append single values 

  a.add(1)
a.add(2)
  

 Use update to append iterable values 

  a.update([3,4])
  

 Check your collection 

  a
Out[*n*]: {1, 2, 3, 4}
  

 That's it - remember,  update  if it is iterable (aka list or tuple) or  add  if not.   


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45387543)
 You should use  .append()  not  .extend() . 

  for key, value in data.items():
    all_data.setdefault(key,[]).append(value)
  

  .extend()  extends the list with the given iterable. A string is an iterable of characters, therefore the target list will receive a single character as each item. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8897139)
 Lists are mutable. Just change it in place. 

  dict[master].append(id)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20323044)
 Use method append or insert. Example: 

  T.append(1)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17453551)
 I guess you could go either way, but generally I avoid subclassing list. I might create my own collection object rather than subclassing, for example. 

 In your case, I would just filter each list to check for membership. Unless you're dealing with huge recordsets, it's probably not an issue. 

  list.append(1)
list.append(2)
list.append(3)
# list = [1, 2, 3]

valid_values = (2, 3)

list = [item for item in list if item in valid_values]
# list = [2, 3] now
  

 As for your question about why append isn't working, it's because you're trying to append a list, rather than a list item. You can fix this by making it  list.append(inString) . If at some point you wanted to actually combine lists together, you can use  list.extend(other_list)  or  list + other_list . 

 On a side note, most people in Python follow PEP-8 syntax for readability. That means  inString  would be named  in_string . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26080190)
 You can check before you append: 

  d = collections.defaultdict(list)
for k, v in s:
    if v not in d[k]: # if value not in list already
        d[k].append(v)
  

 Or use a set to store the values: 

  d = collections.defaultdict(set)
for k, v in s:
    d[k].add(v) # sets don't have duplicates so we don't need a check here
  

 If you don't want the  defaultdict(<class 'list'>  output just make d a normal dict with  dict(d)  or use  dict.setdefault  using a normal dict, 

  d = {}
for k, v in s:
    d.setdefault(k,set())
    d[k].add(v)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30871785)
 http://docs.mongodb.org/manual/reference/command/distinct/ should do what you're looking for: 

  for key in res.keys():
    db.collection.update(
       {username:key},
       {$set:{'value':res[key]}},
       {upsert: true}
)
  

 Alternatively, do it in python using sets. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40535785)
 Perform  groupby  w.r.t  id  column. Iterate over each group by converting the other two columns to a  list  and add the unique value corresponding to the  id  per group number alongside. Finally, convert them into a  tuple  and append these to a list. 

  grouped = df.groupby('id')
L = []
for _, grp in grouped:
    L.append(tuple(grouped.get_group(_)['id'].unique().tolist() + grp[['type','value']].values.ravel().tolist()))
print(L)
#[(1, 'A', 10, 'C', 120), (2, 'B', 20, 'C', 40), (3, 'A', 10, 'B', 50)]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/3499576)
 Well yes arrays do exist, and no they're not different to lists when it comes to things like  del  and  append : 

  >>> from array import array
>>> foo = array('i', range(5))
>>> foo
array('i', [0, 1, 2, 3, 4])
>>> del foo[:]
>>> foo
array('i')
>>> foo.append(42)
>>> foo
array('i', [42])
>>>
  

 Differences worth noting: you need to specify the type when creating the array, and you save storage at the expense of extra time converting between the C type and the Python type when you do  arr[i] = expression  or  arr.append(expression) , and  lvalue = arr[i]  



