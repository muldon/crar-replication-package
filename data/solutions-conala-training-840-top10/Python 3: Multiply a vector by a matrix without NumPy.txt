Query: Python 3: Multiply a vector by a matrix without NumPy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45203136)
 I think the problem with your code was that you loop through the rows of the matrix rather than by the columns. Also you don't reset your 'total' variable after each vector*matrix column calculation. This is what you want: 

  def multiply(v, G):
    result = []
    for i in range(len(G[0])): #this loops through columns of the matrix
        total = 0
        for j in range(len(v)): #this loops through vector coordinates & rows of matrix
            total += v[j] * G[j][i]
        result.append(total)
    return result
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49297341)
 Use  matrix-multiplication  - 

  df = pd.DataFrame(b.T.dot(a)) # or pd.DataFrame(a.T.dot(b).T)
  

 With  np.einsum  - 

  df = pd.DataFrame(np.einsum('ij,il->lj',a,b))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28253152)
 The Numpythonic approach: (using  numpy.dot  in order to get the dot product of two matrices) 

  In [1]: import numpy as np

In [3]: np.dot([1,0,0,1,0,0], [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]])
Out[3]: array([1, 1])
  

 The Pythonic approach: 

 The length of your second  for  loop is  len(v)  and you attempt to indexing  v  based on that so you got index Error . As a more pythonic way you can use  zip  function to get the columns of a list then use  starmap  and  mul  within a list comprehension: 

  In [13]: first,second=[1,0,0,1,0,0], [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]

In [14]: from itertools import starmap

In [15]: from operator import mul

In [16]: [sum(starmap(mul, zip(first, col))) for col in zip(*second)]
Out[16]: [1, 1]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28253144)
  r  is an element from  G  so it's a row which only has two elements. That means you can't use index  j  to get a value from  r  because  j  goes from 0 till the length of  v , which is 6 in your example. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36152643)
 Directly multiplying the ndarray by your vector will work. Numpy conveniently assumes that you want to multiply the nth column of x by the nth element of your y. 

  x = np.random.random((5, 5)
y = np.random.random(5)

diagonal_y = np.diag(y)
z = np.dot(x, diagonal_y)
np.allclose(z, x * y)  # Will return True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45159105)
 I needed solution where the first matrix could be 2-dimensional. Extending the solution from @Kasramvd to accept a two dimensional  first  matrix. Posted here for reference: 

  >>> first,second=[[1,0,0,1,0,0],[0,1,1,1,0,0]], [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]
>>> from itertools import starmap
>>> from operator import mul
>>> [[sum(starmap(mul, zip(row, col))) for col in zip(*second)] for row in first]
[[1, 1], [3, 1]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21923274)
 use  numpy.dot , which is not quite same as  *  operator: 

  In [138]: T.dot(v) #the resulting shape is (1, 3), not (3, 1) if you don't care
Out[138]: matrix([[ 14708.6,  51480. ,  66188.8]])

In [139]: v.dot(T) #same with v * T
Out[139]: matrix([[ 14708.6,  22062.8,  36771.6]])

In [140]: T.dot(v[:, None]) #if you need the shape to be (3, 1) when doing T*v
Out[140]: 
matrix([[ 14708.6],
        [ 51480. ],
        [ 66188.8]])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54659647)
 You can use np.diag: 

  In [11]: np.diag(w.T.dot(cov.dot(w)))
Out[11]: array([0.50736352, 0.32627761, 0.45469128, 0.52260723, 0.35602578])

In [12]: r
Out[12]:
[0.5073635209626383, 0.32627761097042857, 0.45469128089985883,
 0.5226072271864487, 0.3560257793239626]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50157441)
 You can create B as a numpy array and then use the method  dot  

  B=np.array([10,11,12])
print(A.dot(B)) #Use A.dot(B).T if you need to keep the original dimension
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/50157439)
 You can just transpose the matrix: 

  In [1]: import numpy as np

In [2]: A = np.matrix(
   ...:     [[1, 2, 3],
   ...:      [4, 5, 6],
   ...:      [7, 8, 9]])
   ...:

In [3]: B = np.matrix([10, 11, 12]).T

In [4]: print(A * B)
[[ 68]
 [167]
 [266]]
  



