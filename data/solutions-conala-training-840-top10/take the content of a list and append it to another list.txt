Query: take the content of a list and append it to another list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8177090)
  

  list2.extend(list1)
  

  

  list2.append(list1)
  

 Here's the difference: 

  >>> a = range(5)
>>> b = range(3)
>>> c = range(2)
>>> b.append(a)
>>> b
[0, 1, 2, [0, 1, 2, 3, 4]]
>>> c.extend(a)
>>> c
[0, 1, 0, 1, 2, 3, 4]
  

 Since  list.extend()  accepts an arbitrary iterable, you can also replace 

  for line in mylog:
    list1.append(line)
  

  

  list1.extend(mylog)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3274116)
 You can convert a tuple to a list easily: 

  >>> t = ('AAA', 1.11)
>>> list(t)
['AAAA', 1.11]
  

 And then you can concatenate lists with  extend : 

  >>> t = ('AAA', 1.11)
>>> result = ['something']
>>> result.extend(list(t))
['something', 'AAA', 1.11])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8177126)
 That seems fairly reasonable for what you're trying to do. 

 A slightly shorter version which leans on Python to do more of the heavy lifting might be: 

  for logs in mydir:

    for line in mylog:
        #...if the conditions are met
        list1.append(line)

    if any(True for line in list1 if "string" in line):
        list2.extend(list1)
    del list1

    ....
  

 The  (True for line in list1 if "string" in line)  iterates over  list  and emits  True  whenever a match is found.  any()  uses short-circuit evaluation to return  True  as soon as the first  True  element is found.  list2.extend()  appends the contents of  list1  to the end. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9055114)
  list1 =['a','b','c','d']
d = {'a':24, 'b':53 ,'c':26, 'd':9}
new_list = map(lambda x: d[x], list1)
  

 or if you really need to append instead of replacing: 

  new_list.extend(map(lambda x: d[x], list1))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9055098)
  

  for key in list1:
    new_list.append(dict[key])

print list1
  

 Example output: 

  [24, 53, 26, 9]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5520351)
 Here's another easy way to do it. 

  charlist = ['a', 'b', 'c']
numlist = [3, 2, 1]
newlist = []

for key, a in enumerate(charlist):
    newlist.append([a,numlist[key]])
  

 Content of newlist:  [['a', 3], ['b', 2], ['c', 1]]  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53569964)
 You can play with some slicing through lists to gather elements from original list based on content in another list, sum it up and append to final list: 

  total = []
vp = [10,20,30,40,50,60]
color = [3,2,1]

i = 0
for x in color:
    total.append(sum(vp[i:i+x]))
    i += x

print(total)
# [60, 90, 60]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8177108)
 Take a look at  http://docs.python.org/library/itertools.html#itertools.chain  for a fast way to treat many small lists as a single big list (or at least as a single big iterable) without copying the smaller lists: 

  >>> import itertools
>>> p = ['a', 'b', 'c']
>>> q = ['d', 'e', 'f']
>>> r = ['g', 'h', 'i']
>>> for x in itertools.chain(p, q, r):
        print x.upper()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3277235)
 All you need is http://docs.python.org/library/functions.html#zip: 

  l = (('AA', 1.11), ('BB', 2.22), ('CC', 3.33))
ls = [('XX', 7.77), ('YY', 8.88), ('ZZ', 9.99)]

for x,y in zip(l,ls):
    print(list(x+y))

# ['AA', 1.1100000000000001, 'XX', 7.7699999999999996]
# ['BB', 2.2200000000000002, 'YY', 8.8800000000000008]
# ['CC', 3.3300000000000001, 'ZZ', 9.9900000000000002]
  



