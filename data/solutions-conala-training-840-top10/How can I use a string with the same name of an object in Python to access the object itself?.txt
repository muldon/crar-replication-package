Query: How can I use a string with the same name of an object in Python to access the object itself?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43908968)
 Use https://docs.python.org/2/library/functions.html#__import__ function to import module by giving module name as string. 

 Use https://docs.python.org/2/library/functions.html#getattr to access names from an object (module/class or http://www.diveintopython.net/getting_to_know_python/everything_is_an_object.html) 

 Here u can do 

  module = __import__(module_name)
cls = getattr(module, claas_name)
method = getattr(cls, method_name)
output = method()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27026835)
 You can access any name in a module by using the https://docs.python.org/2/library/functions.html#getattr; use that to retrieve a reference to the desired class object: 

  klass = getattr(module, classname)
instance = klass(*args, **kw)
  

 where  module  is a module object,  classname  a string with the name of the class,  args  a sequence of positional arguments and  kw  a mapping with keyword arguments. 

 To also take the module name from a string, use https://docs.python.org/2/library/importlib.html#importlib.import_module to dynamically import: 

  import importlib

module = importlib.import_module(modulename)
  

 You could even accept a dotted-path identifier to the final class, just split that into module name and class with: 

  modulename, _, classname = identifier.rpartition('.')
  

  

  >>> import importlib
>>> identifier = 'collections.defaultdict'
>>> modulename, _, classname = identifier.rpartition('.')
>>> modulename, classname
('collections', 'defaultdict')
>>> args = (int,)
>>> kw = {}
>>> module = importlib.import_module(modulename)
>>> klass = getattr(module, classname)
>>> klass
<type 'collections.defaultdict'>
>>> instance = klass(*args, **kw)
>>> instance
defaultdict(<type 'int'>, {})
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15177097)
 Your  MyClass()  instances do have a dictionary associated with them, access it with the http://docs.python.org/2/library/functions.html#vars: 

  '%(a)s' % vars(m)
  

 This works for all custom classes that do not use a  __slots__  attribute. 

 Alternatively, you can use the newer http://docs.python.org/2/library/stdtypes.html#str.format, which lets you access object attributes: 

  '{0.a}'.format(m)
  

 It's this method of formatting that looks for a  .__format__(format_spec)  method on your custom classes, see the http://docs.python.org/2/library/functions.html#format. 

 Last but not least, any object with a http://docs.python.org/2/reference/datamodel.html#object.__getitem__ can be used for string formatting as if it is a dictionary: 

  >>> class Foo(object):
...     def __getitem__(self, name):
...         if name == 'bar': return 'baz'
...         raise AttributeError(name)
... 
>>> '%(bar)s' % Foo()
'baz'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17960040)
 http://ideone.com/XXlIzj 

  import sys

def str2Class(str):
    return getattr(sys.modules[__name__], str)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39275857)
 You are looking for the function  hasattr()  and  getattr() . 

 To check whether the attribute exists: 

  hasattr(Person(), 'string')
  

  

  getattr(Person(), 'string')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50276865)
 In python, str() is the string constructor. It is used to cast an object to a string. 

 You can use it locally, but it will override the access to the function. You will not be able to use str() anymore. 

 for reference:
https://docs.python.org/2/library/functions.html#str 

 
   class str(object='') 
  
   Return a string containing a nicely printable representation of an
  object. For strings, this returns the string itself. The difference
  with repr(object) is that str(object) does not always attempt to
  return a string that is acceptable to eval(); its goal is to return a
  printable string. If no argument is given, returns the empty string,
  ''. 
 

 For general knowledge purpose, you can get back you constructor if you delete your variable. For example: 

  test = 1
str(test)
>>>'1'

str = 2
str(test)
>>>TypeError: 'int' object is not callable

del str

str(test)
>>>'1'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52450074)
 Variables are available through dictionaries  locals()  and  globals() . If you want to access a particular variable by it's spring name, you can do e.g. 

  >>> my_var = 'hello'
>>> x = 'my_var'
>>> locals()[x]
'hello'
  

 You can also assign back to the variable using this approach, e.g. 

  >>> my_var = 'hello'
>>> x = 'my_var'
>>> locals()[x] = 'something else'
>>> my_var
'something else'
  

 Since functions are objects in Python, you can access any locally available functions in the same manner to call them. 

  >>> def my_test_function(n):
>>>     return n*8
  

 Accessing the method and calling it.   

  >>> locals()['my_test_function'](4)
32
  

 For accessing attributes of objects by their name you can use  getattr() , and  setattr()  to set them. For example, creating an object with a single property called  your_prop . 

  class Example:
    your_prop = 2

a = Example()
  

 The value is available via  your_prop . 

  >>> a.your_prop
2
  

 The property can be accessed via name using  getattr  

  >>> getattr(a, 'your_prop')
2
  

 The property can be set using  setattr : 

  >>> setattr(a, 'your_prop', 5)
>>> a.your_prop
5
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22425414)
 You can access the attributes from a http://www.jython.org/javadoc/org/python/core/PyObject.html directly by using the http://www.jython.org/javadoc/org/python/core/PyObject.html#__getattr__%28org.python.core.PyString%29 and http://www.jython.org/javadoc/org/python/core/PyObject.html#__setattr__%28org.python.core.PyString,%20org.python.core.PyObject%29 methods. 

 You can get an attribute with: 

  PyObject pyObject = ...;
// Get attribute: value = getattr(obj, name)
//            OR: value = obj.__getattr__(name)
PyString attrName = Py.newString("some_attribute");
PyObject attrValue = pyObject.__getattr__(attrName);
  

 
 WARNING: Make sure to use  __getattr__(PyString)  because http://www.jython.org/javadoc/org/python/core/PyObject.html#__getattr__%28java.lang.String%29 only works for interned strings. 
 

 You can also set an attribute with: 

  PyObject pyObject = ...;
// Set attribute: setattr(obj, name, value)
//            OR: obj.__setattr__(name, value)
PyString attrName = Py.newString("some_attribute");
PyObject attrValue = (PyObject)Py.newString("A string as the new value.");
pyObject.__setattr__(attrName, attrValue);
  

 
  NOTE: The value does not have to be a  PyString . It just has to be a  PyObject .  
  WARNING: Make sure to use  __setattr__(PyString, PyObject)  because http://www.jython.org/javadoc/org/python/core/PyObject.html#__setattr__%28java.lang.String,%20org.python.core.PyObject%29 only works for interned strings.  
 

 Also, you can call a python method using http://www.jython.org/javadoc/org/python/core/PyObject.html#__call__%28org.python.core.PyObject%5B%5D,%20java.lang.String%5B%5D%29: 

  PyObject pyObject = ...;

// Get method: method = getattr(obj, name)
//         OR: method = obj.__getattr__(name)
PyString methodName = Py.newString("some_method");
PyObject pyMethod = pyObject.__getattr__(methodName);

// Prepare arguments.
// NOTE: args contains positional arguments followed by keyword argument values.
PyObject[] args = new PyObject[] {arg1, arg2, ..., kwarg1, kwarg2, ...};
String[] keywords = new String[] {kwname1, kwname2, ...};

// Call method: result = method(arg1, arg2, ..., kwname1=kwarg1, kwname2=kwarg2, ...)
PyObject pyResult = pyMethod.__call__(args, keywords);
  

 
 NOTE: I cannot explain why the keyword names are  String  here when getting an attribute by name requires  PyString . 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9396741)
 Well, to do what you literally asked for, you  could  use  locals : 

  >>> locals()[x]
[1, 2, 3]
  

 However it is almost always a bad idea to do this. As Sven Marnach pointed out in the comments: http://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html. Using variables as data could also be a security risk. For example, if the name of the variable comes from the user they might be able to read or modify variables that you never intended them to have access to. They just need to guess the variable name. 

 It would be  much  better to use a dictionary instead. 

  >>> your_dict = {}
>>> your_dict['pasta'] = [1, 2, 3]
>>> x = 'pas' + 'ta'
>>> your_dict[x]
[1, 2, 3]
  



