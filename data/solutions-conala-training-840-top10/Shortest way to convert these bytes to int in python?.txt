Query: Shortest way to convert these bytes to int in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/561534)
 Base64 takes 4 bytes/characters to encode 3 bytes and can only encode multiples of 3 bytes (and adds padding otherwise). 

 So representing 4 bytes (your average int) in Base64 would take 8 bytes. Encoding the same 4 bytes in hex would also take 8 bytes. So you wouldn't gain anything for a single int. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9356262)
 The shortest way, I think, is the following: 

  import struct
val = 0x11223344
val = struct.unpack("<I", struct.pack(">I", val))[0]
print "%08x" % val
  

 This converts an integer to a byte-swapped integer. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44673244)
 from int to byte: 

  bytes_string = int_v.to_bytes( lenth, endian )
  

 where the lenth is 1/2/3/4...., and endian could be 'big' or 'little' 

 form bytes to int: 

  data_list = list( bytes );
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47968107)
  

  var = 'і' # var is ukrainian і
  

 .
Flow is this. value/which is string => bytes => int => binary 

  binary_var = '{:b}'.format(int.from_bytes(var.encode('utf-8'), byteorder='big'))
  

 Now binary_var is '1101000110010110'. It type is string. 

 Now go back, you want get unicode value from binary: 

  int_var = int(binary_var, 2) # here we get int value, int_var = 53654
  

 Now we need convert integer to bytes. Ukrainian 'і' is not gonna fit into 1 byte but in 2. We convert to actual  bytes bytes_var = b'\xd1\x96' 

  bytes_var = int_var.to_bytes(2, byteorder='big') 
  

 Finally we decode our bytes. 

  ukr_i = bytes_var.decode('utf-8') # urk_i = 'і'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31126598)
 Use the complementary https://docs.python.org/3/library/stdtypes.html#int.from_bytes and specify the byteorder again. 

  >>> n = 257
>>> n_bytes = n.to_bytes(2, "little")
>>> n_again = int.from_bytes(n_bytes, "little")
>>> n_again == n
True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4433154)
 Just unpack as a long long (64-bit integer): 

  struct.unpack('>Q', str)
  

  Q  = unsigned long long. Switch to  q  if the string represents a signed long long. 

 The  >  indicates big-endian byte order. Use  <  to indicate little-endian byte order. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9780944)
  http://docs.python.org/3.2/library/stdtypes.html#int.to_bytes (length, byteorder[, signed]) is all you need starting from 3.2. In this case,  someidentifier .to_bytes(4,'big') should give you the bytes string you need. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6602286)
 I maintain a little library named zbase62: http://pypi.python.org/pypi/zbase62 

 With it you can convert from a Python 2 str object to a base-62 encoded string and vice versa: 

  Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import os
>>> d = os.urandom(32)
>>> d
'C$\x8f\xf9\x92NV\x97\x13H\xc7F\x0c\x0f\x8d9}\xf5.u\xeeOr\xc2V\x92f\x1b=:\xc3\xbc'
>>> from zbase62 import zbase62
>>> encoded = zbase62.b2a(d)
>>> encoded
'Fv8kTvGhIrJvqQ2oTojUGlaVIxFE1b6BCLpH8JfYNRs'
>>> zbase62.a2b(encoded)
'C$\x8f\xf9\x92NV\x97\x13H\xc7F\x0c\x0f\x8d9}\xf5.u\xeeOr\xc2V\x92f\x1b=:\xc3\xbc'
  

 However, you still need to convert from integer to str. This comes built-in to Python 3: 

  Python 3.2 (r32:88445, Mar 25 2011, 19:56:22)
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import os
>>> d = os.urandom(32)
>>> d
b'\xe4\x0b\x94|\xb6o\x08\xe9oR\x1f\xaa\xa8\xe8qS3\x86\x82\t\x15\xf2"\x1dL%?\xda\xcc3\xe3\xba'
>>> int.from_bytes(d, 'big')
103147789615402524662804907510279354159900773934860106838120923694590497907642
>>> x= _ 
>>> x.to_bytes(32, 'big')
b'\xe4\x0b\x94|\xb6o\x08\xe9oR\x1f\xaa\xa8\xe8qS3\x86\x82\t\x15\xf2"\x1dL%?\xda\xcc3\xe3\xba'
  

 To convert from int to bytes and vice versa in Python 2, there is not a convenient, standard way as far as I know. I guess maybe I should copy some implementation, such as this one: https://github.com/warner/foolscap/blob/46e3a041167950fa93e48f65dcf106a576ed110e/foolscap/banana.py#L41 into zbase62 for your convenience. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13380758)
 You can use  bytes("iterable")  directly. Where every value in  iterable  will be specific  byte  in  bytes() . Example for little endian encoding: 

  >>> var=0x12345678
>>> var_tuple=((var)&0xff, (var>>8)&0xff, (var>>16)&0xff, (var>>24)&0xff)
>>> bytes(var_tuple)
b'xV4\x12'
  



