Query: inverse of zip
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50799018)
 Since it returns tuples (and can use tons of memory), the  zip(*zipped)  trick seems more clever than useful, to me. 

 Here's a function that will actually give you the inverse of zip. 

  def unzip(zipped):
    """Inverse of built-in zip function.
    Args:
        zipped: a list of tuples

    Returns:
        a tuple of lists

    Example:
        a = [1, 2, 3]
        b = [4, 5, 6]
        zipped = list(zip(a, b))

        assert zipped == [(1, 4), (2, 5), (3, 6)]

        unzipped = unzip(zipped)

        assert unzipped == ([1, 2, 3], [4, 5, 6])

    """

    unzipped = ()
    if len(zipped) == 0:
        return unzipped

    dim = len(zipped[0])

    for i in range(dim):
        unzipped = unzipped + ([tup[i] for tup in zipped], )

    return unzipped
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13635074)
  lst1, lst2 = zip(*zipped_list)
  

 should give you the unzipped list. 

  *zipped_list  unpacks the zipped_list object. it then passes all the tuples from the zipped_list object to zip, which just packs them back up as they were when you passed them in. 

  

  a = [1,2,3]
b = [4,5,6]
  

 then  zipped_list = zip(a,b)  gives you: 

  [(1,4), (2,5), (3,6)]
  

 and  *zipped_list  gives you back 

  (1,4), (2,5), (3,6)
  

 zipping that with  zip(*zipped_list)  gives you back the two collections: 

  [(1, 2, 3), (4, 5, 6)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22115957)
 I like to use  zip(*iterable)  (which is the piece of code you're looking for) in my programs as so: 

  def unzip(iterable):
    return zip(*iterable)
  

 I find  unzip  more readable. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4578299)
 If you have lists that are not the same length, you may not want to use zip as per Patricks answer. This works: 

  >>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
  

 But with different length lists, zip truncates each item to the length of the shortest list: 

  >>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])
[('a', 'b', 'c', 'd', 'e')]
  

 You can use map with no function to fill empty results with None: 

  >>> map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])
[('a', 'b', 'c', 'd', 'e'), (1, 2, 3, 4, None)]
  

 zip() is marginally faster though. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19343)
 http://docs.python.org/library/functions.html#zip is its own inverse! Provided you use the special * operator. 

  >>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
  

 The way this works is by calling  zip  with the arguments: 

  zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))
  

 â€¦ except the arguments are passed to  zip  directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35813331)
  >>> original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
>>> tuple([list(tup) for tup in zip(*original)])
(['a', 'b', 'c', 'd'], [1, 2, 3, 4])
  

 Gives a tuple of lists as in the question. 

  list1, list2 = [list(tup) for tup in zip(*original)]
  

 Unpacks the two lists. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35361396)
 Try *args and tuple packing/unpacking 

  points = zip(X, Y)
out = []
for p in points:
    value = f_interp(*p)
    out.append(float(value))
  

  

  points = zip(X, Y)
out = [float(f_interp(*p)) for p in points]
  

  

  out = [float(f_interp(*p)) for p in zip(X, Y)]
  

 as a side note, the "magic star" allows zip to be its own inverse! 

  points = zip(x, y)
x, y   = zip(*points)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53622853)
 You don't have to iteratively build a DataFrame - just pass it in at once. Either, pass a list-of-lists and transpose: 

  pd.DataFrame(list(my_list)).T

          0         1         2
0  0.000035  0.000046  0.000071
1  0.000164  0.000680  0.000164
2  0.000419  0.000322  0.000215
3  0.000440  0.000156  0.000440
4  0.000311  0.000311  0.000311
  

 Or, inverse- zip , without the transposition. 

  pd.DataFrame(list(zip(*my_list)))

          0         1         2
0  0.000035  0.000046  0.000071
1  0.000164  0.000680  0.000164
2  0.000419  0.000322  0.000215
3  0.000440  0.000156  0.000440
4  0.000311  0.000311  0.000311
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29156251)
 In your first example,  dict(zip(l1,l2))  will give you the dict  {'Director':u'Title','peter jackson':u'Lord of the Rings: The Two Towers'} . 

 In your second example,  dict(zip(l1,l2))  will give you what you probably want:  {'Director':u'peter jackson','Title':u'Lord of the Rings: The Two Towers'}  

 Assuming you wanted the second one from both, you can just call  dict()  on the two lists from the first example: 

  dict([l1,l2])
  

 You already know how to get that dict from the first example. 

 If you didn't make a mistake in your question, you can just  zip()  the two lists in your second example to get the two from your first example, then call  dict()  on those: 

  dict(zip(l1,l2))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35012020)
 It's only another way to do it but it helped me a lot so I write it here: 

 Having this data structure: 

  X=[1,2,3,4]
Y=['a','b','c','d']
XY=zip(X,Y)
  

  

  In: XY
Out: [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]
  

 The more pythonic way to unzip it and go back to the original is this one in my opinion: 

  x,y=zip(*XY)
  

 But this return a tuple so if you need a list you can use: 

  x,y=(list(x),list(y))
  



