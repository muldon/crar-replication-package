Query: Sort numpy matrix row values in ascending order
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10078608)
  

  >>> arr
array([[  3.05706500e+06,   4.98000000e+01,  -2.62500070e+01,
         -9.38135544e+01],
       [  3.05706600e+06,   4.98000000e+01,  -3.00000056e+01,
         -9.38135544e+01],
       [  3.05706700e+06,   4.98000000e+01,  -3.37500042e+01,
         -9.38135544e+01],
       [  3.05706800e+06,   4.98000000e+01,  -3.75000028e+01,
         -9.38135544e+01]])
  

 you can simply use numpy.sort with axis=0 to sort it as desired 

  >>> numpy.sort(arr,axis=0)
array([[  3.05706500e+06,   4.98000000e+01,  -3.75000028e+01,
         -9.38135544e+01],
       [  3.05706600e+06,   4.98000000e+01,  -3.37500042e+01,
         -9.38135544e+01],
       [  3.05706700e+06,   4.98000000e+01,  -3.00000056e+01,
         -9.38135544e+01],
       [  3.05706800e+06,   4.98000000e+01,  -2.62500070e+01,
         -9.38135544e+01]])
>>> 
  

 

 I believe my previous answer was wrong as I misunderstood the question. Here is the correct answer 

  >>> arr[arr[:,2].argsort()]
array([[  3.05706800e+06,   4.98000000e+01,  -3.75000028e+01,
         -9.38135544e+01],
       [  3.05706700e+06,   4.98000000e+01,  -3.37500042e+01,
         -9.38135544e+01],
       [  3.05706600e+06,   4.98000000e+01,  -3.00000056e+01,
         -9.38135544e+01],
       [  3.05706500e+06,   4.98000000e+01,  -2.62500070e+01,
         -9.38135544e+01]])
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36266307)
 Just multiply your matrix by -1 to reverse order: 

  [In]: A = np.array([[1, 3, 2, 7],
                    [2, 4, 1, 3],
                    [6, 1, 2, 3]])
[In]: print( np.argsort(-A) )
[Out]: [[3 1 2 0]
        [1 3 0 2]
        [0 3 2 1]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38821758)
 If you're willing to use pandas, you can pass a list into the  ascending  keyword to control the sort order of each field: 

  >>> pd.DataFrame(a).sort_values([0,1], ascending=[False, True])

   0  1   2
0  3  6   7
2  2  5  10
1  1  9   4
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/30541527)
 If you're working with NumPy, this would be 

  B = A[np.argsort(A.sum(axis=1))]
  

 where the  sum  call computes the sum of each row,  argsort  computes the indices of the smallest, second-smallest, etc. sums, and  A[...]  selects the rows at those indices. This is assuming A is a NumPy array, rather than a list of lists. 

 To do the same with columns, it would be 

  B = A[:, np.argsort(A.sum(axis=0))]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38684337)
  import numpy as np
import pandas as pd
df = pd.DataFrame({'V1': [471.18954309999998, 404.05969449999998, -59.847098750000001, 415.21412069999997, -571.67208340000002], 'V2': [404.05969449999998, 4768.2518380000001, 3740.3315439999997, 557.05004150000002, 1750.5427280000001], 'V3': [-59.847098750000001, 3740.3315439999997, 6563.7135269999999, -782.22934510000005, 3378.1087990000001], 'V4': [415.21412069999997, 557.05004150000002, -782.22934510000005, 1949.91443, -582.30641220000007], 'V5': [-571.67208340000002, 1750.5427280000001, 3378.1087990000001, -582.30641220000007, 3355.8193149999997]}, index=['V1', 'V2', 'V3', 'V4', 'V5'])

result = df.stack()
result.name = 'cov'
result = result.reset_index()
result = result.loc[result['level_0'] < result['level_1']]
result = result.sort_values(by='cov')
print(result)
  

  

     level_0 level_1          cov
13      V3      V4  -782.229345
19      V4      V5  -582.306412
4       V1      V5  -571.672083
2       V1      V3   -59.847099
1       V1      V2   404.059694
3       V1      V4   415.214121
8       V2      V4   557.050042
9       V2      V5  1750.542728
14      V3      V5  3378.108799
7       V2      V3  3740.331544
  

 The rows are sorted by covariance in ascending order. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38463884)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.reindex.html 

  c_series = c.unstack().drop([(x, x) for x in c]).sort_values(ascending=False)
z_series = z.unstack().reindex(c_series.index)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48099837)
 Getting upper tri by using  numpy , then we do  stack  and  sort_values  

  a=np.triu(df.values,-1)
a[np.tril_indices(a.shape[0], 0)] = np.nan
a
Out[414]: 
array([[  nan,  0.5 ,  0.75],
       [  nan,   nan,  0.1 ],
       [  nan,   nan,   nan]])
df1=pd.DataFrame(data=a,index=df.index,columns=df.columns)

df1.stack().sort_values(ascending=False).reset_index()
Out[421]: 
  level_0 level_1     0
0       A       C  0.75
1       A       B  0.50
2       B       C  0.10
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21923097)
 Starting from a numpy array, like this: 

  matrix = numpy.array( [ [ 1, 0.639, 0.07 ],
                        [ 0, 1,     0.51 ],
                        [ 0, 0,     1 ]  ] )
  

  

  indices = ["A", "B", "C", ]                     

values = []

for r,row in enumerate( matrix ):
    for c, cell in enumerate( row ):
        values.append( ("{} & {}".format( indices[r], indices[c] ), cell ) )

values.sort( key=lambda it: (-it[1], it[0]) )

for k,v in values:
    print "{}: {}".format(k,v)
  

 OUTPUT: 

  A & A: 1.0
B & B: 1.0
C & C: 1.0
A & B: 0.639
B & C: 0.51
A & C: 0.07
B & A: 0.0
C & A: 0.0
C & B: 0.0
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54469003)
 You can do this with https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.argsort.html and some numpy slicing. Using your example array: 

  arr = np.array([[0, 1, 0, 0, 0],
                [1, 0, 0, 0, 0],
                [0, 0, 0, 1, 0],
                [0, 0, 0, 0, 1],
                [1, 0, 3, 4, 4]])
arr[:, np.argsort(arr[-1, :])]
# array([[1, 0, 0, 0, 0],
#        [0, 1, 0, 0, 0],
#        [0, 0, 0, 1, 0],
#        [0, 0, 0, 0, 1],
#        [0, 1, 3, 4, 4]])
  

 Basically the  np.argsort(arr[-1, :])  returns the  indices  of the last row of  arr  in order of the ascending value of the  content  of that last row. This returns  array([1, 0, 2, 3, 4])  for the example you gave. 

 Then we just grab all rows with the columns in that order with  arr[:, np.argsort(arr[-1, :])] . 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53417155)
 https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.sort.html + https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html</h3>

 You can use  np.sort  along  axis=1 , then  sort_index : 

  cols, idx = df.columns[1:], df.iloc[:, 0]

res = pd.DataFrame(np.sort(df.iloc[:, 1:].values, axis=1), columns=cols, index=idx)\
        .sort_index()

print(res)

           1    2    3    4    5     6     7     8     9    10    11    12  \
Category                                                                     
A          2   50   53   81  133   141   153   161   169   197   297   377   
B          4   65   66   68   70    71    79    92    93   106   111   121   
C          2   82   98  116  139   148   150   159   175   195   308   379   
D          0   24   24   25   26    36    36    38    40    55    56    84   
E          7  132  175  256  299   342   342   378   465   478   695  1002   
F          4  142  148  151  168   194   198   206   224   246   283   297   
G         50  628  739  826  856   955   975  1277  1342  1447  1656  2119   
H          0    0    2    2    2     3     3     3     4     5     5     7   
K          1   14   18   19   20    22    26    27    35    42    47    51   
O          3   98  106  130  155   183   195   204   207   260   287   304   
P          5  140  201  212  230   270   280   300   313   325   448   497   
PP         1    9   15   17   17    18    26    27    28    32    35    43   
Qs         0    5    6   11   13    14    14    17    18    19    26    33   
R          1   55   63   68   68    89    90    96   104   109   154   157   
S          6   57   81   82   86    98   105   121   125   131   196   254   
S          5   90  112  114  136   147   157   172   201   204   209   267   
St         5  136  172  232  234   270   290   294   367   405   443   464   
T          0    4    4    5    7     9    12    20    20    23    36    54   
W          0    4   14   18   27    27    28    34    51    62    64   123   
Y         14  455  619  625  626   845   891   981  1079  1102  1177  1273   
Z          1   17  755  861  900  1082  1137  1375  1383  1465  1579  1630   
  



