Query: Checking if any elements in one list are in another
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16138120)
 There are different ways. If you just want to check if one list contains any element from the other list, you can do this..  

  not set(list1).isdisjoint(list2)
  

 I believe using  isdisjoint  is better than  intersection  for Python 2.6 and above. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16138383)
 Your original approach can work with a list comprehension: 

  def listCompare():
  list1 = [1, 2, 3, 4, 5]
  list2 = [5, 6, 7, 8, 9]
  if [item for item in list1 if item in list2]:
    print("Number was found")
  else:
    print("Number not in list")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16138094)
 You could solve this many ways. One that is pretty simple to understand is to just use a loop. 

  def comp(list1, list2):
    for val in list1:
        if val in list2:
            return True
    return False
  

 A more compact way you can do it is to use https://docs.python.org/2/library/functions.html#map and https://docs.python.org/2/library/functions.html#reduce: 

  reduce(lambda v1,v2: v1 or v2, map(lambda v: v in list2, list1))
  

 Even better, the  reduce  can be replaced with https://docs.python.org/2/library/functions.html#any: 

  any(map(lambda v: v in list2, list1))
  

 You could also use sets: 

  len(set(list1).intersection(list2)) > 0
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41981089)
 I wrote the following code in one of my projects. It basically compares each individual element of the list. Feel free to use it, if it works for your requirement. 

  def reachedGoal(a,b):
    if(len(a)!=len(b)):
        raise ValueError("Wrong lists provided")

    for val1 in range(0,len(a)):
        temp1=a[val1]
        temp2=b[val1]
        for val2 in range(0,len(b)):
            if(temp1[val2]!=temp2[val2]):
                return False
    return True
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26854703)
 You can do it this way, You are missing some parenthesis, another thing is, you said  at least  one digit, the length should be  <1 . You don't need also to convert to a list, you can iterate  strings  

  def checkio(password):    
    if len(password) < 1 or len(password) > 64:
        return False
    if (any(x.isdigit() for x in password)) and (any(l.isupper for l in password)) and (any(l.islower for l in password)):
        return True
    else:
        return False

print checkio("StackO3f") #True

print checkio("S") #False

print checkio("sssss") #False
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35798442)
  import os, time

filelist = ['file1','file2','file3']

while True:
    list1 = []

    for file in filelist:
        list1.append(os.path.isfile(file))

    if all(list1):
        # All elements are True. Therefore all the files exist. Run %run commands
        break
    else:
        # At least one element is False. Therefore not all the files exist. Run FTP commands again
        time.sleep(600) # wait 10 minutes before checking again
  

 all() checks if all the elements in the list are  True . If at least one element is  False  it returns  False . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18211963)
 You are looking for the  any()  function here: 

  matching = [i for i, x in enumerate(my_list) if any(thing in x for thing in things_to_find)]
  

  

  >>> my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
>>> things_to_find = ['abc', 'def']
>>> [i for i, x in enumerate(my_list) if any(thing in x for thing in things_to_find)]
[0, 1, 3]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34118757)
 If you want to check if list contains 3 items of one element, and 4 items of another, you can omit sorting by using  collections.Counter : 

  content = Counter(['1', '2', '2', '1', '1', '2', '1']).most_common()
print(content) # => [('1', 4), ('2', 3)]

if len(content) == 2 and content[0][1] == 4 and content[1][1] == 3 or
   len(content) == 1 and content[0][1] == 7:
    pass # Your list have desired structure
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18211923)
  

  my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
things_to_find = ['abc', 'def']
for n, e in enumerate(my_list)
    for m in things_to_find
        if m in e
            print '%s is in %s at %s' % (m, e, n)
  

 Output 

  abc is in abc-123 at 0
def is in def-456 at 1
abc is in abc-456 at 3
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18211962)
 Might be a little slow, but why not try: 

  my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
things_to_find = ['abc', 'def']
for thing_to_find in things_to_find:
    matching = [i for i, x in enumerate(my_list) if thing_to_find in x]
  



