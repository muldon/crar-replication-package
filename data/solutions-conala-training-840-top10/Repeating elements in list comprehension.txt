Query: Repeating elements in list comprehension
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10038436)
 My solution: 

  def explode_list(p,n):
    arr=[]
    track=0

    if n==0:
        return arr    
    while track<len(p): 
        m=1
        while m<=n:
            arr.append(p[track])
            m=m+1
        track=track+1

    return arr
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37595586)
 Use the https://docs.python.org/3/library/functions.html#zip with https://docs.python.org/3/library/itertools.html#itertools.repeat and https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable: 

  try:
    # use iterator zip on Python 2 too
    from future_builtins import zip
except ImportError:
    pass
from itertools import repeat, chain

list(chain.from_iterable(repeat(value, count) for value, count in zip(a, b)))
  

 (I added a https://docs.python.org/2/library/future_builtins.html#future_builtins.zip for those that can't switch to Python 3 yet). 

  

  >>> from itertools import repeat, chain
>>> a = [0, 5, 1]
>>> b = [1, 2, 1]
>>> list(chain.from_iterable(repeat(value, count) for value, count in zip(a, b)))
[0, 5, 5, 1]
  

 An alternative approach would be to use a list comprehension; this is slower as repeating elements is done in bytecode instead of C: 

  [value for value, count in zip(a, b) for _ in range(count)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24225106)
 You can use list comprehension: 

  [item for item in x for i in range(n)]
  

 This runs as: 

  >>> x=[1,2,3,4]
>>> n=3
>>> new = [item for item in x for i in range(n)]
>>> new
[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
>>> 
  

 

 This is the same as a more verbose nested  for  loop: 

  new = []
for item in x:
    for i in range(n):
        new.append(i)
  

 Or, using /questions/tagged/pandas, as you requested in your tags: 

  pandas.Index.repeat(np.array([1, 2, 3, 4]), 3)
  

 

  >>> import pandas, numpy as np
>>> x = [1, 2, 3, 4]
>>> n = 3
>>> new = pandas.Index.repeat(np.array([1, 2, 3, 4]), 3)
>>> new
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34082877)
 If you are looking to get common elements between the two lists, you can do it using sets : 

  >>> set(list1).intersection(list2)
set([1, 2, 3])
  

 But keep in mind that this will return to you only common elements (no repeating elements), Example: 

  >>> list1 = [1,2,3,7]
>>> list2 = [1,2,3,4,7,8,7,7,7]
>>> set(list1).intersection(list2)
set([1, 2, 3, 7])
  

 You can also do it with list comprehension if that's what you want, this way: 

  >>>list1 = [1,2,3]
>>>list2 = [1,2,3,4]
>>>a = [x for x in list1 if x in list2]
>>> a
[1, 2, 3]
  

 Here the list comprehension will be exhausted by the length of  list1 , so if you had: 

  >>> list1 = [1,2,3,7]
>>> list2 = [1,2,3,4,7,8,7,7,7]
>>> a = [x for x in list1 if x in list2]
>>> a
[1, 2, 3, 7]
  

 You will not get the last elements  7,7,7  as the search was exhausted (limited) by the length of  list1 , but if you reverse it this way: 

  >>> a = [x for x in list2 if x in list1]
>>> a
[1, 2, 3, 7, 7, 7, 7]
  

 Here all elements(common and repeating) are caught. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54505864)
 If your list is sorted and has no repeating elements the difference of 2 can be found only in the groups of three sequential elements: 

  l = [1, 7, 12, 14, 22, 24, 29, 31, 39, 45, 77, 79, 85, 100]

l = sorted(set(l)) # if l is not sorted and has repeating elements

for a, b, c in zip(l, l[1:], l[2:]):
    if b - a == 2:
        print(a, b)
    elif c - a == 2:
        print(a, c)
# 12 14
# 22 24
# 29 31
# 77 79
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26661720)
 you can use https://docs.python.org/2/library/itertools.html#itertools.groupby in list comprehension : 

  >>> [[1.0]+list(g) for k,g in itertools.groupby(l,lambda x:x==1.0) if not k]
[[1.0, 2.0, 2.5], [1.0, 2.0, 2.5, 2.6666666666666665], [1.0, 2.0, 2.5, 2.6666666666666665, 2.708333333333333]]
  



