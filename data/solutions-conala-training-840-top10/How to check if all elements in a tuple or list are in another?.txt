Query: How to check if all elements in a tuple or list are in another?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34469004)
 You can use https://docs.python.org/3.5/library/stdtypes.html?highlight=issubset#set.issubset or https://docs.python.org/3.5/library/stdtypes.html?highlight=issubset#set.issuperset to check if every element in one tuple or list is in other. 

  >>> tuple1 = (1, 2)
>>> tuple2 = (1, 2, 3, 4, 5)
>>> set(tuple1).issubset(tuple2)
True
>>> set(tuple2).issuperset(tuple1)
True
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34469212)
 I think you want this: ( Use https://docs.python.org/2/library/functions.html#all ) 

  >>> all(i in (1,2,3,4,5) for i in (1,2))
True 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10521605)
 Since you're already using numpy arrays, you can use the http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html#numpy.in1d function: 

  >>> import numpy as np
>>> 
>>> input = np.array([0, 1, -1, 0, 1, 0, 0, 1])
>>> bits = np.array([0, 1, -1])
>>> 
>>> if np.in1d(input, bits).all():
...     print 'Valid input'
... 
Valid input
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47241363)
 An other linear solution with default dicts (tuple is there to make hashable keys) :  

  from collections import defaultdict
isin,contains = defaultdict(list),defaultdict(list)

for i,s in enumerate(l):
    for k in s : 
        isin[k].append(i)

# isin is  {1: [0, 4], 2: [0, 1, 2, 5], 3: [0, 1, 2, 5], 6: [1, 3, 5],
# 5: [1, 4], 4: [1, 2], 7: [1, 3, 5], 9: [2], 0: [4]}
# element 1 is in sets numbered 0 and 4, and so on.

for k,ss in isin.items(): 
    contains[tuple(ss)].append(k)

# contains is  {(0, 4): [1], (0, 1, 2, 5): [2, 3], (1, 3, 5): [6, 7],
# (1, 4): [5], (1, 2): [4], (2,): [9], (4,): [0]})
# sets 0 and 4  contains 1, and no other contain 1. 
  

 Now if you look for elements which appear by group of  n   ( n=2  here), type :  

  print ([p for p in contains.values() if len(p)==n])    
# [[2, 3], [6, 7]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10521685)
 Generally you would just use set this way, it could be faster than recalculating a new set using operator -: 

  input = set([0, 1, -1, 0, 1, 0, 0, 1])
bits = set([0, 1, -1])

input.issubset(bits)
  

 EDIT: 

 issubset is a method written for exactly this problem (see source at http://hg.python.org/releasing/2.7.3/file/7bb96963d067/Objects/setobject.c).  

  def issubset(self, other):
    if len(self) > len(other):
        return False

    for i in self:
        if i not in other:
            return False

    return True
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41579728)
 You can simply use a  list comprehension  and check that the count of the first element in each matching tuple is not the same as the length of the tuple: 

  >>> r = [i for i in myList if i.count(i[0]) != len(i)]
>>> r
[('a', 'b', 'c'), ('d', 'e', 'f')]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10598654)
  >>> a = [(1,2,3),(4,5,6),(7,8,9)]
>>> b = [(1,'a'),(4,'b'),(7,'c')]
>>> 
>>> [x + (z,) for x, (y, z) in zip(a, b)]
[(1, 2, 3, 'a'), (4, 5, 6, 'b'), (7, 8, 9, 'c')]
  

 to check if first elements actually match, 

  >>> [x + y[1:] for x, y in zip(a, b) if x[0] == y[0]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35302442)
 Using the  in  keyword is a shorthand for calling an object's  __contains__  method. 

  >>> a = [1, 2, 3]
>>> 2 in a
True
>>> a.__contains__(2)
True
  

 Thus,  ("0","1","2") in [0, 1, 2]  asks whether the tuple  ("0", "1", "2")  is  contained  in the list  [0, 1, 2] . The answer to this question if  False . To be  True , you would have to have a list like this: 

  >>> a = [1, 2, 3, ("0","1","2")]
>>> ("0","1","2") in a
True
  

 Please also note that the elements of your tuple are strings. You probably want to check whether any or all of the elements in your tuple -  after converting these elements to integers  - are contained in your list.  

 To check whether all elements of the tuple (as integers) are contained in the list, use 

  >>> sltn = [1, 2, 3]
>>> t = ("0", "2", "3")
>>> set(map(int, t)).issubset(sltn)
False
  

 To check whether any element of the tuple (as integer) is contained in the list, you can use 

  >>> sltn_set = set(sltn)
>>> any(int(x) in sltn_set for x in t)
True
  

 and make use of the lazy evaluation  any  performs. 

 Of course, if your tuple contains strings for no particular reason, just use  (1, 2, 3)  and omit the conversion to int. 



