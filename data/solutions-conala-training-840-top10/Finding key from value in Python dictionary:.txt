Query: Finding key from value in Python dictionary:
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47656164)
 the first solution with the list comprehension is good.
but a small fix for python 3.x, instead of  .iteritems()  it should be just  .items() : 

  [k for k, v in d.items() if v == desired_value]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25487311)
 it would be faster to get both key and value from the dict, d[k] may be slower 

  for k, v in d.items():
    print("{:<6}{}".format(k, min(v)))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52844163)
 That code you referenced is simply looping through the key value pairs in the dictionary, computing the differences with your expected value and returning the minimum key value pair. 

 To just obtain the value, you can simply do this: 

  answer = min(dict.items(), key=lambda (_, value): abs(value - newValue))[1]
  

 
 note the indexing above as [1] 
 

 Are you sure you want it as an int type, it'll round down to the nearest integer 

 I would suggest just wrapping the statement above with a float() 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35329416)
  Update  

 The OP has expressed a need for O(1) performance when finding the minimum key in a dictionary. Try the http://www.grantjenks.com/docs/sortedcontainers/#sortedcontainers module. It offers a http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html#sorteddict class: 

  >>> from sortedcontainers import SortedDict
>>> d = SortedDict({100: 'a', 27: 'b', 1234: 'c'})
>>> d.keys()
SortedSet([27, 100, 1234], key=None, load=1000)
>>> d.keys()[0]
27
>>> d[d.keys()[0]]
'b'
  

 

 For a Python builtin dictionary you can use  min(d)  to find the lowest key: 

  >>> d = {100: 'a', 27: 'b', 1234: 'c'}
>>> print(d)
{1234: 'c', 27: 'b', 100: 'a'}
>>> print(min(d))
27
>>> print(d[min(d)])
b
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1661632)
 your code prints the  key  with the maximum value.   

  d = {5:3, 4:1, 12:2, 14:9}
val_of_max = d[max(d.keys())]
print val_of_max
  

 That is, you have to dereference the key to return the value. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6748353)
 You can use list comprehension. This code gives you the keys in a list: 

  >>> a
{1: 2, 3: 4, 9: 4, 5: 6, 7: 8}
>>> [key for key, value in a.items() if value == 4]
[3, 9]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23942247)
 Your question could be clearer, but if what you want is what I suggested in the comments, this will work: 

  def keyfunc(item):
    key, value = item
    if isinstance(key, str):
        return 1
    else:
        return len(key)

max(d.items(), key=keyfunc)[0]
  

 Here, we define a key function that takes a key/value 2-tuple as returned by https://docs.python.org/3/library/stdtypes.html#dict.items, and: 

 
 if the value is a string, returns 1. 
 otherwise, returns the length of the list of strings. 
 

 That key function is then used with the builtin https://docs.python.org/3/library/functions.html#max function to return the item with the largest number of strings, and finally we use  [0]  to get the key from that item.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7657479)
 Since your dictionary can contain duplicate values (i.e.  {'a': 'A', 'b': 'A'} ), the only way to find a key from value is to iterate over the dictionary as you describe. 

 Or... build the opposite dictionary. you have to recreate it after each modification of the original dictionary. 

 Or... write a class that maintains both-ways dictionary. You will have to manage situations where duplicate value appears. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1663799)
 Same code but remember to call the value of the key: 

  d = {5:3, 4:1, 12:2, 14:9}
val_of_max = max(d.keys())
print d[val_of_max]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12266692)
  O(n log k) : 

  import heapq

k_keys_sorted = heapq.nlargest(k, dictionary)
  

 You could use  key  keyword parameter to specify what should be used as a sorting key e.g.: 

  k_keys_sorted_by_values = heapq.nlargest(k, dictionary, key=dictionary.get)
  



