Query: Python - How to declare and add items to an array?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10487291)
  

  array = {}
  

 IN your example you are using  array  as a dictionary, not an array. If you need an array, in Python you use lists: 

  array = []
  

 Then, to add items you do: 

  array.append('a')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10487306)
 Arrays (called  list  in python) use the  []  notation.  {}  is for  dict  (also called hash tables, associated arrays, etc in other languages) so you won't have 'append' for a dict.  

 If you actually want an array (list), use: 

  array = []
array.append(valueToBeInserted)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51117606)
 In some languages like  JAVA  you define an array using curly braces as following but in python it has a different meaning: 

  Java:  

  int[] myIntArray = {1,2,3};
String[] myStringArray = {"a","b","c"};
  

 However, in Python, curly braces are used to define dictionaries, which needs a  key:value  assignment as  {'a':1, 'b':2}  

 To actually define an array (which is actually called list in python) you can do: 

  Python:  

  mylist = [1,2,3]
  

 or other examples like: 

  mylist = list()
mylist.append(1)
mylist.append(2)
mylist.append(3)
print(mylist)
>>> [1,2,3]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10487303)
  {}  represents an empty dictionary, not an array/list.  F lists  arrays, you need  [] . 

 To initialize an empty list do this: 

  my_list = []
  

  

  my_list = list()
  

 To add elements to the list, use  append  

  my_list.append(12)
  

 To  extend  the list to include the elements from another list use  extend  

  my_list.extend([1,2,3,4])
my_list
--> [12,1,2,3,4]
  

 To remove an element from a list use  remove  

  my_list.remove(2)
  

 Dictionaries represent a collection of key/value pairs also known as an associative array  a map.  

 To initialize an empty dictionary use  {}    dict()  

 Dictionaries have keys and values 

  my_dict = {'key':'value', 'another_key' : 0}
  

 To extend a dictionary with the contents of another dictionary you may use the  update  method 

  my_dict.update({'third_key' : 1})
  

 To remove a value from a dictionary 

  del my_dict['key']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52318103)
  

  array = []
array += [valueToBeInserted]
  

 If it's a list of strings, this will also work: 

  array += 'string'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39304828)
 Here's the working solution in python 3.2 to add items to list in function: 

  weeklyTasks = ['No work Sunday']
def AddWeeklyTask():
    weeklyTasks.extend(['Work On'])
    weeklyTasks.append('Do not work on weekends')
    weeklyTasks.insert(2,'Friday')

print(weeklyTasks)
AddWeeklyTask()
print(weeklyTasks)
  

 Output: 

  ['No work Sunday']
['No work Sunday', 'Work On', 'Friday', 'Do not work on weekends']
  

 There is no need to declare  list  as  global   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8183168)
 You do not "declare" arrays  anything else in python. You simply assign to a (new) variable. If you want a multidimensional array, simply add a new array as an array element. 

  arr = []
arr.append([])
arr[0].append('aa1')
arr[0].append('aa2')
  

  

  arr = []
arr.append(['aa1', 'aa2'])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2910944)
 In Python, a  list  is a dynamic array.  

  lst = [] # Declares an empty list named lst
  

 Or you can fill it with items: 

  lst = [1,2,3]
  

 You can add items using "append": 

  lst.append('a')
  

 You can iterate over elements of the list using the  for  loop: 

  for item in lst:
    # Do something with item
  

 Or, if you'd like to keep track of the current index: 

  for idx, item in enumerate(lst):
    # idx is the current idx, while item is lst[idx]
  

 To remove elements, you can use the del command or the remove function as in: 

  del lst[0] # Deletes the first item
lst.remove(x) # Removes the first occurence of x in the list
  

 Note, though, that one cannot iterate over the list and modify it at the same time; to do that, you should instead iterate over a slice of the list (which is basically a copy of the list).  

   for item in lst[:]: # Notice the [:] which makes a slice
       # Now we can modify lst, since we are iterating over a copy of it
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19963896)
 give this a shot 

  emp_names = []
num_to_enter = 10
while num_to_enter > 0:
    emp_names.append(raw_input("enter name"))
    num_to_enter -= 1

print emp_names[0]

#do what you need to do
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45529189)
 The problem is that you're re-setting the value of your array each time a year is divisible by 4. What you want to do is declare your array outside the loop. 

  from array import array

x=int(input("enter the year from which you want to know the leap year from"))
print("the year you entered is",x)

n=array('i')
while x<=2017:
    if (x % 4 == 0 and x % 100 != 0) or x % 400 == 0:
        print(x)   
        n.append(x)
    x += 1  # we need to add 1 regardless, no need for else  
print(n)
# output: array('i', [1992, 1996, 2000, 2004, 2008, 2012, 2016])
  



