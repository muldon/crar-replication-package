Query: print date in a regular format
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50998625)
  from datetime import date
def time-format():
  return str(date.today())
print (time-format())
  

 this will print 6-23-2018 if that's what you want :) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39891095)
  # convert date time to regular format.

d_date = datetime.datetime.now()
reg_format_date = d_date.strftime("%Y-%m-%d %I:%M:%S %p")
print(reg_format_date)

# some other date formats.
reg_format_date = d_date.strftime("%d %B %Y %I:%M:%S %p")
print(reg_format_date)
reg_format_date = d_date.strftime("%Y-%m-%d %H:%M:%S")
print(reg_format_date)
  

 
   OUTPUT 
 

  2016-10-06 01:21:34 PM
06 October 2016 01:21:34 PM
2016-10-06 13:21:34
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20066760)
 This is shorter: 

  >>> import time
>>> time.strftime("%Y-%m-%d %H:%M")
'2013-11-19 09:38'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/311636)
 You may want to append it as a string? 

  import datetime 
mylist = [] 
today = str(datetime.date.today())
mylist.append(today) 
print mylist
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20776958)
   

  from datetime import datetime, date

"{:%d.%m.%Y}".format(datetime.now())
  

 Out: '25.12.2013 

 or 

  "{} - {:%d.%m.%Y}".format("Today", datetime.now())
  

 Out: 'Today - 25.12.2013' 

  "{:%A}".format(date.today())
  

  

  '{}__{:%Y.%m.%d__%H-%M}..format(__name__, datetime.now())
  

 Out: '__main____2014.06.09__16-56. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/311645)
 Use date.strftime. The formatting arguments are https://docs.python.org/2/library/time.html#time.strftime. 

 This one is what you wanted: 

  some_date.strftime('%Y-%m-%d')
  

 This one takes Locale into account. (do this) 

  some_date.strftime('%c')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/311655)
 The WHY: dates are objects 

 In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything. 

 Any object in Python have TWO string representations: 

 
  The regular representation that is used by "print", can be get using the  str()  function. It is most of the time the most common human readable format and is used to ease display. So  str(datetime.datetime(2008, 11, 22, 19, 53, 42))  gives you  '2008-11-22 19:53:42' .   
  The alternative representation that is used to represent the object nature (as a data). It can be get using the  repr()  function and is handy to know what kind of data your manipulating while you are developing or debugging.  repr(datetime.datetime(2008, 11, 22, 19, 53, 42))  gives you  'datetime.datetime(2008, 11, 22, 19, 53, 42)' .  
 

 What happened is that when you have printed the date using "print", it used  str()  so you could see a nice date string. But when you have printed  mylist , you have printed a list of objects and Python tried to represent the set of data, using  repr() . 

 The How: what do you want to do with that? 

 Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects. 

 When you want to display them, just use  str() . In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using  str(date) . 

 . When you tried to print the dates, you printed  mylist . If you want to print a date, you must print the date objects, not their container (the list). 

 E.G, you want to print all the date in a list : 

  for date in mylist :
    print str(date)
  

 Note that   in that specific case  , you can even omit  str()  because print will use it for you. But it should not become a habit :-) 

 Practical case, using your code 

  import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print "This is a new day : ", mylist[0] # will work
>>> This is a new day : 2008-11-22

print "This is a new day : " + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print "This is a new day : " + str(mylist[0]) 
>>> This is a new day : 2008-11-22
  

 Advanced date formatting 

 Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the  strftime()  method. 

  strftime()  expects a string pattern explaining how you want to format your date. 

 E.G :  

  print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'
  

 All the letter after a  "%"  represent a format for something : 

 
  %d  is the day number 
  %m  is the month number 
  %b  is the month abbreviation 
  %y  is the year last two digits 
  %Y  is the all year 
 

 etc 

 http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior, or http://strftime.org you can't know them all. 

 Since http://www.python.org/dev/peps/pep-3101/, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in
strftime.  

  print "We are the {:%d, %b %Y}".format(today)
>>> 'We are the 22, Nov 2008'
  

 The advantage of this form is that you can also convert other objects at the same time. 
With the introduction of https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals (since Python 3.6, 2016-12-23) this can be written as 

  import datetime
f"{datetime.datetime.now():%Y-%m-%d}"
>>> '2017-06-15'
  

 Localization 

 Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/311635)
 You need to convert the date time object to a string. 

 The following code worked for me: 

  import datetime
collection = []
dateTimeString = str(datetime.date.today())
collection.append(dateTimeString)
print collection
  

 Let me know if you need any more help. 



