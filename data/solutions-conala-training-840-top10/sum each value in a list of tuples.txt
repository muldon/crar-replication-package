Query: sum each value in a list of tuples
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16643634)
 You can use  collections.defaultdict : 

  >>> from collections import defaultdict
>>> from operator import mul
>>> lis = [(0,2),(1,3),(2,4),(0,5),(1,6)]
>>> dic = defaultdict(list)
>>> for k,v in lis:
    dic[k].append(v)  #use the first item of the tuple as key and append second one to it
...     

#now multiply only those lists which contain more than 1 item and finally sum them.
>>> sum(reduce(mul,v) for k,v in dic.items() if len(v)>1)
 28
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18194750)
  You can read about http://docs.python.org/2/library/collections.html#collections.defaultdict. 

  >>> from collections import defaultdict
>>> testDict = defaultdict(int)
>>> p = [('AAPL', 50), ('AAPL', -50), ('RY', 100), ('RY', -43)]
>>> for key, val in p:
        testDict[key] += val


>>> testDict.items()
[('AAPL', 0), ('RY', 57)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46982791)
 Use a  defaultdict  as a grouper: 

  >>> from collections import defaultdict
>>> grouper = defaultdict(lambda: (0,0))
>>> list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]
>>> for a, b, c in list_of_tuples:
...     x, y = grouper[a]
...     grouper[a] = (x + b, y + c)
...
>>> grouper
defaultdict(<function <lambda> at 0x102b240d0>, {1: (5, 5), 2: (3, 0)})
  

 Now, you can always get a list of tuples back like this: 

  >>> [(k, a, b) for k, (a, b) in grouper.items()]
[(1, 5, 5), (2, 3, 0)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40948428)
 I would do this using https://docs.python.org/3/library/collections.html#collections.Counter: 

  In [2]: from collections import Counter

In [3]: c = Counter()

In [4]: for k, v in p:
   ...:     c[k] += v
   ...:     
In [5]: c
Out[5]: Counter({'AAPL': 0, 'RY': 57})
  

 Then you can call the  most_common  method of  Counter  objects to get a list of tuples sorted by the values in descending order. 

  In [5]: c.most_common()
Out[5]: [('RY', 57), ('AAPL', 0)]
  

 In case you need to sort tuples by their first elements, use  sorted(c.items()) : 

  In [6]: sorted(c.items())
Out[6]: [('AAPL', 0), ('RY', 57)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14180875)
 Use  zip()  and  sum() : 

  In [1]: l = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)]

In [2]: [sum(x) for x in zip(*l)]
Out[2]: [25, 20]
  

  

  In [4]: map(sum, zip(*l))
Out[4]: [25, 20]
  

  timeit  results: 

  In [16]: l = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)]*1000

In [17]: %timeit [sum(x) for x in zip(*l)]
1000 loops, best of 3: 1.46 ms per loop

In [18]: %timeit [sum(x) for x in izip(*l)]       #prefer itertools.izip
1000 loops, best of 3: 1.28 ms per loop

In [19]: %timeit map(sum, zip(*l))
100 loops, best of 3: 1.48 ms per loop

In [20]: %timeit map(sum, izip(*l))                #prefer itertools.izip
1000 loops, best of 3: 1.29 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18195121)
 Here is a solution that doesn't involve importing: 

  >>> p = [('AAPL', 50), ('AAPL', -50), ('RY', 100), ('RY', -43)]
>>> d = {x:0 for x,_ in p}
>>> for name,num in p: d[name] += num
...
>>> Result = map(tuple, d.items())
>>> Result
[('AAPL', 0), ('RY', 57)]
>>>
  

 Note this is for Python 2.x.  In 3.x, you'll need to do:  Result = list(map(tuple, d.items())) . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15722420)
 Approach 

 Put your data into a  defaultdict(list) . . 

 Code 

  from collections import defaultdict
my_list = [('tag_A', 100), ('tag_A', 200), ('tag_A', 300), ('tag_A', 400), ('tag_B', 400), ('tag_B', 600)]

d = defaultdict(list)
for tag, num in my_list:
    d[tag].append(num)
  

  

  >>> from collections import defaultdict
>>> my_list = [('tag_A', 100), ('tag_A', 200), ('tag_A', 300), ('tag_A', 400), ('tag_B', 400), ('tag_B', 600)]
>>> 
>>> d = defaultdict(list)
>>> for tag, num in my_list:
...     d[tag].append(num)
... 
>>> from pprint import pprint
>>> pprint(dict(d))
{'tag_A': [100, 200, 300, 400], 'tag_B': [400, 600]}
>>> 
>>> pprint({k: sum(v) for k, v in d.iteritems()})
{'tag_A': 1000, 'tag_B': 1000}
  

 Alternative summary routine 

  def summarize_by_tag(d):
    for k, v in d.iteritems():
        print k, sum(v)

>>> summarize_by_tag(d)
tag_A 1000
tag_B 1000
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47628643)
 Just use a https://docs.python.org/2/library/collections.html#collections.defaultdict: 

  from collections import defaultdict

d = [('city 1', 2 ), ('city 1', 1 ), ('city 2', 2 ), ('city 2', 4)]

sum_values = defaultdict(list)

for city, value in d:
    sum_values[city].append(value)

>>> print([(city, sum(values)) for city, values in sorted(sum_values.items())])
[('city 1', 3), ('city 2', 6)]
  



