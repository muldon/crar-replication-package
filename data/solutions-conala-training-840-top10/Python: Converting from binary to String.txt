Query: Python: Converting from binary to String
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2072790)
 Converting Binary into hex without ignoring leading zeros: 

 You could use the format() built-in function like this: 

  "{0:0>4X}".format(int("0000010010001101", 2))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7565322)
 Faster solution see: 

  from timeit import Timer

import os
import binascii

def testSpeed(statement, setup = 'pass'):
  print '%s' % statement
  print '%s' % Timer(statement, setup).timeit()

setup = """
import os

value = os.urandom(32)
"""

# winner
statement = """
import binascii

binascii.hexlify(value)
"""

testSpeed(statement, setup)

# loser
statement = """
import binascii

value.encode('hex_codec')
"""

testSpeed(statement, setup)
  

 Results: 

  import binascii

binascii.hexlify(value)

2.18547999816

value.encode('hex_codec')

2.91231595077
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1238129)
 You can use ord and hex like this : 

  >>> s = 'some string'
>>> hex_chars = map(hex,map(ord,s))
>>> print hex_chars
['0x73', '0x6f', '0x6d', '0x65', '0x20', '0x73', '0x74', '0x72', '0x69', '0x6e', '0x67']
>>> hex_string = "".join(c[2:4] for c in hex_chars)
>>> print hex_string
736f6d6520737472696e67
>>>
  

 Or use the builtin encoding : 

  >>> s = 'some string'
>>> print s.encode('hex_codec')
736f6d6520737472696e67
>>>
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1523581)
 You can convert between a string representation of the binary using bin() and int() 

  >>> bin(88)
'0b1011000'
>>> int('0b1011000', 2)
88
>>> 

>>> a=int('01100000', 2)
>>> b=int('00100110', 2)
>>> bin(a & b)
'0b100000'
>>> bin(a | b)
'0b1100110'
>>> bin(a ^ b)
'0b1000110'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19256326)
  

  >>> test_string = '1101100110000110110110011000001011011000101001111101100010101000'
>>> print ('%x' % int(test_string, 2)).decode('hex').decode('utf-8')
نقاب
  

 Inverse (from @Robᵩ's comment): 

  >>> '{:b}'.format(int(u'نقاب'.encode('utf-8').encode('hex'), 16))
1: '1101100110000110110110011000001011011000101001111101100010101000'
  



