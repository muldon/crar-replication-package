Query: Find maximum with limited length in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34543597)
 Map the  list  to  abs() , then https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python and send it to  max() : 

  array = [1,2,4,5,4,5,6,7,2,6,-9,6,4,2,7,8]
array = [abs(item) for item in array]
# use linked question's answer to chunk
# array = [[1,2,4,5], [4,5,6,7], [2,6,9,6], [4,2,7,8]] # chunked abs()'ed list
values = [max(item) for item in array]
  

  

  >>> values
[5, 7, 9, 8]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34543656)
  

  [max(abs(x) for x in arr[i:i+4]) for i in range(0, len(arr), 4)]
  

 This works also if the array cannot be evenly divided. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39749019)
 Use  max  with a key. 

  l = [[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968], [12587982, 0.88], [12587984, 0.8484848484848485], [12587992, 0.7777777777777778], [12587995, 0.8070175438596491], [12588015, 0.4358974358974359], [12588023, 0.8985507246376812], [12588037, 0.5555555555555555], [12588042, 0.9473684210526315]]
max_sub = max(l, key=lambda x: x[1])
max_val = max_sub[1]
max_index = max_sub[0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50478152)
 You can achieve this easily with  pandas : 

  >>> import pandas as pd
>>> lst = pd.Series([10, 16, 29, 1, 4, 5, 7, 9, 13, 15])
>>> i = lst.nlargest(3)
>>> i.index.values.tolist()
[2, 1, 9]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50478086)
 . Don't need to import anything or use special tools.  

  a = [10, 16, 29, 1, 4, 5, 7, 9, 13, 15]
N = 3


b = a[:]
locations = []
minimum = min(b) - 1
for i in range(N):
    maxIndex = b.index(max(b))
    locations.append(maxIndex)
    b[maxIndex] = minimum

print(locations)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42875870)
 You don't have to compute all the combinations first. 

 Start with the whole list. Then try all sublists of length "list_length - 1", then all sublists of length "list_length - 2", and so on. 

 As soon as you get a list that meets the requirement, break out of the loop. No need to try shorter lists. 

  def max_length(input_list):
    input_length = len(input_list)
    for i in range(input_length):
        for j in range(i + 1):
            if input_list[j] > input_list[input_length - i - 1 + j]:
                #Â return length
                return input_length - i
                # or return sublist, I'm not sure what you want
                return input_list[j: input_length - i + j]

print(max_length([1,5,7,8,9,6,4,2,3,5,7,8,6,2]))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38790108)
 The key is to treat the elements as strings so you can ask for their length or number of digits. 

 Some code  

  #Your list
L = [ 3 , 14 , 24 , 6 , 157 , 132 ,12]

# Imperative
max_digits = 0
for element in L:
    n_digits = len(str(element))
    if n_digits > max_digits:
        max_digits = n_digits

# Funtional
max_digits = reduce(lambda x,y: x if x>y else y, map(lambda x: len(str(x)), L), 0)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49133072)
 With https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions, and without a  lambda , it would look like this: 

   result = max(len(x) for x in l)
  

 Essentially, this does the following (it helps to break down list comprehensions from right-to-left): 

 
  in l : iterates over  l    
  for x : assigns each element of  l  to the variable  x  during the iteration 
  len(x) : get the length of each variable  x  within the list  l  
   list comprehensions  put the output into a list format naturally, so at this point we have a list of all the lengths of strings, like: 

  [5, 6, 7]
   
   max(...) : simply gets the largest number from the list of lengths  
 

 Hopefully this explanation helps understand what is going on. 



