Query: get all combination of n binary value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14931812)
 Following will give you all such combinations 

  bin = [0,1]
[ (x,y,z) for x in bin for y in bin for z in bin ]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14932354)
 Without using any in-build functions or smart techniques we can get like this 

  def per(n):
    for i in range(1<<n):
        s=bin(i)[2:]
        s='0'*(n-len(s))+s
        print map(int,list(s))
per(3)
  

 output 

  [0, 0, 0]
[0, 0, 1]
[0, 1, 0]
[0, 1, 1]
[1, 0, 0]
[1, 0, 1]
[1, 1, 0]
[1, 1, 1]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3819716)
 Don't they look like bit patterns (0000 ....1111 ) i.e binary bits.
And all possible combination of n binary bits will range from 0 to 2**n -1  

  noOfBits = 5
for n in range(2**noOfBits):
    binVal = bin(n)[2:].zfill(noOfBits)
    b = [ x for x in binVal]
    print b
  

 Do we need combinatorics for this purpose? 

 Output: 

  ['0', '0', '0', '0', '0']
['0', '0', '0', '0', '1']
['0', '0', '0', '1', '0']
['0', '0', '0', '1', '1']
['0', '0', '1', '0', '0']
['0', '0', '1', '0', '1']
.......
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14931808)
 Use http://docs.python.org/2/library/itertools.html#itertools.product 

  import itertools
lst = list(itertools.product([0, 1], repeat=3))
  

 This will yield a list of tuples (see http://ideone.com/rXZsIG) 

 You can easily change this to use a variable  repeat : 

  n = 3
lst = list(itertools.product([0, 1], repeat=n))
  

 If you need a list of lists, then you can use the  map  function (thanks @Aesthete). 

  lst = map(list, itertools.product([0, 1], repeat=n))
  

 Or in Python 3: 

  lst = list(map(list, itertools.product([0, 1], repeat=n)))
# OR
lst = [list(i) for i in itertools.product([0, 1], repeat=n)]
  

 Note that using  map  or a list comprehension means you don't need to convert the product into a list, as it will iterate through the  itertools.product  object and produce a list. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18178056)
 You can use a combination of slicing(or  str.rstrip ),  int  and  format . 

  >>> inp = '0x0202020202UL'
>>> format(int(inp[:-2], 16), 'b')
'1000000010000000100000001000000010'
# Using `str.rstrip`, This will work for any hex, not just UL
>>> format(int(inp.rstrip('UL'), 16), 'b')
'1000000010000000100000001000000010'
  

  Update:  

  from itertools import islice
def formatted_bin(inp):
   output = format(int(inp.rstrip('UL'), 16), 'b')
   le = len(output)
   m = le % 4
   padd = 4 - m if m != 0 else 0
   output  = output.zfill(le + padd)
   it = iter(output)
   return ' '.join(''.join(islice(it, 4)) for _ in xrange((le+padd)/4))

print formatted_bin('0x0202020202UL')
print formatted_bin('0x10')
print formatted_bin('0x101010')
print formatted_bin('0xfff')
  

  output:  

  0010 0000 0010 0000 0010 0000 0010 0000 0010
0001 0000
0001 0000 0001 0000 0001 0000
1111 1111 1111
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18884099)
 For integers, it's the bitwise-OR compound assignment operator.  Like all compound assignment operators,  a |= b  is the same thing as  a = a | b .  And the pipe is the symbol for bitwise OR. 

 
 http://en.wikipedia.org/wiki/Augmented_assignment 
 http://en.wikipedia.org/wiki/Bitwise_operation#OR 
 

 As https://stackoverflow.com/users/2357112/user2357112 points out, richer datatypes can http://docs.python.org/2/reference/datamodel.html#special-method-names as they see fit. 

 

 Possible use cases</h3>

 Lets say you had a number of binary values you wanted to transmit over a slow network.  Lets say you have the output of 6 switches, each of which can have the values 0 or 1. 

 For example, you have a list:  switches = [0,1,1,0,1,0,0,0]  

 The naive way to transmit it would be as 6 different integer values.  If you used bytes to transmit the values it'd be a total of 6*8 = 48 bits.  But you will only derive 6 bits of information on the receiving end -- so the remaining 42 bits are wasted. 

 Instead, you could use a single byte to store the information of all the switches. 

 One way to do this would be to iterate over the list, and compute the resulting byte. 

 For example,  

  val = 0
for i,s in enumerate(switches):
    val |= (s << i)

print(val)
  

 This snippet prints  22 , which if you were to convert to binary you would see it is 10110, or 00010110 -- which is just the values of the list, ordered backwards. 

 The  (s << i)  generates an integer which, when expressed in binary, contains a single 1 and the rest 0s.  So on each iteration of the loop, the  val  variable may "accumulate" another bit. 

 

 One relatively simple real-life example I can think of off the top of my head is the way PHP stores it's http://php.net/manual/en/errorfunc.constants.php. 

 If you look at the link, the values in the first column are all (with the exception of the last entry) values 2^ n  for n = 0,1,2,3...14. 

 In fact the (2^ n ) has special significance for bitfields and bitwise operations. 

 Looking at the value of this for the first few values of n we get: 

 
 n | 2^n | 2^n (Binary Representation)
---|-----|----
 0 |  1  | 00001
 1 |  2  | 00010
 2 |  4  | 00100
 3 |  8  | 01000
 4 | 16  | 10000
 

 If, in the binary representation, you count from the rightmost position moving left  n  spots, you'll see that you end at the position of the single 1.  This is wholly intentional. 

 .  Lets say you, as a server admin are interested  only  in a subset of the various error levels.  For example, you know that you want to display  E_ERROR ,  E_PARSE , and  E_CORE_ERROR , while discarding the rest. 

 Well, because PHP cleverly assigned the different error levels the (2^ n ) values we just saw, we're able to express any combination of these flags by a single value without losing information. 

 And we can compute the value of this combination the same way as before, by taking the bitwise OR of the values.  In our case: 

 
E_ERROR      |  1 | 0000 0000 0000 0001
E_PARSE      |  4 | 0000 0000 0000 0100
E_CORE_ERROR | 16 | 0000 0000 0001 0000
----------------------------------------
               21   0000 0000 0001 0101
 

 In python: 

  print(1|4|16)
# 21
  

 The result of this bitwise OR operation is often called a http://en.wikipedia.org/wiki/Mask_%28computing%29. 

 Given a bitmask and the error value of thrown error, you can quickly check whether it is something you're interested in -- that is, whether it is of type  E_ERROR ,  E_PARSE , or  E_CORE_ERROR  -- you can quickly compute the bitwise AND of the bitmask and the error value. 

 The result of this AND operation will either be a 0 (in which case you're not interested in the error / it isn't of one of the levels you're interested in) or non-zero (in which case it is).  Verifying that this bitwise AND operation does what I say it does is left to you. 

 Lastly, you may have noticed that simply  adding  the error values results in the same value as the one you get from OR-ing.  In this case, this is true.  So why use bitwise-OR over simple addition? 

 Answer: because the bitwise-OR operation is resilient to including a value multiple times.
This is hard to explain, so consider this final example: 

 You want to write code that will ensure that a given error level is "monitored".  You have access to functions that will get and set the bitmask. 

 Using addition, you'd write something like: 

  set_mask(get_mask() + E_PARSE)
  

 But if the bit for  E_PARSE  were already set, doing this addition would actually  unset   E_PARSE   and possibly more importantly , would  invalidate at least one additional flag  -- possibly invalidating every flag in your bitfield. 

 Clearly this isn't what you're looking for. 

 Instead, if you used the bitwise OR operation: 

  set_mask(get_mask() | E_PARSE)
  

 regardless of whether  E_PARSE  were set previously, and no matter how many times you did this operation,  E_PARSE  would remain set after each, and no other flags would be inadvertently affected. 

 (Do the math behind all this -- it'd be very instructive) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17682543)
 I think the  itertools  module in the standard library can help, in particular the  product  function. 

 http://docs.python.org/2/library/itertools.html#itertools.product 

  for x in itertools.product( [0, 1] , repeat=3 ):
    print x
  

  

   (0, 0, 0)
 (0, 0, 1)
 (0, 1, 0)
 (0, 1, 1)
 (1, 0, 0)
 (1, 0, 1)
 (1, 1, 0)
 (1, 1, 1)
  

 the  repeat  parameter is the length of each combination in the output 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46045257)
 It's because Python uses a https://en.wikipedia.org/wiki/Two%27s_complement binary signed integer representation. Here a snippet of code that shows the actual byte data and illustrates  why  you're getting the results that you are: 

  import math

def bin_format(integer):
    num_bytes = math.ceil(integer.bit_length()/8) # number req to represent value
    ba = integer.to_bytes(num_bytes, 'big', signed=integer<0)
    return ''.join('{:08b}'.format(b) for b in ba) + ' ({:4d})'.format(integer)

print('  ' + bin_format(-122))
print('& ' + bin_format(222))
print('=' * 17)
print('  ' + bin_format(-122 & 222))
  

 Output: 

<pre class="lang-none prettyprint-override">   10000110 (-122)
& 11011110 ( 222)
=================
  10000110 ( 134)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25665142)
 Once you have the regular combinations generated, you can do a second pass to generate the ones with "negation."  I'd think of it like a binary number, with the number of elements in your list being the number of bits.  Count from 0b0000 to 0b1111 via 0b0001, 0b0010, etc., and wherever a bit is set, negate that element in the result.  This will produce 2^n combinations for each input combination of length n. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2690587)
  Permutations  are about taking an ordered set of things and moving these things around (i.e. changing order). Your question is about  combinations  of things from your list. 

 Now, an easy way of enumerating combinations is by mapping entries from your list to bits in a number. For example, lets assume that if bit #0 is set (i.e. 1), then number  lst[0]  participates in the combination, if bit #1 is set, then  lst[1]  participates in the combination, etc. This way, numbers in range  0 <= n < 2**(len(lst))  identify all possible combinations of  lst  members, including an empty one ( n = 0 ) and the whole  lst  ( n = 2**(len(lst)) - 1 ). 

 You need only combinations of 2 items or more, i.e. only those combination IDs that have at least two nonzero bits in their binary representation. Here is how to identify these: 

  def HasAtLeastTwoBitsSet(x) :
    return (x & (x-1)) != 0

# Testing:
>>> [x for x in range(33) if HasAtLeastTwoBitsSet(x)]
[3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
  

 Next step is to extract a combination of list members identified by a combination id. This is easy, thanks to the power of list comprehensions: 

  def GetSublistByCombination(lst, combination_id) :
    res = [x for (i,x) in enumerate(lst) if combination_id & (1 << i)]
    return res

# Testing:
>>> GetSublistByCombination([0,1,2,3], 1)
[0]
>>> GetSublistByCombination([0,1,2,3], 3)
[0, 1]
>>> GetSublistByCombination([0,1,2,3], 12)
[2, 3]
>>> GetSublistByCombination([0,1,2,3], 15)
[0, 1, 2, 3]
  

 Now let's make a generator that produces all sums, together with their string representations: 

  def IterAllSums(lst) :
    combinations = [i for i in range(1 << len(lst)) if HasAtLeastTwoBitsSet(i)]
    for comb in combinations :
        sublist = GetSublistByCombination(lst, comb)
        sum_str = '+'.join(map(str, sublist))
        sum_val = sum(sublist)
        yield (sum_str, sum_val)
  

 And, finally, let's use it: 

  >>> for sum_str, sum_val in IterAllSums([1,2,3,4]) : print sum_str, sum_val

1+2 3
1+3 4
2+3 5
1+2+3 6
1+4 5
2+4 6
1+2+4 7
3+4 7
1+3+4 8
2+3+4 9
1+2+3+4 10
  



