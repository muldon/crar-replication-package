Query: Reading a file without newlines
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40370204)
 To print without newlines, use below.
But without newlines, you might need to add some separator like space to separate your data 

   >>> sys.stdout.write('hello world')
hello world>>>
  

 With the newlines remain, you could use rstrip to strip off the newlines when reading out 

  lines = f.readlines()
points = float(lines[0].rstrip)
  

 Alternatively, I prefer more pythonic way below 

  lines = f.read().splitlines()
points = float(lines[0])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39852460)
<pre class="lang-python prettyprint-override"> import csv

with open(filename) as f:
    csvreader = csv.reader(f)
    for line in csvreader:
         print(line[0])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30900782)
  

  data=sys.stdin.read().splitlines()

for i in data:
        print i
  

 No newlines 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50201350)
 Here's what you do if you dont have newlines in the file: 

  with open('large_text.txt') as f:
  while True:
    c = f.read(1024)
    if not c:
      break
    print(c)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42630000)
 You could use a second regex to replace multiple new lines with a single new line and use strip to get rid of the last new line. 

  import os
import re

files=[]
pars=[]

for i in os.listdir('path_to_dir_with_files'):
    files.append(i)

for f in files:
    with open('path_to_dir_with_files/'+str(f), 'r') as a:
        word = re.sub(r'someword=|\,.*|\#.*','', a.read())
        word = re.sub(r'\n+', '\n', word).strip()
        pars.append(word)

for k in pars:
   print k
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54479377)
 I think this is the best option. 

   temp = [line.strip() for line in file.radlines()]  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42629724)
 Without changing your code much, one easy way would just be to check if the line is empty before you print it, e.g.: 

  import os
import re

files=[]
pars=[]

for i in os.listdir('path_to_dir_with_files'):
    files.append(i)

for f in files:
    with open('path_to_dir_with_files'+str(f), 'r') as a:
        pars.append(re.sub('someword=|\,.*|\#.*','',a.read()))

for k in pars:
    if not k.strip() == "":
        print k
  

 *** EDIT
Since each element in pars is actually the entire content of the file (not just a line), you need to go through an replace any double end lines, easiest to do with re 

  import os
import re

files=[]
pars=[]

for i in os.listdir('path_to_dir_with_files'):
    files.append(i)

for f in files:
    with open('path_to_dir_with_files'+str(f), 'r') as a:
        pars.append(re.sub('someword=|\,.*|\#.*','',a.read()))

for k in pars:
    k = re.sub(r"\n+", "\n", k)
    if not k.strip() == "":
        print k
  

 Note that this doesn't take care of the case where a file ends with a newline and the next one begins with one - if that's a case you are worried about you need to either add extra logic to deal with it or change the way you're reading the data in 



