Query: How to sort this list in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20300339)
 Your indexing is wrong. You want to index the list, not the integer. 

  list.sort(key=lambda x: x[0][1])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4183540)
 In one line, using a  lambda : 

  timestamp.sort(key=lambda x: time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6], reverse=True)
  

 

 Passing a function to  list.sort : 

  def foo(x):
    return time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6]

timestamp.sort(key=foo, reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17474264)
 You want to sort based on the  float  values (not string values), so try:     

  >>> b = ["949.0","1099.0"]
>>> b.sort(key=float)
>>> b
['949.0', '1099.0']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4183538)
 This will give you a sorted version of the array. 

  sorted(timestamp, reverse=True)
  

 If you want to sort in-place: 

  timestamp.sort(reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9777207)
  list.sort()  does not return a list - it destructively modifies the list you are sorting: 

  In [177]: range(10)
Out[177]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [178]: range(10).sort()

In [179]:
  

 That said,  max  finds the largest element in a list, and will be more efficient than your method. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45047605)
 Yes,  list.sort  method sorts the list in place and returns  None . If you want to return the sorted list use  sorted  method. 

  >>> lst=[5, 2, 1, 4, 3]
>>> lst.sort()
>>> lst
[1, 2, 3, 4, 5]
>>> lst=[5, 2, 1, 4, 3]
>>> lst=sorted(lst)
>>> lst
[1, 2, 3, 4, 5]
>>> 
  

 So you will have to use:  common_elements = sorted(list(set.union(*x)))  or you can sort in place like this:  

  common_elements = list(set.union(*x))
common_elements.sort()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1815271)
 to sort the list u can use a custom sort method some thing like this 

  x = [('ba',4), ('hh',5), ('gg', 25)]

def sortMethod(x,y):
    if x[1] < y[1]:return 1
    elif x[1] > y[1]:return -1
    else: return 0


print x         #unsorted
x.sort(sortMethod)
print x         #sorted
  



