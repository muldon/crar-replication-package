Query: Padding a list in python with particular value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7026229)
 Another way, using http://docs.python.org/library/itertools.html: 

  from itertools import repeat
self.my_list.extend(repeat(0, 4 - len(self.my_list)))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7026173)
  self.myList.extend([0] * (4 - len(self.myList)))
  

 This works when padding with integers. Don't do it with mutable objects. 

 Another possibility would be: 

  self.myList = (self.myList + [0] * 4)[:4]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7026293)
 Why not create a little utility function? 

  >>> def pad(l, content, width):
...     l.extend([content] * (width - len(l)))
...     return l
... 
>>> pad([1, 2], 0, 4)
[1, 2, 0, 0]
>>> pad([1, 2], 2, 4)
[1, 2, 2, 2]
>>> pad([1, 2], 0, 40)
[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7026354)
  >>> out = [0,0,0,0]   # the "template" 
>>> x = [1,2]
>>> out[:len(x)] = x 
>>> print out
[1, 2, 0, 0]
  

 Assigning  x  to a slice of  out  is equivalent to: 

  out.__setitem__(slice(0, len(x)), x)
  

  

  operator.setitem(out, slice(0, len(x)), x)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30475725)
 Slicing using an index greater than the length of a list just returns the entire list. 

 Multiplying a list by a negative value returns an empty list. 

 That means the function can be written as: 

  def trp(l, n):
    return l[:n] + [0]*(n-len(l))

trp([], 4)
[0, 0, 0, 0]

trp([1,2,3,4], 4)
[1, 2, 3, 4]

trp([1,2,3,4,5], 4)
[1, 2, 3, 4]

trp([1,2,3], 4)
[1, 2, 3, 0]
  

 

  In [1]: a = [1,2,3]

In [2]: a[:4]
Out[2]: [1, 2, 3]

In [3]: [0]*0
Out[3]: []

In [4]: [0]*-1
Out[4]: []
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40690542)
 Make the formatting string change depending on the  pad  value. 

  >>> pad = 20
>>> fmt = "%-{}s %s %s %s".format(pad)
>>> fmt  # `-20s`: left align (width = 20), without `-` -> right align
'%-20s %s %s %s'
>>> fmt % ('hello', 1, 2, 3)
'hello                1 2 3'
  

 

  >>> def print_elements_lst(lst_to_print):
...     pad = max(len(elm.title) for elm in lst_to_print) + 2
...     fmt = "%-{}s %s %s %s".format(pad)  # Specify width depending on `pad`
...     return "\n".join(fmt % elm for elm in lst_to_print)
...
>>> Entry = namedtuple( 'Entry', ['title', 'x', 'y', 'val'])
>>> entries = [
...     Entry('Hello world', 1, 2, 10),
...     Entry('Python', 20, 2, 10),
... ]
>>> print(print_elements_lst(entries))
Hello world   1 2 10
Python        20 2 10
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49177034)
 You can use https://docs.python.org/3/library/itertools.html#itertools.zip_longest to iterate over each sublist elementwise, while using  None  as the fill value for the shorter sublists. 

 Then use https://docs.python.org/3/library/functions.html#filter to remove the  None  values that were used from padding. 

 So all together in a list comprehension: 

  >>> from itertools import zip_longest
>>> [(i, list(filter(None, j))) for i, j in enumerate(zip_longest(*s))]
[(0, ['a', 'e', 'h', 'j']), (1, ['b', 'f', 'i', 'k']), (2, ['c', 'g', 'l']), (3, ['d', 'm'])]
  



