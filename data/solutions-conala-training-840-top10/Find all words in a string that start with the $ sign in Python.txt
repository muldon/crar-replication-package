Query: Find all words in a string that start with the $ sign in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11416853)
 Several approaches, depending on what you want define as a 'word' and if all are delineated by spaces: 

  >>> s='This $string is an $example $second$example'

>>> re.findall(r'(?<=\s)\$\w+',s)
['$string', '$example', '$second']

>>> re.findall(r'(?<=\s)\$\S+',s)
['$string', '$example', '$second$example']

>>> re.findall(r'\$\w+',s)
['$string', '$example', '$second', '$example']
  

 If you might have a 'word' at the beginning of a line: 

  >>> re.findall(r'(?:^|\s)(\$\w+)','$string is an $example $second$example')
['$string', '$example', '$second']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11416845)
 The problem with your expr is that  \b  doesn't match between a space and a  $ . If you remove it, everything works: 

  z = 'This $string is an $example'
import re
print re.findall(r'[$]\S*', z) # ['$string', '$example']
  

 To avoid matching  words$like$this , add a lookbehind assertion: 

  z = 'This $string is an $example and this$not'
import re
print re.findall(r'(?<=\W)[$]\S*', z) # ['$string', '$example']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11416791)
 The  \b  escape matches at word boundaries, but the $ sign is not considered part of word you can match. Match on the start or spaces instead: 

  re.compile(r'(?:^|\s)(\$\w+)')
  

 I've used a backslash escape for the dollar here instead of a character class, and the  \w+  word character class with a minimum of 1 character to better reflect your intent. 

  

  >>> import re
>>> dollaredwords = re.compile(r'(?:^|\s)(\$\w+)')
>>> dollaredwords.search('Here is an $example for you!')
<_sre.SRE_Match object at 0x100882a80>
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35770570)
  str.find takes a start position so when you find the first use that index + 1 t start looking for the second then split that substring: 

  s = "Hello #world I am in #London and it is #sunny today"
i =  s.find("#", s.find("#") + 1)
print(s[:i].split())
['Hello', '#world', 'I', 'am', 'in']
  

 You can also do the same with index: 

  s = "Hello #world I am in #London and it is #sunny today"
i =  s.index("#", s.index("#") + 1)
print(s[:i].split())
  

 The difference being index will raise an error if the substring does not exist. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17987550)
 Try adding an optional minus sign in the regular expression: 

  Dmin = re.search('(?<=DateMinEnd=)-?\w+', text)
  

  -  is the minus sign itself, and  ?  marks that there may be one or zero minus symbols (in other words it's optional). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54909465)
 To ignore the spaces from any string, you could use  string.replace(" ", "")  

 To find the substring within a string you could use  string.find(substr)  

 To find the location in  the original string from the result of  find  you will have to shift it by the number of spaces you removed prior to that point. 

  s1= ' first words s t r i n g last words '
s2= 'string'

s1_nospace=s1.replace(" ", "")
s2_nospace=s2.replace(" ", "")

nospace_index=s1_nospace.find(s2_nospace)

isnt_space = [not (x==" ") for x in s1]
# Cumulative sum of isnt_space
chars_before = reduce(lambda c, x: c + [c[-1] + x], isnt_space, [0])[1:]

start_index = chars_before.index(nospace_index+1)
end_index = chars_before.index(nospace_index+len(s2_nospace))

# start_index == 13
# end_index == 23
  

 You could certainly clean it up and/or speed it up a bit but this should accomplish the task in a relatively readable way. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29740024)
 Python string  .split()  function, split string that separated by white space by default and return a list that contains any mixed characters without spaces. my simple suggest is that you replace sign characters by new two side spaces sign before using  .split()  function: 

  for line in code.readlines():
    for sign in '({[<+-=*/%;>]})':
        line = line.replace(sign, ' %s ' % sign)
    for word in line.split():
        print word
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54909674)
 You can create a regex pattern by first removing the spaces in the string you're looking for, then putting  ' *'  (any number of spaces) between each character. As you want to be able to use any special character in the search string, we also escape them : 

  import re

def find_with_spaces(pattern, text):
    pattern = pattern.replace(' ', '')
    pattern_re = re.compile(' *'.join(map(re.escape, pattern)))

    m = pattern_re.search(text)
    if m:
        return m.start(), m.end()


s1= ' first words s { r * n g? last words '
s2= 's{r*ng?'

start, end = find_with_spaces(s2, s1)
print(start, end)
print(s1[start:end])

# 13 25
# s { r * n g?
  

 The regex pattern created and used by the function in this case was  r's *\{ *r *\* *n *g *\?' . Note that the end index is 25, while the last '?' is at index 24 - that lets you use  s1[start:end]  to get the matched substring. 

  s3= ' * ng?la'
start, end = find_with_spaces(s3, s1)
print(start, end)
print(s1[start:end])

# 19 28
# * n g? la
  



