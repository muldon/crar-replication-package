Query: Selenium open pop up window [Python]
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37227747)
 We have similar requirement, working on chrome add-on with Selenium WebDriver. As '@Aleksandar Popovic' said, we can't click chrome extension icon with WebDriver, as icon is out of the Webpage.  

 We make use of http://www.sikuli.org/ (Automation tool that make use of image recognition), to click the chrome add-on. After that add-on popup will be another browser window, so use switch window to perform actions on add-on popup. 

 Here is the sample code in  Java  using both  Selenium Webdriver  and  Sikuli . 

 Sikuli will run based on image recognition. Before running the code, the screen shot of the chrome browser and crop it so that only Addon is available in the image. Save that image as "AddonIcon.png". 

 Sikuli will match that image (In our case AddonIcon.png ) on screen and simulate the click action on it. 

  import java.io.File;
import java.util.List;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.sikuli.script.App;
import org.sikuli.script.FindFailed;
import org.sikuli.script.Pattern;
import org.sikuli.script.Screen;
public class PageTest {

    public static void main(String[] args) {
        // Opening chrome with that addon
        ChromeOptions options = new ChromeOptions();
        options.addExtensions(new File("Path to ur chrome addon (.cxt file)"));     
        System.setProperty("webdriver.chrome.driver", "path to chromedriver.exe");
        WebDriver driver = new ChromeDriver(options);
        driver.manage().window().maximize();

        // Creating object to the Sukali screen class
        Screen s=new Screen();

        //Finding and clicking on the Addon image
         try {
            s.find("Path to the 'AddonIcon.png'");
            s.click("Path to the 'AddonIcon.png'");
        } catch (FindFailed e) {            
            e.printStackTrace();
        }

        //Wait until new Addon popup is opened.
         WebDriverWait wait = new WebDriverWait(driver, 5);      
         wait.until(ExpectedConditions.numberOfWindowsToBe(2));

         // Switch to the Addon Pop up
         String parentWindow= driver.getWindowHandle();
         Set<String> allWindows = driver.getWindowHandles();
         for(String curWindow : allWindows){             
             if(!parentWindow.equals(curWindow)){
             driver.switchTo().window(curWindow);
             }
         }

         /***********Ur code to work on Add-on popup************************/
    }
}
  

 I hope this will help you. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49303246)
 There is a really simple way to make a window open in incognito mode: 

  from selenium.webdriver.chrome.options import Options

chrome_options = Options()
# incognito window
chrome_options.add_argument("--incognito")
  

 You can also use this library for maximizing the window and more, see the documentation: https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Chrome/Options.html 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49487258)
  alert = driver.switch_to_alert()
alert.accept()
  

 This will return the currently open alert object. With this object, you can now accept, dismiss, read its contents or even type into a prompt. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44351879)
 After so much findings and research, I get the following code which would be helpful for this type of situation. 

      profile = webdriver.FirefoxProfile()
    profile.set_preference("browser.download.dir",os.getcwd());
    profile.set_preference("browser.download.folderList",2);
    profile.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/csv,application/excel,application/vnd.msexcel,application/vnd.ms-excel,text/anytext,text/comma-separated-values,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/octet-stream");
    profile.set_preference("browser.download.manager.showWhenStarting",False);
    profile.set_preference("browser.helperApps.neverAsk.openFile","application/csv,application/excel,application/vnd.msexcel,application/vnd.ms-excel,text/anytext,text/comma-separated-values,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/octet-stream");
    profile.set_preference("browser.helperApps.alwaysAsk.force", False);
    profile.set_preference("browser.download.manager.useWindow", False);
    profile.set_preference("browser.download.manager.focusWhenStarting", False);
    profile.set_preference("browser.download.manager.alertOnEXEOpen", False);
    profile.set_preference("browser.download.manager.showAlertOnComplete", False);
    profile.set_preference("browser.download.manager.closeWhenDone", True);
    profile.set_preference("pdfjs.disabled", True);
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24097702)
 Your css selector could be more generic, perhaps: 

  driver.find_element_by_css_selector("a[href^='javascript']").click()
  

 You've got all kinds of crazy overlapping quotation marks there. . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41736041)
 It easier to inspect such elements (closing dropdowns) using  FireFox , open the developer tools and just stand on the element with the mouse cruiser after selecting the option from  FireBug  toolbar (marked in red square in the picture). 

 https://i.stack.imgur.com/mG3QC.png 

 As for the question, the locator you are looking for is  ('[id*="DownloadSnapshot"] > span')  

  from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.PhantomJS()
driver.set_window_size(1120, 550)
driver.get(r"foo%20Data%20235.xlsx&DefaultItemOpen=3") # dummy link

wait = WebDriverWait(driver, 10)

wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '[id*="loadingTitleText"]')))

driver.find_element_by_css_selector('#jewel-button-middle > span').click() # responsible for clicking the file menu

download = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, '[id*="DownloadSnapshot"] > span')))
driver.get_screenshot_as_file('fileName')
download.click()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44175284)
 You should try to use preference with correct  MIME  type for  xlsx  extension which is  "application/vnd..spreadsheetml.sheet" , but not  "application/xlsx" : 

  profile.set_preference('browser.helperApps.neverAsk.saveToDisk', "application/vnd..spreadsheetml.sheet")
  

 You can check list of  MIME  types for Microsoft Office files http://filext.com/faq/office_mime_types.php 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38812576)
 Here is another approach without using selenium grid. 

 This approach opens 5 firefox instances, as well as 3 windows on each instance. The cookies are copied over from the main instance. 

  from pyvirtualdisplay import Display
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import multiprocessing
display = Display(visible=0, size=(800, 600))
display.start()
d = webdriver.Firefox()

def friend_uid_list(uid, driver):
    values = []
    for handle in driver.window_handles:
        driver.switch_to_window(handle)
        # driver.wait_for_element() etc etc
        values.append(driver.find_element_by_id('#something'))
        # scrape elements
    return values

def g(arg):
    return friend_uid_list(*arg)
  

  

  d = webdriver.Firefox()
d.get("https://www.facebook.com/")
d.find_element_by_css_selector("#email").send_keys("email@gmail.com")
d.find_element_by_css_selector("#pass").send_keys("password")
d.find_element_by_css_selector("#loginbutton").click()
  

  

  drivers = [webdriver.Firefox(), webdriver.Firefox(), webdriver.Firefox(), webdriver.Firefox()]
  

 Copy the  localStorage : 

  localstorage_kv = d.execute_script("var obj={};for (var i=0,len=localStorage.length;i<len;++i){obj[localStorage.key(i)]=localStorage.getItem(localStorage.key(i));};return obj")
  

 Copy the cookies and  localStorage : 

  for e in drivers:
    e.get("https://www.facebook.com/")
    for x in d.get_cookies():
        e.add_cookie(x)
    for k, v in localstorage_kv.items():
        e.execute_script('localStorage.setItem("{}", {})'.format(k,v))
    e.refresh() # should be logged in now
  

 Add the initial driver back into the drivers array: 

  drivers.append(d)
  

  

  uids = [100004159542140, 100004159542140, 100004159542140, 100004159542140, 100004159542140, 100004159542140]
pool = multiprocessing.Pool(5)

while uids:
    for driver in drivers:
        if len(driver.window_handles) == 1:
            driver.execute_script('window.open("https://www.facebook.com/' + uids.pop() + '/friends")')            
            driver.execute_script('window.open("https://www.facebook.com/' + uids.pop() + '/friends")')            
        else:
            for handle in driver.window_handles:
                handle.get("https://www.facebook.com/" + uids.pop() + "/friends")
    return_values = pool.map(g, drivers)
    import pdb;pdb.set_trace()
  

 If you really want to share the cookies across nodes on a selenium grid look: 

 
 https://stackoverflow.com/questions/16205299/create-and-upload-a-file-on-selenium-grid 
 https://stackoverflow.com/questions/15058462/how-to-save-and-load-cookies-using-python-selenium-webdriver 
 http://selenium-python.readthedocs.io/getting-started.html#selenium-remote-webdriver 
 

 Which roughly means pickle the  localStorage  and  cookies  and transfer that to each node, from there then read the cookie into each instance on each node. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32862069)
 in terms of browser, pop up is not a window, it is an alert. so, you should use following: 

  driver.switch_to_alert()
  



