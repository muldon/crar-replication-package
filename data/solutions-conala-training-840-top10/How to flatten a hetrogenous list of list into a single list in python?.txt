Query: How to flatten a hetrogenous list of list into a single list in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10632307)
 Here is a relatively simple recursive version which will flatten any depth of list 

  l = [35,53,[525,6743],64,63,[743,754,757]]

def flatten(xs):
    result = []
    if isinstance(xs, (list, tuple)):
        for x in xs:
            result.extend(flatten(x))
    else:
        result.append(xs)
    return result

print flatten(l)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10632170)
 Here's a oneliner, based on https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python: 

  list(itertools.chain(*((sl if isinstance(sl, list) else [sl]) for sl in l)))
  

  UPDATE:  And a fully iterator-based version: 

  from itertools import imap, chain
list(chain.from_iterable(imap(lambda x: x if isinstance(x, list) else [x], l)))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10632267)
 it could be done neatly in one line using  numpy  

  import numpy as np
np.hstack(l)
  

 you end up with an ndarray 

  array([  35,   53,  525, 6743,   64,   63,  743,  754,  757])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10632356)
  >>> data = [35,53,[525,6743],64,63,[743,754,757]]
>>> def flatten(L):
        for item in L:
            if isinstance(item,list):
                for subitem in item:
                    yield subitem
            else:
                yield item


>>> list(flatten(data))
[35, 53, 525, 6743, 64, 63, 743, 754, 757]
  

 Here is a one-liner version for code-golf purposes (it doesn't look good :D ) 

  >>> [y for x in data for y in (x if isinstance(x,list) else [x])]
[35, 53, 525, 6743, 64, 63, 743, 754, 757]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10127020)
 To flatten one level, you can use  itertools.chain.from_iterable() : 

  flattened_list = itertools.chain.from_iterable(my_list)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/716484)
 Sadly, Python doesn't have a simple way to flatten lists.   

  def flatten(some_list):
    for element in some_list:
        if type(element) in (tuple, list):
            for item in flatten(element):
                yield item
        else:
            yield element
  

 Which will recursively flatten a list; you can then do 

  result = []
[ result.extend(el) for el in x] 

for el in flatten(result):
      print el
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9277947)
 With  flatten  defined as: 

  >>> def flatten(l):
...     r = []
...     for x in l:
...             if isinstance(x, list):
...                     r.extend(flatten(x))
...             else:
...                     r.append(x)
...     return r
  

  dict(zip(flatten(list1), flatten(list2)))  seems to be as fast as yours.  And it is much more convenient approach, as guys said. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50312902)
 You need to  split  each element in your original list and then flatten, e.g.: 

  In []:
list(it.chain.from_iterable(s.split() for s in myList)

Out[]:
['05-06-2015', '01-07-2015', '01-07-2015', '01-07-2016', '26-08-2015',
 '26-08-2016', '23-06-2015', '26-08-2016', '01-07-2015', '06-07-2015']
  



