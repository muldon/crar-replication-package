Query: Easy way to convert a unicode list to a list containing python strings?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36639570)
 We can use  map  function 

  print map(str, EmployeeList)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41939033)
 Just simply use this code 

  EmployeeList = eval(EmployeeList)
EmployeeList = [str(x) for x in EmployeeList]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18272133)
 Encode each value in the list to a string: 

  [x.encode('UTF8') for x in EmployeeList]
  

 You need to pick a valid encoding; don't use  str()  as that'll use the system default (for Python 2 that's ASCII) which will not encode all possible codepoints in a Unicode value. 

 UTF-8 is capable of encoding all of the Unicode standard, but any codepoint outside the ASCII range will lead to multiple bytes per character. 

 However, if all you want to do is test for a specific string, test for a  unicode  string and Python won't have to auto-encode all values when testing for that: 

  u'1001' in EmployeeList.values()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10750628)
 You have byte strings containing unicode escapes. You can convert them to unicode with the  unicode_escape  codec: 

  >>> print "H\u00eatres et \u00e9tang".decode("unicode_escape")
Hêtres et étang
  

 And you can encode it back to byte strings: 

  >>> s = "H\u00eatres et \u00e9tang".decode("unicode_escape")
>>> s.encode("latin1")
'H\xeatres et \xe9tang'
  

 You can filter and decode the non-unicode strings like: 

  for s in l: 
    if not isinstance(s, unicode): 
        print s.decode('unicode_escape')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18272106)
  [str(x) for x in EmployeeList]  would do a conversion, but it would fail if the unicode string characters do not lie in the ascii range. 

  >>> EmployeeList = [u'1001', u'Karick', u'14-12-2020', u'1$']
>>> [str(x) for x in EmployeeList]
['1001', 'Karick', '14-12-2020', '1$']


>>> EmployeeList = [u'1001', u'करिक', u'14-12-2020', u'1$']
>>> [str(x) for x in EmployeeList]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-3: ordinal not in range(128)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35575730)
 I would use the https://media.readthedocs.org/pdf/uniseg-python/latest/uniseg-python.pdf library ( pip install uniseg ): 

  # -*- coding: utf-8 -*-
from uniseg import graphemecluster as gc

print list(gc.grapheme_clusters(u'xyz'))
  

 outputs  [u'\U0001f618', u'\U0001f618', u'x', u'y', u'z', u'\U0001f60a', u'\U0001f60a'] , and 

  [x.encode('utf-8') for x in gc.grapheme_clusters(u'xyz'))]
  

 will provide the list of characters as UTF-8 encoded strings. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/599681)
 You probably have a list containing one unicode string. The  repr  of this is  [u'String'] . 

 You can convert this to a list of byte strings using any variation of the following: 

  # Functional style.
print map(lambda x: x.encode('ascii'), my_list)

# List comprehension.
print [x.encode('ascii') for x in my_list]

# Interesting if my_list may be a tuple or a string.
print type(my_list)(x.encode('ascii') for x in my_list)

# What do I care about the brackets anyway?
print ', '.join(repr(x.encode('ascii')) for x in my_list)

# That's actually not a good way of doing it.
print ' '.join(repr(x).lstrip('u')[1:-1] for x in my_list)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45353749)
 The only reliable to convert a unicode string to a byte string is to  encode  it into an acceptable encoding (ascii, Latin1 and UTF8 are most common one). By definition, UTF8 is able to encode any unicode character, but you will find non ascii chars in the string, and the size in byte will no longer be the number of (unicode) characters. Latin1 is able to represent most of west european languages characters in with a 1 byte per character relation, and ascii is the set of characters that are always correctly represented. 

 If you want to be able to process strings containing characters not representable in the choosen charset, you can use the parameter  errors='ignore'  to just remove them or  errors='replace'  to replace them with a  replacement character , often  ? . 

 So if I have correctly understood your requirement, you could translate the list of unicode string into a list of byte strings with: 

  [ x.encode('ascii', errors='replace') for x in my_list ]
  



