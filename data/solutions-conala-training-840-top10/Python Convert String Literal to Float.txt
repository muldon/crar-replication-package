Query: Python Convert String Literal to Float
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46981331)
 Apart from the existing answer, since you've a python list in the form of string you can also use, https://docs.python.org/2/library/ast.html#ast.literal_eval: 

  import ast
f1, f2 = ast.literal_eval(a)
  

  OUTPUT  

  >>> f1, f2 = ast.literal_eval(a)
>>> f1
123.34
>>> f2
-12333
  

  literal_eval  is used to safely evaluate an  expression  or a   Unicode   or  Latin-1  encoded string containing a  Python  literal. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43967540)
 This is what I came up with: 

  s = raw_input('Enter a sequence of decimal numbers separated by commas: ')
aux = ''
total = 0
for c in s:
    aux = aux + c
    if c == ',':
        total = total + float(aux[0:len(aux)-1])
        aux = ''
total = total + float(aux) ##Uses last value stored in aux
print 'The sum of the numbers entered is ', total
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37480111)
  >>> L=['(39.2947500000, -76.6565600000)', '(39.3423900000, -76.5698300000)', '(39.3199500000, -76.6222000000)', '(39.2533200000, -76.6263600000)', '(39.3068100000, -76.6549700000)', '(39.2937500000, -76.6233700000)', '(39.3146700000, -76.6425300000)', '(39.3073300000, -76.6015900000)', '(39.2451900000, -76.6336400000)', '(39.3283000000, -76.5893200000)', '(39.3215400000, -76.6736800000)', '(39.3010000000, -76.5977400000)', '(39.3122600000, -76.6194200000)', '(39.3161400000, -76.5663900000)', '(39.3573500000, -76.6005300000)', '(39.3311200000, -76.6315100000)', '(39.3311200000, -76.6315100000)', '(39.2832900000, -76.5996300000)', '(39.2868200000, -76.6063900000)', '(39.3031200000, -76.6461100000)']
>>> import ast
>>> list(map(lambda x:ast.literal_eval(x), L))
[(39.29475, -76.65656), (39.34239, -76.56983), (39.31995, -76.6222), (39.25332, -76.62636), (39.30681, -76.65497), (39.29375, -76.62337), (39.31467, -76.64253), (39.30733, -76.60159), (39.24519, -76.63364), (39.3283, -76.58932), (39.32154, -76.67368), (39.301, -76.59774), (39.31226, -76.61942), (39.31614, -76.56639), (39.35735, -76.60053), (39.33112, -76.63151), (39.33112, -76.63151), (39.28329, -76.59963), (39.28682, -76.60639), (39.30312, -76.64611)]
  

 For python 2.x:  map(lambda x:ast.literal_eval(x), L)  

 Edit: some explanation: 

  ast  stands for Abstract Syntax Tree.  literal_eval()  is much more safe than  eval() . 

 Quoting from official doc:   

 
   ast.literal_eval(node_or_string) Safely evaluate an expression node or
  a Unicode or Latin-1 encoded string containing a Python literal or
  container display. The string or node provided may only consist of the
  following Python literal structures: strings, numbers, tuples, lists,
  dicts, booleans, and None. 
  
   This can be used for safely evaluating strings containing Python
  values from untrusted sources without the need to parse the values
  oneself. It is not capable of evaluating arbitrarily complex
  expressions, for example involving operators or indexing. 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21222729)
 Use http://docs.python.org/2/library/ast.html#ast.literal_eval to parse each line into a list of floats: 

  import ast

with open('XYZ.txt', 'r') as infh:
    for line in infh:
        row = ast.literal_eval(line)
        print row
  

 The  ast.literal_eval()  interprets each line as containing literal Python values, supporting lists, tuples, dictionaries, strings and number literals. 

  

  >>> import ast
>>> ast.literal_eval('[-1.504, 1.521, 1.531, 1.1579, -2.2976, 2.5927]\n')
[-1.504, 1.521, 1.531, 1.1579, -2.2976, 2.5927]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44994308)
 I use this function for that 

  import ast

def parse_str(s):
   try:
      return ast.literal_eval(str(s))
   except:
      return
  

 It will convert the string to its type 

  value = parse_str('1')  # Returns Integer
value = parse_str('1.5')  # Returns Float
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11476416)
 Float literals can be written as  7.0 , that is fine as they are automatically of type  float . 

 If you intend to convert an integer or string to float then the  float()  function is appropriate but that function does not need to be called to write a float literal. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21212734)
 Since you are starting with Python, you could try this simple approach: 

 Use the  split(c)  function, where  c  is a delimiter. With this you will have a list  numbers  (in the code below). Then you can iterate over each element of that list, casting each number to a  float  (because elements of  numbers  are strings) and sum them: 

  numbers = s.split(',')
sum = 0

for e in numbers:
    sum += float(e)

print sum
  

  Output:  

  6.753
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21212727)
 Floating point values cannot have a comma. You are passing  1.23,2.4,3.123  as it is to float function, which is not valid. First split the string based on comma, 

  s = "1.23,2.4,3.123"
print s.split(",")        # ['1.23', '2.4', '3.123']
  

 Then convert each and and every element of that list to float and add them together to get the result. To feel the power of Python, this particular problem can be solved in the following ways. 

 You can find the  total , like this 

  s = "1.23,2.4,3.123"
total = sum(map(float, s.split(",")))
  

 If the number of elements is going to be too large, you can use a generator expression, like this 

  total = sum(float(item) for item in s.split(","))
  

 All these versions will produce the same result as 

  total, s = 0, "1.23,2.4,3.123"
for current_number in s.split(","):
    total += float(current_number)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29801783)
 You could use  ast.literal_eval . 

  import ast

examples = ["1", "1.5", "999999999999999999999999999999999999999999", "23+42j"]
for item in examples:
    result = ast.literal_eval(item)
    print result
    print type(result)
  

  

  1
<type 'int'>
1.5
<type 'float'>
999999999999999999999999999999999999999999
<type 'long'>
(23+42j)
<type 'complex'>
  



