Query: Sum of all values in a Python dict
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32633488)
 This is a simple and specific solution, I am sure there are more general and cleverer ones.
 

  from collections import defaultdict

pr = defaultdict(float)
ra = defaultdict(float)
for el in values:
    combi = (el['prod_name'], el['prod_hola'])
    pr[combi] += el['prihod']
    ra[combi] += el['rashod']

results = [dict(rashod=r, prihod=p, \
                prod_name=nh[0], prod_hola=nh[1]) \
           for r,p,nh in zip(ra.values(), pr.values(), pr)]
print results
  

  

  [{'rashod': 0.0, 'prihod': 100.0, 'prod_name': 'c', 'prod_hola': 'f'},
 {'rashod': 0.0, 'prihod': 1500.0, 'prod_name': 'a', 'prod_hola': 'b'},
 {'rashod': 0.0, 'prihod': 460.0, 'prod_name': 'r', 'prod_hola': 't'}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11718879)
 You could loop over the dict to create a generator for the  sum  method: 

  np.sum(value for key, value in x.iteritems() if key != 'a')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/23526954)
 You can use  itertools.combinations  to get all the combinations and then sum the results. 

 E.g. 

  from itertools import combinations

mydict = {'a': 10, 'b': 20, 'c':30}
twos = [sum(c) for c in combinations(mydict.values(), 2)]
threes = [sum(c) for c in combinations(mydict.values(), 3)]
print twos
print threes
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22351528)
 With a dict comprehension, using  sum()  to sum the nested dictionary values; Python 2.6 or before would use  dict()  and a generator expression: 

  # Python 2.7
{k: sum(float(f) for f in v.itervalues()) for k, v in mydict.iteritems()}
# Python 3.x
{k: sum(map(float, v.values())) for k, v in mydict.items()}
# Python 2.6 and before
dict((k, sum(float(f) for f in v.values())) for k, v in mydict.iteritems())
  

 You may want to store float values to begin with though. 

  

  >>> mydict ={'Plekhg2': {'Bcells': '233.55', 'DendriticCells': '190.12'}, 
...   'Barxxxx': {'Bcells': '132.11', 'DendriticCells': '92.01'}, }
>>> {k: sum(float(f) for f in v.itervalues()) for k, v in mydict.iteritems()}
{'Plekhg2': 423.67, 'Barxxxx': 224.12}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28126107)
 You can use a generator expression within  sum  to do this 

  >>> h = {'a': {'abs':1},
         'b': {'abs':4},
         'c': {'abs':6},
         'd': {'abs':7},
         'e': {'abs':3}}
>>> DONT_COUNT_KEYS = 'abc'
>>> sum(value['abs'] for key, value in h.items() if key not in DONT_COUNT_KEYS)
10
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23526947)
 For the example input you have given, you can use a combination of  map ,  sum , and  itertools.combinations : 

  d = {'a': 10, 'b': 20, 'c':30}

import itertools
print map(sum, itertools.combinations(d.values(), 2))
print map(sum, itertools.combinations(d.values(), 3))
  

 Or, in Python3: 

  d = {'a': 10, 'b': 20, 'c':30}

import itertools
print(list(map(sum, itertools.combinations(d.values(), 2))))
print(list(map(sum, itertools.combinations(d.values(), 3))))
  

 prints: 

  [40, 30, 50]
[60]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41117380)
 You could create the dictionary with the sums on-the-fly: 

  Result = dict([(key, sum(values)) for key, values in yourDict.items()])
# or...
Result = {key: sum(values) for key, values in yourDict.items()}
  

 Here, the values of the new dictionary will be numbers, but if you  really  need them to be lists, you could enclose the call to  sum  in square brackets:  [sum(values)] . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33811875)
  inDict={
"httpXYZ_ACTION1": [10, 0],
"http123_ITEM1": [0.055, 0.0875],
"http456_ACTION1": [0.01824, 0.066667],
"httpABC_ITEM2": [1214.666667, 1244.195833],
"http999_ACTION2": [None, 213],
}
outDictKeys=set('_'+x.split('_')[1] for x in inDict)
outDict={}
for outKey in outDictKeys:
    total=0
    for inKey in inDict:
        if inKey.endswith(outKey):
            total=total+sum([x for x in inDict[inKey] if x is not None])
    outDict[outKey]=total
print (outDict)
  

 Ran in python 3: 

  >>> ================================ RESTART ================================
>>> 
{'_ITEM1': 0.1425, '_ITEM2': 2458.8625, '_ACTION2': 213, '_ACTION1': 10.084907}
>>> 
  

 Note that I treated your  null  value as  None , which is treated as zero, i.e. ignored. . 



