Query: How to get a variable name as a string in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19201952)
  def name(**variables):
    return [x for x in variables]
  

 It's used like this: 

  name(variable=variable)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46471018)
 I think it's so difficult to do this in Python because of the simple fact that you never will not know the name of the variable you're using. So, in his example, you could do: 

 Instead of: 

  list_of_dicts = [n_jobs, users, queues, priorities]

dict_of_dicts = {"n_jobs" : n_jobs, "users" : users, "queues" : queues, "priorities" : priorities}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40536047)
 On python3, this function will get the outer most name in the stack: 

  import inspect


def retrieve_name(var):
        """
        Gets the name of var. Does it from the out most frame inner-wards.
        :param var: variable to get name from.
        :return: string
        """
        for fi in reversed(inspect.stack()):
            names = [var_name for var_name, var_val in fi.frame.f_locals.items() if var_val is var]
            if len(names) > 0:
                return names[0]
  

 It is useful anywhere on the code. Traverses the reversed stack looking for the first match. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52205185)
 Make a dictionary and then use  max . Also works with  min . It will return you the variable name in the form of string. 

  >>> x = 1
>>> y = 2
>>> z = 3
>>> var = {x:"x",y:"y",z:"z"}
>>> max(var)
3
>>> var.get(max(var))
'z'
>>> var.get(min(var))
'x'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18425523)
 Even if variable values don't point back to the name, you have access to the list of every assigned variable and its value, so I'm astounded that only one person suggested looping through there to look for your var name.  

 Someone mentioned on that answer that you might have to walk the stack and check everyone's locals and globals to find  foo , but if  foo  is assigned in the scope where you're calling this  retrieve_name  function, you can use  inspect 's  current frame  to get you all of those local variables. My explanation might be a little bit too wordy (maybe I should've used a "foo" less words), but here's how it would look in code ( Note that if there is more than one variable assigned to the same value, you will get both of those variable names ): 

  import inspect

x,y,z = 1,2,3

def get_var_name(var):
    callers_local_vars = inspect.currentframe().f_back.f_locals.items()
    return [k for k, v in callers_local_vars if v is var]

print(get_var_name(y))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44859226)
 Assign the first item directly to the variable. 

  >>> string = 'Sam-Person'
>>> name = string.split('-')[0]
>>> name
'Sam'
  

 You can specify  maxsplit  argument, because you want to get only the first item. 

  >>> name = string.split('-', 1)[0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35144658)
 You can split the string with  =  and evaluated the dictionary using  ast.literal_eval  function: 

  >>> import ast
>>> ast.literal_eval(ata.split('=')[1].strip())
{'id': '12345', 'name': 'John White'}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11570218)
 
   I want to assign to another variable the string 'var', that is , how to get the symbol's name of a variable. 
 

 . Use a dict: 

  mydata = {}
varname = 'var'
mydata[varname] = 33
  

 Technically, you could use the  dict  from  globals()  or  locals()  to store this, and it would be available as a "real variable", but really, there's no good reason to do that, it will make your code much more difficult to understand. 

 The way to avoid the code you give:  

  color=''
if X==0:
     color='WHITE'
elif X==1:
etc.
  

  

  COLORS = ('WHITE', 'RED', 'BLACK')
x = 2
try:
    color = COLORS[x]
except IndexError:
    color = 'DEFAULT COLOR'
  

 This eliminates sequential ifs, and maintenance beyond expanding  COLORS .  

  COLORS = {0: 'WHITE', 1: 'RED', 2: 'BLACK'}
x = 2
color = COLORS.get(x, 'DEFAULT COLOR')
  

 But that requires manual management of the indices (keys) also. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18425285)
 I don't believe this is possible. Consider the following example: 

  >>> a = []
>>> b = a
>>> id(a)
140031712435664
>>> id(b)
140031712435664
  

 The  a  and  b  point to the same object, but the object can't know what variables point to it. 



