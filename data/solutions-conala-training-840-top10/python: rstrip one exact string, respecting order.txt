Query: python: rstrip one exact string, respecting order
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18723694)
 Define a helper function: 

  def strip_suffix(s, suf):
    if s.endswith(suf):
        return s[:len(s)-len(suf)]
    return s
  

 or use regex: 

  import re
suffix = ".txt"
s = re.sub(re.escape(suffix) + '$', '', s)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18723624)
 You're using wrong method. Use http://docs.python.org/2/library/stdtypes#std.replace instead: 

  >>> "Boat.txt".replace(".txt", "")
'Boat'
  

  NOTE :  str.replace  will replace anywhere in the string. 

  >>> "Boat.txt.txt".replace(".txt", "")
'Boat'
  

 To remove the last trailing  .txt  only, you can use http://docs.python.org/2/library/re.html: 

  >>> import re
>>> re.sub(r"\.txt$", "", "Boat.txt.txt")
'Boat.txt'
  

 If you want filename without extension, http://docs.python.org/2/library/os.path.html#os.path.splitext is more appropriate: 

  >>> os.path.splitext("Boat.txt")
('Boat', '.txt')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36969266)
  line.rstrip()  does not change the old variable, it returns the stripped value of the old variable and you have to reassign it in order for the change to take effect, like: 

  line = line.rstrip()
  

 Otherwise the line isn't changed and it uses the old line instead of the stripped one. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/275025)
 Try the method  rstrip()  (see doc http://docs.python.org/2/library/stdtypes.html#str.rstrip and https://docs.python.org/3/library/stdtypes.html#str.rstrip) 

  >>> 'test string\n'.rstrip()
'test string'
  

 Python's  rstrip()  method strips  all  kinds of trailing whitespace by default, not just one newline as Perl does with http://perldoc.perl.org/functions/chomp.html. 

  >>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'
  

 To strip only newlines: 

  >>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '
  

 There are also the methods  lstrip()  and  strip() : 

  >>> s = "   \n\r\n  \n  abc   def \n\r\n  \n  "
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6479686)
 The parameter to  rstrip()  is a set of characters to be stripped, not an exact string: 

  >>> "abcbcbaba".rstrip("ab")
"abcbc"
  

 General hint: If you suspect a bug in some function, read its http://docs.python.org/library/stdtypes.html#str.rstrip. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6312005)
  str.rstrip()  doesn't remove an exact string -- it removes all characters that occur in the string.  Since you know the length of the string to remove, you can simply use 

  str(test1)[:-9]
  

  

  test1.date().isoformat()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53375121)
 First of all, to join to lists you can use simple  +  operator: 

  >>> l1 = [1, 2, 3]
>>> l2 = [4, 5, 6]
>>> merged = l1 + l2
>>> print(merged)
[1, 2, 3, 4, 5, 6]
  

 Now for sorting use python built-in https://docs.python.org/2/howto/sorting.html function: 

 
   Python lists have a built-in list.sort() method that modifies the list
  in-place.
  By default, sort() doesn't require any extra parameters. However, it
  has two optional parameters: 
  
   reverse - If true, the sorted list is reversed (or sorted in
  Descending order)  
  
   key - function that serves as a key for the sort
  comparison 
 

  >>> l1 = [1, 2, 3]
>>> l2 = [4, 5, 6]
>>> merged = l2 + l1
>>> print(merged)
[4, 5, 6, 1, 2, 3]
>>> merged.sort(key=int)
>>> print(merged)
[1, 2, 3, 4, 5, 6]
  

 Edit 

 @Murray above-mentioned solution works just fine but it doesn't fit your use case since in your text files you have list alike string: 

 
   This is numbers1.txt: [0, 4, 6, 6, 22, 23, 44] and this is numbers2.txt: [1, 4, 5, 6, 7, 22, 777] â€“ Murray 1 hour ago 
 

 Now when you read file as  list1/list2  actually you'll get a list with one element which is a string. 

  >>> with open("numbers1.txt", "r") as f:
...     print(list1)
...     print(type(list1))
...     print(len(list1))
...     print(type(list1[0]))
... 
['[0, 4, 6, 6, 22, 23, 44]']
<type 'list'>
1
<type 'str'>
  

 In order to append those numbers from file you'll need to parse them first. It can be achieved like so (depending on your exact use case final solution may vary): 

  $ cat numbers1.txt 
[0, 4, 6, 6, 22, 23, 44]
$ cat numbers2.txt 
[1, 4, 5, 6, 7, 22, 777]
$ cat test.py 
files = ['numbers1.txt', 'numbers2.txt']
merged = []

for f in files:
    with open(f,'r') as lines:
        for line in lines:
            for num in line.rstrip().strip('[]').split(', '):
                merged.append(int(num))

print(merged)
merged.sort()
print(merged)
$ python test.py 
[0, 4, 6, 6, 22, 23, 44, 1, 4, 5, 6, 7, 22, 777]
[0, 1, 4, 4, 5, 6, 6, 6, 7, 22, 22, 23, 44, 777]
$ python3 test.py 
[0, 4, 6, 6, 22, 23, 44, 1, 4, 5, 6, 7, 22, 777]
[0, 1, 4, 4, 5, 6, 6, 6, 7, 22, 22, 23, 44, 777]
  

 Now let me break down this code into pieces: 

 
 First of all open file(s). I have done it with for loop so I don't have to repeat  with open...  every time I want to open something (It's just easier and the code is more readable). 
 Read all lines from a file. (I've assumed that your file can have more than just one line with list like string) 
 Parse each line and append to list.

 
  line.rstrip()  - remove a trailing newline 
  .strip('[]')  - remove square brackets from string 
  .split(', ')  - split string by comma and space to get array of string characters 
  merged.append(int(num))  for each character parse it to int and append to list. 
  
 Last but not least sort list. 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2396247)
 Obviously the file is too large to be read into memory all at once. 

 Why not just use: 

  with open("data.txt") as myfile:
    for line in myfile:
        do_something(line.rstrip("\n"))
  

 or, if you're not on Python 2.6 and higher: 

  myfile = open("data.txt")
for line in myfile:
    do_something(line.rstrip("\n"))
  

 In both cases, you'll get an iterator that can be treated much like a list of strings. 

 EDIT: Since your way of reading the entire file into one large string and then splitting it on newlines will remove the newlines in the process, I have added a  .rstrip("\n")  to my examples in order to better simulate the result. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40608278)
 You could use  str.rstrip : 

  def trailing(s):
    return len(s) - len(s.rstrip('0'))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24753995)
 You might want to replace that text like this 

  if 'Server version: ' in line:
    print line.rstrip().replace('-- Server version: ', '')
  

 We do  line.rstrip()  because the read  line  will have a new line at the end and we strip that. 



