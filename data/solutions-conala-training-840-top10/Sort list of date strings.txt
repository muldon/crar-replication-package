Query: Sort list of date strings
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29070349)
 Just call  sorted()  with the  key  argument set to a function that extracts and converts the date from the string into a  datetime.datetime  object. 

  >>> from datetime import datetime
>>> a = ["08/19/2014100%ABC10/02/2014F","02/12/2012100%ABC10/02/2014F", "08/29/2014100%ABC10/02/2012F"]
>>> sorted_a = sorted(a, key=lambda s: datetime.strptime(s[:10], '%m/%d/%Y'))
>>> sorted_a
['02/12/2012100%ABC10/02/2014F', '08/19/2014100%ABC10/02/2014F', '08/29/2014100%ABC10/02/2012F']
  

 Or, if you want to sort in place: 

  >>> a.sort(key=lambda s: datetime.strptime(s[:10], '%m/%d/%Y'))
>>> a
['02/12/2012100%ABC10/02/2014F', '08/19/2014100%ABC10/02/2014F', '08/29/2014100%ABC10/02/2012F']
  

 If you actually mean to sort on the last date in the string just change the key function to: 

  lambda s: datetime.strptime(s[-11:-1], '%m/%d/%Y')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35147167)
 Convert to datetime objects before sort.  

  sorted_lists = sorted(zip(new_date_list, flipkart_sale_list, paytm_sale_list), key=lambda x: datetime.datetime.strptime(x[0], "%b %d"))
new_date_list, flipkart_sale_list, paytm_sale_list = [[x[i] for x in sorted_lists] for i in range(3)]
  

  

  >>> new_date_list
['Jan 04', 'Jan 05', 'Jan 06', 'Jan 07', 'Feb 01', 'Feb 02']
>>> flipkart_sale_list
[1000, 9000, 5000, 4000, 3000, 6000]
>>> paytm_sale_list
[4000, 1000, 2200, 2500, 3500, 5000]
  

 As suggested by @StefanPochmann, this 

  new_date_list, flipkart_sale_list, paytm_sale_list = [[x[i] for x in sorted_lists] for i in range(3)]
  

 can also be done by zip 

  new_date_list, flipkart_sale_list, paytm_sale_list = map(list, zip(*sorted_lists))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54889591)
 Code below. 

 Create a named tuple that will keep the file date. Sort the list using the date as key. 

  from collections import namedtuple, defaultdict
import datetime

FileAttr = namedtuple('FileAttr', 'name date')
files = ['LOGS\LOG_20190218_91_02.LOG',
         'LOGS\LOG_20190218_91_05.LOG',
         'LOGS\LOG_20190218_91_00.LOG',
         'LOGS\LOG_20190218_91_22.LOG',
         'LOGS\LOG_20190218_91_10.LOG',
         'LOGS\LOG_20190219_56_22.LOG',
         'LOGS\LOG_20190219_56_24.LOG',
         'LOGS\LOG_20190219_56_25.LOG',
         'LOGS\LOG_20190219_56_26.LOG',
         'LOGS\LOG_20180219_56_26.LOG',
         'LOGS\LOG_20170219_56_26.LOG',
         'LOGS\LOG_20190219_56_03.LOG',
         'LOGS\LOG_20190220_56_22.LOG',
         'LOGS\LOG_20190220_56_07.LOG',
         'LOGS\LOG_20190220_56_13.LOG',
         'LOGS\LOG_20190220_56_17.LOG',
         'LOGS\LOG_20190220_56_21.LOG']
files_ex = []

for f in files:
    left_idx = f.find('_')
    right_idx = f.find('.')
    date_part = f[left_idx + 1:right_idx][:-6]
    year = int(date_part[:4])
    month = int(date_part[4:6])
    day = int(date_part[6:8])
    dt = datetime.datetime(year, month, day)
    files_ex.append(FileAttr(f, dt))
sorted_files_ex = sorted(files_ex, key=lambda x: x[1])

files_by_date = defaultdict(list)
for file_attr in sorted_files_ex:
    files_by_date[file_attr.date].append(file_attr.name)
for date, files in files_by_date.items():
    print('{} --> {}'.format(date, files))
  

 Output: 

  2019-02-18 00:00:00 --> ['LOGS\\LOG_20190218_91_02.LOG', 'LOGS\\LOG_20190218_91_05.LOG', 'LOGS\\LOG_20190218_91_00.LOG', 'LOGS\\LOG_20190218_91_22.LOG', 'LOGS\\LOG_20190218_91_10.LOG']
2019-02-19 00:00:00 --> ['LOGS\\LOG_20190219_56_22.LOG', 'LOGS\\LOG_20190219_56_24.LOG', 'LOGS\\LOG_20190219_56_25.LOG', 'LOGS\\LOG_20190219_56_26.LOG', 'LOGS\\LOG_20190219_56_03.LOG']
2017-02-19 00:00:00 --> ['LOGS\\LOG_20170219_56_26.LOG']
2018-02-19 00:00:00 --> ['LOGS\\LOG_20180219_56_26.LOG']
2019-02-20 00:00:00 --> ['LOGS\\LOG_20190220_56_22.LOG', 'LOGS\\LOG_20190220_56_07.LOG', 'LOGS\\LOG_20190220_56_13.LOG', 'LOGS\\LOG_20190220_56_17.LOG', 'LOGS\\LOG_20190220_56_21.LOG']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16701354)
 You can sort your list with a key functions (http://wiki.python.org/moin/HowTo/Sorting/), which function should convert the date strings to time with  strptime  (<a href="http://docs.python.org/2/library/time.html#time.strptime" ). 

  import time

def to_time(tup):
    return time.strptime(tup[4], "%a %b %d %X PDT %Y")

sorted(defaultdict['1116372240485'], key=to_time)
  

 This will only sort each of your dictionary entries, not the whole dictionary. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2589499)
 Fortunately, ISO format dates, which seems to be what you have here, sort perfectly well  as strings !  So you need nothing fancy: 

  import operator
yourlistofdicts.sort(key=operator.itemgetter('date'))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39312403)
 You cannot compare the dates as strings because of the order  mm/dd/yyyy , you could use  datetime  to :    

  from datetime import datetime
strp = datetime.strptime

srted = sorted(dataLst, key=lambda sub: (strp(sub[2],"%m/%d/%Y"), -sub[1]))
  

 Or just split and reverse the order of the date to  yyyy, mm, dd:  

  def iso(sub):
    mm, dd, yy = sub.split("/")
    return yy, mm, dd

srted = sorted(dataLst, key=lambda sub: (iso(sub[2]), -sub[1]))
  

 Both give you the same output: 

   In [24]: sorted(dataLst, key=lambda sub: (iso( sub[2]), -sub[1]))Out[24]: 
[['Dave', 500, '08/01/2016'],
 ['Bob', 100, '08/10/2016'],
 ['Mike', 50, '08/10/2016'],
 ['Paul', -50, '08/20/2016'],
 ['Sam', 250, '08/30/2016']]

In [25]: sorted(dataLst, key=lambda sub: (strp(sub[2],"%m/%d/%Y"), -sub[1]))

Out[25]: 
[['Dave', 500, '08/01/2016'],
 ['Bob', 100, '08/10/2016'],
 ['Mike', 50, '08/10/2016'],
 ['Paul', -50, '08/20/2016'],
 ['Sam', 250, '08/30/2016']]
  

 The difference is splitting is way faster as you can see below: 

  In [28]: timeit  sorted(dataLst, key=lambda sub: (strp(sub[2],"%m/%d/%Y"), -sub[1]))
10000 loops, best of 3: 66.4 µs per loop

In [29]: timeit sorted(dataLst, key=lambda sub: (iso( sub[2]), -sub[1]))
100000 loops, best of 3: 4.97 µs per loop
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54889456)
 A clean way to do this would be using dictionaries. In this case the keys would be the dates and the values would be the corresponding list. In order to group the elements in the list you could use  itertools.groupby . You also need to specify that you want to group the list using the date, for that you can extract the date substring from each string in the  key  argument: 

  from itertools import groupby
from operator import itemgetter

d = {k:list(v) for k,v in groupby(data, key=lambda x: itemgetter(1)(x.split('_')))}
  

  

  d['20190220']

['LOGS\\LOG_20190220_56_22.LOG\n',
 'LOGS\\LOG_20190220_56_07.LOG\n',
 'LOGS\\LOG_20190220_56_13.LOG\n',
 'LOGS\\LOG_20190220_56_17.LOG\n',
 'LOGS\\LOG_20190220_56_21.LOG']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11775854)
 Convert the keys to  datetime.date  values; using  .items()  would give you tuples of both key and value that you can then sort: 

  data = [(datetime.datetime.strptime(k, '%d.%m.%Y').date(), v) 
        for k, v in yourdict.items()]
data.sort()
  

 Then index these; data[5][0] is the date, data[5][1] is the dictionary value. 

 If you need to retain the original date formatting, use the date format parsing only for sorting; here's a one-liner variant of the above that uses a sort key: 

  data = sorted(yourdict.items(), 
              key=lambda i: datetime.datetime.strptime(i[0], '%d.%m.%Y'))
  

 Here I use the http://docs.python.org/py3k/library/functions.html#sorted to do the hard work, and the  key  lambda takes each date string, converting it to a  datetime.datetime  instance for sorting purposes only. I don't limit this to a  datetime.date  instance as in the first example. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31996010)
 Why not use  strptime  to store them as  datetime  objects. These objects can easily be compared and sorted that way. 

  import datetime
try:
    date = datetime.datetime.strptime("08/03/2015", "%m/%d/%Y")
except:
    date = datetime.datetime.strptime("08/04/15", "%m/%d/%y")
finally:
    dateList.append(date)
  

 Note the difference between  %Y  and  %y . You can then just compare dates made this way to see which ones are greater or less. You can also sort it using  dateList.sort()  

 If you want the date as a string again you can use: 

  >>> dateString = date.strftime("%Y-%m-%d")
>>> print dateString
'2015-08-03'
  



