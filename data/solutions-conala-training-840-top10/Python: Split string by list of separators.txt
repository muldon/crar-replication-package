Query: Python: Split string by list of separators
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/113555)
  >>> import re
>>> re.split(r"(\s+)", "This is the string I want to split")
['This', ' ', 'is', ' ', 'the', ' ', 'string', ' ', 'I', ' ', 'want', ' ', 'to', ' ', 'split']
  

 Using the capturing parentheses in re.split() causes the function to return the separators as well. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14355561)
 If you don't need whitespace you could use : 

  "t1, t2, t3,t4".replace(" ", "").split(",")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14530141)
 Heres one idea.  

  def spec_split(seq,sep):
    # Ideally this separator will never be in your list
    odd_sep = "!@#$%^&*()"

    # Join all the items with the odd separator and split
    # anywhere the odd separator + separator + odd seperator meet
    # This makes a list of items broken by the separator
    jumble = odd_sep.join(seq).split(odd_sep+sep+odd_sep)

    # split the remaining items broken by odd separators into sublists
    return [item.split(odd_sep) for item in jumble] 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14354580)
 Either split them by  ", "  (note the space) or  strip  the words after that: 

  [e.strip() for e in "t1, t2, t3,t4".split(",")]
>>> ['t1', 't2', 't3', 't4']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33544666)
 You could replace all the string's  \0  characters with whitespace before the  split() : 

  >>> ' a \0 b \0 c \0 '.replace('\0', ' ').split()
['a', 'b', 'c']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50576156)
 another example, split on non alpha-numeric and keep the separators 

  import re
a = "foo,bar@candy*ice%cream"
re.split('([^a-zA-Z0-9])',a)
  

 output: 

  ['foo', ',', 'bar', '@', 'candy', '*', 'ice', '%', 'cream']
  

  

  re.split('([^a-zA-Z0-9])',a)

() <- keep the separators
[] <- match everything in between
^a-zA-Z0-9 <-except alphabets, upper/lower and numbers.
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11214112)
  def is_doublespace_separated(input_string):
    return '  '.join(input_string.split()) == input_string.strip()
  

 This works because  string.split  will split your string on any whitespace.  and  string.join  joins the list with the separator  string .  In this case, we use the separator  '  '  (two spaces) to re-join your string and then compare it against the stripped version (I sense you already know what strip does).   

 **This will ignore whitespace at the front of the string as well as at the end. 



