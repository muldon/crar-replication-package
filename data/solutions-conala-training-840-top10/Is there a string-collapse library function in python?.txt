Query: Is there a string-collapse library function in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1249850)
 The built-in  string.split()  method will split on runs of whitespace, so you can use that and then join the resulting list using spaces, like this: 

  ' '.join(my_string.split())
  

 Here's a complete test script: 

  TEST = """This
is        a test\twith a
  mix of\ttabs,     newlines and repeating
whitespace"""

print ' '.join(TEST.split())
# Prints:
# This is a test with a mix of tabs, newlines and repeating whitespace
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1249870)
 You had the right idea, you just needed to read the python manual a little more closely: 

  import re
somewhitespace = re.compile(r'\s+')
TEST = """This
is        a test\twith a
  mix of\ttabs,     newlines and repeating
whitespace"""

somewhitespace.sub(' ', TEST)

'This is a test with a mix of tabs, newlines and repeating whitespace'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20985070)
 Python string parsing walkthrough 

  Split a string on space, get a list, show its type, print it out:  

  el@apollo:~/foo$ python
>>> mystring = "What does the fox say?"

>>> mylist = mystring.split(" ")

>>> print type(mylist)
<type 'list'>

>>> print mylist
['What', 'does', 'the', 'fox', 'say?']
  

  If you have two delimiters next to each other, empty string is assumed:  

  el@apollo:~/foo$ python
>>> mystring = "its  so   fluffy   im gonna    DIE!!!"

>>> print mystring.split(" ")
['its', '', 'so', '', '', 'fluffy', '', '', 'im', 'gonna', '', '', '', 'DIE!!!']
  

  Split a string on underscore and grab the 5th item in the list:  

  el@apollo:~/foo$ python
>>> mystring = "Time_to_fire_up_Kowalski's_Nuclear_reactor."

>>> mystring.split("_")[4]
"Kowalski's"
  

  Collapse multiple spaces into one  

  el@apollo:~/foo$ python
>>> mystring = 'collapse    these       spaces'

>>> mycollapsedstring = ' '.join(mystring.split())

>>> print mycollapsedstring.split(' ')
['collapse', 'these', 'spaces']
  

 When you pass no parameter to Python's split method, https://docs.python.org/2/library/stdtypes.html#str.split: "runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace". 

  Hold onto your hats boys, parse on a regular expression:  

  el@apollo:~/foo$ python
>>> mystring = 'zzzzzzabczzzzzzdefzzzzzzzzzghizzzzzzzzzzzz'
>>> import re
>>> mylist = re.split("[a-m]+", mystring)
>>> print mylist
['zzzzzz', 'zzzzzz', 'zzzzzzzzz', 'zzzzzzzzzzzz']
  

 The regular expression "[a-m]+" means the lowercase letters  a  through  m  that occur one or more times are matched as a delimiter.  re  is a library to be imported. 

  Or if you want to chomp the items one at a time:  

  el@apollo:~/foo$ python
>>> mystring = "theres coffee in that nebula"

>>> mytuple = mystring.partition(" ")

>>> print type(mytuple)
<type 'tuple'>

>>> print mytuple
('theres', ' ', 'coffee in that nebula')

>>> print mytuple[0]
theres

>>> print mytuple[2]
coffee in that nebula
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1274918)
 Here's a single-step approach (but the uppercasing actually uses a string method -- much simpler!) 

  rex = re.compile(r'\W+')
result = rex.sub(' ', strarg).upper()
  

 where  strarg  is the string argument ( don't  use names that shadow builtins or standard library modules,  please ). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11603248)
  

  s = 'a b   c   d      e'
  

  

  ' '.join(s.split())
'a b c d e'
  

 will give you the specified output.  

 This works by using http://docs.python.org/library/stdtypes.html?highlight=split#str.split to break the string into into a list of individual characters  ['a', 'b', 'c', 'd', 'e']  and  joining them again with a single space in-between using the http://docs.python.org/library/stdtypes.html?highlight=join#str.join function into a string. The  split()  also takes care of any leading or trailing blanks. 

 Based on  Simple is better than complex  (Zen of Python) in order to avoid the regex "http://regex.info/blog/2006-09-15/247" problem :) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16407660)
 Use a list, then join the individual characters together again: 

  def Uppercase(s):
    result = []
    for ch in s:
        value = ord(ch)
        if 97 <= value <= 122:
            value -= 32
        result.append(chr(value))

    return ''.join(result)
  

 My version only changes characters with byte values between 97 ( a ) and 122 ( z ). http://docs.python.org/2/library/stdtypes.html#str.join turns a list of strings back into one string, with an optional delimiter text (here left empty). 

 You can collapse this down into a list comprehension that does the same thing: 

  def Uppercase(s):
    return ''.join([chr(ord(ch) - 32) if 'a' <= ch <= 'z' else ch for ch in s])
  

 but that might be less easily understood if you are just beginning with Python. 

 The  if  statement of the first version has been replaced with a http://docs.python.org/2/reference/expressions.html#conditional-expressions; the form  true_expression if some_test else false_expression  first evaluates  some_test , then based on the outcome returns  true_expression  or  false_expression . 

  

  >>> Uppercase('Hello world!')
'HELLO WORLD!'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20989238)
 Because  processFunc  must be a  function , not the  result  of calling a function. 

  

  processFunc = collapse and " ".join(s.split()) or s
  

 Will raise a  NameError  because  s  is not defined. If  s  was defined then, depending on what  collapse  is it might evaluate to to the  string   " ".join(s.split())  or to the  s . 

  

  processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
  

 Will evaluate to the  function   (lambda s: " ".join(s.split()))  if  collapse  is true, or to the function  (lambda s: s)  otherwise. 

 Note that writing  A and B or C  is somewhat equivalent to writing  B if A else C , although they are  not  100% equivalent, because in the  if  version only  A s boolean value is important to determining the result of the expression, while in the other code if  A  is true and  B  is false the result is  C . 

 You should really re-write that line as: 

  processFunc = (lambda s: " ".join(s.split())) if collapse else (lambda s: s)
  

 Although  in this specific case  the  and + or  form is equivalent because all  lambda s are true. 

 And you might even replace the  lambda s with real functions to enhance readability: 

  def identity(x):
    return x

def normalize_spaces(s):
    return ' '.join(s.split())

processFunc = normalize_spaces if collapse else identity
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22213412)
 works in python3 this will retain the same whitespace character you collapsed. So if you have a tab and a space next to each other they wont collapse into a single character. 

  def collapse_whitespace_characters(raw_text):
    ret = ''
    if len(raw_text) > 1:
        prev_char = raw_text[0]
        ret += prev_char
        for cur_char in raw_text[1:]:
            if not cur_char.isspace() or cur_char != prev_char:
                ret += cur_char
            prev_char = cur_char
    else:
        ret = raw_text
    return ret
  

 this one will collapse whitespace sets into the first whitespace character it sees 

  def collapse_whitespace(raw_text):
    ret = ''
    if len(raw_text) > 1:
        prev_char = raw_text[0]
        ret += prev_char
        for cur_char in raw_text[1:]:
            if not cur_char.isspace() or \
                    (cur_char.isspace() and not prev_char.isspace()):
                ret += cur_char
            prev_char = cur_char
    else:
        ret = raw_text
    return ret
  

 >>> collapse_whitespace_characters('we&nbsp;like&nbsp;&nbsp;&nbsp;&nbsp;spaces&nbsp;&nbsp;and\t\t&nbsp;TABS&nbsp;&nbsp;&nbsp;AND&nbsp;WHATEVER\xa0\xa0IS') 
'we like spaces and\t TABS\tAND WHATEVER\xa0IS'
  
>>> collapse_whitespace('we&nbsp;like&nbsp;&nbsp;&nbsp;&nbsp;spaces&nbsp;&nbsp;and\t\t&nbsp;TABS&nbsp;&nbsp;&nbsp;AND&nbsp;WHATEVER\xa0\xa0IS')
 
'we like spaces and\tTABS\tAND WHATEVER\xa0IS' 

 for punctuation 

  def collapse_punctuation(raw_text):
    ret = ''
    if len(raw_text) > 1:
        prev_char = raw_text[0]
        ret += prev_char
        for cur_char in raw_text[1:]:
            if cur_char.isalnum() or cur_char != prev_char:
                ret += cur_char
            prev_char = cur_char
    else:
        ret = raw_text
    return ret
  

 to actually answer the question 

  orig = 'stuff   .  // : /// more-stuff .. .. ...$%$% stuff -> DD'
collapse_whitespace(''.join([(c.upper() if c.isalnum() else ' ') for c in orig]))
  

 as said, the regexp would be something like 

  re.sub('\W+', ' ', orig).upper()
  



