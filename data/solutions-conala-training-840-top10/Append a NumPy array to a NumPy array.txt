Query: Append a NumPy array to a NumPy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9775378)
  In [1]: import numpy as np

In [2]: a = np.array([[1, 2, 3], [4, 5, 6]])

In [3]: b = np.array([[9, 8, 7], [6, 5, 4]])

In [4]: np.concatenate((a, b))
Out[4]: 
array([[1, 2, 3],
       [4, 5, 6],
       [9, 8, 7],
       [6, 5, 4]])
  

 or this: 

  In [1]: a = np.array([1, 2, 3])

In [2]: b = np.array([4, 5, 6])

In [3]: np.vstack((a, b))
Out[3]: 
array([[1, 2, 3],
       [4, 5, 6]])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38351283)
 You may use  numpy.append() ...  

  import numpy

B = numpy.array([3])
A = numpy.array([1, 2, 2])
B = numpy.append( B , A )

print B

> [3 1 2 2]
  

 This will not create two separate arrays but will append two arrays into a single dimensional array. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29840311)
 OP intended to start with empty array. So, here's one approach using NumPy 

  In [2]: a = np.empty((0,3), int)

In [3]: a
Out[3]: array([], shape=(0L, 3L), dtype=int32)

In [4]: a = np.append(a, [[1,2,3]], axis=0)

In [5]: a
Out[5]: array([[1, 2, 3]])

In [6]: a = np.append(a, [[1,2,3]], axis=0)

In [7]: a
Out[7]:
array([[1, 2, 3],
       [1, 2, 3]])
  

  BUT , if you're appending in a large number of loops. It's faster to append list first and convert to array than appending NumPy arrays. 

  In [8]: %%timeit
   ...: list_a = []
   ...: for _ in xrange(10000):
   ...:     list_a.append([1, 2, 3])
   ...: list_a = np.asarray(list_a)
   ...:
100 loops, best of 3: 5.95 ms per loop

In [9]: %%timeit
   ....: arr_a = np.empty((0, 3), int)
   ....: for _ in xrange(10000):
   ....:     arr_a = np.append(arr_a, np.array([[1,2,3]]), 0)
   ....:
10 loops, best of 3: 110 ms per loop
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35466633)
 You want  http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.vstack.html#numpy.vstack : 

  In [45]: a = np.array([[1,2,3]])

In [46]: l = [4,5,6]

In [47]: np.vstack([a,l])
Out[47]: 
array([[1, 2, 3],
       [4, 5, 6]])
  

 You can stack multiple rows on the condition that  The arrays must have the same shape along all but the first axis.  

  In [53]: np.vstack([a,[[4,5,6], [7,8,9]]])
Out[53]: 
array([[1, 2, 3],
       [4, 5, 6],
       [4, 5, 6],
       [7, 8, 9]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42829696)
 Actually one can always create an ordinary list of numpy arrays and convert it later. 

  In [1]: import numpy as np

In [2]: a = np.array([[1,2],[3,4]])

In [3]: b = np.array([[1,2],[3,4]])

In [4]: l = [a]

In [5]: l.append(b)

In [6]: l = np.array(l)

In [7]: l.shape
Out[7]: (2, 2, 2)

In [8]: l
Out[8]: 
array([[[1, 2],
        [3, 4]],

       [[1, 2],
        [3, 4]]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9775350)
 Well, the error message says it all:  NumPy arrays do not have an  append()  method.  There's a free function http://docs.scipy.org/doc/numpy/reference/generated/numpy.append.html however: 

  numpy.append(M, a)
  

 This will create a new array instead of mutating  M  in place.  Note that using  numpy.append()  involves copying both arrays.  You will get better performing code if you use fixed-sized NumPy arrays. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42545300)
 Nest the arrays so that they have more than one axis, and then specify the axis when using  append . 

  import numpy as np
a = np.array([[1, 2]]) # note the braces
b = np.array([[3, 4]])
c = np.array([[5, 6]])

d = np.append(a, b, axis=0)
print(d)
# [[1 2]
#  [3 4]]

e = np.append(d, c, axis=0)
print(e)
# [[1 2]
#  [3 4]
#  [5 6]]
  

 Alternately, if you stick with lists, use https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html: 

  import numpy as np
a = [1, 2]
b = [3, 4]
c = [5, 6]

d = np.vstack([a, b])
print(d)
# [[1 2]
#  [3 4]]

e = np.vstack([d, c])
print(e)
# [[1 2]
#  [3 4]
#  [5 6]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42395295)
 You can use  numpy.append : 

  import numpy as np
a = np.array(['x', 'y'])

np.append(a, 'z')
# array(['x', 'y', 'z'], 
#       dtype='<U1')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38313465)
 You can use  numpy.append()  to append a row to numpty array and reshape to a matrix later on. 

  import numpy as np
a = np.array([1,2])
a = np.append(a, [3,4])
print a
# [1,2,3,4]
# in your example
A = [1,2]
for row in X:
    A = np.append(A, row)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/29839417)
 I think you're looking for http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html: 

  >>> import numpy as np
>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> np.vstack((a, b))
array([[1, 2, 3],
       [1, 2, 3]])
  



