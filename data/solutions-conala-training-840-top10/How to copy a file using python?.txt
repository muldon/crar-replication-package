Query: How to copy a file using python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47340435)
 The https://docs.python.org/3/library/shutil.html module has a function designed for this purpose: 

  import shutil
shutil.copy(src, dst)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33089522)
 Here is a simple example 

  def copy(file, target):
    with open(file) as fp, open(target, "w") as tp:
        tp.writelines(fp.readlines())

copy(input("File to copy"), input("Copy to"))
  

 I haven't tested it but it should work fine. However I'd recommend using https://docs.python.org/3.4/library/shutil.html#shutil.copy 

 

 If you want to do copy and execute/evaluate code in another file, unless it is a .py file, you could do  

  with open(filename) as fp:
    exec(fp.read())

len(´var_in_otherfile´)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11584338)
 You can iterate over lines in a file object in Python by iterating over the file object itself: 

  for line in f:
    copy.write(line)
  

 From the http://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects: 

 
   An alternative approach to reading lines is to loop over the file object. This is memory efficient, fast, and leads to simpler code: 
 

  >>> for line in f:
        print line,
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45694203)
 I suggest using https://stackoverflow.com/a/123212/6327658 answer, but supposing you have a  text file  and don't want to use additional libraries in your code just to copy it, you can use the following one-liner: 

  with open(source, 'r') as src, open(dest, 'w') as dst: dst.write(src.read())
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11584388)
 Files can be iterated directly, without the need for an explicit call to  readline : 

  f = open("...", "r")
copy = open("...", "w")
for line in f:
    copy.write(line)
f.close()
copy.close()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34358075)
 You should be using https://docs.python.org/2/library/shutil.html 

  shutil.copy("HI.xlsx", "BYE.xlsx")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53075475)
 Lucas, I find the following way works ~20% faster than win32file.CopyFile. 

  b = bytearray(8 * 1024 * 1024) 
# I find 8-16MB is the best for me, you try to can increase it 
with io.open(f_src, "rb") as in_file:
    with io.open(f_dest, "wb") as out_file:
        while True:
            numread = in_file.readinto(b)
            if not numread:
                break
            out_file.write(b)
            # status bar update here
shutil.copymode(f_src, f_dest)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21799656)
 Your problem has nothing to do with Python. In fact, the Windows copy process is really poor compared to the Linux system. 

 You can improve this by using  xcopy  or  robocopy  according to this post: https://superuser.com/questions/302753/is-ubuntu-linux-file-copying-algorithm-better-than-windows-7. But in this case, you have to make different calls for Linux and Windows... 

  import os
import shutil
import sys

source = "source\to\large\file"
target = "destination\directory"

if sys.platform == 'win32':
    os.system('xcopy "%s" "%s"' % (source, target))
else:
    shutil.copy(source, target)
  

 See also:  

 
 http://www.codinghorror.com/blog/2008/03/actual-performance-perceived-performance.html, Jeff Atwood blog post about this subject 
 https://stackoverflow.com/questions/14975481/windows-xcopy-is-not-working-in-python, which gives the syntax for using xcopy on Windows in fact 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15832909)
 To answer your question 2.: 

 shutil.copyfile() is so slow, because by default it uses a 16Kbyte copy buffer. Eventually it ends up in shutil.copyfileobj(), which looks like this: 

  def copyfileobj(fsrc, fdst, length=16*1024):
    """copy data from file-like object fsrc to file-like object fdst"""
    while 1:
        buf = fsrc.read(length)
        if not buf:
            break
        fdst.write(buf)
  

 In your case it's ping-ponging between reading 16K and writing 16K. If you were to use copyfileobj() directly on your GB file, but with a buffer of 128MB for example, you would see drastically improved performance. 



