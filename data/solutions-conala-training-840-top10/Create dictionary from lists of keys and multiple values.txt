Query: Create dictionary from lists of keys and multiple values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29406038)
 You can use https://docs.python.org/2/library/collections.html#collections.defaultdict for such tasks : 

  >>> from collections import defaultdict
>>> d=defaultdict(list)
>>> for i,j in zip(list1,list2):
...    d[i].append(j)
... 
>>> d
defaultdict(<type 'list'>, {'vegetable': ['carrot'], 'fruit': ['apple', 'banana']})
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35179457)
  

  def get_dic_from_two_lists(keys, values):
    return { keys[i] : values[i] for i in range(len(keys)) }
  

 Assume we have two lists  country  and  capital  

  country = ['India', 'Pakistan', 'China']
capital = ['New Delhi', 'Islamabad', 'Beijing']
  

 Then create dictionary from the two lists: 

  print get_dic_from_two_lists(country, capital)
  

 The output is like this, 

  {'Pakistan': 'Islamabad', 'China': 'Beijing', 'India': 'New Delhi'}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12692449)
 Here's one way to get it: 

  header = ["Name", "Age"]
detail = ["Joe", 22, "Dave", 43, "Herb", 32]
data_iter = iter(detail)
collated = []
while True:
    next_data = zip(header, data_iter)
    if not next_data:
        break
    collated.append(dict(next_data))
  

 output is 

  [{'Age': 22, 'Name': 'Joe'},
 {'Age': 43, 'Name': 'Dave'},
 {'Age': 32, 'Name': 'Herb'}]
  

 This version has the advantage that you don't need to change the code if you change the number of headers. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29406039)
 You can use  dict.setdefault  and a simple for-loop: 

  >>> list1 = ["fruit", "fruit", "vegetable"]
>>> list2 = ["apple", "banana", "carrot"]
>>> dct = {}
>>> for i, j in zip(list1, list2):
...     dct.setdefault(i, []).append(j)
... 
>>> dct
{'fruit': ['apple', 'banana'], 'vegetable': ['carrot']}
  

 From the https://docs.python.org/3/library/stdtypes.html#dict.setdefault: 

 
    setdefault(key[, default])  
  
   If  key  is in the dictionary, return its value. If not, insert  key  with a value of  default  and return  default .  default  defaults to  None . 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29406091)
 This is a bit different from the other answers. It is a bit simpler for beginners. 

  list1 = ['fruit', 'fruit', 'vegetable']
list2 = ['apple', 'banana', 'carrot']
dictionary = {}

for i in list1:
    dictionary[i] = []

for i in range(0,len(list1)):
    dictionary[list1[i]].append(list2[i])
  

  

  {'vegetable': ['carrot'], 'fruit': ['apple', 'banana']}
  

 This code runs through  list1  and makes each item in it a key for an empty list in  dictionary . It then goes from 0-2 and appends each item in  list2  to its appropriate category, so that index 0 in each match up, index 1 in each match up, and index 2 in each match up. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49271910)
 As already mentioned, your desired output is not possible as dictionary keys must be unique. 

 Below are 2 alternatives if you do not want to lose data. 

  List of tuples  

  res = [(i, j) for i, j in zip(keys, values)]

# [(18, [7, 8, 9]),
#  (34, [4, 5, 6]),
#  (30, [1, 2, 3]),
#  (30, [10, 11, 12]),
#  (18, [13, 14, 15])]
  

  Dictionary of lists  

  from collections import defaultdict

res = defaultdict(list)

for i, j in zip(keys, values):
    res[i].append(j)

# defaultdict(list,
#             {18: [[7, 8, 9], [13, 14, 15]],
#              30: [[1, 2, 3], [10, 11, 12]],
#              34: [[4, 5, 6]]})
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36533355)
 Your dict keys may be some kinda list, so you can append multiple values to it.  

  switches['s1'] = {}
switches['s1']['port1'] = list()
switches['s1']['port1'].append([0, 0, 0])
switches['s1']['port1'].append([1, 1, 1])
  

 Also if you add single values you may also put them into a list so you can access the dict always by the same way: 

  switches['s1']['port2'] = list([2,2,2])
  

 Getting the first port would be  

  print(switches['s1']['portN'][0]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43690117)
  

  d = {}; [d.setdefault(i,[]).append(k) for k,v in key_to_list.items() for i in v]
print d
  

 this results in  

  {1: ['three', 'one'],
 2: ['four', 'three', 'two'],
 3: ['one'],
 4: ['two'],
 5: ['four', 'three', 'one'],
 6: ['three', 'two'],
 7: ['four', 'one'],
 8: ['four', 'two']}
  



