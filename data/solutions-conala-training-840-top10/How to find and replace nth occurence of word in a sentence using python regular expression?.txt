Query: How to find and replace nth occurence of word in a sentence using python regular expression?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/27589436)
 Here's a way to do it without a regex: 

  def replaceNth(s, source, target, n):
    inds = [i for i in range(len(s) - len(source)+1) if s[i:i+len(source)]==source]
    if len(inds) < n:
        return  # or maybe raise an error
    s = list(s)  # can't assign to string slices. So, let's listify
    s[inds[n-1]:inds[n-1]+len(source)] = target  # do n-1 because we start from the first occurrence of the string, not the 0-th
    return ''.join(s)
  

  

  In [278]: s
Out[278]: 'cat goose  mouse horse pig cat cow'

In [279]: replaceNth(s, 'cat', 'Bull', 2)
Out[279]: 'cat goose  mouse horse pig Bull cow'

In [280]: print(replaceNth(s, 'cat', 'Bull', 3))
None
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29963010)
 I would define a function that will work for every regex: 

  import re

def replace_ith_instance(string, pattern, new_str, i = None, pattern_flags = 0):
    # If i is None - replacing last occurrence
    match_obj = re.finditer(r'{0}'.format(pattern), string, flags = pattern_flags)
    matches = [item for item in match_obj]
    if i == None:
        i = len(matches)
    if len(matches) == 0 or len(matches) < i:
        return string
    match = matches[i - 1]
    match_start_index = match.start()
    match_len = len(match.group())

    return '{0}{1}{2}'.format(string[0:match_start_index], new_str, string[match_start_index + match_len:])
  

 A working example: 

  str = 'cat goose  mouse horse pig cat cow'
ns = replace_ith_instance(str, 'cat', 'Bull', 2)
print(ns)
  

 The output: 

  cat goose  mouse horse pig Bull cow
  

 Another example: 

  str2 = 'abc abc def abc abc'
ns = replace_ith_instance(str2, 'abc\s*abc', '666')
print(ns)
  

 The output: 

  abc abc def 666
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35091930)
 I use simple function, which lists all occurrences, picks the nth one's position and uses it to split original string into two substrings. Then it replaces first occurrence in the second substring and joins substrings back into the new string: 

  import re

def replacenth(string, sub, wanted, n)
    where = [m.start() for m in re.finditer(sub, string)][n-1]
    before = string[:where]
    after = string[where:]
    after.replace(sub, wanted, 1)
    newString = before + after
    print newString
  

  

  string = 'ababababababababab'
sub = 'ab'
wanted = 'CD'
n = 5
  

 outputs: 

  ababababCDabababab
  

 Notes: 

 
   The  where  variable actually is a list of matches' positions, where you pick up the nth one. But list item index starts with  0  usually, not with  1 . Therefore there is a  n-1  index and  n  variable is the actual nth substring. My example finds 5th string. If you use  n  index and want to find 5th position, you'll need  n  to be  4 . Which you use usually depends on the function, which generates our  n . 
  
   This should be the simplest way, but it isn't regex only as you originally wanted. 
  
   Sources and some links in addition: 
  
   
    where  construction: https://stackoverflow.com/questions/4664850/find-all-occurrences-of-a-substring-in-python 
   string splitting: https://www.daniweb.com/programming/software-development/threads/452362/replace-nth-occurrence-of-any-sub-string-in-a-string 
   similar question: https://stackoverflow.com/questions/1883980/find-the-nth-occurrence-of-substring-in-a-string 
   
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46705963)
 The code you got from the previous question is a nice starting point, and only a minimal adaptation is required to have it change every nth occurence: 

  def nth_repl_all(s, sub, repl, nth):
    find = s.find(sub)
    # loop util we find no match
    i = 1
    while find != -1:
        # if i  is equal to nth we found nth matches so replace
        if i == nth:
            s = s[:find]+repl+s[find + len(sub):]
            i = 0
        # find + len(sub) + 1 means we start after the last match
        find = s.find(sub, find + len(sub) + 1)
        i += 1
    return s
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33053712)
 If with position you mean the nth word in the sentence, you can do the following: 

  words = sentence.split(' ')
if keyword in words:
    pos = words.index(keyword)
  

 This will split the sentence after each occurence of a space and save the sentence in a list (word-wise). If the sentence contains the keyword, https://docs.python.org/3/tutorial/datastructures.html will find its position. 

  EDIT : 

 The if statement is necessary to make sure the keyword is in the sentence, otherwise list.index() will raise a ValueError. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43177213)
 You can use the regular expression module, and rely on regular expression word boundaries ( \b ) to only match the complete word. 

 Since you're trying to remove the word from the sentence, here's an example that replaces all the matches with an empty string: 

  import re

sentence = 'Music world is worldwide'
word = 'world'
removed = re.sub(r'\b%s\b' % word, '', sentence)

print removed # prints "Music   is worldwide" 
  

 If you just want to find the position of the first occurrence, you can do it as follows: 

  import re

sentence = 'Music is worldwide in the world'
word = 'world'
match = re.search(r'\b%s\b' % word, sentence)

if match:
    print match.start() # prints 26
  

 Check the documentation of the https://docs.python.org/2/library/re.html module for details. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27589356)
 Use negative lookahead like below. 

  >>> s = "cat goose  mouse horse pig cat cow"
>>> re.sub(r'^(:!cat).)*cat:!cat).)*)cat', r'\1Bull', s)
'cat goose  mouse horse pig Bull cow'
  

 https://regex101.com/r/sS1qO8/4 

 
  ^  Asserts that we are at the start. 
  :!cat).)*  Matches any character but not of  cat  , zero or more times. 
  cat  matches the first  cat  substring. 
  :!cat).)*  Matches any character but not of  cat  , zero or more times. 
 Now, enclose all the patterns inside a capturing group like  (:!cat).)*cat:!cat).)*) , so that we could refer those captured chars on later. 
  cat  now the following second  cat  string is matched. 
 

    

  >>> s = "cat goose  mouse horse pig cat cow"
>>> re.sub(r'^(.*?(cat.*?){1})cat', r'\1Bull', s)
'cat goose  mouse horse pig Bull cow'
  

 Change the number inside the  {}  to replace the first or second or nth occurrence of the string  cat  

 To replace the third occurrence of the string  cat , put  2  inside the curly braces .. 

  >>> re.sub(r'^(.*?(cat.*?){2})cat', r'\1Bull', "cat goose  mouse horse pig cat foo cat cow")
'cat goose  mouse horse pig cat foo Bull cow'
  

 https://regex101.com/r/wP7pR2/52 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51710237)
 You can use  [a-z] : 

  import re
_input = ['AwordWOrd', 'Aword', 'A word', 'A word word', 'A(word) AND A pers']
results = [re.findall('[a-z]+', i) for i in _input] 
  

 Output: 

  [['word', 'rd'], ['word'], ['word'], ['word', 'word'], ['word', 'pers']]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20136700)
 The grouping for the regular expression is by the n<sup>th</sup> open paren: 

  #        12          3         4         5
re.sub("^((S)outhern|(E)astern|(W)estern|(N)orthern)", r"\2", long_name)
  

 Thus, the 2nd group would be 'S' if it matched, the third group the 'E' if it matched, and so on. 

 To rectify this, instead match the word and use the first character of the matched word. 



