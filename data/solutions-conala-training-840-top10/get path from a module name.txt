Query: get path from a module name
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9534644)
  sys.modules['path.to.module'].__file__  

  Python 2.7.2+ (default, Oct  4 2011, 20:06:09) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import collections
>>> import sys
>>> sys.modules['collections'].__file__
'/usr/lib/python2.7/collections.pyc'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9534649)
 This is fairly easy after importing a module: 

  import os
print os.__file__
  

  

  /usr/lib/python2.7/os.pyc
  

 . 

 To do this  before  importing a module, you can use  imp.find_module() : 

  imp.find_module("os")[1]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17121279)
 Use  importlib  to import a module using a path and then use  types  module  to filter out functions from that imported module. 

  >>> import os
>>> import types
>>> import importlib
>>> strs = '/path/to/myfle.py'
>>> path, _ = os.path.splitext(strs)               #now path is '/path/to/myfile'
>>> file_name = path.split('/')[-1]                # returns myfile
>>> mod = importlib.import_module(file_name, path)
>>> funcs = [x for x in dir(mod) if isinstance(getattr(mod,x), types.FunctionType)]
>>> funcs
['foo', 'func']  #name of functions
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7151212)
 Also, if you have a function/class  f  from a module  m  you can get the path of the module using the module  inspect  

  import inspect
from m import f

print inspect.getmodule(f)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18712381)
 You want the  __name__  attribute from  __module__ : 

  In [16]: import inspect
In [17]: inspect.getmodule(MyObject).__name__
Out[17]: 'lib.objects.MyObject'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25827116)
 You can use the  pkgutil  module (specifically the https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages method) to get a list of the packages in the current directory. From there it's trivial to use the  importlib  machinery to import the modules you want: 

  import pkgutil
import importlib

packages = pkgutil.walk_packages(path='.')
for importer, name, is_package in packages:
    mod = importlib.import_module(name)
    # do whatever you want with module now, it's been imported!
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2417653)
  sys.modules  is a mapping from module name to module: 

  sys.modules[foo.__module__].__file__
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3488648)
 Try to add the module's path to sys.path variable: 

  import sys
  

  sys.path.append(pathToModule)  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52994172)
 with https://docs.python.org/3/library/importlib.html?highlight=importlib#importlib.import_module you could do this: 

  from importlib import import_module
module_name = 'some_module'

mti = import_module(module_name)
  

 meaning you could import the module from a string. in your case you might get that name from your other module using 

  module_name = some_other_module.__name__
  



