Query: How to replace empty string with zero in comma-separated string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2607058)
  s = "8,5,,1,4,7,,,,7,,1,9,3,6,,,8,6,3,9,,2,5,4,,,,,3,2,,,7,4,1,1,,4,,6,9,,5,,,,5,,,1,,6,3,,,6,5,,,,7,4,,1,7,6,,,,8,,5,,,7,1,,3,9,"
s = re.sub('((?<=,)|^)(?=,|$)', '0', s)
print s
  

 Prints: 

  8,5,0,1,4,7,0,0,0,7,0,1,9,3,6,0,0,8,6,3,9,0,2,5,4,0,0,0,0,3,2,0,0,7,4,1,1,0,4,0,6,9,0,5,0,0,0,5,0,0,1,0,6,3,0,0,6,5,0,0,0,7,4,0,1,7,6,0,0,0,8,0,5,0,0,7,1,0,3,9,0
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2607026)
 You could use  

  [(int(x) if x else 0) for x in data.split(',')]
  

  data.split(',')  splits the string into a list. It splits on the comma character: 

  ['8', '5', '', '1', '4', '7', '', '', '', ...]
  

 The expression 

  (int(x) if x else 0)
  

 returns  int(x)  if  x  is True, 0 if  x  is False. Note that the empty string is False. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37519140)
 You may use a regular split function with if condition. If you want regex then  re.search  is the best choice which should return the first match. 

  >>> s = 'extra-root, May 15, 2024, Entry, abcd: efgh, ds:sd'
>>> [i f i in s.split(',') if ':' in i][0]
' abcd: efgh'
>>> next(i f i in s.split(',') if ':' in i)
' abcd: efgh'
  

  

  re.search(r'[^,]*:[^,]*', s).group()
  

 
  [^,]*  matches any character but not of  , , zero  me times. 
  :  matches a colon. 
  [^,]*  matches any character but not of  , , zero  me times. 
 

 Update: 

 To get the first element in a comma separated string. 

  re.search(r'^[^,]*', s).group()
  

 
  ^  start 
  [^,]*  Any char but not of comma , zero  me times. Now it should match an empty string if it's exists at the start but if you use  +  then it won't capture that empty string. Because  +  expects atleast one char to be exists. 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2607001)
 Regular expressions are often unnecessary in Python.  Given string  s , try: 

  ','.join(x or '0' for x in s.split(','))
  

 I am assuming you want to fill the blanks with 0.  If you want a list of integers instead of a string, try this: 

  [(x and int(x)) or 0 for x in s.split(',')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48823193)
 It seems you need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.get_dummies.html with replace  0  to empty  string s:  

  df = data[[0]].join(data[1].str.get_dummies(', ').replace(0, ''))
print (df)
       0 event2 event3 event4
0  userA      1      1       
1  userB             1      1
2  userC      1              
  

  Detail : 

  print (data[1].str.get_dummies(', '))
   event2  event3  event4
0       1       1       0
1       0       1       1
2       1       0       0
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24556720)
 The separator argument for split() is not a list of different characters to split on, but rather the entire delimiter. Your code will only split occurrences of "comma space". 

 Further, if you want integers instead of substrings, you need to do that conversion. 

 Finally, because you have a trailing comma, you need to filter empty results from your split. 

  >>> data = '0,0,0,0,'
>>> values = [int(x) for x in data.split(',') if x]
>>> values
[0, 0, 0, 0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50759656)
 The original exception, now lost in the edit history, 

  TypeError: replace() argument 2 must be str, not int
  

 is the result of https://docs.python.org/3/library/stdtypes.html#str.replace expecting string arguments, but you're passing an integer zero. Instead of replace you could simply check for empty string before conversion: 

  value = row[5]
value = float(value) if value else 0.0
  

 Another option is to catch the potential  ValueError : 

  try:
    value = float(row[5])

except ValueError:
    value = 0.0
  

 This might hide the fact that the column contains "invalid" values other than just missing values. 

 Note that had you passed string arguments the end result would probably not have been what you expected: 

  In [2]: '123'.replace('', '0')
Out[2]: '0102030'

In [3]: float(_)
Out[3]: 102030.0
  

 As you can see an empty string as the "needle" ends up replacing around each and every character in the string. 

 

 The latest exception in the question, after fixing the other errors, is the result of the  float(value)  conversion working and 

  value += float(value)
  

  

  value = value + float(value)
  

 . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8893413)
 This can be easily done with the help of http://docs.python.org/library/shlex.html#shlex.split: 

  >>> import shlex
>>> ','.join(shlex.split(some_string))
'one,two,three four,five,six seven'
  

 I you need to preserve quotation marks you can do this: 

  >>> ','.join(['"{0}"'.format(fragment) if ' ' in fragment else fragment
...           for fragment in shlex.split(some_string)])
'one,two,"three four",five,"six seven"'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9815179)
 Well, the split technically  did  work. In  a,,b,c , it splits on  ,,  and  , , leaving "a","b", and "c".  In  a,,b,c, , it splits on  ,, ,  ,  and the last  ,  (because they all match the regex!). The strings "around" those delmiters are "a","b","c", and "" (between the last comma and the end of string). 

 There are few ways you can circumvent this. 

 
  The empty string will only occur if there's a delimiter at the start or end of the string, so trim off any of these  [,;\s]  prior to splitting using http://docs.python.org/library/stdtypes.html#str.strip: 

  p.split(mystring.strip(',; \t\r\n'))
   
  Remove the empty string after the splitting, using any method you please 

  res = p.split(mystring)
[r for r in res if r != '']
# another option
filter(None,res)
   
  Even better, since you know you'll only get the empty string as either the first or last part of the split string (e.g.  ,a,b,c  or  a,b,c, ), don't iterate through the entire split: 

  res = p.slit(mystring)
# this one relies on coercing logical to numbers:
# if res[0] is '' it'll be 1:X, otherwise it'll be 0:X,
#  where X is len(res) if res[-1] is not '', and len(res)-1 otherwise.
res[ res[0]=='':(len(res)-(res[-1]==''))]
   
 



