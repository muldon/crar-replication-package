Query: Call a function with argument list in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50197071)
 You can use  *args  

  def f(*args):
    return(sum(args))

>>>f(1,2,3,4)
10

>>>f(1,2)
3
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10212468)
 Use a list comprehension: 

  result = [myFunc(p, additionalArgument) for p in pages]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10212475)
 You could use a list comprehension 

  [myFunc(p, additionalArgument) for p in pages]
  

 or  functools.partial()  

  map(functools.partial(myFunc, some_arg=additionalArgument), pages)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6412847)
 Here is my answer 

  nb=['192.168.1.2', '192.168.1.3', '192.168.1.4']
ping_thread = threading.Timer(12.0, pingstarter, (nb,))
ping_thread.start()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4018200)
 Simply call your function with: 

  function( ['this', 'is', 'a', 'list', 'of', 'words'] )
  

 This is passing a list as an argument. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/817111)
 You need to use arguments unpacking.. 

  def wrapper(func, *args):
    func(*args)

def func1(x):
    print(x)

def func2(x, y, z):
    print x+y+z

wrapper(func1, 1)
wrapper(func2, 1, 2, 3)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20279160)
 From python documentation on http://docs.python.org/2/library/functions.html#zip function: 

 
   This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The returned list is truncated in length to the length of the shortest argument sequence. When there are multiple arguments which are all of the same length, zip() is similar to map() with an initial argument of None. With a single sequence argument, it returns a list of 1-tuples. With no arguments, it returns an empty list. 
 

 Example:   

  zip([1, 2, 3], [4, 5, 6]) # returns [(1, 4), (2, 5), (3, 6)]
  

 If you need the result to be the list of lists, not the list of tuples, you can use list comprehension: 

  [list(x) for x  in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])] # returns [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
  

 If all your variables are stored in one 2d list, and you want it pass it into zip function, you can use the following (I'll call it  the star notation , because I can't remember the proper English term for it): 

  results = [[1, 2, 3], [4, 5, 6]]
zip(*results) # returns [(1, 4), (2, 5), (3, 6)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31995624)
 You can also use a lambda function: 

  map(lambda p: myFunc(p, additionalArgument), pages)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/50197072)
 You can use  *args  and  **kwargs  

  *args  and  **kwargs  allow you to pass a variable number of arguments to a function. 

 Example: 

  In [3]: def test(*args):
   ...:         return sum(args)
   ...:
   ...:

In [4]: test(1, 2, 3, 4)
Out[4]: 10

In [5]:
  

 Addtionally if you want to preserve name of the argumenets use  **kwargs , 

 Example: 

  In [10]: def tests(**kwargs):
    ...:     print(kwargs)
    ...:     return sum(kwargs.values())
    ...:
    ...:

In [11]: tests(a=10, b=20, c=30)
{'a': 10, 'c': 30, 'b': 20}
Out[11]: 60

In [12]: 
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/817093)
 You can use *args and **kwargs syntax for variable length arguments. 

 https://stackoverflow.com/questions/287085/what-does-args-and-kwargs-mean 

 And from the official python tutorial  

 http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions 



