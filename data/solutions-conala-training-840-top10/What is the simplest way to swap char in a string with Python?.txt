Query: What is the simplest way to swap char in a string with Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4605497)
 Here's one way... 

  >>> s = '2134'
>>> def swap(c, i, j):
...  c = list(c)
...  c[i], c[j] = c[j], c[i]
...  return ''.join(c)
...
>>> swap(s, 0, 1)
'1234'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4605843)
 Loop over length of string by twos and swap: 

  def oddswap(st):
    s = list(st)
    for c in range(0,len(s),2):
        t=s[c]
        s[c]=s[c+1]
        s[c+1]=t

    return "".join(s)
  

  

  >>> s
'foobar'
>>> oddswap(s)
'ofbora'
  

 and fails on odd-length strings with an IndexError exception. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4605915)
 The usual way to swap to items in Python is: 

  a, b = b, a
  

 So it would seem to me that you just do the same with an extended slice. It is slightly complicated because strings aren't mutable so you have to convert to a list and then back to a string, but what I'd do is: 

  >>> s = 'badcfe'
>>> t = list(s)
>>> t[::2], t[1::2] = t[1::2], t[::2]
>>> ''.join(t)
'abcdef'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13324927)
 There is no need to make a list. The following works for even-length strings: 

  r = ''
for in in range(0, len(s), 2) :
  r += s[i + 1] + s[i]
s = r
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12995810)
 If performance or elegance is not an issue, and you just want clarity and have the job done then simply use this: 

  def swap(text, ch1, ch2):
    text = text.replace(ch2, '!',)
    text = text.replace(ch1, ch2)
    text = text.replace('!', ch1)
    return text
  

 This allows you to swap or simply replace chars or substring.
For example, to swap 'ab' <-> 'de' in a text: 

  _str = "abcdefabcdefabcdef"
print swap(_str, 'ab','de') #decabfdecabfdecabf
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4606057)
  

  >>> s = 'badcfe'
>>> ''.join([ s[x:x+2][::-1] for x in range(0, len(s), 2) ])
'abcdef'
  

 
 s[x:x+2] returns string slice from x to x+2; it is safe for odd len(s). 
 [::-1] reverses the string in Python 
 range(0, len(s), 2) returns 0, 2, 4, 6 ... while x < len(s) 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4605926)
  ''.join(s[i+1]+s[i] f i in range(0, len(s), 2)) # 10.6 usec per loop
  

  

  ''.join(x+y f x, y in zip(s[1::2], s[::2])) # 10.3 usec per loop
  

  if the string can have an odd length: 

  ''.join(x+y f x, y in itertools.izip_longest(s[1::2], s[::2], fillvalue=''))
  

 Note that this won't wk with old versions of Python (if I'm not mistaking older than 2.5). 

 The benchmark was run on python-2.7-8.fc14.1.x86_64 and a Ce 2 Duo 6400 CPU with  s='0123456789'*4 . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52372927)
      string  = "Hello Planet Earth"
  

 Make a list of words by splitting on space char 

      words = string.split(" ")
  

 Then iterate on that list with your script 

      for word in words:
        l = list(word)
        l[0], l[len(l) - 1] = l[len(l) - 1], l[0]
        print("".join(l))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/27437111)
 .  

 I would probably rebuild the word-so-far on the spot instead of having a persistent string for it, keeping the tested letters separately. When the user tries a new character, make two checks: 

 
  See if the guess character has been guessed already:  if guess in tried . If so, proceed however you like (penalize or ignore, but don't add the character to the tried-characters list.   
  If not, see if the character is in the target word:  elif guess in word . If  not , assess some penalty and add the guess to the tried-characters list.  
  For any other result:  else . Add the guess to the tried-characters list.  
 

 To display the user's progress, make a blank string. Go through the target word character-at-a-time:  for char in word , like you have been. But instead of trying to modify an extant string, just add the character to the end of the blank string if it's in the tried-characters string, or an underscore if not:  show += char if char in tried else "_" . Once that  for  loop is exhausted, display what you've got! 

 Alternatively, use  .join  with a slightly different iterator:  show = "".char if char in tried else '_' for char in word . It'll iterate through word, keeping each letter if it's in your tried-characters string, or substituting an underscore if not, putting whatever is in  ""  between them (or nothing, if you leave it as  "" . . 

 At the hazard of completely rewriting your code, this is what it might look like: 

    ## init
word = "mauritius" # the word you're looking for. I chose this one.
tried = str(  # initialize a list of tested characters
tryNum = 3  # however many wrong guesses the user gets

  ...

  ## in your run loop...
if tryNum:  # evaluates 0 as Fasle, if you didn't already know
    guess = UserInput(  # some means to get the guess from the user; a single-character string.

    if   guess in tried:
        print "Tried that letter already!" 
    elif guess not in word:   # the letter hasn't been tested yet, but isn't in the word, either.
        print "Wrong! %d guesses left!" % tryNum
        tryNum -= 1
        tried += guess
    else:    # the guess is new (not tried and it's valid (in the word
        tried += guess

    show = str(  # this is the string you will display. make a blank one each time.
    for char in word:
        show += char if char in tried else "_"  # if the character has been tried, add it to the output. Otherwise, an underscore.
    print show  # display the word so far

    if show == word:
        print "You win!" # Congratulations! You hung a man.

else:  # Out of tries; the convict lives another day.
    print "Game Over!" # I am not sure how committed to this vocabulary-based execution you really are...
  

 You can swap  if tryNum:  with  while tryNum:  and it should work all by itself, after initialization. If you do, there are fun things you can do with  continue s and  break s, but that goes a bit beyond the scope of your question. 

 You can swap  show = str(  and the  for char in word:  block out with the  .join  singleton in this next example, too. Change  ''...  to  ' '...  to add a space between characters/underscores! 

 This compressed version is probably a bit less Pythonic: 

  # post-init...
if tryNum:
    guess = UserInput(
    if guess in tried: pass
    elif guess not in word:
        print "Wrong! %d guesses left!" % tryNum
        tryNum -= 1
        tried  += guess
    else: tried += guess
    show = ''.char if char in tried else '_' for char in word
    if show == word: print "You win!"
else: print "Game Over!"
  

 This does not answer your first question of "What am I doing wrong?" but I think it might be a better way of going about what you intend? It might be a bit easier to maintain and expand for you, too. 

 Note: Go ahead and replace  UserInput(  with something like  str(raw_input("Guess a letter!"[0]  if you want to try this thing out on its own. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30275969)
 If your list has even length, this might be the simplest way: 

  >>> lst = [1,2,3,4,5,6]
>>> [lst[i^1] for i in range(len(lst))]
[2, 1, 4, 3, 6, 5]
  



