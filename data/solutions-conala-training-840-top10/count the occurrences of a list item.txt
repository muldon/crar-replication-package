Query: count the occurrences of a list item
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7055873)
<pre class="lang-py prettyprint-override"> # Python >= 2.6 (defaultdict) && < 2.7 (Counter, OrderedDict)
from collections import defaultdict
def count_unsorted_list_items(items):
    """
    :param items: iterable of hashable items to count
    :type items: iterable

    :returns: dict of counts like Py2.7 Counter
    :rtype: dict
    """
    counts = defaultdict(int)
    for item in items:
        counts[item] += 1
    return dict(counts)


# Python >= 2.2 (generators)
def count_sorted_list_items(items):
    """
    :param items: sorted iterable of items to count
    :type items: sorted iterable

    :returns: generator of (item, count) tuples
    :rtype: generator
    """
    if not items:
        return
    elif len(items) == 1:
        yield (items[0], 1)
        return
    prev_item = items[0]
    count = 1
    for item in items[1:]:
        if prev_item == item:
            count += 1
        else:
            yield (prev_item, count)
            count = 1
            prev_item = item
    yield (item, count)
    return


import unittest
class TestListCounters(unittest.TestCase):
    def test_count_unsorted_list_items(self):
        D = (
            ([], []),
            ([2], [(2,1)]),
            ([2,2], [(2,2)]),
            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),
            )
        for inp, exp_outp in D:
            counts = count_unsorted_list_items(inp) 
            print inp, exp_outp, counts
            self.assertEqual(counts, dict( exp_outp ))

        inp, exp_outp = UNSORTED_WIN = ([2,2,4,2], [(2,3), (4,1)])
        self.assertEqual(dict( exp_outp ), count_unsorted_list_items(inp) )


    def test_count_sorted_list_items(self):
        D = (
            ([], []),
            ([2], [(2,1)]),
            ([2,2], [(2,2)]),
            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),
            )
        for inp, exp_outp in D:
            counts = list( count_sorted_list_items(inp) )
            print inp, exp_outp, counts
            self.assertEqual(counts, exp_outp)

        inp, exp_outp = UNSORTED_FAIL = ([2,2,4,2], [(2,3), (4,1)])
        self.assertEqual(exp_outp, list( count_sorted_list_items(inp) ))
        # ... [(2,2), (4,1), (2,1)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7843090)
 Another way to get the number of occurrences of each item, in a dictionary: 

  dict((i, a.count(i)) for i in a)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43678170)
  from collections import Counter
country=['Uruguay', 'Mexico', 'Uruguay', 'France', 'Mexico']
count_country = Counter(country)
output_list= [] 

for i in count_country:
    output_list.append([i,count_country[i]])
print output_list
  

 Output list: 

  [['Mexico', 2], ['France', 1], ['Uruguay', 2]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4447785)
 For multiple occurrences, this give you the index of each occurence: 

  >>> lst=[1,2,3,4,5,1]
>>> tgt=1
>>> found=[]
>>> for index, suspect in enumerate(lst):
...     if(tgt==suspect):
...        found.append(index)
...
>>> print len(found), "found at index:",", ".join(map(str,found))
2 found at index: 0, 5
  

 If you want the count of each item in the list: 

  >>> lst=[1,2,3,4,5,2,2,1,5,5,5,5,6]
>>> count={}
>>> for item in lst:
...     count[item]=lst.count(item)
...
>>> count
{1: 2, 2: 3, 3: 1, 4: 1, 5: 5, 6: 1}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5829377)
 If you are using Python 2.7 or 3 and you want number of occurrences for each element: 

  >>> from collections import Counter
>>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']
>>> Counter(z)
Counter({'blue': 3, 'red': 2, 'yellow': 1})
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53115212)
 Below are the three solutions: 

  Fastest is using a for loop and storing it in a Dict.  

  import time
from collections import Counter


def countElement(a):
    g = {}
    for i in a:
        if i in g: 
            g[i] +=1
        else: 
            g[i] =1
    return g


z = [1,1,1,1,2,2,2,2,3,3,4,5,5,234,23,3,12,3,123,12,31,23,13,2,4,23,42,42,34,234,23,42,34,23,423,42,34,23,423,4,234,23,42,34,23,4,23,423,4,23,4]


#Solution 1 - Faster
st = time.monotonic()
for i in range(1000000):
    b = countElement(z)
et = time.monotonic()
print(b)
print('Simple for loop and storing it in dict - Duration: {}'.format(et - st))

#Solution 2 - Fast
st = time.monotonic()
for i in range(1000000):
    a = Counter(z)
et = time.monotonic()
print (a)
print('Using collections.Counter - Duration: {}'.format(et - st))

#Solution 3 - Slow
st = time.monotonic()
for i in range(1000000):
    g = dict([(i, z.count(i)) for i in set(z)])
et = time.monotonic()
print(g)
print('Using list comprehension - Duration: {}'.format(et - st))
  

    

 
  #Solution 1 - Faster
  
 

  {1: 4, 2: 5, 3: 4, 4: 6, 5: 2, 234: 3, 23: 10, 12: 2, 123: 1, 31: 1, 13: 1, 42: 5, 34: 4, 423: 3}
Simple for loop and storing it in dict - Duration: 12.032000000000153
  

 
  #Solution 2 - Fast
  
 

  Counter({23: 10, 4: 6, 2: 5, 42: 5, 1: 4, 3: 4, 34: 4, 234: 3, 423: 3, 5: 2, 12: 2, 123: 1, 31: 1, 13: 1})
Using collections.Counter - Duration: 15.889999999999418
  

 
  #Solution 3 - Slow
  
 

  {1: 4, 2: 5, 3: 4, 4: 6, 5: 2, 34: 4, 423: 3, 234: 3, 42: 5, 12: 2, 13: 1, 23: 10, 123: 1, 31: 1}
Using list comprehension - Duration: 33.0
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45829195)
  sum([1 for elem in <yourlist> if elem==<your_value>])
  

 This will return the amount of occurences of your_value 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23909767)
  Counting the occurrences of one item in a list  

 For counting the occurrences of just one list item you can use  count()  

  >>> l = ["a","b","b"]
>>> l.count("a")
1
>>> l.count("b")
2
  

 Counting the occurrences of  all  items in a list is also known as "tallying" a list, or creating a tally counter. 

  Counting all items with count()  

 To count the occurrences of items in  l  one can simply use a list comprehension and the  count()  method 

  [[x,l.count(x)] for x in set(l)]
  

 (or similarly with a dictionary  dict((x,l.count(x)) for x in set(l)) ) 

 Example:  

  >>> l = ["a","b","b"]
>>> [[x,l.count(x)] for x in set(l)]
[['a', 1], ['b', 2]]
>>> dict((x,l.count(x)) for x in set(l))
{'a': 1, 'b': 2}
  

  Counting all items with Counter()  

 Alternatively, there's the faster  Counter  class from the  collections  library 

  Counter(l)
  

 Example: 

  >>> l = ["a","b","b"]
>>> from collections import Counter
>>> Counter(l)
Counter({'b': 2, 'a': 1})
  

  How much faster is Counter?  

 I checked how much faster  Counter  is for tallying lists. I tried both methods out with a few values of  n  and it appears that  Counter  is faster by a constant factor of approximately 2. 

 Here is the script I used: 

  from __future__ import print_function
import timeit

t1=timeit.Timer('Counter(l)', \
                'import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]'
                )

t2=timeit.Timer('[[x,l.count(x)] for x in set(l)]',
                'import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]'
                )

print("Counter(): ", t1.repeat(repeat=3,number=10000))
print("count():   ", t2.repeat(repeat=3,number=10000)
  

 And the output: 

  Counter():  [0.46062711701961234, 0.4022796869976446, 0.3974247490405105]
count():    [7.779430688009597, 7.962715800967999, 8.420845870045014]
  



