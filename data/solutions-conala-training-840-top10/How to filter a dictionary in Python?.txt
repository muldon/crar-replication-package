Query: How to filter a dictionary in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8425075)
  d = dict((k, v) for k, v in d.iteritems() if v > 0)
  

 In Python 2.7 and up, there's nicer syntax for this: 

  d = {k: v for k, v in d.items() if v > 0}
  

 Note that this is not strictly a filter because it does create a new dictionary. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41790394)
 Alternatively, you may also use a  list comprehension  expression to filter your dictionary as: 

  >>> number_key = {35135135: 5, 60103513: 3, 10981179: 2, 18637724 : 4}

>>> [k for k, v in number_key.items() if v<= 3]
[60103513, 10981179]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33993454)
 You can use list comprehension. 

  >>> y = [D['A'] for D in x]
>>> y
[1, 3, 5]
  

 Also, as https://stackoverflow.com/questions/33993353/filter-the-values-of-dictionary-items-in-a-list-by-their-key-in-python?noredirect=1#comment55742385_33993353, if you want this code to work even if the key isn't in the dictionary, use this instead: 

  [D.get('A') for D in x]
  

 and then use  list(filter(bool,y))  to take out the  None s. Like so: 

  >>> x = [{'A': 1, 'B': 2}, {'A': 3, 'B': 4}, {'A': 5, 'B': 6}, {'B': 8}]
>>> y = [D['A'] for D in x]
Traceback (most recent call last):
  File "<pyshell#55>", line 1, in <module>
    y = [D['A'] for D in x]
  File "<pyshell#55>", line 1, in <listcomp>
    y = [D['A'] for D in x]
KeyError: 'A'
>>> y = [D.get('A') for D in x]
>>> y
[1, 3, 5, None]
>>> y = list(filter(bool,y))
>>> y
[1, 3, 5]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27537616)
 You can use dictionary comprehension, to create a dictionary with the filtered values, like this 

  >>> {key: d1[key] for key in d1 if d1[key] > 0}
{'c': 8, 'd': 7}
  

 You can also use  dict.items()  like this 

  >>> {key: value for key, value in d1.items() if value > 0}
{'c': 8, 'd': 7}
  

 Note: Using  dict.iteritems()  will be more memory efficient in Python 2.7, as  dict.items()  will create a list of tuples with all the key-value pairs. 

 If your intention is to just remove the values which are  0 , then you can even shorten it like this 

  >>> {key: value for key, value in d1.items() if value}
{'c': 8, 'd': 7}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43575991)
 You could also use the  filter  function. 

  new_list = filter(lambda x: a[x]['POI'], a)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16589453)
 Nowadays, in Python 2.7 and up, you can use a dict comprehension: 

  {k: v for k, v in points.iteritems() if v[0] < 5 and v[1] < 5}
  

 And in Python 3: 

  {k: v for k, v in points.items() if v[0] < 5 and v[1] < 5}
  



