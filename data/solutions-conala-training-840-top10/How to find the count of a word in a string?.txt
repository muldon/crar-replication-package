Query: How to find the count of a word in a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11300419)
 If you want to find the count of an individual word, just use  count : 

  input_string.count("Hello")
  

 Use  collections.Counter  and  split()  to tally up all the words: 

  from collections import Counter

words = input_string.split()
wordCount = Counter(words)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11300420)
 http://docs.python.org/library/collections.html#counter-objects is your friend: 

  >>> from collections import Counter
>>> counts = Counter(sentence.lower().split())
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17268976)
 Use a list comprehension: 

  >>> word = "dog"
>>> str1 = "the dogs barked"
>>> sum(i == word for word in str1.split())
0

>>> word = 'dog'
>>> str1 = 'the dog barked'
>>> sum(i == word for word in str1.split())
1
  

  split()  returns a list of all the words in a sentence. Then we use a list comprehension to count how many times the word appears in a sentence.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34324587)
 Use the  beg  argument for the  .find  method. 

  counter = 0
search_pos = 0
while True:
    found = my_string.find(word, search_pos)
    if found != -1: # find returns -1 when it's not found
        #update counter and move search_pos to look for the next word
        search_pos = found + len(word)
        counter += 1
    else:
        #the word wasn't found
        break
  

 This is kinda a general purpose solution. Specifically for counting in a string you can just use  my_string.count(word)  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34324580)
 If you want to make sure that it counts a full word like  is  will only have one in  this is  even if there is an  is  in  this , you can split, filter and count: 

  >>> s = 'this is a sentences that has is and is and is (4)'
>>> word = 'is'
>>> counter = len([x for x in s.split() if x == word])
>>> counter
4
  

 However, if you just want count all occurrences of a substring, ie  is  would also match the  is in this  then: 

  >>> s = 'is this is'
>>> counter = len(s.split(word))-1
>>> counter
3
  

 in other words,  split  the string at every occurrence of the word, then minus one to get the count. 

 Edit - JUST USE COUNT: 

 It's been a long day so I totally forgot but  str  has a built-in method for this  str.count(substring)  that does the same as my second answer but way more readable. Please consider using this method (and look at other people's answers for how to) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17268988)
 You can use http://docs.python.org/2/library/stdtypes.html#str.split to convert the sentence to a list of words: 

  a = 'the dogs barked'.split()
  

 This will create the list: 

  ['the', 'dogs', 'barked']
  

 You can then count the number of exact occurrences using http://docs.python.org/2/tutorial/datastructures.html: 

  a.count('dog')  # 0
a.count('dogs') # 1
  

 If it needs to work with punctuation, you can use regular expressions. For example: 

  import re
a = re.split(r'\W', 'the dogs barked.')
a.count('dogs') # 1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46364558)
 This works in both Python 2 and 3. 

  # -*- coding: utf-8 -*-

input_val = " שמע שמע אתה אחד הלא מובנים"

def word_count(text):
    word_count = {}
    for word in text.split():
        if word not in word_count:
            word_count[word] = 1
        else:
            word_count[word] += 1
    return word_count

print(word_count(input_val))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11300422)
 Here is an alternative, case-insensitive, approach 

  sum(1 for w in s.lower().split() if w == 'Hello'.lower())
2
  

 It matches by converting the string and target into lower-case. 

 ps: Takes care of the  "am ham".count("am") == 2  problem with  str.count()  pointed out by @DSM below too :) 



