Query: Finding index of the same elements in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7658955)
 Try using http://docs.python.org/library/functions.html#enumerate in a http://www.python.org/dev/peps/pep-0202/: 

  [index for (index, letter) in enumerate(word) if letter == 'e']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48106104)
  

  myList = [10, 7, 11, 5, 8, 9, 6]
min_index = myList.index(min(myList)) 
print(max(myList[min_index:]))
  

 Output 

  9
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48106109)
  

  myList = [10, 7, 11, 5, 8, 9, 6]
abs_max = max(myList[myList.index(min(myList)):])
  

 Output: 

  9
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16685428)
   .index()  which will only find the  first  occurrence of your value in the list. So if you have a value 1.0 at index 2, and at index 9, then  .index(1.0)  will  always  return  2 , no matter how many times  1.0  occurs in the list. 

 Use http://docs.python.org/2/library/functions.html#enumerate to add indices to your loop instead: 

  def find(lst, a, b):
    result = []
    for i, x in enumerate(lst):
        if x<a or x>b:
            result.append(i)
    return result
  

 You can collapse this into a list comprehension: 

  def find(lst, a, b):
    return [i for i, x in enumerate(lst) if x<a or x>b]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/604815)
 From http://www.diveintopython.net/native_data_types/lists.html: 

  >>> li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']
>>> li.index("example")
5
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33315037)
 If you are starting with a numpy array, you can get the result that you want by converting it to a list of lists before using the  index()  function, e.g.: 

  import numpy as np

arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
lst = [list(x) for x in arr]
print (lst.index([4,5,6]))
  

 ... which gives the expected output  1 . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16878819)
 This should work: 

  K = [1,2,2,4,5,5,6,10]
num = 5
print 'K %s.' % (sorted(K, reverse=True)[:num])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48106385)
 O(1) space: 

  myList = [10, 7, 11, 5, 8, 9, 6]

n = len(myList)
key = myList.__getitem__
imin = min(range(n), key=key)
imax = max(range(imin + 1, n), key=key)

print('maximum', myList[imax], 'is at index', imax)
  

  

  maximum 9 is at index 5
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16878812)
  

  >>> K
[4, 5, 1, 6, 2, 5, 2, 10]
>>> sorted(range(len(K)), key=lambda x: K[x])
[2, 4, 6, 0, 1, 5, 3, 7]
>>> sorted(range(len(K)), key=lambda x: K[x])[-5:]
[0, 1, 5, 3, 7]
  

 or using  numpy , you can use  argsort : 

  >>> np.argsort(K)[-5:]
array([0, 1, 5, 3, 7])
  

  argsort  is also a method: 

  >>> K = np.array(K)
>>> K.argsort()[-5:]
array([0, 1, 5, 3, 7])
>>> K[K.argsort()[-5:]]
array([ 4,  5,  5,  6, 10])
  



