Query: Python, Matplotlib, subplot: How to set the axis range?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2849400)
 As found in http://www.mofeel.net/582-comp-soft-sys-matlab/54166.aspx 

   pylab.ylim([0,1000])
  

 Note: The command has to be executed after the plot! 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50061123)
 You want your subplots to be squared. The function  plt.axis  accepts  'square'  as a parameter and it really means it: it will make the current axes squared, both in pixels and in data units. 

  x = np.arange(2)
y = x / 3
u = v = [0, 1]

plt.subplot(121)
plt.plot(x, y)
plt.axis('square')

plt.subplot(122)
plt.plot(u, v)
plt.axis('square')
  

 https://i.stack.imgur.com/r4Z4y.png 

 Unfortunately this will expand the Y axis limits way beyond the Y data range, which is not what you want. What you need is the subplot's aspect ratio to be the inverse of the data ranges ratio. AFAIK there isn't any convenience function or method for this but you can write your own. 

  def make_square_axes(ax):
    """Make an axes square in screen units.

    Should be called after plotting.
    """
    ax.set_aspect(1 / ax.get_data_ratio())

plt.subplot(121)
plt.plot(x, y)
make_square_axes(plt.gca())

plt.subplot(122)
plt.plot(u, v)
make_square_axes(plt.gca())
  

 <a href="https://i.stack.imgur.com/Bg2el.png"  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42692333)
 I can reproduce this on matplotlib 1.4.3, assume it's a bug that has been fixed in later releases.  

  fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(15, 4), sharey=True)
  

 Best idea is to update matplotlib, but you can specify axis range manually to fix in your case, 

  [ax.set_ylim([np.min([y1,y2]),np.max([y1,y2])) for ax in axs]
  

 So complete code, 

  fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(15, 4))
axs[0].plot(x, y1)
axs[1].plot(x, y2)
axs[0].get_shared_y_axes().join(*axs)
for ax in axs:
    all([ax.set_yscale('log') == None ])
    ax.set_ylim([np.min([y1,y2]),np.max([y1,y2])])

plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41531042)
 Just switch figure size width and height from: 

  fig = plt.figure(figsize=(20, 8))
  

  

  fig = plt.figure(figsize=(8, 20))
  

 to use the whole page for your plots. 

 This will change your plot from: 

 https://i.stack.imgur.com/Kixon.png 

  

 <a href="https://i.stack.imgur.com/zBHZV.png"  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31810759)
 use the  sharex  argument to  add_subplot()  

  import matplotlib.pylab as plt
import random
import matplotlib.gridspec as gridspec

random.seed(20)

#create x-axis of my data
x1 = range(0,10) #different range than the next one
x2 = range(1,9)

#create data (just random data corresponding the x1,x2)
data1 = [random.random() for i in x1]
data2 = [random.random()*1000 for i in x2]

gs = gridspec.GridSpec(2,1)
fig = plt.figure()

#first plot
ax = fig.add_subplot(gs[0])
ax.plot(x1,data1)
ax.set_ylabel(r'Label One', size =16)
ax.get_yaxis().set_label_coords(-0.1,0.5)
plt.tick_params(
    axis='x',          # changes apply to the x-axis
    labelbottom='off') # labels along the bottom edge are off

#second plot
ax = fig.add_subplot(gs[1], sharex=ax)
ax.plot(x2,data2)
ax.set_ylabel(r'Label Two', size =16)
ax.get_yaxis().set_label_coords(-0.1,0.5)

plt.show()
  

 https://i.stack.imgur.com/2YqMp.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30863985)
 to get the  xticks  on the integer values which I think you want, you can set  xticks  just before you set the  xticklabels  

 You can use your  x_range  to do this: 

  ax.set_xticks(x_range)
  

   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54005544)
 Use: 

  # generate the data
n = 6
y = np.random.randint(low=0, high=10, size=n)
x = np.arange(n)

# generate the ticks and reverse it
xticks = range(n)
# xticks.reverse()

# plot the data
plt.figure()
ax = plt.subplot(111)
ax.bar(x, y)
# print xticks # prints [5, 4, 3, 2, 1, 0]
ax.set_xticklabels(xticks[::-1])          # <- Changed
plt.show()
  

 https://i.stack.imgur.com/mmD4D.png 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50058652)
 Since you need equal axis, you should set  plt.axis('equal')  instead of  'scaled' . In fact, even for the second scenario, the  'equal'  keyword should be used to give a square figure  

  x = np.linspace(1, 0.1, 10)
y = np.linspace(1, 1, 10)
fig, ax = plt.subplots(figsize=(5, 5))
ax.plot(x, y, '.')
ax.axis('equal')
plt.show()
  

 https://i.stack.imgur.com/Vi5D0.png 

 Note that setting the  figsize  to  (length, length)  gives an actual square, otherwise the default figure size is occupied. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40796155)
 Using  sharey  only makes sense, if you use different sized images. But when the images are differently sized, in some parts of the figure there is nothing - which will be painted white.  

 On the other hand, if you do have same size pictures as here, there is no need to use  sharey . In that case, you can simply plot your data and add a colorbar. 

  import numpy as np
import matplotlib.pyplot as plt

matrix = np.random.random((10, 10, 3))

fig, ax = plt.subplots(1,3, figsize=(12, 3))
plt.subplots_adjust(left=0.05, right=0.85)
for i in range(3):
    im = ax[i].imshow(matrix[:, :, i], interpolation='nearest')
    ax[i].set_aspect("equal")

plt.draw()
p = ax[-1].get_position().get_points().flatten()
ax_cbar = fig.add_axes([0.9,p[1], 0.02, p[3]-p[1]] )
plt.colorbar(im, cax=ax_cbar)

plt.show()
  

 https://i.stack.imgur.com/IbDDx.png 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13679548)
 You have to call  ax.set_xlim  after  ax.plot . 

  import numpy as np
import matplotlib.pyplot as plt

a = np.arange(10)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(a-5,a)
ax.set_xlim(xmin = -1.)
plt.show()
  



