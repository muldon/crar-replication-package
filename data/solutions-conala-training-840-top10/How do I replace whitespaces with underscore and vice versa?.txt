Query: How do I replace whitespaces with underscore and vice versa?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1007499)
 You don't need regular expressions. Python has a built-in string method that does what you need: 

  mystring.replace(" ", "_")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1007508)
 use string's replace method: 

  "this should be connected".replace(" ", "_")  

  "this_should_be_disconnected".replace("_", " ")  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1007836)
 I'm using the following piece of code for my friendly urls: 

  from unicodedata import normalize
from re import sub

def slugify(title):
    name = normalize('NFKD', title).encode('ascii', 'ignore').replace(' ', '-').lower()
    #remove `other` characters
    name = sub('[^a-zA-Z0-9_-]', '', name)
    #nomalize dashes
    name = sub('-+', '-', name)

    return name
  

 It works fine with unicode characters as well. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3176580)
 OP is using python, but in javascript (something to be careful of since the syntaxes are similar. 

  // only replaces the first instance of ' ' with '_'
"one two three".replace(' ', '_'); 
=> "one_two three"

// replaces all instances of ' ' with '_'
"one two three".replace(/\s/g, '_');
=> "one_two_three"
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1007503)
 Using the  re  module: 

  import re
re.sub('\s+', '_', "This should be connected") # This_should_be_connected
re.sub('\s+', '_', 'And     so\tshould this')  # And_so_should_this
  

 Unless you have multiple spaces or other whitespace possibilities as above, you may just wish to use  string.replace  as others have suggested. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10376875)
 This takes into account blank characters other than space and I think it's faster than using  re  module: 

  url = "_".join( title.split() )
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38686304)
  mystring.replace (" ", "_")
  

 if you assign this value to any variable, it will work 

  s = mystring.replace (" ", "_")
  

 by default mystring wont have this 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1012401)
 Python has a built in method on strings called replace which is used as so: 

  string.replace(old, new)
  

 So you would use: 

  string.replace(" ", "_")
  

 I had this problem a while ago and I wrote code to replace characters in a string. I have to start remembering to check the python documentation because they've got built in functions for everything. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1007615)
 Replacing spaces is fine, but I might suggest going a little further to handle other URL-hostile characters like question marks, apostrophes, exclamation points, etc.   

 Also note that the general consensus among SEO experts is that http://www.google.com/search?q=dashes+underscores+seo 

  import re

def urlify(s):

    # Remove all non-word characters (everything except numbers and letters)
    s = re.sub(r"[^\w\s]", '', s)

    # Replace all runs of whitespace with a single dash
    s = re.sub(r"\s+", '-', s)

    return s

# Prints: I-cant-get-no-satisfaction"
print(urlify("I can't get no satisfaction!"))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32827222)
 Surprisingly this library not mentioned yet 

 python package named python-slugify, which does a pretty good job of slugifying: 

  pip install python-slugify
  

  

  from slugify import slugify

txt = "This is a test ---"
r = slugify(txt)
self.assertEquals(r, "this-is-a-test")

txt = "This -- is a ## test ---"
r = slugify(txt)
self.assertEquals(r, "this-is-a-test")

txt = 'C\'est déjà l\'été.'
r = slugify(txt)
self.assertEquals(r, "cest-deja-lete")

txt = 'Nín hǎo. Wǒ shì zhōng guó rén'
r = slugify(txt)
self.assertEquals(r, "nin-hao-wo-shi-zhong-guo-ren")

txt = 'Компьютер'
r = slugify(txt)
self.assertEquals(r, "kompiuter")

txt = 'jaja---lol-méméméoo--a'
r = slugify(txt)
self.assertEquals(r, "jaja-lol-mememeoo-a") 
  



