Query: How I can get rid of None values in dictionary?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48152075)
 A recursive solution to remove all  None , and subsequent empty dicts, can look this: 

 Code:</h3>

  def remove_empties_from_dict(a_dict):
    new_dict = {}
    for k, v in a_dict.items():
        if isinstance(v, dict):
            v = remove_empties_from_dict(v)
        if v is not None:
            new_dict[k] = v
    return new_dict or None
  

 Test Code:</h3>

  dict_2 = {
    'key1': {'subkey1': 2, 'subkey2': 7, 'subkey3': 5},
    'key2': {'subkey1': None, 'subkey2': None, 'subkey3': None},
}
print(remove_empties_from_dict(dict_2))
  

 Results:</h3>

  {'key1': {'subkey1': 2, 'subkey2': 7, 'subkey3': 5}}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2545174)
 You can also use  filter : 

  d = dict(a = 1, b = None, c = 3)

filtered = dict(filter(lambda item: item[1] is not None, d.items()))

print(filtered)
{'a': 1, 'c': 3}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19937099)
 Why not create a dictionary without  None  values in the first place? 

  tags = ('Starttag', 'Stoptag', 'Filltag', 'Stoptag2')

for item in soup3.find_all('XMLTag'):
    r = {}
    for i, tag in enumerate(tags, 1):
        value = getattr(item, tag).string
        if value is not None:
            r['definition' + str(i)] = value
    itemDict.append(r)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53463847)
 The most idiomatic approach is to assume  values[0]  as the maximum and start iterating from the first index: 

  values = [-50, -80, -100]
max_value = values[0]
for i in values[1:]:
    if i > max_value:
        max_value = i 
  

 And you can get rid of the  None  check. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2544761)
 Another way to write it is 

  res = dict((k,v) for k,v in kwargs.iteritems() if v is not None)
  

 In Python3, this becomes 

  res = {k:v for k,v in kwargs.items() if v is not None}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51041320)
 The syntax for  type()  is like this:  if type(v) is list:  (not  == ) 

 So you want something like this: 

  import json
from collections import OrderedDict

raw_text = '{"DICT":{"List of dict":[{"K1":"V1","K2":"V2","K3":"V3","K4":[{"K4_1_1":"V4_1"},{"K4_2_1":"V4_2"},{"K4_3_1":null}],"K5 is a list of Dict":[{"K5_1_1":"V5_1","K5_1_2":"V5_2","K5_1_3":"V5_3","K5_1_4":"V5_4"},{"K5_2_1":"V5_1","K5_2_2":"V5_2","K5_2_3":"V5_3","K5_2_4":"V5_4"}]},{"K1":"V1","K2":"V2","K3":"V3","K4":[{"K4_1_1":"V4_1_1"},{"K4_2_1":"V4_2_1"}],"K5":{"K5_1_1":"V_1_1","K5_1_2":"V_1_2","K5_1_3":null,"K5_1_4":null}}]}}'

raw_json = json.JSONDecoder(object_pairs_hook=OrderedDict).decode(raw_text)

def remove_nulls(x):
    if type(x) is list:
        return [remove_nulls(v) for v in x if v is not None]
    elif type(x) is OrderedDict:
        return OrderedDict((k,remove_nulls(v)) for k,v in x.items() if v is not None)
    else:
        return x

de_nullified_json = remove_nulls(raw_json)
print(json.dumps(de_nullified_json, indent=2))
  

 Output: 

  {
  "DICT": {
    "List of dict": [
      {
        "K1": "V1",
        "K2": "V2",
        "K3": "V3",
        "K4": [
          {
            "K4_1_1": "V4_1"
          },
          {
            "K4_2_1": "V4_2"
          },
          {}
        ],
        "K5 is a list of Dict": [
          {
            "K5_1_1": "V5_1",
            "K5_1_2": "V5_2",
            "K5_1_3": "V5_3",
            "K5_1_4": "V5_4"
          },
          {
            "K5_2_1": "V5_1",
            "K5_2_2": "V5_2",
            "K5_2_3": "V5_3",
            "K5_2_4": "V5_4"
          }
        ]
      },
      {
        "K1": "V1",
        "K2": "V2",
        "K3": "V3",
        "K4": [
          {
            "K4_1_1": "V4_1_1"
          },
          {
            "K4_2_1": "V4_2_1"
          }
        ],
        "K5": {
          "K5_1_1": "V_1_1",
          "K5_1_2": "V_1_2"
        }
      }
    ]
  }
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2544744)
 I like the variation of your second method: 

     res = dict((a, b) for (a, b) in kwargs.iteritems() if b is not None)
  

 it's Pythonic and I don't think that ugly. A variation of your first is: 

     for (a, b) in list(kwargs.iteritems()):
       if b is None:
            del kwargs[a]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34128838)
 Use  defaultdict  ( it is faster  ) and generate dictionary from it- you can also easily convert that dictionary into list.You can modify  j in i.keys()  to filter keys. 

  from  collections import defaultdict as df

d=df(list)

alist = [{'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':35}, {'a':1, 'b':2, 'c':87}]

for i in alist:
    for j in i.keys():
        d[j].append(i[j])

print dict(d.items())
  

 Output- 

  {'a': [1, 1, 1], 'c': [3, 35, 87], 'b': [2, 2, 2]}
  

 If you want to get rid of repeated element from that  use  dict-comprehension  and  set - 

  >>>{k:list(set(v)) for k,v in d.items()}
>>>{'a': [1], 'c': [35, 3, 87], 'b': [2]}
  



