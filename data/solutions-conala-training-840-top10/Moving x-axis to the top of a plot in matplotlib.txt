Query: Moving x-axis to the top of a plot in matplotlib
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16350041)
 You've got to do some extra massaging if you want the ticks (not labels) to show up on the top and bottom (not just the top). The only way I could do this is with a minor change to unutbu's code: 

  import matplotlib.pyplot as plt
import numpy as np
column_labels = list('ABCD')
row_labels = list('WXYZ')
data = np.random.rand(4, 4)
fig, ax = plt.subplots()
heatmap = ax.pcolor(data, cmap=plt.cm.Blues)

# put the major ticks at the middle of each cell
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)

# want a more natural, table-like display
ax.invert_yaxis()
ax.xaxis.tick_top()
ax.xaxis.set_ticks_position('both') # THIS IS THE ONLY CHANGE

ax.set_xticklabels(column_labels, minor=False)
ax.set_yticklabels(row_labels, minor=False)
plt.show()
  

  Output:  

   


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19153831)
 http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.tick_params is very useful for setting tick properties. Labels can be moved to the top with: 

      ax.tick_params(labelbottom='off',labeltop='on')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14406447)
 Use 

  ax.xaxis.tick_top()
  

 to place the tick marks at the top of the image.  

  ax.set_xlabel('X LABEL')    
ax.xaxis.set_label_position('top') 
  

 affects the label, not the tick marks. 

  import matplotlib.pyplot as plt
import numpy as np
column_labels = list('ABCD')
row_labels = list('WXYZ')
data = np.random.rand(4, 4)
fig, ax = plt.subplots()
heatmap = ax.pcolor(data, cmap=plt.cm.Blues)

# put the major ticks at the middle of each cell
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)

# want a more natural, table-like display
ax.invert_yaxis()
ax.xaxis.tick_top()

ax.set_xticklabels(column_labels, minor=False)
ax.set_yticklabels(row_labels, minor=False)
plt.show()
  

 

   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14406442)
 You want http://matplotlib.org/api/axis_api.html#matplotlib.axis.XAxis.set_ticks_position rather than  set_label_position : 

  ax.xaxis.set_ticks_position('top') # the rest is the same
  

 This gives me: 

   


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8640615)
 Use 

  ax.xaxis.set_ticks_position("top")
  

 For example, 

  import numpy as np
import matplotlib.pyplot as plt

numdata = 100
t = np.linspace(0, 100, numdata)
y = 1/t**(1/2.0)

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.xaxis.set_ticks_position('top')
ax.yaxis.grid(linestyle = '-', color = 'gray')
ax.invert_yaxis()
ax.plot(t, y, 'g-', linewidth = 1.5)

plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45200086)
 It seems like you have an issue with ax. What exactly you are trying to achieve by  subplot2grid ? If you remove it then it works out of box. Note that I used  candlestick2_ohlc . You will also need to add dates, which I believe you figured out already.https://i.stack.imgur.com/0fBtP.png 

  from pandas_datareader import data
import matplotlib.pyplot as plt
from matplotlib.finance import candlestick2_ohlc

aapl = data.DataReader('AAPL', 'google', '2017-06-01')
aapl['MA50'] = aapl["High"].rolling(10).mean()
aapl.reset_index(inplace=True)

fig, ax = plt.subplots()
plt.xticks(rotation = 45)
plt.xlabel("Date")
plt.ylabel("Price")
plt.title("EUR/USD")

candlestick2_ohlc(ax, aapl.Open, aapl.High, aapl.Low, aapl.Close, width=1, colorup='g')
aapl.MA50.plot(ax=ax)

plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12651723)
 You can use https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.tick_params.html#matplotlib.axes.Axes.tick_params (this I did in https://jupyter.org/ notebook): 

<pre class="lang-py prettyprint-override"> import matplotlib.pyplot as plt

bar(range(10), range(10))
tick_params(labeltop=True, labelright=True)
  

 Generates this image: 

   

  UPD:  added a simple example for subplots. You should use  tick_params()  with axis object. 

 This code sets to display only top labels for the top subplot and bottom labels for the bottom subplot (with corresponding ticks): 

<pre class="lang-py prettyprint-override"> import matplotlib.pyplot as plt

f, axarr = plt.subplots(2)

axarr[0].bar(range(10), range(10))
axarr[0].tick_params(labelbottom=False, labeltop=True, labelleft=False, labelright=False,
                     bottom=False, top=True, left=False, right=False)

axarr[1].bar(range(10), range(10, 0, -1))
axarr[1].tick_params(labelbottom=True, labeltop=False, labelleft=False, labelright=False,
                     bottom=True, top=False, left=False, right=False)
  

 Looks like this: 

   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27361819)
 This is the suggested Matplotlib 2.0 solution from the official website http://matplotlib.org/examples/ticks_and_spines/spines_demo.html: 

  import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

ax = plt.subplot(111)
ax.plot(x, y)

# Hide the right and top spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

# Only show ticks on the left and bottom spines
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')

plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8180844)
 Here is a solution which shows two possible ways to solve your problem: 

  import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid.axislines import Subplot

left,bottom,width,height= -0.02 , 0.12, 1, 0.9
fig = plt.figure(figsize=(3,5))
ax1 = plt.Axes(fig,[left,bottom,width,height])
ax1.plot([1,2,3,4],'b') # plot on the first axes you created
fig.add_axes(ax1)

# using subplot you are acually using higher level objects

ax2 = Subplot(fig,111) # this addes another axis instance
fig.add_subplot(ax2)
ax2.axis["top"].set_visible(False)
ax2.axis["right"].set_visible(False)
ax2.plot([1,2,3,4,5],'r') # thos plots on the second

# now comment everything in ax2, and uncomment ax3
# you will get a crude, low level control of axes
# but both do what you want...

#ax3 = plt.Axes(fig,[left+0.2,bottom-0.2,width,height])
#ax3.plot([1,2,3,4],'g') # plot on the first axes you created

#for loc, spine in ax3.spines.iteritems():
#    if loc in ['left','bottom']:
#        spine.set_position(('outward',10)) # outward by 10 points
#    if loc in ['right','top']:
#        spine.set_color('none') # don't draw spine
#fig.add_axes(ax3)
plt.show()
  

   



