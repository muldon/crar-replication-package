Query: Removing entries from a dictionary based on values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15158636)
  

  {k: v for k, v in hand.items() if v != 0}
  

 In python 2.6 and earlier: 

  dict((k, v) for k, v in hand.items() if v != 0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15158767)
 If you don't want to create a new dictionary, you can use this: 

  >>> hand = {'a': 0, 'i': 0, 'm': 1, 'l': 1, 'q': 0, 'u': 0}
>>> for key in list(hand.keys()):  ## creates a list of all keys
...     if hand[key] == 0:
...             del hand[key]
... 
>>> hand
{'m': 1, 'l': 1}
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15158637)
 You can use a http://docs.python.org/2/tutorial/datastructures.html#dictionaries: 

  >>> { k:v for k, v in hand.items() if v }
{'m': 1, 'l': 1}
  

 Or, in pre-2.7 Python, the http://docs.python.org/2/library/stdtypes.html#dict constructor in combination with a http://docs.python.org/2/reference/expressions.html#grammar-token-generator_expression: 

  >>> dict((k, v) for k, v in hand.iteritems() if v)
{'m': 1, 'l': 1}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/15158638)
  hand = {k: v for k, v in hand.iteritems() if v != 0}
  

 For Pre-Python 2.7: 

  hand = dict((k, v) for k, v in hand.iteritems() if v != 0)
  

 In both cases you're filtering out the keys whose values are  0 , and assigning  hand  to the new dictionary. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4105043)
 Let's see if this works... 

  from itertools import groupby

def entry_key(entry):
    key, value = entry
    return (value['name'], value['author'])

def nub(d):
    items = d.items()
    items.sort(key=entry_key)
    grouped = groupby(items, entry_key)
    return dict([grouper.next() for (key, grouper) in grouped])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6307462)
 Clean one, but it will create copy of that dict: 

  dict(filter(lambda x: x[1] != [], d.iteritems()))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4105009)
 Iterate through the dictionary, keeping track of encountered  (name, author)  tuples as you go and remove those that you have already encountered: 

  def remove_duplicates(d):
    encountered_entries = set()
    for key, entry in d.items():
        if (entry['name'], entry['author']) in encountered_entries:
            del d[key]
        else:
            encountered_entries.add((entry['name'], entry['author']))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6307916)
 With generator object instead of list: 

  a = {'1': [], 'f':[1,2,3]}
dict((data for data in a.iteritems() if data[1]))
  



