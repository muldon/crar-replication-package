Query: How to print +1 in Python, as +1 (with plus sign) instead of 1?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8337012)
 With http://docs.python.org/library/stdtypes.html#string-formatting-operations: 

  print '%+d' % score
  

 With http://docs.python.org/library/stdtypes.html?highlight=str.format#str.format: 

  print '{0:+d}'.format(score)
  

 You can see the documentation for the formatting mini-language http://docs.python.org/library/string.html#format-specification-mini-language. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17433396)
 In case you only want to show a negative sign for minus score, no plus/minus for zero score and a plus sign for all positive score: 

  score = lambda i: ("+" if i > 0 else "") + str(i)

score(-1) # '-1'
score(0) # '0'
score(1) # '+1'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39829972)
 If you separate the exponents, as you have probably done, you can use https://docs.python.org/3/library/stdtypes.html#str.join: 

  >>> exponents = (10, 7, 6, 4, 1)
>>> print(' + '.join('2**{}'.format(n) for n in exponents))
2**10 + 2**7 + 2**6 + 2**4 + 2**1
  

 That will work in both Python 2 & 3. You can also use the  print()  function with the  sep  argument: 

  >>> print(*('2**{}'.format(n) for n in exponents), sep=' + ')
2**10 + 2**7 + 2**6 + 2**4 + 2**1
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39829920)
 It is pretty 'common' 'problem', and it is often solved by using ''.join method. I assume that you've a list of integers, so all you need to do is: 

  powers = [10, 7, 6, 4]
print(' + '.join(['2 ** {n}'.format(n= n) for n in powers]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48103930)
 you need to escape the plus sign  '[^0-9]\+.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16726462)
 Another one liner for sign() 

  sign = lambda x: (1, -1)[x<0]
  

 If you want it to return 0 for x = 0: 

  sign = lambda x: x and (1, -1)[x<0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/470163)
 Think it as 1 + (+1*(+1*2))). The first + is operator and following plus signs are sign of second operand (= 2). 

 Just like 1---2 is same as 1 - -(-(2)) or 1- (-1*(-1*(2)) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53647659)
  %+g  works but uses (very) old-style formatting. Python has evolved to provide 2 modern formatting methods: 

 New style formatting: 

  >>> "{0:+g}".format(2.00001)
'+2.00001'
>>> "{0:+g}".format(-2.00001)
'-2.00001'
>>> "{0:+g}".format(2)
'+2'
  

 and with python 3.6+ f-strings: 

  >>> value = 2
>>> f"{value:+g}"
'+2'
>>> value = -2.00001
>>> f"{value:+g}"
'-2.00001'
>>> value = 2.00001
>>> f"{value:+g}"
'+2.00001'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38595425)
 Change each individual  int  element in the  list  to a  str  inside the  .join  call instead by using a  generator expression : 

  print("+".join(str(i) for i in n_nx1lst) + " = ", sum(n_nx1lst))    
  

 In the first case, you're calling  str  on the whole  list  and not on individual elements in that  list . As a result, it  joins each character in the representation of the list , which looks like this: 

  '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'
  

 with the  +  sign yielding the result you're seeing. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/38595413)
 You don't need to call  str  on your list. That returns the str representation of your list and the output of that is joined with  '+' .  

 You can instead use https://docs.python.org/2/library/functions.html#map to convert each item in your list to  str , then  join : 

  print('+'.join(map(str, n_nx1lst)) + " = ", sum(n_nx1lst))
  

 You can also use the new style formatting to have a more readable output: 

  result = '+'.join(map(str, n_nx1lst))
print("{} = {}".format(result, sum(n_nx1lst)))
  



