Query: How to perform element-wise multiplication of two lists in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40593929)
 Use np.multiply(a,b): 

  import numpy as np
a = [1,2,3,4]
b = [2,3,4,5]
np.multiply(a,b)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38759133)
 you can multiplication using  lambda   

  foo=[1,2,3,4]
bar=[1,2,5,55]
l=map(lambda x,y:x*y,foo,bar)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22242119)
 You can try multiplying each element in a loop. The short hand for doing that is 

  ab = [a[i]*b[i] for i in range(len(a))]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10271504)
 Use a list comprehension mixed with  zip() :. 

  [a*b for a,b in zip(lista,listb)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10271498)
 Since you're already using  numpy , it makes sense to store your data in a  numpy  array rather than a list. Once you do this, you get things like element-wise products for free: 

  In [1]: import numpy as np

In [2]: a = np.array([1,2,3,4])

In [3]: b = np.array([2,3,4,5])

In [4]: a * b
Out[4]: array([ 2,  6, 12, 20])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34439123)
 create an array of ones;
multiply each list times the array; 
convert array to a list 

  import numpy as np

a = [1,2,3,4]
b = [2,3,4,5]

c = (np.ones(len(a))*a*b).tolist()

[2.0, 6.0, 12.0, 20.0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25429870)
 For large lists, we can do it the iter-way: 

   = itertools.imap(operator.mul, [1,2,3,4], [2,3,4,5])
  

  .next()  gives each of the element in the output list. 

 The output would be the length of the shorter of the two input lists. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37670758)
 In pure Python, try a nested list/generator comprehension: 

  >>> [sum(ai * bi for ai, bi in zip(a, b))
...  for a, b in zip(A, B)]
[2, 0]
  

 or with numpy, you can do an element-wise product of the 2-dimensional arrays, followed by a sum along each row: 

  >>> import numpy as np
>>> np.multiply(A, B).sum(1)
array([2, 0])
  

 Note that the numpy solution will only work if all vectors are the same length â€“ each list of vectors is implicitly converted into a two-dimensional matrix. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32414725)
 You should use . 

  import pandas as pd

df1 = pd.DataFrame({'col1' : [1,2,6,8,-1,3], 'col2' : [1,2,6,8,-1,3], 
    'col3' : [1,2,6,8,-1,3], 'col4' : [1,2,6,8,-1,3]})
df2 = pd.DataFrame({'col1' : [9,8,7,1,1,1], 'col2' : [11,12,16,2,2,1]})

for x in range(len(df2.columns)):
    new_df = df1.multiply(df2.iloc[:, x], axis=0)
    print new_df
  

 This returns: 

     col1  col2  col3  col4
0     9     9     9     9
1    16    16    16    16
2    42    42    42    42
3     8     8     8     8
4    -1    -1    -1    -1
5     3     3     3     3

   col1  col2  col3  col4
0    11    11    11    11
1    24    24    24    24
2    96    96    96    96
3    16    16    16    16
4    -2    -2    -2    -2
5     3     3     3     3
  



