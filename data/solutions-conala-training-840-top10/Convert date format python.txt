Query: Convert date format python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30400589)
 Use  %y  instead of  %Y : 

  >>> d2 = datetime.datetime.strptime(d1,'%d.%m.%y').strftime('%Y-%m-%d')
>>> d2
'2015-05-22'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19068355)
 The particular format for  strptime : 

  datetime.datetime.strptime(string_date, "%Y-%m-%d %H:%M:%S.%f")
#>>> datetime.datetime(2013, 9, 28, 20, 30, 55, 782000)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30819460)
 You can use  datetime.strptime  with a proper format : 

  >>> datetime.strptime('15-MARCH-2015','%d-%B-%Y')
datetime.datetime(2015, 3, 15, 0, 0)
  

 Read more about  datetime.strptime  and date formatting: https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/30821120)
 The  datetime  module will help you here. First convert your string to a  datetime  object using  strptime , then convert this object to the required string format with  strftime : 

  from datetime import datetime
datetime.strftime(datetime.strptime('15-MARCH-2015','%d-%B-%Y'),'%Y-%m-%d')
  

 Will yield: 

  '2015-03-15'
  

 Notice the string format  '%d-%B-%Y'  conforms to the string as you have it and   '%Y-%m-%d'  to the format you want it to be in. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53147854)
 You first need to convert to  datetime , using  pd.datetime , then you can format it as you wish using  strftime : 

  >>> df
        Date  Transaction
0  6/15/2006        -4.27
1  6/16/2006        -2.27
2  6/19/2006        -6.35

df['Date'] = pd.to_datetime(df['Date'],format='%m/%d/%Y').dt.strftime('%Y%m%d')

>>> df
       Date  Transaction
0  20060615        -4.27
1  20060616        -2.27
2  20060619        -6.35
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5220004)
 You can use http://docs.python.org/library/datetime.html#date-objects: 

  >>> import datetime
>>> s = '2011-03-07'
>>> datetime.date(*map(int, s.split('-')))
datetime.date(2011, 3, 7)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43133837)
 You can use  datetime  methods. 

  from datetime import datetime
a = '20160228'
date = datetime.strptime(a, '%Y%m%d').strftime('%m/%d/%Y')
  

  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19068281)
 You should use http://docs.python.org/2/library/datetime.html#datetime.datetime.strptime: 

  import datetime

dt = datetime.datetime.strptime(string_date, fmt)
  

  fmt  will need to be the appropriate format for your string. You'll find the http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31985198)
 You can use the format -  '%Y %B %d'  along with  datetime.datetime.strptime()  method to convert string to date. Where  %Y  is 4 digit year,  %B  is complete month name, and  %d  is date. 

 Example/Demo - 

  >>> datetime.datetime.strptime('2015 June 1','%Y %B %d')
datetime.datetime(2015, 6, 1, 0, 0)

>>> datetime.datetime.strptime('2015 June 1','%Y %B %d').date()
datetime.date(2015, 6, 1)
  

 Use the first one, if you are content with  datetime  object, if you want the  date()  object itself, you can use the second one. 



