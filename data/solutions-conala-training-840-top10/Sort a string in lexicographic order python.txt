Query: Sort a string in lexicographic order python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31425347)
 Here's a slightly improved version of https://stackoverflow.com/a/20955291/2428123's code for returning a list of all permutations of a string  s  with distinct characters (not necessarily in lexicographic sort order), without using itertools: 

  def get_perms(s, i=0):
    """
    Returns a list of all (len(s) - i)! permutations t of s where t[:i] = s[:i].
    """
    # To avoid memory allocations for intermediate strings, use a list of chars.
    if isinstance(s, str):
        s = list(s)

    # Base Case: 0! = 1! = 1.
    # Store the only permutation as an immutable string, not a mutable list.
    if i >= len(s) - 1:
        return ["".join(s)]

    # Inductive Step: (len(s) - i)! = (len(s) - i) * (len(s) - i - 1)!
    # Swap in each suffix character to be at the beginning of the suffix.
    perms = get_perms(s, i + 1)
    for j in range(i + 1, len(s)):
        s[i], s[j] = s[j], s[i]
        perms.extend(get_perms(s, i + 1))
        s[i], s[j] = s[j], s[i]
    return perms
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7371971)
  cmp  was the old way of doing this, now deprecated, but for posterity: 

  s='aAaBbcCdE'
sorted(s, lambda x,y: cmp(x.lower(), y.lower()) or cmp(x,y))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7375703)
 You could use a 2-tuple for the key: 

  text='aAaBbcCdE'
sorted(text,key=lambda x:(str.lower(x),x))
# ['A', 'a', 'a', 'B', 'b', 'C', 'c', 'd', 'E']
  

 The first element in the tuple,  str.lower(x)  is the primary key (making  a  come before  B ), while  x  itself breaks ties (making  A  come before  a ). 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/791325)
 Just sort the list of tuples (name, value) -- Python does lexicographic ordering for you. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35025516)
 Have your  key  function return a list of items. The sort is lexicographic in that case. 

  l = [ '1.0.0.0.py', '0.0.0.0.py', '1.1.0.0.py',]
s = sorted(l, key = lambda x: [int(y) for y in x.replace('.py','').split('.')])
print s
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39684371)
 A verbose implementation of https://www.nayuki.io/page/next-lexicographical-permutation-algorithm approach on lexicographic ordering 

  def next_permutation(case):
    for index in range(1,len(case)):
        Px_index = len(case) - 1 - index
        #Start travelling from the end of the Data Structure
        Px = case[-index-1]
        Px_1 = case[-index]

        #Search for a pair where latter the is greater than prior
        if Px < Px_1 :
            suffix = case[-index:]
            pivot = Px
            minimum_greater_than_pivot_suffix_index = -1
            suffix_index=0

            #Find the index inside the suffix where ::: [minimum value is greater than the pivot]
            for Py in suffix:
                if pivot < Py:
                    if minimum_greater_than_pivot_suffix_index == -1 or   suffix[minimum_greater_than_pivot_suffix_index] >= Py:
                        minimum_greater_than_pivot_suffix_index=suffix_index
                suffix_index +=1
            #index in the main array
            minimum_greater_than_pivot_index = minimum_greater_than_pivot_suffix_index + Px_index +1

            #SWAP
            temp = case[minimum_greater_than_pivot_index]
            case[minimum_greater_than_pivot_index] = case[Px_index]
            case[Px_index] = temp

            #Sort suffix
            new_suffix = case[Px_index+1:]
            new_suffix.sort()

            #Build final Version
            new_prefix = case[:Px_index+1]
            next_permutation = new_prefix + new_suffix
            return next_permutation
        elif index == (len(case) -1):
            #This means that this is at the highest possible lexicographic order
            return False



#EXAMPLE EXECUTIONS
print("===INT===")
#INT LIST
case = [0, 1, 2, 5, 3, 3, 0]
print(case)
print(next_permutation(case))


print("===CHAR===")
#STRING
case_char = list("dkhc")
case = [ord(c) for c in case_char]
print(case)
case = next_permutation(case)
print(case)
case_char = [str(chr(c)) for c in case]
print(case_char)
print(''.join(case_char))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54602887)
 That's correct. 

 The  key  function is called on each value in the list you're sorting, and the sort order is based on the result of that call. Strings naturally sort lexicographically ("alphabetically" as you put it) and  list.sort  sorts ascending by default, so you'll get the list of all tuples in the ascending lexicographic order of their second element. 

 Note that this is more commonly done by using the  operator.itemgetter  convenience function. 

  from operator import itemgetter

my_list.sort(key=itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7372478)
 Do not use lambda functions when there's builtin ones f the job. Also never use the  cmp  argument of sted because it's deprecated: 

  sted(s, key=str.lower)
  

   

  sted(s, key=str.upper)
  

 But that may not keep 'A' and 'a' in der, so: 

  sted(sted(s), key=str.upper)
  

 that will and, by the nature of  sted  the operation will be very fast f almost sted lists (the second  sted ). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11199998)
 These are the two ways: 

  print sorted(my_list)
print sorted(my_list, reverse=True)
  

 The whole reason people use dates in YYYYMMDD format is so that lexicographic (string) sorting will accomplish a date sort. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48662441)
 The problem stems from the fact you are using  key . That is used to specify a value to be compared. You have a heterogenous list. You will end up comparing elements of different types. I would suggest you look at the  cpm  argument, which is a function to compare two elements. That way, you can be more precise with your sorting rule. 

 If i understood your problem correctly, you most likely want this sort: 

  def compare(a, b):
    if isinstance(a, str) and isinstance(b, str):
        return cmp(a, b)
    elif isinstance(a, str) and isinstance(b, tuple):
        return cmp(a, b[1])
    elif isinstance(b, str) and isinstance(a, tuple):
        return cmp(a[1], b)
    elif isinstance(a, tuple) and isinstance(b, tuple):
        return cmp(a[1], b[1])
    else:
        print "Impossible"

    return 0

cols.sort(cmp=compare)
print cols
  

 There are 4 cases to distinguish when looking at your list input. The  string string  case, the  string tuple ,  tuple string  and  tuple tuple  case. 

 We account for each of these cases and write the comparison rule for each. 

 The  cmp  function you see used in the  return  statements simply informs the relationship of the terms, with  -1  being  a < b ,  0  being  a = b  and  1  being  a > b . 

 Please note that the comparison is  lexicographic  (string comparison). You might want to case the string to integers and compare those. 

 The result is this: 

  ['2016', ('a', '2016'), ('c', '2016'), ('b', '2016'), '2017', ('a', '2017'), ('c', '2017'), ('b', '2017'), '2018', ('a', '2018'), ('c', '2018')]
  

 If you replace accessing the second element of the tuple ( the year in your case ) with accessing the first, you will get this: 

  ['2016', '2017', '2018', ('a', '2016'), ('a', '2017'), ('a', '2018'), ('b', '2016'), ('b', '2017'), ('c', '2016'), ('c', '2017'), ('c', '2018')]
  

 You could add a flag to decide what item of the tuple the comparison should use. 



