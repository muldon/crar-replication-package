Query: Regex. Match words that contain special characters or 'http://'
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4695219)
 Not using regexs, but maybe this can work? (I'm assuming ':' and '/' are special characters so it will remove the URL implicitly) 

  def good_word(word):
    import string
    for c in word:
        if not c in string.ascii_letters:
            return False
    return True

def clean_string(str):
    return ' '.join([w for w in input.split() if good_word(w)])

print clean_string("%he#llo, my website is: http://www.url.com/abcdef123")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4695422)
 For the example string you give, the following regular expression works OK: 

  >>> a = '%he#llo, my website is: http://www.url.com/abcdef123'
>>> re.findall('(http://\S+|\S*[^\w\s]\S*)',a)
['%he#llo,', 'is:', 'http://www.url.com/abcdef123']
  

 ... or you can remove those words with  re.sub  

  >>> re.sub('(http://\S+|\S*[^\w\s]\S*)','',a)
' my website  '
  

 The  |  means alternation and will match the expression on either side within the group.  The part on the left matches  http://  followed by one or more non-space characters.  The part on the right matches zero or more non-space characters, followed by anything that isn't a word or space character, followed by zero or more non-space characters -- that ensures that you have a string with at least one non-word character and no spaces. 

  Updated:  Of course, as the other answers implicitly suggest, since the  http://  prefix contains a non-word character ( / ) you don't need to have that as an alternative - you could simplify the regular expression to  \S*[^\w\s]\S* .  However, perhaps the example above with alternation is still useful. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4695269)
 You can use look aheads: 

  >>> re.findall(r":\s|^)(\w+)=\s|$)", "Start %he#llo, my website is: http://www.url.comabcdef123 End")
['Start', 'my', 'website', 'End']
  

  Explanation:  

 
  :\s|^)  means our word starts the regex or is preceeded by a space. (and the space does not belong to the word). 
  (\w+)  matches a word (and is what we are interested in). 
  =\s|$)  means our word is followed by space or end of the string. (and once again, the space does not belong to the word). 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31096576)
  http://i.imgur.com/.*))\?.*)?
  

 The first capturing group  http://i.imgur.com/.*))  means that the string should start with  http://i.imgur.com/  followed by any number of characters  .* ) this is a poor regex, you shouldn't do it this way).  .*)  is also the second capturing group. 

 The third capturing group  \?.*)  means that this part of the string must start with  ?  and then contain any number of any characters, as above. 

 The last  ?  means that the last capturing group is optional.  

  EDIT : 
These groups can then be used as: 

  p = re.compiler'http://i.imgur.com/.*))\?.*)?')
m = p.match'ab')
m.group0);
m.group2);
  

 To improve the regex, you must limit the engine to what characters you need, like: 

  http://i.imgur.com/[A-z0-9\-]+))\?[[^/]+*)?
  

 
    [A-z0-9\-]+  limit to alphanumeric characters 
   [^/]  exclude  /  
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31434160)
 You can use this regex to match those words: 

  \b\d+\w*\b
  

 https://regex101.com/r/dT5gW8/7 

  Code:  

  import re
p = re.compile(ur'\b\d+\w*\b')
test_str = u"he will be 60 years old today\nshe turns 79yo today this afternoon"

print re.findall(p, test_str)
  

  Output:  

  [u'60', u'79yo']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30394249)
 Instead of using all sorts of complicated look-arounds, you can use  \b  to detect the boundary of words. This way, you can use e.g.  \b[a-zA-Z]+(?:-[a-zA-Z]+)*\b  

 Example: 

  >>> p = r"\b[a-zA-Z]+(?:-[a-zA-Z]+)*\b"
>>> text = "This is some example text, with some multi-hyphen-words and invalid42 words in it."
>>> re.findall(p, text)
['This', 'is', 'some', 'example', 'text', 'with', 'some', 'multi-hyphen-words', 'and', 'words', 'in', 'it']
  

 Update: Seems like this does not work too well, as it also detects fragments from URLs, e.g.  www ,  sec  and  gov  from  http://www.sec.gov .  

 Instead, you might try this variant, using look-around explicitly stating the 'legal' characters: 

  r"""(?<![^\s("])[a-zA-Z]+(?:[-'][a-zA-Z]+)*(?=[\s.,:;!?")])"""
  

 This seems to https://regex101.com/r/uU6yU0/6. 

 Let's dissect this regex: 

 
  (?<![^\s("])  - look-behind asserting that the word is preceeded by space, quote or parens, but e.g. not a number (using double-negation instead of positive look-behind so the first word is matched, too) 
  [a-zA-Z]+  - the first part of the word 
  (?:[-'][a-zA-Z]+)*  - optionally more word-segments after a  '  or  -  
  (?=[\s.,:;!?")])  - look-ahead asserting that the word is followed by space, punctuation, quote or parens 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19410700)
 Ok here is my version of doing this. I noticed that you want your output to be  7 , which means you dont want to count special characters and numbers. So here is regex pattern: 

  re.findall("[a-zA-Z_]+", string)
  

 Where  [a-zA-Z_]  means it will match  any  character beetwen  a-z  (lowercase) and  A-Z  (upper case).  

 

 . If you want to remove all extra spaces, just do: 

  string = string.rstrip().lstrip() # Remove all extra spaces at the start and at the end of the string
while "  " in string: # While  there are 2 spaces beetwen words in our string...
    string = string.replace("  ", " ") # ... replace them by one space!
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41776471)
 The reason that your regex matches unexpected words in that the  .  modifier matches any character. If you want to get rid of that you need to restrict the characters between the special ones. In that case, you need to use a negated character class, that will match anything except vowel sounds. 

  ^[^aouie]*a[^aeoui]*e[^aeiou]*i[^aeiou]*o[^aeiou]*u[^aeiou]*$
  

 Demo: https://regex101.com/r/Wp2I6H/2  

 So now you can find the expected words: 

  regex = re.compile(r'[^aouie]*a[^aeoui]*e[^aeiou]*i[^aeiou]*o[^aeiou]*u[^aeiou]*')
[w for w in wordlist if regex.match(w)]
  

 Note that since you want to use your regex within a loop it's better to compile your regex out of the loop and use the compiled one in the loop, rather than letting python to compile the regex at each iteration. Also since the regex will match the word entirely you can use  re.match  instead of search. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/49881068)
 I would use word boundaries ( \b ) filled with 1 or more non-space: 

  match_pattern = re.findall(r'\b\S+\b', str1)
  

 result: 

  ['These', 'should', 'be', 'counted', 'as', 'a', 'single-word', 'b**m']
  

    is skipped thanks to word boundary magic, which don't consider that as a word at all either. 



