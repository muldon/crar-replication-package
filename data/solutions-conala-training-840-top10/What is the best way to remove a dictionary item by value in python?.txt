Query: What is the best way to remove a dictionary item by value in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29218792)
 You can use a simple  dict  comprehension: 

  myDict = {key:val for key, val in myDict.items() if val != 42}
  

  

  >>> {key:val for key, val in myDict.items() if val != 42}
{8: 14, 1: 'egg'}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29218874)
 You must create a copy to iterate over as changing the size of the dictionary inside of a loop causes a RunTimeError.  Iterate over key, value pairs in your dictionary copy using items() and compare each value to the value you are looking for.  If they match, delete the key from the dictionary. 

      for key, value in dict(myDict).items():
        if value == 42:
            del mydict[key]
  

 Adding answer for question in the comments below as it was too big for a comment.  Here is a quick console session showing that  mydict.copy()  and  dict(myDict)  accomplish the same thing. 

  >>>import copy
>>>dict1 = {1:"egg", "Answer":42, 8:14, "foo":42}
>>>dict2 = dict(dict1)
>>>dict3 = dict1.copy()
>>>dict4 = dict1
>>>dict1[1] = "egg sandwich"
>>>dict1
{'Answer': 42, 1: 'egg sandwich', 'foo': 42, 8: 14}
>>>dict2
{'Answer': 42, 1: 'egg', 'foo': 42, 8: 14}
>>>dict3
{'Answer': 42, 1: 'egg', 'foo': 42, 8: 14}
>>>dict4
{'Answer': 42, 1: 'egg sandwich', 'foo': 42, 8: 14}
>>>dict2['foo'] = "I pity the"
dict1
>>>{'Answer': 42, 1: 'egg sandwich', 'foo': 42, 8: 14}
>>>dict2
{'Answer': 42, 1: 'egg', 'foo': 'I pity the', 8: 14}
>>>dict3
{'Answer': 42, 1: 'egg', 'foo': 42, 8: 14}
>>>dict4
{'Answer': 42, 1: 'egg sandwich', 'foo': 42, 8: 14}
>>>dict4[8] = "new"
>>>dict1
{'Answer': 42, 1: 'egg sandwich', 'foo': 42, 8: 'new'}
>>>dict2
{'Answer': 42, 1: 'egg', 'foo': 'I pity the', 8: 14}
>>>dict3
{'Answer': 42, 1: 'egg', 'foo': 42, 8: 14}
>>>dict4
{'Answer': 42, 1: 'egg sandwich', 'foo': 42, 8: 'new'}
`
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29219414)
 You can iterate over a copy and do a lookup: 

  for k in myDict.copy():
    if myDict[k] == 42:
        del myDict[k]
  

 Or  only copy the keys: 

  myDict = {1:"egg", "Answer":42, 8:14, "foo":42}
for k in list(myDict):
    if myDict[k] == 42:
        del myDict[k]
print(myDict)
{8: 14, 1: 'egg'}
  

 Which if you want to mutate the original dict should be the most efficient. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5447527)
 The  dict.pop(key[, default])  method allows you to remove items when you know the key. It returns the value at the key if it removes the item otherwise it returns what is passed as  default . See https://docs.python.org/3/library/stdtypes.html#dict.pop.' 

 Example: 

  >>> dic = {'a':1, 'b':2}
>>> dic
{'a': 1, 'b': 2}
>>> dic.pop('c', 0)
0
>>> dic.pop('a', 0)
1
>>> dic
{'b': 2}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49837739)
 c is the new dictionary, and a is your original dictionary, {'z','w'}
are the keys you want to remove from a 

  c = {key:a[key] for key in a.keys() - {'z', 'w'}}
  

 Also check: https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch01.html 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14742820)
 A simple comparison between  del  and  pop() : 

  import timeit
code = """
results = {'A': 1, 'B': 2, 'C': 3}
del results['A']
del results['B']
"""
print timeit.timeit(code, number=100000)
code = """
results = {'A': 1, 'B': 2, 'C': 3}
results.pop('A')
results.pop('B')
"""
print timeit.timeit(code, number=100000)
  

 result:  

  0.0329667857143
0.0451040902256
  

 So,  del  is faster than  pop() .  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31370883)
 This answer uses a dictionary comprehension similar to the selected answer, but will not except on a missing item. 

 python 2 version: 

  {k:v for k, v in bigDict.iteritems() if k in ('l', 'm', 'n')}
  

 python 3 version: 

  {k:v for k, v in bigDict.items() if k in ('l', 'm', 'n')}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5448359)
 I'd build a list of keys that need removing, then remove them. It's simple, efficient and avoids any problem about simultaneously iterating over and mutating the dict. 

  keys_to_remove = [key for key, value in some_dict.iteritems()
                  if value == value_to_remove]
for key in keys_to_remove:
    del some_dict[key]
  



