Query: Creating an empty list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47748004)
 I'm surprised nobody suggest this simple approach to creating a list of empty lists. This is an old thread, but just adding this for completeness. This will create a list of 10 empty lists 

  x = [[] for i in range(10)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2972414)
 I use  [] . 

 
 It's faster because the list notation is a short circuit. 
 Creating a list  with  items should look about the same as creating a list without, why should there be a difference? 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42771740)
 Programmatically making variables is a very bad idea. Make a dictionary instead with those names as keys:  

  my_lists = {key:[] for key in my_list}
  

   

  my_lists['a'].append(some_data)
  

 This also gives you the advantage of easily being able to loop through them if you need to.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28194216)
 Use dictionary comprehension, 

  {item: [] for item in my_list}
  

 You are simply iterating the list and creating a new list for every key. 

 Alternatively, you can think about using https://docs.python.org/2/library/collections.html#collections.defaultdict, like this 

  from collections import defaultdict
d = defaultdict(list)
for item in my_list:
    d[item].append(whatever_value)
  

 Here, the function object which we pass to  defaultdict  is the main thing. It will be called to get a value if the key doesn't exist in the dictionary. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14813962)
 https://stackoverflow.com/a/14813529/284795 is correct. 

 Stepping back, you might be able to avoid creating those empty lists at all, by use of http://docs.python.org/2/library/collections.html#collections.defaultdict 

  >>> import collections
>>> d = collections.defaultdict(list)
>>> d
defaultdict(<type 'list'>, {})
>>> d["hobbits"].append("Frodo")
>>> d["hobbits"].append("Sam")
>>> d
defaultdict(<type 'list'>, {'hobbits': ['Frodo', 'Sam']})
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14813492)
  dict((k, v) for k, v in default.iteritems() if v)
  

 This filters all items which are not empty strings, empty dict/tuple/list. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40959528)
 You can get only  //font  and later use loop to get text or own text if there is empty text (or rather  None ) 

  import lxml.html

data = '''
<font>A</font>
<font></font>
<font>C</font>
'''

tree = lxml.html.fromstring(data)

fonts = tree.xpath('//font')

result = [x.text if x.text else '' for x in fonts]

print(result)
  

 

 If you don't know how list comprehension works - it do this 

  result = []

for x in fonts:
    if x.text: # not None
        result.append(x.text)
    else:
        result.append('')

print(result)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33185225)
 You want an empty list, so that you will append something in every iteration, and after 7 iteration you want to break the loop. . 

 Now, let's see your attept. 

  >>oc = [0]*8
>>oc
[0, 0, 0, 0, 0, 0, 0, 0]
>>len(oc)
>>8
  

 So, you are basically creating a list of 8 element each of which is 0 with the line  [0]*8  

  while len(oc) <= 7: #This will never be true because len(oc) is 8 already.
  

 So, take an empty list  [] . Below code will work. 

  def occupants():
    oc = []
    while len(oc) < 7:
        x = int(input("Enter a number"))
        oc.append(x)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42794092)
 I do not really know about it, but it seems to me, by experience, that jpcgt is actually right. Following example: If I use following code 

  t = [] # implicit instantiation
t = t.append(1)
  

 in the interpreter, then calling t gives me just "t" without any list, and if I append something else, e.g. 

  t = t.append(2)
  

 I get the error "'NoneType' object has no attribute 'append'". If, however, I create the list by  

  t = list() # explicit instantiation
  

 then it works fine. 



