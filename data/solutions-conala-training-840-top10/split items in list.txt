Query: split items in list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39405020)
 If you can just strip your input string. From your description, all you need is to split the words on either  \s+  or  \s*->\s*  or  \s*=>\s*  

 So here is my solution: 

  p = re.compile(r'\s*[-=]>\s*|\s+')
input1 = "she he"
input2 = " she  -> he \n".strip()

print p.split(input1)
print p.split(input2)
  

 Your output would be just 'she' and 'he': 

  ['she', 'he']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/51455419)
 the output is q queryset not string to split. 

 you can iterate over all items and split them into a list 

  fp_items = SWTypes.objects.filter(pk__in=id,swtype__in=swtype).values_list('fp_items', flat=True)
res = []
for item in fp_items:
    res += item.split(";")
  

 and use res as merged list of all splited content into a list 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4968169)
 You can use http://docs.python.org/library/itertools.html#itertools.chain: 

  >>> a = ["a;b", "c;d","y;z"]
>>> list(itertools.chain(*(s.split(';') for s in a)))
['a', 'b', 'c', 'd', 'y', 'z']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48910757)
 Try something like this 

  dict_comp = {k.strip():v.strip() for k,v in 
               zip(my_list[0].split('\t'), my_list[1].split('\t'))}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18568363)
  input()  returns a string. If you would like for  items  to be a list, you can do  item.split() : 

 Let's assume  items  is  John Mary Bill  

 You can then do: 

  items = items.split()
  

 Then do  items.sort() , as  items  will be a list object, not a string. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16498851)
 The direct pythonic one-liner translation of what you're describing is: 

  set_1 = set(val for val in list_1.split() if val in dic_1)
  

 It takes each value from the split, checks if that value is a key in dictionary and constructs a set out of those values using a generator expression. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4968166)
 That's work : 

  l = []
for item in ["a;b", "c;d", "e;f"]:
     l += item.split(";")

print l
  

  

  ['a', 'b', 'c', 'd', 'e', 'f']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24427943)
 You should use the join method: 

  ",".join(m['value'].split(', ')[0:2:])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12866686)
 As has been pointed out,  str  is not a good name for your string, so using  words  instead: 

  output = [s.strip() for s in words.split('  ') if s]
  

  .split('  ') -- with two spaces -- will give you a list that includes empty strings, and items with trailing/leading whitespace.  list comprehension iterates through that list, keeps any non-blank items ( if s ), and .strip() takes care of any leading/trailing whitespace. 



