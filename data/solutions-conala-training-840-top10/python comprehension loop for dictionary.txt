Query: python comprehension loop for dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20489629)
 Looping over a dictionary only yields the  keys . Use  d.items()  to loop over both keys and values: 

  {key: value for key, value in d.items()}
  

 The  ValueError  exception you see is  not  a dict comprehension problem, nor is it limited to Python 3; you'd see the same problem in Python 2 or with a regular  for  loop: 

  >>> d = {'a':1, 'b':2, 'c':3, 'd':4}
>>> for key, value in d:
...     print key, value
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: need more than 1 value to unpack
  

 because each iteration there is only  one  item being yielded. 

 Without a transformation,  {k: v for k, v in d.items()}  is just a verbose and costly  d.copy() ; use a dict comprehension only when you do a little more with the keys or values, or use conditions or a more complex loop construct. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52106333)
 Loop over  items() .  

 You can use comprehension (no need to use  [ ]  as it is in parenthesis already): 

  print(k for k,v in humans.items() if v > 20)
  

 or really loop: 

  for k,v in humans.items():
    if v > 20:
       print(k)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/765409)
 The following is identical to Rick Copeland's answer, just written without a using generator expression: 

  outdict = {}
for k, v in {'My Key': 'My Value'}.iteritems():
    outdict[k.lower()] = v.lower()
  

 Generator-expressions, list comprehension's and (in Python 2.7 and higher) dict comprehension's are basically ways of rewriting loops. 

 In Python 2.7+, you can use a dictionary comprehension (it's a single line of code, but you can reformat them to make it more readable): 

  {k.lower():v.lower()
    for k, v in
    {'My Key': 'My Value'}.items()
}
  

 They are quite often tidier than the loop equivalent, as you don't have to initialise an empty dict/list/etc.. but, if you need to do anything more than a single function/method call they can quickly become messy. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50139549)
 Let's try a dictionary comprehension: 

  new_dict = {
    k : arr['group'] for arr in my_array for k in arr['pins']
}
  

  

 This is equivalent to: 

  new_dict = {}
for arr in my_array:
    for k in arr['pins']:
        new_dict[k] = arr['group']
  

  

  print(new_dict)
{1: 'group1', 2: 'group1', 3: 'group2', 4: 'group2'}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25368283)
 
   Is there a way to do this in a fewer lines of code or more efficiently
  using list comprehension or other methods? 
 

 Yes, provided you know how to implement dictionary comprehension and list comprehension. 
 Note , question similar to this has been asked numerous times, where user knows a way to code via loops but fails to comprehend how to achieve this in a comprehensive way. 

 Considering this, I will take your example code and translate in as a dict + list comprehension fashion 

  Your Code  

  new_dict = {}

for i in dict: #This accesses each dictionary key.
    temp = []
    for j in dict[i]: #This iterates through the inner lists
        if j is None:
            temp.append('None')
        else:
            temp.append(j)
        temp2 = {str(i):temp}
        new_dict.update(temp2)

    print(new_dict)
  

  We will navigate from inner to outer  

 
  Convert your explicit  if  statement to a ternary form 

  new_dict = {}
for i in ur_dict: #This accesses each dictionary key.
    temp = []
    for j in ur_dict[i]: #This iterates through the inner lists
        temp.append('None' if j is None else j)
        temp2 = {str(i):temp}
    new_dict.update(temp2)
   
  Convert the Inner Loop to list comprehension 

  new_dict = {}
for i in ur_dict: #This accesses each dictionary key.
    temp = ['None' if elem is None else elem 
            for elem in ur_dict[i]]
    temp2 = {str(i): temp}
    new_dict.update(temp2)
   
  Convert the Outer Loop to dict comprehension 

  {key : ['None' if elem is None else elem 
        for elem in value] 
 for key, value in ur_dict.items()}
   
 

  Note , if you are using  python 2.X , instead of  ur_dict.items()  use  ur_dict.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29938456)
 You cannot use a dict comprehension for that, because a dict comprehension produces  one  dictionary with the keys and values taken from the loop(s). 

 You'd use a list comprehension instead: 

  [{r["section"]: r["title"]} for r in listofdict]
  

 This produces the one dictionary each iteration, producing a new list: 

  >>> listofdict = [{"id":1, "title": "asc", "section": "123"},{"id":2, "title": "ewr", "section": "456"}]
>>> [{r["section"]: r["title"]} for r in listofdict]
[{'123': 'asc'}, {'456': 'ewr'}]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19121755)
 The short form is as follows (called  dict comprehension , as analogy to the  list comprehension ,  set comprehension  etc.): 

  x = { row.SITE_NAME : row.LOOKUP_TABLE for row in cursor }
  

 so in general given some  _container  with some kind of elements and a function  _value  which for a given element returns the value that you want to add to this key in the dictionary: 

  { _key : _value(_key) for _key in _container }
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21728599)
 The key and value parts are  separate  expressions. Use the conditional expression in just the key part: 

  args = {'job[%s]' % k if k != 'id' else k: v for k, v in job.iteritems()}
  

 The  :  is not part of either expression, only of the dictionary comprehension syntax. You also need to loop over both keys and values; in Python 2, use  job.iteritems() , Python 3,  job.items() . 

  

  >>> job = {'id':1234, 'age':17, 'name':'dev'}
>>> {'job[%s]' % k if k != 'id' else k: v for k, v in job.iteritems()}
{'id': 1234, 'job[age]': 17, 'job[name]': 'dev'}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34326571)
 This is https://docs.python.org/3.5/tutorial/datastructures.html#dictionaries comprehensions.
You should view the doc of https://docs.python.org/3.5/tutorial/datastructures.html#list-comprehensions (it works similar to dict comprehension) 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/19121826)
 What you're using is called a list comprehension. They're pretty awesome ;) 

 They have a cousin called a generator expression that works like a list comprehension but instead of building the list all at once, they generate one item at a time. . You can even build functions that are generators - there are plenty of questions and sites to cover that info, though. 

 You can do one of two things: 

  x = dict(((row.SITE_NAME, row.LOOKUP_TABLE) for row in cursor))
  

 Or, if you have a sufficiently new version of Python, there is something called a dictionary comprehension - which works like a list comprehension, but produces a dictionary instead. 

  x = {row.SITE_NAME : row.LOOKUP_TABLE for row in cursor}
  



