Query: Python - Sort a list of dics by value of dict`s dict value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4331932)
  dict s are unordered. So there is no way to sort them directly, but if you are 
willing to convert the  dict  into a list of (key,value)-tuples, then you could do this: 

  In [9]: d
Out[9]: {'a': {'b': 'whatever', 'k': 1}, 'b': {'b': 'sort by k', 'k': 2}}

In [15]: sorted(d.items(),key=lambda x: x[1]['k'],reverse=True)
Out[15]: [('b', {'b': 'sort by k', 'k': 2}), ('a', {'b': 'whatever', 'k': 1})]
  

 This http://wiki.python.org/moin/HowTo/Sorting#KeyFunctions explains the use of the  key  parameter. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16773365)
 From your comment to gnibbler answer, i'd say you want a list of pairs of key-value sorted by value: 

  sorted(data.items(), key=lambda x:x[1])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33578000)
 You can pass sort or sorted a key function: 

  In [11]: def key(x):
             try:
                 return x["post"][0]["time"]   # return ISO date string
             except IndexError:
                 return "Not a date string"    # any letter > all date strings

In [12]: sorted(d, key=key)
Out[12]:
[{'id': 0,
  'post': [{'id': 0, 'time': '2015-11-07 01:06:08.939687', 'title': 'MyPost'}],
  'thread': 'First'},
 {'id': 1,
  'post': [{'id': 0, 'time': '2015-11-07 01:06:42.933263', 'title': 'MyPost'}],
  'thread': 'Second'},
 {'id': 2, 'name': 'NoPosts', 'post': []}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20531893)
 In Python (and most languages) http://en.wikipedia.org/wiki/Associative_array, so you can't "sort" a dictionary. 

 You can retrieve and sort the keys and iterate through those: 

  for key in sorted(product_list.keys()):
    item = product_list[key]
    item.doSomething()
  

 Or you can use a http://docs.python.org/2/library/collections.html#collections.OrderedDict, like so: 

   from collections import OrderedDict
  

 And then build the dictionary in the required order (which is up to you to determine) but below we sort using the keys: 

   product_list = OrderDict(sorted(product_list.items(), key=lambda k: k[0]))
  

 For reference,  Dict.items()  returns a list of tuples in the form: 

  [(key1, value1), (key2, value2) , ... , (keyN, valueN)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14032628)
 Python has a built-in function called http://docs.python.org/2/library/functions.html#sorted, which will give you a sorted list from any iterable you feed it (such as a list ( [1,2,3] ); a dict ( {1:2,3:4} , although it will just return a sorted list of the keys; a set ( {1,2,3,4 ); or a tuple ( (1,2,3,4) )). 

  >>> x = [3,2,1]
>>> sorted(x)
[1, 2, 3]
>>> x
[3, 2, 1]
  

 Lists also have a http://docs.python.org/2/library/stdtypes.html#typesseq-mutable method that will perform the sort in-place (x.sort() returns None but changes the x object) . 

  >>> x = [3,2,1]
>>> x.sort()
>>> x
[1, 2, 3]
  

 Both also take a  key  argument, which should be a callable (function/lambda) you can use to change what to sort by. 
For example, to get a list of  (key,value) -pairs from a dict which is sorted by value you can use the following code: 

  >>> x = {3:2,2:1,1:5}
>>> sorted(x.items(), key=lambda kv: kv[1])  # Items returns a list of `(key,value)`-pairs
[(2, 1), (3, 2), (1, 5)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35789579)
 You can use  sorted()  with a key function which will sort your list based on your dictionary values: 

  >>> sorted(m, key= lambda x: -y.get(x))
[2, 3, 5]
  

 Note that since  sorted()  sorts the items in ascending mode you can use negative value of the dict values to make it sort your list descending.  Or you could change the  reverse  argument to  True : 

  >>> sorted(m, key= lambda x: y.get(x), reverse=True)
[2, 3, 5]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20196463)
 Here is the solution. 

  {% try %}
{% if clients_list %}
{% for client in clients_list %}
    {% for user in client['clients'] %}
        {% raw user['id'] %}
        {% raw user['value'] %}
    {% end %}
{% end %}
{% end %}
{% except %}
{% end %}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12020421)
 Note that you can't actually sort a dict, because a dict has no defined order. But you can convert it into a sorted list: 

  sorted(mydict.items(), key = lambda x: x[1]['sales_min'])
  

 They lambda takes an elements from the  items()  list and returns the sales min value. By passing this function as they key parameter, python will sort it by that. 



