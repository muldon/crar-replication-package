Query: Url decode UTF-8 in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16566128)
 The data is UTF-8 encoded bytes escaped with URL quoting, so you want to  decode : 

  url = urllib.unquote(url).decode('utf8') 
  

  

  >>> import urllib 
>>> url='example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0'
>>> urllib.unquote(url).decode('utf8') 
u'example.com?title=\u043f\u0440\u0430\u0432\u043e\u0432\u0430\u044f+\u0437\u0430\u0449\u0438\u0442\u0430'
>>> print urllib.unquote(url).decode('utf8')
example.com?title=правовая+защита
  

 The Python 3 equivalent is https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote, which by default handles decoding for you: 

  from urllib.parse import unquote

url = unquote(url)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32451970)
 If you are using Python 3, you can use https://docs.python.org/3/library/urllib.parse.html 

  url = """example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0"""

import urllib.parse
urllib.parse.unquote(url)
  

  

  'example.com?title=правовая+защита'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42038223)
 Had to encode then decode  

  'xn--nqv7f.com'.encode("idna").decode('idna')
'机构.com'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39280419)
 Python has already correctly decoded the UTF-8 encoded JSON data to Python (Unicode) strings, so there is no need to handle UTF-8 here. 

 You'd have to encode to UTF-16, take the length of the encoded data, and divide by two. I'd encode to either  utf-16-le  or  utf-16-be  to prevent a BOM from being added: 

  >>> len(text.encode('utf-16-le')) // 2
32
  

 To use the entity offsets, you can encode to UTF-16, slice on  doubled  offsets, then decode again: 

  text_utf16 = text.encode('utf-16-le')
for entity in entities:
    start = entity['offset']
    end = start + entity['length']
    entity_text = text_utf16[start * 2:end * 2].decode('utf-16-le')
    print('Url: ', entity_text)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22472582)
 I guess you are decoding before urllib.unquote(): 

  >>> print urllib.unquote_plus('Marie+Lafor%C3%AAt'.decode('utf-8'))  
Marie LaforÃªt
  

 If you decode after unquote, result would be what you want: 

  >>> print urllib.unquote_plus('Marie+Lafor%C3%AAt').decode('utf-8')  
Marie Laforêt
  

 Just make sure you don't pass a unicode to urllib.unquote_plus. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1808688)
 Your html data is a string that comes from the internet  already encoded  with some encoding. Before encoding it to  utf-8 , you  must decode it first . 

 Python is   implicity   trying to decode it (That's why you get a  UnicodeDecodeError  not  UnicodeEncodeError ). 

 You can solve the problem by  explicity decoding your bytestring  (using the appropriate encoding)  before  trying to reencode it to  utf-8 . 

 Example: 

  utf8encoded = htmlSource.decode('some_encoding').encode('utf-8')
  

 Use the correct encoding the page was encoded in first place, instead of  'some_encoding' . 

 You  have  to know which encoding a string is using before you can decode it. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30731299)
 You can't decode arbitrary byte sequences as utf-8 encoded text: 

  >>> b'\xa9'.decode('utf-8')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa9 in position 0: invalid start byte
  

 The page indicates that it uses utf-8 but the actual data that the server sends is not utf-8. .  

 There is http://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit that allows you to handle data with inconsistent encodings: 

  import bs4 # $ pip install beautifulsoup4

print(bs4.UnicodeDammit.detwingle(b'S\x9aben  - Ostwind Rec').decode('utf-8'))
# -> Sšben  - Ostwind Rec
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35238539)
 You are looking for  unquote  instead of decode. 

  urllib.unquote('EC%2d2EC7')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22529581)
 Taxellool had the right answer in the comments: 

 what you are trying to decode is already decoded.  

  urllib.unquote_plus(artist.encode('utf-8')).decode('utf-8')
  



