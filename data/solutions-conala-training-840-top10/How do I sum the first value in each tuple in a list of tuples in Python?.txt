Query: How do I sum the first value in each tuple in a list of tuples in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16643634)
 You can use  collections.defaultdict : 

  >>> from collections import defaultdict
>>> from operator import mul
>>> lis = [(0,2),(1,3),(2,4),(0,5),(1,6)]
>>> dic = defaultdict(list)
>>> for k,v in lis:
    dic[k].append(v)  #use the first item of the tuple as key and append second one to it
...     

#now multiply only those lists which contain more than 1 item and finally sum them.
>>> sum(reduce(mul,v) for k,v in dic.items() if len(v)>1)
 28
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/638055)
 A version compatible with Python 2.3 is 

  sum([pair[0] for pair in list_of_pairs])
  

 or in recent versions of Python, see https://stackoverflow.com/a/638069/56541 or https://stackoverflow.com/a/10255912/56541. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46982791)
 Use a  defaultdict  as a grouper: 

  >>> from collections import defaultdict
>>> grouper = defaultdict(lambda: (0,0))
>>> list_of_tuples = [(1, 3, 1), (1, 2, 4), (2, 1, 0), (2, 2, 0)]
>>> for a, b, c in list_of_tuples:
...     x, y = grouper[a]
...     grouper[a] = (x + b, y + c)
...
>>> grouper
defaultdict(<function <lambda> at 0x102b240d0>, {1: (5, 5), 2: (3, 0)})
  

 Now, you can always get a list of tuples back like this: 

  >>> [(k, a, b) for k, (a, b) in grouper.items()]
[(1, 5, 5), (2, 3, 0)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/638193)
 Obscure (but fun) answer: 

  >>> sum(zip(*list_of_pairs)[0])
9
  

 Or when zip's are iterables only this should work: 

  >>> sum(zip(*list_of_pairs).__next__())
9
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47628643)
 Just use a https://docs.python.org/2/library/collections.html#collections.defaultdict: 

  from collections import defaultdict

d = [('city 1', 2 ), ('city 1', 1 ), ('city 2', 2 ), ('city 2', 4)]

sum_values = defaultdict(list)

for city, value in d:
    sum_values[city].append(value)

>>> print([(city, sum(values)) for city, values in sorted(sum_values.items())])
[('city 1', 3), ('city 2', 6)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15722420)
 Approach 

 Put your data into a  defaultdict(list) . . 

 Code 

  from collections import defaultdict
my_list = [('tag_A', 100), ('tag_A', 200), ('tag_A', 300), ('tag_A', 400), ('tag_B', 400), ('tag_B', 600)]

d = defaultdict(list)
for tag, num in my_list:
    d[tag].append(num)
  

  

  >>> from collections import defaultdict
>>> my_list = [('tag_A', 100), ('tag_A', 200), ('tag_A', 300), ('tag_A', 400), ('tag_B', 400), ('tag_B', 600)]
>>> 
>>> d = defaultdict(list)
>>> for tag, num in my_list:
...     d[tag].append(num)
... 
>>> from pprint import pprint
>>> pprint(dict(d))
{'tag_A': [100, 200, 300, 400], 'tag_B': [400, 600]}
>>> 
>>> pprint({k: sum(v) for k, v in d.iteritems()})
{'tag_A': 1000, 'tag_B': 1000}
  

 Alternative summary routine 

  def summarize_by_tag(d):
    for k, v in d.iteritems():
        print k, sum(v)

>>> summarize_by_tag(d)
tag_A 1000
tag_B 1000
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18195121)
 Here is a solution that doesn't involve importing: 

  >>> p = [('AAPL', 50), ('AAPL', -50), ('RY', 100), ('RY', -43)]
>>> d = {x:0 for x,_ in p}
>>> for name,num in p: d[name] += num
...
>>> Result = map(tuple, d.items())
>>> Result
[('AAPL', 0), ('RY', 57)]
>>>
  

 Note this is for Python 2.x.  In 3.x, you'll need to do:  Result = list(map(tuple, d.items())) . 



