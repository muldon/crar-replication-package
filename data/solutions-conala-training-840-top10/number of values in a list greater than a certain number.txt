Query: number of values in a list greater than a certain number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22904562)
 If you want the values returned to you and stored in a list you could do: 

  count = []
for value in mylist:
    num = float(value)
    if num >= 1.3:
        count.append(value)
  

 If you want it to output the list just add: 

  print(count)
  

 or if you want the count of the number of values that are greater add: 

  print(len(count))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40481877)
 Different way of counting by using bisect module: 

  >>> from bisect import bisect
>>> j = [4, 5, 6, 7, 1, 3, 7, 5]
>>> j.sort()
>>> b = 5
>>> index = bisect(j,b) #Find that index value
>>> print len(j)-index
3
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24033578)
 You can reconstruct the list with a simple conditional expression and list comprehension, like this 

  a = [1, 2, 3, 4]
print [item if item > 3 else 3 for item in a]
# [3, 3, 3, 4]
  

 For every  item  in  a , it checks if it is greater than  3 , then use  item  as it is otherwise use  3 . 

 This is similar but very efficient than the following, 

  result = []
for item in a:
    if item > 3:
        result.append(item)
    else:
        result.append(3)
  

 But remember that list comprehension creates a new list.  

  a = [item if item > 3 else 3 for item in a]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10543348)
 You can create a smaller intermediate result like this: 

  >>> j = [4, 5, 6, 7, 1, 3, 7, 5]
>>> len([1 for i in j if i > 5])
3
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10543345)
 if you are otherwise using numpy, you can save a few strokes, but i dont think it gets much faster/compact than senderle's answer. 

  import numpy as np
j = np.array(j)
sum(j > i)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10543407)
 A (somewhat) different way: 

  reduce(lambda acc, x: acc + (1 if x > 5 else 0), j, 0)  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20229832)
 There is a builtin function  all : 

  all (x > limit for x in my_list)
  

 Being limit the value greater than which all numbers must be. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10543316)
 You could do something like this: 

  >>> j = [4, 5, 6, 7, 1, 3, 7, 5]
>>> sum(i > 5 for i in j)
3
  

 It might initially seem strange to add  True  to  True  this way, but I don't think it's unpythonic; after all,  bool  https://stackoverflow.com/a/3175293/577088 of  int  in all versions since 2.3: 

  >>> issubclass(bool, int)
True
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36556039)
 If your data is in a list l, then do 

  np.median([val for val in l if val > 50])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/20229835)
 You can use  all() : 

  my_list1 = [30,34,56]
my_list2 = [29,500,43]
if all(i >= 30 for i in my_list1):
    print 'yes'
if all(i >= 30 for i in my_list2):
    print 'no'
  

 Note that this includes all numbers equal to 30 or higher, not strictly above 30. 



