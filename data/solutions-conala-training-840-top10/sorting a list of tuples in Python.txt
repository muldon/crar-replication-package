Query: sorting a list of tuples in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11848830)
 Give the  sort()  method a  key  function: 

  >>> my_list = [(1, 2), (3, 4), (2, 1), (3, 2)]
>>> my_list.sort(key=lambda x: x[1])
>>> my_list
[(2, 1), (1, 2), (3, 2), (3, 4)]
>>> 
  

 If you need to get a sorted list, instead of sorting  in place , use the built_in https://docs.python.org/2/library/functions.html#sorted 

  >>> sorted(my_list, key=lambda x: x[1])
[(2, 1), (1, 2), (3, 2), (3, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11848868)
 There is no premade function for doing this, but it can be done fairly easily using http://wiki.python.org/moin/HowTo/Sorting/#Operator_Module_Functions as the key function for sorting. As the code example shows, you can use 

  from operator import itemgetter

tuple_list.sort(key=itemgetter(1))
  

 This will sort by the index 1 elements in the tuples. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3689842)
 Convert the list of tuples into a list of integers, then sort it: 

  thelist = [(5,), (2,), (4,), (1,), (3,), (6,), (7,), (8,)]

sortedlist = sorted([x[0] for x in thelist])

print sortedlist
  

 See it on http://codepad.org/gni0T6W6 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16868476)
  >>> d = {"one": [(1,3),(1,4)], "two": [(1,2),(1,2),(1,3)], "three": [(1,1)]}
>>> for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
  

 Here is a universal solution that works on Python 2 & Python 3: 

  >>> print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))
two one three
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8983001)
 With x[0] always larger than x[1]: 

  lst.st(key=(lambda x: x[0]-x[1]), reverse=True)
  

  

  lst.st(key=(lambda x: x[1]-x[0]))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46020708)
 Try sorting on key which sorts lists in place. And also offers convenient way to sort tuples based on index of tuple elements. 
i.e.  tup[0]  to sort on first tuple element 
      tup[1]  to sort on second and so on.   

 See https://wiki.python.org/moin/HowTo/Sorting for details. 

  t =  [(100,100,100),(255,0,0),(200,200,200),(0,255,0) ]
>>> t.sort(key=lambda tup:tup[0])
>>> t
[(0, 255, 0), (100, 100, 100), (200, 200, 200), (255, 0, 0)]
>>> 
  



