Query: (Django) how to get month name?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9621461)
  datetime.datetime.strftime(today, '%B') # Outputs 'March'
  

  

  datetime.datetime.strftime(today, '%b') # Outputs 'Mar'
  

 http://docs.python.g/library/datetime.html#strftime-strptime-behavi 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9621471)
 The http://docs.python.org/library/calendar.html#calendar.month_name is another option.  

  calendar.month_name[3] # would return 'March'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9621483)
 Python's calendar module will do that for you, see http://docs.python.org/library/calendar.html 

  month = calendar.month_name[3]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43232252)
  month = datetime.datetime.now().month # IF Current month is April then month==4

calendar.month_name[month]
  

 An array that represents the months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and month_name[0] is the empty string. 

 here :  calendar.month_name[month]  check what is the value of  month  it should be 4 because current month is April.  

 So you are passing String where it is required a datetime object.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54034269)
 Your error is because  datetime.now().month  is an integer.  strftime  is a method on the  datetime  object. 

 You can get the current month by doing: 

  month = datetime.now().strftime("%b")  

 To get previous month names, easy but sort of "hacky" way to do this would be to just create a dictionary of the month strings you want with the month number as keys: 

  from datetime import datetime

def limit_month_number(start_month, months_ago):
    """
    This function will return a value from 1-12 inclusive.
    >>> limit_month_number(1,3) -> 10
    >>> limit_month_number(12,14) -> 10
    """
    month_number = start_month - (months_ago % 12)
    if month_number < 1:
        month_number = 12 + month_number 
    return month_number

def get_prev_month(months_ago):
    months = {1: 'Jan', 2: 'Feb', 10: 'Oct', 11: 'Nov', 12: 'Dec'}

    this_month = datetime.now().month

    month_number = limit_month_number(this_month, months_ago)

    prev_month = months[month_number]
    return prev_month

print(get_prev_month(2)) # 'Nov', two months ago from now
  

 Also, I must point out that you can do this using  datetime . Check out this other post: https://stackoverflow.com/questions/9724906/python-date-of-the-previous-month 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34991329)
  Month Name  to  Month Number  and vice versa in  python  

 By Using calendar https://docs.python.org/3/library/calendar.html 

 Creating a  reverse dictionary  would be a reasonable way to do this: 

  dict((val,k) for k,v in enumerate(calendar.month_abbr))  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39124067)
 For English only, you can use the datetime string formatting method of Python, e.g. 

  >>> today.strftime('%B')
'March'
  

 You can also use Django methods, which will return the name  in the current activated language . 

 In a Django template you can also use: 

  {{ a_date|date:'F' }}
  

 In a Django view function: 

  from django.template.defaultfilters import date
date(a_date, 'F')
  

 You can test the later in the Django shell ( python manage.py shell ) for e.g. Spanish with: 

  In [1]: from django.utils.translation import get_language, activate

In [2]: activate('es')

In [3]: get_language()
Out[3]: 'es'

In [4]: import datetime

In [5]: today = datetime.date.today()

In [6]: from django.template.defaultfilters import date

In [7]: date(today, 'F')
Out[7]: u'Septiembre'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50577708)
 you can use https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#django.db.models.functions.TruncMonth with https://docs.djangoproject.com/en/2.0/topics/db/aggregation/#aggregating-annotations 

  from django.db.models.functions import TruncMonth

MyModel.objects.annotate(
    month=TruncMonth('date')
).filter(month=YOURVALUE).values('month').distinct()
  

 or if you need only filter date by month with distinct you can use https://docs.djangoproject.com/en/2.0/ref/models/querysets/#month option 

  MyModel.objects.filter(date__month=YOURVALUE).distinct()
  

  Older django 
you can use https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.extra, example for postgres  

  MyModel.objects.extra(
    select={'month': "EXTRACT(month FROM date)"},
    where=["EXTRACT(month FROM date)=%s"],
    params=[5]
    # CHANGE 5 on you value
    ).values('month').distinct()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9621418)
 use the datetime string formatting method, e.g. 

  >>> today.strftime('%B')
'March'
  

 for more info, and a full list of formatting codes, see http://docs.python.org/library/datetime.html#strftime-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44536696)
 I guess you didn't filter yet with month in queryset 

  def queryset(self, request, queryset):
    month = request.GET.get('month') or datetime.now().month
    if self.value():
        return queryset.filter(ts_from__contains=self.value(), created__month=month)
    else:
        return queryset
  



