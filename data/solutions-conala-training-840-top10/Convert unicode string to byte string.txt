Query: Convert unicode string to byte string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4492854)
 Perhaps you want this (Python 2): 

  >>> map(ord,'hello')
[104, 101, 108, 108, 111]
  

 For a Unicode string this would return Unicode code points: 

  >>> map(ord,u'Hello, 马克')
[72, 101, 108, 108, 111, 44, 32, 39532, 20811]
  

 But encode it to get byte values for the encoding: 

  >>> map(ord,u'Hello, 马克'.encode('chinese'))
[72, 101, 108, 108, 111, 44, 32, 194, 237, 191, 203]
>>> map(ord,u'Hello, 马克'.encode('utf8'))
[72, 101, 108, 108, 111, 44, 32, 233, 169, 172, 229, 133, 139]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4182757)
 If I understand you correctly, you have a utf-8 encoded byte-string in your code. 

 Converting a byte-string to a unicode string is known as decoding (unicode -> byte-string is encoding). 

 You do that by using the http://docs.python.org/library/functions.html#unicode function or the http://docs.python.org/library/stdtypes.html#str.decode method.  

  unicodestr = unicode(bytestr, encoding)
unicodestr = unicode(bytestr, "utf-8")
  

  

  unicodestr = bytestr.decode(encoding)
unicodestr = bytestr.decode("utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30197931)
 You must be using Python 2.   .encode  can only encode Unicode strings.    .encode  a byte string, Python 2 will implicitly try to  .decode  the byte string to Unicode, using the default  ascii  codec, before using the explicit  .encode('utf-8') . 

  contents  is already a byte string.  If that byte string is encoded in UTF-8, use  .decode('utf-8')  instead to convert it to a Unicode string. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14443797)
 To decode a byte sequence from latin 1 to Unicode, use the http://docs.python.org/2/library/stdtypes.html#str.decode: 

  >>> '\xe9'.decode('latin1')
u'\xe9'
  

 Python uses  \xab  escapes for unicode codepoints below  \u00ff .  

  >>> '\xe9'.decode('latin1') == u'\u00e9'
True
  

 The above Latin-1 character can be encoded to UTF-8 as: 

  >>> '\xe9'.decode('latin1').encode('utf8')
'\xc3\xa9'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24242596)
 Python 2 byte strings can be decoded with the  'string_escape'  codec: 

  raw_string.decode('string_escape')
  

  

  >>> '\\x89\\n'.decode('string_escape')
'\x89\n'
  

 For  unicode  literals, use  'unicode_escape' . In Python 3, where strings are unicode strings by default, only byte strings have a  .decode()  method: 

  raw_byte_string.decode('unicode_escape')
  

 If your input string is  already  a unicode string, use  codecs.decode()  to convert: 

  import codecs

codecs.decode(raw_unicode_string, 'unicode_escape')
  

  

  >>> b'\\x89\\n'.decode('unicode_escape')
'\x89\n'
>>> import codecs
>>> codecs.decode('\\x89\\n', 'unicode_escape')
'\x89\n'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49386129)
 You're dealing with byte-string (assuming you're using Python 2.x). 

 Convert the byte-string to unicode-string using https://docs.python.org/2/library/stdtypes.html#str.decode, get the first character, then convert it back to binary string using https://docs.python.org/2/library/stdtypes.html#str.encode (optional unless you should use byte-string) 

  >>> string = "Ľubomír Mezovský"
>>> print(string.decode('utf-8')[0].encode('utf-8'))
Ľ
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31522512)
  >>> a = '\\xeb\\x4d'   # a Unicode string
>>> a.encode('latin1') # get a byte string
b'\\xeb\\x4d'
>>> a.encode('latin1').decode('unicode_escape') # unescape, get a Unicode string
'ëM'
>>> a.encode('latin1').decode('unicode_escape').encode('latin1') # get a byte string
b'\xebM'
>>> a.encode('latin1').decode('unicode_escape').encode('latin1') == b'\xeb\x4d'
True
  

 Note that  latin1  is the first 256 codepoints of Unicode, so encoding the first 256 bytes of Unicode gives the same byte values as the original codepoint. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42411093)
 When you get a  UnicodeEncodeError , it means that somewhere in your code you convert directly a byte string to a unicode one. By default in Python 2 it uses ascii encoding, and utf8 encoding in Python3 (both may fail because not every byte is valid in either encoding) 

 To avoid that, you must use explicit decoding. 

 If you may have 2 different encoding in your input file, one of them accepts any byte (say UTF8 and Latin1), you can try to first convert a string with first and use the second one if a UnicodeDecodeError occurs. 

  def robust_decode(bs):
    '''Takes a byte string as param and convert it into a unicode one.
First tries UTF8, and fallback to Latin1 if it fails'''
    cr = None
    try:
        cr = bs.decode('utf8')
    except UnicodeDecodeError:
        cr = bs.decode('latin1')
    return cr
  

 If you do not know original encoding and do not care for non ascii character, you can set the optional  errors  parameter of the  decode  method to  replace . Any offending byte will be replaced (from the standard library documentation): 

 
   Replace with a suitable replacement character; Python will use the official U+FFFD REPLACEMENT CHARACTER for the built-in Unicode codecs on decoding and ‘?’ . 
 

  bs.decode(errors='replace')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6773312)
 Can't be done. Using  %02X  loses too much information. You should be using something like UTF-8 first and converting that, instead of inventing a broken encoding. 

  >>> u"Knödel".encode('utf-8').encode('hex')
'4b6ec3b664656c'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/40334311)
 Encoding would never result in a  unicode  object. You  decode  from bytes to  unicode . 

 As such, you'd convert to  str  (a byte string) then to  unicode  by decoding: 

  str(obj).decode('utf8')
  

 This will still fail for objects that are  already   unicode  values, so you may want to use  try..except  to catch that case: 

  try:
    obj = str(obj).decode('utf8')
except UnicodeEncodeError:
    # already unicode
    pass
  

 If you try to encode a byte-string, Python 2 implicitly first decodes to  unicode  for you, which is why you got your  UnicodeDecodeError . 



