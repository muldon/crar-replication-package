Query: Access environment variables
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43074113)
  import os
for a in os.environ:
    print('Var: ', a, 'Value: ', os.getenv(a))
print("all done")
  

 That will print all of the environment variables along with their values. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4907002)
 You can access to the environment variables using 

  import os
print os.environ
  

 Try to see the content of PYTHONPATH or PYTHONHOME environment variables, maybe this will be helpful for your second question. . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4907053)
 Environment variables are accessed through https://docs.python.org/library/os.html#os.environ 

  import os
print(os.environ['HOME'])
  

 Or you can see a list of all the environment variables using: 

  os.environ
  

 As sometimes you might need to see a complete list! 

  # using get will return `None` if a key is not present rather than raise a `KeyError`
print(os.environ.get('KEY_THAT_MIGHT_EXIST'))

# os.getenv is equivalent, and can also give a default value instead of `None`
print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))
  

 https://docs.python.org/install/index.html#how-installation-works on Windows is  C:\Python . If you want to find out while running python you can do: 

  import sys
print(sys.prefix)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32149510)
 You can define variables in app.yaml to make them available to the os.environ dictionary: 

  env_variables:
  EMAIL: 'email@example.com'
  

 Then access the variable with: 

  email = os.environ.get("EMAIL")
  

 More info is in the https://cloud.google.com/appengine/docs/python/config/appconfig#Python_app_yaml_Defining_environment_variables. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9926915)
 The original question (first part) was "how to check environment variables in Python."  

 Here's how to check if $FOO is set:  

  try:  
   os.environ["FOO"]
except KeyError: 
   print "Please set the environment variable FOO"
   sys.exit(1)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53854947)
 There's also a number of great libraries. https://pypi.org/project/envs/ for example will allow you to parse objects out of your environment variables, which is rad. For example: 

  from envs import env
env('SECRET_KEY') # 'your_secret_key_here'
env('SERVER_NAMES',var_type='list') #['your', 'list', 'here']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25205292)
 You can access environment variables with  os.environ : 

  import os
print(os.environ['TEST__LIB_PATH'])
  

  os.environ  also has a  get()  method: 

  os.environ.get('TEST__LIB_PATH')
  

  Edit : here's a link to https://docs.python.org/2/library/os.html#os.environ 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32185304)
 Yes, you can  define  variables in your  app.yaml  file which you can later access in your programs via  os.environ , see https://cloud.google.com/appengine/docs/python/config/appconfig#Python_app_yaml_Defining_environment_variables: 

 https://i.stack.imgur.com/zUtEh.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51231777)
 If you want to load automatically some environment variables each time you start the project, you can set a  .env  file at the root folder of the project, next to the  Pipfile . 

 You can run the following command from the right folder to create this . 

  echo MY_TOKEN=SuperToKen >.env  # create the file and write into
echo MY_VAR=SuperVar >>.env     # append to the file
  

 or just create it manually to obtain: 

  MY_TOKEN=SuperToKen
MY_VAR=SuperVar
  

 This file will be loaded automatically with  pipenv shell  or  pipenv run your_command  and the environment variables will be available. 

 You can access/check them in your code with : 

  print(os.getenv('MY_TOKEN', 'Token Not found))
  

 Not sure about other IDE, but within Pycharm you need the plugin  Env File  to load it automatically (access Env File tab from the Run/Debug configurations). 

 

 You can add comments in this file with a leading  #  

  # My test token
MY_TOKEN=SuperToKen
  

 

 Note : Of course you must exclude this file from your version control (like git). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32084217)
 If you're running your app locally, you can 'pull down' the Heroku environment variables by running: 

  heroku config:pull --overwrite
  

 This will create a local  .env  file which contains your environment variables. 

 If you then run  $ source .env  in your terminal before running your app, these variables will be loaded into the environment for you -- in a manner similar to what Heroku does. 

 Also, your code looks incorrect. 

 The way you typically want to access environment variables is like so: 

  from os import environ

# If MY_ENVIRONMENT_VARIABLE doesn't exist, None will be printed.
print environ.get('MY_ENVIRONMENT_VARIABLE')
  



