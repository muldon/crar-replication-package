Query: make a time delay
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53333044)
  import time
time.sleep(1) #sleep for one second.
  

 Simple example: 

  #After five seconds,output "hello python!!!"
import time
time.sleep(5)
print("hello python!!!")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52352252)
 This is an easy example of a time delay: 

  import time

def delay(period='5'):
    # If the user enters nothing, It'll wait 5 seconds
    try:
        #If the user not enters a int, I'll just return ''
        time.sleep(period)
    except:
        return ''
  

  

  import tkinter

def tick():
    pass

root=Tk()
delay=100 # time in milliseconds
root.after(delay,tick)
root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53865474)
 you can use sleep method in time package to make delay in python program execution 

  import time
time.sleep(1)   # Delays for 1 seconds.
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52540793)
 The best way to delay time in Python is to use the  time  library. 
 

  import time
time.sleep(10)
  

 Just replace 10 with the amount of seconds you want to delay. You can use formats like '10.1', '5.07', etc. 

 It is not recommended to use this with Tkinter 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/510351)
  import time
time.sleep(5)   # Delays for 5 seconds. You can also use a float value.
  

 Here is another example where something is run approximately once a minute: 

  import time
while True:
    print("This prints once a minute.")
    time.sleep(60) # Delay for 1 minute (60 seconds).
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43958135)
 You can use  time.time()  to measure elapsed time. 

  import time
start_time = time.time()

for k in range(100):
    # k seconds SHOULD be elapsed at this point
    print(100 - k)
    slept_time = time.time() - start_time
    time.sleep(1 + k-slept_time)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48111882)
 Delays can be implemented by using three methods. 

  

  import time
time.sleep(5) # Delay for 5 seconds.
  

 The second method to delay would be using the implicit wait method: 

   driver.implicitly_wait(5)
  

 The third method is more useful when you have to wait until a particular action is completed or until an element is found: 

  self.wait.until(EC.presence_of_element_located((By.ID, 'UserName'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/510356)
 Please read https://web.archive.org/web/20090207081238/http://faqts.com/knowledge_base/view.phtml/aid/2609/fid/378, which can help you further: 

 
   Try the sleep function in the time module. 

  import time
time.sleep(60)
  
  
   And put this in a  while  loop and a statement will only execute on the
  minute...  That allows you to run a statement at predefined intervals
  regardless of how long the command takes (as long as it takes less than 
  a minute or 5 or 60 or whatever you set it to)  For example, I wanted to 
  run a ping once a minute.  If I just  time.sleep(60)  or  time.sleep(45)  
  even, the ping will not always take the same amount of time.  Here's the 
  code :) 

  time.sleep(time.localtime(time.time())[5])
  
  
   The  [5]  just pulls the seconds out of the  time.localtime() 's return 
  value. 
  
   The great thing about  time.sleep  is that it supports floating point numbers! 

  import time
time.sleep(0.1) 
  
  
   http://python.org/doc/current/lib/module-time.html 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23665492)
 A bit of fun with a sleepy https://wiki.python.org/moin/Generators. 

 The question is about time delay. It can be fixed time, but in some cases we might need a delay measured since last time. Here is one possible solution: 

 Delay measured since last time (waking up regularly) 

 The situation can be, we want to do something as regularly as possible and we do not want to bother with all the  last_time ,  next_time  stuff all around our code. 

 Buzzer generator 

 The following code ( sleepy.py ) defines a  buzzergen  generator: 

  import time
from itertools import count

def buzzergen(period):
    nexttime = time.time() + period
    for i in count():
        now = time.time()
        tosleep = nexttime - now
        if tosleep > 0:
            time.sleep(tosleep)
            nexttime += period
        else:
            nexttime = now + period
        yield i, nexttime
  

 Invoking regular buzzergen 

  from sleepy import buzzergen
import time
buzzer = buzzergen(3) # Planning to wake up each 3 seconds
print time.time()
buzzer.next()
print time.time()
time.sleep(2)
buzzer.next()
print time.time()
time.sleep(5) # Sleeping a bit longer than usually
buzzer.next()
print time.time()
buzzer.next()
print time.time()
  

  

  1400102636.46
1400102639.46
1400102642.46
1400102647.47
1400102650.47
  

 We can also use it directly in a loop: 

  import random
for ring in buzzergen(3):
    print "now", time.time()
    print "ring", ring
    time.sleep(random.choice([0, 2, 4, 6]))
  

  

  now 1400102751.46
ring (0, 1400102754.461676)
now 1400102754.46
ring (1, 1400102757.461676)
now 1400102757.46
ring (2, 1400102760.461676)
now 1400102760.46
ring (3, 1400102763.461676)
now 1400102766.47
ring (4, 1400102769.47115)
now 1400102769.47
ring (5, 1400102772.47115)
now 1400102772.47
ring (6, 1400102775.47115)
now 1400102775.47
ring (7, 1400102778.47115)
  

 As we see, this buzzer is not too rigid and allow us to catch up with regular sleepy intervals even if we oversleep and get out of regular schedule. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43958509)
 Using  time.sleep  will never give you the accurate time for your timer, since the time it takes is the one second sleep time + printing time, you can use  threading.Timer  to get more accurate results. https://repl.it/Hwkt : 

  import threading, time

start_time=time.time()
def count_loop(counter):
  if counter <= 0: 
    print("it took  "+str(float(time.time()-start_time)*1000)+" Milliseconds")
    return

  threading.Timer(1.0, count_loop, args=[counter-1]).start()
  print(counter)      

count_loop(100)
  

 This is still not accurate, but with only very minimum offset, only 45 ms. However, when using  time.sleep  from legendisback's example, there is apparently 81 ms delay. https://repl.it/HwlK 



