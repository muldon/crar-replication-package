Query: numpy array assignment using slicing
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37884442)
 I think you might have an issue with referencing (b=a[:]). Here is a previous answer that might help:  

 https://stackoverflow.com/questions/4588100/python-objects-confusion-a-b-modify-b-and-a-changes 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54173894)
 You could use https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.argwhere.html: 

  rows = np.argwhere(a[:, 3] == 0)    
cols = [2, 3, 4]        

b[rows, cols] = 2       # Replace the values with 2
print(b)
  

  Output  

  [[1. 1. 2. 2. 2.]
 [1. 1. 2. 2. 2.]
 [1. 1. 1. 1. 1.]
 [1. 1. 2. 2. 2.]
 [1. 1. 2. 2. 2.]
 [1. 1. 2. 2. 2.]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2171883)
 Here's another way to do it using  ogrid  which is a bit faster: 

  import numpy as np
import Image

w, h = 600, 800
sq = 15
color1 = (0xFF, 0x80, 0x00)
color2 = (0x80, 0xFF, 0x00)

def use_ogrid():
    coords = np.ogrid[0:w, 0:h]
    idx = (coords[0] // sq + coords[1] // sq) % 2
    vals = np.array([color1, color2], dtype=np.uint8)
    img = vals[idx]
    return img

def use_fromfunction():
    img = np.zeros((w, h, 3), dtype=np.uint8)
    c = np.fromfunction(lambda x, y: ((x // sq) + (y // sq)) % 2, (w, h))
    img[c == 0] = color1
    img[c == 1] = color2
    return img

if __name__ == '__main__':
    for f in (use_ogrid, use_fromfunction):
        img = f()
        pilImage = Image.fromarray(img, 'RGB')
        pilImage.save('{0}.png'.format(f.func_name))
  

 Here are the timeit results: 

  % python -mtimeit -s"import test" "test.use_fromfunction()"
10 loops, best of 3: 307 msec per loop
% python -mtimeit -s"import test" "test.use_ogrid()"
10 loops, best of 3: 129 msec per loop
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48729568)
 You can use slicing and broadcasting. but you'll need to be careful regarding the shape of the slices. see the code below 

  In [1]: import numpy as np

In [2]: from sklearn.preprocessing import MinMaxScaler

In [3]: sc = MinMaxScaler()

In [4]: X = [ [1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]

In [5]: X = np.array(X,dtype=float)

In [6]: X
Out[6]: 
array([[ 1.,  2.,  3.,  4.],
       [ 5.,  6.,  7.,  8.],
       [ 9., 10., 11., 12.],
       [13., 14., 15., 16.]])

In [7]: X[:,1:2] = sc.fit_transform(X[:,1:2])

In [8]: X
Out[8]: 
array([[ 1.        ,  0.        ,  3.        ,  4.        ],
       [ 5.        ,  0.33333333,  7.        ,  8.        ],
       [ 9.        ,  0.66666667, 11.        , 12.        ],
       [13.        ,  1.        , 15.        , 16.        ]])
  

 slicing all the rows(:) and the columns with index 1 upto but not including 2 (1:2) we're selecting the column and preserving its shape, which is required because the minmaxscaler requires a 2D array input. and assignment by broadcasting also requires shape consistency. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22566174)
 From your description, it seems like you're asking what function calls are used to implement slicing and slice assignment. 

 Python uses the "special" methods  __getitem__  and  __setitem__  to implement and/or allow customization of how slicing works.  Any class that implements these can be sliced.  There's actually nothing numpy-specific about this. 

  

  x = arr[4:10, 9:15, ::-1]
x[0] = 100
  

  

  x = arr.__getitem__((slice(4, 6), slice(9, 10), slice(None, None, -1)))
x.__setitem__(0, 100)
  

 For example: 

  class Foo(object):
    def __getitem__(self, index):
        print 'Getting', index
    def __setitem__(self, index, val):
        print 'Setting', index, 'to', val

f = Foo()
print 'Getting...'
f[:]
f[4:10, ::-1, ...]

print 'Equivalently:'
f.__getitem__(slice(None))
f.__getitem__((slice(4, 10), slice(None, None, -1), Ellipsis))

print 'Setting...'
f[0] = 1
f[5:10, 100] = 2
f[...] = 100

print 'Equivalently:'
f.__setitem__(0, 1)
f.__setitem__((slice(5,10), 100), 2)
f.__setitem__(Ellipsis, 100)
  

 Also, it can be handy to know about  numpy.index_exp  (or equivalently,  np.s_ ). It's nothing fancy -- it just translates slicing into the equivalent tuple, etc. It's quite similar to our  Foo  class above. For example: 

  In [1]: np.index_exp[10:4, ::-1, ...]
Out[1]: (slice(10, 4, None), slice(None, None, -1), Ellipsis)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2169501)
 Can't you use hstack and vstack?  See http://www.scipy.org/Tentative_NumPy_Tutorial#head-2dbfc93288ea06a02f270f2f9e6930ffbdd78b87.
 

  >>> import numpy as np
>>> b = np.array([0]*4)
>>> b.shape = (2,2)
>>> w = b + 0xAA
>>> r1 = np.hstack((b,w,b,w,b,w,b))
>>> r2 = np.hstack((w,b,w,b,w,b,w))
>>> board = np.vstack((r1,r2,r1,r2,r1,r2,r1))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1589600)
 Numpy must be checking if the target array is the same as the input array when doing the setkey call.  Luckily, there are ways around it.  First, I tried using http://docs.scipy.org/doc/numpy/reference/generated/numpy.put.html instead 

  In [46]: a = numpy.array([1,0,0,0])

In [47]: numpy.put(a,[1,2,3],a[0:3])

In [48]: a
Out[48]: array([1, 1, 1, 1])
  

 And then from the documentation of that, I gave using flatiters a try (http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flat.html) 

  In [49]: a = numpy.array([1,0,0,0])

In [50]: a.flat[1:] = a[0:3]

In [51]: a
Out[51]: array([1, 1, 1, 1])
  

 But this doesn't solve the problem you had in mind 

  In [55]: a = np.array([1,0,0,0])

In [56]: a.flat[1:] = 2*a[0:3]

In [57]: a
Out[57]: array([1, 2, 0, 0])
  

 This fails because the multiplication is done before the assignment, not in parallel as you would like. 

 Numpy is designed for repeated application of the exact same operation in parallel across an array.  To do something more complicated, unless you can find decompose it in terms of functions like  numpy.cumsum  and  numpy.cumprod , you'll have to resort to something like scipy.weave or writing the function in C.  (See the http://www.scipy.org/PerformancePython page for more details.)  (Also, I've never used weave, so I can't guarantee it will do what you want.) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38768993)
 Selection by http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing-and-indexing always returns a view.  Selection by http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing always returns a copy.  http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#boolean-array-indexing is a form of advanced
indexing. (The other form of advanced indexing is http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing.) 

 However,  assignment  by advanced indexing affects the original array. 

   

  mask = np.array([True, False, False])
arr[mask] = 0
  

 affects  arr  because it is an assignment.  

  mask_1_arr = arr[mask_1]
  

 is selection by boolean mask, so  mask_1_arr  is a copy of part of  arr .
Once you have a copy, the jig is up. When Python executes 

  mask_2 = np.array([True])
mask_1_arr[mask_2] = 0
  

 the assignment affects  mask_1_arr , but since  mask_1_arr  is a copy,
it has no effect on  arr . 

 

  |            | basic slicing    | advanced indexing |
|------------+------------------+-------------------|
| selection  | view             | copy              |
| assignment | affects original | affects original  |
  

 

 Under the hood,  arr[mask] = something  causes Python to call
 arr. .  The  ndarray.__setitem__  method is
implemented to modify  arr . After all, that is the natural thing one should expect
 __setitem__  to do. 

  as an expression  arr[indexer]  causes Python to call
 arr. .  When  indexer  is a slice, the regularity of the
elements allows NumPy to return a view (by modifying the strides and offset). When  indexer 
is an arbitrary boolean mask or arbitrary array of integers, there is in general
no regularity to the elements selected, so there is no way to return a
view. Hence a copy must be returned. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53742111)
  Approach #1  

 Here's a vectorized one with https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html for input array,  a  - 

  # Initialize o/p array
out = np.zeros(a.shape + (a.shape[1],),dtype=a.dtype)

# Get diagonal view and assign into it input array values
diag = np.einsum('ijj->ij',out)
diag[:] = a
  

  Approach #2  

 Another based on slicing for assignment - 

  m,n = a.shape
out = np.zeros((m,n,n),dtype=a.dtype)
out.reshape(-1,n**2)[...,::n+1] = a
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34139849)
 What's Happening: Fancy vs Regular Indexing 

 This happens because using a boolean array or a sequence of indices is "fancy" indexing.  ("Fancy" is anything that can't be expressed as a slice.)  It's not actually a "masked array" which is a separate thing entirely in numpy terminology ( np.ma.masked_array ). 

 Fancy indexing makes a copy.  Regular indexing (i.e. slicing) makes a view.  Views share data, copies do not. 

 Let's break down your expression  arr[mask1][0,0] = 999 .  

 Because  mask1  is a boolean array,  arr[mask1]  will return a copy of the data.  The next part will modify that copy, rather than the original array.  

  # tmp_copy is a copy, not a view, in this case
tmp_copy = arr[mask1]

# tmp_copy is modified, but `arr` is not
tmp_copy[0, 0] = 999 

# Because `tmp_copy` is an intermediate, it will be garbage collected.
# The assignment to 999 effectively disappears
del temp_copy
  

 Let's contrast that with a similar (in this exact case) slicing expression:  arr[1:][0, 0] = 999  (which would modify the original  arr ) 

  # Because we're using a slice, a view will be created instead of a copy
tmp_view = arr[1:]

# Modifying the view will modify the original array as well
tmp_view[0, 0] = 999

# The view can be deleted, but the original has still been modified
del tmp_view
  

 

  

 Generally speaking, you'd avoid putting yourself in this situation.  What you're wanting to accomplish can usually be re-cast another way.   

 However, if you really need to, you can do it by translating the fancying indexing into specific indices that you want to modify. 

 For example: 

  import numpy as np

# Your data...
arr = np.array([[1,2,3,4,5,6],
                [11,12,13,14,15,16],
                [21,22,23,24,25,26],
                [31,32,33,34,35,36],
                [41,42,43,44,45,46]])
mask = np.array([False,True,True,True,True])

# Make a temporary array of the "flat" indices of arr
idx = np.arange(arr.size).reshape(arr.shape)

# Now use this to make your assignment:
arr.flat[idx[mask][0, 0]] = 999
  

 In your exact case this is overkill (i.e., you could do the same with  arr[1:][0, 0] = 999 ).  There are plenty of other cases where things can be simplified.  However, to get a fully general solution, we need something similar to the example above. 

 Explaining the Workaround 

 Let's break down what that example does.  First we create an array of "flat" indices of the same shape as our array. (Side note, see  np.unravel_index  for more information.)  

  In [37]: idx
Out[37]:
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29]])
  

 Now we can extract the indices that the fancy indexing would extract: 

  In [38]: idx[mask]
Out[38]:
array([[ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29]])
  

 And then the next slicing  [0,0] : 

  In [39]: idx[mask][0,0]
Out[39]: 6
  

 Now we have a single "flat" index back into our original array. We could convert this to a full index by using  np.unravel_index : 

  In [40]: np.unravel_index(6, arr.shape)
Out[40]: (1, 0)
  

 ...But it's easier to work directly with  arr.flat  instead: 

  In [41]: arr.flat[6] = 999

In [42]: arr
Out[42]:
array([[  1,   2,   3,   4,   5,   6],
       [999,  12,  13,  14,  15,  16],
       [ 21,  22,  23,  24,  25,  26],
       [ 31,  32,  33,  34,  35,  36],
       [ 41,  42,  43,  44,  45,  46]])
  



