Query: How to merge two Python dictionaries in a single expression?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40677646)
 You can use http://toolz.readthedocs.io/en/latest/api.html#toolz.dicttoolz.merge for this. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39437)
 An alternative: 

  z = x.copy()
z.update(y)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39251599)
 For Python 2 : 

  x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items()+y.items())
print(z)
  

 For Python 3: 

  x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items()|y.items())
print(z)
  

 It gives output: {'a': 1, 'c': 11, 'b': 10}  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51083056)
 In python2 

  dict(mydict, **other)
  

   

  In [11]: dict({1:2}.items() + {2:3}.items() + {1:5}.items() )
Out[11]: {1: 5, 2: 3}
  

 python3 

  { **mydict, **otherdict}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12926103)
  Two dictionaries  

  def union2(dict1, dict2):
    return dict(list(dict1.items()) + list(dict2.items()))
  

   n  dictionaries  

  def union(*dicts):
    return dict(itertools.chain.from_iterable(dct.items() for dct in dicts))
  

  sum  has bad performance. See https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/ 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34899183)
 . Use a https://docs.python.org/2/tutorial/datastructures.html#dictionaries: 

  z={i:d[i] for d in [x,y] for i in d}

>>> print z
{'a': 1, 'c': 11, 'b': 10}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44151666)
 In python 3: 

  import collections
a = {1: 1, 2: 2}
b = {2: 3, 3: 4}
c = {3: 5}

r = dict(collections.ChainMap(a, b, c))
print(r)
  

  

  {1: 1, 2: 2, 3: 4}
  

 Docs: https://docs.python.org/3/library/collections.html#collections.ChainMap: 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16769722)
 Using  a dict comprehension, you may 

  x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}

dc = {xi:(x[xi] if xi not in list(y.keys()) 
           else y[xi]) for xi in list(x.keys())+(list(y.keys()))}
  

  

  >>> dc
{'a': 1, 'c': 11, 'b': 10}
  

 Note the syntax for  if else  in comprehension  

  { (some_key if condition else default_key):(something_if_true if condition 
          else something_if_false) for key, value in dict_.items() }
  



