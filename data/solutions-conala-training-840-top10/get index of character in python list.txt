Query: get index of character in python list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3847498)
 Probably the  index  method? 

  a = ["a", "b", "c", "d", "e"]
print a.index("c")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3847494)
  >>> ['a', 'b'].index('b')
1
  

 If the list is already sorted, you can of course do better than linear search. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52352779)
 A character might appear multiple times in a string. For example in a string  sentence , position of  e  is  1, 4, 7  (because indexing usually starts from zero). but what I find is both of the functions  find()  and  index()  returns first position of a character. So, this can be solved doing this:  

  def charposition(string, char):
    pos = [] #list to store positions for each 'char' in 'string'
    for n in range(len(string)):
        if string[n] == char:
            pos.append(n)
    return pos

s = "sentence"
print(charposition(s, 'e')) 

#Output: [1, 4, 7]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41753022)
 You can't replace a letter in a string. Convert the string to a list, replace the letter, and convert it back to a string. 

  >>> s = list("Hello world")
>>> s
['H', 'e', 'l', 'l', 'o', ' ', 'z', 'o', 'r', 'l', 'd']
>>> s[int(len(s) / 2)] = '-'
>>> s
['H', 'e', 'l', 'l', 'o', '-', 'W', 'o', 'r', 'l', 'd']
>>> "".join(s)
'Hello-World'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27178227)
 Your very first line doesn't have that character: 

  'Viganello\n'
  

 Neither does the second: 

  'Monday\n'
  

 Only from the third line onwards is that character present: 

  '06 | 48\n'
  

 I suspect you want to perhaps split your lines on that character; don't use  str.index() ; you can use  str.split()  instead; it has the added advantage that that will wk even if the character is not present in a line. Use: 

  parts = [part.strip() f part in line.split('|')]
  

 and you'll get a list of elements from your input line, split on the  |  character, guaranteed. That list might contain just one element, but that shouldn't matter. 

 If you really must have the index of the  |  character, you can use  str.find()  and test f  -1  to see if it was missing,  use  try..except  to catch the  IndexErr : 

  a = line.find('|')
if a == -1:
    # oops, no such character
  

  

  try:
    a = line.index('|')
except IndexErr:
    # oops, no such character
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53861116)
 You can use a lookup contains your lists, find the target list from lookup and then use the index to find the value in the target list. 

  list_names = ['A', 'A', 'B', 'B', 'A', 'A']
list_indexes = [2, 5, 4, 6, 0, 9]
lists_lookup = {
    'A': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    'B': [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
}

result = []
for i in range(0, len(list_names)):
    target_list = lists_lookup[list_names[i]]
    index = list_indexes[i]
    result.append(target_list[index])
print(result)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30664239)
 Because single character (here "p") is considered as string in python and index of 0 of every string is its first character (example "p"[0]=="p"). 

 Example 

  x[0][0][0][0] # "p" as a string (Given)
x[0][0][0][0][0] #"p" as a first character 
                 # of previous string as when 
                 # you write "p"[0]

"p"[0] # remember also prints "p" as it is 
       #  the first char
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35209787)
 This will return a dictionary mapping each word in the sentence, which repeates at least once, to the list of word index (not character index) 

  from collections import defaultdict

sentence = "the cat sat on the mat which was below the cat"

def foo(mystr):
    sentence = mystr.lower().split()
    counter = defaultdict(list)
    for i in range(len(sentence)):
        counter[sentence[i]].append(i+1)

    new_dict = {}
    for k, v in counter.iteritems():
        if len(v) > 1:
            new_dict[k] = v

    return new_dict

print foo(sentence)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14424678)
 Looks you're doing cesar-cipher encryption, so you can try something like this: 

  strs = 'abcdefghijklmnopqrstuvwxyz'      #use a string like this, instead of ord() 
def shifttext(shift):
    inp = raw_input('Input text here: ')
    data = []
    for i in inp:                     #iterate over the text not some list
        if i.strip() and i in strs:                 # if the char is not a space ""  
            data.append(strs[(strs.index(i) + shift) % 26])    
        else:
            data.append(i)           #if space the simply append it to data
    output = ''.join(data)
    return output
  

  output:  

  In [2]: shifttext(3)
Input text here: how are you?
Out[2]: 'krz duh brx?'

In [3]: shifttext(3)
Input text here: Fine.
Out[3]: 'Flqh.'
  

  strs[(strs.index(i) + shift) % 26] :  line above means find the index of the character  i  in  strs  and then add the shift value to it.Now, on the final value(index+shift) apply %26 to the get the shifted index. This shifted index when passed to  strs[new_index]   yields the desired shifted character. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22267257)
 For getting the index of the items: 

  return [index for index, char in enumerate(x) if char == 's']
  

 For getting the character itself: 

  return [char for index, char in enumerate(x) if char == 's']
  

 Or to get tuples of character/index pairs:
(Thanks to falsetru for pointing out a simpler solution) 

  pairs = [(index, char) for index, char in enumerate(x) if char == 's']
  



