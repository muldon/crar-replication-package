Query: How to convert hex string to integer in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17495933)
 Use http://docs.python.org/2/library/functions.html#hex: 

  >>> x = 0xa1b2c3
>>> hex(x)
'0xa1b2c3'
  

 or http://docs.python.org/library/string.html#formatspec: 

  >>> "{:#x}".format(x)
'0xa1b2c3'
  

 or http://docs.python.org/2/library/functions.html#format: 

  >>> format(x, '#x')
'0xa1b2c3'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2269863)
 This will convert an integer to a 2 digit hex string with the 0x prefix: 

  strHex = "0x%0.2X" % 255
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41959873)
 Since you are having string of  hex  values. You may remove  ' 0x'  from the string to get the single hex number string. For example: 

  my_str =  "0x00 0x01 0x13 0x00"
hex_str = my_str.replace(' 0x', '')
  

 where value hold by  hex_str  will be: 

  '0x00011300'   # `hex` string
  

 Now you may convert  hex  string to  int  as: 

  >>> int(hex_str, 16)
70400
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10218221)
 The  0x  is literal representation of hex numbers. And  L  at the end means it is a  Long  integer. 

 If you just want a hex representation of the number as a string without  0x  and  L , you can use string formatting with  %x . 

  >>> a = 44199528911754184119951207843369973680110397
>>> hex(a)
'0x1fb62bdc9e54b041e61857943271b44aafb3dL'
>>> b = '%x' % a
>>> b
'1fb62bdc9e54b041e61857943271b44aafb3d'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3904208)
 Using the string formatters (new first, then old): 

  >>> '{:x}'.format( 12345678 )
'bc614e'

>>> '%x' % ( 12345678 )
'bc614e'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17495936)
 Why not just do http://docs.python.org/2/library/functions.html#hex? 

  >>> testNum = 0xa1b2c3
>>> hex(testNum)
    '0xa1b2c3'
>>> test = hex(testNum)
>>> isinstance(test, str)
    True
  

  hex  returns a string representation. See  help(hex)  

  hex(...)
    hex(number) -> string

    Return the hexadecimal representation of an integer or long integer.
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18298259)
 Use http://docs.python.org/3/library/binascii#binascii.hexlify: 

  In [1]: from binascii import hexlify

In [2]: a = b'\x91\x44\x77\x65\x92'

In [3]: hexlify(a)
Out[3]: b'9144776592'

In [4]: b = b'\x44\x45\x41\x44\x42\x45\x45\x46'

In [5]: hexlify(b)
Out[5]: b'4445414442454546'
  

 If you want  str  instead of bytes: 

  In [7]: hexlify(a).decode('ascii')
Out[7]: '9144776592'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11676895)
 You can use string formatting for this purpose: 

  >>> "0x{:02x}".format(13)
'0x0d'

>>> "0x{:02x}".format(131)
'0x83'
  

  Edit : Your code suggests that you are trying to convert a string to a hexstring representation.  There is a much easier way to do this (Python2.x): 

  >>> "abcd".encode("hex")
'61626364'
  

 An alternative (that also works in Python 3.x) is the function  binascii.hexlify() . 



