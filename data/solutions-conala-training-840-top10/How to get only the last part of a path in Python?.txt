Query: How to get only the last part of a path in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/44883542)
 Here is my approach: 

<pre class="lang-python prettyprint-override"> >>> import os
>>> print os.path.basename(
        os.path.dirname('/folderA/folderB/folderC/folderD/test.py'))
folderD
>>> print os.path.basename(
        os.path.dirname('/folderA/folderB/folderC/folderD/'))
folderD
>>> print os.path.basename(
        os.path.dirname('/folderA/folderB/folderC/folderD'))
folderC
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3925147)
 Use https://docs.python.org/library/os.path.html#os.path.normpath, then https://docs.python.org/library/os.path.html#os.path.basename: 

  >>> os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))
'folderD'
  

 The first strips off any trailing slashes, the second gives you the last part of the path. Using only  basename  gives everything after the last slash, which in this case is  '' . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54868730)
 With python 3 you can use the https://docs.python.org/3/library/pathlib.html module (https://docs.python.org/3/library/pathlib.html#pure-paths for example): 

  >>> import pathlib

>>> path = pathlib.PurePath('/folderA/folderB/folderC/folderD/')
>>> path.name
'folderD'
  

 If you want the last folder name where a file is located: 

  >>> path = pathlib.PurePath('/folderA/folderB/folderC/folderD/file.py')
>>> path.parent.name
'folderD'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27411609)
 I was searching for a solution to get the last foldername where the file is located, i just used split two times, to get the right part. It's not the question but google transfered me here. 

  pathname = "/folderA/folderB/folderC/folderD/filename.py"
head, tail = os.path.split(os.path.split(pathname)[0])
print(head + "   "  + tail)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3925932)
 A naive solution(Python 2.5.2+): 

  s="/path/to/any/folder/orfile"
desired_dir_or_file = s[s.rindex('/',0,-1)+1:-1] if s.endswith('/') else s[s.rindex('/')+1:]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50876887)
 Use the https://docs.python.org/3/library/os.path.html to work with paths; the https://docs.python.org/3/library/os.path.html#os.path.basename gives you the last part after the last path separator, and https://docs.python.org/3/library/os.path.html#os.path.splitext gives you the filename with the extension split off: 

  import os.path

basename = os.path.splitext(os.path.basename(f.name))[0]
  

 Using the  os.path  functions ensures that your code will continue to work correctly on different operating systems, even if the path separators are different. 

 In Python 3.4 or newer (or as a https://pypi.org/project/pathlib2/), you can also use the https://docs.python.org/3/library/pathlib.html, which offers a more object-oriented approach to path handling.  pathlib.Path()  objects have a https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.stem, which is the final component without the extension suffix: 

  try:
    import pathlib
except ImportError:
    # older Python version, import the backport instead
    import pathlib2 as pathlib

basename = pathlib.Path(f.name).stem
  

  

  >>> import os.path
>>> a = "/home/user/Downloads/repo/test.txt"
>>> os.path.basename(a)
'test.txt'
>>> os.path.splitext(os.path.basename(a))
('test', '.txt')
>>> os.path.splitext(os.path.basename(a))[0]
'test'
>>> import pathlib
>>> pathlib.Path(a)
PosixPath('/home/user/Downloads/repo/test.txt')
>>> pathlib.Path(a).stem
'test'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3925125)
  

  >>> import os
>>> os.path.basename('/folderA/folderB/folderC/folderD')
  

  UPDATE1:  This approach works in case you give it /folderA/folderB/folderC/folderD/xx.py. This gives xx.py as the basename. Which is not what you want I guess.   

  >>> import os
>>> path = "/folderA/folderB/folderC/folderD"
>>> if os.path.isdir(path):
        dirname = os.path.basename(path)
  

  UPDATE2:  As lars pointed out, making changes so as to accomodate trailing '/'. 

  >>> from os.path import normpath, basename
>>> basename(normpath('/folderA/folderB/folderC/folderD/'))
'folderD'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35132793)
 That leading slash on  "/tests/"  forces the path to be absolute, even though you're doing  

  os.path.join(os.getcwd(), "/tests/")
  

  

  os.path.join(os.getcwd(), "tests/")
  

 From the https://docs.python.org/2/library/os.path.html#os.path.join docs: 

 
    os.path.join(path, *paths)  
  
   Join one or more path components intelligently. The return value is
  the concatenation of  path  and any members of  *paths  with exactly one
  directory separator ( os.sep ) following each non-empty part except
  the last, meaning that the result will only end in a separator if the
  last part is empty.  If a component is an absolute path, all previous
  components are thrown away and joining continues from the absolute
  path component.  
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16118620)
  >>> import os
>>> a = 'A/B'
>>> os.path.normpath(a)
'A\\B'
>>> a = 'A/./B'
>>> os.path.normpath(a)
'A\\B'
>>> a = 'A\B'
>>> os.path.normpath(a)
'A\\B'
>>> a = 'A\\B'
>>> os.path.normpath(a)
'A\\B'
  

 Then instead of use [-4:] better practice is to use 'A//B'.split(os.path.sep)[-1] then you are sure you get whole last part of path.
os.path.sep returns separator in current os. 



