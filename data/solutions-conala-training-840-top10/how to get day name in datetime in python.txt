Query: how to get day name in datetime in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43885259)
 If you need just to print the day name from datetime object you can use like this: 

  current_date = datetime.now
current_date.strftime('%A')  # will return "Wednesday"
current_date.strftime('%a')  # will return "Wed"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8380402)
  import datetime
now = datetime.datetime.now()
print(now.strftime("%A"))
  

 See the Python docs for http://docs.python.org/py3k/library/datetime.html#datetime.datetime.now, http://docs.python.org/py3k/library/datetime.html#datetime.datetime.strftime and http://docs.python.org/py3k/library/datetime.html#strftime-and-strptime-behavior. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36341615)
 I have been using calendar module: 

  import calendar
calendar.day_name[0]
'Monday'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54322177)
  We can take help of Pandas:  

  import pandas as pd
  

 As mentioned above in the problem We have: 

  datetime(2017, 10, 20)
  

 If execute this line in the jupyter notebook we have an output like this: 

  datetime.datetime(2017, 10, 20, 0, 0)
  

  Using weekday() and weekday_name:  

 If you want weekdays in integer number format then use: 

  pd.to_datetime(datetime(2017, 10, 20)).weekday()
  

 The output will be: 

  4
  

 And if you want it as name of the day like Sunday, Monday, Friday, etc you can use: 

  pd.to_datetime(datetime(2017, 10, 20)).weekday_name
  

 The output will be: 

  'Friday'  

  If having a dates column in Pandas dataframe then:  

 Now suppose if you have a pandas dataframe having a date column like this:
pdExampleDataFrame['Dates'].head(5) 

  0   2010-04-01
1   2010-04-02
2   2010-04-03
3   2010-04-04
4   2010-04-05
Name: Dates, dtype: datetime64[ns]
  

 Now If we want to know the name of the weekday like Monday, Tuesday, ..etc we can use  .weekday_name  as follows: 

  pdExampleDataFrame.head(5)['Dates'].dt.weekday_name
  

 the output will be: 

  0    Thursday
1      Friday
2    Saturday
3      Sunday
4      Monday
Name: Dates, dtype: object
  

 And if we want the integer number of weekday from this Dates column then we can use: 

  pdExampleDataFrame.head(5)['Dates'].apply(lambda x: x.weekday())
  

 The output will look like this: 

  0    3
1    4
2    5
3    6
4    0
Name: Dates, dtype: int64
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29096827)
 One method, so long as datetime is already a datetime column is to apply  datetime.strftime  to get the string for the weekday: 

  In [105]:

df['weekday'] = df[['datetime']].apply(lambda x: dt.datetime.strftime(x['datetime'], '%A'), axis=1)
df
Out[105]:
             datetime  season  holiday  workingday  weather   temp   atemp  \
0 2011-01-01 00:00:00       1        0           0        1   9.84  14.395   
1 2011-01-01 01:00:00       1        0           0        1   9.02  13.635   
2 2011-01-01 02:00:00       1        0           0        1   9.02  13.635   
3 2011-01-01 03:00:00       1        0           0        1   9.84  14.395   
4 2011-01-01 04:00:00       1        0           0        1   9.84  14.395   
5 2011-01-01 05:00:00       1        0           0        2   9.84  12.880   
6 2011-01-01 06:00:00       1        0           0        1   9.02  13.635   
7 2011-01-01 07:00:00       1        0           0        1   8.20  12.880   
8 2011-01-01 08:00:00       1        0           0        1   9.84  14.395   
9 2011-01-01 09:00:00       1        0           0        1  13.12  17.425   

   humidity  windspeed  count   weekday  
0        81     0.0000     16  Saturday  
1        80     0.0000     40  Saturday  
2        80     0.0000     32  Saturday  
3        75     0.0000     13  Saturday  
4        75     0.0000      1  Saturday  
5        75     6.0032      1  Saturday  
6        80     0.0000      2  Saturday  
7        86     0.0000      3  Saturday  
8        75     0.0000      8  Saturday  
9        76     0.0000     14  Saturday  
  

 As to your other question, there is no difference between  dayofweek  and  weekday . 

 It will be quicker to define a map of the weekday to String equivalent and call map on the weekday: 

  dayOfWeek={0:'Monday', 1:'Tuesday', 2:'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'}
df['weekday'] = df['datetime'].dt.dayofweek.map(dayOfWeek)
  

 For version prior to  0.15.0  the following should work: 

  import datetime as dt
df['weekday'] = df['datetime'].apply(lambda x: dt.datetime.strftime(x, '%A'))
  

  Version 0.18.1 and newer  

 There is now a new convenience method http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.weekday_name.html to do the above 

  Version 0.23.0 and newer  

 weekday_name is now depricated in favour of http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.day_name.html. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51795079)
 Using  dt.weekday_name  is https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Timestamp.weekday_name.html, instead, use https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.day_name.html: 

  df.datetime.dt.day_name()

0    Saturday
1    Saturday
2    Saturday
3    Saturday
4    Saturday
5    Saturday
6    Saturday
7    Saturday
8    Saturday
9    Saturday
Name: datetime, dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36341648)
 It is more Pythonic to use the https://docs.python.org/2/library/calendar.html: 

  >>> import calendar
>>> list(calendar.day_name)
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
  

 Or, you can use common day name abbreviations:  

  >>> list(calendar.day_abbr)
['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  

 Then index as you wish: 

  >>> calendar.day_name[1]
'Tuesday'
  

 (If Monday is not the first day of the week, use https://docs.python.org/2/library/calendar.html#calendar.setfirstweekday to change it) 

 Using the calendar module has the advantage of being location aware: 

  >>> import locale
>>> locale.setlocale(locale.LC_ALL, 'de_DE')
'de_DE'
>>> list(calendar.day_name)
['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15839055)
 This is similar to the weekday method in https://stackoverflow.com/a/15835012/355230, but implemented in a way that doesn't require the day names (or their abbreviations) to be hardcoded into it. It uses the  datetime.date 's  toordinal()  method to convert the date to a single number, then figures out how many days to add to it to get the desired weekday, and lastly converts the new number back into a date using the  date.fromordinal()  method.  

 It creates and uses a dictionary named  DAYNUMS  to convert the  reqDayOf  weekday name into a number from 1 to 7, and the  date.isoweekday()  method is used to do likewise for the  dateTimeObj  argument which was passed to it. The  DAYNUMS  dictionary is created without using hardcoded day names, so it will also work in non-English locales and languages given an appropriate  reqDayOf  argument, such as  'lundi'  instead of  'Monday'  for French locales. 

  import datetime

# Create dictionary based on fact that 2013-April-01 was a Monday.
DAYNUMS = {datetime.date(2013, 4, i).strftime('%A').lower(): i
               for i in range(1, 8)}

def getDateFromDayOf(dateTimeObj, reqDayOf):
    daysDiff = (DAYNUMS[reqDayOf.lower()] - dateTimeObj.isoweekday() - 1) % 7 + 1
    return datetime.date.fromordinal(dateTimeObj.toordinal() + daysDiff)

a_date = datetime.datetime.strptime('2013-04-05', '%Y-%m-%d')
print(a_date.strftime('%a %Y %b %d'))                              # -> Fri 2013 Apr 05
print(getDateFromDayOf(a_date, 'Monday').strftime('%a %Y %b %d'))  # -> Mon 2013 Apr 08
  



