Query: sort dict by value python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16772089)
 Sort the values: 

  sorted(data.values())
  

 returns 

  ['a','b']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4331932)
  dict s are unordered. So there is no way to sort them directly, but if you are 
willing to convert the  dict  into a list of (key,value)-tuples, then you could do this: 

  In [9]: d
Out[9]: {'a': {'b': 'whatever', 'k': 1}, 'b': {'b': 'sort by k', 'k': 2}}

In [15]: sorted(d.items(),key=lambda x: x[1]['k'],reverse=True)
Out[15]: [('b', {'b': 'sort by k', 'k': 2}), ('a', {'b': 'whatever', 'k': 1})]
  

 This http://wiki.python.org/moin/HowTo/Sorting#KeyFunctions explains the use of the  key  parameter. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16772651)
 If you actually want to sort the dictionary instead of just obtaining a sorted list use http://docs.python.org/2/library/collections.html#collections.OrderedDict 

  >>> from collections import OrderedDict
>>> from operator import itemgetter
>>> data = {1: 'b', 2: 'a'}
>>> d = OrderedDict(sorted(data.items(), key=itemgetter(1)))
>>> d
OrderedDict([(2, 'a'), (1, 'b')])
>>> d.values()
['a', 'b']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16773365)
 From your comment to gnibbler answer, i'd say you want a list of pairs of key-value sorted by value: 

  sorted(data.items(), key=lambda x:x[1])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15614118)
 Standard Python dictionaries are inherently unordered. However, you could use http://docs.python.org/2/library/collections.html#collections.OrderedDict. It preserves the insertion order, so all you have to do is add the key/value pairs in the desired order: 

  In [4]: collections.OrderedDict(sorted(result.items()))
Out[4]: OrderedDict([('1', 'value1'), ('2', 'value2')])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12020421)
 Note that you can't actually sort a dict, because a dict has no defined order. But you can convert it into a sorted list: 

  sorted(mydict.items(), key = lambda x: x[1]['sales_min'])
  

 They lambda takes an elements from the  items()  list and returns the sales min value. By passing this function as they key parameter, python will sort it by that. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44550237)
 You can use the operator module: 

  import operator
sample = {
 'a' : 100,
 'b' : 3,
 'e' : 42,
 'c' : 250,
 'f' : 42,
 'd' : 42,
}

sorted_by_value = tuple(sorted(sample.items(), key=operator.itemgetter(1)))

sorted_by_key = tuple(sorted(sample.items(), key=operator.itemgetter(0)))
  

 sorted_by_value: 

  (('b', 3), ('e', 42), ('d', 42), ('f', 42), ('a', 100), ('c', 250))
  

  

   (('a', 100), ('b', 3), ('c', 250), ('d', 42), ('e', 42), ('f', 42))
  



