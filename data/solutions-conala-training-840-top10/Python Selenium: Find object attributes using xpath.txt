Query: Python Selenium: Find object attributes using xpath
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12689543)
 I finally used  get_attribute("value")  as: 

  for i in browser.find_elements_by_xpath("//*[@type='submit']"):
    print i.get_attribute("value")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27810324)
  find_elements_by_xpath  return a list of  webelements  which does not have  get_attribute  method. You need to perform  get_attribite  on individual element in that list 

  browser = webdriver.Firefox()
browser.get("http://www.scba.gov.ar/jurisprudencia/Navbar.asp?Busca=Fallos+Completos&SearchString=Inconstitucionalidad")
time.sleep(5)

elements = browser.find_element_by_xpath('//a[contains(text(),"Completo")]'))
for element in elements: 
    print(element.get_attribute("href"))
browser.find_element_by_xpath("//td[2]/a").click() # Click on next button
time.sleep(5)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27307235)
 It is  not possible  using a selenium webdriver API, but you can https://stackoverflow.com/questions/21681897/getting-all-attributes-from-an-iwebelement-with-selenium-webdriver: 

  driver.execute_script('var items = {}; for (index = 0; index < arguments[0].attributes.length; ++index) { items[arguments[0].attributes[index].name] = arguments[0].attributes[index].value }; return items;', element)
  

  

  >>> from selenium import webdriver
>>> from pprint import pprint
>>> driver = webdriver.Firefox()
>>> driver.get('https://stackoverflow.com')
>>> 
>>> element = driver.find_element_by_xpath('//div[@class="network-items"]/a')
>>> attrs = driver.execute_script('var items = {}; for (index = 0; index < arguments[0].attributes.length; ++index) { items[arguments[0].attributes[index].name] = arguments[0].attributes[index].value }; return items;', element)
>>> pprint(attrs)
{u'class': u'topbar-icon icon-site-switcher yes-hover js-site-switcher-button js-gps-track',
 u'data-gps-track': u'site_switcher.show',
 u'href': u'//stackexchange.com',
 u'title': u'A list of all 132 Stack Exchange sites'}
  

 

 For completeness sake, an alternative solution would be to get the tag's  outerHTML  and parse the attributes using an HTML parser. Example (using http://www.crummy.com/software/BeautifulSoup/bs4/doc/): 

  >>> from bs4 import BeautifulSoup
>>> html = element.get_attribute('outerHTML')
>>> attrs = BeautifulSoup(html, 'html.parser').a.attrs
>>> pprint(attrs)
{u'class': [u'topbar-icon',
            u'icon-site-switcher',
            u'yes-hover',
            u'js-site-switcher-button',
            u'js-gps-track'],
 u'data-gps-track': u'site_switcher.show',
 u'href': u'//stackexchange.com',
 u'title': u'A list of all 132 Stack Exchange sites'}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17541287)
 You mean Selenium WebDriver? 
Huh.... 

  Prerequisite : Install Python based on your OS 

 Install with following command  

  pip install -U selenium
  

 And use this module in your code  

  from selenium import webdriver
  

 You can also use many of the following as required  

  from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
  

 Here is an updated answer 

 I would recommend you to run script without IDE... Here is my approach 

 
 USE IDE to find xpath of object / element 
 And use find_element_by_xpath().click()  
 

 An example below shows login page automation  

  #ScriptName : Login.py
#---------------------
from selenium import webdriver

#Following are optional required
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException

baseurl = "http://www.mywebsite.com/login.php"
username = "admin"
password = "admin"

xpaths = { 'usernameTxtBox' : "//input[@name='username']",
           'passwordTxtBox' : "//input[@name='password']",
           'submitButton' :   "//input[@name='login']"
         }

mydriver = webdriver.Firefox()
mydriver.get(baseurl)
mydriver.maximize_window()

#Clear Username TextBox if already allowed "Remember Me" 
mydriver.find_element_by_xpath(xpaths['usernameTxtBox']).clear()

#Write Username in Username TextBox
mydriver.find_element_by_xpath(xpaths['usernameTxtBox']).send_keys(username)

#Clear Password TextBox if already allowed "Remember Me" 
mydriver.find_element_by_xpath(xpaths['passwordTxtBox']).clear()

#Write Password in password TextBox
mydriver.find_element_by_xpath(xpaths['passwordTxtBox']).send_keys(password)

#Click Login button
mydriver.find_element_by_xpath(xpaths['submitButton']).click()
  

 There is an another way that you can find xpath of any object - 

 
 Install Firebug and Firepath addons in firefox 
 Open URL in Firefox 
 Press F12 to open Firepath developer instance  
 Select Firepath in below browser pane and chose select by "xpath"  
 Move cursor of the mouse to element on webpage 
 in the xpath textbox you will get xpath of an object/element. 
 Copy Paste xpath to the script. 
 

  

  python Login.py
  

 You can also use a CSS selector instead of xpath. CSS selectors are slightly faster than xpath in most cases, and are usually preferred over xpath (if there isn't an ID attribute on the elements you're interacting with). 

 Firepath can also capture the object's locator as a CSS selector if you move your cursor to the object. You'll have to update your code to use the equivalent find by CSS selector method instead - 

  find_element_by_css_selector(css_selector) 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43347522)
 In  Python   By.XPATH  is not a method of class  By() , but string variable: 

  By.XPATH == "xpath"
  

 Try to implement below code: 

  from selenium.webdriver.common.by import By

locator = (By.XPATH, oSignUp.listformfieldxpaths[0])
elem = oDriver.getdriver().find_element(*locator)
elem.send_keys("tester")
  

 Note that  find_element()  should receive 2 arguments:  by  and  value . Both are  strings  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43347596)
 I believe this should work. Give it a shot 

  xpath = oSignUp.listformfieldxpaths[0]
elem = oDriver.getdriver().find_element(By.XPATH, xpath)
elem.send_keys("tester")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22568873)
 Because you are using  find_elements_by_xpath , not  find_element_by_xpath , note your one is plural  elements , while the other one is  element . 

  driver.find_elements_by_xpath  will return a list of elements,  text  is a property for a single element. You need either use  find_element_by_xpath , or index  find_elements_by_xpath . 

  AttributeError: 'list' object has no attribute 'text'  has clearly told you that. 

 Furthermore, the title you mean is the attribute of the element, so need this 

  imageTitle= driver.find_element_by_xpath("//td[2]/div/img").get_attribute("title")
  

 http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#selenium.webdriver.remote.webelement.WebElement.get_attribute is the API documentation, please read carefully when coding. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12579196)
  

  browser.find_elements_by_xpath("//*[@type='submit']/@value").text
  

  Update:  

 With the function used by you, we can only extract the element not its attribute. To get its attribute, the expression should be something like this 

  browser.find_elements_by_xpath("//*[@type='submit']").get_attribute("value")
  

 Ref: 
http://selenium-python.readthedocs.org/en/latest/api.html#selenium.webdriver.remote.webelement.WebElement.find_elements_by_tag_name 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46163372)
 When using Selenium's element finding methods, you're retrieving a http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement object. What you want is the element's text, which you can retrieve via the  text  attribute of your WebElement object. Also, the  find_elements_by_xpath  method returns a list of WebElements, so you need to iterate it: 

  IPs = driver.find_elements_by_xpath("//span[contains(text(), '10.')]")

for ip in IPs:
    print(ip.text)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54568862)
  find_elements_by_xpath()  returns a webelement - the basic object selenium actually works with. 
Your xpath ends with  /text()  - that will return you the text content of a node in an xml document - not an object selenium expects. So, just change it not to have that suffix - that will return the element itself, and get its (the element's) text by calling  .text  in Python: 

  dneyot=driver.find_elements_by_xpath("//*[starts-with(@id, 'popover-')]")
for element in dneyot:
    print("Период показов >3 дней", element.text)
  



