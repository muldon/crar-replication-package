Query: How to print a list with integers without the brackets, commas and no quotes?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17757511)
 You can convert it to a string, and then to an int: 

  print(int("".join(str(x) for x in [7,7,7,7])))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17757466)
 Something like this should do it: 

  for element in list_:
   sys.stdout.write(str(element))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17757999)
   .format  from Python 2.6 and higher. 

  >>> print '{}{}{}{}'.format(*[7,7,7,7])
7777
>>> data = [7, 7, 7, 7] * 3
>>> print ('{}'*len(data)).format(*data)
777777777777777777777777
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17757544)
 If you're using Python 3, or appropriate Python 2.x version with  from __future__ import print_function  then: 

  data = [7, 7, 7, 7]
print(*data, sep='')
  

 Otherwise, you'll need to convert to string and print: 

  print ''.join(map(str, data))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35401579)
 If the list is  

  l=[1,2,3,4,5]
  

 Printing the list without bracket and commas: 

  print " ".join(map(str,l))

#1 2 3 4 5
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7494403)
 You're printing the returned  list  value, which Python fmats with brackets and quotes. To print just the first element from the list: 

  print Lookup.get_key(2)[0]
  

 To print the elements of the list separated by commas: 

  print ", ".join(str(x) f x in Lookup.get_key(2))
  

  

  print ", ".join(map(str, Lookup.get_key(2)))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37260521)
 You can use a list comprehension within  str.join() : 

  >>> print '\n'.join([' '.join(i) for i in a])
zero one
0 1
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38620061)
  print('[' + ' '.join([str(tup) for tup in c]) + ']')
  

 Using a list comprehension to create a list of the tuples in string form. Those are then joined and the square brackets are added to make it look as you want it. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23925862)
 I don't know if you are aware of regular expressions but using python's 'https://docs.python.org/2/library/re.html' module should give you what you are looking for:  

      import re
    strs = "('Hello', 'World', 'How')"

    #creates list of strings that match the regular expression
    words = re.findall(r"\'([A-Za-z]+)\'", strs)

    #joins all of the elements of the word array into a string separated by a space
    outputString = " ".join(words)

    #output is "Hello World How"
    print outputString
  



