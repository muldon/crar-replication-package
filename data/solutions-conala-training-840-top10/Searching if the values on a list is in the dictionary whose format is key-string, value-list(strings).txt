Query: Searching if the values on a list is in the dictionary whose format is key-string, value-list(strings)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32792883)
 You need to iterate over the  list  as well (and you should not be using  list  as a variable name, it shadows the built-in  list  function) . Example - 

  [key for item in lst for key,value in my_dict.items() if item in value]
  

  

  >>> my_dict = {                              # This dictionary is generated thru
... 'a' : [ 'value1', 'value4', 'value5' ],  # the info given by the user
... 'b' : [ 'value2', 'value6', 'value7'],
... 'c' : [ 'value3', 'value8', 'value9']
... }
>>>
>>> lst = [ 'value1', 'value2' ]
>>> [key for item in lst for key,value in my_dict.items() if item in value]
['a', 'b']
  

 

 You can get better performance, if you use  set  instead of  list  to store the values in the dictionary (since searching inside a set is O(1) operation, whereas searching inside a list is O(n) ). Example - 

  my_dict = {key:set(value) for key,value in my_dict.items()}
[key for item in lst for key,value in my_dict.items() if item in value]
  

  

  >>> my_dict = {key:set(value) for key,value in my_dict.items()}
>>> pprint(my_dict)
{'a': {'value4', 'value5', 'value1'},
 'b': {'value6', 'value7', 'value2'},
 'c': {'value3', 'value9', 'value8'}}
>>> lst = [ 'value1', 'value2' ]
>>> [key for item in lst for key,value in my_dict.items() if item in value]
['a', 'b']
  

 

 If you are trying to check if any of the values in the list match with any value from the list in the dictionary, you can use  set.intersection   and check if the result is empty or not. Example - 

  [key for key, value in my_dict.items() if set(value).intersection(lst)]
  

 This result will not be ordered, since dictionary does not have any specific order. 

  

  >>> my_dict = {
... 'a' : [ 'value1', 'value4', 'value5' ],
... 'b' : [ 'value2', 'value6', 'value7'],
... 'c' : [ 'value3', 'value8', 'value9']
... }
>>> lst = [ 'value1', 'value2' ]
>>> [key for key, value in my_dict.items() if set(value).intersection(lst)]
['b', 'a']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54328419)
 You can usually use dictionary keys with star unpacking 

  dic1 = {"key1":"hello","key2":"python"}
print("{key1}".format(**dic1))
  

 Here the keys are numbers (and not even strings but it doesn't matter anyway: to use the technique above, the arguments must be valid as python identifiers, see https://stackoverflow.com/questions/42514939/what-are-valid-keys-according-to-python-str-format-documentation) 

 When doing  print("{1}".format(whatever)) ,  format  interprets them as positional argument (2nd argument) and it fails miserably. 

 One solution is to pass the dictionary to  format  and query it from the format string: 

  dic1 = {1:"hello",2:"python"}

print("{dic[1]}".format(dic=dic1))
  

 result: 

  hello
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40812988)
 Python has an excellent mini-language specifically for string formatting. This is what should be used. 

 You know that you want your format to be 

  flavor    sell1    sell2    sell3    Total:     total sells  

 Which would equate to the following string format: 

  "{} \t {} \t {} \t {} \t Total: {}"  

 So now that you know your format, the next step is to apply this format to every  key, value  pair in your dictionary. Use a for loop to iterate over each  key, value  pair. 

  for key, value in dictionary.items():
    print("{} \t {} \t {} \t {} \t Total: {}".format(...))
  

 The last thing left to do is to fill in the blanks. You know that the  key s in your  dict()  are the flavors, so the first parameter to  format()  would be the  key  variable: 

  .format(key, ...)  

 Next you need the three values from your  key 's, values. We could index each value out of of  value : 

  .format(key, value[0], value[1], value[2], ...)  

 Bu that's a bit verbose, and Python had a better method. We can simply "unpack" the list of values into the appropriate spots using the syntax  *iterable . 

  .format(key, *value, ...)  

 And the last value left to fill in would be your total. You can make use of the builtin function  sum()  to add all the values in  values  together: 

  .format(key, *value, sum(value))  

 Now to print the sum of each column, we first need the value of each key in your  dict() . This can be done using a simple list comprehension: 

  sales = [value for value in d.values()]
  

 Next, we need to get the first value from each list in  sales  and add the value. This can be done using a list comprehension and the  zip()  builtin function: 

  totals = [round(sum(l), 1) for l in zip(*sales)]
  

 The round function is used with floats to round them to a certain decimal place. You can change that number to your liking, but I chose one. The last thing left to do is to print the totals of each column. After a bit of experimentation, this should work just fine: 

  `print("\t\t {}\t {}\t {}".format(*totals))
  

 So the final, finished solution would be: 

  sales  = [value for value in d.values()]
    totals = [round(sum(l), 1) for l in zip(*sales)]
    for key, value in salesData.items():
        print("{} \t {} \t {} \t {} \t Total: {}".format(key, *value, sum(value)))
    print("\t\t {}\t {}\t {}".format(*totals))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38600270)
 This line is putting the key (the date) in the key variable, and the values, as a  list  in values. So values will indeed contain something like ['AA' 'BB' 'AAPL']. 

  for key,values in sorted(a.items()):
  

 Next, you're telling writerow "write a row with two elements: the first is the key, the second is whatever is in values" (which is a list so it's just converted to a string representation and output like that). 

      w.writerow([key,values])
  

 so [key, values] looks like this: 

  [2009/01/02, ['AA','BB','AAPL']]
 ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^
 the key     this whole thing
             is the single value
  

 What you'd want, I think, is to create a single list containing the key and strings, not one containing the key and a list of strings. You could extend a list with the extra values like so: 

      the_row = [key]  # Create the initial row with just key
    the_row.extend(values)  # Add the values, one by one, to the row
    w.writerow(the_row)  # Write the full row
  

 list.extend(L) does: Extend the list by appending all the items in the given list. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50321351)
 When you do  searchString in value  you're only checking the keys of that  value  dictionary. 

 You would need a second loop to check against the values of the nested dictionary 

  for key, value in addressBook.items():
    inside = False
    for v in value.values():
        if searchString in v:
            inside = True 
            break
    if searchString in key or inside:
  

 Unrelated note:  searchString in key  is checking substrings, not an exact match  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16971574)
  .join()  expects an iterable of strings and your generator yields lists of strings, so you are ending up with a call like  .join([['create table bla', ' columns bla bla']]) . 

 Since it looks like you only expect a single key to match, you probably don't want a generator for this.  I would suggest the following: 

  sqlQry = None
for key, value in simpleDict.items():
    if 'DDL' in key:
        sqlQry = .join(value)
        break
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26333603)
 You can achieve the same thing with couple list comprehensions and a filter lambda: 

  matching_words = [ word for word in l if word in s ]
matching_values = [ value for key, value in d.items() if list(filter(lambda x: x in key, matching_words)) ]
for value in matching_values:
    print(value)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5182528)
 You could join all the keys into one long string with a suitable separator character and use the  find  method of the string. That is pretty fast. 

 Perhaps this code is helpful to you. The  search  method returns a list of dictionary values whose keys contain the substring  key . 

  class DictLookupBySubstr(object):
    def __init__(self, dictionary, separator='\n'):
        self.dic = dictionary
        self.sep = separator
        self.txt = separator.join(dictionary.keys())+separator

    def search(self, key):
        res = []
        i = self.txt.find(key)
        while i >= 0:
            left = self.txt.rfind(self.sep, 0, i) + 1
            right = self.txt.find(self.sep, i)
            dic_key = self.txt[left:right]
            res.append(self.dic[dic_key])
            i = self.txt.find(key, right+1)
        return res
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11775854)
 Convert the keys to  datetime.date  values; using  .items()  would give you tuples of both key and value that you can then sort: 

  data = [(datetime.datetime.strptime(k, '%d.%m.%Y').date(), v) 
        for k, v in yourdict.items()]
data.sort()
  

 Then index these; data[5][0] is the date, data[5][1] is the dictionary value. 

 If you need to retain the original date formatting, use the date format parsing only for sorting; here's a one-liner variant of the above that uses a sort key: 

  data = sorted(yourdict.items(), 
              key=lambda i: datetime.datetime.strptime(i[0], '%d.%m.%Y'))
  

 Here I use the http://docs.python.org/py3k/library/functions.html#sorted to do the hard work, and the  key  lambda takes each date string, converting it to a  datetime.datetime  instance for sorting purposes only. I don't limit this to a  datetime.date  instance as in the first example. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/43622929)
 You could sort the dictionary in decreasing order by the value:  

  >>> sorted_d = sorted(d.items(), key=lambda x: x[1], reverse=True)
  

 and then format the items "per spec" in a list comprehension: 

  >>> ['{k} {v[0]} {v[1]} {v[2]}'.format(k=k, v=v) for k, v in sorted_d]
['DDD 3 1 0', 'BBB 0 1 0', 'AAA 0 0 1', 'CCC 0 0 1']
  

 I actually missed the requirement that in case of equal values you want to sort by the key (that just happened by accident - dictionaries are unordered). There are several ways to solve that: 

 
  First sort by the key (not reverse) and then by the value (reverse): 

  >>> from operator import itemgetter
>>> sorted_d = sorted(d.items(), key=itemgetter(0))
>>> sorted_d = sorted(sorted_d, key=itemgetter(1), reverse=True)
>>> ['{k} {v[0]} {v[1]} {v[2]}'.format(k=k, v=v) for k, v in sorted_d]
['DDD 3 1 0', 'BBB 0 1 0', 'AAA 0 0 1', 'CCC 0 0 1']
   
  Or create a custom class that compares exactly like you need it: 

  class Compare(object):
    def __init__(self, key_value_pair):
        self.data = key_value_pair

    def __lt__(self, other):
        key1, value1 = self.data
        key2, value2 = other.data
        if value1 == value2:
            return key1 < key2
        else:
            return value1 > value2
  

 The rest stays roughly the same, except for the  reverse=True  part that was baked into the comparator: 

  >>> sorted_d = sorted(d.items(), key=Compare)
>>> ['{k} {v[0]} {v[1]} {v[2]}'.format(k=k, v=v) for k, v in sorted_d]
['DDD 3 1 0', 'BBB 0 1 0', 'AAA 0 0 1', 'CCC 0 0 1']
   
 



