Query: how to create a dictionary using two lists in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15183109)
 You can use zip function:
 dict(zip(x, y)) 
 

  >>> x = ['1', '2', '3', '4']
... y = [[1,0],[2,0],[3,0],[4,]]
>>> dict(zip(x, y))
0: {'1': [1, 0], '2': [2, 0], '3': [3, 0], '4': [4]}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15183114)
 You can use http://docs.python.org/2/library/itertools.html#itertools.izip to accomplish this. 

  from itertools import izip
x = ['1', '2', '3', '4']
y = [[1,0],[2,0],[3,0],[4,]]
dict(izip(x, y))
  

 If your flavor of Python is 3.x, then you can use http://docs.python.org/dev/library/itertools.html?highlight=itertools#itertools.zip_longest to do the same thing. 

  from itertools import zip_longest
x = ['1', '2', '3', '4']
y = [[1,0],[2,0],[3,0],[4,]]
dict(zip_longest(x, y))    
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42951279)
 That is not possible because you cannot have dicts with duplicate keys. 

 You can instead try to have a  list  of all values under the same key. 

  >>> from collections import defaultdict
>>> d = defaultdict(list)
>>> zipped_list = [(0, 0), (0, 1), (1, 2)]
>>> for k,v in zipped_list:
...     d[k].append(v)
... 
>>> d
defaultdict(<type 'list'>, {0: [0, 1], 1: [2]})
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4091034)
 You could use  Counter   and   defaultdict  in the Python 2.7  collections  module in a two-step process. First use  Counter  to create a dictionary where each word is a key with the associated frequency count. This is fairly trivial. 

 Secondly  defaultdict  could be used to create an inverted or reversed dictionary where the keys are the frequency of occurrence and the associated values are lists of the word or words that were encountered that many times.  

  from collections import Counter, defaultdict

wordlist = ['red', 'yellow', 'blue', 'red', 'green', 'blue', 'blue', 'yellow']

# invert a temporary Counter(wordlist) dictionary so keys are
# frequency of occurrence and values are lists the words encountered
freqword = defaultdict(list)
for word, freq in Counter(wordlist).items():
    freqword[freq].append(word)

# print in order of occurrence (with sorted list of words)
for freq in sorted(freqword):
    print('count {}: {}'.format(freq, sorted(freqword[freq])))
  

 Output: 

<pre class="lang-none prettyprint-override"> count 1: ['green']
count 2: ['red', 'yellow']
count 3: ['blue']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52118522)
 Use a  defaultdict , with the empty list an starting value 

   result = defaultdict(list)

 for key, value in zip(list1, list2):
      result[key].append(value)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21870021)
 In one step (Python 2.x): 

  keys, values = zip(*tel.iteritems())
  

 Or in Python 3. 

  keys, values = zip(*tel.items())
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10401285)
 Other answers covered the 'Why', so here's the how. 

 You should use a comprehension to create your desired dictionary: 

  >>> keys = ['one','two','three']
>>> sets = { x: [] for x in keys }
>>> sets['one'].append(1)
>>> sets
{'three': [], 'two': [], 'one': [1]}
  

 For Python 2.6 and below, the dictionary comprehension can be replaced with: 

  >>> sets = dict( ((x,[]) for x in keys) )
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/20097564)
  

  list1=['a','b','c','d']
list2=[1,2,3,4]
  

 we want to zip these two lists and create a dictionary dict_list 

  dict_list = zip(list1, list2)
dict(dict_list)
  

 this will give: 

  dict_list = {'a':1, 'b':2, 'c':3, 'd':4 }
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5783767)
 You need a "hashable" dictionary. 

 The  items()  attribute is a list of tuples.  Make this a  tuple()  and you have a hashable version of a dictionary. 

  tuple( sorted( some_dict.items() ) )
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/17079306)
  

  #!/bin/env python

import pprint

a=['car', 'house', 'wagon', 'rat', 'mouse', 'cart']
b=['carro', 'casa', 'carro', 'raton', 'raton', 'carro']

d = {}
for pair in zip(a,b):
    if pair[1] not in d: d[pair[1]] = []
    d[pair[1]].append(pair[0])

pprint.pprint(d)
  

  

  {'carro': ['car', 'wagon', 'cart'],
 'casa': ['house'],
 'raton': ['rat', 'mouse']}
  

 You could format it differently, just loop through the dictionary  d . 



