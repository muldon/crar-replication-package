Query: regex for repeating words in a string in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25474533)
 You could try the below regex also, 

  (?<= |^)(\S+)(?: \1){2,}(?= |$)
  

 Sample code, 

  >>> import regex
>>> s = "hi hi hi hi some words words words which'll repeat repeat repeat repeat repeat"
>>> m = regex.sub(r'(?<= |^)(\S+)(?: \1){2,}(?= |$)', r'\1 \1', s)
>>> m
"hi hi some words words which'll repeat repeat"
  

 http://regex101.com/r/cN4tF8/12 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25474408)
 Try the following: 

  import re
s = your string
s = re.sub( r'(\S+) (?:\1 ?){2,}', r'\1 \1', s )
  

 You can see a sample code here: http://codepad.org/YyS9JCLO 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5638425)
 It is possible to use regex: 

  import re

inp = [
    'abducts'
,   'abe'
,   'abeam'
,   'abel'
,   'abele'
]

# detect word which contains a character at least twice
rgx = re.compile(r'.*(.).*\1.*') 

def filter_words(inp):
    for word in inp:
        if rgx.match(word) is None:
            yield word

print list(filter_words(inp))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25474443)
 Assuming that what is called "word" in your requirements is one or more non-whitespaces characters surrounded by whitespaces or string limits, you can try this pattern: 

  re.sub(r'(?<!\S)((\S+)(?:\s+\2))(?:\s+\2)+(?!\S)', r'\1', s)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51724274)
 You can try it with regex, too: 

  rslt=[ " ".join(tup) for tup in re.findall(r"(\w+)\W+(?=(\w+))",line) ]
  

 \w+   one or more word characters; 

 (\w+) we capture the matched pattern;    

 \W+   one or more non-word characters;  

 (?=(\w+))  look ahead as (?=...), but don't step forward, however capture the next word. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11113075)
 This regex looks for groups of alphanumerics, followed optionally by any number of other characters and then again by itself. Then it iterates over this list with duplicates removed and gives you these groups of characters and the number of their occurence: 

  import re

s = "eg,abcgdfabc"
for word in set(re.findall(r'(\w+)(\w*?\1)+', s)):
    print word, s.count(word)
  

  

  abc 2
  

 However, if we don't know exactly what a word is, then it will find just one repeating word in the following string, although there is another candidate: 

  abcdeabcecd
abc  abc    <- this will be found
  cd     cd <- this won't be found
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25474972)
 I know you were after a regular expression but you could use a simple loop to achieve the same thing: 

  def max_repeats(s, max=2):
  last = ''
  out = []
  for word in s.split():
    same = 0 if word != last else same + 1
    if same < max: out.append(word)
    last = word
  return ' '.join(out)
  

 As a bonus, I have allowed a different maximum number of repeats to be specified (the default is 2). If there is more than one space between each word, it will be lost. It's up to you whether you consider that to be a bug or a feature :) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30271570)
 If you're wanting to match non-whitespace with consecutive characters, one could do: 

  >>> import re
>>> text = 'I am sooo hungryyyy....Grrrh ...... helppp meeeeee'
>>> matches = re.findall(r'(\S*?(.)\2+\S*?)', text)
>>> [x[0] for x in matches]
['sooo', 'hungryyyy', '....', 'Grrr', '......', 'helppp', 'meeeeee']
  

 
   That means, if a letter is repeating simultaneously or next to each other at least 2 times ... 
 

 However, if you're looking for word characters, your pattern would simply change: 

  >>> matches = re.findall(r'(\w*(\w)\2\w*)', text)
>>> [x[0] for x in matches]
['sooo', 'hungryyyy', 'Grrrh', 'helppp', 'meeeeee']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16953710)
 You can use grouping for repeating structure as given below: 

  compiled = re.compile('(?:(([A-Z][a-z0-9]{2,})\s*){2,})')
for line in data:
    match = compiled.search(line)
    if match:
       print match.group()
    else:
       print None
  

 Output: 

  None
Surya Soft
Ery Wulandari
Link Building Partner 
  



