Query: Counting values in dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31904105)
 You just need to use your  vals  dict and keep keys from  aDict  with values that have a  count == 1  in vals then calling sorted to get a sorted output list: 

  def existsOnce3(aDict):  
    vals = {}
    # create dict to sum all value counts
    for i in aDict.values():
        vals.setdefault(i,0)
        vals[i] += 1   
    # use each v/val from aDict as the key to vals
    # keeping each k/key from aDict if the count is 1
    return sorted(k for k, v in aDict.items() if vals[v] == 1)
  

 Using a collections.Counter dict to do the counting just call Counter on your values then apply the same logic, just keep each k that has a v count == 1 from the Counter dict: 

  from collections import Counter
cn = Counter(aDict.values())
print(sorted(k for k,v in aDict.items() if cn[v] == 1))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50194893)
 You need to iterate the values of your dictionary. Currently, you iterate the keys in the dictionary, without ever accessing values. 

 Note that  for i in fav_color  is an idiomatic way of iterating keys in Python. 

 The Pythonic way to iterate values is to use  dict.values : 

  def use_favcolors(fav_color):
    count = 0
    for color in fav_color.values():
        if color == 'green':
            count += 1
    print count
  

 Another way you can implement your logic is to use  sum  with a generator expression. This works because  True == 1 , since Boolean is a subclass of  int . 

  d = {"John": "green", "Bobby": "blue", "PapaSanta": "yellow"}

res = sum(i=='green' for i in d.values())  # 1
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16407756)
 No need of using counter. You can achieve in this way: 

  # input dictionary
d=[{"abc":"movies"}, {"abc": "sports"}, {"abc": "music"}, {"xyz": "music"}, {"pqr":"music"}, {"pqr":"movies"},{"pqr":"sports"}, {"pqr":"news"}, {"pqr":"sports"}]

# fetch keys
b=[j[0] for i in d for j in i.items()]

# print output
for k in list(set(b)):
    print "{0}: {1}".format(k, b.count(k))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32299040)
 You can use https://docs.python.org/2/library/collections.html#collections.Counter. 

  from collections import Counter

d = {'brown dogs':3, 'dog of white':4, 'white cats':1, 'white cat':9}
substrings = ['dog', 'cat']

counter = Counter()

for substring in substrings:
    for key in d:
        if substring in key:
            counter[substring] += d[key]

print(counter.items())
  

  Output:  

  [('dog', 7), ('cat', 10)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34846292)
 You can pass a generator to  sum() : 

  total = sum(len(item) for item in mydict.itervalues())
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44652226)
 You could simply use a  sum  with a conditional generator expression: 

  >>> sum(1 for val in dict1.values() if 0.0013 < float(val) < 0.0026)
1
  

 If you want to use "normal"  for -loops you could also use: 

  sum_ = 0
for val in dict1.values():
    if 0.0013 < float(val) < 0.0026:
        sum_ += 1
  

 Depending on your understanding of "between" you need to change the  <  to  <= . 



