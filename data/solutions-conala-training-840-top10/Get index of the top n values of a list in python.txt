Query: Get index of the top n values of a list in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13070505)
  sted(range(len(a)), key=lambda i: a[i])[-2:]
  

  

  sted(range(len(a)), key=lambda i: a[i], reverse=True)[:2]
  

  

  zip(*sted(enumerate(a), key=operat.itemgetter(1)))[0][-2:]
  

  (f long lists) 

  zip(*heapq.nlargest(2, enumerate(a), key=operat.itemgetter(1)))[0]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38835860)
 Just a numpy alternative: 

  import numpy as np

top_2_idx = np.argsort(a)[-2:]
top_2_values = [a[i] for i in top_2_idx]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34519006)
 You can use a dictionary comprehension to generate the  largest_n  values in each row of the dataframe.  I transposed the dataframe and then applied  nlargest  to each of the columns.  I used  .index.tolist()  to extract the desired  top_n  columns.  Finally, I transposed this result to get the dataframe back into the desired shape. 

  top_n = 2
>>> pd.DataFrame({n: df.T[col].nlargest(top_n).index.tolist() 
                  for n, col in enumerate(df.T)}).T
   0  1
0  B  C
1  A  D
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22076461)
 You can apply  heapq.nlargest  on  enumerate(list) " 

  >>> import heapq
>>> data = heapq.nlargest(2, enumerate(my_list), key=lambda x:x[1])
>>> indices, vals = zip(*data)
>>> indices
(1, 4)
>>> vals
(8, 8)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47547606)
 You can use if  s  is your series :   

  s.reset_index().apply(tuple,1) 

0    (0.0, 21.0, 1.0)
1    (0.0, 22.0, 1.0)
2    (0.0, 23.0, 1.0)
3    (0.0, 24.0, 1.0)
4    (0.0, 26.0, 1.0)
5    (0.0, 27.0, 1.0)
6    (0.0, 28.0, 1.0)
dtype: object
  

 If you want the output to be a list then add  .tolist()  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42534615)
  >>> def foo(x):
...     r = []
...     for p in zip(list(x.index), list(x)):
...             r.extend(p)
...     return r
... 
>>> pd.DataFrame({n: foo(df.T[row].nlargest(k)) for n, row in enumerate(df.T)}).T
   0  1  2  3  4  5
0  A  7  C  5  B  2
1  A  3  B  3  C  1
2  C  6  B  2  D  1
3  D  9  B  6  A  3
  

 Or, using list comprehension: 

  >>> def foo(x):
...     return [j for i in zip(list(x.index), list(x)) for j in i]
... 
>>> pd.DataFrame({n: foo(df.T[row].nlargest(k)) for n, row in enumerate(df.T)}).T
   0  1  2  3  4  5
0  A  7  C  5  B  2
1  A  3  B  3  C  1
2  C  6  B  2  D  1
3  D  9  B  6  A  3
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41303632)
 Maybe this is what you are looking for 

  df.groupby(level=0, group_keys=False).apply(lambda x: x.sort_values(ascending=False).head(3))

i0  i1
A   1     0.720324
    0     0.417022
    3     0.302333
B   9     0.538817
    8     0.396767
    7     0.345561
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41303646)
  

  (df.sort_values('val', ascending=False).groupby(level=0).head(3)
   .sort_index(level = 0, sort_remaining=False, kind="mergesort"))
  

 https://i.stack.imgur.com/SvWXq.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13783132)
 Numpy includes an http://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html function which will return all the indices. If I understand your requirement correctly, you should be able to do: 

  minidx = []
for cluster in sumErrors:
    minidx.append(np.argsort(cluster)[:3])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/26883880)
 I figured out the first part: 

  npa = df.as_matrix()   
cols,indx = np.where(npa == np.amax(npa))
([df.columns[c] for c in cols],[df.index[c] for c in indx]) 
  

 Now I need a way to get the top n. One naive idea is to copy the array, and iteratively replace the top values with  NaN  grabbing index as you go. Seems inefficient. Is there a better way to get the top n values of a numpy array? Fortunately, as shown https://stackoverflow.com/a/23734295/695804 there is, through  argpartition , but we have to use flattened indexing. 

  def topn(df,n):
    npa = df.as_matrix()   
    topn_ind = np.argpartition(npa,-n,None)[-n:] #flatend ind, unsorted
    topn_ind = topn_ind[np.argsort(npa.flat[topn_ind])][::-1] #arg sort in descending order
    cols,indx = np.unravel_index(topn_ind,npa.shape,'F') #unflatten, using column-major ordering
    return ([df.columns[c] for c in cols],[df.index[i] for i in indx]) 
  

 Trying this on the example:  

  >>>df = pd.DataFrame([[1,2,3],[4,9,5],[6,7,8]],columns=list('abc'),index=list('def'))
>>>topn(df,3)
(['b', 'c', 'b'], ['e', 'f', 'f'])
  

 . Mind you the sorting was not originally asked for, but provides little overhead if  n  is not large. 



