Query: Execute a file with arguments in Python shell
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5788946)
  execfile  runs a Python file, but by loading it, not as a script. You can only pass in variable bindings, not arguments. 

 If you want to run a program from within Python, use http://docs.python.org/library/subprocess.html#subprocess.call. E.g. 

  subprocess.call(['./abc.py', arg1, arg2])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47948805)
 If you set  PYTHONINSPECT  in the python file you want to execute 

 [repl.py] 

  import os
import sys
from time import time 
os.environ['PYTHONINSPECT'] = 'True'
t=time()
argv=sys.argv[1:len(sys.argv)]
  

 there is no need to use  execfile , and you can directly run the file with arguments as usual in the shell: 

  python repl.py one two 3
>>> t
1513989378.880822
>>> argv
['one', 'two', '3']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5788922)
 You can't pass command line arguments with  execfile() . Look at http://docs.python.org/library/subprocess.html instead. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29748212)
 You need to tell subprocess to execute the line as full command including arguments, not just one program. 

 This is done by passing shell=True to call 

   import subprocess
 cmd = "ls " + "/tmp/ " * 30
 subprocess.call(cmd, shell=True)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51446699)
 DO NOT USE  ell=True .</h3>

  data_config = yaml.load(config_file)
for dataset, config in data_config.items():
    cmd = ['./execute_something.', str(config)]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()
  

 

 When you run  ell=True , you're prepending   -c  to your literal argument list. What that does in this case is the following (escaping is added to make the single quotes literal): 

   -c './execute_something.' '{'"'"'sql'"'"': "select * from dbname.tableName where sampleDate>='"'"'2018-07-20'"'"';", config: {'"'"'hosts'"'"': [!!python/tuple ['"'"'190.160.0.10'"'"', 3002]]}}'
  

 That doesn't work. Try it manually in a ell, if you like.  Why ? Because the argument starting with the  {  isn't passed to  ./execute_something. , but is instead passed to  the ell executing   -c  . 

 What  would  work, if you really insisted on keeping  ell=True ? Compare to the following: 

   -c './execute_something. "$@"' _ '{'"'"'sql'"'"': "select * from dbname.tableName where sampleDate>='"'"'2018-07-20'"'"';", config: {'"'"'hosts'"'"': [!!python/tuple ['"'"'190.160.0.10'"'"', 3002]]}}'
  

 Here, the argument just after the  -c  is a ell script that looks at its arguments, and passes those arguments on to  execute_something. . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17880895)
 When using  shell=True , pass a string, not a list to  subprocess.call : 

  subprocess.call('cp -r ./testdir1/* ./testdir2/', shell=True)
  

 http://docs.python.org/2/library/subprocess.html#subprocess.Popen: 

 
   On Unix with shell=True, the shell defaults to /bin/sh. If args is a
  string, the string specifies the command to execute through the shell.
  This means that the string must be formatted exactly as it would be
  when typed at the shell prompt. This includes, for example, quoting or
  backslash escaping filenames with spaces in them. If args is a
  sequence, the first item specifies the command string, and any
  additional items will be treated as additional arguments to the shell
  itself. 
 

 So (on Unix), when a list is passed to  subprocess.Popen  (or  subprocess.call ), the first element of the list is interpreted as the command, all the other elements in the list are interpreted as arguments for the  shell . Since in your case you do not need to pass arguments to the shell, you can just pass a string as the first argument. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26016718)
 Use  subprocess : 

  subprocess.call(["C:\SEGGER\JLink_V490d\JLink.exe", 
                 "-CommanderScript", "D:\Files\CommandFile.jlink"])
  

 You can also use  shell=True  to just execute a command directly in a shell (what you were trying to do with  os.system ), but this is not recommended because it's a security hazard. 

 More info here:
https://docs.python.org/2/library/subprocess.html 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33259769)
 For more interesting scenarios, you could also look at the  runpy  module. Since python 2.7, it has the  run_path  function. E.g: 

  import runpy
import sys

# argv[0] will be replaced by runpy
# You could also skip this if you get sys.argv populated
# via other means
sys.argv = ['', 'arg1' 'arg2']
runpy.run_path('./abc.py', run_name='__main__')
  



