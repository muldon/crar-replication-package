Query: express binary literals
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13107)
 For reference&mdash; future  Python possibilities: 
Starting with Python 2.6 you can express binary literals using the prefix  0b  or  0B : 

  >>> 0b101111
47
  

 You can also use the new  bin  function to get the binary representation of a number: 

  >>> bin(173)
'0b10101101'
  

 Development version of the documentation: http://docs.python.org/dev/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37955839)
 0 in the start here specifies that the base is 8 (not 10), which is pretty easy to see:  

  >>> int('010101', 0)
4161
  

 If you don't start with a 0, then python assumes the number is base 10. 

  >>> int('10101', 0)
10101
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37226387)
 
   How do you express binary literals in Python? 
 

 They're not "binary" literals, but rather, "integer literals". You can express integer literals with a binary format with a  0  followed by a  B  or  b  followed by a series of zeros and ones, for example: 

  >>> 0b0010101010
170
>>> 0B010101
21
  

 From the Python 3 https://docs.python.org/3/reference/lexical_analysis.html#integer-literals, these are the ways of providing integer literals in Python: 

 
   Integer literals are described by the following lexical definitions: 

  integer      ::=  decinteger | bininteger | octinteger | hexinteger
decinteger   ::=  nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*
bininteger   ::=  "0" ("b" | "B") (["_"] bindigit)+
octinteger   ::=  "0" ("o" | "O") (["_"] octdigit)+
hexinteger   ::=  "0" ("x" | "X") (["_"] hexdigit)+
nonzerodigit ::=  "1"..."9"
digit        ::=  "0"..."9"
bindigit     ::=  "0" | "1"
octdigit     ::=  "0"..."7"
hexdigit     ::=  digit | "a"..."f" | "A"..."F"
  
  
   There is no limit for the length of integer literals apart from what
  can be stored in available memory. 
  
   Note that leading zeros in a non-zero decimal number are not allowed.
  This is for disambiguation with C-style octal literals, which Python
  used before version 3.0. 
  
   Some examples of integer literals: 

  7     2147483647                        0o177    0b100110111
3     79228162514264337593543950336     0o377    0xdeadbeef
      100_000_000_000                   0b_1110_0101
  
  
    Changed in version 3.6:  Underscores are now allowed for grouping purposes in literals. 
 

 Other ways of expressing binary: 

 You can have the zeros and ones in a string object which can be manipulated (although you should probably just do bitwise operations on the integer in most cases) - just pass int the string of zeros and ones and the base you are converting from (2): 

  >>> int('010101', 2)
21
  

 You can optionally have the  0b  or  0B  prefix: 

  >>> int('0b0010101010', 2)
170
  

 If you pass it  0  as the base, it will assume base 10 if the string doesn't specify with a prefix: 

  >>> int('10101', 0)
10101
>>> int('0b10101', 0)
21
  

 Converting from int back to human readable binary: 

 You can pass an integer to bin to see the string representation of a binary literal: 

  >>> bin(21)
'0b10101'
  

 And you can combine  bin  and  int  to go back and forth: 

  >>> bin(int('010101', 2))
'0b10101'
  

 You can use a format specification as well, if you want to have minimum width with preceding zeros: 

  >>> format(int('010101', 2), '{fill}{width}b'.format(width=10, fill=0))
'0000010101'
>>> format(int('010101', 2), '010b')
'0000010101'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10569220)
 You represent negative binary literals with a negative sign, like this: 

  >>> -0b1010111
-87
  

 Python's integers are not fixed width, so there is no "two's complement" as such. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54121293)
 It's to not confuse binary literals with variables. 

 You can express numbers as literals in whatever base (0b -> binary, 0x -> hexadecimal for instance): 

  0b100
>>>4

0x100
>>>256
  

 The problem arises when there isn't a leading 0. Python's naming convention for variables is that it must start with an alphabetical character. With the leading 0 the interpreter can tell if it's a literal or a variable. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53821705)
 The integer literals defined in the list  A  are specified in decimals. You should specify them as binary literals (prefixed with  0b ) instead: 

  A = [0b100011, 0b1110110]
print('{0:08b}'.format(A[0]))
print('{0:08b}'.format(A[1]))
  

 This outputs: 

  00100011
01110110
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5305804)
 Binary literals are just normal python integers. 

  >>> 0b100
<<< 4

>>> 4
<<< 4
  

 Just convert to a string and base64 encode it (giving you a string that is the base64 representation of '4'). There is nothing wrong with this approach, it's lossless and simple. 

  >>> s = str(0b100).encode('base64')

>>> int(s.decode('base64'))
<<< 4
  

 If you want, you can use bin to convert the int into a binary string: 

  >>> bin(int(s.decode('base64')))
<<< '0b100'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8680015)
 by default python 3.2 works with unicode strings so the  u  is no longer needed. 

 If you want to encode and decode strings you should use: 

  encoded = "unicodestring".encode("UTF8")

decoded = s.decode("UTF8")
  

 The http://docs.python.org/release/3.0.1/whatsnew/3.0.html states that: 

 
   Python 3.0 uses the concepts of text and (binary) data instead of Unicode strings and 8-bit strings. All text is Unicode; however encoded Unicode is represented as binary data. The type used to hold text is str 
 

 and 

 
   You can no longer use u"..." literals for Unicode text. However, you must use b"..." literals for binary data. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38813448)
  print 0b10  gives 2.  

 This is because all the numbers are stored in python as binary. 

  bin(2)  is a string. So it gives you the binary value. 

 You can use  print int('0b10', 2) . Here 2 means the base and '0b10' is the binary you want to convert.  0b  part of  0b10  is not mandatory since  int()  already knows it converts it to base 2. https://docs.python.org/2/library/functions.html#int says, 

 
   The default base is 10. The allowed values are 0 and 2-36. Base-2, -8,
  and -16 literals can be optionally prefixed with 0b/0B, 0o/0O/0, or
  0x/0X, as with integer literals in code. 
 



