Query: How do I sort a Python list of time values?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17714065)
 Just  sorted(time_list)  works fine. 

  >>> sorted(["14:10:01", "03:12:08"])
["03:12:08", "14:10:01"]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17713924)
  sorted([tuple(map(int, d.split(":"))) for d in my_time_list])
  

 Where each element in my_time_list is of the form you describe, for example: 

  >>> my_time_list
["03:12:08", "14:10:01"]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45244603)
 You could store the indices of keys in a dictionary and use those in the https://docs.python.org/3.6/library/functions.html#sorted. This would work in  O(n log(n))  time: 

  >>> keys = {next(iter(v)): i for i, v in enumerate(B)}
>>> keys
{'a': 0, 'e': 1, 'b': 2, 'g': 3, 'f': 4}    
>>> A.sort(key=lambda x: keys[next(iter(x))])
>>> A
[{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18062773)
 That's because a  nan  can't be compared to any other object(not even itself). 

  >>> x = float('nan')
>>> y = x
>>> y == x
False
  

 Use http://www.numpy.org/%E2%80%8E to handle  nan 's properly: 

  >>> import numpy as np
>>> arr = np.array(nums)
>>> np.sort(arr)
array([ -2.21811678,  -1.21267325,  -0.86687994,  -0.2547844 ,
        -0.22789423,   1.08500491,   2.08031765,   2.69325878,
         3.69758305,   3.96653228,   5.24420617,   8.15331554,
         8.9626842 ,  11.45049264,  14.68055076,  15.31343884,
        15.96803038,  23.16207611,          nan,          nan,
                nan,          nan,          nan,          nan])
>>> np.nanmax(arr)
23.162076113600001
>>> np.nanmin(arr)
-2.2181167802099999
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6864072)
 This returns a new object: 

  >>> import operator
>>> sorted(my_list, key=operator.itemgetter(2), reverse=True)
  

  

  >>> import operator
>>> mylist.sort(key=operator.itemgetter(2), reverse=True)
  

 If you want to sort by two values; assuming tuples are like (name, birthday, time); 

  >>> mylist.sort(key=operator.itemgetter(1, 2), reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53797868)
 The key insight here is that the values in your list are actually strings, and strings are compared lexically: each character in the string is compared one at a time until the first non-matching character. So "aa" sorts before "ab", but that also means that "a1000" sorts before "a2". If you want to sort in a different way, you need to tell the  sort  method (or the  sorted  function) what it is you want to sort by. 

 In this case, you probably should use the  decimal  module. And you want the  key  attribute of the  sort  method. This will sort the existing list you have, only using the converted values during the sorting process. 

  import decimal

def extract_sortable_value(value):
    # value is a list, so take the first element
    first_value = value[0]
    return decimal.Decimal(first_value.lstrip('$'))

numbers.sort(key=extract_sortable_value)
  

  

  print(sorted(numbers, key=extract_sortable_value))
  

 Demo: https://repl.it/repls/MiserableDarkPatches 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43398551)
 In this particular case, if you don't care about how the points with equal  x, y  value are arranged, just calling  sort  will do the job. Tuples are sorted in lexicographic order.  

  correctC.sort()
  

 If you want to be more explicit, just do as the other answer tells: 

  correctC.sort(key=lambda t: (t[0], t[1]))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14337869)
 Use the  key  parameter to  list.sort()  or the  sorted()  function to provide a value to sort on. 

  values.sort(key=somefunction)
  

 where  somefunction  takes one argument (the value to be transformed). 

 The list will then be sorted based on the return value of the  key  parameter, but the original values are themselves left untouched. 

 For your problem, you can then use: 

  def daytime(val):
    hour, min = map(int, val.split(':'))
    if hour < 8:
        hour += 12
    return hour, min
  

 which would transform  8:01  to  (8, 1)  and  6:25  to  (18, 25) , causing  .sort()  or  sorted()  to sort  8:01  before  6:25 : 

  >>> sorted(['1:14', '8:01', '12:46', '6:25'], key=daytime)
['8:01', '12:46', '1:14', '6:25']
  

 See the http://wiki.python.org/moin/howto/sorting for more details and tips (use this http://webcache.googleusercontent.com/search?q=cache%3awiki.python.org/moin/HowTo/Sorting/&hl=en&tbo=d&gl=no&strip=1 until  wiki.python.org  has recovered from the recent http://mail.python.org/pipermail/python-dev/2013-January/123499.html). 



