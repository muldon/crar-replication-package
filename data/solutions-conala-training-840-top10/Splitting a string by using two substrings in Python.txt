Query: Splitting a string by using two substrings in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28731122)
 Since you're gonna need to get the substrings for two different strings (your  string1  and  string2 ), I'd move that slicing into a very simple function: 

  def substring(string):
   return [ string[i:i+3] for i in range(len(string)) if i + 3 <= len(string) ]
  

 To compare and count, you can use the https://docs.python.org/2/tutorial/datastructures.html method and combine it with your recently created  substring  function: 

  string1 = 'abcdef'
string2 = 'abcijk'
[ (substr, substring(string2).count(substr)) for substr in substring(string1) ]
  

 Which outputs: 

  [('abc', 1), ('bcd', 0), ('cde', 0), ('def', 0)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3368993)
 Here is one way to do it 

  _,_,rest = s.partition(start)
result,_,_ = rest.partition(end)
print result
  

 Another way using regexp 

  impt re
print re.findall(re.escape(start)+"(.*)"+re.escape(end),s)[0]
  

  

  print re.search(re.escape(start)+"(.*)"+re.escape(end),s).group(1)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28731085)
 You should be able to just use slice notation in a for-loop: 

  for i in xrange(len(s1) - 2):
    c = s1[i:i+3]
    # do various operations here with c
  

 Alternatively collect them in a list comprehension: 

  list1 = [s1[i:i+3] for i in xrange(len(s1) - 2)]
n = 0
for c in list1:
    if c in s2:
        n += 1
print n
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12296102)
 Firstly these functions perform two different tasks: 

  '      foo    bar    '.split() is ['foo','bar']
#a list of substrings without any white space (Note the default is the look for whitespace - see below)
'      foo    bar    '.strip() is 'foo    bar'
#the string without the beginning and end whitespace
  

 . 

 When using  strip(' ')  only  spaces  at the beginning and end are removed, although very similar to  strip()  it's not quite the same, for example with tab  \t  which is whitespace but isn't a space: 

  '   \t   foo   bar  '. strip()    is 'foo   bar'
'   \t   foo   bar  '. strip(' ') is '\t   foo   bar'
  

 When using  split(' ')  it "splits" the string into a list against  each  space, compared to  split()  splitting the string into a list against  each  "whitespace". Consider  'foo  bar'  (with two spaces between foo and bar). 

  'foo  bar'.split()    is ['foo', 'bar']
#Two spaces count as only one "whitespace"
'foo  bar'.split(' ') is ['foo', '', 'bar']
#Two spaces split the list into THREE (seperating an empty string)
  

  The subtlety being that two spaces, or several spaces and tabs, are counted as " one  whitespace".  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12945297)
 There are two questions there. 

 The first,  How many substrings can you make out of a string like “abcd”?  is a combinations like this: 

  import itertools
s='abcd'
com=[list(itertools.combinations(s,x)) for x in range(1,len(s)+1)]

print [''.join(e) for e in sum(com,[])]
  

 prints: 

  ['a', 'b', 'c', 'd', 'ab', 'ac', 'ad', 'bc', 'bd', 'cd', 'abc', 'abd', 'acd', 'bcd', 'abcd']
  

  The second question is how to replicate your example (which is not a 'combination').  You can do that with this code: 

  >>> [s[i:i+j] for j in range(1,len(s)+1) for i in range(len(s)-j+1)]
['a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'abc', 'bcd', 'abcd']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20062596)
 The re module has re.DOTALL to indicate "." should also match newlines.  Normally "." . 

  re.search('Test(.*)print', testStr, re.DOTALL)
  

 Alternatively: 

  re.search('Test((?:.|\n)*)print', testStr)
# (?:…) is a non-matching group to apply *
  

 Example: 

  >>> testStr = "    Test to see\n\nThis one print\n "
>>> m = re.search('Test(.*)print', testStr, re.DOTALL)
>>> print m
<_sre.SRE_Match object at 0x1706300>
>>> m.group(1)
' to see\n\nThis one '
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27324565)
 You can simply use https://docs.python.org/3/library/functions.html#func-list: 

  >>> label = 'A1'
>>> list(label)
['A', '1']
>>>
  

  list  will iterate over the string and collect its characters into a new list. 

 Also, you cannot use  str.split  here because the method was designed to split on characters/substrings and remove them from the resulting list.  For example,  'a b c'.split()  would split on whitespace and remove those characters from the returned list, which is  ['a', 'b', 'c'] .  You however want to break the string up into individual characters while still keeping all of them. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38501144)
  re.sub('(<temp>.*?) on (.*?</temp>)', lambda x: x.group(1)+" <replace> "+x.group(2), string, flags=re.DOTALL)
  

 Output: 

  <temp>The sale happened <replace> February 22nd</temp>
  

  Edit:  

 Changed the regex based on suggestions by Wiktor and HolyDanna. 

 P.S: Wiktor's comment on the question provides a better solution. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20898362)
  There are really four questions embedded in your post.  

  1) How do you split text into words?  

 There are many ways to do this depending on what you count as a word, whether you care about case, whether contractions are allowed, etc.  A regular expression lets you implement your choice of word splitting rules.  The one I typically use is  r"[a-z'\-]+" .   The catches contractions like  don't  and allow hyphenated words like  mother-in-law . 

  2) What data structure can speed-up the search for common subsequences?  

 Create a location map showing for each word.  For example, in the sentence  you should do what you like  the mapping for for  you  is  {"you": [0, 4]}  because it appears twice, once at position zero and once at position four. 

 With a location map in hand, it is a simple matter to loop-over the starting points to compare n-length subsequences. 

  3) How do I find common n-length subsequences?  

 .  For each such word, find the places where it occurs in the other sequence (using the location map) and test whether the two n-length slices are equal. 

  4) How do I find the longest common subsequence?  

 The  max()  function finds a maximum value.  It takes a key-function such as  len()  to determine the basis for comparison. 

 Here is some working code that you can customize to your own interpretation of the problem: 

  import re

def to_words(text):
    'Break text into a list of lowercase words without punctuation'
    return re.findall(r"[a-z']+", text.lower())

def starting_points(wordlist):
    'Map each word to a list of indicies where the word appears'
    d = {}
    for i, word in enumerate(wordlist):
        d.setdefault(word, []).append(i)
    return d

def sequences_in_common(wordlist1, wordlist2, n=1):
    'Generate all n-length word groups shared by two word lists'
    starts = starting_points(wordlist2)
    for i, word in enumerate(wordlist1):
        seq1 = wordlist1[i: i+n]
        for j in starts.get(word, []):
            seq2 = wordlist2[j: j+n]
            if seq1 == seq2 and len(seq1) == n:
                yield ' '.join(seq1)

if __name__ == '__main__':

    t1 = "They all are white a sheet of spotless paper when they first are " \
         "born but they are to be scrawled upon and blotted by every goose quill"

    t2 = "You are all white, a sheet of lovely, spotless paper, when you first " \
         "are born; but you are to be scrawled and blotted by every goose's quill"

    w1 = to_words(t1)
    w2 = to_words(t2)

    for n in range(1,10):
        matches = list(sequences_in_common(w1, w2, n))
        if matches:
            print(n, '-->', max(matches, key=len))
  



