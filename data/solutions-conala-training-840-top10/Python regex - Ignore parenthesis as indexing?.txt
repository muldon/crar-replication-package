Query: Python regex - Ignore parenthesis as indexing?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11985790)
 Yes, add  ?:  to a group to make it non-capturing. 

  import re
print re.findall('(.(foo))', "Xfoo")   # [('Xfoo', 'foo')]
print re.findall('(.(?:foo))', "Xfoo") # ['Xfoo']
  

 See http://docs.python.org/library/re.html#regular-expression-syntax for more information. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/32147317)
 Widen the search to start the phrase with a parenthesis or comma+space, and end with a parenthesis or comma+space: 

  >>> re.findall(r'\s(?:\(|, )(.+)(?:\)|, )', s2)
['English, French']
  

 The  ?:  after a parenthesis indicates a non-capturing group. 

 You can then grab whichever language you're interested in with indexing. 

 Since the strings you're searching are actually pretty tidy, you can also do this without regex: 

  >>> s1.split('(')[1].split(')')[0].split(', ')[0]
'English'
>>> s2.split('(')[1].split(')')[0].split(', ')[0]
'English'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17194176)
 you can use this, that allow digits but not followed by a closing parenthesis: 

  re.findall(r'\d+\)\s(?:\D+|\d+(?!\d*\)))*',str)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53670322)
 You can use https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html. From the https://pandas.pydata.org/pandas-docs/stable/indexing.html: 

 
   .loc is primarily label based, but may also be used with a boolean array.  
 

 So you can use it for boolean indexing and combine both conditions with a  bitwise AND operator,  & . Note that the conditions must be separated by parenthesis. 

 Example  ID  and  date : 

  ID = 10
date = '02/01/2018'
  

 Indexing of the dataframe: 

  df.loc[(df.ID == ID) & (df.date == date), 'X']
1    4
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11971767)
 without  regex  solution: 

  >>> strs="Alex Jatt, (alex.jatt@domain.com)"
>>> strs.split(',')[1].strip().strip("()")
'alex.jatt@domain.com'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11971893)
 .. 

  a= ''.join(c for c in a if c not in '()')
  

 or with regex.. 

  In[20]: import re

In[21]: name= re.sub('[()]', '', a)

In [22]: name
Out[22]: 'Alex Jatt, alex.jatt@domain.com'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17113100)
 Try the following: 

  new_string = re.sub(r'\w[\w\t ]*\w|\w', "replace", original_string)
  

  \w  is equivalent to  [a-zA-Z0-9_] , so  [\w\t ]  will match word characters, tabs, and spaces.  So this regex means "match a word character, followed by any number of word characters or whitespace characters, followed by a word character, OR match a single word character".  This way you will match whitespace between words but not the whitespace before or after words. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29487283)
 As an alternative without using regex you can do the job just with  str.split()  and  str.strip()  methods : 

  >>> [i.strip('()') for i in temp2.split(')(')]
['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
  

 Or with regex you can use http://www.regular-expressions.info/lookaround.html in your regex : 

  >>> re.findall(r'(?<=\()(.*?)(?=\)\(|\)$)', temp2)
['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
  

  Note  that the logic is simple you just need to match the string that is between open parenthesis  (  and a close parenthesis that followed by an open bracket  )(  . 



