Query: Pandas (python): How to add column to dataframe for index?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23346511)
 Use http://pandas.pydata.org/pandas-docs/stable/groupby.html: 

  In [1]: import pandas

In [2]: df = pandas.DataFrame({"col1":["A", "A", "B"], "col2":[1,2,3]})

In [3]: df.groupby("col1").sum()
Out[3]: 
      col2
col1      
A        3
B        3

In [4]: df.groupby("col1").sum().reset_index()
Out[4]: 
  col1  col2
0    A     3
1    B     3

[2 rows x 2 columns]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12170403)
  

  df['new_col'] = range(1, len(df) + 1)
  

 Alternatively if you want the index to be the ranks and store the original index as a column: 

  df = df.reset_index()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12168857)
   

  from pandas import *
idx = Int64Index([171, 174, 173])
df = DataFrame(index = idx, data =([1,2,3]))
print df

gives me,

     0
171  1
174  2
173  3
  

 Is this what you are looking for? 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40132166)
 You can use first http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html, then http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html and last http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.add_suffix.html: 

  print (df.reset_index().pivot(index='y', columns='x', values='value').add_suffix('(x)'))
x      1(x)      2(x)      3(x)
y                              
0  0.016175  0.027594  0.035070
1  0.017832  0.029950  0.036329
2  0.021536  0.031890  0.037297
3  0.024777  0.033570  0.037983
  

 Last if need remove column names add http://pandas.pydata.org/pandas-docs/stable/whatsnew.html#changes-to-rename (new in  pandas   0.18.0 ): 

  print (df.reset_index()
         .pivot(index='y', columns='x', values='value')
         .add_suffix('(x)')
         .rename_axis(None, axis=1))
       1(x)      2(x)      3(x)
y                              
0  0.016175  0.027594  0.035070
1  0.017832  0.029950  0.036329
2  0.021536  0.031890  0.037297
3  0.024777  0.033570  0.037983
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41128576)
 I think you need http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_dict.html: 

  d = {'tom':100, 'jerry':150, 'micky':400, 'donald':250}

df = pd.DataFrame.from_dict(d, orient='index')
df.columns = ['scores']
print (df)
        scores
micky      400
donald     250
jerry      150
tom        100
  

 Another solution is add  dict  with new column name to  DataFrame  constructor: 

  df = pd.DataFrame({'scores':d})

print (df)
        scores
donald     250
jerry      150
micky      400
tom        100
  

 Last if need remove names from index add http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html: 

  print (df.reset_index(drop=True))
   scores
0     400
1     250
2     150
3     100
  

 Another solution is use only  values  of  dict , but python dictionaries are always unordered, so get random order of values in  df : 

  print (d.values())
dict_values([400, 250, 150, 100])

#python 3 add list
df = pd.DataFrame({'scores': list(d.values())})
print (df)
   scores
0     400
1     250
2     150
3     100
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19349005)
 I stumbled on this question while trying to do the same thing (I think). Here is how I did it: 

  df['index_col'] = df.index
  

 You can then sort on the new index column, if you like. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36438038)
 First concatenate your column to your dataframe. 

  df2 = pd.concat([df, pd.DataFrame(tmp)], axis=1)
  

 Then rename the columns to the desired end result. 

  df2.columns = [0, 1, 2, 3, 4, 6, 5]
  

 . 

  df2.sort_index(axis=1, inplace=True)

>>> df2
   0  1  2  3  4  5  6
0  6  7  4  5  2  2  1
1  0  3  1  3  3  3  4
2  9  8  4  3  6  5  2
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35033280)
 You can try importing  timedelta : 

  from datetime import datetime, timedelta
  

  

  segments_data['time'] = pd.DatetimeIndex(segments_data['time']) + timedelta(hours=5,minutes=30)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/46113191)
 If you have a dataframe like  

  import pandas as pd
df = pd.DataFrame(data={'X': [1.5, 6.777, 2.444, pd.np.NaN], 'Y': [1.111, pd.np.NaN, 8.77, pd.np.NaN], 'Z': [5.0, 2.333, 10, 6.6666]})
  

 Instead of iloc,you can use  .loc  with row index and column name like  df.loc[row_indexer,column_indexer]=value  

  df.loc[[0,3],'Z'] = 3
  

 Output: 

 
       X      Y       Z
0  1.500  1.111   3.000
1  6.777    NaN   2.333
2  2.444  8.770  10.000
3    NaN    NaN   3.000
 



