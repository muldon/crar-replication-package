Query: Use of findall and parenthesis in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29684547)
 If you want to match the number within parenthesis you can use the following regex : 

  \((\d+).*\)
  

  Note  that you need to escape the parenthesis and use capture grouping for your digit combination ( \d+ ),also  Note  that  re.match  https://docs.python.org/2/library/re.html#search-vs-match,instead you need to use  re.search  : 

  >>> re.search(r'\((\d+).*\)',test_string).group(1)
'456' 
  

 And if you want to find all numbers you can use  re.findall  : 

  >>> re.findall(r'\d+',test_string)
['123', '456']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36633040)
 You can use  re.findall()  to find all numbers within the parenthesis: 

  >>> import re
>>> l = [
...     "PIC S9(02)V9(05).",
...     "PIC S9(04).",
...     "PIC S9(03).",
...     "PIC S9(03)V9(03).",
...     "PIC S9(02)V9(03).",
...     "PIC S9(04).",
...     "PIC S9(13)V9(03)."
... ]
>>> pattern = re.compile(r"\((\d+)\)")
>>> for item in l:
...     print(pattern.findall(item))
... 
['02', '05']
['04']
['03']
['03', '03']
['02', '03']
['04']
['13', '03']
  

 where  \(  and  \)  would match the literal parenthesis (needed to be escaped with a backslash because of the special meaning they have).  (\d+)  is a https://docs.python.org/2/howto/regex.html#grouping that would match one or more digits. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11369405)
 If you just want the contents of the inner parentheses, you can use  re.findall()  with the following regular expression: 

  \(([^()]*)\)
  

 For example: 

  >>> import re
>>> s = 'W:1.0,X:1.1(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5,(F:0.6,G:0.7)H:0.8)Y:0.9'
>>> re.findall(r'\(([^()]*)\)', s)
['C:0.3,D:0.4', 'F:0.6,G:0.7']
  

  

  \(        # literal '('
(         # start capturing group
  [^()]*    # any characters except '(' and ')', any number
)         # end capturing group
\)        # literal ')'
  

  re.findall()  returns the contents of the capturing group for each match. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38620749)
 You can use  re.findall  to find out all single character optionally followed by a pair of parenthesis: 

  import re
s = "F(230,24)F[f(22)_(23);(2)%[+(45)FF]]"
re.findall("[^()](?", s)

['F(230,24)',
 'F',
 '[',
 'f(22)',
 '_(23)',
 ';(2)',
 '%',
 '[',
 '+(45)',
 'F',
 'F',
 ']',
 ']']
  

 
  [^()]  match a single character except for parenthesis; 
  (?  denotes a non-capture group( ?: ) enclosed by a pair of parenthesis and use  ?  to make the group optional; 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27260746)
 findall looks like your friend here.  Don't you just want: 

  re.findall(r'\(.*?\)',readstream)
  

 returns: 

  ['(W)',
 '(indo)',
 '(ws )',
 '(XP)',
 '(, )',
 '(with )',
 '(the )',
 '(fragment )',
 '(enlar)',
 '(ged )',
 '(for )',
 '(clarity )',
 '(on )',
 '(Fig. )']
  

  Edit :
as @vikramis showed, to remove the parens, use:  re.findall(r'\((. .  Also, note that it is common (but not requested here) to trim trailing whitespace with something like: 

  re.findall(r'\((. *
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12868578)
  m = re.search("The weather is (\d+) degrees with a humidity of (\d+)%", str)
matched = m.groups()
  

 you need to wrap what you want in parenthesis ... 

  >>> s1 = "The weather is 75 degrees with a humidity of 13%"
>>> m = re.search("The weather is (\d+) degrees with a humidity of (\d+)%", s1)
>>> m.groups()
('75', '13')
  

 or just use  findall  to just get the numbers out of any string 

  >>> re.findall("\d+",s1)
['75', '13']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13840909)
 If there are any capturing groups in the regular expression then http://docs.python.org/2/library/re.html#re.findall returns only the values captured by the groups. If there are no groups the entire matched string is returned. 

 
    re.findall(pattern, string, flags=0)  
  
   Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found.  If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group.  Empty matches are included in the result unless they touch the beginning of another match. 
 

 

 
   How to write the regexp directly such that it returns ['X', 'B', 'D'] ? 
 

 Instead of using a capturing group you can use a non-capturing group: 

  >>> re.findall(r"(?:^|\+)([A-Z])", formula)
['X', 'B', 'D']
  

 Or for this specific case you could try a simpler solution using a word boundary: 

  >>> re.findall(r"\b[A-Z]", formula)
['X', 'B', 'D']
  

 Or a solution using  str.split  that doesn't use regular expressions: 

  >>> [s[0] for s in formula.split('+')]
['X', 'B', 'D']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11985790)
 Yes, add  ?:  to a group to make it non-capturing. 

  import re
print re.findall('(.(foo))', "Xfoo")   # [('Xfoo', 'foo')]
print re.findall('(.(?:foo))', "Xfoo") # ['Xfoo']
  

 See http://docs.python.org/library/re.html#regular-expression-syntax for more information. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25440191)
 You can say that the external parenthesis are verbatim parenthesis chars to be matched 

  >>> print re.findall(r'\((\d+)\)', s)
['12', '23', '34']
>>>
  

 If instead you're talking about matching an expression only if it's inside a balanced set of parenthesis then I've bad news for you: the regular expression language is not powerful enough for that (because that kind of grammar is not "regular"). It's not a Python implementation problem... it's a problem that cannot be solved even in theory with regexps (in other words it's not that we don't know how to solve it... we know that it cannot be solved). 

 You need to write explicit Python code to parse arbitrarily nested grammars (if you care about the nesting level). Regular expressions are DFSAs not able to "count" the levels; that requires memory and at least a PDA. 



