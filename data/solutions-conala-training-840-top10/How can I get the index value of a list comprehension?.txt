Query: How can I get the index value of a list comprehension?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30226468)
 Use the value  y  to compare not the index  x : 

  list_of_tuples = [('a', 1), ('a', 2), ('a', 3)]
index_list = [x for x, y in enumerate(list_of_tuples) if y[0] == 'a']
  

 Now  index_list  is  [0, 1, 2] . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19370566)
  r  is a sequence,  a  is a starting index, and  b  is an ending index.  The list comprehension will give a list of  (index, r[index])  tuples where  a <= index < b .  The  max()  call will then return the tuple with the largest value (second item in the tuple). 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37047760)
 You can use a list comprehension to implement this: 

  >>> values = d.values()
>>> sorted_values = sorted(values)
>>> [sorted_values.index(item) for item in values]
[0, 3, 2, 4, 1]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53500072)
 use  in  but in the sublists, not in the global list of lists. Combined with  enumerate  to get the index of the matching list(s) 

  p = [['a','b','c'],['x','y','z']]

idx = [i for i,sublist in enumerate(p) if 'a' in sublist]
  

 that gives you a list of indexes. Here we have only one element: 

  >>> idx
[0]
  

 You can use the same technique to compute the index of  a  in the sublist BTW (with  idx = [i for i,sublist in enumerate(p) if 'a' in sublist] ) 

 To get a sole value or  None , just iterate once on a generator comprehension: 

  idx = next((i for i,sublist in enumerate(p) if 'a' in sublist),None)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46030072)
 IIUC, you can use  df.get_value  in a list comprehension. 

  vals = [a.get_value(*x) for x in referencingDf.reset_index().values]
# a simplification would be [ ... for x in enumerate(referencingDf[0])] - DYZ
print(vals) 
[3, 6, 8]
  

 . 

  df = pd.DataFrame(vals)
print(df)

   0
0  3
1  6
2  8
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2748241)
 http://docs.python.org/library/functions.html#enumerate returns an iterator that yields a tuple of the current index of the iterable as well as the item itself. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34687581)
 Use a list comprehension: 

  [nonzero(abs(x-a)<0.5) for x in b]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35036991)
 Assuming the value appears once in each sublist, you could use the following function, which makes use of the built in  enumerate  function and a list comprehension: 

  my_list = [[1, 3, 4], [3, 6, 7], [8, 0, -1, 3]]

def func(my_list, x):
    return [[idx, sublist.index(x)] for idx, sublist in enumerate(my_list)]

answer = func(my_list, 3)
print(answer)
  

  Output  

  [[0, 1], [1, 0], [2, 3]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47716964)
 You have multiple  3 s in your list. The implementation of  index  is such that it finds only the index of the first occurrence of the value passed to it. Instead, use  enumerate : 

  li = [3,1,2,3]
l1 = [x+99 if i!=li.index(max(li)) else x-(99*(len(li)-1)) for i, x in enumerate(li)]
  

 Output: 

  [-294, 100, 101, 102]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/39832887)
 To keep track of everything using a dictionary, one can do this:  

 Use  enumerate  in your dictionary comprehension to have index and value in your iteration, and then assign value as key, and index as value.  

  import random

l = [5, 3, 2, 0, 8, 7, 9, 6, 4, 1]
d = {v: i for i, v in enumerate(l)}
print(d) # current state
random.shuffle(l)
  

 The advantage here is that you get  O(1)  lookup for retrieving your index for whatever value you are looking up.  

 However, if your list will contain duplicates, https://stackoverflow.com/a/39832854/1832539 answer from Kevin should be referred to. 



