Query: Iterating over dictionaries using for loops
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41651174)
 You can use this: 

  for key,val in d.items():
    print key, 'is the key for ', val
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3294897)
 When you iterate through dictionaries usg the  for ..  .. -syntax, it always iterates over the keys (the values are accessible usg  dictionary[key] ). 

 To iterate over key-value pairs, use  for k,v  s.iteritems() .  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3295279)
  key  is simply a variable. 

 For  Python2.X : 

  d = {'x': 1, 'y': 2, 'z': 3} 
for my_var in d:
    print my_var, 'corresponds to', d[my_var]
  

 ...  

  d = {'x': 1, 'y': 2, 'z': 3} 
for the_key, the_value in d.iteritems():
    print the_key, 'corresponds to', the_value
  

 For  Python3.X : 

  d = {'x': 1, 'y': 2, 'z': 3} 
for the_key, the_value in d.items():
    print(the_key, 'corresponds to', the_value)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45863994)
 if you are using Python 3.6 

  from collections import defaultdict

for k, v in d.items():
    print(f'{k} - {v}')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3295662)
 Iterating over a  dict  iterates through its keys in no particular order, as you can see here:  

 Edit: (This is  no longer the case in https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6 , but note that it's  not guaranteed  behaviour yet) 

  >>> d = {'x': 1, 'y': 2, 'z': 3} 
>>> list(d)
['y', 'x', 'z']
>>> d.keys()
['y', 'x', 'z']
  

 For your example, it is a better idea to use  dict.items() : 

  >>> d.items()
[('y', 2), ('x', 1), ('z', 3)]
  

 This gives you a list of tuples. When you loop over them like this, each tuple is unpacked into  k  and  v  automatically: 

  for k,v in d.items():
    print(k, 'corresponds to', v)
  

 Using  k  and  v  as variable names when looping over a  dict  is quite common if the body of the loop is only a few lines. For more complicated loops it may be a  good idea to use more descriptive names: 

  for letter, number in d.items():
    print(letter, 'corresponds to', number)
  

 It's a good idea to get into the habit of using format strings: 

  for letter, number in d.items():
    print('{0} corresponds to {1}'.format(letter, number))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54054775)
 whatever, today, both python 2.6 and 2.7, as well as 3.x, in my box work well with  items() : 

  z = {0: 'a', 1: 'b'}
for k, v in z.items(): print(v, k)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/44666083)
 
   Iterating over dictionaries using 'for' loops 

  d = {'x': 1, 'y': 2, 'z': 3} 
for key in d:
    ...
  
  
   How does Python recognize that it needs only to read the key from the
  dictionary?  Or is it simply a
  variable? 
 

 It's not just  for  loops. The important word here is "iterating". 

 A dictionary is a mapping of keys to values: 

  d = {'x': 1, 'y': 2, 'z': 3} 
  

 Any time we iterate over it, we iterate over the keys. The variable name  key  is only intended to be descriptive - and it is quite apt for the purpose. 

 This happens in a list comprehension: 

  >>> [k for k in d]
['x', 'y', 'z']
  

 It happens when we pass the dictionary to list (or any other collection type object): 

  >>> list(d)
['x', 'y', 'z']
  

 The way Python iterates is, in a context where it needs to, it calls the  __iter__  method of the object (in this case the dictionary) which returns an iterator (in this case, a keyiterator object): 

  >>> d.__iter__()
<dict_keyiterator object at 0x7fb1747bee08>
  

 We shouldn't use these special methods ourselves, instead, use the respective builtin function to call it,  iter : 

  >>> key_iterator = iter(d)
>>> key_iterator
<dict_keyiterator object at 0x7fb172fa9188>
  

 Iterators have a  __next__  method - but we call it with the builtin function,  next : 

  >>> next(key_iterator)
'x'
>>> next(key_iterator)
'y'
>>> next(key_iterator)
'z'
>>> next(key_iterator)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
  

 When an iterator is exhausted, it raises  StopIteration . This is how Python knows to exit a  for  loop, or a list comprehension, or a generator expression, or any other iterative context. Once an iterator raises  StopIteration  it will always raise it - if you want to iterate again, you need a new one. 

  >>> list(key_iterator)
[]
>>> new_key_iterator = iter(d)
>>> list(new_key_iterator)
['x', 'y', 'z']
  

 Returning to dicts 

 We've seen dicts iterating in many contexts. What we've seen is that any time we iterate over a dict, we get the keys. Back to the original example: 

 
  d = {'x': 1, 'y': 2, 'z': 3} 
for key in d:
  
 

 If we change the variable name, we still get the keys.  

  >>> for each_key in d:
...     print(each_key, '=>', d[each_key])
... 
x => 1
y => 2
z => 3
  

 If we want to iterate over the values, we need to use the  .values  method of dicts, or for both together,  .items : 

  >>> list(d.values())
[1, 2, 3]
>>> list(d.items())
[('x', 1), ('y', 2), ('z', 3)]
  

 In the example given, it would be more efficient to iterate over the items like this: 

  for a_key, corresponding_value in d.items():
    print(a_key, corresponding_value)
  

 But for academic purposes, the question's example is just fine. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44182134)
 I have a use case where I have to iterate through the dict to get the key, value pair, also the index indicating where I am. This is how I do it: 

  d = {'x': 1, 'y': 2, 'z': 3} 
for i, (key, value) in enumerate(d.items()):
   print(i, key, value)
  

 Note that the parentheses around the key, value is important, without the parentheses, you get an ValueError "not enough values to unpack". 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34953933)
 You can make order for both dicts with  sorted() , like this: 

  a_dict = {"a": 1,"b": 2,"c": 3}
b_dict = {"A": 5,"B": 6,"C": 7}
for (k,v), (k1,v1) in zip(sorted(a_dict.items()), sorted(b_dict.items())):
    print(k,v)
    print(k1,v1)
  

 Output: 

  a 1
A 5
b 2
B 6
c 3
C 7
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/120074)
 Tuple unpacking in for loops, list comprehensions and generator expressions: 

  >>> l=[(1,2),(3,4)]
>>> [a+b for a,b in l ] 
[3,7]
  

 Useful in this idiom for iterating over (key,data) pairs in dictionaries: 

  d = { 'x':'y', 'f':'e'}
for name, value in d.items():  # one can also use iteritems()
   print "name:%s, value:%s" % (name,value)
  

 prints: 

  name:x, value:y
name:f, value:e
  



