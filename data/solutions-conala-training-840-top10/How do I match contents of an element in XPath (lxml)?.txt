Query: How do I match contents of an element in XPath (lxml)?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2637909)
  

  .//a[text()='Example']  

 using xpath() method: 

  tree.xpath(".//a[text()='Example']")[0].tag
  

 If case you would like to use iterfind(), findall(), find(), findtext(), keep in mind that advanced features like  value comparison and functions  are not available in http://effbot.org/zone/element-xpath.htm. 

 
    lxml.etree  supports the simple path
  syntax of the find, findall and
  findtext methods on ElementTree and
  Element, as known from the original
  ElementTree library (ElementPath). As
  an lxml specific extension, these
  classes also provide an xpath() method
  that supports expressions in the
  complete XPath syntax, as well as
  custom extension functions. 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10836343)
 AFAIK ElementTree does not support XPath.  

 Anyway, you can use http://lxml.de and the following XPath expression: 

  import lxml.etree
doc = lxml.etree.parse('t.xml')
print doc.xpath('//element[text()="A"]')[0].text
print doc.xpath('//element[text()="A"]')[0].tag
  

 The result will be: 

  A
element
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30793722)
 
   How come the tail isn't being included when I use the match function? 
 

 That's  because in xpath 1.0, when given a node-set,  match()  function (or any other string function such as  contains() ,  starts-with() , etc.) only take into account the first node. 

 Instead of what you did, you can use  //text()  and apply regex match filter on individual text nodes, and then return the text node's parent element, like so : 

  xpath = '//text()[re:match(., $search, "i")]/parent::*'
matches = root.xpath(xpath, search=search_term, namespaces={'re':'http://exslt.org/regular-expressions'})
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41618741)
 XML can only have one  "root", xml.xpath('//description/text()') return multiple elements. Wrap all elements in to a single element, then your XML document will only have one root element. 

 Also noted that the text in the original XML has a space before each closing tag that you should remove 

  from lxml import etree as ET

xml = ET.parse("test.xml")

    for description in xml.xpath('//description/text()'):
    x = ET.XML('<Testroot>'+description.replace('< /','</')+'</Testroot>') # add root tag and remove space before the closing tag
    vulnDiscussion = next(iter(x.xpath('//VulnDiscussion/text()')), None)
    if vulnDiscussion:
        print(vulnDiscussion)
  

 Output  

      Discretionary access control is weakened if a user or group has access permissions to system files and directories greater than the default.

    Satisfies: SRG-OS-000257-GPOS-00098, SRG-OS-000278-  GPOS-00108
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33319386)
  ul  elements (or more generally http://www.w3.org/TR/html5/dom.html#flow-content-1) are https://stackoverflow.com/q/5681481/190597 (which can only contain http://www.w3.org/TR/html5/dom.html#phrasing-content-1). Therefore  lxml.html  parses  text  as  

  In [45]: print(html.tostring(tree))
<div><p class="goal">
             Goal   
               test  

</div>
  

 The  ul  follows the  p  element. So you could find the  ul  element using the XPath 

  In [47]: print(html.tostring(tree.xpath('//p[@class="goal"]/following::ul')[0]))
  test  
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9335634)
 You can also access the attribute using XPath: 

  system = node.xpath('//t:rating/@system', namespaces = {'t':'http://example/namespace'})
print system[0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15686649)
 Do not use regex to parse HTML, use LXML for this.  

 Example using iPython (test is your file) 

  In [55]: import lxml.html

In [56]: x = lxml.html.fromstring(open("test").read())

In [57]: for i in x.iterlinks():
    print i # print ALL links 
   ....:     
(<Element a at 0x1bb7110>, 'href', '#', 0)
(<Element a at 0x1ba8c50>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)
(<Element a at 0x1ba8e30>, 'href', '#', 0)
(<Element a at 0x1ba8c50>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)
(<Element a at 0x1ba8e30>, 'href', '#', 0)
(<Element a at 0x1ba8c50>, 'href', '#', 0)
(<Element a at 0x1bb7110>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)
(<Element a at 0x1ba8c50>, 'href', '#', 0)
(<Element a at 0x1ba8e30>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)
(<Element a at 0x1ba8c50>, 'href', '#', 0)
(<Element a at 0x1ba8e30>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)

In [58]: path = x.xpath("./table[@id='test_table']")[0]

In [59]: for i in path.iterlinks():
   ....:     print i
   ....:     
(<Element a at 0x1bb7110>, 'href', '#', 0)
(<Element a at 0x1bb7050>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)
(<Element a at 0x1ba8e30>, 'href', '#', 0)
(<Element a at 0x1bb7050>, 'href', '#', 0)
(<Element a at 0x1ba89b0>, 'href', '#', 0)
(<Element a at 0x1ba8e30>, 'href', '#', 0)
(<Element a at 0x1bb7050>, 'href', '#', 0)
  

 Using Xpath makes stuff much easier, less headaches and less coffee ;) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40137106)
 The following code removes elements that don't have any  subelement1  descendants and are not named  subelement1 . 

  from lxml import etree

tree = etree.parse("input.xml")  # First XML document in question

for elem in tree.iter():
    if elem.xpath("not(.//subelement1)") and not(elem.tag == "subelement1"):
        if elem.getparent() is not None:
            elem.getparent().remove(elem)

print etree.tostring(tree) 
  

 Output: 

  <root>
  <element1>
    <subelement1>blabla</subelement1>
  </element1>
  </root>
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18217794)
 Here's the example on how you can get all of the links from the first column: 

  from lxml import etree
import requests

URL = "http://en.wikipedia.org/wiki/List_of_school_districts_in_Alabama"
response = requests.get(URL)

parser = etree.HTMLParser()
tree = etree.fromstring(response.text, parser)

for row in tree.xpath('//*[@id="mw-content-text"]/table[1]/tr'):
    links = row.xpath('./td[1]/a')
    if links:
        link = links[0]
        print link.text, link.attrib.get('href')
  

 Note, that,  tbody  is appended by the browser -  lxml  won't see this tag (just skip it in xpath). 

 Hope that helps. 



