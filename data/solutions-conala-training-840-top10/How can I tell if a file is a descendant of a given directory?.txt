Query: How can I tell if a file is a descendant of a given directory?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30255302)
 This will iterate over all descendant files, not just the immediate children of the directory: 

  import os

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        #print os.path.join(subdir, file)
        filepath = subdir + os.sep + file

        if filepath.endswith(".asm"):
            print (filepath)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3328028)
 Use https://docs.python.org/3/library/os.path.html#os.path.realpath and https://docs.python.org/3/library/os.path.html#os.path.commonprefix: 

  os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == "/the/dir/"
  

  os.path.realpath  will expand any symlinks as well as  ..  .  os.path.commonprefix  is a bit fickle -- it doesn't really test for paths, just plain string prefixes, so you should make sure your directory ends in a directory separator. If you don't, it will claim  /the/dirtwo/filename  is also in  /the/dir  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37923477)
 Python 3.5 has the useful function https://docs.python.org/3/library/os.path.html#os.path.commonpath: 

 
   Return the longest common sub-path of each pathname in the sequence paths. Raise ValueError if paths contains both absolute and relative pathnames, or if paths is empty. Unlike  commonprefix() , this returns a valid path. 
 

 So to check if a file is a descendant of a directory, you could do this: 

  os.path.commonpath(["/the/dir", os.path.realpath(filename)]) == "/the/dir"
  

 Unlike  commonprefix , you don't need to worry if the inputs have trailing slashes or not. The return value of  commonprefix  always lacks a trailing slash. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20420190)
 There is no easy way to determine if someone else has made a link to a given "hard" directory. You can only check if a given directory is a symlink to another directory. 

 This means that you need to traverse your entire directory structure, look for symlinks, and then check if they point to the directory in question. 

 A symlink is a special file which points to another file/directory, somewhere in your directory structure. Symlinks can point to other filesystems as well. Creating a symlink does not change the inode of the destination file/folder (as opposed to hard links), so you can't tell by looking at the target, only at the link itself. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15679531)
 Just create a loop over  os.listdir() : 

  import os

path = '/path/to/directory'
for filename in os.listdir(path):
    if not filename.endswith('.xml'): continue
    fullname = os.path.join(path, filename)
    tree = ET.parse(fullname)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53477951)
 If you want to locate node that contains another node you might need to use XPath in below fmat 

 
  By child node: 

  //parent_node[child_node]
  

  

  //parent_node[child::child_node]
   
  By descendant node: 

  //anscest_node[.//descendant_node]
  

  

  //anscest_node[descendant::descendant_node]
   
 

 In your case to select  a  node that contains  svg  descendant node, you can try; 

  links_with_svg = driver.find_elements_by_xpath('//a[.//*[local-name()="svg"]]')
  

  

  links_with_svg = driver.find_elements_by_xpath('//a[descendant::*[local-name()="svg"]]')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7288073)
 http://docs.python.org/library/os.path.html#os.path.relpath: 

 
   Return a relative filepath to path either from the current directory or from an optional start point. 
 

  >>> from os.path import relpath
>>> relpath(/usr/var/log/, /usr/var)
log
>>> relpath(/usr/var/log/, /usr/var/sad/)
../log
  

 So, if relative path starts with  ..  - it means that the second path is not descendant of the first path. 

 In Python3 you can use https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to: 

  Python 3.5.1 (default, Jan 22 2016, 08:54:32)
>>> from pathlib import Path

>>> Path(/usr/var/log).relative_to(/usr/var/log/)
PosixPath(.)

>>> Path(/usr/var/log).relative_to(/usr/var/)
PosixPath(log)

>>> Path(/usr/var/log).relative_to(/etc/)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/pathlib.py", line 851, in relative_to
    .format(str(self), str(formatted)))
ValueError: /usr/var/log does not start with /etc
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52056669)
  elements[0].xpath('//text()')  returns  all  text nodes in given HTML DOM. To get descendant text nodes of  elements[0]  you need to start XPath with the dot (https://msdn.microsoft.com/en-us/library/ms256199(v=vs.110).aspx): 

  elements[0].xpath('.//text()')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7257147)
 On a linux box, I would have told you to use a  find  call, but the  .exe  seems to tell you are on windows. 

 In python, you should use something like this  

  for root, dir, files in os.walk(path):
   for name in files:
      subprocess.call(["path_to_your_programm/myprogram.exe", os.path.join(root, name)]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/14480794)
 The function you are looking for is http://docs.python.org/2/library/os.html#os.listdir. 

 Given a directory  /tmp/foo  with files named  bar  and  baz : 

  >>> import os
>>> os.listdir('/tmp/foo')
['baz', 'bar']
  

 When you use  os.listdir , you will also want to use http://docs.python.org/2/library/os.path.html#os.path.isfile to test whether each entry you are dealing with is actually a file, since directory names are returned as well. 



