Query: hex string to character in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8088383)
 There are several ways of doing this: 

  >>> hex(ord("c"))
'0x63'
>>> format(ord("c"), "x")
'63'
>>> "c".encode("hex")
'63'
  

 To use the  hex  encoding in Python 3, use 

  >>> codecs.encode(b"c", "hex")
b'63'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38831910)
 You need to convert the hex digits to a binary string first: 

  struct.unpack('d', "4081637ef7d0424a".decode("hex"))
  

  

  struct.unpack('d', binascii.unhexlify("4081637ef7d0424a"))
  

 The latter version wks in both Python 2 and 3, the fmer only in Python 2 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53875841)
  2F  is a hexadecimal number of  /  character. Python has https://docs.python.org/3/library/functions.html#chr function that returns a character representation by a  decimal  number. 

 So you need to get two symbols after  % s and "decode" ("hex" ->  chr( https://docs.python.org/3/library/functions.html#int ) ) them into a character. 

  def decode_utf(string):
    for i in range(string.count("%")):
        tmp_index = string.index("%")
        hex_chr = string[tmp_index:tmp_index + 3]
        #replace only one characher at a time
        string = string.replace(hex_chr, chr(int(hex_chr[1:],16)),1)
    return string

print(decode_utf("%2Fdata%2F"))
#/data/
print(decode_utf("hello%20world%21"))
#hello world!
  

 

  Edit 1:  

 The previous code breaks if there's  %25  character, use the code below. 

  def decode_utf(string):
    utf_characters = []
    tmp_index = 0

    for i in range(string.count("%")):
        tmp_index = string.index("%",tmp_index)
        hex_chr = string[tmp_index:tmp_index + 3]
        if not hex_chr in utf_characters:
            utf_characters.append(hex_chr)

        tmp_index += 1

    for hex_chr in utf_characters:
        string = string.replace(hex_chr, chr(int(hex_chr[1:],16)))

    return string

print(decode_utf("%25t%20e%21s%2ft%25"))
#%t e!s/t%
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33842730)
 You need to add an  u  at leading of your string which make that python treads with your string as an unicode, and decode your character while printing: 

  >>> for c in u'aɣyul':
...     print c
... 
a
ɣ
y
u
l
  

 Note that without encoding python will break the unicode character in two separate hex value and in each print you will get the string representation of this hex values: 

  >>> 'aɣyul'
'a\xc9\xa3yul'
    ^   ^
  

 If you want to know that why python break the unicode to 2 hex value that's because of that instances of     str  contain raw 8-bit values while a unicode character used more than 8 bit memory. 

 You can also decode the hex values manually: 

  >>> print '\xc9\xa3'.decode('utf8')
ɣ
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/867880)
 Use the built-in function  http://docs.python.org/library/functions.html#unichr  to convert the number to character, then encode that: 

  >>> unichr(int('fd9b', 16)).encode('utf-8')
'\xef\xb6\x9b'
  

 This is the string itself. If you want the string as ASCII hex, you'd need to walk through and convert each character  c  to hex, using  hex(ord(c))  or similar. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43868382)
  occurs due to the fact that unhexlify has used 3F as a byte code, which is the ASCII code for '?'. Thus, Python has displayed these bytes as an ASCII code. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11624358)
  s = "ABCD"
from array import array
a = array("B", s)
  

 If you want hex: 

  print map(hex, a)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45797893)
 You can use the  ord()  function. 

  for c in example_string:
    print(ord(c), hex(ord(c)), c.encode('utf-8'))
  

 will give you the decimal, hex codepoint as well as the UTF-8 encoding for this character, like so: 

  (1594, '0x63a', '\xd8\xba')
(1610, '0x64a', '\xd9\x8a')
(1606, '0x646', '\xd9\x86')
(1610, '0x64a', '\xd9\x8a')
(1575, '0x627', '\xd8\xa7')
(32, '0x20', ' ')
  :
  :
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43869585)
 @Benedict answer's is correct, Here is some sources to help you understand: 

 
 https://docs.python.org/3/library/binascii.html#binascii.unhexlify official python documentation. 
 https://en.wikipedia.org/wiki/ASCII 
 

 
   Originally based on the English alphabet, ASCII encodes 128 specified
  characters into seven-bit integers as shown by the ASCII chart
  above.[8] The characters encoded are numbers 0 to 9, lowercase letters
  a to z, uppercase letters A to Z, basic punctuation symbols, control
  codes that originated with Teletype machines, and a space. For
  example, lowercase j would become binary 1101010 and decimal 106.
  ASCII includes definitions for 128 characters: 33 are non-printing
  control characters (many now obsolete)[9] that affect how text and
  space are processed[10] and 95 printable characters, including the
  space 
 

 
 http://ascii.cl/ 
 http://calc.50x.eu/ 
 

 For  ?  character: 

 
  binary : 00111111. in python,  chr(0b00111111)  will output  ?  
  octal : 77.        in python  chr(0o77)         will output  ?  
  decimal : 63.      in python  chr(63)           will output  ?  
  hexadecimal : 3F.    in python  chr(0x3f)         will output  ?  
 

 As you can see, you can use prefixes like  0b ,  0o , or  0x  before  int  to make python understand you are not working with decimal numbers.  

 However  0x8C  is out of the ascii table (because it goes from 0 to 127).  0x8C  being 140 in decimal it cannot display the equivalent. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/38909568)
 In python 3x Use https://docs.python.org/3.1/library/binascii.html instead of hex:  

  >>> import binascii
>>> binascii.hexlify(b'< character / string>')
  



