Query: sorting dictionary by numeric value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28839263)
 You can create a list of sorted tuples in this manner, but note that dictionaries themselves are unordered, so you cannot sort the dictionary itself (unless you use something like https://docs.python.org/2/library/collections.html#collections.OrderedDict 

  >>> d = {'a':10,'b':20,'c':5,'d':5,'e':5}
>>> list(sorted(d.items(), key = lambda i : (i[1],i[0]), reverse = True))
[('b', 20), ('a', 10), ('e', 5), ('d', 5), ('c', 5)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28839925)
 To match the actual output you want you have to use two keys to sort negating the int value with  - : 

  d = {'a':10,'b':20,'c':5,'d':5,'e':5}

for k,v in sorted(d.items(),key=lambda x:(-x[1],x[0])):
    print("{} {}".format(k,v))
  

 Output: 

  b 20
a 10
c 5
d 5
e 5
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31398886)
 Those are sorted. They are strings, and are sorted lexicographically: '1' is before '2', etc. 

 If you want to sort by numeric value, you'll need to convert to ints in the key function. For example: 

  sorted(temp_dict.items(), key=lambda x: int(x[1]))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35463540)
 Here is one way to do it: 

  >>> sorted_kv = sorted(d.items(), key=lambda (k,v):int(v), reverse=True)
>>> OrderedDict(sorted_kv)
OrderedDict([('3', '5'), ('26', '4'), ('22', '4'), ('16', '3'), ...
  

 This takes the key/value pairs from the dictionary, sorts them, and creates a new ordered dictionary with the required ordering. 

 The  key=  argument to  sorted()  specifies that the pairs are to be sorted according to the numeric value of the second item. 

 The reason I needed to call  int()  is that your dictionary keeps both the keys and the values as strings. Sorting them as-is will work, but will produce the https://en.wikipedia.org/wiki/Lexicographical_order instead of the numeric one. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35624120)
 There is a  reverse  option to  sorted()  you could use instead: 

  sorted(dict.items(), key=lambda kv: kv[1], reverse=True)
  

 This produces the exact same output, and even works if the values are not numeric. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34995529)
 Given dictionary 

  e = {1:39, 4:34, 7:110, 2:87}
  

 Sorting 

  sred = sorted(e.items(), key=lambda value: value[1])
  

   

  [(4, 34), (1, 39), (2, 87), (7, 110)]
  

 You can use a lambda function to sort things up by value and store them processed inside a variable, in this case  sred  with  e  the original dictionary. 

 Hope that helps! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40208464)
 You're currently sorting on keys, not values, and you also want to do a  type cast  to integer to avoid sorting  lexicographically : 

  sorted(tag_weight.items(), key=lambda x: int(x[1]), reverse=True)
#                                        ^^^^^^^^ sort on values and do a type cast
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3177025)
 In recent Python 2.7, we have the new http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections type, which remembers the order in which the items were added. 

  >>> d = {"third": 3, "first": 1, "fourth": 4, "second": 2}

>>> for k, v in d.items():
...     print "%s: %s" % (k, v)
...
second: 2
fourth: 4
third: 3
first: 1

>>> d
{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}
  

 To make a new ordered dictionary from the original, sorting by the values: 

  >>> from collections import OrderedDict
>>> d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))
  

 The OrderedDict behaves like a normal dict: 

  >>> for k, v in d_sorted_by_value.items():
...     print "%s: %s" % (k, v)
...
first: 1
second: 2
third: 3
fourth: 4

>>> d_sorted_by_value
OrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22903797)
 Try the following approach. Let us define a dictionary called mydict with the following data: 

  mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}
  

 If one wanted to sort the dictionary by keys, one could do something like: 

  for key in sorted(mydict.iterkeys()):
    print "%s: %s" % (key, mydict[key])
  

 This should return the following output: 

  alan: 2
bob: 1
carl: 40
danny: 3
  

 On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following: 

  for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):
    print "%s: %s" % (key, value)
  

 The result of this command (sorting the dictionary by value) should return the following: 

  bob: 1
alan: 2
danny: 3
carl: 40
  



