Query: Python : how to append new elements in a list of list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/252705)
  append  adds an element to a list, and  extend  concatenates the first list with another list (or another iterable, not necessarily a list.) 

  >>> li = ['a', 'b', 'mpilgrim', 'z', 'example']
>>> li
['a', 'b', 'mpilgrim', 'z', 'example']

>>> li.append("new")
>>> li
['a', 'b', 'mpilgrim', 'z', 'example', 'new']

>>> li.append(["new", 2])
>>> li
['a', 'b', 'mpilgrim', 'z', 'example', ['new', 2]]

>>> li.insert(2, "new")
>>> li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new']

>>> li.extend(["two", "elements"])
>>> li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']
  

 From  http://www.diveintopython.net/native_data_types/lists.html#d0e5887 . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50403726)
 Find the code below: 

  list_1 = [100, 100, 50, 40, 40, 20, 10]
list_2 = [5, 25, 50, 120]

final_list = []

for l1 in list_2:
    temp_list_1 = list_1.copy()
    temp_list_1.append(l1)        
    temp_list_1.sort(reverse=True)

    final_list.append(temp_list_1)

print(final_list)
  

 Explanation: 

 Loop over the elements of  list_2  and append it on the  temp_list_1 . . Finally append the sorted list on a new  final_list . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41126017)
  main_list=[]
list_1=["a", "b", "c", "d", "e"]
list_2=["a", "f", "c", "m"]

for i in list_2:
    if i not in list_1:
        main_list.append(i)

print(main_list)
  

 output: 

  ['f', 'm']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9055127)
 Assuming all the elements in list1 are keys in dict, this is the simplest solution I can think of : 

  list1 =['a','b','c','d']
new_list = []
dict = {'a':24, 'b':53 ,'c':26, 'd':9}

for it in list1:
    new_list.append(dict[it])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44502518)
 . But you need to append new elements in the inner loop to an empty list, which will be append as element of the outer list. Otherwise you will get (as you can see from your code) a flat list of 100 elements. 

  newlist = []
for x in range(10):
    innerlist = []
    for y in range(10):
        innerlist.append(y)
    newlist.append(innerlist)

print(newlist)
  

 See the comment below by Błotosmętek for a more concise version of it. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3752764)
 Access your list elements directly by i. Then you can append to your list: 

  for i in xrange(len(myarr)):
    if somecond(a[i]):
        myarr.append(newObj())
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17129517)
 Slices create shallow copies. It's a different list, but with the same elements. This means you can append to it, or reset elements by index without affecting the original, but if you mutate an element the effect will be seen in the original. 

 Since your elements are immutable, you won't notice this, but consider the following: 

  >>> def everythird(l):
        return l[0::3]

>>> x = [[1], [2], [3]]
>>> y = everythird(x)
>>> y[0].append(1)
>>> x
[[1, 1], [2], [3]]
  

 The only way to have a completely different list is through  copy.deepcopy  

 
   Also do methods modify or create new lists?  
 

  list  methods are usually inplace like  .append  and mutate the instance itself, the exception being Python 3's  list.copy  which is the equivalent to  seq[:]  or  list(seq) . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30552248)
 Once you hit the index, use an inner loop to append each element from list2: 

  for ind, ele in enumerate(list1):
    # we are at the index'th element in list1 so start adding all
    # elements from list2
    if ind == index:
        for ele2 in list2:
            new_list.append(ele2)
    # make sure to always append list1 elements too      
    new_list.append(ele)
print(new_list)
['b', 'o', 'r', 'e', 'd', 'o', 'm']
  

 If you must use range just replace enumerate with range: 

  new_list = []

for ind in range(len(list1)):
    if ind == index:
        for ele2 in list2:
            new_list.append(ele2)
    new_list.append(list1[ind])
print(new_list)
['b', 'o', 'r', 'e', 'd', 'o', 'm']
  

 Or without ifs using extend and remove if allowed: 

  new_list = []
for i in range(index):
    new_list.append(list1[i])
    list1.remove(list1[i])
new_list.extend(list2)
new_list.extend(list1)
  

 Appending as soon as we hit the index means the elements will be inserted from the correct index, the elements from list1 must always be appended after your if check.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6696064)
 Try iterating through each element of the list, then splitting it at the tab character and adding it to a new list. 

  for i in list:
    newList.append(i.split('\t')[0])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/39884088)
 You need to make a copy of the old list in the loop: 

  input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
new_list = []
for e in input_elements:
  tmp_list = list(my_array)
  tmp_list.append(e)
  new_list.append(tmp_list)

print(new_list)
  

 Output: 

  [['1', '2', '3', '4', 'a'], ['1', '2', '3', '4', 'b'], ['1', '2', '3', '4', 'c'], ['1', '2', '3', '4', 'd']]
  

 Note that  tmp_list = list(my_array)  makes a new copy of  my_array . 

  The above can be shortened by making  tmp-list  implicit:  

  input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
new_list = []
for e in input_elements:
  new_list.append(my_array + [e]) # the temporary copy is implicit
print(new_list)
  

  The above can then be further shortened using lambdas (essentially making the loop implicit in this example):  

  input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
new_list = [my_array + [e] for e in input_elements]
print(new_list)
  



