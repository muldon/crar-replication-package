Query: user input and commandline arguments
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9037858)
 Best practice is to use http://docs.python.org/dev/library/argparse.html to handle all your commandline arguments. It includes a default  --help  which you can customize to your likings. 

 Here's the simplest example: 

  import argparse

parser = argparse.ArgumentParser(description='This is my help')

args = parser.parse_args()
  

  

  % python argparse_test.py -h
usage: argparse_test.py [-h]

This is my help

optional arguments:
  -h, --help  show this help message and exit
  

 You can define all your arguments with argparse and set a help message for each one of them. The resulting filtered/validated arguments are returned by  parser.parse_args() . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12961847)
 You can do something quite silly: 

  import argparse
import os

class MyAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        namespace.numbers = []
        namespace.path = os.getcwd()
        for v in values:
            if os.path.isdir(v):
                namespace.path = v
            else:
                try:
                    namespace.numbers.append(int(v))
                    if len(namespace.numbers) > 2
                       parser.error("Barg2!!!")
                except ValueError:
                    parser.error("Barg!!!")

p = argparse.ArgumentParser()
p.add_argument('stuff',nargs='*',action=MyAction)
n = p.parse_args()
print n
  

 But if you're going to do this, you might as well just process  sys.argv  yourself -- you should really consider using actual options here... 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49211320)
 Developing a GUI is a big project for python beginners, there are several possibilities to do this. If you want to seriously develop GUI applications in Python I would recommend you to try Qt4 or Qt5 via pyside or pyqt. You may need one or more tutorials and maybe some problems to get your first working GUI applications, but you will be able to build any kind of professional cross-platform applications using this libraries. 

 With running command line text, you mean system commands or python commands? If you want to run system commands, I would recommend you to write a short python script, that handles user input (within the python commandline) and passes it to the system using subprocess ( from subprocess import call ). 

 If you have done your first simple textform in pyqt and the script that handles user input try to connect them by wrapping the Qt application around the commandline script. If you just looking for a quick and dirty solution there are several libraries, that support some easy to setup GUI frames or webinterfaces (to run in the browser on the local machine). But if you are a programming beginner I would highly recommend to split this into twor or three minor projects, to keep the frustration level low ;). 

 Edit Python2 vs Python3: pyqt and pyside are available for both python2 and python3 (as the most, but not all libraries) so your choice between py2 and py3 is on your own. The Syntax is almost the same (except the print() command), but the libraries you install are only working in the version you installed them.
If you are working on a linux machine you can easily install both versions in parallel if you want to make sure the right version is called you can specify the command such as  python2  or  python3  instead of running the default with  python  

 Edit2 handle user input: 

  from subprocess import check_output

def predefined_command(user_input):
    command = ['net', 'user', '/domain', user_input]
    answer = check_output(command, args)
    decoded = answer.decode('utf8')
    return answer
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16179928)
 Just Taking Input 

  the_input = raw_input("Enter input: ")
  

 And that's it.   

 Moreover, if you want to make a list of inputs, you can do something like: 

  a = []

for x in xrange(1,10):
    a.append(raw_input("Enter Data: "))
  

 In that case, you'll be asked for data 10 times to store 9 items in a list. 

 Output:  

  Enter data: 2
Enter data: 3
Enter data: 4
Enter data: 5
Enter data: 7
Enter data: 3
Enter data: 8
Enter data: 22
Enter data: 5
>>> a
['2', '3', '4', '5', '7', '3', '8', '22', '5']
  

 You can search that list the fundamental way with something like (after making that list): 

  if '2' in a:
    print "Found"
  

 else:
    print "Not found." 

 You can replace '2' with "raw_input()" like this: 

  if raw_input("Search for: ") in a:
    print "Found"
else: 
    print "Not found"
  

 Taking Raw Data From Input File via Commandline Interface 

 If you want to take the input from a file you feed through commandline (which is normally what you need when doing code problems for competitions, like Google Code Jam or the ACM/IBM ICPC): 

  example.py  

  while(True):
    line = raw_input()
    print "input data: %s" % line
  

  

  example.py < input.txt
  

 Hope that helps. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5705106)
 You want to checkout the http://docs.python.org/library/readline.html.  I answered a https://stackoverflow.com/questions/5637124/tab-completion-in-pythons-raw-input/5638688#5638688, which shows how to do filename/dirname auto-completion of paths. Let me know if you need more detail. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14465228)
 I'd do something like this: 

  def _get_prg_output_real():
    p = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    return out

def _get_prg_output_fake():
    return 'ok - program executed'
  

  

  get_prg_output = _get_prg_output_fake
  

  

  get_prg_output = _get_prg_output_real
  

 based on user input,  commandline arguments  config files  commenting/uncommenting a single line of code ... 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28222194)
 There is a parameter that allows input from a file, the 'fromfile-prefix-chars' 

 https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars 

 In the default form it expects one commandline string per line.  But the docs also show how it can be modified to take multiple strings from each line.  You could take that idea and extend it to handle the Yaml syntax. 

 But there are libraries that read config and yaml files.  So you could use your  --config-file  argument to read your file with that library, and then merge its results with the  argparse  results. Merger is probably easiest by converting both (yaml and argparse) to dictionaries, and using the  .update  method. 

  Ipython  uses its config files (both default and user specified) to populate its  argparse  parser arguments.  Thus user profiles can override the defaults, and the commandline can override both. The code that does this is not for the faint of heart, but for a large project might be worth studying. 

 Details on how you do the merger depend on the 'yaml' produced object.  The  argparse   args  is a simple object of type  argparse.Namespace .  See the docs for detail.  Usually people just 'read' values from  args , but it is equally easy to add or modify values.  And if you prefer,  vars(args)  turns it into a dictionary. 

 

 Using  yaml.load  (and simplifying the argparse a bit): 

  import yaml
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--names', action='append')
parser.add_argument('--ages', action='append')
parser.add_argument('--county', dest='county')
parser.add_argument('--config-file')   # automatic - to _ conversion

sample = "--config-file=stack28220581.yaml --name Ralph --age 40".split()
args = parser.parse_args(sample)
# add test that len(args.names)==len(args.ages) ??
with open(args.config_file) as f:
    ydict = yaml.load(f)
# {'county': 'somewhere', 'names': ['Bob', 'Jill'], 'ages': [22, 31]}

# add list attributes from args to the corresponding ydict values
for k,v in ydict.items():
    av = getattr(args,k,None)
    if av and isinstance(v, list):
        v.extend(av)
print(ydict)
# {'names': ['Bob', 'Jill', 'Ralph'], 'ages': [22, 31, '40'], 'county': 'somewhere'}
  

 

 An example of using  prefix_chars : 

  def foo(astr):
    # custom convert_arg_line_to_args method
    # convert 'names: [v1,v2]' into ['--names', v1, '--names', v2, ...]
    alist = []
    if ':' not in astr:
        return astr
    field,value = astr.split(':')
    value = value.strip()
    field = '--'+field
    if value.startswith('['):
        values = value[1:-1].split(',')
        for v in values:
            alist.extend([field,v.strip()])
    else:
        alist.extend([field, value])
    return alist

parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.convert_arg_line_to_args = foo  # could also do this with subclass
parser.add_argument('--names', action='append')
parser.add_argument('--ages', action='append')
parser.add_argument('--county', dest='county')
sample = "@stack28220581.yaml --name Ralph --age 40".split()
args = parser.parse_args(sample)
print(args)
# Namespace(ages=['22', '31', '40'], county='somewhere', names=['Bob', 'Jill', 'Ralph'])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33160409)
 I'm having trouble understanding what you are asking.  I understand what Python and  argparse  are doing, but I don't quite understand what you are trying to do. 

 Your sample looks like it would run fine when called from a Linux shell.  With the the  -  arguments, it should accept input from the keyboard, and display it on the screen.  But those arguments are most often used with shell redirection controls  >, <, |  (details vary with shell,  sh ,  bash , etc). 

 But if you are using the shell to redirect  stdin  or  stdout  to/from files, you could just as well give those files as commandline arguments. 

 If you are bothered by required/default issue, consider making these arguments flagged (also called  optionals ): 

  parser.add_argument('-r','--readfile', type=argparse.FileType('r'), default='-')
parser.add_argument('-w','--writefile', type=argparse.FileType('w'), default='-')
  

 With this change, these calls are the same 

  python mycode.py -r - <test.json
python mycode.py <test.json
python mycode.py -r test.json
  

 all writing to the screen (stdout).  That could be redirected in similar ways. 

 To take typed input: 

  python mycode.py
{...}
^D
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5826167)
 I just discovered you can do this with  argparse.ArgumentParser.parse_known_args() . Start by using  parse_known_args()  to parse a configuration file from the commandline, then read it with ConfigParser and set the defaults, and then parse the rest of the options with  parse_args() . This will allow you to have a default value, override that with a configuration file and then override that with a commandline option. E.g.: 

 Default with no user input: 

  $ ./argparse-partial.py
Option is "default"
  

  

  $ cat argparse-partial.config 
[Defaults]
option=Hello world!
$ ./argparse-partial.py -c argparse-partial.config 
Option is "Hello world!"
  

 Default from configuration file, overridden by commandline: 

  $ ./argparse-partial.py -c argparse-partial.config --option override
Option is "override"
  

 argprase-partial.py follows. It is slightly complicated to handle  -h  for help properly.  

  import argparse
import ConfigParser
import sys

def main(argv=None):
    # Do argv default this way, as doing it in the functional
    # declaration sets it at compile time.
    if argv is None:
        argv = sys.argv

    # Parse any conf_file specification
    # We make this parser with add_help=False so that
    # it doesn't parse -h and print help.
    conf_parser = argparse.ArgumentParser(
        description=__doc__, # printed with -h/--help
        # Don't mess with format of description
        formatter_class=argparse.RawDescriptionHelpFormatter,
        # Turn off help, so we print all options in response to -h
        add_help=False
        )
    conf_parser.add_argument("-c", "--conf_file",
                        help="Specify config file", metavar="FILE")
    args, remaining_argv = conf_parser.parse_known_args()

    defaults = { "option":"default" }

    if args.conf_file:
        config = ConfigParser.SafeConfigParser()
        config.read([args.conf_file])
        defaults.update(dict(config.items("Defaults")))

    # Parse rest of arguments
    # Don't suppress add_help here so it will handle -h
    parser = argparse.ArgumentParser(
        # Inherit options from config_parser
        parents=[conf_parser]
        )
    parser.set_defaults(**defaults)
    parser.add_argument("--option")
    args = parser.parse_args(remaining_argv)
    print "Option is \"{}\"".format(args.option)
    return(0)

if __name__ == "__main__":
    sys.exit(main())
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12961727)
 Use options; that's what they're there for (and what  argparse  is good at parsing). 

  

  myapp.py [-F folder] [[from] to]
  

 would make a lot more sense, and be easier to parse. 



