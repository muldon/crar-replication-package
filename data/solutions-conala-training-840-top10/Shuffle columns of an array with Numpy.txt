Query: Shuffle columns of an array with Numpy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41876745)
 In general if you want to shuffle a numpy array along axis  i : 

  def shuffle(x, axis = 0):
    n_axis = len(x.shape)
    t = np.arange(n_axis)
    t[0] = axis
    t[axis] = 0
    xt = np.transpose(x.copy(), t)
    np.random.shuffle(xt)
    shuffled_x = np.transpose(xt, t)
    return shuffled_x

shuffle(array, axis=i)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22426661)
 You could shuffle  a.flat : 

  >>> np.random.shuffle(a.flat)
>>> a
array([[6, 1, 2],
       [3, 5, 0],
       [7, 8, 4]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50554447)
 From: https://github.com/numpy/numpy/issues/5173 

  def disarrange(a, axis=-1):
    """
    Shuffle `a` in-place along the given axis.

    Apply numpy.random.shuffle to the given axis of `a`.
    Each one-dimensional slice is shuffled independently.
    """
    b = a.swapaxes(axis, -1)
    # Shuffle `b` in-place along the last axis.  `b` is a view of `a`,
    # so `a` is shuffled in place, too.
    shp = b.shape[:-1]
    for ndx in np.ndindex(shp):
        np.random.shuffle(b[ndx])
    return
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20546567)
 For a general axis you could follow the pattern: 

  >>> import numpy as np
>>> 
>>> a = np.array([[  1,  20, 100, 4],
...               [  2,  31, 401, 5],
...               [  8,  11, 108, 6]])
>>> 
>>> print a[:, np.random.permutation(a.shape[1])]
[[  4   1  20 100]
 [  5   2  31 401]
 [  6   8  11 108]]
>>> 
>>> print a[np.random.permutation(a.shape[0]), :]
[[  1  20 100   4]
 [  2  31 401   5]
 [  8  11 108   6]]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35646937)
 That's what  numpy.random.shuffle()  is for : 

  >>> X = np.random.random((6, 2))
>>> X
array([[ 0.9818058 ,  0.67513579],
       [ 0.82312674,  0.82768118],
       [ 0.29468324,  0.59305925],
       [ 0.25731731,  0.16676408],
       [ 0.27402974,  0.55215778],
       [ 0.44323485,  0.78779887]])

>>> np.random.shuffle(X)
>>> X
array([[ 0.9818058 ,  0.67513579],
       [ 0.44323485,  0.78779887],
       [ 0.82312674,  0.82768118],
       [ 0.29468324,  0.59305925],
       [ 0.25731731,  0.16676408],
       [ 0.27402974,  0.55215778]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35183004)
 I think this is  very importan t to note. 
You can use  random.shuffle(a)  
if  a  is 1-D numpy array.
If it is N-D (where N > 2) than  

 
   random.shuffle(a) 
 

 will spoil your data and return some random thing.
  

  import random
import numpy as np
a=np.arange(9).reshape((3,3))
random.shuffle(a)
print a

[[0 1 2]
 [3 4 5]
 [3 4 5]]
  

 This is a known https://github.com/numpy/numpy/issues/1655 (or feature?) of numpy. 

 So,  use only   numpy.random.shuffle(a)  for  numpy arrays . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20546443)
 While asking I thought about maybe I could shuffle the transposed array: 

   np.random.shuffle(np.transpose(r))
  

 It looks like it does the job. I'd appreciate comments to know if it's a good way of achieving this. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22426647)
 You can tell  np.random.shuffle  to act on the flattened version: 

  >>> a = np.arange(9).reshape((3,3))
>>> a
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
>>> np.random.shuffle(a.flat)
>>> a
array([[3, 5, 8],
       [7, 6, 2],
       [1, 4, 0]])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19631040)
 When dealing with regular Python lists,  random.shuffle()  will do the job just as the previous answers show. 

 But when it come to  ndarray ( numpy.array ),  random.shuffle  seems to break the original  ndarray . Here is an example: 

  import random
import numpy as np
import numpy.random

a = np.array([1,2,3,4,5,6])
a.shape = (3,2)
print a
random.shuffle(a) # a will definitely be destroyed
print a
  

 Just use:  np.random.shuffle(a)  

 Like  random.shuffle ,  np.random.shuffle  shuffles the array in-place. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/32492169)
 Reshape into 3 columns.  http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.shuffle.html doc says it just shuffles the 1st dimension: 

  ind=np.arange(99)  # multple of 3
ind=ind.reshape(-1,3)
rng.shuffle(ind)
ind.flatten()
  



