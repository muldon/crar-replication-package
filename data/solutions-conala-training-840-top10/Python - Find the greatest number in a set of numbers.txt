Query: Python - Find the greatest number in a set of numbers
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46121148)
  max  is a builtin function in python, which is used to get max value from a sequence, i.e (list, tuple, set, etc..) 

  print(max([9, 7, 12, 5]))

# prints 12 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3090188)
 Use  max()  

  >>> l = [1, 2, 5]
>>> max(l)
5
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/575199)
 I wrote that program in Ruby and it similar to the python implementation. The important line is: 

  if x*x == y*y + z*z && gcd(y,z) == 1:
  

 Then you have to implement a method that return the greatest common divisor (gcd) of two given numbers. A very simple example in Ruby again: 

  def gcd(a, b)
    while b != 0
      t = b
      b = a%b
      a = t
    end
    return a
end
  

 The full Ruby methon to find the triplets would be: 

  def find_triple(upper_boundary)

  (5..upper_boundary).each {|c|
    (4..c-1).each {|b|
      (3..b-1).each {|a|
        if (a*a + b*b == c*c && gcd(a,b) == 1)
          puts "#{a} \t #{b} \t #{c}"
        end
      }
    }
  }
end
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44005859)
 You want to find the  greatest common divisor  of the numerator and the denominator and divide both by that. The https://docs.python.org/3/library/math.html#math.gcd is in Python's standard library, but you might want to implement it yourself. One famous (and easy to implement) algorithm to find it is called https://en.wikipedia.org/wiki/Euclidean_algorithm. 

 You can implement Euclid's algorithm by subtracting your two numbers to get a third number (the difference), then discarding the biggest number of the three and repeating this subtraction/discard process until one of your numbers is zero. 

 By the way, 30/15 reduced is 2/1. 

 To take your example (30/15) 

 30 - 15 = 15 

 Now you have 3 numbers (30, 15, 15). Discard the largest and repeat. 

 15 - 15 = 0 

 Now you have 3 smaller numbers (15, 15, 0). 

 15 - 0 = 15 

 Because that didn't change the set of numbers, you can conclude that 15 is your greatest common divisor. (and if you divide both 30 and 15 by 15, you get 2 and one, which is your reduced fraction's numerator and denominator. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36523446)
 For a moderately large number I would use Miller-Rabin's Primality test. You can find Python code for it here: https://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test#Python 

 Note that the algorithm is probabilistic in nature, but applying it a number of time will guarantee correct answers with very high probability. 

 If you are absolutely set on using a trial division based method, I would recommend you multiply a large number of small primes and store the resulting composite number. Then you can take the Greatest Common Divisor (GCD) using a standard algorithm (such as 'fraction.gcd'). If the answer is not 1, then the number tested is definitely not prime. Usually you would then apply the Miller-Rabin test above to determine whether it is prime. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37706788)
 There are some other answers about fixing the float problem. However to answer your question about even length lists, from Google: 

 
   The median is also the number that is halfway into the set. To find the median, the data should be arranged in order from least to greatest. If there is an even number of items in the data set, then the median is found by taking the mean (average) of the two middlemost numbers. 
 

 So you would need to do  (list[len/2]*list[(len/2)-1])/2  (minus 1 for 0 indexed arrays, plus 1 for 1 indexed arrays) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4882663)
 You can use a simple mathematical trick: The sum of all numbers that  can not be written  as a sum of two abundant numbers is the sum of  all numbers  minus the numbers that  can be written  as a sum of two abundant numbers: 

   solution = sum(range(limit)) - sum(all_two_sums(abundant_numbers))
  

 ( sum(range(limit))  can also be simplified with math, but you might not find it unless you're Gauss ;-)) 

 You already have a list of abundant numbers, so it's relatively easy to create the set of numbers that  can  be written as the sum of two abundant numbers and where the sum is smaller than the limit. Just make sure you have no duplicate numbers, a Python  set  does that. 



