Query: Create new list by taking first item from first list, and last item from second list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43345237)
 You could do something like the following: 

  new_data_items = []
for item in data_items:
    if item['Writable'] == 'TRUE':
        new_data_items.append(item)
  

 But list comprehensions would be quicker and less verbose: 

  new_data_items = [item for item in data_items if item['Writable'] == 'TRUE']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25587798)
  

  M = [1]
L = [M]  
for _ in xrange(3):
    L += [L[-1] + [L[-1][-1] + 1]]
  

 After the above code is executed,  L  will contain  [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]] . Explanation: 

 
 The first two lines simply seed the iteration with initial values 
 The  for  line states how many loops we want to perform after the initial value has been set,  3  in this case. I'm using  _  as the iteration variable because we're not interested in its value, we just want to do a certain number of loops 
 

 Now for the interesting part; and remember that in Python a negative index in a list starts counting from the end, so an index of  -1  points to the last element. 

 
 This:  L += …  updates the list, appending a new sublist at the end as many times as specified in the loop 
 This:  [L[-1] + …]  creates a new sublist by taking the last sublist and adding a new element at the end 
 And finally this:  [L[-1][-1] + 1]  obtains the previous last element in the last sublist, adds one to it and returns a single-element list to be concatenated at the end of the previous expression 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25587755)
 When adding a list object  M  to another list, you are only adding a  reference ; continuing to manipulate the list  M  means you will see those changes reflected through the other reference(s) too: 

  >>> M = []
>>> resultlist = []
>>> resultlist.append(M)
>>> M is resultlist[0]
True
>>> M.append(1)
>>> resultlist[0]
[1]
>>> M
[1]
  

 Note that  M is resultlist[0]  is True; it is the  same object . 

 You'd add a  copy  of  M  instead: 

  resultlist.append(M[:])
  

 The whole slice here ( [:]  means to slice from start to end) creates a new list with a shallow copy of the contents of  M . 

 The generic way to build produce a series  L  from a continuously altered starting point  M  is to use a https://docs.python.org/2/reference/expressions.html#yield-expressions. Your simple  add the next number to  M   series could be implemented as: 

  def growing_sequence():
    M = []
    counter = 0
    while True:
        M.append(counter)
        counter += 1
        yield M[:]
  

 This will yield ever longer lists each time you iterate,  on demand : 

  >>> gen = growing_sequence()
>>> next(gen)
[0]
>>> next(gen)
[0, 1]
>>> for i, lst in enumerate(gen):
...     print i, lst
...     if i == 2: break
...
0 [0, 1, 2]
1 [0, 1, 2, 3]
2 [0, 1, 2, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43345217)
 use python list compression 

  [_ for _ in data_items if _.get('Writable') == 'TRUE']
  

 Chk this link : https://repl.it/HEyl/0 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17011179)
  L = [45, 42, 78, 120, 47, 2, 50, 32, 34]

cond = L[0]
res = [[cond]]
for item in L[1:]:
    if item > cond:
        res[-1].append(item)
    else:
        cond = item
        res.append([cond])
  

 Now  res is : 

  [[45], [42, 78, 120, 47], [2, 50, 32, 34]]
  

 Details: 

 Indexing with  0  gives you the first element: 

  >>> cond = L[0]
>> cond
45
  

 We create new list  res  that will hold our result and put the  45 , i.e. the very first element into a list that in turn becomes the first element of  res : 

  >>> res = [[cond]]
>>> res
[[45]]
  

 Now, we iterate over the list starting form the second element.  L[1:]  gives this sublist: 

  >>> L[1:]
[42, 78, 120, 47, 2, 50, 32, 34]
  

 Note,  res[-1]  always gives us the currently last element of a list. This itself must be list and we append the next number ( item ) if it is bigger than our  cond . Otherwise, we append a new sublist with only one element  res.append([cond]) . . Therefore, the list that makes up the last element in our  res  will grow as long as  item > cond . If not, we append a new list with  cond . Rinse and repeat until the end of the original list.  

 Variation 

 The  L[1:]  makes a copy of  L . This not the most efficient way of doing it. If we turn  L into an iterator we can avoid this:  

  L = iter([45,42,78,120,47,2,50,32,34])
cond = next(L)
res = [[cond]]
for item in L:
    if item > cond:
        res[-1].append(item)
    else:
        cond = item
        res.append([cond])
  

 Each  next(L)  will give us the next item in the iterator. The for-loop will go over the rest. So in our case it starts at the second element because we called  next()  once. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34214650)
 the result is coming from: 

  [1,10,2,9,3,8,4,7,5,6]

 1,   2,  3,  4,  5  
   10,  9,  8,  7,  6
  

 You can see that the first five items are [1,2,3,4,5], and then we insert [10, 9, 8, 7, 6] in position [1, 3, 5, 7, 9]. 

 You can try this way: 

  >>> for i in range(5):
        item = a.pop()
        a.insert(i*2 + 1, item)
>>> a
[1,10,2,9,3,8,4,7,5,6]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35797587)
 You can zip the first list with the reverse of second one (using  itertools.izip_longest ) then join the columns using  itertools.chain : 

  >>> d=['a','b','c','d']
>>> e=['w','x','y','z']
>>> 
>>> from itertools import chain, zip_longest # in python 2 use izip_longest
>>> 
>>> list(chain(*izip_longest(d, e[::-1])))
['a', 'z', 'b', 'y', 'c', 'x', 'd', 'w']
  

 The advantage of using  zip_longest()  is that it takes a  fillvalue  argument which will be passed to fill the omitted items when the length of your lists are not equal. 

 If you are sure that the length of the lists are equal you better to use built-in function  zip() . 

  >>> d=['a','b']
>>> e=['w','x','y','z']
>>> list(chain(*izip_longest(d, e[::-1], fillvalue='')))
['a', 'z', 'b', 'y', '', 'x', '', 'w']
  

 More pythonic way suggested by @Jon Clements: 

  list(chain.from_iterable(zip_longest(d, reversed(e))))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13871207)
 Use http://docs.python.org/2/tutorial/introduction.html#lists. 

  lst = [0, 1, 2, 3, 4, 5]
new_lst = lst[1:]
new_lst.append(lst[0])
  

 You could also use  new_lst.extend(lst[:1]) , though when the head slice is a single element,  append(lst[0])  is probably slightly more efficient, since you don't have to construct another temporary list just to wrap a single value.   lst[1:] + list[:1]  is probably the worst though, since it has to create yet another throw away list object compared to the  extend()  version. 



