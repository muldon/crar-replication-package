Query: Plotting categorical data with pandas and matplotlib
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54266570)
 To plot multiple categorical features as bar charts on the same plot, I would suggest: 

  import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(
    {
        "colour": ["red", "blue", "green", "red", "red", "yellow", "blue"],
        "direction": ["up", "up", "down", "left", "right", "down", "down"],
    }
)

categorical_features = ["colour", "direction"]
fig, ax = plt.subplots(1, len(categorical_features))
for i, categorical_feature in enumerate(df[categorical_features]):
    df[categorical_feature].value_counts().plot("bar", ax=ax[i]).set_title(categorical_feature)
fig.show()
  

 https://i.stack.imgur.com/f2hEA.png 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31029857)
 You can simply use  value_counts  on the series: 

  df['colour'].value_counts().plot(kind='bar')
  

 https://i.stack.imgur.com/ouoSE.png 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47277456)
 Matplotlib version  2.1.0  allows https://matplotlib.org/devdocs/gallery/lines_bars_and_markers/categorical_variables.html, just calling  plt.plot(x,y)  as usual, without the need to use  range  or  get_xticklabels() . 

  line1 = plt.plot(x_axis, data1,'ko-',label='line1')
line2 = plt.plot(x_axis, data2,'ro-',label='line2') 
line3 = plt.plot(x_axis, data3,'mo-',label='line3')
  

 

 https://i.stack.imgur.com/aMKy7.png 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50614015)
 You could also use  countplot  from  seaborn .  This package builds on  pandas  to create a high level plotting interface. It gives you good styling and correct axis labels for free. 

  import pandas as pd
import seaborn as sns
sns.set()

df = pd.DataFrame({'colour': ['red', 'blue', 'green', 'red', 'red', 'yellow', 'blue'],
                   'direction': ['up', 'up', 'down', 'left', 'right', 'down', 'down']})
sns.countplot(df['colour'], color='gray')
  

 https://i.stack.imgur.com/w1rkS.png 

 It also supports coloring the bars in the right color with a little trick 

  sns.countplot(df['colour'],
              palette={color: color for color in df['colour'].unique()})
  

 <a href="https://i.stack.imgur.com/o5HJQ.png"  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44496875)
 If you want to show the graph as a categorical bar plot, i.e. equidistant bars independent of the actual date, you can just reformat the xticklabels, 

  f = lambda x: datetime.datetime.strptime(x, '%Y-%m-%d %H:%M:%S').strftime('%b')
ax.set_xticklabels([ f(x.get_text()) for x in ax.get_xticklabels()])
  

 where  %b  is the month's abbreviated name  and ax is the axes of your plot. 

 Complete example: 

  import pandas as pd
import datetime
import matplotlib.pyplot as plt

df = pd.DataFrame(index =  [datetime.datetime(2016, 7, 2, 0, 0),
                    datetime.datetime(2016, 8, 6, 0, 0),
                    datetime.datetime(2016, 9, 13, 0, 0),
                    datetime.datetime(2016, 10, 26, 0, 0),
                    datetime.datetime(2016, 11, 2, 0, 0)],
                    data = {'total' : [5, 3, 1, 0, 2]})

ax = df.plot(kind='bar')

f = lambda x: datetime.datetime.strptime(x, '%Y-%m-%d %H:%M:%S').strftime('%b')
ax.set_xticklabels([ f(x.get_text()) for x in ax.get_xticklabels()])

plt.show()
  

 https://i.stack.imgur.com/hXQvO.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44419165)
 Maybe you can use numpy array and pd.melt to create the scatter plot as shown below:   

  arr = np.array([[i,j] for i in range(df.shape[1]) for j in range(df.shape[0])])
plt.scatter(arr[:,0],arr[:,1],s=100*pd.melt(df)['value'],marker='o')
plt.xlabel('level_0')
plt.ylabel('level_1')
plt.xticks(range(df.shape[1]), df.columns)
plt.yticks(range(df.shape[0]), df.index)
plt.show()  
  

 https://i.stack.imgur.com/mnmN1.png 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33958450)
 Your code looks incorrect with regards to some syntax: 

  line1 = ax1.plot(data1,'ko-',label='line1') #no need for str(x_axis)
line2 = ax1.plot(data2,'ro-',label='line2') 
line3 = ax1.plot(data3,'mo-',label='line3') 
  

   

  plt.setp(ax1.get_xticklabels(), visible=True) #not ax2
  

 When I fixed these the plotting worked fine, your line 

  plt.xticks(range(len(data3)), x_axis, size='small')
  

 is a correct way to assign a list to the x axis. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35593464)
 First of all, you are not using subplots properly, see here: http://matplotlib.org/examples/pylab_examples/subplots_demo.html 

 Second, it is possible to plot a stacked bar chart with pandas' basic plotting functionality: 

  pd.DataFrame(data_counts).transpose().plot(kind='barh', stacked=True)
  

 Note that for the bars to be stacked, you have to transpose your data, and in order to transpose a pandas Series you need to convert it to a dataframe first. 

 https://i.stack.imgur.com/CILFP.png 

 Finally, if you absolutely want to use Seaborn, this link might help: http://randyzwitch.com/creating-stacked-bar-chart-seaborn/ 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35594130)
 not the most elegant, but this will work: 

  x = df.Names.value_counts()
y = x.reset_index()
y["name_of_column"] = ""
y.pivot(index="name_of_column", columns="index", values=0).plot(kind="bar", stacked=True)
  



