Query: How to check whether the system is FreeBSD in a python script?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30015690)
 Look at https://docs.python.org/2.7/library/os.html#os.uname. 

 I'm not 100% certain, but it would probably be something like  os.uname()[0] == "FreeBSD" . 




-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30015766)
 As stated https://docs.python.org/2/library/platform.html#platform.system, 

  platform.system()
  

 returns the platform OS name, so you can use this. In https://stackoverflow.com/questions/4553129/when-to-use-os-name-sys-platform-or-platform-system you can see also different approaches to check the underlying OS. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14359286)
 That's not how psutil is supposed to be used. Why are you importing _psutil_bsd in the first place? Have you read the http://code.google.com/p/psutil/wiki/Documentation?  The code is supposed to be: 

  import psutil
for p in psutil.process_iter():
    if p.name == 'name_I_care_about':
        ...
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17622447)
 Have a look at the https://pypi.python.org/pypi/psutil module:  

 
    psutil  (python system and process utilities) is a cross-platform library for retrieving information on  running processes  and  system utilization  (CPU, memory, disks, network) in Python. [...] It currently supports  Linux ,  Windows ,  OSX ,  FreeBSD  and  Sun Solaris , both  32-bit  and  64-bit  architectures, with Python versions from  2.6 to 3.4  (users of Python 2.4 and 2.5 may use 2.1.3 version). PyPy is also known to work. 
 

 It has a function called  pid_exists()  that you can use to check whether a process with the given pid exists. 

 Here's an example: 

  import psutil
pid = 12345
if psutil.pid_exists(pid):
    print "a process with pid %d exists" % pid
else:
    print "a process with pid %d does not exist" % pid
  

 For reference: 

 
<li 
<li 
<li 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5739198)
 https://pypi.org/project/watchdog/  

 Excellent cross platform library for watching directories. 

 From the website 

 
    Supported Platforms  
  
   
    Linux 2.6 (inotify)  
    Mac OS X (FSEvents, kqueue)  
    FreeBSD/BSD (kqueue)  
    Windows (ReadDirectoryChangesW with I/O completion ports; ReadDirectoryChangesW worker threads)  
    OS-independent (polling the disk for directory snapshots and comparing them periodically; slow and not recommended)  
   
 

 I've used it on a couple projects and it seems to work wonderfully. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15442258)
  os.system  returns a return code.  So you can just capture it and check it. 

  rc = os.system("ant compile")
if rc != 0: 
   print "Error on ant compile"
   sys.exit(1)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28850018)
 That's job for  kqueue . There are 2 possible bindigs for that...  py-kqueue  (all BSDs and OSX) and  py-freebsd  (just FreeBSD). . Some hint how to use  kqueue  here: https://stackoverflow.com/questions/7958397/check-if-file-is-modified-deleted-or-extended-using-python-select-kqueue/ 

 Other example to understand  kqueue  in  py-openbsd  bindings docs: https://github.com/cortesi/pyopenbsd/blob/master/doc-src/kqueue.html. And then of course  man kqueue . 

 Further option is to use  Twisted  async framework (which in background will use  kqueue  for reactor) and its https://twistedmatrix.com/documents/15.0.0/api/twisted.mail.mail.FileMonitoringService.html. This is periodic checker, generic implementation - OS agnostic. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8091932)
 You can try the http://pypi.python.org/pypi/watchdog/ package which in turn uses kqueue on BSD (and inotify on Linux, etc.) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1026516)
 It's better if you check which platform your script is running (using  sys.platform ) and do a test based on that, e.g. import some hasAdminRights function from another, platform-specific module. 

 On Windows you could check whether  Windows\System32  is writable using  os.access , but remember to try to retrieve system's actual "Windows" folder path, probably using pywin32. Don't hardcode one. 



