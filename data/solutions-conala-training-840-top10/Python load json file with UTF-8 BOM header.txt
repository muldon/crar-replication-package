Query: Python load json file with UTF-8 BOM header
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13156715)
 You can open with  codecs : 

  import json
import codecs

json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))
  

 or decode with  utf-8-sig  yourself and pass to  loads : 

  json.loads(open('sample.json').read().decode('utf-8-sig'))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13156736)
 Since  json.load(stream)  uses  json.loads(stream.read())  under the hood, it won't be that bad to write a small hepler function that lstrips the BOM: 

  from codecs import BOM_UTF8

def lstrip_bom(str_, bom=BOM_UTF8):
    if str_.startswith(bom):
        return str_[len(bom):]
    else:
        return str_

json.loads(lstrip_bom(open('sample.json').read()))    
  

 In other situations where you need to wrap a stream and fix it somehow you may look at inheriting from  codecs.StreamReader . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44368781)
 I resolved this error by Converting the json file to UTF-8 with no BOM. 
Below is a python snippet and https://stackoverflow.com/questions/8898294/convert-utf-8-with-bom-to-utf-8-with-no-bom-in-python for conversion 

  myFile=open(cases2.json, 'r')
myObject=myFile.read()
u = myObject.decode('utf-8-sig')
myObject = u.encode('utf-8')
myFile.encoding
myFile.close()
myData=json.loads(myObject,'utf-8')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48175409)
  $ wget https://s3.amazonaws.com/wherego-sims/tags.json 
$ file tags.json 
tags.json: UTF-8 Unicode (with BOM) text, with CRLF line terminators
  

 This file begins with a byte order mark (EF BB BF), which is illegal in JSON (https://stackoverflow.com/questions/4990095/json-specification-and-usage-of-bom-charset-encoding). You must first decode this using  'utf-8-sig'  in Python to get a valid JSON unicode string. 

  json.loads(filePath.read().decode('utf-8-sig'))
  

 For what it's worth, Python 3 (which you should be using) will give a specific error in this case and guide you in handling this malformed file: 

 
   json.decoder.JSONDecodeError: Unexpected UTF-8 BOM (decode using utf-8-sig): line 1 column 1 (char 0) 
 

 Namely, by specifying that you wish to discard the BOM if it exists (again, it's not conventional to use this in UTF-8, particularly with JSON which is always encoded in UTF-8 so it is worse than useless): 

  >>> import json
>>> json.load(open('tags.json', encoding='utf-8-sig'))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29900075)
 For UTF-8 with BOM you can use: 

  def addUTF8Bom(filename):
  f = codecs.open(filename, 'r', 'utf-8')
  content = f.read()
  f.close()
  f2 = codecs.open(filename, 'w', 'utf-8')
  f2.write(u'\ufeff')
  f2.write(content)
  f2.close()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33294156)
 In Python 3 it's quite easy: read the file and rewrite it with  utf-8  encoding: 

  s = open(bom_file, mode='r', encoding='utf-8-sig').read()
open(bom_file, mode='w', encoding='utf-8').write(s)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14532226)
 You should probably yell at whoever's running this service, because a BOM on UTF-8 text makes no sense.  The BOM exists to disambiguate byte order, and UTF-8 is defined as being little-endian. 

 That said, ideally you should decode bytes before doing anything else with them.  Luckily, Python has a codec that recognizes and removes the BOM:  utf-8-sig . 

  >>> '\xef\xbb\xbffoo'.decode('utf-8-sig')
u'foo'
  

  

  data = json.loads(response.decode('utf-8-sig'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46557458)
 just specify right encoding 

  config.read(config_file_path, encoding='utf-8-sig')
  

 
 "utf-8-sig" for UTF-8 with BOM 
 "utf-8" for UTF-8 without BOM 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41355982)
 ConfigParser parse UTF-8 file with BOM(xef xbb xbf) 

      u = open("setting.ini").read().decode("utf-8-sig").encode("utf-8")
    fp = tempfile.TemporaryFile()
    fp.write(u)
    fp.seek(0)

    conf = ConfigParser.ConfigParser()
    conf.readfp(fp)
  



