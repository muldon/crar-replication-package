Query: How do I perform secondary sorting in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36563439)
 From the Python 3 docs on https://docs.python.org/3/howto/sorting.html#sortinghowto 

  from operator import itemgetter, attrgetter
student_objects = [
    Student('john', 'A', 15),
    Student('jane', 'B', 12),
    Student('dave', 'B', 10),
]
student_tuples = [
    ('john', 'A', 15),
    ('jane', 'B', 12),
    ('dave', 'B', 10),
]

#The operator module functions allow multiple levels of sorting. For example, to sort by grade then by age:

sorted(student_tuples, key=itemgetter(1,2))
sorted(student_objects, key=attrgetter('grade', 'age'))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16193637)
 Sort it by a (firstkey, secondkey) tuple: 

  sorted(list5, key=lambda vertex: (degree(vertex), vertex))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35387430)
 The built in sorting routines in Python are stable.  That is, if two items have the same key value, then they keep the order they had relative to each other (the one closer to the front of the list stays closer to the front).  So you can sort on multiple keys using multiple sorting passes. 

  from operator import itemgetter

tlist = [('Ayoz', 1, 18, 7), ('Aidan', 2, 4, 9), ('Alan', 2, 4, 9),
         ('Arlan', 5, 6, 7), ('Luke', 15, 16, 2), ('Tariq', 5, 4, 2)]

# sort by name in descending order
tlist.sort(key=itemgetter(0), reverse=True) 
print('pass 1:', tlist)

# sort by element 1 in ascending order.  If two items have the same value
# the names stay in the same order they had (descending order)
tlist.sort(key=itemgetter(1))
print(npass 2:', tlist)
  

  

  pass 1: [('Tariq', 5, 4, 2), ('Luke', 15, 16, 2), ('Ayoz', 1, 18, 7), ('Arlan', 5, 6, 7), ('Alan', 2, 4, 9), ('Aidan', 2, 4, 9)]

pass 2: [('Ayoz', 1, 18, 7), ('Alan', 2, 4, 9), ('Aidan', 2, 4, 9), ('Tariq', 5, 4, 2), ('Arlan', 5, 6, 7), ('Luke', 15, 16, 2)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16193755)
 . 

  sorted(list5, lambda x: (degree(x),x))
  

 Don't forget the reverse flag if you need it. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35387069)
 You can give the original answer a twist to get it work: 

  sorted(tlist, key=lambda elem: (-elem[1], elem[0]), reverse=True)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34885938)
 You can sort the list using a custom key function, which returns a 2-tuple, for primary sorting and secondary sorting. 

 Primary sorting is by the order of your "tags" (ID first, then Name, etc.).
Secondary sorting is by the numeric value following it.  

  tags = ['ID','Name','Size','Color']
sort_order = { tag : i for i,tag in enumerate(tags) }

def elem_key(x):
    for tag in tags:
        if x.startswith(tag):
            suffix = x[len(tag) : ]
            return ( sort_order[tag],
                     int(suffix) if suffix else None )
    raise ValueError("element %s is not prefixed by a known tag. order is not defined" % x)

list1.sort(key = elem_key)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6667177)
 You  can  do successive rounds of sorting as python's  sort  is http://en.wikipedia.org/wiki/Stable_sort#Stability. You need to first sort on the  secondary key  though. See also the http://docs.python.org/howto/sorting.html#sort-stability-and-complex-sorts. 

  from operator import itemgetter
l = [['a',2], ['a',1], ['b', 2], ['a',3], ['b',1], ['b',3]]
l.sort(key=itemgetter(1))
l.sort(key=itemgetter(0), reverse=True)
# [['b', 1], ['b', 2], ['b', 3], ['a', 1], ['a', 2], ['a', 3]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35386946)
  tlist = [('Ayoz', 1, 18, 7), ('Alan', 2, 4, 9), ('Aidan', 2, 4, 9), ('Arlan', 5, 6, 7), ('Luke', 15, 16, 2), ('Tariq', 5, 4, 2)] 

sorted(tlist, key=lambda elem: (elem[1],sorted(elem[0],reverse=True)))
  

 Worked it out but it took me half an hour to type so I'm posting no matter what. I still welcome a better way of doing it. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45904712)
 There is more fast algorithm https://en.wikipedia.org/wiki/Quickselect that does not perform full sorting - just makes partition, and has average complexity about  O(N) .  

 Thanks to @Violet Red comment:  https://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.partition.html 

 Complexity of heap approach is  O(NlogK) , of sort approach is  O(NlogN) .  

 C++ STL contains method  partial_sort  that might execute faster that full sorting. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/16516036)
 The answer from  root  is correct, but you don't really need a  lambda : 

  >>> def key_function(x):
        return len(x), str(x)

>>> sorted(['foo','bar','foobar','barbar'], key=key_function)
['bar', 'foo', 'barbar', 'foobar']
  

 In addtion, there is a alternate approach takes advantage of sort stability which lets you sort in multiple passes (with the secondary key first): 

  >>> ls = ['foo','bar','foobar','barbar']
>>> ls.sort(key=str)                       # secondary key
>>> ls.sort(key=len)                       # primary key
  

 See the http://docs.python.org/2.7/howto/sorting.html for a good tutorial on Python sorting techniques. 



