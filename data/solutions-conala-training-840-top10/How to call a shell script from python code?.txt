Query: How to call a shell script from python code?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33993190)
  import os
import sys
  

 Assuming test.sh is the shell script that you would want to execute 

  os.system("sh test.sh")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3777351)
 Use the subprocess module as mentioned above. 

 I use it like this: 

  subprocess.call(["notepad"])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31995784)
 In case you want to pass some parameters to your shell script, you can use the method https://docs.python.org/2/library/shlex.html#shlex.split: 

  import subprocess
import shlex
subprocess.call(shlex.split('./test.sh param1 param2'))
  

 with  test.sh  in the same folder: 

  #!/bin/sh
echo $1
echo $2
exit 0
  

 Outputs: 

  $ python test.py 
param1
param2
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3777308)
 The http://docs.python.org/library/subprocess.html module will help you out.  

 Blatantly trivial example: 

  >>> import subprocess
>>> subprocess.call(['./test.sh']) # Thanks @Jim Dennis for suggesting the []
0 
>>> 
  

 Where  test.sh  is a simple shell script and  0  is its return value for this run. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37868147)
 Subprocess module is a good module to launch subprocesses.
You can use it to call shell commands as this: 

  subprocess.call(["ls","-l"]);
#basic syntax
#subprocess.call(args, *)
  

 You can see its documentation https://docs.python.org/2/library/subprocess.html#module-subprocess 

 If you have your script written in some .sh file or a long string, then you can use os.system module. It is fairly simple and easy to call: 

  import os
os.system("your command here")
# or
os.system('sh file.sh')
  

 This command will run the script once, to completion, and block until it exits. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53942613)
 In case the script is having multiple arguments 

  #!/usr/bin/python

import subprocess
output = subprocess.call(["./test.sh","xyz","1234"])
print output
  

 Output will give the status code. If script runs successfully it will give 0 otherwise non-zero integer. 

  podname=xyz  serial=1234
0
  

 Below is the test.sh shell script. 

  #!/bin/bash

podname=$1
serial=$2
echo "podname=$podname  serial=$serial"
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39326840)
 I'm running python 3.5 and subprocess.call(['./test.sh']) doesn't work for me.  

 I give you three solutions depends on what you wanna do with the output. 

 1 - call script. You will see output in your terminal. output is a number.  

  import subprocess 
output = subprocess.call(['test.sh'])
  

 2 - call and dump execution and error into string. You don't see execution in your terminal unless you print(stdout). Shell=True as argument in Popen doesn't work for me.  

  import subprocess
from subprocess import Popen, PIPE

session = subprocess.Popen(['test.sh'], stdout=PIPE, stderr=PIPE)
stdout, stderr = session.communicate()

if stderr:
    raise Exception("Error "+str(stderr))
  

 3 - call script and dump the echo commands of temp.txt in temp_file 

  import subprocess
temp_file = open("temp.txt",'w')
subprocess.call([executable], stdout=temp_file)
with open("temp.txt",'r') as file:
    output = file.read()
print(output)
  

 Don't forget to take a look at the https://docs.python.org/3.5/library/subprocess.html#module-subprocess 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3777320)
 There are some ways using  os.popen()  (deprecated) or the whole  subprocess  module, but http://docs.python.org/py3k/library/os.html#os.system 

  import sys, os

os.system(command)
  

 . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26236170)
 Use https://docs.python.org/3/library/subprocess.html#subprocess.call, e.g.: 

  import subprocess
# ...

subprocess.call(["echo", i])
  

 There is another function like  subprocess.call :  subprocess.check_call . It is exactly like call, just that it throws an exception if the command executed returned with a non-zero exit code. This is often feasible behaviour in scripts and utilities. 

  subprocess.check_output  behaves the same as  check_call , but returns the standard output of the program. 

 

  If you do not need shell features (such as variable expansion, wildcards, ...), never use shell=True  (shell=False is the default).  If  you use shell=True then shell escaping is your job with these functions and they're a security hole if passed unvalidated user input. 

 The same is true of os.system() -- it is a frequent source of security issues. Don't use it. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/38698081)
 The build in  exec  statement that you're using is for interpreting python code inside a python program. 

 What you want is to execute an external (shell) command. For that you could use  call  from the  subprocess module  

  import subprocess
subprocess.call(["echo", "Hello", "World"])
  

 https://docs.python.org/3/library/subprocess.html 



