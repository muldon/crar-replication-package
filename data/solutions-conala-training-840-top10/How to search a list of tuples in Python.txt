Query: How to search a list of tuples in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2917399)
 You can use a http://docs.python.org/tutorial/datastructures.html#list-comprehensions: 

  >>> a = [(1,"juca"),(22,"james"),(53,"xuxa"),(44,"delicia")]
>>> [x[0] for x in a]
[1, 22, 53, 44]
>>> [x[0] for x in a].index(53)
2
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15294158)
 You can combine the https://stackoverflow.com/questions/11377208/recursive-generator-for-flattening-nested-lists (think of it as a recursive version of  itertools.chain ) with Python's standard  in  operator (which, on generators, does a linear search) to get this: 

  >>> def flatten(nested):
    try:
        for sublist in nested:
            for element in flatten(sublist):
                yield element
    except TypeError:
        yield nested


>>> my_list = [2, [3, 4, [2, 3]], 1, [4, [5]]]
>>> 5 in flatten(my_list)
True
  

 Per the comments in the linked question, you will want to refine the  flatten  code if what you're searching for is iterable - eg, tuples will be flattened into the search just like lists, and searching for strings recurses until it hits Python's stack limit. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45155387)
 What about converting the list of tuples to a dict? 

  >>> d = dict([("a", 1), ("b",2), ("c",3)])
>>> d['b'] # 2
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13536480)
 You will have to iterate over the list first, then for each list obtained, iterate over it to get tuples. 

  >>> my_list = [[(1, 'a')], [(2, 'b'), (2, 'c')], [(3, 'd'), (3, 'e')]]
>>> 
>>> def search(val):
        for index, inner_list in enumerate(my_list):
            for nested_tuple in inner_list:
                if val in nested_tuple:
                    return index


>>> search('a')
0
>>> search('c')
1
>>> search('e')
2
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2917408)
 Your tuples are basically key-value pairs--a python  dict --so: 

  l = [(1,"juca"),(22,"james"),(53,"xuxa"),(44,"delicia")]
val = dict(l)[53]
  

 Edit -- aha, you say you want the index value of (53, "xuxa"). If this is  really  what you want, you'll have to iterate through the original list, or perhaps make a more complicated dictionary: 

  d = dict((n,i) for (i,n) in enumerate(e[0] for e in l))
idx = d[53]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45155385)
 Take advantage of how lexicographic ordering deals with tuples of unequal length: 

  # bisect_right would also work
index = bisect.bisect_left(x, ('b',))
  

 It may sometimes be convenient to feed a custom sequence type to  bisect : 

  class KeyList(object):
    # bisect doesn't accept a key function, so we build the key into our sequence.
    def __init__(self, l, key):
        self.l = l
        self.key = key
    def __len__(self):
        return len(self.l)
    def __getitem__(self, index):
        return self.key(self.l[index])

import operator
# bisect_right would *not* work for this one.
index = bisect.bisect_left(KeyList(x, operator.itemgetter(0)), 'b')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31169820)
 You could make nested dictionaries 

  >>> d = {i[0]:{'ID':i[1], 'State':i[2]} for i in L}
>>> d
{'Susan': {'ID': 8765, 'State': 'Nevada'},
 'John': {'ID': 1234, 'State': 'California'},
 'David': {'ID': 5678, 'State': 'Arizona'}}
  

 Then lookup a person like 

  >>> d['John']
{'ID': 1234, 'State': 'California'}
>>> d['John']['State']
'California'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15689351)
 You want to search for http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions most likely. 

  [(str(y),y) for y in range(0,5)]
  

 This will give you tuples of strings and ints as a list, then iterate through that list like you would any other 



