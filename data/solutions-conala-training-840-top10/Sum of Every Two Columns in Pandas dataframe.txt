Query: Sum of Every Two Columns in Pandas dataframe
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51221921)
 You can use the  pandas.DataFrame.append  and  pandas.DataFrame.sum  methods: 

  df2 = df.append(df.sum(), ignore_index=True)
df2.iloc[-1, df2.columns.get_loc('Col3')] = np.nan
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21585017)
  

  In [57]: df.groupby(df.sum(), axis=1).sum()
Out[57]: 
   1  9
0  2  2
1  1  3
2  0  4

[3 rows x 2 columns]
  

  df.sum()  is your grouper. It sums over the 0 axis (the index), giving you the two groups:  1  (columns  a ,  b , and,  c ) and  9  (column  d ) . You want to group the columns ( axis=1 ), and take the sum of each group. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42880418)
 A solution would be to select all cases where rows are all-nan, then set the sum to nan:  

  df['total'] = df.sum(axis=1)    
df.loc[df['a'].isnull() & df['b'].isnull(),'total']=np.nan
  

   

  df['total'] = df.sum(axis=1)    
df.loc[df[['a','b']].isnull().all(1),'total']=np.nan
  

 The latter option is probably me practical, because you can create a list of columns  ['a','b', ... , 'z']  which you may want to sum. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51006472)
 Use  add() : 

  df_1.add(df_2)

   Index  Jan15  Feb15
0      0     13      9
  

  

  pd.DataFrame(df_1.values + df_2.values, 
             columns = df_1.columns.str.replace("\d", "")).reset_index()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20393087)
 something like this may be? 

  ((df['x'] * df['y']).sum() - df['x'].sum() * df['y'].mean()) ** 2
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34954573)
 You can align the dataframe, fill NAN with zero and perform simple addition. 

  d = pd.DataFrame(data, columns=['a','b','c'])
d2 = pd.DataFrame(data2, columns=['a','b','c','d'])
d, d2 = d.align(d2, fill_value=0)
sum_df = d + d2

In [23]: d
Out[23]: 
   a  b  c  d
0  1  2  4  0
1  1  6  5  0
2  1  8  7  0

In [24]: d2
Out[24]: 
   a  b  c   d
0  1  2  4   9
1  1  6  5   7
2  1  8  7  10

In [25]:sum_df
Out[25]: 
   a   b   c   d
0  2   4   8   9
1  2  12  10   7
2  2  16  14  10
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36815969)
   

  >>> df / (df.sum() - df)
          A         B         C
X  0.111111  0.181818  0.230769
Y  0.428571  0.444444  0.454545
Z  1.500000  1.166667  1.000000
  

 which works because  df.sum()  gives us the column sums: 

  >>> df.sum()
A    10
B    13
C    16
dtype: int64
  

 when we subtract  df , the sum broadcasts, and so each element becomes the appropriate denominator: 

  >>> df.sum() - df
   A   B   C
X  9  11  13
Y  7   9  11
Z  4   6   8
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49981743)
 Great link provided by Jeff. 

 Here you can find a example: 

  df1 = pd.DataFrame(); 
df1['a'] = [1,2,np.nan,3];
df1['b'] = [np.nan,2,np.nan,3]

df1
Out[4]: 
     a    b
0  1.0  NaN
1  2.0  2.0
2  NaN  NaN
3  3.0  3.0


df1.sum(axis=1, skipna=False)
Out[6]: 
0    NaN
1    4.0
2    NaN
3    6.0
dtype: float64

df1.sum(axis=1, skipna=True)
Out[7]: 
0    1.0
1    4.0
2    0.0
3    6.0
dtype: float64
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44241565)
 I think you need  sum  or maybe  mean  per rows ( axis=1 ) with division by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.div.html : 

  np.random.seed(123)
df = pd.DataFrame(np.random.randint(10, size=12).reshape(3,4),columns=list('abcd'))
print (df)
   a  b  c  d
0  2  2  6  1
1  3  9  6  1
2  0  1  9  0

print (df.sum(axis=1))
0    11
1    19
2    10
dtype: int64

print (df.div(df.sum(axis=1), axis=0))
          a         b         c         d
0  0.181818  0.181818  0.545455  0.090909
1  0.157895  0.473684  0.315789  0.052632
2  0.000000  0.100000  0.900000  0.000000
  

 

  print (df.mean(axis=1))
0    2.75
1    4.75
2    2.50
dtype: float64

print (df.div(df.mean(axis=1), axis=0))
          a         b         c         d
0  0.727273  0.727273  2.181818  0.363636
1  0.631579  1.894737  1.263158  0.210526
2  0.000000  0.400000  3.600000  0.000000
  



