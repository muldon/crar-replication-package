Query: Python - How to calculate equal parts of two dictionaries?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/638762)
 If we can assume d1 and d2 have the same keys: 

  d3 = {}
for k in d1.keys():
    intersection = set(d1[k]) & set(d2[k])
    d3[k] = [x for x in intersection]
  

 Otherwise, if we can't assume that, then it is a little messier: 

  d3 = {}
for k in set(d1.keys() + d2.keys()):
    intersection = set(d1.get(k, [])) & set(d2.get(k, []))
    d3[k] = [x for x in intersection]
  

  Edit:  New version taking the comments into account. This one only checks for keys that d1 and d2 have in common, which is what the poster seems to be asking. 

  d3 = {}
for k in set(d1.keys()) & set(d2.keys()):
    intersection = set(d1[k]) & set(d2[k])
    d3[k] = list(intersection)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/641134)
  

  d3= {}
for common_key in set(d1) & set(d2):
    common_values= set(d1[common_key]) & set(d2[common_key])
    d3[common_key]= list(common_values)
  

 EDIT after suggestion:</h3>

 If you want only keys having at least one common value item: 

  d3= {}
for common_key in set(d1) & set(d2):
    common_values= set(d1[common_key]) & set(d2[common_key])
    if common_values:
        d3[common_key]= list(common_values)
  

 You could keep the d1 and d2 values as sets instead of lists, if order and duplicates are not important. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/638409)
 Assuming this is Python, you want: 

  dict((x, set(y) & set(d1.get(x, ()))) for (x, y) in d2.iteritems())
  

 to generate the resulting dictionary "d3". 

 Python 3.0+ version</h3>

  >>> d3 = {k: list(set(d1.get(k,[])).intersection(v)) for k, v in d2.items()}
{0: ['11', '25', '38'], 1: ['38'], 2: ['11', '18'], 3: ['11', '25']}
  

 The above version (as well as Python 2.x version) allows empty intersections therefore additional filtering is required in general case: 

  >>> d3 = {k: v for k, v in d3.items() if v}
  

 Combining the above in one pass: 

  d3 = {}
for k, v in d2.items():
    # find common elements for d1 & d2
    v3 = set(d1.get(k,[])).intersection(v)
    if v3: # whether there are common elements
       d3[k] = list(v3) 
  

 

 [Edit: I made this post community wiki so that people can improve it if desired. I concede it might be a little hard to read if you're not used to reading this sort of thing in Python.] 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31932026)
 For python2 just use https://docs.python.org/2.7/library/stdtypes.html#dictionary-view-objects to find the intersection of the the dict keys: 

  dictview & other  

 
   Return the intersection of the dictview and the other object as a new set. 
 

  a = {'aa' : 'aaa', 'bb' : 'bbb', 'cc' : 'ccc'}
b = {'aa' : '111', 'bb' : '222', 'dd' : '444', 'ee' : '555'}

print({k:a[k] for k in a.viewkeys() & b})
{'aa': 'aaa', 'bb': 'bbb'}
  

 For python3 just use .keys which returns a dictview object: 

  a = {'aa' : 'aaa', 'bb' : 'bbb', 'cc' : 'ccc'}
b = {'aa' : '111', 'bb' : '222', 'dd' : '444', 'ee' : '555'}

print({k: a[k] for k in a.keys() & b})

{'aa': 'aaa', 'bb': 'bbb'}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53388729)
 Here is much more flexible method by which you can cut image in half or into 4 equal parts or 6 parts how ever parts you may need.  

 This code will crop image first into 2 piece Horizontally 
Then for each of that 2 piece it will crop another 3 images 
Leaving total 6 cropped images 
Change the CROP_W_SIZE and CROP_H_SIZE value to adjust your crop settings.
you will need a CROP folder where this code will save images to.  

  import cv2,time

img = cv2.imread('image.png')
img2 = img

height, width, channels = img.shape
# Number of pieces Horizontally 
CROP_W_SIZE  = 3 
# Number of pieces Vertically to each Horizontal  
CROP_H_SIZE = 2 

for ih in range(CROP_H_SIZE ):
    for iw in range(CROP_W_SIZE ):

        x = width/CROP_W_SIZE * iw 
        y = height/CROP_H_SIZE * ih
        h = (height / CROP_H_SIZE)
        w = (width / CROP_W_SIZE )
        print(x,y,h,w)
        img = img[y:y+h, x:x+w]



        NAME = str(time.time()) 
        cv2.imwrite("CROP/" + str(time.time()) +  ".png",img)
        img = img2
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/37835849)
 My recipe of symmetric difference between two dictionaries: 

  def find_dict_diffs(dict1, dict2):
    unequal_keys = []
    unequal_keys.extend(set(dict1.keys()).symmetric_difference(set(dict2.keys())))
    for k in dict1.keys():
        if dict1.get(k, 'N\A') != dict2.get(k, 'N\A'):
            unequal_keys.append(k)
    if unequal_keys:
        print 'param', 'dict1\t', 'dict2'
        for k in set(unequal_keys):
            print str(k)+'\t'+dict1.get(k, 'N\A')+'\t '+dict2.get(k, 'N\A')
    else:
        print 'Dicts are equal'

dict1 = {1:'a', 2:'b', 3:'c', 4:'d', 5:'e'}
dict2 = {1:'b', 2:'a', 3:'c', 4:'d', 6:'f'}

find_dict_diffs(dict1, dict2)
  

 And result is: 

  param   dict1   dict2
1       a       b
2       b       a
5       e       N\A
6       N\A     f
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/638439)
 The problem boils down to determining the common elements between the two entries.  (To obtain the result for all entries, just enclose the code in a loop over all of them.)  Furthermore, it looks like each entry is a set (i.e. it has not duplicate elements).  Therefore, all you need to do is find the set intersection between these elements.  Many languages offer a method or function for doing this; for instance in C++ use the set container and the set_intersection function.  This is a lot more efficient than comparing each element in one set against the other, as others have proposed. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28974718)
 here's a solution that can compare more than two dicts: 

  def diff_dict(dicts, default=None):
    diff_dict = {}
    # add 'list()' around 'd.keys()' for python 3 compatibility
    for k in set(sum([d.keys() for d in dicts], [])):
        # we can just use "values = [d.get(k, default) ..." below if 
        # we don't care that d1[k]=default and d2[k]=missing will
        # be treated as equal
        if any(k not in d for d in dicts):
            diff_dict[k] = [d.get(k, default) for d in dicts]
        else:
            values = [d[k] for d in dicts]
            if any(v != values[0] for v in values):
                diff_dict[k] = values
    return diff_dict
  

 usage example: 

  import matplotlib.pyplot as plt
diff_dict([plt.rcParams, plt.rcParamsDefault, plt.matplotlib.rcParamsOrig])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/18554039)
 You can easily calculate the intersection of sets, so create sets from the keys and use them for the intersection: 

  keys_a = set(dict_a.keys())
keys_b = set(dict_b.keys())
intersection = keys_a & keys_b # '&' operator is used for set intersection
  



