Query: How can I reload objects in my namespace in ipython
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6420389)
  

  reload(module)
  

 where module is the file with your functions 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6433753)
 you can also use autoreload, so that the modules you are working on are automatically reloaded at each statement, pretty handy for debugging, see: 

 https://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41384955)
 Best way to find out is to check the https://docs.python.org/3/library/imp.html#imp.reload, which says: 

 
   
     Python modules’ code is recompiled and the module-level code reexecuted , defining a new set of objects which are bound to names in the module’s dictionary. The init function of extension modules is not called a second time.  
    As with all other objects in Python the  old objects are only reclaimed after their reference counts drop to zero .  
    The  names in the module namespace are updated  to point to any new or changed objects.  
    Other  references to the old objects  (such as names external to the module)  are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired .  
   
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/437591)
 You can reload a module when it has already been imported by using the https://docs.python.org/2.7/library/functions.html#reload builtin function: 

  from importlib import reload  # Python 3.4+ only.
import foo

while True:
    # Do some things.
    if is_changed(foo):
        foo = reload(foo)
  

 In Python 3,  reload  was moved to the https://docs.python.org/3.2/library/imp.html module. In 3.4,  imp  was deprecated in favor of https://docs.python.org/3.4/library/importlib.html, and <a href="https://docs.python.org/3.4/library/importlib.html#importlib.reload"  was added to the latter. When targeting 3 or later, either reference the appropriate module when calling  reload  or import it. 

 I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself. 

 To quote from the docs: 

 
   Python modules’ code is recompiled and
  the module-level code reexecuted,
  defining a new set of objects which
  are bound to names in the module’s
  dictionary. The init function of
  extension modules is not called a
  second time. As with all other objects
  in Python the old objects are only
  reclaimed after their reference counts
  drop to zero. The names in the module
  namespace are updated to point to any
  new or changed objects. Other
  references to the old objects (such as
  names external to the module) are not
  rebound to refer to the new objects
  and must be updated in each namespace
  where they occur if that is desired. 
 

 As you noted in your question, you'll have to reconstruct  Foo  objects if the  Foo  class resides in the  foo  module. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/684186)
  Update for Python3 : (quoted from the https://stackoverflow.com/a/437591/3358272, since the last edit/comment here suggested a deprecated method) 

 
   In Python 3,  reload  was moved to the https://docs.python.org/3.2/library/imp.html module. In 3.4,  imp  was deprecated in favor of https://docs.python.org/3.4/library/importlib.html, and https://docs.python.org/3.4/library/importlib.html#importlib.reload was added to the latter. When targeting 3 or later, either reference the appropriate module when calling  reload  or import it. 
 

 Takeaway: 

 
 Python3 >= 3.4:  importlib.reload(packagename)  
 Python3 < 3.4:  imp.reload(packagename)  
 Python2: continue below 
 

 

 Use the  reload  builtin function: 

 https://docs.python.org/2/library/functions.html#reload 

 
   When  reload(module)  is executed: 
  
   
   Python modules’ code is recompiled and the module-level code reexecuted, defining a new set of objects which are bound to names in the module’s dictionary. The init function of extension modules is not called a second time. 
   As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero. 
   The names in the module namespace are updated to point to any new or changed objects. 
   Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired. 
   
 

 Example: 

  # Make a simple function that prints "version 1"
shell1$ echo 'def x(): print "version 1"' > mymodule.py

# Run the module
shell2$ python
>>> import mymodule
>>> mymodule.x()
version 1

# Change mymodule to print "version 2" (without exiting the python REPL)
shell2$ echo 'def x(): print "version 2"' > mymodule.py

# Back in that same python session
>>> reload(mymodule)
<module 'mymodule' from 'mymodule.pyc'>
>>> mymodule.x()
version 2
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31411015)
 Let's quote docs: 

 
   reload(module) 
  
   Reload a previously imported module. The argument must be a module object, so it must have been successfully imported before. This is
  useful if you have edited the module source file using an external
  editor and want to try out the new version without leaving the Python
  interpreter. The return value is the module object (the same as the
  module argument). 
 

  The argument must be a module object, so it must have been successfully imported before.  When you do  from inputs import *  you actually has no module object in your namespace. . 

 
   When reload(module) is executed: 
  
   
   Python modules’ code is recompiled and the module-level code reexecuted, defining a new set of objects which are bound to names in
  the module’s dictionary. The init function of extension modules is not
  called a second time. 
   As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero. 
   The names in the module namespace are updated to point to any new or changed objects. 
   Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be
  updated in each namespace where they occur if that is desired. 
   
 

  Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired.  You star-imported A, B and C are precisely other references. 

 To sum up, an example code would be: 

  import os  # see below

# fake module before changes
with open('inputs.py', 'w') as f:
    f.write("a, b, c = 1, 2, 3")

import inputs

# check if all members are correct
assert inputs.a == 1
assert inputs.b == 2
assert inputs.c == 3

os.unlink('inputs.pyc')  # Remove previously compiled byte-code.
# I'm now sure if it's mandatory, anyway for some reason Python
# does not recompile inputs.py in my experiments. 

# New fake file
with open('inputs.py', 'w') as f:
    f.write("a, b, c = 4, 5, 6")

reload(inputs)

# check if members has changes
assert inputs.a == 4
assert inputs.b == 5
assert inputs.c == 6
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20578632)
 You can use  sys.settrace , here is an example, I save the locals dict to an attribute of the wrap function: 

  import sys

def get_locals(func):
    def wrap(*args, **kw):
        sys.settrace(tracefunc)
        try:
            res = func(*args, **kw)
        finally:
            sys.settrace(None)
        return res

    def tracefunc(frame, event, arg):
        if event == "return":
            if frame.f_code is func.func_code:
                wrap.last_res = frame.f_locals
        return tracefunc    

    return wrap

@get_locals
def foo(x,y):
    z = x + y
    return z

def bar(x, y):
    z = x - y
    return z

a = 1
b = 2
c = foo(a, b)
d = bar(a, b)

print foo.last_res
  

 output: 

  {'y': 2, 'x': 1, 'z': 3}
  

 If you want it be globals, you can update global dict with the locals dict. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3747692)
 You can issue a  reload script , but that will not update your existing objects and will not go deep inside other modules. 

  Fortunately this is solved by  IPython  - a better python shell which supports auto-reloading.  

 To use autoreloading in  IPython , you'll have to type  import ipy_autoreload  first, or put it permanently in your  ~/.ipython/ipy_user_conf.py . 

  

 
  %autoreload 1
%aimport script
  
 

  %autoreload 1  means that every module loaded with  %aimport  will be reloaded before executing code from the prompt. This will  not  update any existing objects, however. 

 See http://ipython.org/ipython-doc/dev/config/extensions/autoreload.html for more fun things you can do. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35554510)
 Even though it would be handy if  %reset  would clear the namespace and the cache for the imports (as in the notebook) one can explicitly reload a previously imported module using  importlib.reload  in python3.4 or  imp.reload  in python3.0-3.3  (and if needed reset the kernel in a second step). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/49552654)
 I looked up Spyder's solution, which basically uses  del  on  sys.modules . Below I've slightly modified the code that I found in  ~/anaconda3/lib/python3.6/site-packages/spyder/utils/site/sitecustomize.py , and I've put this in a module called  reloader.py : 

  import sys


def _is_module_deletable(modname, modpath):
    if modname.startswith('_cython_inline'):
        # Don't return cached inline compiled .PYX files
        return False
    for path in [sys.prefix]:
        if modpath.startswith(path):
            return False
    else:
        return set(modname.split('.'))


def clear():
    """
    Del user modules to force Python to deeply reload them

    Do not del modules which are considered as system modules, i.e.
    modules installed in subdirectories of Python interpreter's binary
    Do not del C modules
    """
    log = []
    for modname, module in list(sys.modules.items()):
        modpath = getattr(module, '__file__', None)

        if modpath is None:
            # *module* is a C module that is statically linked into the
            # interpreter. There is no way to know its path, so we
            # choose to ignore it.
            continue

        if modname == 'reloader':
            # skip this module
            continue

        modules_to_delete = _is_module_deletable(modname, modpath)
        if modules_to_delete:
            log.append(modname)
            del sys.modules[modname]

    print("Reloaded modules:\n\n%s" % ", ".join(log))
  

 now just do  import reloader  and then call  reloader.clear()  



