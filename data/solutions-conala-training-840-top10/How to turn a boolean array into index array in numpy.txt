Query: How to turn a boolean array into index array in numpy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38665567)
 If you prefer the  indexer  way, you can convert your boolean list to numpy array: 

  print x[nd.array(mask)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8218361)
 Another option: 

  In [13]: numpy.where(mask)
Out[13]: (array([36, 68, 84, 92, 96, 98]),)
  

 which is the same thing as  numpy.where(mask==True) . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24411667)
  np.arange(100,1,-1)
array([100,  99,  98,  97,  96,  95,  94,  93,  92,  91,  90,  89,  88,
        87,  86,  85,  84,  83,  82,  81,  80,  79,  78,  77,  76,  75,
        74,  73,  72,  71,  70,  69,  68,  67,  66,  65,  64,  63,  62,
        61,  60,  59,  58,  57,  56,  55,  54,  53,  52,  51,  50,  49,
        48,  47,  46,  45,  44,  43,  42,  41,  40,  39,  38,  37,  36,
        35,  34,  33,  32,  31,  30,  29,  28,  27,  26,  25,  24,  23,
        22,  21,  20,  19,  18,  17,  16,  15,  14,  13,  12,  11,  10,
         9,   8,   7,   6,   5,   4,   3,   2])

x=np.arange(100,1,-1)

np.where(x&(x-1) == 0)
(array([36, 68, 84, 92, 96, 98]),)
  

 Now rephrase this like : 

  x[x&(x-1) == 0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25655494)
 Here's one way: 

  In [1]: index_array = np.array([3, 4, 7, 9])

In [2]: n = 15

In [3]: mask_array = np.zeros(n, dtype=int)

In [4]: mask_array[index_array] = 1

In [5]: mask_array
Out[5]: array([0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0])
  

 If the mask is always a range, you can eliminate  index_array , and assign  1  to a slice: 

  In [6]: mask_array = np.zeros(n, dtype=int)

In [7]: mask_array[5:10] = 1

In [8]: mask_array
Out[8]: array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0])
  

 If you want an array of boolean values instead of integers, change the  dtype  of  mask_array  when it is created: 

  In [11]: mask_array = np.zeros(n, dtype=bool)

In [12]: mask_array
Out[12]: 
array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False], dtype=bool)

In [13]: mask_array[5:10] = True

In [14]: mask_array
Out[14]: 
array([False, False, False, False, False,  True,  True,  True,  True,
        True, False, False, False, False, False], dtype=bool)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46531498)
  numpy  solution  

  import numpy as np 
a = np.array([True, False, True])
b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
b[:,a]

array([[1, 3],
       [4, 6],
       [7, 9]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26547501)
 You could also use the xor operator  ^  for that purpose. Simply "leftshift" the array by one and add  True  values to the right and then xor the new and the old array: 

  A = np.array([[False, False, True, True, True],
              [False, False, False, True, True],
              [False, False, True, True, True],
              [False, False, False, True, True],
              [False, False, False, False, True]])

X = np.hstack((A[:,1:], 
               np.array(np.ones((A.shape[0], 1)), dtype=np.bool))))
>>> array([[False, True, True, True, True],
           [False, False, True, True, True],
           [False, True, True, True, True],
           [False, False, True, True, True],
           [False, False, False, True, True]])

np.invert(A ^ X)
>>> array([[True, False, True, True, True],
           [True, True, False, True, True],
           [True, False, True, True, True],
           [True, True, False, True, True],
           [True, True, True, False, True]])
  

 This only works if all  False  values are left and followed by only  True  values. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29120699)
 What you could do is add the 2 arrays together this will overwrite with NaN values where they are none, then use this to generate a boolean mask index and then use the index to index into your original numpy arrays: 

  In [193]:

A = np.array([np.nan,   2,   np.nan,   3,   4])
B = np.array([   1  ,   2,     3   ,   4,  np.nan])
idx = np.where(~np.isnan(A+B))
idx
print(A[idx])
print(B[idx])
[ 2.  3.]
[ 2.  4.]
  

 output from  A+B : 

  In [194]:

A+B
Out[194]:
array([ nan,   4.,  nan,   7.,  nan])
  

  EDIT  

 As @Oliver W. has correctly pointed out, the  np.where  is unnecessary as  np.isnan  will produce a boolean index that you can use to index into the arrays: 

  In [199]:

A = np.array([np.nan,   2,   np.nan,   3,   4])
B = np.array([   1  ,   2,     3   ,   4,  np.nan])
idx = (~np.isnan(A+B))
print(A[idx])
print(B[idx])
[ 2.  3.]
[ 2.  4.]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8218269)
 You should be able to use http://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html to find this information. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26547307)
 Here is one way that works for your array (and also works for arrays with more mixed up rows such as  [F, T, T, F, T]  too): 

  >>> x = 4 - np.argmin(A[:,:,::-1], axis=2)[:,:,np.newaxis]
>>> (np.arange(5) * np.ones_like(A)) != x
array([[[ True, False,  True,  True,  True],
        [ True,  True, False,  True,  True],
        [ True, False,  True,  True,  True],
        [ True,  True, False,  True,  True],
        [ True,  True,  True, False,  True]],

       [[False,  True,  True,  True,  True],
        [False,  True,  True,  True,  True],
        [ True, False,  True,  True,  True],
        [False,  True,  True,  True,  True],
        [ True, False,  True,  True,  True]]], dtype=bool)
  

 Explanation: 

 
  Flip the array  A  on  axis=2  and use  argmin  across that axis to get the index of the first  False  value.   
  We need to know the index of the last occurrence of  False  in  A  (not the first occurrence in the flipped array). This is the value of the depth of the array (i.e. 5), minus 1, minus the index found in the previous step.   
  Make this new array of indices compatible with  A  by adding a new axis ( axis=2 ). Call this new array of indices  x .  
  Construct an array of the same dimensions as  A  where each row of  axis=2  is  np.arange(5) . The desired boolean array is found by testing for inequality of this constructed array with  x .  
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47788452)
 Your  mat : 

  In [352]: mat
Out[352]: 
array([[ 1., -1., -1., -1.],
       [ 1., -1., -1., -1.],
       [ 1.,  1., -1., -1.]])
  

 broadcasting  x  against  y : 

  In [353]: x[:,None]>y
Out[353]: 
array([[ True, False, False, False],
       [ True, False, False, False],
       [ True,  True, False, False]], dtype=bool)
  

 turn that boolean mask into 1/-1 array with  where : 

  In [354]: np.where(x[:,None]>y,1,-1)
Out[354]: 
array([[ 1, -1, -1, -1],
       [ 1, -1, -1, -1],
       [ 1,  1, -1, -1]])
  

 Or you could turn the boolean into a 0/1 array, and scale that to fit 

  (x[:,None]>y).astype(float)*2-1
  

 A double loop over two 1d arrays or lists can often be cast as an  outer  operation like this. 



