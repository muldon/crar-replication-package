Query: Create Union of All Values Contained in Multiple Lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2151553)
 http://docs.python.org/library/stdtypes.html#set.union does what you want: 

  >>> results_list = [[1,2,3], [1,2,4]]
>>> results_union = set().union(*results_list)
>>> print results_union
set([1, 2, 3, 4])
  

 You can also do this with more than two lists. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35722614)
 You can also follow this style  

  In [12]: a = ['Orange and Banana', 'Orange Banana']
In [13]: b = ['Grapes', 'Orange Banana']
In [14]: c = ['Foobanana', 'Orange and Banana']

In [20]: list(set(a) | set(b) | set(c))
Out[20]: ['Orange and Banana', 'Foobanana', 'Orange Banana', 'Grapes']

In [21]: list(set(a) & set(b) | set(c))
Out[21]: ['Orange and Banana', 'Foobanana', 'Orange Banana']    
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2151573)
 I  used the following to do intersections, which avoids the need for sets. 

  a, b= [[1,2,3], [1,2]]
s = filter( lambda x: x in b, a)
  

  

  s = [ x for x in b if x in a ]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2151551)
 Unions are not supported by lists, which are ordered, but are supported by sets. Check out https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47451243)
 Produce a union of all the keys, then iterate over that union to gather values: 

  result = {key: (d1.get(key), d2.get(key), d3.get(key))
          for key in d1.keys() | d2.keys() | d3.keys()}
  

 In Python 3, https://docs.python.org/3/library/stdtypes.html#dict.keys gives you a https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects, which acts like a set. You can create a union of all keys in all dictionaries with  |  on those objects. 

 In Python 2, use https://docs.python.org/2/library/stdtypes.html#dict.viewkeys instead. 

  

  >>> d1 = {'key1': 'x1', 'key2': 'y1', 'key4': 'z1'}
>>> d2 = {'key1': 'x2', 'key2': 'y2', 'key5': 'z2'}
>>> d3 = {'key1': 'x3', 'key3': 'y3', 'key4': 'z3'}
>>> {key: (d1.get(key), d2.get(key), d3.get(key))
...  for key in d1.keys() | d2.keys() | d3.keys()}
{'key1': ('x1', 'x2', 'x3'), 'key5': (None, 'z2', None), 'key3': (None, None, 'y3'), 'key4': ('z1', None, 'z3'), 'key2': ('y1', 'y2', None)}
>>> from pprint import pprint
>>> pprint(_)
{'key1': ('x1', 'x2', 'x3'),
 'key2': ('y1', 'y2', None),
 'key3': (None, None, 'y3'),
 'key4': ('z1', None, 'z3'),
 'key5': (None, 'z2', None)}
  

 For an arbitrary  sequence  of dictionaries, use  set().union(*dictionaries)  and a  tuple()  call on a generator expression: 

  dictionaries = (d1, d2, d3)  # or more
result = {key: tuple(d.get(key) for d in dictionaries)
          for key in set().union(*dictionaries)}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35324839)
 You could take the intersection of all the lists as a set, and the union of all the lists as a set, and take all elements in the union that are not in the intersection. There are  union ,  intersection , and  difference  methods to handle this that are documented https://docs.python.org/2/library/stdtypes.html#set 

  >>> union_set = set(l1).union(l2,l3)
>>> intersection_set = set(l1).intersection(l2,l3)
>>> union_set - intersection_set
set([0, 2, 6, 7])
  

 Or, as kdopen's answer shows, you can create a list of sets if you don't know the exact number of lists you'll be dealing with 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50784303)
 One way is to calculate the union of your dictionary keys. Then utilise  dict.get  within a dictionary comprehension to create a dictionary mapping keys to lists. 

  keys = set().union(d1, d2, d3)

final = {k: [d1.get(k, 'Not in d1'),
             d2.get(k, 'Not in d2'),
             d3.get(k, 'Not in d3')] for k in keys}

print(final)

{'bb': [2, 'Not in d2', 0],
 'aa': [1, 9, 5],
 'cc': [3, 4, 'Not in d3'],
 'kk': ['Not in d1', 'Not in d2', 88],
 'jj': ['Not in d1', 8, 'Not in d3']}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45962521)
 A  namedtuple  instance is an iterable of items.  set.union  simply merges the current set with the items in the  namedtuple .  

 However, what you want is put the  namedtuple  in another container/iterable, so the merge is done with the item (the  namedtuple ) contained in the new parent iterable: 

  s.union((b3,))
  

 It becomes more obvious if you actually think of the operator equivalent: 

  s = s | set(b3) #Â set(b3) -> {93, 'b3'}
  

  

  s = s | {b3}
  

 The  union  is performed with the outer iterable. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/28589844)
 Use https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset; you can produce the union of all values with: 

  set().union(*my_dict.values())
  

  

  >>> my_dict = {"a": [1, 6, 8, 4],
...            "b": [2, 7, 4, 9, 13],
...            "c": [9, 5, 6, 8, 11]
...           }
>>> set().union(*my_dict.values())
set([1, 2, 4, 5, 6, 7, 8, 9, 11, 13])
  

 Sets have no order (just like dictionary keys are unordered), but you stated you don't care about the order of the output. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52693367)
  defaultdict </h3>

 You can use  collections.defaultdict . Your dictionary comprehension will never work as you are not defining any lists. This is likely to be more efficient than using a dictionary comprehension, which would involve iterating each dictionary for each unique key. 

  from collections import defaultdict

dd = defaultdict(list)

for d in list_of_dictionaries:
    for k, v in d.items():
        dd[k].append(v)
  

  

  print(dd)

defaultdict(list,
            {0: [3523, 7245],
             1: [3524, 7246, 20898],
             2: [3540, 7247, 20899],
             4: [3541, 20901],
             5: [3542, 7249, 20902],
             3: [7248, 20900],
             6: [7250]})
  

 Dictionary comprehension</h3>

 A dictionary comprehension is  possible  but this requires calculating the union of keys and iterating the list of dictionaries for each of these keys: 

  allkeys = set().union(*list_of_dictionaries)

res = {k: [d[k] for d in list_of_dictionaries if k in d] for k in allkeys}

{0: [3523, 7245],
 1: [3524, 7246, 20898],
 2: [3540, 7247, 20899],
 3: [7248, 20900],
 4: [3541, 20901],
 5: [3542, 7249, 20902],
 6: [7250]}
  

 Time complexity</h3>

 Consider these terms: 

  n = sum(map(len, list_of_dictionaries))
m = len(set().union(*list_of_dictionaries))
k = len(list_of_dictionaries)
  

 In this context, the  defaultdict  solution will have complexity O( n ), while the dictionary comprehension will have complexity O( mk ), where  mk  >=  n . 



