Query: How can I generate a list of consecutive numbers?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29558209)
 Using Python's built in range function: 

  Python 2  

  input = 8
output = range(input + 1)

print output
[0, 1, 2, 3, 4, 5, 6, 7, 8]
  

  Python 3  

  input = 8
output = list(range(input + 1))

print(output)
[0, 1, 2, 3, 4, 5, 6, 7, 8]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24194190)
 You can use a https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions and https://docs.python.org/2/library/functions.html#zip. 

  my_range = np.array([range(i, j) for i, j in zip(my_array[:-1], my_array[1:])])
# array([range(0, 5), range(5, 12), range(12, 18), range(18, 23)], dtype=object)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29558739)
 Just to give you another example, although range(value) is by far the best way to do this, this might help you later on something else. 

  list = []
calc = 0

while int(calc) < 9:
    list.append(calc)
    calc = int(calc) + 1

print list
[0, 1, 2, 3, 4, 5, 6, 7, 8]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33492906)
 With numpy.cumsum: 

  In[1]: import numpy as np
In[2]: x = [5,10,15]
In[3]: x = np.array(x)
In[4]: y = x.cumsum()
In[5]: y
Out[6]: array([ 5, 15, 30])
  

 I am using Python 3.4 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33575788)
  import numpy as np
import pandas as pd    

(sum(np.diff(sorted(l)) == 1) >= n) & (all(pd.Series(l).value_counts() == 1))
  

 We test both conditions, first by finding the iterative difference of the sorted list  np.diff(sorted(l))  we can test if there are  n  consecutive integers. Lastly, we test if the  value_counts()  are all 1, indicating no repeats. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/52006938)
 My approach involves running through pairs of consecutive numbers and examine the gaps between them, just like everybody else's. The difference here is in the use of  iter()  to create two iterables from one list.  

  # Given:
l = [26.051, 26.084, 26.117, 26.15, 26.183, 31.146, 31.183, 34.477, 34.51, 34.543]
gap = 0.033

# Make two iterables (think: virtual lists) from one list
previous_sequence, current_sequence = iter(l), iter(l)

# Initialize the groups while advancing current_sequence by 1
# element at the same time
groups = [[next(current_sequence)]]

# Iterate through pairs of numbers
for previous, current in zip(previous_sequence, current_sequence):
    if abs(previous - current) > gap:
        # Large gap, we create a new empty sublist
        groups.append([])

    # Keep appending to the last sublist
    groups[-1].append(current)

print(groups)
  

 A few notes 

 
 My solution looks long, but if you subtract all the comments, blank likes, and the last print statement, it is only 6 lines 
 It is efficient because I did not actually duplicate the list 
 An empty list (empty  l ) will generate a  StopIteration  exception, so please ensure the list is not empty 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/33575553)
 Once you verify that the list has no duplicates, just compute the sum of the integers between  min(l)  and  max(l) : 

  def check(l):
    total = 0
    minimum = float('+inf')
    maximum = float('-inf')

    seen = set()

    for n in l:
        if n in seen:
            return False

        seen.add(n)

        if n < minimum:
            minimum = n

        if n > maximum:
            maximum = n

        total += n

    if 2 * total != maximum * (maximum + 1) - minimum * (minimum - 1):
        return False

    return True
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11097920)
 Where http://docs.python.org/library/random.html#module-random say  random  you can assume they mean uniformly random unless stated otherwise (that is, all possible outcomes have equal probability). 

 In order to generate numbers without consecutive numbers being generated, the simplest option is to make your own generator: 

  def random_non_repeating(min, max=None):
    if not max:
        min, max = 0, min
    old = None
    while True:
        current = random.randint(min, max)
        if not old == current:
            old = current
            yield current
  



