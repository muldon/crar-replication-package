Query: Converting html to text with Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/24715532)
 This is HTML -- use  BeautifulSoup  

  from bs4 import BeautifulSoup

soup = BeautifulSoup()
body = soup.new_tag('body')
soup.insert(0, body)
table = soup.new_tag('table')
body.insert(0, table)

with open('path/to/input/file.txt') as infile:
    for line in infile:
        row = soup.new_tag('tr')
        col1, col2 = line.split()
        for coltext in (col2, col1): # important that you reverse order
            col = soup.new_tag('td')
            col.string = coltext
            row.insert(0, col)
        table.insert(len(table.contents), row)

with open('path/to/output/file.html', 'w') as outfile:
    outfile.write(soup.prettify())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24715133)
 Just change your code to include     and     tags to ensure that your text stays formatted the way you have formatted it in your original text file. 

  contents = open"C:\\Users\\Suleiman JK\\Desktop\\Static_hash\\test","r")
with open("suleiman.html", "w") as e:
    for lines in contents.readlines():
        e.write(" " + lines + "   \n")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35086151)
 In Python 2.6+, you could https://docs.python.org/2/library/io.html that is default (https://docs.python.org/3/library/functions.html#open) on Python 3: 

  import io

with io.open(filename, 'w', encoding=character_encoding) as file:
    file.write(unicode_text)
  

 It might be more convenient if you need to write the text incrementally (you don't need to call  unicode_text.encode(character_encoding)  multiple times). Unlike  codecs  module,  io  module has a proper universal newlines support. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9773059)
 Python since 2.2 has http://docs.python.org/library/htmlparser.html. It's not the most efficient nor the easiest use, but it's there...  

 And if you're dealing with proper XHTML (or you can pass it through Tidy), you can use much better http://docs.python.org/library/xml.etree.elementtree.html 

  from xml.etree.ElementTree import ElementTree
tree = ElementTree()
tree.parse("your_document.xhtml")
your_string = tree.tostring(method="text", encoding="utf-8")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/154790)
 https://github.com/pediapress/mwlib provides ways of converting MediaWiki formatted text into HTML, PDF, DocBook and OpenOffice formats. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25689)
 Try PDFMiner.  It can extract text from PDF files as HTML, SGML or "Tagged PDF" format. 

 http://www.unixuser.org/~euske/python/pdfminer/index.html 

 The Tagged PDF format seems to be the cleanest, and stripping out the XML tags leaves just the bare text. 

 A Python 3 version is available under: 

 
 https://github.com/pdfminer/pdfminer.six 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46750751)
 Unicode string handling is standardized in Python 3. 

 
 Char are stored in Unicode 
  You only need to open file in utf-8 

  out1 = "(嘉南大圳 ㄐㄧㄚ　ㄋㄢˊ　ㄉㄚˋ　ㄗㄨㄣˋ )"
fobj = open("t1.txt", "w", encoding="utf-8")
fobj.write(out1)
fobj.close()
   
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/16423634)
 Here is a version of xperroni's answer which is a bit more complete. It skips script and style sections and translates charrefs (e.g., &#39;) and HTML entities (e.g., &amp;). 

 It also includes a trivial plain-text-to-html inverse converter. 

  """
HTML <-> text conversions.
"""
from HTMLParser import HTMLParser, HTMLParseError
from htmlentitydefs import name2codepoint
import re

class _HTMLToText(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self._buf = []
        self.hide_output = False

    def handle_starttag(self, tag, attrs):
        if tag in ('p', 'br') and not self.hide_output:
            self._buf.append('\n')
        elif tag in ('script', 'style'):
            self.hide_output = True

    def handle_startendtag(self, tag, attrs):
        if tag == 'br':
            self._buf.append('\n')

    def handle_endtag(self, tag):
        if tag == 'p':
            self._buf.append('\n')
        elif tag in ('script', 'style'):
            self.hide_output = False

    def handle_data(self, text):
        if text and not self.hide_output:
            self._buf.append(re.sub(r'\s+', ' ', text))

    def handle_entityref(self, name):
        if name in name2codepoint and not self.hide_output:
            c = unichr(name2codepoint[name])
            self._buf.append(c)

    def handle_charref(self, name):
        if not self.hide_output:
            n = int(name[1:], 16) if name.startswith('x') else int(name)
            self._buf.append(unichr(n))

    def get_text(self):
        return re.sub(r' +', ' ', ''.join(self._buf))

def html_to_text(html):
    """
    Given a piece of HTML, return the plain text it contains.
    This handles entities and char refs, but not javascript and stylesheets.
    """
    parser = _HTMLToText()
    try:
        parser.feed(html)
        parser.close()
    except HTMLParseError:
        pass
    return parser.get_text()

def text_to_html(text):
    """
    Convert the given text to html, wrapping what looks like URLs with <a> tags,
    converting newlines to   tags and converting confusing chars into html
    entities.
    """
    def f(mo):
        t = mo.group()
        if len(t) == 1:
            return {'&':'&amp;', "'":'&#39;', '"':'"', '<':'<', '>':'>'}.get(t)
        return '%s' % (t, t)
    return re.sub(r'https?://[^] ()"\';]+|[&\'"<>]', f, text)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/7778368)
 I needed a way to strip tags  and  decode HTML entities to plain text. The following solution is based on Eloff's answer (which I couldn't use because it strips entities). 

  from HTMLParser import HTMLParser
import htmlentitydefs

class HTMLTextExtractor(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.result = [ ]

    def handle_data(self, d):
        self.result.append(d)

    def handle_charref(self, number):
        codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)
        self.result.append(unichr(codepoint))

    def handle_entityref(self, name):
        codepoint = htmlentitydefs.name2codepoint[name]
        self.result.append(unichr(codepoint))

    def get_text(self):
        return u''.join(self.result)

def html_to_text(html):
    s = HTMLTextExtractor()
    s.feed(html)
    return s.get_text()
  

  

  html = u'#'
print repr(html_to_text(html))
  

  

  u'Demo (\xac \u0394\u03b7\u03bc\u03ce)'
  

 Error handling: 

 
 Invalid HTML structure may cause an http://docs.python.org/library/htmlparser.html#HTMLParser.HTMLParseError. 
 Invalid named HTML entities (such as  &#apos; , which is valid in XML and XHTML, but not plain HTML) will cause a  ValueError  exception. 
 Numeric HTML entities specifying code points outside the Unicode range acceptable by Python (such as, on some systems, characters outside the http://en.wikipedia.org/wiki/Basic_Multilingual_Plane) will cause a  ValueError  exception. 
 

  Security note:  Do not confuse HTML stripping (converting HTML into plain text) with HTML sanitizing (converting plain text into HTML). This answer will remove HTML and decode entities into plain text – that does not make the result safe to use in a HTML context. 

 Example:  <script>alert("Hello");</script>  will be converted to  <script>alert("Hello");</script> , which is 100% correct behavior, but obviously not sufficient if the resulting plain text is inserted as-is into a HTML page. 

 The rule is not hard:  Any time  you insert a plain-text string into HTML output, you should  always  HTML escape it (using  cgi.escape(s, True) ), even if you "know" that it doesn't contain HTML (e.g. because you stripped HTML content). 

 (However, the OP asked about printing the result to the console, in which case no HTML escaping is needed.) 

  Python 3.4+ version:  (with doctest!) 

  import html.parser

class HTMLTextExtractor(html.parser.HTMLParser):
    def __init__(self):
        super(HTMLTextExtractor, self).__init__()
        self.result = [ ]

    def handle_data(self, d):
        self.result.append(d)

    def get_text(self):
        return ''.join(self.result)

def html_to_text(html):
    """Converts HTML to plain text (stripping tags and converting entities).
    >>> html_to_text('#')
    'Demo (\xac \u0394\u03b7\u03bc\u03ce)'

    "Plain text" doesn't mean result can safely be used as-is in HTML.
    >>> html_to_text('<script>alert("Hello");</script>')
    '<script>alert("Hello");</script>'

    Always use html.escape to sanitize text before using in an HTML context!

    HTMLParser will do its best to make sense of invalid HTML.
    >>> html_to_text('x < y &lt z <!--b')
    'x < y < z '

    Unrecognized named entities are included as-is. ''' is recognized,
    despite being XML only.
    >>> html_to_text('&nosuchentity; ' ')
    "&nosuchentity; ' "
    """
    s = HTMLTextExtractor()
    s.feed(html)
    return s.get_text()
  

 Note that HTMLParser has improved in Python 3 (meaning less code and better error handling). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/1668118)
 Here's a python library which does HTML parsing: 

 
 http://codespeak.net/lxml/lxmlhtml.html 
 

 http://www.crummy.com/software/BeautifulSoup/ is another option. 



