Query: Regular expression in Python sentence extractor
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/27947757)
 Here you get it as an iterator. . It considers a sentence to be anything (non-greedy) until a period, which is followed by either a space or the end of the line. 

  import re
sentence = re.compile("\w.*?\.(?= |$)", re.MULTILINE)
def iterphrases(text):
    return (match.group(0) for match in sentence.finditer(text))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27947642)
 if you don't HAVE to use an iterator, https://docs.python.org/2/library/re.html#re.split would be a bit simpler for your use case (custom definition of a sentence): 

  re.split(r'\.\s', text)
  

 Note the last sentence will include  .  or will be empty (if  text  ends with whitespace after last period), to fix that: 

  re.split(r'\.\s', re.sub(r'\.\s*$', '', text))
  

 also have a look at a bit more general case in the answer for https://stackoverflow.com/a/25736082/1176601 

 and for a completely general solution you would need a proper  sentence tokenizer , such as http://www.nltk.org/api/nltk.tokenize.html 

  nltk.tokenize.sent_tokenize(text)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42315425)
 . Just use the following regex: 

  \S+\sand\s\S+
  

 https://regex101.com/r/fKLSar/1 

 The issue was the  \S*  you added around the  and . That matches any number of non-whitespace characters around the "and", which would match words like "brandy".  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42315097)
  

  \w+(?=\sand\s)|(?<=\sand\s)\w+
  

 Which is: 

 
 Some word ( \w+ ) matched only where it precedes  \sand\s  with a positive lookahead assertion, OR 
 Some workd ( \w+ ) matched only where it follows  \sAnd\s  with a positive look-behind assertion 
 

 The positive lookbehind needs a string of fixed length so you can't do  (?<=\s+and\s+)  so this solution assumes all the spacing is single spaces. 

 https://regex101.com/r/jXKfYp/2 at regex101.com 

 https://i.stack.imgur.com/MVo58.png 

 Edit 

 Further to the update in the question to get the  something    and    something else  as a three-word phrase you can try: 

  \w+(?:\s+and\s+)\w+
  

 <a href="https://regex101.com/r/RlosBh/1"  with this output: 

 <a href="https://i.stack.imgur.com/JeS37.png"  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20993680)
 Use  \b  word boundaries to test for the words: 

  for word in wordlist:
    if re.search(r'\b{}\b'.format(re.escape(word)), sentence):
        print '{} matched'.format(word)
  

 but you could also just split the sentence into separate words. Using a set for the word list would make the test more efficient: 

  words = set(wordlist)
if words.intersection(sentence.split()):
    # no looping over `words` required.
  

  

  >>> import re
>>> wordlist = ['hypothesis' , 'test' , 'results' , 'total']
>>> sentence = "These tests will benefit in the long run."
>>> for word in wordlist:
...     if re.search(r'\b{}\b'.format(re.escape(word)), sentence):
...         print '{} matched'.format(word)
... 
>>> words = set(wordlist)
>>> words.intersection(sentence.split())
set([])
>>> sentence = 'Lets test this hypothesis that the results total the outcome'
>>> for word in wordlist:
...     if re.search(r'\b{}\b'.format(re.escape(word)), sentence):
...         print '{} matched'.format(word)
... 
hypothesis matched
test matched
results matched
total matched
>>> words.intersection(sentence.split())
set(['test', 'total', 'hypothesis', 'results'])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13913588)
 Have you though to use something beyond Regex? 

 Consider this and and if it works expand from this solution 

  >>> 'total' in question.split()
True
  

  

  >>> words = {'total','staff'}
>>> [e   for e in words if e in question.split()]
['total', 'staff']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19168349)
 You can subclass from  CrawlSpider  and use the  allow  option from  SgmlLinkExtractor , which accepts a regular expression: 

  rules = (
  Rule(SgmlLinkExtractor(allow=(r'_FL_'), follow=True),
  Rule(SgmlLinkExtractor(allow=(r'...'), callback='parse_item').
)

def parse_item(self, response):
  ...
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35120616)
 You can split your patterns easily with  

  regexs = 'sphere_a [sS]phere_b [sS]pher* [sS]pher* sph[eE]* sphere_a ^sphe* ^sp[hH]er*'.split(). 
  

 Then you can iterate over the patterns like this:  

  for regex in regexs:
    m = re.findall(regex, content)
  

 But it will return duplicate matches. 



