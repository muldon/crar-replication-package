Query: How to use regex with optional characters in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9891859)
 Use the "one or zero" quantifier,  ? . Your regex becomes:  (\d+(\.\d+)?) . 

 See Chapter 8 of the http://pine.barebones.com/manual/TextWrangler_User_Manual.pdf for more details about the different quantifiers available, and how to use them. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9891936)
 Read up on the http://docs.python.org/library/re.html library. The link answers your question and explains why. 

 However, to match a digit followed by more digits with an optional decimal, you can use 

  re.compile("(\d+(\.\d+)?)")
  

 In this example, the ?   .\d+  capture group specifies that this portion is optional. 

 http://regexr.com?30fbt 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24514190)
 You cannot use optional matching group in replacement string. 

 How about following approach? 

  >>> import re
>>> test1 = "url#123"
>>> test2 = "url"
>>> re.sub(r"url((?:#[0-9]+)?)", r"new_url\1", test1)
new_url#123
>>> re.sub(r"url((?:#[0-9]+)?)", r"new_url\1", test2)
new_url
  

 BTW, if you use https://pypi.python.org/pypi/regex, you can use optional matching group: 

  >>> import regex
>>> test1 = "url#123"
>>> test2 = "url"
>>> regex.sub(r"url(#[0-9]+)?", r"new_url\1", test1)
'new_url#123'
>>> regex.sub(r"url(#[0-9]+)?", r"new_url\1", test2)
'new_url'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38620749)
 You can use  re.findall  to find out all single character optionally followed by a pair of parenthesis: 

  import re
s = "F(230,24)F[f(22)_(23);(2)%[+(45)FF]]"
re.findall("[^()](?", s)

['F(230,24)',
 'F',
 '[',
 'f(22)',
 '_(23)',
 ';(2)',
 '%',
 '[',
 '+(45)',
 'F',
 'F',
 ']',
 ']']
  

 
  [^()]  match a single character except for parenthesis; 
  (?  denotes a non-capture group( ?: ) enclosed by a pair of parenthesis and use  ?  to make the group optional; 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9891850)
 You can put a  ?  after a group of characters to make it optional. 

 You want a dot followed by any number of digits  \.\d+ , grouped together  (\.\d+) , optionally  (\.\d+)? .  

  import re
print re.match("(\d+(\.\d+)?)", "3434.35353").group(1)
  



  3434.35353
  



  print re.match("(\d+(\.\d+)?)", "3434").group(1)
  



  3434
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36312386)
 Your regex seems incomplete, but you were on the right track. Note that  a pipe symbol inside a character class is treated as a literal and your  [0-9|+]  matches a digit or a  |  or a  +  symbols. 

 You may use 

  ,?\+\d+_[^,]+
  

 See the https://regex101.com/r/tN2fV9/3 

 Explanation: 

 
  ,?  - optional  ,  (if the "word" is at the beginning of the string, it should be optional) 
  \+  - a literal  +  
  \d+  - 1+ digits 
  _  - a literal underscore 
  [^,]+  - 1+ characters other than  ,  
 

 https://ideone.com/l3t7B1: 

  import re
p = re.compile(r',?\+\d+_[^,]+')
test_str = "+1223,+12_remove_me,+222,+2223_remove_me"
result = p.sub("", test_str)
print(result)
# => +1223,+222
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37490696)
 You can use 

  ^([^:(]+?)(\s*[:(])
  

 and replace with  <\1>\2 . See the https://regex101.com/r/uU7vV6/1. 

 The pattern matches: 

 
  ^  - start of string  
  ([^:(]+?)  - Group 1 matching 1 or more characters other than  :  and  (  but as few as possible up to the first... 
  (\s*[:(])  - Group 2: zero or more whitespaces followed with a  :  or  ( . 
 

 The lazy quantifier  +?  is required to force the "trailing" spaces fall into Group 2. 

 http://ideone.com/6FK2pF: 

  import re
p = re.compile(r'^([^:(]+?)(\s*[:(])', re.MULTILINE)
s = "foo : bar\nfoo bar: baz\nfoo (bar): baz"
result = p.sub(r"<\1>\2", s)
print(result)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24368740)
 Do you really need a look around? This regular expression should do it  [^KR]*[KR]  

  In [1] import re                        # Import the regex library
In [2] s = "AAAKBBBBR"                  # Define the input string
In [3] re.findall(r'[^KR]*[KR]', s)     # Find all the matches in the string
Out[3] ['AAAK', 'BBBBR']
  

  

  [^KR] # ^ in character classes is negation so will match any character except K/R
*     # Quantifier used to match zero or more of the previous expression
[KR]  # Simple character class matching K/R
  

 In words  match zero or more characters that are not K/R that are followed by K/R.  

 You might want to use the  +  quantifier to match at least one or more instead of  *  for cases like 

  In [1] import re    
In [2] s = "KAAAKBBBBR"
In [3] re.findall(r'[^KR]*[KR]', s)
Out[3] ['K', 'AAAK', 'BBBBR']
In [4] re.findall(r'[^KR]+[KR]', s)
Out[4] ['AAAK', 'BBBBR']
  

 To make the trailing  [KR]  optional you can use  ?  

  In [5] s = 'AAAKBBBBRAAA'
In [6] re.findall(r'[^KR]+[KR]?', s)
Out[6] ['AAAK', 'BBBBR', 'AAA']
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35916002)
 The https://pypi.python.org/pypi/regex supports recursion. You can install it and use the following code: 

  >>> import regex
>>> p = regex.compile(r'\b[a-zA-Z]\w*(\((?>1))*\))')
>>> s = "x(n)+(y(n)+1)*n\nx(n(a,b),a,b)+2^(y(n(a,b)+a+b)+1)\nx(n)+(y(n)/(N(n)))"
>>> print(p.sub(lambda m: m.group().replace("(", "[").replace(")", "]"), s))
x[n]+(y[n]+1)*n
x[n[a,b],a,b]+2^(y[n[a,b]+a+b]+1)
x[n]+(y[n]/(N[n]))
  

 The https://regex101.com/r/oJ4jK7/1. 

 The  \b[a-zA-Z]\w*  matches an identifier-like sequence (a whole word starting with a letter and then followed with optional word characters (digits, letters or an underscore) and  (\((?>1))*\))  matches nested  (...()...)  sequences thanks to the subroutine call  (?1)  (that recurses, repeats, the pattern in Group 1). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/29449198)
 You can make part after first 14 characters optional: 

  regex_example = re.compile(
   '(\d{10}\s\d-\d(?:\d{0,2}(?:(?:-\d{0,3})?(?:-\d{0,4})?)?)?)')
  

 https://regex101.com/r/yM1nJ4/3 



