Query: How to count values in a certain range in a Numpy array?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28663926)
 Convert your array  y  to list  l  and then do  l.count(1)  and  l.count(0)  

  >>> y = numpy.array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])
>>> l = list(y)
>>> l.count(1)
4
>>> l.count(0)
8 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35549699)
 What about using https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.count_nonzero.html, something like  

  >>> import numpy as np
>>> y = np.array([1, 2, 2, 2, 2, 0, 2, 3, 3, 3, 0, 0, 2, 2, 0])

>>> np.count_nonzero(y == 1)
1
>>> np.count_nonzero(y == 2)
7
>>> np.count_nonzero(y == 3)
3
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41302572)
 A simple iterative approach to do this would be: 

  data = [[-10,  0],
 [-9,   1],
 [ 9,  -5],
 [-8,   6],
 [-7,  -5],
 [-7,  -6],
 [ 0, -10]]

final = []
for outer_values in data:
    if -10 <= outer_values[0] <= 0 and  -9 <= outer_values[1] <= 1:
        final.append(outer_values)
  

 output: 

  [[-10, 0], [-9, 1], [-7, -5], [-7, -6]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9560228)
 If your array is called  a , the number of elements fulfilling  25 < x < 100  is 

  ((25 < a) & (a < 100)).sum()
  

 The expression  (25 < a) & (a < 100)  results in a Boolean array with the same shape as  a  with the value  True  for all elements that satisfy the condition.  Summing over this Boolean array treats  True  values as  1  and  False  values as  0 . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9560242)
 You could use  histogram . Here's a basic usage example: 

  >>> import numpy
>>> a = numpy.random.random(size=100) * 100 
>>> numpy.histogram(a, bins=(0.0, 7.3, 22.4, 55.5, 77, 79, 98, 100))
(array([ 8, 14, 34, 31,  0, 12,  1]), 
 array([   0. ,    7.3,   22.4,   55.5,   77. ,   79. ,   98. ,  100. ]))
  

 In your particular case, it would look something like this: 

  >>> numpy.histogram(a, bins=(25, 100))
(array([73]), array([ 25, 100]))
  

 Additionally, when you have a list of strings, you have to explicitly specify the type, so that  numpy  knows to produce an array of floats instead of a list of strings. 

  >>> strings = [str(i) for i in range(10)]
>>> numpy.array(strings)
array(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], 
      dtype='|S1')
>>> numpy.array(strings, dtype=float)
array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40681436)
 A general and simple answer would be: 

  numpy.sum(MyArray==x)   # sum of a binary list of the occurence of x (=0 or 1) in MyArray
  

 which would result into this full code as exemple 

  import numpy
MyArray=numpy.array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])  # array we want to search in
x=0   # the value I want to count (can be iterator, in a list, etc.)
numpy.sum(MyArray==0)   # sum of a binary list of the occurence of x in MyArray
  

 Now if MyArray is in  multiple dimensions  and you want to count the occurence of a distribution of values in line (= pattern hereafter) 

  MyArray=numpy.array([[6, 1],[4, 5],[0, 7],[5, 1],[2, 5],[1, 2],[3, 2],[0, 2],[2, 5],[5, 1],[3, 0]])
x=numpy.array([5,1])   # the value I want to count (can be iterator, in a list, etc.)
temp = numpy.ascontiguousarray(MyArray).view(numpy.dtype((numpy.void, MyArray.dtype.itemsize * MyArray.shape[1])))  # convert the 2d-array into an array of analyzable patterns
xt=numpy.ascontiguousarray(x).view(numpy.dtype((numpy.void, x.dtype.itemsize * x.shape[0])))  # convert what you search into one analyzable pattern
numpy.sum(temp==xt)  # count of the searched pattern in the list of patterns
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10478841)
  

  numpy.count_nonzero((25 < a) & (a < 100))
  

 This first creates an array of booleans with one boolean for each input number in array  a , and then count the number of non-False (i.e. True) values (which gives the number of matching numbers). 

 Note, however, that this approach is twice as slow as Sven's  .sum()  approach, on an array of 100k numbers (NumPy 1.6.1, Python 2.7.3)–about 300 µs versus 150 µs. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42862472)
 No one suggested to use https://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html with  minlength = np.size(input) , but it seems to be a good solution, and definitely the  fastest : 

  In [1]: choices = np.random.randint(0, 100, 10000)

In [2]: %timeit [ np.sum(choices == k) for k in range(min(choices), max(choices)+1) ]
100 loops, best of 3: 2.67 ms per loop

In [3]: %timeit np.unique(choices, return_counts=True)
1000 loops, best of 3: 388 µs per loop

In [4]: %timeit np.bincount(choices, minlength=np.size(choices))
100000 loops, best of 3: 16.3 µs per loop
  

 That's a crazy speedup between  numpy.unique(x, return_counts=True)  and  numpy.bincount(x, minlength=np.max(x))  ! 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9546998)
 If you are fine with using the external library NumPy, then you just need to call  numpy.histogram() : 

  >>> data = [82, 85, 90, 91, 70, 87, 45]
>>> counts, bins = numpy.histogram(data, bins=10, range=(0, 100))
>>> counts
array([0, 0, 0, 0, 1, 0, 0, 1, 3, 2])
>>> bins
array([   0.,   10.,   20.,   30.,   40.,   50.,   60.,   70.,   80.,
         90.,  100.])
  



