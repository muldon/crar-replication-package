Query: How to tell if string starts with a number?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5577536)
 Python's  string  library has  isdigit()  method: 

  string[0].isdigit()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5577557)
 sometimes, you can use regex 

  >>> import re
>>> re.search('^\s*[0-9]',"0abc")
<_sre.SRE_Match object at 0xb7722fa8>
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45332906)
 You can also use  try...except : 

  try:
    int(string[0])
    # do your stuff
except:
    pass # or do your stuff
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5578963)
 Your code won't wk; you need    instead of  || . 

  

  '0' <= strg[:1] <= '9'
  

  

  strg[:1] in '0123456789'
  

 , if you are really crazy about  startswith , 

  strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45148602)
 There are many options. Note that you can 'slice' a string to get the first four characters. Then you can compare that with the spaces. Here's an example: 

  mystring[:4] == '    '
  

 You can also use the  startswith  function of strings: 

  mystring.startswith('    ')
  

 Note that if the string starts with 5 or more spaces, both of these approaches will still return True. If you need the method find  exactly 4  starting spaces, a regular expression may be better suited. 

 If the number of spaces can be a variable, simply use  ' '*N  where  N  is the number of spaces to match. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6643059)
 an other solution if your string do not necessarry starts, or ends with '/', could be: 

  '/123/456/789/'.strip('/').split('/')
> ['123', '456', '789']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5577582)
 Here are my "answers" (trying to be unique here, I don't actually recommend either for this particular case :-) 

 Using <del>http://docs.python.org/library/functions.html#ord and</del> the special  a <= b <= c  form: 

  //starts_with_digit = ord('0') <= ord(mystring[0]) <= ord('9')
//I was thinking too much in C. Strings are perfectly comparable.
starts_with_digit = '0' <= mystring[0] <= '9'
  

 (This  a <= b <= c , like  a < b < c , is a special Python construct and it's kind of neat: compare  1 < 2 < 3  (true) and  1 < 3 < 2  (false) and  (1 < 3) < 2  (true). This isn't how it works in most other languages.) 

 Using a http://docs.python.org/library/re.html: 

  import re
//starts_with_digit = re.match(r"^\d", mystring) is not None
//re.match is already anchored
starts_with_digit = re.match(r"\d", mystring) is not None
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15994827)
 The first non-prime  a  you hit,  a  stops growing. This works: 

  primes = [2, 3]

a = 3
while len(primes) != 1001:
    a += 2
    for i in primes:
        if a % i == 0:
            break
    else:
        print(primes) # I'm not sure why you'd want to do this
        primes.append(a)

print(primes[1000]) # Note the index: 1000, not 1002
  



