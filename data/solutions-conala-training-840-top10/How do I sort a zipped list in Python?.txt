Query: How do I sort a zipped list in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43698883)
 In your case you don't need to sort at all because you just want an enumerated reversed list of your  names : 

  >>> list(enumerate(names[::-1]))      # reverse by slicing
[(0, 'x'), (1, 't'), (2, 'a'), (3, 'd')]

>>> list(enumerate(reversed(names)))  # but reversed is also possible
[(0, 'x'), (1, 't'), (2, 'a'), (3, 'd')]
  

 

 But if you need to sort it then you should use  sorted  (as provided by @utdemir or @Ulrich Dangel) because it will work on Python2 ( zip  and  itertools.zip ) and Python3 ( zip ) and won't fail with an  AttributeError  like  .sort(...)  (which only works on Python2  zip  because there  zip  returns a  list ): 

  >>> # Fails with Python 3's zip:
>>> zipped = zip(names, vals)
>>> zipped.sort(lambda x: x[1])
AttributeError: 'zip' object has no attribute 'sort'

>>> # Fails with Python 2's itertools izip:
>>> from itertools import izip
>>> zipped = izip(names, vals)
>>> zipped.sort(lambda x: x[1])
AttributeError: 'itertools.izip' object has no attribute 'sort'
  

 But  sorted  does work in each case: 

  >>> zipped = izip(names, vals)
>>> sorted(zipped, key=lambda x: x[1])
[('x', 0), ('t', 1), ('a', 2), ('d', 3)]

>>> zipped = zip(names, vals)  # python 3
>>> sorted(zipped, key=lambda x: x[1])
[('x', 0), ('t', 1), ('a', 2), ('d', 3)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11601991)
 I would zip then sort: 

  zipped = zip(filename, human_rating, …)
zipped.sort()
for row in zipped:
     print "{:>6s}{:>5.1f}…".format(*row)
  

 If you really want to get the individual lists back, I would sort them as above, then unzip them: 

  filename, human_rating, … = zip(*zipped)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7142271)
 It's simpler and more efficient to zip them in order in the first place (if you can). Given your example it's pretty easy: 

  >>> names = 'datx'
>>> zip(reversed(names), xrange(len(names)))
<<< [('x', 0), ('t', 1), ('a', 2), ('d', 3)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7142261)
  import operator
sorted(zipped, key=operator.itemgetter(1))
  

 If you want it a little bit more faster, do  ig = operator.itemgetter(1)  and use  ig  as key function. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34216647)
 You could zip the two lists as  

  p = zip(vectorizer.get_feature_names(), idf)
  

 sort the zipped list as 

  p.sort(key = lambda t: t[1])
  

 Print them on console check and write them to a file. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5284207)
 Zip the two lists up into tuples, sort, then take the HTML back out of the tuple: 

  zipped = zip(timestamps, htmls)
zipped.sort()
sorted_htmls = [html for (timestamp, html) in zipped]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43698560)
 You can't use  sort  on zip object,  zip  object doesn't have such attribute. But, you can convert the  zip  object to a list with  list(zipped_object)  and then apply  sort  on it, to do an in-place sort.  

 But, as zipped object is also an iterable, my recommendation is to use https://docs.python.org/2/howto/sorting.html#key-functions. It will let you write a sort function also, based on which the collection will be sorted. 

 Here, I am sorting it based on the values of  y  in each  (x,y)  pair. . 

  >>> a = [3,9,2,24,1,6]
>>> b = ['a','b','c','d','e']
>>> c = zip(a,b)
>>> 
>>> sorted(c, key = lambda x:x[1])
[(3, 'a'), (9, 'b'), (2, 'c'), (24, 'd'), (1, 'e')]
  

 Note that,  sorted  will return a new sorted list, whereas  sort  will sort the collection in place.  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13635074)
  lst1, lst2 = zip(*zipped_list)
  

 should give you the unzipped list. 

  *zipped_list  unpacks the zipped_list object. it then passes all the tuples from the zipped_list object to zip, which just packs them back up as they were when you passed them in. 

  

  a = [1,2,3]
b = [4,5,6]
  

 then  zipped_list = zip(a,b)  gives you: 

  [(1,4), (2,5), (3,6)]
  

 and  *zipped_list  gives you back 

  (1,4), (2,5), (3,6)
  

 zipping that with  zip(*zipped_list)  gives you back the two collections: 

  [(1, 2, 3), (4, 5, 6)]
  



