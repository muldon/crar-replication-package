Query: How can I get the color of the last figure in matplotlib?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13397102)
  

  x = np.arange(10)
y = np.arange(10)
err = np.ones(10)
ebar = plt.errorbar(x,y, yerr=err)
color = ebar[0].get_color()
  

  ebar  is a container of artist, so you might modify the index in the last line to match the artist you want to get color from. 

 You can also easily set the color of the errorbar, so you know exactly what color they are without checking it: 

  ebar = plt.errorbar(x,y, yerr=err, ecolor='y')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43192734)
 You can use the arguments   edgecolor  and  facecolor  to set the colors of the edges and faces. 

  ax.scatter(x,y,z, s=100, edgecolor="r", facecolor="gold")
  

 Alternatively you can use the argument  c  to either set the color directly,  

  ax.scatter(x,y,z, s=100, c="limegreen")
  

 or to set a range of values that should be represented by color via a colormap. This last approach would also allow to put all points in a single scatterplot like so: 

  from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.set_aspect("equal")

count = 2
x = range(-count,count+1)
X,Y,Z = np.meshgrid(x,x,x)

c = np.zeros_like(X, dtype=np.float)
c[((X+Y+Z+3*count)%2) == 0] = 0.5
c[count,count,count] = 1

s = np.ones_like(X)*25
s[count,count,count] = 100
ax.scatter(X,Y,Z, c=c,s=s, cmap="brg")

plt.show()
  

 https://i.stack.imgur.com/UZG1J.png 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38052905)
 You have to color every segment of your line: 

  import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm

# my func
x = np.linspace(0, 2 * np.pi, 100)
y = 3000 * np.sin(x)

# select how to color
cmap = ListedColormap(['r','b'])
norm = BoundaryNorm([2000,], cmap.N)

# get segments
xy = np.array([x, y]).T.reshape(-1, 1, 2)
segments = np.hstack([xy[:-1], xy[1:]])

# make line collection
lc = LineCollection(segments, cmap = cmap, norm = norm)
lc.set_array(y)

# plot
fig, ax = plt.subplots()
ax.add_collection(lc)
ax.autoscale()
plt.show()
  

 https://i.stack.imgur.com/Vw7uB.png 

 More examples here: http://matplotlib.org/examples/pylab_examples/multicolored_line.html  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35445089)
 You can assign an appropriate colormap for your plot, in this case a grayscale colormap: 

  x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
y = [125, 32, 54, 253, 67, 87, 233, 56, 67]

color = [item / 255.0 for item in y]
grayscale_map = plt.get_cmap('gray')

plt.figure()
plt.scatter(x, y, s = 500, c = color, cmap = grayscale_map)
plt.colorbar()
plt.show()
  

 https://i.stack.imgur.com/BnFwF.png 

 Note that I changed your  color  list to list of floats that will (presumably) range from 0 to 1. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13634612)
 Setting up a basic matplotlib figure is easy: 

  import matplotlib.pyplot as plt
import numpy as np
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
  

 Picking off the columns for  x ,  y  and  color  might look something like this: 

  N = 100
data = np.random.random((N, 7))
x = data[:,0]
y = data[:,1]
points = data[:,2:4]
# color is the length of each vector in `points`
color = np.sqrt((points**2).sum(axis = 1))/np.sqrt(2.0)
rgb = plt.get_cmap('jet')(color)
  

 The last line retrieves the  jet  colormap and maps each of the float values (between 0 and 1) in the array  color  to a 3-tuple RGB value.
There is a list of colormaps to choose from http://scipy-cookbook.readthedocs.org/items/Matplotlib_Show_colormaps.html. There is also a way to define custom colormaps. 

 Making a scatter plot is now straight-forward: 

  ax.scatter(x, y, color = rgb)
plt.show()
# plt.savefig('/tmp/out.png')    # to save the figure to a file
  

   


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28114194)
 This should get you started: 

  import matplotlib.pyplot as plt
import numpy as np

# some random data to plot
x = np.random.rand(10,10)*80e3 - 40e3
plt.imshow(x, aspect='auto', vmin=-40e3, vmax=40e3)

# create the colorbar
cb = plt.colorbar(orientation='horizontal', ticks=[-40e3,0,40e3])

# get the xtick labels
tl = cb.ax.get_xticklabels()

# set the alignment for the first and the last
tl[0].set_horizontalalignment('left')
tl[-1].set_horizontalalignment('right')

plt.show()
  

  

   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43363727)
 Once you have a ploted data (self contained example bellow): 

  import numpy as np
import matplotlib.pyplot as plt
from skimage import data, color

img = data.camera()

x = np.random.rand(100) * img.shape[1]
y = np.random.rand(100) * img.shape[0]

fig = plt.figure(figsize=(10,10))
plt.imshow(img,cmap="gray")
plt.scatter(x, y, color='k')
plt.ylim([img.shape[0], 0])
plt.xlim([0, img.shape[1]])
  

 The underlying data can be recovered as array by using  fig.canvas  (the matplotlib's canvas). First trigger its drawing: 

  fig.canvas.draw()
  

 Get the data as array: 

  width, height = fig.get_size_inches() * fig.get_dpi()
mplimage = np.fromstring(fig.canvas.tostring_rgb(), dtype='uint8').reshape(height, width, 3)
  

 If you want your array to be the same shape as the original image you will have to play with  figsize  and  dpi  properties of  plt.figure() . 

 Last, matplotlib returns an RGB image, if you want it grayscale: 

  gray_image = color.rgb2gray(mplimage)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53681489)
  TL;DR  No, it can't be done  automatically .  . 

 Each plot ( axes ) in a figure ( figure ) has its own cycle of colors â€” if you don't force a different color for each plot, all the plots share the same order of colors.  

 Having a different color in each plot can be achieved  automatically  only if we  stretch  a bit what "automatically" means. 

 

 The OP wrote 

 
   [...] I have to identify each plot with a different color which should be automatically generated by [Matplotlib]. 
 

 But... Matplotlib automatically generates different colors for each different curve 

  In [10]: import numpy as np 
    ...: import matplotlib.pyplot as plt                                                  

In [11]: plt.plot((0,1), (0,1), (1,2), (1,0));                                             
Out[11]: 
  

 https://i.stack.imgur.com/zDdLE.png 

 So why the OP request? If we continue to read, we have 

 
   Can you please give me a method to put different colors for different plots in the same figure? 
 

 and it make sense, because each plot (each  axes  in Matplotlib's parlance) has its own  color_cycle  (or rather, in 2018, its  prop_cycle ) and each plot ( axes ) reuses the same colors in the same order. 

  In [12]: fig, axes = plt.subplots(2,3)                                                    

In [13]: for ax in axes.flatten(): 
    ...:     ax.plot((0,1), (0,1)) 
  

 <a href="https://i.stack.imgur.com/l0S0D.png"  

 If this is the meaning of the original question, one possibility is to explicitly name a different color for each plot. 

 If the plots (as it often happens) are generated in a loop we must have an additional loop variable to override the color  automatically  chosen by Matplotlib. 

  In [14]: fig, axes = plt.subplots(2,3)                                                    

In [15]: for ax, short_color_name in zip(axes.flatten(), 'brgkyc'): 
    ...:     ax.plot((0,1), (0,1), short_color_name)
  

 <a href="https://i.stack.imgur.com/FBbbr.png"  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52080168)
 You can create a custom colormap based on an existing one and replace one of the colors with e.g. red. 
You may then use a  BoundaryNorm  to use the colors from the new colormap for the specified levels. 

  import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors

d = np.linspace(-3,3)
x,y = np.meshgrid(d,d)
data = -585.22 + 94*np.exp(-(x**2+y**2))
levels = np.linspace(-585.22, -485.22, 13)
norm = matplotlib.colors.BoundaryNorm(levels,len(levels))

colors = list(plt.cm.Greys(np.linspace(0,1,len(levels)-1)))
colors[-1] = "red"
cmap = matplotlib.colors.ListedColormap(colors,"", len(colors))

im = plt.contourf(data, levels, cmap=cmap, norm=norm)

plt.colorbar(ticks=levels)

plt.show()
  

 https://i.stack.imgur.com/DQvOG.png 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48253413)
 I just needed to make a color wheel and decided to update rsnape's solution to be compatible with matplotlib 2.1. Rather than place a colorbar object on an axis, you can instead plot a polar colored mesh on a polar plot. 

  import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm
import matplotlib as mpl

#If displaying in a Jupyter notebook:
%matplotlib inline 

#Generate a figure with a polar projection
fg = plt.figure(figsize=(8,8))
ax = fg.add_axes([0.1,0.1,0.8,0.8], projection='polar')

#define colormap normalization for 0 to 2*pi
norm = mpl.colors.Normalize(0, 2*np.pi) 

#Plot a color mesh on the polar plot
#with the color set by the angle

n = 200  #the number of secants for the mesh
t = np.linspace(0,2*np.pi,n)   #theta values
r = np.linspace(.6,1,2)        #raidus values change 0.6 to 0 for full circle
rg, tg = np.meshgrid(r,t)      #create a r,theta meshgrid
c = tg                         #define color values as theta value
im = ax.pcolormesh(t, r, c.T,norm=norm)  #plot the colormesh on axis with colormap
ax.set_yticklabels([])                   #turn of radial tick labels (yticks)
ax.tick_params(pad=15,labelsize=24)      #cosmetic changes to tick labels
ax.spines['polar'].set_visible(False)    #turn off the axis spine.
  

  

   



