Query: How to lowercase a python dataframe string column if it has missing values?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54565294)
 you can try this one also, 

  df= df.applymap(lambda s:s.lower() if type(s) == str else s)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22247593)
 use pandas http://pandas.pydata.org/pandas-docs/stable/basics.html#vectorized-string-methods; as in the documentation: 

 
   these methods exclude missing/NA values automatically 
 

  .str.lower()  is the very first example there; 

  >>> df['x'].str.lower()
0    one
1    two
2    NaN
Name: x, dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22245305)
  

  import pandas as pd
import numpy as np
df=pd.DataFrame(['ONE','Two', np.nan],columns=['x']) 
xLower = df["x"].map(lambda x: x if type(x)!=str else x.lower())
print xLower
  

 And a result: 

  $ print example.py
0    one
1    two
2    NaN
Name: x, dtype: object
  

 .  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49203474)
 Another possible solution, in case the column has not only strings but numbers too, is to use  astype(str).str.lower()  because otherwise, given that a number is not a string, when lowered it will return  NaN , therefore: 

  import pandas as pd
import numpy as np
df=pd.DataFrame(['ONE','Two', np.nan,2],columns=['x']) 
xSecureLower = df['x'].astype(str).str.lower()
xLower = df['x'].str.lower()
  

  

  >>> xSecureLower
0    one
1    two
2    NaN
3      2
Name: x, dtype: object
  

  

  >>> xLower
0    one
1    two
2    NaN
3    NaN
Name: x, dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50634079)
 Use   mask   with   ^[a-z]+$   as your regular expression: 

  df = pd.DataFrame({'names': ['Chris Z', 'Hulk Hogan', 'notaname', 'whateven']})

df.names.mask(df.names.str.match(r'^[a-z]+$'))

0       Chris Z
1    Hulk Hogan
2           NaN
3           NaN
Name: names, dtype: object
  

 If there are spaces in some of the lowercase strings, just use   ^[a-z\s]+$   instead. 

  ^            # Asserts position at beginning of string
[  
  a-z        # Matches any lowercase character 1 or more times
]+           
$            # Asserts position at end of string
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29758079)
 This would give you want you want -- 

  df = pd.DataFrame({'Labels' : [["Cat", "Dog", "Horse"],
                               ["Pig", "Fish", "Giraffe"]]})

df['Labels'].apply(lambda x: [y.lower() for y in x])

0       [cat, dog, horse]
1    [pig, fish, giraffe]
Name: Labels, dtype: object
  

  But , like mentioned in comments, do you need to store the data is this way? 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42759067)
 You can fill the na's by some value and later change the dataframe column type to string to make things work. 

  from sklearn.preprocessing import LabelEncoder
import pandas as pd
import numpy as np
a = pd.DataFrame(['A','B','C',np.nan,'D','A'])
a.fillna(99)
le = LabelEncoder()
le.fit_transform(a.astype(str))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29758057)
 the following would work but generally it's a bad idea to store lists as data IMO: 

  In [18]:

df['labels'] = df['labels'].apply(lambda x: [w.lower() for w in x])
df
Out[18]:
                 labels
0     [cat, dog, horse]
1  [pig, fish, giraffe]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51157603)
 Using https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html you can proceed as follows: 



  my_dataframe = pd.DataFrame(Keyword, columns=["Keyword", "Score"])
  

 The result is the following: 

 https://i.stack.imgur.com/h9Ovd.jpg 

  NOTE:  you really should consider using lowercase variable names. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/38151421)
 Since you say you want to replace these  'na'  by a the mean of the column, I'm guessing the non-missing values are indeed floats. The problem is that pandas does not recognize the string  'na'  as a missing value, and so reads the column with dtype  object  instead of some flavor of  float . 

 Case in point, consider the following  .csv  file: 

   test.csv

 col1,col2
 1.0,1.0
 2.0,2.0
 3.0,3.0
 na,4.0
 5.0,5.0
  

 With the naive import  df = pd.read_csv('test.csv') ,  df.dtypes  tells us that  col1  is of dtype  object  and  col2  is of dtype  float64 . But how do you take the mean of a bunch of objects? 

 The solution is to tell  pd.read_csv()  to interpret the string  'na'  as a missing value: 

  df = pd.read_csv('test.csv', na_values='na')
  

 The resulting dataframe has both columns of dtype  float64 , and you can now use your imputer. 



