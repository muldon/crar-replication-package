Query: Append elements of a set to a list in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4741543)
 Use 

  a.extend(list(b))
  

  

  a.extend(b)
  

 . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4741597)
 If you want to update the list, this works for me: 

  a += b
  

 If you want a non-mutating expression: 

  a + list(b)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4741602)
 You could use extend as already pointed out, but there's also a more concise approach: 

  >>> a += b
>>> a
[1, 2, 3, 4]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42317753)
  The problematic line is > if (list[i] != list [i + 1]):  < (6th line in your code).  

  Reason: 
Imagine your list has got 4 elements. 

 Eg: mylist = [ 1, 2,2,3]. 

  mylist[i] != mylist [i + 1]  

 In the last iteration 'i' will be  4 , so  i + 1 will be 5. 

 There is no such 5th index in that list,  because list indexes are counted from zero.  

 mylist[0] = 1 

 mylist[1] = 2 

 mylist[2] = 2  

 mylist[3] = 3 

 mylist[4] = No Index 

 mylist[5] = No Index 

      def unique_elements (list):
        new_list = []

   # Replace the while with a for loop** 

        for i in list:
          if i not in new_list:
            new_list.append(i)


        return (new_list)

    #Main program
    n = int(input("Enter length of the list: "))
    list = []
    for i in range (0, n):
        item = int(input("Enter only integer values: "))
        list.append(item)
    print ("This is your list: ", list)
    result = unique_elements (list)
    print (result)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17634086)
 For some reason,  extend  in Python doesn't return the list itself after extending. So  ll  in your case is  None . Just put  ll=each[0]  on the second line in the loop, and your solution should start working. 

 Still, I'm not getting, why you don' keep your elements in  set s in the first place. This would avoid you from having to convert from  list  to  set  and then backwards. 

 I would just  or  sets instead of appending to the list and then filtering out duplicates by resorting to  set  and then to  list . 

  >>> from itertools import izip
>>> templist = []
>>> for els1,els2 in izip(biglist,smalllist):
    joined = list(set(els1) | set(els2))
    templist.append(joined)


>>> templist
[['A', 'C'], ['C', 'T'], ['A', 'T']]
  

 

 Keeping elements in  set s in the first place seems to be the fastest in Python 3 even for such small amount of elements in each set (see comments): 

  biglist=[set(['A']), set(['C', 'T']), set(['A', 'T'])]
smalllist=[set(['C']), set(['T']), set(['A', 'T'])]

for els1,els2 in zip(biglist,smalllist):
    els1.update(els2)

print(biglist)
  

  

  [{'A', 'C'}, {'C', 'T'}, {'A', 'T'}]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/35533423)
 This is the simplest way to do it: 

  a = [1, 2, 2, 3]
b = []
for i in a:
    if i not in b:
        b.append(i)
print (b)
[1, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6935265)
 This algorithm, either with or without a list comprehension, is not as efficient as possible;   list.__contains__  is O(n), and so adding the elements of another list to it is O(n<sup>2</sup>).  On the other hand,  set.__contains__  is O(log n), so the  best  way to do this is to use a set to check for membership, and a list to preserve order.  That way you're doing n operations that are O(log n), for a total of O(n log n), which much faster than O(n<sup>2</sup>) for reasonable values of n (above say, 100 elements). 

  >>> l = [1, 2]
>>> seen = set(l)
>>> for x in (2, 3, 4):
...     if x not in seen:
...         seen.add(x)
...         l.append(x)
... 
>>> l
[1, 2, 3, 4]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14667593)
 If you want to have unique elements in your list, then why not use a set, if of course, order does not matter for you: - 

  >>> s = set()
>>> s.add(2)
>>> s.add(4)
>>> s.add(5)
>>> s.add(2)
>>> s
39: set([2, 4, 5])
  

 If order is a matter of concern, then you can use: - 

  >>> def addUnique(l, num):
...     if num not in l:
...         l.append(num)
...     
...     return l
  

 You can also find an http://code.activestate.com/recipes/576694/ recipe, which is referred to in http://docs.python.org/2/library/collections.html 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/49658824)
  set  can help you filter out the elements from the list that are duplicates. It will work well for  str ,  int  or  tuple  elements, but if your list contains  dict  or other  list  elements, then you will end up with  TypeError  exceptions. 

 Here is a general order-preserving solution to handle some (not all) non-hashable types: 

  def unique_elements(iterable):
    seen = set()
    result = []
    for element in iterable:
        hashed = element
        if isinstance(element, dict):
            hashed = tuple(sorted(element.iteritems()))
        elif isinstance(element, list):
            hashed = tuple(element)
        if hashed not in seen:
            result.append(element)
            seen.add(hashed)
    return result
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/1801471)
 Assuming order matters: 

 
 Create an empty set S and an empty list M. 
 Scan the list L one element at a time. 
 If the element is in the set S, skip it. 
 Otherwise, add it to M and to S. 
 Repeat for all elements in L. 
 Return M. 
 

 In Python: 

  >>> L = [2, 1, 4, 3, 5, 1, 2, 1, 1, 6, 5]
>>> S = set()
>>> M = []
>>> for e in L:
...     if e in S:
...         continue
...     S.add(e)
...     M.append(e)
... 
>>> M
[2, 1, 4, 3, 5, 6]
  

  

  M = list(set(L))
  



