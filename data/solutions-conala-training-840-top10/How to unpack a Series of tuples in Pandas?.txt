Query: How to unpack a Series of tuples in Pandas?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22799359)
  

  df=pd.DataFrame(out.tolist())
df.columns=['KS-stat', 'P-value']
  

 result: 

             KS-stat   P-value
0   -2.12978778869  0.043643
1    3.50655433879  0.001813
2    -1.2221274198  0.233527
3  -0.977154419818  0.338240
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36816769)
 maybe this is most strightforward (most pythonic i guess): 

  out.apply(pd.Series)
  

 if you would want to rename the columns to something more meaningful, than: 

  out.columns=['Kstats','Pvalue']
  

 if you do not want the default name for the index: 

  out.index.name=None
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50512268)
      

                          codes
0  {'amount': 12, 'code': 10}
1    {'amount': 3, 'code': 3}
  

   apply   with   pd.Series   

  df.codes.apply(pd.Series)

   amount  code
0      12    10
1       3     3
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53799797)
 You will need to unpack your lists and re-construct your frame. 

  cols = ['col1', 'col2', 'col3']
pd.DataFrame(([c[0] for c in r] for r in df.shares.tolist()), columns=cols)

   col1  col2  col3
0    10     9     9
1     3     3     2
2    17    17    18
  

 To generalise to lists with more than 3 sub-lists, you can use  

  pd.DataFrame(
    [c[0] for c in r] for r in df.shares.tolist()
).rename(columns=lambda x: f'col{x+1}')

   col1  col2  col3
0    10     9     9
1     3     3     2
2    17    17    18
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47344657)
 It'll be faster if you make  arr_tuples  into a  Series : 

  import pandas as pd
data = {0:[1,4,11,14],1:[2,5,12,5],2:[3,6,13,6],3:[4,7,14,7]}
df = pd.DataFrame(data)
arr_tuples = [(0,3),(1,1),(1,3),(2,1)]

s = pd.Series(arr_tuples)
value_array = s.apply(lambda (x,y): df.iloc[x,y])

value_array
0     4
1     5
2     7
3    12
dtype: int64
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53799824)
 Flatten the list of list , then using  DataFrame  constructor  

  import itertools
pd.DataFrame(list(map(lambda x : list(itertools.chain(*x)),df.shares.tolist())))
    0   1   2
0  10   9   9
1   3   3   2
2  17  17  18
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53364112)
 Using  MultiIndex  

  pd.MultiIndex.from_tuples(L).to_frame()[1].reset_index(level=1,drop=True)
Out[79]: 
0    0.071429
0    0.071429
1    0.083333
1    0.333333
1    0.333333
1    0.083333
3    0.058824
3    0.058824
Name: 1, dtype: float64
  



