Query: Convert a list to a dictionary in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/33674244)
 Yes, it did appear like a list on the older Python questions asked here. But as @Kasramvd said, assuming you are using python 3.X,  dict.values  is a dictionary view object.
(Also, you definitely came up with this example hastily as you have four dictionary entries but want 10 list items, which is redundant.) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/674573)
 
>>> a={ 'a': 1, 'b': 2, 'c': 3 }

>>> [(x,a[x]) for x in a.keys() ]
[('a', 1), ('c', 3), ('b', 2)]

>>> [(a[x],x) for x in a.keys() ]
[(1, 'a'), (3, 'c'), (2, 'b')]
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28987575)
 You can use https://docs.python.org/2/library/functions.html#zip and https://docs.python.org/2/library/functions.html#func-dict for convert to your list to expected dictionary  : 

  >>> l=[ "14008",1,"14293",4,]
>>> dict(zip(l[::2],l[1::2]))
{'14008': 1, '14293': 4}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29862096)
 A simple solution is: 

  dict(enumerate(my_list, 1))
  

 For example: 

  >>> dict(enumerate(["a", "b", "c"], 1))
{1: 'a', 2: 'b', 3: 'c'}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54227995)
 You have  zip  as an option: 

  wanted = {a[0]: list(a[1:]) for a in zip(*x)}
  

  

  wanted = {k: v for k, *v in zip(*x)}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23117893)
 You can also do it like this (string to list conversion here, then conversion to a dictionary) 

      string_list = """
    Hello World
    Goodbye Night
    Great Day
    Final Sunset
    """.split()

    string_list = dict(zip(string_list[::2],string_list[1::2]))

    print string_list
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35849222)
 You can use a list comprehension to iterate over each  item  in each dictionary value and convert it to a  float  in the case where the  item  is both of type  str  and contains a  , : 

  dd = {'sp': ['1,1', '3,2'], 'tt': ['a', 'b'], 'zz': [4.5, 2.1]}

for k in dd:
    dd[k] = [float(item.replace(',', '.')) if type(item) == str and ',' in item
        else item for item in dd[k]]

print(dd)
  

  Output  

  {'tt': ['a', 'b'], 'sp': [1.1, 3.2], 'zz': [4.5, 2.1]}
  

 You need to check that the  item  is of type  str  because checking for the existence of a string (eg  , ) in a  float  will generate a  TypeError . 

 if you wanted to do the same thing, but without using a list comprehension (see the comments), you could do the following: 

  dd = {'sp': ['1,1', '3,2'], 'tt': ['a', 'b'], 'zz': [4.5, 2.1]}

for k in dd:
    for i in range(len(dd[k])):
        if type(dd[k][i]) == str and ',' in dd[k][i]:
            dd[k][i] = float(dd[k][i].replace(',', '.'))

print(dd)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41029466)
 You can use  collections.defaultdict() : 

  In [54]: lst = [ ['001', 'A', '100'], ['001', 'B', '94'], ['002', 'A', '87'], ['002', 'B', '85'] ]

In [55]: from collections import defaultdict

In [56]: d = defaultdict(dict)

In [57]: for i, j, k in lst:
   ....:     d[i].update({j:k})
   ....:     

In [58]: d
Out[58]: defaultdict(<class 'dict'>, {'001': {'A': '100', 'B': '94'}, '002': {'A': '87', 'B': '85'}})
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/674594)
 since no one else did, I'll add py3k versions: 

  >>> d = { 'a': 1, 'b': 2, 'c': 3 }
>>> list(d.items())
[('a', 1), ('c', 3), ('b', 2)]
>>> [(v, k) for k, v in d.items()]
[(1, 'a'), (3, 'c'), (2, 'b')]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/41029467)
 Probably the best way is a defaultdict using a dict as factory: 

  from collections import defaultdict

dictofdicts = defaultdict(dict)

start = [ ['001', 'A', '100'], ['001', 'B', '94'], ['002', 'A', '87'], ['002', 'B', '85'] ]

for outerkey, innerkey, value in start:
    dictofdicts[outerkey][innerkey] = value
  

 and this gives you the solution you wanted: 

  >>> dictofdicts
defaultdict(dict,
            {'001': {'A': '100', 'B': '94'}, '002': {'A': '87', 'B': '85'}})
  

 The defaultdict can be used like a normal dictionary but you can also convert it to a plain dictionary afterwards: 

  >>> dict(dictofdicts)
{'001': {'A': '100', 'B': '94'}, '002': {'A': '87', 'B': '85'}}
  



