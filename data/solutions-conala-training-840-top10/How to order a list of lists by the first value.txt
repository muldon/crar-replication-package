Query: How to order a list of lists by the first value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40744368)
 Python rt will compare the lists with the first element by default. If they're the same, it will continue with the second element, and  on. 

  

  l1.rt()
  

 . 

 But if you really just want to rt by first value and nothing else : 

  rted(l1, key=lambda id_and_name: id_and_name[0])
#=> [[1, 'steve'], [2, 'kim'], [3, 'frank'], [4, 'jane']]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37730047)
 You should consider getting the items as a list or tuple and them sorting them with a function or lambda expression like so: 

  items = dict2.items()
items.sort(key=lambda x:x[1][0])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13481684)
 A dictionary itself is unordered, so you can't sort it per se.  If you want to create a sorted list of the key-value pairs, you can do that: 

  sorted(myDict.iteritems(), key=lambda x: x[1][0][1])
  

  iteritems  returns an iterable of (key, value) pairs, so  x[1][0][1]  there means "take the second element of this pair (which is the value), and take the first element of that (which is the first list in the list of lists) and take the second element in that --- in order words, the second element in the first list, which is what you want. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37513608)
 Sort a list of tuples, the first value in descending order ( reverse=True ) and the second value in ascending order ( reverse=False , by default). Here is a MWE. 

  lists = [(2, 'c'), (2, 'a'), (3, 'b')]

result = sorted(lists, key=lambda x: (-x[0], x[1])) # -x[0] represents descending order

print(result)
# Output
[(3, 'b'), (2, 'a'), (2, 'c')]
  

 

 It is straightforward to use https://docs.python.org/2/library/collections.html#collections.Counter 
to count each letter's frequency in a string. 

  import collections

s = 'bcabcab'

# If you don't care the order, just use `most_common`
#most_common = collections.Counter(s).most_common(3)

char_and_frequency = collections.Counter(s)
result = sorted(char_and_frequency.items(), key=lambda x:(-x[1], x[0]))[:3]    # sorted by x[1] in descending order, x[0] in ascending order

print(result)
# Output
[('b', 3), ('a', 2), ('c', 2)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4618920)
 I believe this is probably faster than any other way if you don't care about the lists order, if you do take care about the final order store the indexes from the original and resort by that. 

  category_ids.sort()
ones_last_index = category_ids.count('1')
del category_ids[0:ones_last_index]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/25357184)
 First, you can't sort a  dict  because it doesn't have order <sup>1</sup>.  You  can  sort it's items however: 

  sorted(d.items(), key=lambda t: t[1][1])
  

 Should do the trick. 

  notes  

 
  t[1]  # => the "value", t[0] is the "key"  
  t[1][1]  # => The second element in the value.  
 

 You'll get a list of 2-tuples (where the first element is the key, and the second element is the value).  Of course, you could always pass this list of 2-tuples directly to https://docs.python.org/2/library/collections.html#collections.OrderedDict if you wanted to construct a dict which has an ordering after the fact ... 

 <sup><sup>1</sup>More correctly, the order is  arbitrary  and could change based on key insertions, deletions, python implementation or version ... (which is why it's easier to say that dict's are unordered)</sup> 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17477904)
 if you would like to have a dictionary  in a specific order, you can also create a list of lists, where the first item will be the key, and the second item will be the value
and will look like this
example  

  >>> list =[[1,2],[2,3]]
>>> for i in list:
...     print i[0]
...     print i[1]

1
2
2
3
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9994418)
 The usual idiom is to sort using a key: 

  >>> a = [[1,2],[2,10,10],[3,4,'fred']]
>>> b = [2,1,3]
>>> sorted(a,key=lambda x: b.index(x[0]))
[[2, 10, 10], [1, 2], [3, 4, 'fred']]
  

 This can have performance issues, though-- if the keys are hashable, this will probably be faster for long lists: 

  >>> order_dict = dict(zip(b, range(len(b))))
>>> sorted(a,key=lambda x: order_dict[x[0]])
[[2, 10, 10], [1, 2], [3, 4, 'fred']]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53279448)
 The question doesn't say if you need to preserve the order. If not, list of unique values of  l1  would be: 

  distl1 = list(set(l1))
  

 And the corresponding values of  l2 : 

  distl2 = [l2[l1.index(value)] for value in distl1]
  

 (where  index()  always returns the first occurrence) 

 The resulting lists will keep your logical mapping, in the random order: 

  ['b', 'e', 'c', 'd', 'a']
['t2', 't4', 't6', 't8', 't1']
  

  EDIT:  

 Another approach (no dictionaries, no  index()  in a loop, order preserved, 2.7 friendly): 

  l1 = ['a','b','a','e','b','c','a','d']
l2 = ['t1','t2','t3','t4','t5','t6','t7','t8']

distl1 = []
distl2 = []

for i, val in enumerate(l1):
    if val not in distl1:
        distl1.append(val)
        distl2.append(l2[i])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/15615485)
 This should do it: 

  sorted(((k1, k2) for k1 in d for k2 in d[k1]), key=lambda t: d[t[0]][t[1]], reverse=True)
  

 The generator expression lists all key 'paths' to the values first, then sorts those on the value, reversed. 

  

  >>> sorted(((k1, k2) for k1 in d for k2 in d[k1]), key=lambda t: d[t[0]][t[1]], reverse=True)
[(4, 'g'), (4, 'a'), (12, 'b'), (11, 'c'), (11, 'b'), (11, 'a'), (4, 'r'), (12, 'g'), (4, 'f')]
  



