Query: Efficient way to convert a list to dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21222901)
 You can use a http://www.python.org/dev/peps/pep-0274/: 

  >>> lst = [
...     {'1': 'A'},
...     {'2': 'B'},
...     {'3': 'C'}
... ]
>>> {k:v for x in lst for k,v in x.items()}
{'2': 'B', '3': 'C', '1': 'A'}
>>>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21222900)
  answer = {}
for d in L:
    answer.update(d)
  

  Output : 

  >>> L = [
...     {'1': 'A'},
...     {'2': 'B'},
...     {'3': 'C'}
... ]
>>> answer = {}
>>> for d in L: answer.update(d)
... 
>>> answer
{'2': 'B', '3': 'C', '1': 'A'}
  

  

  answer = {k:v for d in L for k,v in d.items()}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54227562)
 You can swap the key-value pairs in  d  for more efficient solution: 

  f = [('str1',7.0), ('str2',2.8), ('str3',11.2)]
d = {'aa':'str2', 'bb':'str3', 'cc':'str1'}
new_d = {b:a for a, b in d.items()}
new_f = [[a, b, new_d[a]] for a, b in f]
  

 Output: 

  [['str1', 7.0, 'cc'], ['str2', 2.8, 'aa'], ['str3', 11.2, 'bb']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54016237)
 You can use a list comprehension: 

  myList = ['1-1-1', '1-1-2', '1-2-1', '1-2-2', '1-3-1']
_split = list(map(lambda x:x.split('-'), myList))
s, s2 = {a for a, *_ in _split}, {f'{a}-{b}' for a, b, _ in _split}
new_data = {i:{c:[h for h in myList if h.startswith(c)] for c in s2 if c[0] == i} for i in s}
  

 Output: 

  {'1': {'1-2': ['1-2-1', '1-2-2'], '1-1': ['1-1-1', '1-1-2'], '1-3': ['1-3-1']}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54016121)
 If can accept tuples of integers, you can use: 

  x = ['1-1-1','1-1-2', '1-2-1', '1-2-2', '1-3-1']
y3 = [tuple(map(int,a.split('-'))) for a in x]
y2 = set(a[:2] for a in y3)
y1 = set(a[0] for a in y2)

d = {}
for k1 in y1:
    d1 = {}
    d[k1] = d1
    for k2 in (z for z in y2 if z[0]==k1):
        a2 = []
        d1[k2] = a2
        for a in (z for z in y3 if z[0]==k1 and z[1]==k2[1]):
            a2.append(a)
  

 But if you really need strings, you can simply join the keys via: 

  x = ['1-1-1','1-1-2', '1-2-1', '1-2-2', '1-3-1']
y3 = [tuple(a.split('-')) for a in x]
y2 = set(a[:2] for a in y3)
y1 = set(a[0] for a in y2)


d = {}
for k1 in y1:
    d1 = {}
    d[k1] = d1
    for k2 in (z for z in y2 if z[0]==k1):
        a2 = []
        d1['-'.join(k2)] = a2
        for a in (z for z in y3 if z[0]==k1 and z[1]==k2[1]):
            a2.append('-'.join(a))

d
# returns:
{'1': {'1-1': ['1-1-1', '1-1-2'], '1-2': ['1-2-1', '1-2-2'], '1-3': ['1-3-1']}}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33245502)
 You can use a list comprehension to convert the dictionary to a list of dictionaries. Example - 

  data = {'a': 4, 'b': 1, 'e': 1}
result = [{'name':key, 'value':value} for key,value in data.items()]
  

  

  >>> data = {'a': 4, 'b': 1, 'e': 1}
>>> result = [{'name':key, 'value':value} for key,value in data.items()]
>>> result
[{'name': 'a', 'value': 4}, {'name': 'b', 'value': 1}, {'name': 'e', 'value': 1}] 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16374553)
 use  dict()  with a generator expression: 

  >>> lis=['A:1','B:2','C:3','D:4']
>>> dict(x.split(":") for x in lis)
{'A': '1', 'C': '3', 'B': '2', 'D': '4'}
  

 Using dict-comprehension ( as suggested by @PaoloMoretti): 

  >>> {k:v for k,v in (e.split(':') for e in lis)}
{'A': '1', 'C': '3', 'B': '2', 'D': '4'}
  

 Timing results for 10**6 items: 

  >>> from so import *
>>> %timeit case1()
1 loops, best of 3: 2.09 s per loop
>>> %timeit case2()
1 loops, best of 3: 2.03 s per loop
>>> %timeit case3()
1 loops, best of 3: 2.17 s per loop
>>> %timeit case4()
1 loops, best of 3: 2.39 s per loop
>>> %timeit case5()
1 loops, best of 3: 2.82 s per loop
  

 so.py: 

  a = ["{0}:{0}".format(i**2) for i in xrange(10**6)]

def case1():
    dc = {}
    for i in a:
        q, w = i.split(':')
        dc[q]=w

def case2():
    dict(x.split(":") for x in a)


def case3():
    {k:v for k,v in (e.split(':') for e in a)}

def case4():
    dict([x.split(":") for x in a])

def case5():
    {x.split(":")[0] : x.split(":")[1] for x in a}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27612717)
 Since you are using Python 2.7, I would recommend using  dict.iteritems  or  dict.viewitems  and list comprehension, like this 

  >>> [item for pair in d.iteritems() for item in pair]
['a', 1, 'c', 3, 'b', 2]
>>> [item for pair in d.viewitems() for item in pair]
['a', 1, 'c', 3, 'b', 2]
  

  dict.iteritems  or  dict.viewitems  is better than  dict.items  because, they don't create a list of key-value pairs. 

 If you are wondering how you can write portable code which would be efficient in Python 3.x as well, then you just iterate the keys like this 

  >>> [item for k in d for item in (k, d[k])]
['a', 1, 'c', 3, 'b', 2]
  



