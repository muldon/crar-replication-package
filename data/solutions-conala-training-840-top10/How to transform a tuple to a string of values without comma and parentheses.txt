Query: How to transform a tuple to a string of values without comma and parentheses
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17426568)
 If I've got your message, you are getting tuple of floats, am I right? 

 If so, the following code should work: 

  In [1]: t = (34.2424 , -64.2344 , 76.3534 , 45.2344)

In [2]: ' '.join([str(x) for x in t])
Out[2]: '34.2424 -64.2344 76.3534 45.2344'
  

 We're converting every value in tuple to string here, because http://docs.python.org/2/library/stdtypes.html?highlight=str.join#str.join method can work only with lists of string. 
If  t  is a tuple of strings the code will be just  ' '.join(t) . 

 In case you're getting string in format  "(34.2424 , -64.2344 , 76.3534 , 45.2344)" , you should firstly get rid of unnescessary parthensis and commas: 

  In [3]: t = "(34.2424 , -64.2344 , 76.3534 , 45.2344)"

In [4]: t.strip('()')
Out[4]: '34.2424 , -64.2344 , 76.3534 , 45.2344'

In [5]: numbers = t.strip('()')

In [6]: numbers.split(' , ')
Out[6]: ['34.2424', '-64.2344', '76.3534', '45.2344']

In [7]: ' '.join(numbers.split(' , '))
Out[7]: '34.2424 -64.2344 76.3534 45.2344'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17426417)
 Use http://docs.python.org/2/library/stdtypes.html#str.join: 

  >>> mystring = ' '.join(map(str, (34.2424, -64.2344, 76.3534, 45.2344)))
>>> print mystring
34.2424 -64.2344 76.3534 45.2344
  

 You'll have to use map here (which converts all the items in the tuple to strings) because otherwise you will get a  TypeError . 

 

 A bit of clarification on the http://docs.python.org/2/library/functions.html#map function: 

  map(str, (34.2424, -64.2344, 76.3534, 45.2344)  is equivalent to  [str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344)] . 

 It's a tiny bit faster than using a list comprehension: 

  $ python -m timeit "map(str, (34.2424, -64.2344, 76.3534, 45.2344))"
1000000 loops, best of 3: 1.93 usec per loop
$ python -m timeit "[str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344)]"
100000 loops, best of 3: 2.02 usec per loop
  

 As shown in the comments to this answer,  str.join()  can take a generator instead of a list. Normally, this would be faster, but in this case, it is  slower . 

  

  ' '.join(itertools.imap(str, (34.2424, -64.2344, 76.3534, 45.2344)))
  

 It would be slower than using  map() . The difference is that  imap()  returns a generator, while  map()  returns a list (in python 3 it returns a generator) 

  

  ''.join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
  

 It would be slower than putting brackets around the  list  comprehension, because of reasons explained https://stackoverflow.com/a/9061024/1240268. 

 

 In your (OP's) case, either option does not really matter, as performance doesn't seem like a huge deal here. But if you are ever dealing with large tuples of floats/integers, then now you know what to use for maximum efficiency :). 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29179505)
 You can also use https://docs.python.org/2/library/stdtypes.html#str.format to produce any arbitrary formatting if you're willing to use  *  magic. To handle the specific case of this question, with a single separator, is actually a little cumbersome: 

  >>> bounds = (34.2424, -64.2344, 76.3534, 45.2344)
>>> "{} {} {} {}".format(*bounds)

34.2424 -64.2344 76.3534 45.2344
  

 A more robust version that handles any length, like  join , is: 

  >>> len(bounds)*"{} ".format(*bounds)
  

 But the value added is that if you want to extend your formatting to something more involved you've got the option: 

  >>> "{} --> | {:>10} | {:>10} | {:>10} |".format(*bounds)

34.2424 --> |   -64.2344 |    76.3534 |    45.2344 |
  

 From here, your string https://docs.python.org/2/library/string.html#formatstrings are very diverse. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33298681)
 You can use tuples as keys.  You can create a tuple using parentheses, e.g.  (2,2012)  is a tuple.  They are immutable, and so can be used as dict keys: 

  d = {(1,2012):5, (2,2012):50}
  

 You can index into tuples just as you index into a list, e.g.  (1,2012)[1]  is  2012 . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39638334)
 A tuple is a sequence of values. The values can be any type, and they are indexed by integer, so tuples are not like lists. The most important difference is that  tuples are immutable.  

 A tuple is a comma-separated list of values: 

  t = 'p', 'q', 'r', 's', 't'
  

 it is good practice to enclose tuples in parentheses: 

  t = ('p', 'q', 'r', 's', 't') 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4409584)
 Your problem just seems to be that you have supplied a string as the second argument to  cur.execute , when you probably meant to supply a single-element tuple containing the string. 

 Since a string is a sequence, every character in the string will be interpreted as a separate parameter and that's why you see the "Incorrect number of bindings" error. 

  

  cur.execute("select * from contacts where name like ?", ('%'+search+'%',))
  

 Note the comma in the tuple,  ('%'+search+'%',) . Without it, it isn't a tuple, just a string in parentheses. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/32499912)
 You told Python to create a tuple containing a string: 

  ticketJson['sentTo'] = sentTo,
#                            ^
  

 It is the comma that defines a tuple. Parentheses are only needed to disambiguate a tuple from other uses of a comma, such as in a function call.  

 From the https://docs.python.org/2/reference/expressions.html#parenthesized-forms: 

 
   Note that tuples are not formed by the parentheses, but rather by use of the comma operator. The exception is the empty tuple, for which parentheses  are  required — allowing unparenthesized “nothing” in expressions would cause ambiguities and allow common typos to pass uncaught. 
 

 and from https://docs.python.org/2/reference/expressions.html#expression-lists: 

 
   An expression list containing at least one comma yields a tuple. The length of the tuple is the number of expressions in the list. The expressions are evaluated from left to right. 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3750731)
 It is the commas, not the parentheses, which are significant. The Python tutorial says: 

 
   A tuple consists of a number of values separated by commas 
 

 Parentheses are used for disambiguation in other places where commas are used, for example, enabling you to nest or enter a tuple as part of an argument list. 

 See the http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16449462)
 Have a look at the http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences: 

 
   A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). . For example: 

  >>> empty = ()
>>> singleton = 'hello',    # <-- note trailing comma
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)
  
 

 If you put just a pair of parentheses around your string object, they will only turn that expression into an http://docs.python.org/2/reference/expressions.html#parenthesized-forms (emphasis added): 

 
   A parenthesized expression list yields whatever that expression list yields: if the list contains at least one comma, it yields a tuple; otherwise, it yields the single expression that makes up the expression list. 
  
   An empty pair of parentheses yields an empty tuple object. Since tuples are immutable, the rules for literals apply (i.e., two occurrences of the empty tuple may or may not yield the same object). 
  
    Note that tuples are not formed by the parentheses, but rather by use of the comma operator.  The exception is the empty tuple, for which parentheses are required — allowing unparenthesized “nothing” in expressions would cause ambiguities and allow common typos to pass uncaught. 
 

 That is (assuming Python 2.7), 

  a = 'Quattro TT'
print tuple(a)        # <-- you create a tuple from a sequence 
                      #     (which is a string)
print tuple([a])      # <-- you create a tuple from a sequence 
                      #     (which is a list containing a string)
print tuple(list(a))  # <-- you create a tuple from a sequence 
                      #     (which you create from a string)
print (a,)            # <-- you create a tuple containing the string
print (a)             # <-- it's just the string wrapped in parentheses
  

 The output is as expected: 

  ('Q', 'u', 'a', 't', 't', 'r', 'o', ' ', 'T', 'T')
('Quattro TT',)
('Q', 'u', 'a', 't', 't', 'r', 'o', ' ', 'T', 'T')
('Quattro TT',)
Quattro TT
  

 

 To add some notes on the print statement. When you try to create a single-element tuple as part of a http://docs.python.org/2.7/reference/simple_stmts.html#the-print-statement statement in Python 2.7 (as in  print (a,) ) you need to use the parenthesized form, because the trailing comma of  print a,  would else be considered part of the print statement and thus cause the newline to be suppressed from the output and not a tuple being created: 

 
   A '\n' character is written at the end, unless the print statement ends with a comma. 
 

 In Python 3.x most of the above usages in the examples would actually raise  SyntaxError , because in Python 3  print  http://docs.python.org/3.1/whatsnew/3.0.html#print-is-a-function (you need to add an extra pair of parentheses).
But especially this may cause confusion: 

  print (a,)            # <-- this prints a tuple containing `a` in Python 2.x
                      #     but only `a` in Python 3.x
  



