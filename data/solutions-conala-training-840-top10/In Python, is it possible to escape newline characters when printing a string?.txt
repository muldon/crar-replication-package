Query: In Python, is it possible to escape newline characters when printing a string?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15392758)
 Just encode it with the  'string_escape'  codec. 

  >>> print "foo\nbar".encode('string_escape')
foo\nbar
  

 In python3,  'string_escape'  has become  unicode_escape .  Additionally, we need to be a little more careful about bytes/unicode so it involves a decoding after the encoding: 

  >>> print("foo\nbar".encode("unicode_escape").decode("utf-8"))
  

 https://docs.python.org/3/library/codecs.html#text-encodings 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15393515)
 Simplest method:
 str_object.replace("\n", "\\n")  

 The other methods are better if you want to show  all  escape characters, but if all you care about is newlines, just use a direct replace. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15392971)
 Another way that you can stop python using escape characters is to use a raw string like this: 

  >>> print(r"abc\ndef")
abc\ndef
  

  

  >>> string = "abc\ndef"
>>> print (repr(string))
>>> 'abc\ndef'
  

 the only proplem with using  repr()  is that it puts your string in single quotes, it can be handy if you want to use a quote 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/25944501)
 If I understand, what you want to do is write the time, then, a second later, overwrite it with the new time, and so on. 

 On most terminals, printing a carriage return without a newline will take you back to the start of the same line. So, you can  almost  just do this: 

  print('\r{}'.format(calendar.timegm(time.gmtime())), end='')
  

 In general, there's a problem with this: the carriage return doesn't erase the existing text, it just lets you overwrite it. So, what happens if the new value is shorter than the old one? Well, in your case, that isn't possible; you're printing a 10-digit number that can never turn into a 9-digit number. But if it  were  a problem, the easiest solution would be to change that  {}  to something like  {<70} , which will pad a short line with spaces, up to 70 characters. (Of course if your lines could be longer than 70 character, or your terminal could be narrower than 70, don't use that number.) 

 

 Meanwhile, if you just do this over and over as fast as possible, you're wasting a lot of CPU and I/O, and possibly screwing up your terminal's scrollback buffer, and who knows what else. If you want to do this once per second, you should  sleep  for a second in between. 

  

  while True:
    print('\r{}'.format(calendar.timegm(time.gmtime())))
    time.sleep(1)
  

 

 If you want to get fancy, you can take over the whole terminal with https://docs.python.org/3/library/curses.html on most non-Windows platforms, https://docs.python.org/3/library/msvcrt.html#console-i-o console I/O on Windows, or even manually printing out terminal escape sequences. . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49160705)
 Use  IPython.display 's  display  function with a  Math  object: 

  from IPython.display import display, Math
display(Math(r'Dims: {}x{}m \\ Area: {}m^2 \\ Volume: {}m^3'.format(a, round(b,2), P, V)))
  

 Note the use of Latex-style  \\  newlines, and the  r''  string, which will take the backslashes as literal backslashes and not see them as escape characters. 

 Found the solution https://stackoverflow.com/a/13222501/1427212. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42548484)
 You need to escape backslashes ( \ ): 

  w = open("C:\\Users\\kp\\Desktop\\example.csv", "w+")
  

 or use raw string literals: 

  w = open(r"C:\Users\kp\Desktop\example.csv", "w+")
  

 . 

 

 Otherwise, backslash ( \ ) character is used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character. 

  >>> print('hello\nworld')  # \n -> newline
hello
world
>>> print('hello\\nworld')
hello\nworld
>>> print(r'hello\nworld')
hello\nworld

>>> print('\U00000064')
d
>>> print('\\U00000064')
\U00000064
>>> print(r'\U00000064')
\U00000064
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29389930)
 If you really need to escape a string, let's say you want to print a newline as  \n , you can use the https://docs.python.org/2/library/stdtypes.html#str.encode method with the Python specific https://docs.python.org/2/library/codecs.html#python-specific-encodings encoding: 

  >>> s = "hello\nworld"
>>> e = s.encode("string_escape")
>>> e
"hello\\nworld"
>>> print s
hello
world
>>> print e
hello\nworld
  

 You didn't mention anything about unicode, or which Python version you are using, but if you are dealing with unicode strings you should use  unicode_escape  instead. 

  >>> u = u"föö\nbär"
>>> print u
föö
bär
>>> print u.encode('unicode_escape')
f\xf6\xf6\nb\xe4r
  

 Your post originally had the regex tag, maybe https://docs.python.org/2/library/re.html#re.escape is what you're actually looking for? 

  >>> re.escape(u"foo\nbar\'baz")
u"foo\\\nbar\\'baz"
  

 Not the "double escapes", ie printing the above string yields: 

  foo\
bar\'baz
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9340191)
 To prevent special treatment of  \  in a literal string you could use  r  prefix: 

  s = r'\n'
print(s)
# -> \n
  

 If you have a string that contains a newline symbol ( ord(s) == 10 ) and you would like to convert it to a form suitable as a Python literal: 

  s = '\n'
s = s.encode('unicode-escape').decode()
print(s)
# -> \n
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13928029)
 You'll have to make the translation manually; go through the string with a regular expression for example, and replace each occurrence with the hex equivalent. 

  import re

replchars = re.compile(r'[\n\r]')
def replchars_to_hex(match):
    return r'\x{0:02x}'.format(ord(match.group()))

replchars.sub(replchars_to_hex, inputtext)
  

 The above example only matches newlines and carriage returns, but you can expand what characters are matched, including using  \x  escape codes and ranges. 

  >>> inputtext = 'Some example containing a newline.\nRight there.\n'
>>> replchars.sub(replchars_to_hex, inputtext)
'Some example containing a newline.\\x0aRight there.\\x0a'
>>> print(replchars.sub(replchars_to_hex, inputtext))
Some example containing a newline.\x0aRight there.\x0a
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18051682)
 According to http://docs.python.org/2/reference/lexical_analysis.html: 

 
   The backslash (\) character is used to escape characters that
  otherwise have a special meaning, such as newline, backslash itself,
  or the quote character. 
 

 You need to escape backslash with another backslash: 

  x.replace('\\', '-')
  



