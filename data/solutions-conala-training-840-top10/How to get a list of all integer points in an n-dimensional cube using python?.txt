Query: How to get a list of all integer points in an n-dimensional cube using python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41727776)
 Your second solution seems perfectly fine, though I'd do it this way instead: 

  list(itertools.product(range(-x, y), repeat=dim))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41727605)
 Just encapsulate your "hardcoded" version in a function, and pass the dimensions as arguments 

  def cube_points(x1, x2, y1, y2, z1, z2): #This describes any rectangular prism
    return [(x,y,z) for x in range(x1, x2+1) for y in range(y1, y2+1) for z in range(z1, z2+1)]
  

 Where  x1  and  x2  are the endpoints of the line formed by projecting the cube onto the x axis, etc. 

 EDIT: For an n-dimensional cube 

  from itertools import product
def ndcube(*args): #accepts a list of 2-tuples
    return list(product(*map(lambda x: range(x[0], x[1]+1), args)))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/23622115)
 For small numbers (<~10<sup>13</sup> or so), you can use the following approach: 

  def is_perfect_cube(n):
    c = int(n**(1/3.))
    return (c**3 == n) or ((c+1)**3 == n)
  

 This truncates the floating-point cuberoot, then tests the two nearest integers. 

 For larger numbers, one way to do it is to do a binary search for the true cube root using integers only to preserve precision: 

  def find_cube_root(n):
    lo = 0
    hi = n
    while lo < hi:
        mid = (lo+hi)//2
        if mid**3 < n:
            lo = mid+1
        else:
            hi = mid
    return lo

def is_perfect_cube(n):
    return find_cube_root(n)**3 == n
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8058593)
 You were pretty close,  *zip( ... )  is what you were looking for: 

  >>> list(itertools.product(*zip([-1,-2,-3],[1,2,3])))
[(-1, -2, -3), (-1, -2, 3), (-1, 2, -3), (-1, 2, 3), (1, -2, -3), (1, -2, 3), (
, 2, -3), (1, 2, 3)]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49766400)
 Given that the title of this question is 'python draw 3D cube', this is the article I found when I googled that question. 

 For the purpose of those who do the same as me, who simply want to draw a cube, I have created the following function which takes four points of a cube, a corner first, and then the three adjacent points to that corner. 

 It then plots the cube. 

 The function is below: 

  import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection, Line3DCollection

def plot_cube(cube_definition):
    cube_definition_array = [
        np.array(list(item))
        for item in cube_definition
    ]

    points = []
    points += cube_definition_array
    vectors = [
        cube_definition_array[1] - cube_definition_array[0],
        cube_definition_array[2] - cube_definition_array[0],
        cube_definition_array[3] - cube_definition_array[0]
    ]

    points += [cube_definition_array[0] + vectors[0] + vectors[1]]
    points += [cube_definition_array[0] + vectors[0] + vectors[2]]
    points += [cube_definition_array[0] + vectors[1] + vectors[2]]
    points += [cube_definition_array[0] + vectors[0] + vectors[1] + vectors[2]]

    points = np.array(points)

    edges = [
        [points[0], points[3], points[5], points[1]],
        [points[1], points[5], points[7], points[4]],
        [points[4], points[2], points[6], points[7]],
        [points[2], points[6], points[3], points[0]],
        [points[0], points[2], points[4], points[1]],
        [points[3], points[6], points[7], points[5]]
    ]

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    faces = Poly3DCollection(edges, linewidths=1, edgecolors='k')
    faces.set_facecolor((0,0,1,0.1))

    ax.add_collection3d(faces)

    # Plot the points themselves to force the scaling of the axes
    ax.scatter(points[:,0], points[:,1], points[:,2], s=0)

    ax.set_aspect('equal')


cube_definition = [
    (0,0,0), (0,1,0), (1,0,0), (0,0,1)
]
plot_cube(cube_definition)
  

 Giving the result: 

 https://i.stack.imgur.com/4hx9Y.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23622071)
 If your numbers aren't big, I would do: 

  def is_perfect_cube(number):
    return number in [x**3 for x in range(15)]
  

 Of course,  15  could be replaced with something more appropriate. 

 If you do need to deal with big numbers, I would use the http://pypi.python.org/pypi/sympy/0.7.5 library to get more accurate results. 

  from sympy import S, Rational

def is_perfect_cube(number):
    # change the number into a sympy object
    num = S(number)
    return (num**Rational(1,3)).is_Integer
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21586772)
 The result of 125 ** (1.0/3.0) is never going to be an integer because that is a floating-point operation.  This is much easier to do by looking at the cube instead.  For instance, if you just want the largest number with an integer cube root below some number max, then you could: 

  max = 12000
cube_root = int(max ** (1.0/3.0))  # Take cube root and round to nearest integer
cubed = cube_root ** 3             # Find cube of this number
print str(cube_root) + " is the cube root of " + str(cubed)  # Output result
  

 The only sticking point for the above is if it happens to start the code with a max that is a cube root, and the cube root rounds to 4.9999999999999.  When converted to an integer, this will round to 4, skipping the correct cube root (5) and going straight to "4 is the cube root of 64".  You can get around this a few different ways.  One way would be to convert the second line to: 

  cube_root = int(max ** (1.0/3.0) + 0.5)
  

 This converts the "round down" operation of int() into a "round to nearest" operation. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52229385)
 You can use  product  from  itertools  

  from itertools import product

def vertices(N): 
    return list(product((1, -1), repeat=N))

print(vertices(1))
# [(1,), (-1,)]

print(vertices(2))
# [(1, 1), (1, -1), (-1, 1), (-1, -1)]

print(vertices(3))
# [(1, 1, 1), (1, 1, -1), (1, -1, 1), (1, -1, -1), (-1, 1, 1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40082559)
 I think you should use the https://docs.python.org/2/library/functions.html#round function to get the answer. If I had to write a function then it will be as follows: 

  def cube_integer(n):
    if round(n**(1.0/3.0))**3 == n:
        return True
    return False
  

 You can use something similar to  int(n**(1.0/3.0)) == n**(1.0/3.0) , but in python because of some issues with the computation of the value of cube root, it is not exactly computed. For example  int(41063625**(1.0/3.0))  will give you 344, but the value should be 345. 

 Hope I have answered your question. If you have any doubt, then feel free to http://radiusofcircle.blogspot.com. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52229558)
 Here's another method:  2*((np.arange(2**N)[:,None] & (1 << np.arange(N))) > 0) - 1  

  In [25]: N = 1

In [26]: 2*((np.arange(2**N)[:,None] & (1 << np.arange(N))) > 0) - 1
Out[26]: 
array([[-1],
       [ 1]])

In [27]: N = 2

In [28]: 2*((np.arange(2**N)[:,None] & (1 << np.arange(N))) > 0) - 1
Out[28]: 
array([[-1, -1],
       [ 1, -1],
       [-1,  1],
       [ 1,  1]])

In [29]: N = 3

In [30]: 2*((np.arange(2**N)[:,None] & (1 << np.arange(N))) > 0) - 1
Out[30]: 
array([[-1, -1, -1],
       [ 1, -1, -1],
       [-1,  1, -1],
       [ 1,  1, -1],
       [-1, -1,  1],
       [ 1, -1,  1],
       [-1,  1,  1],
       [ 1,  1,  1]])
  

 What it does: 

 
 Create an array of integers from 0 to 2**N-1. 
 Convert the integers to binary (e.g. 3 becomes [1, 1, 0]). 
 Multiply the binary array by 2 and subtract 1 to convert from 0 and 1 to -1 and 1. 
 

 Numpy broadcasting is used to vectorize the operations. 



