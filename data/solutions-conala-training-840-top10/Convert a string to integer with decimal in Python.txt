Query: Convert a string to integer with decimal in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1094741)
 You could use: 

  s = '23.245678'
i = int(float(s))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9210558)
 If by "hex data" you mean a string of the form 

  s = "6a48f82d8e828ce82b82"
  

 you can use 

  i = int(s, 16)
  

 to convert it to an integer and 

  str(i)
  

 to convert it to a decimal string. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1094745)
   Do you 2.67 to turn into 3, or 2.  If you want to use rounding, try this: 

  s = '234.67'
i = int(round(float(s)))
  

  

  s = '234.67'
i = int(float(s))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17418407)
 You can also use  math.modf  (http://docs.python.org/2/library/math.html#math.modf) 

  >>> math.modf(1.0000000000000003)
(2.220446049250313e-16, 1.0)
python2.7 -m timeit -s 'import math' 'math.modf(1.0000000000000003)'
1000000 loops, best of 3: 0.191 usec per loop
  

 The  divmod  method: 

  python2.7 -m timeit -s 'import decimal' 'divmod(decimal.Decimal(1.0000000000000003),decimal.Decimal(1))'
1000 loops, best of 3: 39.8 usec per loop
  

 I believe the more efficient is  math.modf  

 Edit 

 I guess even more simpler and efficient way is to just convert the string to an integer: 

  >>>a = int(Decimal('1.0000000000000003'))
1

>>>python2.7 -m timeit -s 'import decimal' 'int(decimal.Decimal('1.0000000000000003'))'
10000 loops, best of 3: 11.2 usec per loop
  

 To get the decimal part: 

  >>>int(Decimal('1.0000000000000003')) - a
3E-16
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19532926)
 The problem is simple.  6E+007  is not an integer notation, but a float notation. 

 Instead of  int('6E+007') , use float first: 

  int(float('6E+007'))
  

 Or, use the decimal module: 

  import decimal
int(decimal.Decimal('6E+007'))
  

 Also, IMO if you want the number to have two decimal places, you should use float instead, since the value of an integer cannot contain any fractional component, and will always be like that. For example,  int('1.5')  will always be  1 , not 1.5. 

 So just use: 

  value = float(value/100) #Well, i'll keep the division here,
# since i don't know what it's about.
return ":{.2f}".format(value)
  

 Hope this helps! 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/575939)
 The problem with eval is that, as in python, the quotient of integers is an integer. So, you have several choices. 

 The first is simply to make integer division return floats: 

  from __future__ import division
  

 The other is to split the rational number: 

  reduce(lambda x, y: x*y, map(int, rat_str.split("/")), 1)
  

 Where rat_str is the string with a rational number. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8637650)
 Using http://docs.python.org/library/string.html#format-string-syntax: 

  for i in (1234,5,999):
    print('{:.2f}'.format(i/100.))
  

  

  12.34
0.05
9.99
  

 In Python2.6 use  '{0:.2f}'  instead of  '{:.2f}' . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1094781)
 The expression  int(float(s))  mentioned by others is the best if you want to truncate the value. If you want rounding, using  int(round(float(s))  if the round algorithm matches what you want (see the http://docs.python.org/library/functions.html?highlight=round#round), otherwise you should use  Decimal  and one if its rounding algorithms. 



