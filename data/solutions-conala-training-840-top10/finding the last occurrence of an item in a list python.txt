Query: finding the last occurrence of an item in a list python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30940242)
 Use a simple loop: 

  def reversed_index(items, value):
    for pos, curr in enumerate(reversed(items)):
        if curr == value:
            return len(items) - pos - 1
    raise ValueError("{0!r} is not in list".format(value))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34438985)
 It's pity lists don't have a  rindex  method, but you could use  index : 

  last = len(s) - s[::-1].index(x) - 1
  

  

  for i, v in enumerate(reversed(s)):
    if v == x:
        last = len(s) - i - 1
        break
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/18157104)
 If you are searching for the index of the last occurrence of  myvalue  in  mylist : 

  len(mylist) - mylist[::-1].index(myvalue) - 1
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49814505)
  last_occurence=len(yourlist)-yourlist[::-1].index(element)-1
  

 just easy as that.no need to import or create a function. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34439085)
 Iterate list in reverse order and then check x. This could be an efficient way as reversing list and then finding index from beginning is resource intensive. 

  def PositionLast (x,s):
    for i in range(len(s)-1,0,-1):
        if s[i] == x:
            return i
    return None
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9542768)
 As for your first question: that code is perfectly fine and should work if  item  equals one of the elements inside  myList . Maybe you try to find a string that does not  exactly  match one of the items or maybe you are using a float value which suffers from inaccuracy. 

 As for your second question: There's actually several possible ways if "finding" things in lists. 

 Checking if something is inside</h3>

 This is the use case you describe: Checking whether something is inside a list or not. As you know, you can use the  in  operator for that: 

  3 in [1, 2, 3] # => True
  

 Filtering a collection</h3>

 That is, finding all elements in a sequence that meet a certain condition. You can use list comprehension or generator expressions for that: 

  matches = [x for x in lst if fulfills_some_condition(x)]
matches = (x for x in lst if x > 6)
  

 The latter will return a  generator  which you can imagine as a sort of lazy list that will only be built as soon as you iterate through it. By the way, the first one is exactly equivalent to 

  matches = filter(fulfills_some_condition, lst)
  

 in Python 2. Here you can see higher-order functions at work. In Python 3,  filter  doesn't return a list, but a generator-like object. 

 Finding the first occurrence</h3>

 If you only want the first thing that matches a condition (but you don't know what it is yet), it's fine to use a for loop (possibly using the  else  clause as well, which is not really well-known). You can also use 

  next(x for x in lst if ...)
  

 which will return the first match or raise a  StopIteration  if none is found. Alternatively, you can use 

  next((x for x in lst if ...), [default value])
  

 Finding the location of an item</h3>

 For lists, there's also the  index  method that can sometimes be useful if you want to know  where  a certain element is in the list: 

  [1,2,3].index(2) # => 1
[1,2,3].index(4) # => ValueError
  

 However, note that if you have duplicates,  .index  always returns the lowest index:...... 

  [1,2,3,2].index(2) # => 1
  

 If there are duplicates and you want all the indexes then you can use  enumerate()  instead: 

  [i for i,x in enumerate([1,2,3,2]) if x==2] # => [1, 3]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/48140611)
  Finding the first occurrence  

 There's a recipe for that in  itertools : 

  def first_true(iterable, default=False, pred=None):
    """Returns the first true value in the iterable.

    If no true value is found, returns *default*

    If *pred* is not None, returns the first item
    for which pred(item) is true.

    """
    # first_true([a,b,c], x) --> a or b or c or x
    # first_true([a,b], x, f) --> a if f(a) else b if f(b) else x
    return next(filter(pred, iterable), default)
  

 For example, the following code finds the first odd number in a list: 

  >>> first_true([2,3,4,5], None, lambda x: x%2==1)
3  
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/34439067)
 Your code is wrong, it's checking the list from the beginning and stopping at the first match, what you want is to check the list in reverse order. 

  def PositionLast (x,s):
    count = len(s)
    for i in s[::-1]:
        count -= 1
        if i == x:
            return count
    return None
  

 Your first line gives you the correct answer only because of coincidence: 
- Counts equal 5 when checking for the first item. 
- Counts equal 4 when checking for the second item, it matches, then return 4. 
- Coincidentally, this is the index of your last item.   



