Query: How to apply itertools.product to elements of a list of lists?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37677308)
 https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists the lists in your list with the star operator  *  to apply the product to your sublists.  

  product=list(itertools.product(*elements))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31206438)
 You want to apply an operator on pairs from the https://en.wikipedia.org/wiki/Cartesian_product of two lists. Let's say op defines the operation you want to apply to the two items, e.g: 

  op = lambda x, y: x == y
  

 and have two lists 

  a = [1, 2, 3]
b = [2, 3, 4]
  

 You can apply op on all pairs as a list comprehension as follows: 

  c = [op(x, y) for y in b for x in a]
  

 To use the map function you first need to create the cartesian product using https://docs.python.org/3.1/library/itertools.html#itertools.product. This effectively creates a double loop over the elements of both list just like the list comprehension. You will need to adjust the op definition slightly for this since it will only receive one argument consisting of the tuple (x, y). For example: 

  op2 = lambda t: t[0] == t[1]
d = map(op2, itertools.product(a, b))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48515324)
 Here's what will do the trick -  

  import itertools
lst = [['a'], ['b', 'c'], ['d', ['e', 'f']]]
outp = list(itertools.product(*lst))
out = []
for i in outp:
    temp = []
    for j in i:
        if isinstance(j, list):
            for k in j:
                temp.append(k)
        else:
            temp.append(j)
    out.append(temp)
print(out)
  

 Start off by forming the output materials using  itertools.product  and then simply formatting it in a way that the nested lists are flattened out. 

 Output 

  [['a', 'b', 'd'], ['a', 'b', 'e', 'f'], ['a', 'c', 'd'], ['a', 'c', 'e', 'f']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3034027)
  >>> list(itertools.product(*arrays))
[(-1, -2, -3), (-1, -2, 3), (-1, 2, -3), (-1, 2, 3), (1, -2, -3), (1, -2, 3), (1, 2, -3), (1, 2, 3)]
  

 This will feed all the pairs as separate arguments to  product , which will then give you the cartesian product of them. 

 The reason your version isn't working is that you are giving  product  only one argument. Asking for a cartesian product of one list is a trivial case, and returns a list containing only one element (the list given as argument). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2853251)
 itertools.product works for me. 

  >>> l=[ [ 1, 2, 3], [4], [5, 6] ]
>>> list(itertools.product(*l))
[(1, 4, 5), (1, 4, 6), (2, 4, 5), (2, 4, 6), (3, 4, 5), (3, 4, 6)]
>>> l=[ [ 1, 2, 3], [4], [5, 6],[7,8] ]
>>> list(itertools.product(*l))
[(1, 4, 5, 7), (1, 4, 5, 8), (1, 4, 6, 7), (1, 4, 6, 8), (2, 4, 5, 7), (2, 4, 5, 8), (2, 4, 6, 7), (2, 4, 6, 8), (3, 4, 5, 7), (3, 4, 5, 8), (3, 4, 6,
 7), (3, 4, 6, 8)]
>>>
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42631233)
 You could explicitly create your pairwise items using  itertools.product , then operate on those pairs again with  itertools.product  

  import itertools
a = ['a', 'b']
b = [1, 2, 3]
pairs = [list(itertools.product([ai], b)) for ai in a]
  

  pairs  will contain the two lists that can fed into  itertools.product  again. 

  list(itertools.product(*pairs))
  

 The result is: 

  [(('a', 1), ('b', 1)),
 (('a', 1), ('b', 2)),
 (('a', 1), ('b', 3)),
 (('a', 2), ('b', 1)),
 (('a', 2), ('b', 2)),
 (('a', 2), ('b', 3)),
 (('a', 3), ('b', 1)),
 (('a', 3), ('b', 2)),
 (('a', 3), ('b', 3))]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11676147)
 You can use  itertools.product() : 

  map("".join, itertools.product(list1, list2, list3))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38181023)
 Can use itertools.product too. 

  >>> common_elements=[]
>>> for i in list(itertools.product(a,b)):
...     if i[0] == i[1]:
...         common_elements.append(i[0])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43386159)
 You can use  itertools.product  together with  map : 

  list(map('-'.join, itertools.product('abcd', 'kjlm')))
# ['a-k', 'a-j', 'a-l', 'a-m', 'b-k', 'b-j', 'b-l', 'b-m', 'c-k', 'c-j', 'c-l', 'c-m', 'd-k', 'd-j', 'd-l', 'd-m']
  

 Test for correctness and timings: 

 The usual disclaimers for benchmarks apply. 

 Under the test conditions the above (" product map ") solution is faster than the "naive" list comprehension (" naive "), although the margin is small for small problem size. 

 Much of the speed-up appears to be due to avoiding a list comprehension. Indeed if  map  is replaced by a list comprehension (" product compr ") then  product  still scales better than the naive approach, but at small problem size falls behind: 

  small (4x4)
results equal: True True
naive             0.002420 ms
product compr     0.003211 ms
product map       0.002146 ms
large (4x4x4x4x4x4)
results equal: True True
naive             0.836124 ms
product compr     0.681193 ms
product map       0.385240 ms
  

  

  import itertools
import timeit

lists = [[chr(97 + 4*i + j) for j in range(4)] for i in range(6)]

print('small (4x4)')
print('results equal:', [x+'-'+y for x in lists[0] for y in lists[1]]
      ==
      list(map('-'.join, itertools.product(lists[0], lists[1]))), end=' ')
print(['-'.join(t) for t in  itertools.product(lists[0], lists[1])]
      ==
      list(map('-'.join, itertools.product(lists[0], lists[1]))))

print('{:16s} {:9.6f} ms'.format('naive', timeit.timeit(lambda: [x+'-'+y for x in lists[0] for y in lists[1]], number=1000)))
print('{:16s} {:9.6f} ms'.format('product compr', timeit.timeit(lambda: ['-'.join(t) for t in itertools.product(lists[0], lists[1])], number=1000)))
print('{:16s} {:9.6f} ms'.format('product map', timeit.timeit(lambda: list(map('-'.join, itertools.product(lists[0], lists[1]))), number=1000)))

print('large (4x4x4x4x4x4)')
print('results equal:', ['-'.join((u, v, w, x, y, z)) for u in lists[0] for v in lists[1] for w in lists[2] for x in lists[3] for y in lists[4] for z in lists[5]]
      ==
      list(map('-'.join, itertools.product(*lists))), end=' ')
print(['-'.join(t) for t in  itertools.product(*lists)]
      ==
      list(map('-'.join, itertools.product(*lists))))

print('{:16s} {:9.6f} ms'.format('naive', timeit.timeit(lambda: ['-'.join((u, v, w, x, y, z)) for u in lists[0] for v in lists[1] for w in lists[2] for x in lists[3] for y in lists[4] for z in lists[5]], number=1000)))
print('{:16s} {:9.6f} ms'.format('product compr', timeit.timeit(lambda: ['-'.join(t) for t in  itertools.product(*lists)], number=1000)))
print('{:16s} {:9.6f} ms'.format('product map', timeit.timeit(lambda: list(map('-'.join, itertools.product(*lists))), number=1000)))
  



