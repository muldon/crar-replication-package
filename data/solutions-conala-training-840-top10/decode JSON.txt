Query: decode JSON
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12511364)
 Use http://deron.meranda.us/python/demjson/ module, which has ability to decode in non-strict mode.  

  In [1]: import demjson
In [2]: demjson.decode('{ hotel: { id: "123", name: "hotel_name"} }')
Out[2]: {u'hotel': {u'id': u'123', u'name': u'hotel_name'}}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4487520)
 Decode using the  unicode-escape  codec. 

  >>> print '\\u4f53\\u91cd\\u8a08'.decode('unicode-escape')
体重計
  

 Or if what you have is actually a JSON fragment, decode as JSON. 

  >>> print json.loads('"\\u4f53\\u91cd\\u8a08"')
体重計
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35052042)
 Specify the encoding in the  open  call. 

  # encoding is a keyword argument
open("/Users/.../KanyeAllSongs.txt", encoding='utf-8') as data_file:
    data=json.load(data_file)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31709042)
 Did you try to parse it with the  json  module? 

  import json
parsed = json.loads(response.content)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43153115)
   .json  file is encoded as UTF-8.  pd.read_json  tries to decode it as CP1252. You need to make it decode it as UTF-8: 

  import pandas as pd

json_df = pd.read_json('input.json', encoding='UTF-8')
json_df
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19872879)
  \xe1  is not decodable using utf-8, utf-16 encoding. 

<pre class="lang-none prettyprint-override"> >>> '\xe1'.decode('utf-8')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xe1 in position 0: unexpected end of data
>>> '\xe1'.decode('utf-16')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Python27\lib\encodings\utf_16.py", line 16, in decode
    return codecs.utf_16_decode(input, errors, True)
UnicodeDecodeError: 'utf16' codec can't decode byte 0xe1 in position 0: truncated data
  

 Try latin-1 encoding: 

  >>> record = (5790, 'Vlv-Gate-Assy-Mdl-\xe1M1-2-\xe19/16-10K-BB Credit Memo            ',
...           60, True, '40141613')
>>> json.dumps(record, encoding='latin1')
'[5790, "Vlv-Gate-Assy-Mdl-\\u00e1M1-2-\\u00e19/16-10K-BB Credit Memo            ", 60, true, "40141613"]'
  

 Or, specify  ensure_ascii=False ,  json.dumps  to make  json.dumps  not try to decode the string. 

  >>> json.dumps(record, ensure_ascii=False)
'[5790, "Vlv-Gate-Assy-Mdl-\xe1M1-2-\xe19/16-10K-BB Credit Memo            ", 60, true, "40141613"]'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12511254)
 You could try and use a wrapper for a JavaScript engine, http://code.google.com/p/pyv8/ 

  import PyV8
ctx = PyV8.JSContext()
ctx.enter()
# Note that we need to insert an assignment here ('a ='), or syntax error.
js = 'a = ' + '{ hotel: { id: "123", name: "hotel_name"} }'
a = ctx.eval(js)
a.hotel.id
>> '123' # Prints
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48175409)
  $ wget https://s3.amazonaws.com/wherego-sims/tags.json 
$ file tags.json 
tags.json: UTF-8 Unicode (with BOM) text, with CRLF line terminators
  

 This file begins with a byte order mark (EF BB BF), which is illegal in JSON (https://stackoverflow.com/questions/4990095/json-specification-and-usage-of-bom-charset-encoding). You must first decode this using  'utf-8-sig'  in Python to get a valid JSON unicode string. 

  json.loads(filePath.read().decode('utf-8-sig'))
  

 For what it's worth, Python 3 (which you should be using) will give a specific error in this case and guide you in handling this malformed file: 

 
   json.decoder.JSONDecodeError: Unexpected UTF-8 BOM (decode using utf-8-sig): line 1 column 1 (char 0) 
 

 Namely, by specifying that you wish to discard the BOM if it exists (again, it's not conventional to use this in UTF-8, particularly with JSON which is always encoded in UTF-8 so it is worse than useless): 

  >>> import json
>>> json.load(open('tags.json', encoding='utf-8-sig'))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42683500)
 Let requests decode it for you: 

  data = response.json()
  

 This will check headers (Content-Type) and response encoding, auto-detecting how to decode the content correctly. 



