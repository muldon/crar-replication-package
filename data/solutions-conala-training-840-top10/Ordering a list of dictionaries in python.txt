Query: Ordering a list of dictionaries in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/861218)
 Something along the lines of the following ought to work: 

  def cmp_dict(x, y):
    weight_diff = y['weight'] - x['weight']
    if weight_diff == 0:
        return y['factor'] - x['factor']
    else:
        return weight_diff

myList.sort(cmp_dict)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17362960)
 Dictionaries in Python are orderless.  

 In order to actually store ordering, you will need to either have a list of tuples, or use a http://docs.python.org/2/library/collections.html#collections.OrderedDict. 

  >>> from collections import OrderedDict
>>> OrderedDict(sorted(d.items(), key=lambda item: len(item[1])))
OrderedDict([('category_3', ['z']), ('category_1', ['a', 'b']), ('category_2', ['c', 'd', 'e'])])
  

 The ordering is achieved here by using http://docs.python.org/3.3/library/functions.html#sorted, with a simple  key  function. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14538513)
  In [9]: import operator

In [10]: a = [{'a':3,'b':4}, {'c':14,'d':24}]

In [11]: reduce(operator.add, (d.values() for d in a))
Out[11]: [3, 4, 14, 24]
  

 Bear in mind that Python dictionaries are unordered. This means that the ordering of keys (and their values) within each of the dictionaries is not guaranteed. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/861355)
 I accepted dF's answer for the inspiration, but here is what I ultimately settled on for my scenario: 

  @staticmethod
def ordered_list(mylist):
    def sort_func(d):
        return (d['weight'], d['factor'])

    mylist.sort(key=sort_func)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13473515)
 You'll need to use a function to flatten your structure: 

  def flatten(d):
    for key, value in d.iteritems():
        yield key
        for sub in flatten(value):
            yield sub
  

   .iteritems()  should be replaced with  .items()  if you are using Python 3). 

 On python 3.3 and newer, you can also use the new http://docs.python.org/3/whatsnew/3.3.html#pep-380: 

  def flatten(d):
    for key, value in d.items():
        yield key
        yield from flatten(value)
  

 This will recursively yield all the keys. To turn that into a list use: 

  list(flatten(elements))
  

 Since Python dictionaries are unordered, the ordering of the keys returned is not going to be sorted. You'll have to explicitly sort the result if you want your keys to have a specific ordering. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5455643)
 Python dictionaries don't have any 'order' associated with them. It's merely a 'coincidence' that the dict is printing the same order. There are no guarantees that items in a dictionary with come out in any order. 

 If you want to deal with ordering you'll need to convert the dictionary to a list. 

  a = list(a) # keys in list
a = a.keys() # keys in list
a = a.values() # values in list
a = a.items() # tuples of (key,value) in list
  

 Now you can sort the list as normal, e.g.,  a.sort()  and reverse it as well, e.g.,  a.reverse()    


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38142177)
 You could collect the dictionaries to https://docs.python.org/3.5/library/collections.html#collections.OrderedDict where key is the store and value is the lowest price. Then you can easily reconstruct the dictionaries with list comprehension: 

  from collections import OrderedDict

d = OrderedDict()
for x in somelist:
    d[x['store']] = min(d.get(x['store'], float('inf')), x['price'])

[{'store': k, 'price': v} for k, v in d.items()] # [{'price': 900, 'store': 'Amazon'}, {'price': 1200, 'store': 'Junglee'}, {'price': 1200, 'store': 'BestBuy'}]
  

 If there's no need to preserve the ordering of the stores you could use standard  dict  as well. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/9427216)
  

  [dict(t) for t in {tuple(d.items()) for d in l}]
  

 The strategy is to convert the list of dictionaries to a list of tuples where the tuples contain the items of the dictionary. Since the tuples can be hashed, you can remove duplicates using  set  (using a  set comprehension  here, older python alternative would be  set(tuple(d.items()) for d in l) ) and, after that, re-create the dictionaries from tuples with  dict . 

 where: 

 
  l  is the original list 
  d  is one of the dictionaries in the list 
  t  is one of the tuples created from a dictionary 
 

 Edit: If you want to preserve ordering, the one-liner above won't work since  set  won't do that. However, with a few lines of code, you can also do that: 

  l = [{'a': 123, 'b': 1234},
        {'a': 3222, 'b': 1234},
        {'a': 123, 'b': 1234}]

seen = set()
new_l = []
for d in l:
    t = tuple(d.items())
    if t not in seen:
        seen.add(t)
        new_l.append(d)

print new_l
  

 Example output: 

  [{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}]
  

 Note: As pointed out by @alexis it might happen that two dictionaries with the same keys and values, don't result in the same tuple. That could happen if they go through a different adding/removing keys history. If that's the case for your problem, then consider sorting  d.items()  as he suggests. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35237313)
 Regular python dicts are not ordered. It is never guaranteed that when you get the list of keys that they will be the order you expect them to be. 

 If you want to preserve order, use an ordered dict. 

 https://docs.python.org/2/library/collections.html#collections.OrderedDict 



