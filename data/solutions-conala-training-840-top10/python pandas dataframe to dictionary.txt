Query: python pandas dataframe to dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34589389)
  pd.DataFrame({'Keys': MyDict.keys(), 'Values': MyDict.values()})
  

 returns 

     Keys  Values
0  key2  value2
1  key1  value1
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34598612)
 If you want to use loc() to access each row in the DataFrame by key then 

  MyDF = pd.DataFrame([v for v in MyDict.values()], columns = ['value'],
                    index = [k for k in MyDict.keys()])
  

 MyDF then contains 

         value
key2  value2
key1  value1
  

  

  MyDF.loc['key2'].value
  

 returns 

  value2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38518890)
 Try this:  Do not name your variables python key words!   

  dd = {'stock1': (5,6,7), 'stock2': (1,2,3),'stock3': (7,8,9)};
#pd.DataFrame(dd) Should work!

pd.DataFrame.from_dict(dd, orient='columns')

   stock1  stock2  stock3
0       5       1       7
1       6       2       8
2       7       3       9
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24370510)
 If you want a simple way to preserve duplicates, you could use  groupby : 

  >>> ptest = pd.DataFrame([['a',1],['a',2],['b',3]], columns=['id', 'value']) 
>>> ptest
  id  value
0  a      1
1  a      2
2  b      3
>>> {k: g["value"].tolist() for k,g in ptest.groupby("id")}
{'a': [1, 2], 'b': [3]}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54258980)
 I would create a  Series  using  MultiIndex.from_tuples  and then  unstack  it. 

  keys, values = zip(*counter.items())
idx = pd.MultiIndex.from_tuples(keys)

pd.Series(values, index=idx).unstack(-1, fill_value=0)

   b  d
a  5  2
c  0  7
  

 

 Using  DataFrame  constructor with  stack : 

  pd.DataFrame(counter, index=[0]).stack().loc[0].T

     b    d
a  5.0  2.0
c  NaN  7.0
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38517970)
 You are overcomplicating the problem, just pass your dictionary into the  DataFrame  constructor: 

  import pandas as pd

d = {'stock1': (5,6,7), 'stock2': (1,2,3),'stock3': (7,8,9)}
print(pd.DataFrame(d))
  

  

     stock1  stock2  stock3
0       5       1       7
1       6       2       8
2       7       3       9
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52326613)
 You can use 'dict comprehension' 

  my_dict = {row[0]: row[1] for row in df.values}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41206500)
 You need to first convert to a  pandas.DataFrame  using  toPandas() , then you can use the  to_dict()  method on the transposed dataframe with  orient='list' : 

  df.toPandas().set_index('name').T.to_dict('list')
# Out[1]: {u'Alice': [10, 80]}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/32042365)
 A Spark DataFrame can be converted to a pandas DataFrame with the https://spark.apache.org/docs/latest/api/python/pyspark.sql.html method. 



