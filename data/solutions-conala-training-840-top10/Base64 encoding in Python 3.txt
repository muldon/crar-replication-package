Query: Base64 encoding in Python 3
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35674047)
 Base64 is an ascii encoding so you can just decode with ascii 

  >>> import base64
>>> example = b'\x01'*10
>>> example
b'\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
>>> result = base64.b64encode(example).decode('ascii')
>>> print(repr(result))
'AQEBAQEBAQEBAQ=='
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53444581)
 Code as follows: 

  base64.urlsafe_b64encode('Some String'.encode('UTF-8')).decode('ascii')
  

  For example:   return {'raw': base64.urlsafe_b64encode(message.as_string().encode('UTF-8')).decode('ascii')}  

  Worked for me.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42744163)
 1) This works without imports in Python 2: 

  >>>
>>> 'Some text'.encode('base64')
'U29tZSB0ZXh0\n'
>>>
>>> 'U29tZSB0ZXh0\n'.decode('base64')
'Some text'
>>>
>>> 'U29tZSB0ZXh0'.decode('base64')
'Some text'
>>>
  

 (although this doesn't work in Python3 ) 

 2) In Python 3 you'd have to import base64 and do base64.b64decode('...')
- will work in Python 2 too. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49677839)
  img.decode("utf-8")
  

 You can decode the variable with the above.  Then convert it to base64.   

  " ".format( base64.b64encode(img.decode("utf-8")) )
  

 UPDATED: 

 What you really want is this: 

  raw_img = repr(img)
" ".format( base64.b64encode(raw_img) )
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49853281)
 Python has native support for both HEX and base64 encoding: 

  import base64

def main():
    b16 = bytearray('10000000000002ae'.decode('hex'))
    b64 = base64.b64encode(b16)

    print b64
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33704357)
 Python has native support for both HEX and base64 encoding: 

  encoded = HEX_STRING.decode("hex").encode("base64")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23164102)
 Remember to import base64 and that b64encode takes bytes as an argument. 

  import base64
base64.b64encode(bytes('your string', 'utf-8'))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41437531)
 Short Answer 

 You need to push a  bytes-like  object ( bytes ,  bytearray , etc) to the  base64.b64encode()  method. Here are two ways: 

  >>> data = base64.b64encode(b'data to be encoded')
>>> print(data)
b'ZGF0YSB0byBiZSBlbmNvZGVk'
  

  

  >>> string = 'data to be encoded'
>>> data = base64.b64encode(string.encode())
>>> print(data)
b'ZGF0YSB0byBiZSBlbmNvZGVk'
  

  

 In Python 3,  str  objects are not C-style character arrays (so they are  not  byte arrays), but rather, they are data structures that do not have any inherent encoding. You can encode that string (or interpret it) in a variety of ways. The most common (and default in Python 3) is utf-8, especially since it is backwards compatible with ASCII (although, as are most widely-used encodings). That is what is happening when you take a  string  and call the  .encode()  method on it: Python is interpreting the string in utf-8 (the default encoding) and providing you the array of bytes that it corresponds to. 

 Base-64 Encoding in Python 3 

 Originally the question title asked about Base-64 encoding. Read on for Base-64 stuff. 

  base64  encoding takes 6-bit binary chunks and encodes them using the characters A-Z, a-z, 0-9, '+', '/', and '=' (some encodings use different characters in place of '+' and '/'). This is a character encoding that is based off of the mathematical construct of radix-64 or base-64 number system, but they are very different. Base-64 in math is a number system like binary or decimal, and you do this change of radix on the entire number, or (if the radix you're converting from is a power of 2 less than 64) in chunks from right to left. 

 In  base64  encoding, the translation is done from left to right; those first 64 characters are why it is called  base64   encoding . The 65th '=' symbol is used for padding, since the encoding pulls 6-bit chunks but the data it is usually meant to encode are 8-bit bytes, so sometimes there are only two or 4 bits in the last chunk. 

 Example: 

  >>> data = b'test'
>>> for byte in data:
...     print(format(byte, '08b'), end=" ")
...
01110100 01100101 01110011 01110100
>>>
  

 If you interpret that binary data as a single integer, then this is how you would convert it to base-10 and base-64 (http://www.garykessler.net/library/base64.html): 

  base-2:  01 110100 011001 010111 001101 110100 (base-64 grouping shown)
base-10:                            1952805748
base-64:  B      0      Z      X      N      0
  

  base64   encoding , however, will re-group this data thusly: 

  base-2:  011101  000110  010101 110011 011101 00(0000) <- pad w/zeros to make a clean 6-bit chunk
base-10:     29       6      21     51     29      0
base-64:      d       G       V      z      d      A
  

 So, 'B0ZXN0' is the base-64 version of our binary, mathematically speaking. However,  base64   encoding  has to do the encoding in the opposite direction (so the raw data is converted to 'dGVzdA') and also has a rule to tell other applications how much space is left off at the end. This is done by padding the end with '=' symbols. So, the  base64  encoding of this data is 'dGVzdA==', with two '=' symbols to signify two pairs of bits will need to be removed from the end when this data gets decoded to make it match the original data. 

 Let's test this to see if I am being dishonest: 

  >>> encoded = base64.b64encode(data)
>>> print(encoded)
b'dGVzdA=='
  

 Why use  base64  encoding? 

 Let's say I have to send some data to someone via email, like this data: 

  >>> data = b'\x04\x6d\x73\x67\x08\x08\x08\x20\x20\x20'
>>> print(data.decode())

>>> print(data)
b'\x04msg\x08\x08\x08   '
>>>
  

 There are two problems I planted: 

 
 If I tried to send that email in Unix, the email would send as soon as the  \x04  character was read, because that is ASCII for  END-OF-TRANSMISSION  (Ctrl-D), so the remaining data would be left out of the transmission. 
 Also, while Python is smart enough to escape all of my evil control characters when I print the data directly, when that string is decoded as ASCII, you can see that the 'msg' is not there. That is because I used three  BACKSPACE  characters and three  SPACE  characters to erase the 'msg'. Thus, even if I didn't have the  EOF  character there the end user wouldn't be able to translate from the text on screen to the real, raw data. 
 

 This is just a demo to show you how hard it can be to simply send raw data. Encoding the data into base64 format gives you the exact same data but in a format that ensures it is safe for sending over electronic media such as email. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11511813)
 This is no different than encoding any other file... 

  import base64

with open('input.zip', 'rb') as fin, open('output.zip.b64', 'w') as fout:
    base64.encode(fin, fout)
  

 NB: This avoids reading the file into memory to encode it, so should be more efficient. 



