Query: Python Pandas: How to get the row names from index of a dataframe?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26640260)
 if you want to get the index values, you can simply do: 

 
   dataframe.index 
 

 this will output a pandas.core.index 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43809979)
 this seems to work fine : 

  dataframe.axes[0].tolist()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43068473)
 I think you need index columns names by position (python counts from  0 , so for fourth column need  3 ): 

  colname = df.columns[pos]
  

  

  df = pd.DataFrame({'A':[1,2,3],
                   'B':[4,5,6],
                   'C':[7,8,9],
                   'D':[1,3,5],
                   'E':[5,3,6],
                   'F':[7,4,3]})

print (df)
   A  B  C  D  E  F
0  1  4  7  1  5  7
1  2  5  8  3  3  4
2  3  6  9  5  6  3

pos = 3
colname = df.columns[pos]
print (colname)
D
  

 

  pos = [3,5]
colname = df.columns[pos]
print (colname)
Index(['D', 'F'], dtype='object')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26644361)
 If you want to pull out only the index values for certain integer-based row-indices, you can do something like the following using the  iloc  method: 

  In [28]: temp
Out[28]:
       index                 time  complete
row_0      2  2014-10-22 01:00:00         0
row_1      3  2014-10-23 14:00:00         0
row_2      4  2014-10-26 08:00:00         0
row_3      5  2014-10-26 10:00:00         0
row_4      6  2014-10-26 11:00:00         0

In [29]: temp.iloc[[0,1,4]].index
Out[29]: Index([u'row_0', u'row_1', u'row_4'], dtype='object')

In [30]: temp.iloc[[0,1,4]].index.tolist()
Out[30]: ['row_0', 'row_1', 'row_4']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47879500)
 Using numpy argsort,  

  pd.DataFrame(df.columns[np.argsort(-df.values, axis=1)])


    0   1   2   3
0   B   C   A   D
1   C   A   B   D
2   D   A   C   B
3   A   D   C   B
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47879432)
 You can use : 

  temp = np.flip(df.values.argsort(),1)
ndf = pd.DataFrame(df.columns[temp])

   0  1  2  3
0  B  C  D  A
1  C  A  B  D
2  D  C  A  B
3  D  A  C  B
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36924987)
 You can concat the temp df with the original df but you need to pass the same column names so that it aligns in the concatenated df, additionally to get the index as you desire call  reset_index  with  drop=True  param. 

  In [87]:
pd.concat([pd.DataFrame([[0,0,0]], columns=df.columns),df]).reset_index(drop=True)

Out[87]:
   a  b   c
0  0  0   0
1  1  5   9
2  2  6  10
3  3  7  11
4  4  8  12
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43620031)
 I also like  itertuples()  

  for row in df.itertuples():
    print(row.A)
    print(row.Index)
  

 since row is a named tuples, if you meant to access values on each row this should be  MUCH  faster 

 speed run : 

  df = pd.DataFrame([x for x in range(1000*1000)], columns=['A'])
st=time.time()
for index, row in df.iterrows():
    row.A
print(time.time()-st)
45.05799984931946

st=time.time()
for row in df.itertuples():
    row.A
print(time.time() - st)
0.48400020599365234
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26640189)
  df.index
  

 outputs the row names as pandas  Index  object.  For a list, 

  list(df.index)
  

 lastly, the index supports label slicing similar to columns 

  df.index['Row 2':'Row 5'] 
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54515403)
 Use https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html with converting  DataFrame  to array by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html, only necessary only numeric data: 

  df = pd.DataFrame({
         'B':[4,5,4,5,5,4],
         'C':[7,8,9,4,2,3],
         'D':[1,3,5,7,1,0],
         'E':[-5,3,6,9,2,-4]

})

print (df)
   B  C  D  E
0  4  7  1 -5
1  5  8  3  3
2  4  9  5  6
3  5  4  7  9
4  5  2  1  2
5  4  3  0 -4

df['col'] = df.values.argmin(axis=1)
print (df)
   B  C  D  E  col
0  4  7  1 -5    3
1  5  8  3  3    2
2  4  9  5  6    0
3  5  4  7  9    1
4  5  2  1  2    2
5  4  3  0 -4    3
  



