Query: How do I get a list of indices of non zero elements in a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6145753)
 Not really a "new" answer but http://numpy.scipy.org/ has this built in as well.   

  import numpy as np
a = [0, 1, 0, 1, 0, 0, 0, 0]
nonzeroind = np.nonzero(a)[0] # the return is a little funny so I use the [0]
print nonzeroind
[1 3]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54734627)
 You can first get non-zero elements in your array and then use https://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html in a list comprehension to get separate array for each non-zero element. Here  np.unique(arr[arr!=0])  will give you the nonzero elements over which you can iterate to get the indices. 

  arr = np.array([[1, 0, 1],
            [2, 2, 0]])

indices = [np.argwhere(arr==i) for i in np.unique(arr[arr!=0])]
# [array([[0, 0],
#         [0, 2]]), array([[1, 0],
#         [1, 1]])]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41129612)
 Just wished to add explanation for 'funny' output from the previous asnwer. Result is a tuple that contains vectors of indexes for each dimension of the matrix. In this case user is processing what is considered a vector in numpy, so output is tuple with one element. 

  import numpy as np
a = [0, 1, 0, 1, 0, 0, 0, 0]
nonzeroind = np.nonzero(a) 
print nonzeroind
(array([1, 3]),)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32349401)
 You can use list comprehension - 

  result = [x for i, x in enumerate(main_list) if get_indices[i]]
  

 You do not need to use  bool()  ,  0  is considered False-like in boolean context, and anything non-zero is True-like. 

 Example/Demo - 

  >>> main_list = [12, 10, 30, 10, 11,10, 31]
>>> get_indices = [1, 0, 1, 1, 0, 0, 0]
>>> result = [x for i, x in enumerate(main_list) if get_indices[i]]
>>> result
[12, 30, 10]
  

 

 Or if you really want something similar to your method, since you say - 

 
   But if I was able to get my method working, I could also do for example : result = main_list[~bool(get_indices)] to get : [10, 11, 10, 31] 
 

 You can use  numpy  , convert the lists to numpy arrays. Example - 

  In [30]: import numpy as np

In [31]: main_list = [12, 10, 30, 10, 11,10, 31]

In [32]: get_indices = [1, 0, 1, 1, 0, 0, 0]

In [33]: main_array = np.array(main_list)

In [34]: get_ind_array = np.array(get_indices).astype(bool)

In [35]: main_array[get_ind_array]
Out[35]: array([12, 30, 10])

In [36]: main_array[~get_ind_array]
Out[36]: array([10, 11, 10, 31])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7361590)
 You could use http://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html#numpy-nonzero method: 

  >>> from scipy.sparse import lil_eye
>>> c = lil_eye((4, 10)) # as an example
>>> c
<4x10 sparse matrix of type '<type 'numpy.float64'>'
        with 4 stored elements in LInked List format>
>>> c.nonzero()
(array([0, 1, 2, 3], dtype=int32), array([0, 1, 2, 3], dtype=int32))
>>> import numpy as np
>>> np.ascontiguousarray(c)
array([  (0, 0) 1.0
  (1, 1)        1.0
  (2, 2)        1.0
  (3, 3)        1.0], dtype=object)
  

 You don't need to calculate  c  matrix to find out indexes of non-zero elements in  c = a - b ; you could do  (a !.nonzero() : 

  >>> a = np.random.random_integers(2, size=(4,4))
>>> b = np.random.random_integers(2, size=(4,4))
>>> (a !.nonzero()
(array([0, 0, 1, 1, 1, 2, 3]), array([1, 2, 1, 2, 3, 2, 0]))
>>> a - b
array([[ 0,  1,  1,  0],
       [ 0,  1, -1, -1],
       [ 0,  0,  1,  0],
       [-1,  0,  0,  0]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4111521)
 Since THC4k mentioned compress (available in python2.7+) 

  >>> from itertools import compress, count
>>> x = [0, 1, 0, 1, 0, 0, 0, 0]
>>> compress(count(), x)
<itertools.compress object at 0x8c3666c>   
>>> list(_)
[1, 3]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41732745)
 There is https://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html#numpy-argwhere, 

  import numpy as np
arr = np.array([[1,2,3], [0, 1, 0], [7, 0, 2]])
np.argwhere(arr == 0)
  

 which returns all found indices as rows: 

  array([[1, 0],    # Indices of the first zero
       [1, 2],    # Indices of the second zero
       [2, 1]],   # Indices of the third zero
      dtype=int64)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27415055)
 We'll use  numpy.random.choice . First, we get arrays of the  (i,j)  indices where the data is nonzero: 

  i,j = np.nonzero(x)
  

 Then we'll select 20% of these: 

  ix = np.random.choice(len(i), int(np.floor(0.2 * len(i))), replace=False)
  

 Here  ix  is a list of random, unique indices, 20% the length of  i  and  j  (the length of  i  and  j  is the number of nonzero entries). To recover the indices, we do  i[ix]  and  j[ix] , so we can then select 20% of the nonzero entries of  x  by writing:     

  print x[i[ix], j[ix]]
  



