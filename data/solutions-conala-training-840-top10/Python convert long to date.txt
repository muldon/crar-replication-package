Query: Python convert long to date
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10664522)
  time.ctime()  gives you the string representation of the time. 

  

  datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19503128)
 Solution was:  

  import pandas as pd 
ts = pd.to_datetime(str(date)) 
d = ts.strftime('%Y.%m.%d')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10664523)
 What you need is simply
 datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')  as  time.ctime()  returns a string: 

  >>> time.ctime()
'Sat May 19 13:46:09 2012'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/23812679)
 You can potentially use the https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior function to get a  datetime  object which can then be formatted via  strftime  to any format you want. 

  >>> ts = "Thu May 22 15:40:24 +0000 2014"
>>> dt = datetime.datetime.strptime(ts, "%a %b %d %H:%M:%S +0000 %Y")
>>> dt.strftime("%Y-%m-%d")
'2014-05-22'
  

 However, there is a caveat that  strptime  doesn't handle timezone offsets well in Python 2. As long as the timezone is constant ( +0000 ) you can just hard-code that into your format string. If you're using Python 3, you can use  %z  instead to match timezone offsets, but in Python 2 that won't work. 

 Also note that I've used  %b  above for the month - that matches on the  short  versions of month names. If the API actually returns the long version (hard to tell, since you used the one month that's never abbreviated in your example), you'll need  %B  instead. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4002855)
 According to the link that you gave, 

  Given a date date, returns a day number (the number of days since year 0).

mysql> SELECT TO_DAYS(950501);
        -> 728779
mysql> SELECT TO_DAYS('2007-10-07');
        -> 733321
  

 Corresponding numbers in Python: 

  >>> import datetime
>>> datetime.date(1995,5,1).toordinal()
728414
>>> datetime.date(2007,10,7).toordinal()
732956
  

 So the relationship is :  mySQL_int == Python_int + 365  and you can convert in the other direction by using the  fromordinal  class method: 

  >>> datetime.date.fromordinal(728779 - 365)
datetime.date(1995, 5, 1)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19303908)
 The conversion you a trying to is is called "seconds since epoch" and is calculated using a function like this one: 

  def unix_time(dt):
    epoch = datetime.datetime.utcfromtimestamp(0)
    delta = dt - epoch
    return delta.total_seconds()
  

 You can load the datetime directly with each part of the date or load it from a string and calculate the number of seconds: 

  >>> def unix_time(dt):
...     epoch = datetime.datetime.utcfromtimestamp(0)
...     delta = dt - epoch
...     return delta.total_seconds()
...
>>> import datetime
>>> a = datetime.datetime(2015, 07, 01, 12, 00, 00)
>>> print a
2015-07-01 12:00:00
>>> print unix_time(a)
1435752000.0
>>>
  

 NOTE: you can use long(unix_time(a)) if you want to get rid of the last .0 

 Hope it helps! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9750360)
 
I would suggest the following simple approach for conversion: 

<pre class="lang-py prettyprint-override"> from datetime import datetime, timedelta
s = "20120213"
# you could also import date instead of datetime and use that.
date = datetime(year=int(s[0:4]), month=int(s[4:6]), day=int(s[6:8]))
  

 For adding/subtracting an arbitary amount of days (seconds work too btw.), you could do the following: 

<pre class="lang-py prettyprint-override"> date += timedelta(days=10)
date -= timedelta(days=5)
  

 And convert back using: 

<pre class="lang-py prettyprint-override"> s = date.strftime("%Y%m%d")
  

 To convert the integer to a string safely, use: 

<pre class="lang-py prettyprint-override"> s = "{0:-08d}".format(i)
  

 This ensures that your string is eight charecters long and left-padded with zeroes, even if the year is smaller than 1000 (negative years could become funny though). 

 Further reference: http://docs.python.org/library/datetime.html#datetime-objects, http://docs.python.org/library/datetime.html#timedelta-objects 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21901868)
 The  QDate  you get from  

  self.__ui.dateTimeEdit.date()
  

 has another method http://pyqt.sourceforge.net/Docs/PyQt4/qdate.html#toPyDate that will save you the round trip through a string.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/24186134)
 So looking at the documentation (never used Python before) it looks like the time.time() method http://www.tutorialspoint.com/python/time_time.htm, while the Java Date object wants http://docs.oracle.com/javase/6/docs/api/java/util/Date.html#Date%28long%29 in its constructor. 

 So you need to do some fancy math to get the double into a long. From the little bit of Python docs I just read, it seems like it would be easier to convert the seconds to milliseconds in the Python code and send the result as a long to the rest service. Depending on how exact you have to be, you can just multiply the time.time() result by 1000 to get to milliseconds then round the rest to drop the floating point piece. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34106616)
 This should do: 

  import datetime
from matplotlib.finance import date2num

float_days = date2num(datetime.datetime.strptime(date_string, '%Y%m%d%H%M%S%f'))
  

 or the long version: 

  year = int(date_string[:4])
month = int(date_string[4:6])
day = int(date_string[6:8])
hour = int(date_string[8:10])
minute = int(date_string[10:12])
sec = int(date_string[12:14])
msec = int(date_string[14:] + '000')

float_days = date2num(datetime.datetime(year, month, day, hour, minute, sec, msec))
  



