Query: iterate over a dictionary in sorted order
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16710143)
 You need to iterate over  steps.items() , because an iteration over dict only returns its keys. 

  >>> x = sorted(steps.items())
>>> x
[(1, 'value1'), (2, 'value3'), (5, 'value2')]
  

 Iterate over sorted keys: 

  >>> for key in sorted(steps):
...     # use steps[keys] to get the value
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14863574)
 You can get the list of keys using  dict.keys() , and then iterate over a sorted view of the list: 

  for key in sorted(D.keys()):
    print key, D[key]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/364521)
 Use the http://pydoc.org/2.5.1/__builtin__.html#-sorted function: 

  return sorted(dict.iteritems())
  

 If you want an actual iterator over the sorted results, since  sorted()  returns a list, use: 

  return iter(sorted(dict.iteritems()))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/327210)
  for k in sorted(somedictionary.keys()):
    doSomething(k)
  

 Note that you can also get all of the keys and values sorted by keys like this: 

  for k, v in sorted(somedictionary.iteritems()):
   doSomething(k, v)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17707190)
 If you just want to sort them by the keys do: 

  sorted_by_keys_dict = dict((y,x) for x,y in foo.iteritems())
for k,v in sorted(sorted_by_keys_dict.items()):
    print v, k

a 1
c 2
b 3
  

  

  for k,v in sorted(dict((y,x) for x,y in foo.iteritems()).items()):
    print v, k

a 1
c 2
b 3
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14864836)
 Assuming that the keys/values are inserted in order, you can use an http://docs.python.org/2/library/collections.html#collections.OrderedDict: 

  >>> from collections import OrderedDict
>>> d = OrderedDict()
>>> d[1] = 'a'
>>> d[2] = 'a'
>>> d[5] = 'b'
>>> d[7] = 'a'
>>> d
OrderedDict([(1, 'a'), (2, 'a'), (5, 'b'), (7, 'a')])
>>> d.keys()
[1, 2, 5, 7]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17532913)
 You can now use  OrderedDict  in Python 2.7 as well: 

  >>> from collections import OrderedDict
>>> d = OrderedDict([('first', 1),
...                  ('second', 2),
...                  ('third', 3)])
>>> d.items()
[('first', 1), ('second', 2), ('third', 3)]
  

 Here you have the http://docs.python.org/dev/whatsnew/2.7.html page for 2.7 version and the http://docs.python.org/dev/library/collections.html#collections.OrderedDict. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17707451)
 You can do this by one-liner: 

  >>> sorted(foo.items(), key=lambda x: x[1])
[('b', 1), ('c', 2), ('a', 3)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/22704094)
 Python dicts are un-ordered. Usually, this is not a problem since the most common use case is to do a lookup.  

 The simplest way to do what you want would be to create a  collections.OrderedDict  inserting the elements in sorted order. 

  ordered_dict = collections.OrderedDict([(k, d[k]) for k in sorted(d.keys())])
  

 If you need to iterated, as others above have suggested, the simplest way would be to iterate over sorted keys. Examples- 

 Print values sorted by keys: 

  # create the dict
d = {k1:v1, k2:v2,...}
# iterate by keys in sorted order
for k in sorted(d.keys()):
    value = d[k]
    # do something with k, value like print
    print k, value
  

 Get list of values sorted by keys: 

  values = [d[k] for k in sorted(d.keys())]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/26809709)
 You can sort  myDict.items  like so: 

  >>> myDict = {'ID1': 50, 'ID2': 40, 'ID3': 60}
>>> for item in sorted(myDict.items(), key=lambda x: x[1]):
...     item
...
('ID2', 40)
('ID1', 50)
('ID3', 60)
>>> for key, _ in sorted(myDict.items(), key=lambda x: x[1]):
...     key
...
'ID2'
'ID1'
'ID3'
>>>
  

 The important part here is the https://docs.python.org/3/glossary.html#term-key-function of  sorted , which allows you to specify how you want each item sorted.  In this case, we sort on each key's value. 

 You may also want to read https://docs.python.org/3/howto/sorting.html in the documentation to get a better understanding of how to use  sorted  and  key . 



