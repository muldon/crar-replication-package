Query: get key by value in dictionary with same value in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8650438)
  key = 'a'
return [item[0] for item in self.items() if item[1] == key]
  

 This will find all keys with value 'a' and return a list of them. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21848238)
 You can create  reverse  dict: 

  >>> d = {i:k for k,v in dictionary_1.items() for i in v}
>>> d
{1: 'ABC', 2: 'ABC', 3: 'ABC', 4: 'DEF', 5: 'DEF', 6: 'DEF'}
>>> d[5]
'DEF'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8650431)
 You could create a new dictionary from the keys and values in the initial one: 

  >>> d2 = dict((v, k) for k, v in d.iteritems())
>>> d2
{'a': 1, 'c': 3, 'b': 2}
>>> d2['a']
1
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24958057)
 You can use list comprehension, like this 

  print [key for key in d if d[key] == 1]
  

 It iterates through the keys of the dictionary and checks if the value is  1 . If the value is 1, it adds the corresponding key to the list. 

 Alternatively you can use,  dict.iteritems()  in Python 2.7, like this 

  print [key for key, value in d.iteritems() if value == 1]
  

 In Python 3.x, you would do the same with  dict.items() , 

  print([key for key, value in d.items() if value == 1])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26660985)
 A little intro to dictionary 

  d={'a':'apple','b':'ball'}
d.keys()  # displays all keys in list
['a','b']
d.values() # displays you values in list
['apple','ball']
d.items() # displays you pair tuple of key and value
[('a','apple'),('b','ball')
  

  

  for x in d.keys():
    print x +" => " + d[x]
  

  

  for key,value in d.items():
    print key + " => " + value
  

 You can get keys using  iter  

  >>> list(iter(d))
['a', 'b']
  

 you can get value of key of dictionary using  get(key, [value]) : 

  d.get('a')
'apple'
  

 if key is not present in dictionary,when default value given, will return value. 

  d.get('c', 'Cat')
'Cat'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31607151)
 If the dictionary contains one pair like this: 

  d = {'age':24}
  

 then you can get as  

  field, value = d.items()[0]
  

 For Python 3.5, do this: 

  key = list(d.keys())[0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6517824)
 Use: 

  for key in dictionary.keys()
    value = dictionary[key]
    #do something
  

   

  for key,value in dictionary.items():
    #do something
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3545355)
 If you want to print key and value, use the following: 

  for key, value in my_dict.iteritems():
    print key, value
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8252004)
 If you don't want to reverse the dictionary, here's another possible solution: 

  def get_key_from_value(my_dict, v):
    for key,value in my_dict.items():
        if value == v:
            return key
    return None

>>> d = {1: 'one', 2: 'two'}
>>> get_key_from_value(d,'two')
2
  



