Query: Find non-common elements in lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32066723)
 You can use Intersection concept to deal with this kind of problems. 

  b1 = [1,2,3,4,5,9,11,15]
b2 = [4,5,6,7,8]
set(b1).intersection(b2)
Out[22]: {4, 5}
  

 Best thing about using this code is it works pretty fast for large data also. I have b1 with 607139 and b2 with 296029 elements when i use this logic I get my results in 2.9 seconds.  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11348386)
 Use the symmetric difference operator for  set s (aka the XOR operator): 

  >>> set([1,2,3]) ^ set([3,4,5])
set([1, 2, 4, 5])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27476860)
 Use https://docs.python.org/2/library/itertools.html#itertools.groupby with https://docs.python.org/2/library/functions.html#enumerate and https://docs.python.org/2/library/functions.html#max: 

  >>> from operator import itemgetter
>>> from itertools import groupby
>>> val = max((list(g) for k, g in
                   groupby(enumerate(ls), itemgetter(1)) if k == 'S'), key=len)
>>> indices, items = zip(*val)
>>> indices
(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
>>> items
('S', 'S', 'S', 'S', 'S', 'S', 'S', 'S', 'S', 'S', 'S')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18648925)
 I think you are looking for nested loops.  

 Example (based on your edit): 

  t1=[1,2,'Hello',(1,2),999,1.23]
t2=[1,'Hello',(1,2),999]

t3=[]

for it1, e1 in enumerate(t1):
    for it2, e2 in enumerate(t2):
        if e1==e2:
            t3.append((it1,it2,e1))

# t3=[(0, 0, 1), (2, 1, 'Hello'), (3, 2, (1, 2)), (4, 3, 999)]
  

 Which can be reduced to a single comprehension: 

  [(it1,it2,e1) for it1, e1 in enumerate(t1) for it2, e2 in enumerate(t2) if e1==e2] 
  

 But to find the common elements, you can just do: 

  print set(t1) & set(t2)
# set([(1, 2), 1, 'Hello', 999])
  

 If your list contains non-hashable objects (like other lists, dicts) use a frozen set: 

  from collections import Iterable
s1=set(frozenset(e1) if isinstance(e1,Iterable) else e1 for e1 in t1)
s2=set(frozenset(e2) if isinstance(e2,Iterable) else e2 for e2 in t2)
print s1 & s2
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52285320)
 You can also sort the intersection list and use  .index()  to find out the indices. 

  z = list(set(x).intersection(set(y))) # O(n)
z.sort() # O(nlogn)

imin = (x.index(z[0]), y.index(z[0])) # O(n)
imax = (x.index(z[-1]), y.index(z[-1])) # O(n)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14929135)
 Correct,  list  objects are not hashable because they are mutable.   tuple  objects are hashable (provided that all their elements are hashable).  Since your innermost lists are all just integers, that provides a wonderful opportunity to work around the non-hashableness of lists: 

  >>> lists = [[[1,2],[3,4],[6,7]],[[3,4],[5,9],[8,3],[4,2]],[[3,4],[9,9]]]
>>> sets = [set(tuple(x) for x in y) for y in lists]
>>> set.intersection(*sets)
set([(3, 4)])
  

 Here I give you a set which contains tuples of the coordinates which are present in all the sublists.  To get a list of list like you started with: 

  [list(x) for x in set.intersection(*sets)]
  

 does the trick. 

 To address the concern by @wim, if you really want a  reference  to the  first  element in the intersection (where  first  is defined by being first in  lists[0] ), the easiest way is probably like this: 

  #... Stuff as before
intersection = set.intersection(*sets)
reference_to_first = next( (x for x in lists[0] if tuple(x) in intersection), None ) 
  

 This will return  None  if the intersection is empty. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16118832)
 This one uses sets. It returns the first common element or None if no common element.  

  def findcommon(x,y):
    common = None
    for i in range(0,max(len(x),len(y))):
        common = set(x[0:i]).intersection(set(y[0:i]))
        if common: break
    return list(common)[0] if common else None
  



