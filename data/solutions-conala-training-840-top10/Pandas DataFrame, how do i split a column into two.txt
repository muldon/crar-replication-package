Query: Pandas DataFrame, how do i split a column into two
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31738206)
  

  df = pd.DataFrame(['a|b', 'c|d'])
s = df[0].apply(lambda x: x.split('|'))
df['left'] = s.apply(lambda x: x[0])
df['right'] = s.apply(lambda x: x[1])
  

 Output: 

       0 left right
0  a|b    a     b
1  c|d    c     d
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43443832)
 If your  date  column are strings and you just want to split them... then this should work 

  date_time = df.date.str.split(expand=True).rename(columns={0: 'date', 1: 'time'})
df = df.drop('date', 1).join(date_time)
print(df)

   A  B        date  time
0  1  2  02/01/2012  9:30
  

   setup   
 assuming a dataframe  df   

  df = pd.DataFrame(dict(date=['02/01/2012 9:30'], A=[1], B=[2]))

print(df)

   A  B             date
0  1  2  02/01/2012 9:30
  

 

 However, assuming your  date  column were in fact datetimes 

  df = pd.DataFrame(dict(date=pd.to_datetime(['02/01/2012 9:30']), A=[1], B=[2]))

print(df)

   A  B                date
0  1  2 2012-02-01 09:30:00
  

   

  df = df.assign(date=df.date.dt.date, time=df.date.dt.time)

print(df)

   A  B                date
0  1  2 2012-02-01 09:30:00
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46572999)
 Using  groupby  you could split into two dataframes like 

  In [1047]: df1, df2 = [x for _, x in df.groupby(df['Sales'] < 30)]

In [1048]: df1
Out[1048]:
   A  Sales
2  7     30
3  6     40
4  1     50

In [1049]: df2
Out[1049]:
   A  Sales
0  3     10
1  4     20
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38468767)
 Use  expand=True  when doing the  split  to get multiple columns: 

  test['values'].str.split('_', expand=True)
  

 If there's only one underscore, and you only care about the value to the right, you could use: 

  test['values'].str.split('_').str[1]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52644886)
 I believe you need  list comprehension  with  loc  and  zip  for list of  DataFrame s: 

  t1=[4202, 6453]
t2=[6203, 6492]

dfs = [df.loc[i:j] for i, j in zip(t1, t2)]

print (dfs[0])
print (dfs[1])
  

  

  np.random.seed(142)

df = pd.DataFrame({'column':np.random.rand(8)})
print (df)
     column
0  0.902062
1  0.557808
2  0.655985
3  0.832471
4  0.199884
5  0.127254
6  0.771439
7  0.432289
  

 

  t1=[1, 3]
t2=[2, 5]

dfs = [df.loc[i:j] for i, j in zip(t1, t2)]
print (dfs)
[     column
1  0.557808
2  0.655985,      column
3  0.832471
4  0.199884
5  0.127254]

print (dfs[0])
     column
1  0.557808
2  0.655985

print (dfs[1])
     column
3  0.832471
4  0.199884
5  0.127254
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38608657)
 try http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extract.html method: 

  In [104]: df[['b','c']] = df.a.str.extract(r'(.{3})(.*)', expand=True)

In [105]: df
Out[105]:
         a    b     c
0   sea001  sea   001
1  seac002  sea  c002
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40649121)
 . 
I use  pd.DataFrame(df.bigram.values.tolist(), columns=['c1', 'c2'])  instead of  df.bigram.apply(lambda x: pd.Series(x, index=['col1', 'col2']))  

  pd.concat([pd.DataFrame(df.bigram.values.tolist(), columns=['c1', 'c2']),
           df.drop('bigram', 1)],
          axis=1)
  

 https://i.stack.imgur.com/oGWqV.png 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/31749557)
 Here is a one liner that builds on the answer provided by @santon: 

  df['left'],df['right'] = zip(*df[0].apply(lambda x: x.split('|')))

>>> df 
     0 left right
0  a|b    a     b
1  c|d    c     d
  



