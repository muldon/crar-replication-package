Query: sorting a list in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9543233)
 http://en.wikipedia.org/wiki/Schwartzian_transform 

  list_1_sorted, list_2_sorted = zip(*sorted(zip(list_1, list_2),
  key=operator.itemgetter(0), reverse=True))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9543232)
 You can use  zip : 

  >>> list_1 = ['string1', 'string2', 'string3']
>>> list_2 = [5, 2, 8]
>>> s = sorted(zip(list_2, list_1), reverse=True)
>>> list_1_sorted = [e[1] for e in s]
>>> list_2_sorted = [e[0] for e in s]
>>> list_1_sorted
['string3', 'string1', 'string2']
>>> list_2_sorted
[8, 5, 2]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11848830)
 Give the  sort()  method a  key  function: 

  >>> my_list = [(1, 2), (3, 4), (2, 1), (3, 2)]
>>> my_list.sort(key=lambda x: x[1])
>>> my_list
[(2, 1), (1, 2), (3, 2), (3, 4)]
>>> 
  

 If you need to get a sorted list, instead of sorting  in place , use the built_in https://docs.python.org/2/library/functions.html#sorted 

  >>> sorted(my_list, key=lambda x: x[1])
[(2, 1), (1, 2), (3, 2), (3, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40784832)
 This should do : 

  from operator import itemgetter
PAE=[['a',0,8],
    ['b',2,1],
    ['c',4,3],
    ['d',7,2],
    ['e',8,4]]

split_index = 1

print PAE[:split_index]+sorted(PAE[split_index:],key=itemgetter(2))
#=> [['a', 0, 8], ['b', 2, 1], ['d', 7, 2], ['c', 4, 3], ['e', 8, 4]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28839263)
 You can create a list of sorted tuples in this manner, but note that dictionaries themselves are unordered, so you cannot sort the dictionary itself (unless you use something like https://docs.python.org/2/library/collections.html#collections.OrderedDict 

  >>> d = {'a':10,'b':20,'c':5,'d':5,'e':5}
>>> list(sorted(d.items(), key = lambda i : (i[1],i[0]), reverse = True))
[('b', 20), ('a', 10), ('e', 5), ('d', 5), ('c', 5)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51379069)
 Use the heapq.nsmallest, it performs with partial heap-sort 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21054786)
 You can use http://docs.python.org/2/library/functions.html#zip: 

  >>> [list(t) for t in zip(*sorted(zip(*s)))]
[['A', 'E', 'J', 'M', 'S'], ['C', 'A', 'F', 'A', 'A'], ['A', 'B', 'F', 'B', 'B']]
  

 where  s  is your list of lists. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22951586)
 Python's sort functions are stable, meaning that for elements that compare equal the order is unchanged from the original list. Therefore, you can shuffle the list and then sort according to the length. 

  import random

a = [[1,2,3],[3,4,5,6],[7,8],[9,10,11]]
random.shuffle(a)
a.sort(key = len)
  

 Note that this code shuffles and sorts the list  a  in-place. 



