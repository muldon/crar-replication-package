Query: Remove duplicate dict in list in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23358757)
 If you want to preserve the Order, then you can do 

  from collections import OrderedDict
print OrderedDict((frozenset(item.items()),item) for item in data).values()
# [{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}]
  

 If the order doesn't matter, then you can do 

  print {frozenset(item.items()):item for item in data}.values()
# [{'a': 3222, 'b': 1234}, {'a': 123, 'b': 1234}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44395582)
 The below dict comprehension will create a new dict from the original one without any duplicate values: 

  samples_antibiotics = {k: list(set(v)) for k, v in samples_antibiotics_with_duplicates.items()}
  

 The  set  version of a list (or any container) does not contain any duplicates since sets do not allow any (that is why they require hashable items as do dicts). 

 As @CoryKramer says in the comments, the solution given here will not (generally speaking) preserve the order of the items in the values-list. If that is important to you, you would have to go with something else. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33955470)
 Because you can't add a  dict  to  set . From https://stackoverflow.com/questions/13264511/typeerror-unhashable-type-dict: 

 
   You're trying to use a  dict  as a key to another  dict  or in a  set . That does not work because the keys have to be hashable.  
  
   As a general rule, only immutable objects (strings, integers, floats, frozensets, tuples of immutables) are hashable (though exceptions are possible). 
 

  >>> foo = dict()
>>> bar = set()
>>> bar.add(foo)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
TypeError: unhashable type: 'dict'
>>> 
  

 Instead, you're already using  if x not in seen , so just use a list: 

  >>> te = [
...       {
...         "Name": "Bala",
...         "phone": "None"
...       },
...       {
...         "Name": "Bala",
...         "phone": "None"
...       },
...       {
...         "Name": "Bala",
...         "phone": "None"
...       },
...       {
...         "Name": "Bala",
...         "phone": "None"
...       }
...     ]

>>> def removeduplicate(it):
...     seen = []
...     for x in it:
...         if x not in seen:
...             yield x
...             seen.append(x)

>>> removeduplicate(te)
<generator object removeduplicate at 0x7f3578c71ca8>

>>> list(removeduplicate(te))
[{'phone': 'None', 'Name': 'Bala'}]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7090833)
 Something like this should do the stuff :  

  result = [dict(tupleized) for tupleized in set(tuple(item.items()) for item in l)]
  

 first, I transform the inital dict in a list of tuples, then I put them into a set (that removes duplicates entries), and then back into a dict. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33955336)
 You can easily remove duplicate keys by dictionary comprehension, since dictionary does not allow duplicate keys, as below-   

  te = [
      {
        "Name": "Bala",
        "phone": "None"
      },
      {
        "Name": "Bala",
        "phone": "None"
      },
      {
        "Name": "Bala",
        "phone": "None"
      },
      {
        "Name": "Bala",
        "phone": "None"
      },
      {
          "Name": "Bala1",
          "phone": "None"
      }      
    ]

unique = { each['Name'] : each for each in te }.values()

print unique
  

 Output- 

  [{'phone': 'None', 'Name': 'Bala1'}, {'phone': 'None', 'Name': 'Bala'}]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43383050)
 Use set 

  return list(set(result))
  

 Use dict 

  return dict.fromkeys(result).keys()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50130484)
 you can achieve the same result with a one-line comprehension, chaining and using a set + sort 

  import itertools

d = {1: [[1, 2], [1, 3], [1, 2, 5]], 2: [[1], [5], [1, 6]], 3: [[7], [5]]}

result = [sorted(set(itertools.chain.from_iterable(v))) for v in d.values()]

print(result)
  

 outputs: 

  [[1, 2, 3, 5], [1, 5, 6], [5, 7]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/29188517)
 You can use an  OrderedDict  which will remove dups and keep order: 

  from collections import OrderedDict
inp= ['and', ['or', 'P', '-R', 'P'], ['or', '-Q', '-R', 'P']]

out = [OrderedDict.fromkeys(sub).keys() if isinstance(sub, list) else sub for sub in inp]
print(out)
['and', ['or', 'P', '-R'], ['or', '-Q', '-R', 'P']]
  

 To remove duplicate sublists, cast the lists as tuples and use fromkeys again: 

  inp = ['and', ['or', 'P', '-R', 'P'], ['or', '-Q', '-R', 'P'], ['or', 'P', '-R', 'P']]
out = OrderedDict.fromkeys(tuple(OrderedDict.fromkeys(sub).keys()) if isinstance(sub, list) else sub for sub in inp)

print(out.keys())
['and', ('or', 'P', '-R'), ('or', '-Q', '-R', 'P')]
  

 If you want lists again just cast and use iterkeys for python2: 

  out = OrderedDict.fromkeys(tuple(OrderedDict.fromkeys(sub).iterkeys()) if isinstance(sub, list) else sub for sub in inp)
print([list(ele) if isinstance(ele, tuple) else ele for ele  in out.iterkeys()])
  



