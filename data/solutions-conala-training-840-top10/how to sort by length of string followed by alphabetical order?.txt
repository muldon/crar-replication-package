Query: how to sort by length of string followed by alphabetical order?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4659539)
 You can do it in two steps like this: 

  the_list.sort() # sorts normally by alphabetical order
the_list.sort(key=len, reverse=True) # sorts by descending length
  

 Python's sort is stable, which means that sorting the list by length leaves the elements in alphabetical order when the length is equal. 

  

  the_list.sort(key=lambda item: (-len(item), item))
  

 Generally you never need  cmp , it was even removed in Python3.  key  is much easier to use. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28426011)
 First sort by alphabetical order, then sort by length in reverse order. 

  >>> lst = [['hi', 'monday'], [], ['hello', 'indent', 'joe'], ['hi', 'low']]
>>> lst.sort()
>>> lst.sort(key=len, reverse=True)
>>> print lst
>>> [['hello', 'indent', 'joe'], ['hi', 'low'], ['hi', 'monday'], []]
  

 

 The order of items in the resulting set highly depends on your current  locale . If you want your sort algorithm to take locale into account when sorting items, you can do the following; 

  >>> import locale
>>> from functools import cmp_to_key
>>>
>>> # You can change your locale like below;
>>> # locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
>>>
>>> lst = [['hi', 'monday'], [], ['hello', 'indent', 'joe'], ['hi', 'low']]
>>> print sorted([sorted(item, key=cmp_to_key(locale.strcoll)) for item in lst], key=len, reverse=True)
>>> [['hello', 'indent', 'joe'], ['hi', 'monday'], ['hi', 'low'], []]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14103631)
 You got the order of the tuple the wrong way round. When Python sorts on tuples, the first value is the  main  sort, with the second being the subsort, etc... - your code presumes the opposite order. 

 You want to sort by length,  then  alphabetically:  

  >>> x.sort(key=lambda item: (len(item), item))
>>> x
['a', 'b', 'c', 'aa', 'ab', 'ba', 'aaa']
  

 Edit: As DSM points out in the comments, Python sorts letters as capitals first, then lowercase. If this behaviour isn't wanted, see https://stackoverflow.com/a/36156/722121. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16778388)
 You can't sort a regular Python dictionary. They have no order. You can, however, use  collections.OrderedDict : 

  from collections import OrderedDict

data = {'r': [4,3],'t': [4,5,6], 'n': [1,6]}
tuples = data.items()
tuples.sort(key=lambda pair: len(pair[1]), reverse=True)

ordered = OrderedDict(tuples)
  

 And the result: 

  OrderedDict([('t', [4, 5, 6]), ('r', [4, 3]), ('n', [1, 6])])
  

  lambda pair: len(pair[1])  is your key function, so given a  (key, value)  pair, it returns the length of the values. You can also use  (len(pair[1]), key)  to sort alphabetically if two pairs have the same value length. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28426345)
 This can be done in a single pass with a suitable key function. 

  a = [['hi', 'monday'], [], ['hello', 'indent', 'joe'], ['hi', 'low']]
a.sort(key=lambda l:(-len(l), l))
print a
  

  output  

  [['hello', 'indent', 'joe'], ['hi', 'low'], ['hi', 'monday'], []]
  

 

 To get lowercase letters to precede uppercase letters we can simply use the  str.swapcase()  method on the strings in each sub-list: 

  a = [['Hi', 'monday'], [], ['hello', 'indent', 'joe'], ['hi', 'low']]
a.sort(key=lambda l:(-len(l), [s.swapcase() for s in l]))
print a
  

  output  

  [['hello', 'indent', 'joe'], ['hi', 'low'], ['Hi', 'monday'], []]
  

 And if you want the sorting to be case-insensitive: 

  a = [['Hi', 'monday'], [], ['hello', 'indent', 'joe'], ['hi', 'low']]
a.sort(key=lambda l:(-len(l), [s.lower() for s in l]))
print a
  

  output  

  [['hello', 'indent', 'joe'], ['hi', 'low'], ['Hi', 'monday'], []]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/19729956)
 Well you can make the lambda simpler: 

  l.sort(key=lambda t: len(t[1]), reverse=True)
  

 Also, don't use  list  as a variable name; it's already taken by a built-in function. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50802097)
 the code can be used to sort string in alphabetical order without using any inbuilt function of python    

 k = input("Enter any string again ") 

  li = []
x = len(k)
for i in range (0,x):
    li.append(k[i])

print("List is : ",li)


for i in range(0,x):
    for j in range(0,x):
        if li[i]<li[j]:
            temp = li[i]
            li[i]=li[j]
            li[j]=temp
j=""

for i in range(0,x):
    j = j+li[i]

print("After sorting String is : ",j)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21805885)
 Sort straight-ahead (not reversed) and negate the  age  instead: 

  lst.sort(key=lambda x: (-x[1], x[0]))
  

 This sorts on age in descending order (since -33 will sort before -22), then on name in alphabetical order. 

  

  >>> lst = [['Stan', 22], ['Jim', 33], ['Bob', 22]]
>>> sorted(lst, key=lambda x: (-x[1], x[0]))
[['Jim', 33], ['Bob', 22], ['Stan', 22]]
  

 I swapped Stan and Bob in my demo, as compared to your sample, to illustrate that the names really are sorted in alphabetical order and were not just left in relative order by Python's stable sort. 



