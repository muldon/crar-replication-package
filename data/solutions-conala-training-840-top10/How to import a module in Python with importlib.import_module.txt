Query: How to import a module in Python with importlib.import_module
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42001506)
 Because  reload  is not a module, it's a function within the  importlib  module. There is nothing specific about importlib; this is how imports work for all modules. 

 If you just want the function itself, you can do  from importlib import reload . 

 Note also that this function is only available in Python 3.4+. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/23385412)
  importlib  can help here 

  import importlib
from A import B
importlib.import_module('A.B.C')
importlib.import_module('A.B.D')
# Now you can use B.C & B.D
  

 On Python2.6 you should be able to 

  from A import B
import A.B.C
import A.B.D
del A
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27307159)
 In Python 2.7,  importlib  isn't  super  useful.  In fact, its only feature is the  import_module  function, which enables you to import a module from a string name: 

  >>> import importlib
>>> importlib.import_module('sys')
<module 'sys' (built-in)>
>>> importlib.import_module('sys').version
'2.7.8 (default, Jul  2 2014, 19:50:44) [MSC v.1500 32 bit (Intel)]'
>>>
  

 Note that you could do the same with the https://docs.python.org/2/library/functions.html#__import__ built-in, but using  import_module  is generally preferred. 

 In Python versions 3.1 and greater however, the purpose of  importlib  has been expanded.  According to the https://docs.python.org/3/library/importlib.html#introduction: 

 
   The purpose of the  importlib  package is two-fold. One is to provide an
  implementation of the import statement (and thus, by extension, the
   __import__()  function) in Python source code. This provides an implementation of  import  which is portable to any Python interpreter.
  This also provides a reference implementation which is easier to
  comprehend than one implemented in a programming language other than
  Python. 
  
   Two, the components to implement import are exposed in this package,
  making it easier for users to create their own custom objects (known
  generically as an importer) to participate in the import process.
  Details on custom importers can be found in http://www.python.org/dev/peps/pep-0302. 
 

 Summarized,  importlib  now allows you to access the internals of Python's import-statement, build custom finders, loaders, and importers, setup import hooks, and much more. 

 In fact, as of version 3.3,  importlib  holds the implementation of the import-statement itself.  You can read about this on the What's New in Python 3.3 page under https://docs.python.org/3/whatsnew/3.3.html#using-importlib-as-the-implementation-of-import. 

 Also,  importlib  will be replacing older modules related to importing in future versions of Python. For example, the old https://docs.python.org/3/library/imp.html module was deprecated in version 3.4 in favor of  importlib . 

 With all of this in mind, I guess it's safe to say that  importlib  is pretty important in modern Python.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28018705)
  import_module  just returns the module; it doesn't assign it to a name at all.   

  short_name = importlib.import_module('really_long_module_name')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44163488)
 You just need to import the correct subpackage in  package/__init__.py  as  subpackage . 

  import importlib
import os

if os.environ.get('MY_ENV_VAR', None):  # Check your env condition here
    pkg = '.subpackage1'
else:
    pkg = '.subpackage2'
subpackage = importlib.import_module(pkg, __name__)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/31285643)
 I think it's better to use  importlib.import_module('.c', __name__)  since you don't need to know about  a  and  b . 

 I'm also wondering that, if you have to use  importlib.import_module('a.b.c') , why not just use  import a.b.c ? 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28018709)
 Just use: 

  np = importlib.import_module('numpy')
  

  importlib.import_module   returns  the module object it got for you, and doesn't, per se, bind any name in the current scope. 

 So, you do your own binding in the usual way -- by assignment! -- and it's entirely up to you how you want to name the variable you're assigning to:-) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53516983)
 Starting from Python 3.1, you can use importlib : 

  import importlib  
foobar = importlib.import_module("foo-bar")
  

 ( https://docs.python.org/3/library/importlib.html ) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25827116)
 You can use the  pkgutil  module (specifically the https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages method) to get a list of the packages in the current directory. From there it's trivial to use the  importlib  machinery to import the modules you want: 

  import pkgutil
import importlib

packages = pkgutil.walk_packages(path='.')
for importer, name, is_package in packages:
    mod = importlib.import_module(name)
    # do whatever you want with module now, it's been imported!
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/10675081)
 For relative imports you have to: 

 
 a) use relative name  
  b) provide anchor explicitly 

  importlib.import_module('.c', 'a.b')
   
 

 Of course, you could also just do absolute import instead: 

  importlib.import_module('a.b.c')
  



