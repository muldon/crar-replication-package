Query: Regular expression matching all but a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16422163)
 The regular expression pattern and string have to be of the same type. If you're matching a regular string, you need a string pattern. If you're matching a byte string, you need a bytes pattern. 

 In this case  m.read()  returns a byte string, so you need a bytes pattern. In Python 3, regular strings are unicode strings, and you need the  b  modifier to specify a byte string literal: 

  linkregex = re.compile(b'<a\s*href=[\'|"](.*?)[\'"].*?>')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48889434)
 The best way to find overlapping sub-string in a given string is to use the python regular expression it will find all the overlapping matching using the regular expression library. Here is how to do it left is the substring and in right you will provide the string to match 

  print len(re.findall('(?=aa)','caaaab'))
3
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/42390685)
 Note that  [\d.]  should match any one character either a digit or a dot. 

  v(\d+)\.(\d+)\.\d+
  

 Use  \d+  to match one or more digit characters. 

  Example:  

  >>> import re
>>> s = ['v1.32.12',  'v0.2.2'  , 'v1232.321.23', 'v1.2.434312543898765']
>>> [i for i in s if re.match(r'^.{20})v(\d+)\.(\d+)\.\d+$', i)]
['v1.32.12', 'v0.2.2', 'v1232.321.23']
>>> 
  

  .{20})  negative lookahead at the start checks for the string length before matching. If the string length is atleast 20 then it would fails immediately without do matching on that particular string.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28039701)
 Remove the  .*  from your pattern and use  search  instead of  match  to let the match start anywhere: 

  pattern = r'(\d+)\s*\%.*off.*'
m = re.search(pattern, string, re.I)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/39765790)
 Change your regex to use a lookahead assertion which will not consume the string while matching: 

  import re

string = '3*2**3**2*5**4**'
print(re.findall(r'(?=(\d\*\*\d))', string))
>> ['2**3', '3**2', '5**4']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45244845)
 Try with specifying the start and end rules in your regex: 

  re.compile(r'^test-\d+$')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2317153)
  >>> import re

>>> re.match("[a-zA-Z][\w-]*$","A")
<_sre.SRE_Match object at 0x00932E20>

>>> re.match("[a-zA-Z][\w-]*$","A_B")
<_sre.SRE_Match object at 0x008CA950>

>>> re.match("[a-zA-Z][\w-]*$","0A")
>>> 
>>> re.match("[a-zA-Z][\w-]*$","!A_B")
>>>
  

  Note : OP mentioned  string cannot start from ( 0-9 and "_"). , apparently _ can be in the text. Thats why I am using  \w  

  Note2 : If you don't want match string ends with  \n , you could use  \Z  instead of  $  as John Machin mentioned. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19592715)
 You can use list comprehension, like this 

  print [line for line in file  if re.match(targetregex, line)]
  

 It will return you the list of lines which match the regular expression. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15202938)
 use the  start.end  in the re. The question mark means "as few as possible". 



