Query: Regex for removing data in parenthesis
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40509094)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html by  regex  with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.strip.html if need remove last whitespaces: 

  df.Item = df.Item.str.replace(r"\(.*\)","").str.strip()
print (df)
        Item
0     Banana
1  Chocolate
2      Apple
  

 Another simplier solution with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.split.html with http://pandas.pydata.org/pandas-docs/stable/text.html#indexing-with-str: 

  df.Item = df.Item.str.split(' \(').str[0]
print (df)
        Item
0     Banana
1  Chocolate
2      Apple
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29487654)
 I feel you do not need any regex for the sample string you provided: 

  temp2 = '(LEFT-WALL)(who)(is.v)(the)(di(rect)or.n)(of)(Inceptio)(RIGHT-WALL)'
if temp2[0:1] == "(" and temp2[-1:] == ")":
    print temp2[1:-1].split(")(")
  

 Output of the http://goo.gl/xzA6hi: 

  ['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL'] 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19794114)
 Anything within square brackets are taken irrespective of the order in which you have the characters because  [ ... ]  is a character class. remove them entirely: 

  r" \(\w+\)"
  

 And I would add a  ?   

  r" ?\(\w+\)"
  

 http://regex101.com/r/kZ3iY1 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19794089)
 Remove the square brackets; you are not matching a character class: 

  item = re.sub(r" \(\w+\)", "", item)
  

  

  >>> items = ["x (LOC)", "ds ds (32C)", "d'ds ds (LeC)", "ds-d da(LOQ)", "12345 (deC)"]
>>> for item in items:
...     print re.sub(r" \(\w+\)", "", item)
... 
x
ds ds
d'ds ds
ds-d da(LOQ)
12345
  

 The one-but last example has no space preceding the opening parenthesis ( ( ) and thus doesn't match. You could make the space optional if you need that pattern to work too: 

  item = re.sub(r" ?\(\w+\)", "", item)
  

 Perhaps matching anything that isn't a closing parenthesis would work for you as well: 

  item = re.sub(r" ?\([^)]+\)", "", item)
  

 This matches a wider range of characters than just  \w . 

 In a regular expression, square brackets,  [...] , denote a character class; a set of characters to match  once . The class  [ \(w+\)]  means: match  one  character, if it matches the set including a space, an opening parenthesis, all characters of the  \w  class, a  +  plus, or a closing parenthesis. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/25108571)
 You need to escape those last few bracket characters as well. 

  regex = r'\[\[.*?\]\]\);'
                   ^ ^
  

 If you are trying to obtain the content between the square brackets, use a capturing group here. 

  >>> import re
>>> s = 'foo [[bar]]); baz [[quz]]); not [[foobar]]'
>>> matches = re.findall(r'\[\[(.*?)\]\]\);', s, re.S)
>>> matches
['bar', 'quz']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29487283)
 As an alternative without using regex you can do the job just with  str.split()  and  str.strip()  methods : 

  >>> [i.strip('()') for i in temp2.split(')(')]
['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
  

 Or with regex you can use http://www.regular-expressions.info/lookaround.html in your regex : 

  >>> re.findall(r'(?<=\()(.*?)(?=\)\(|\)$)', temp2)
['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
  

  Note  that the logic is simple you just need to match the string that is between open parenthesis  (  and a close parenthesis that followed by an open bracket  )(  . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40509120)
 This does the trick: 

  df.Item = df.Item.apply(lambda x: x.split(" (")[0])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25108556)
 escape the last   )  and  ]     r'\[\[.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14183343)
 Other answers have shown you how to get the result you need, but with the extra step of manually removing the parentheses. If you use lookarounds in your regex, you won't need to strip the parentheses manually: 

  >>> import re
>>> s = '(zyx)bc'
>>> print (re.findall(r'(?<=\()\w+(?=\))|\w', s))
['zyx', 'b', 'c']
  

  

  (?<=\() // lookbehind for left parenthesis
\w+     // all characters until:
(?=\))  // lookahead for right parenthesis
|       // OR
\w      // any character
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/12925359)
 Using regex >> 

  s = re.sub(r'(?m)^\*.*\n?', '', s) 
  

 Check  http://ideone.com/mCq4i . 



