Query: Finding the index of elements based on a condition using python list comprehension
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9542768)
 As for your first question: that code is perfectly fine and should work if  item  equals one of the elements inside  myList . Maybe you try to find a string that does not  exactly  match one of the items or maybe you are using a float value which suffers from inaccuracy. 

 As for your second question: There's actually several possible ways if "finding" things in lists. 

 Checking if something is inside</h3>

 This is the use case you describe: Checking whether something is inside a list or not. As you know, you can use the  in  operator for that: 

  3 in [1, 2, 3] # => True
  

 Filtering a collection</h3>

 That is, finding all elements in a sequence that meet a certain condition. You can use list comprehension or generator expressions for that: 

  matches = [x for x in lst if fulfills_some_condition(x)]
matches = (x for x in lst if x > 6)
  

 The latter will return a  generator  which you can imagine as a sort of lazy list that will only be built as soon as you iterate through it. By the way, the first one is exactly equivalent to 

  matches = filter(fulfills_some_condition, lst)
  

 in Python 2. Here you can see higher-order functions at work. In Python 3,  filter  doesn't return a list, but a generator-like object. 

 Finding the first occurrence</h3>

 If you only want the first thing that matches a condition (but you don't know what it is yet), it's fine to use a for loop (possibly using the  else  clause as well, which is not really well-known). You can also use 

  next(x for x in lst if ...)
  

 which will return the first match or raise a  StopIteration  if none is found. Alternatively, you can use 

  next((x for x in lst if ...), [default value])
  

 Finding the location of an item</h3>

 For lists, there's also the  index  method that can sometimes be useful if you want to know  where  a certain element is in the list: 

  [1,2,3].index(2) # => 1
[1,2,3].index(4) # => ValueError
  

 However, note that if you have duplicates,  .index  always returns the lowest index:...... 

  [1,2,3,2].index(2) # => 1
  

 If there are duplicates and you want all the indexes then you can use  enumerate()  instead: 

  [i for i,x in enumerate([1,2,3,2]) if x==2] # => [1, 3]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7270932)
 
  In Python, you wouldn't use indexes for this at all, but just deal with the valuesâ€” [value for value in a if value > 2] . Usually dealing with indexes means you're not doing something the best way.  
  If you  do  need an API similar to Matlab's, you would use http://numpy.scipy.org/, a package for multidimensional arrays and numerical math in Python which is heavily inspired by Matlab. You would be using a numpy array instead of a list. 

  >>> import numpy
>>> a = numpy.array([1, 2, 3, 1, 2, 3])
>>> a
array([1, 2, 3, 1, 2, 3])
>>> numpy.where(a > 2)
(array([2, 5]),)
>>> a > 2
array([False, False,  True, False, False,  True], dtype=bool)
>>> a[numpy.where(a > 2)]
array([3, 3])
>>> a[a > 2]
array([3, 3])
   
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31507364)
 You could use list comprehension and enumerate(), like this: 

  >>> [y for i, y in enumerate(x[1:]) if x[i] == 1]
[2, 67, 99]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26069785)
 Python list comprehension, without needing to import any modules like itertools. 

  l3 = [b for a,b in zip(l1,l2) if b != a]
  

 Whenever you find yourself wanting to do a for loop wherein at each iteration you may be appending to something that started as an empty list, think of using a list comprehension. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7270355)
 Another way: 

  >>> [i for i in range(len(a)) if a[i] > 2]
[2, 5]
  

 In general, remember that  while  find  is a ready-cooked function, list comprehensions are a general, and thus very powerful solution . Nothing prevents you from writing a  find  function in Python and use it later as you wish. I.e.: 

  >>> def find_indices(lst, condition):
...   return [i for i, elem in enumerate(lst) if condition(elem)]
... 
>>> find_indices(a, lambda e: e > 2)
[2, 5]
  

 Note that I'm using lists here to mimic Matlab. It would be more Pythonic to use generators and iterators. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7270886)
 Maybe another question is, "what are you going to do with those indices once you get them?"  If you are going to use them to create another list, then in Python, they are an unnecessary middle step.  If you want all the values that match a given condition, just use the builtin filter: 

  matchingVals = filter(lambda x : x>2, a)
  

 Or write your own list comprhension: 

  matchingVals = [x for x in a if x > 2]
  

 If you want to remove them from the list, then the Pythonic way is not to necessarily remove from the list, but write a list comprehension as if you were creating a new list, and assigning back in-place using the  listvar[:]  on the left-hand-side: 

  a[:] = [x for x in a if x <= 2]
  

 Matlab supplies  find  because its array-centric model works by selecting items using their array indices. You  can  do this in Python, certainly, but the more Pythonic way is using iterators and generators, as already mentioned by @EliBendersky. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31506851)
 You can use https://docs.python.org/2/library/functions.html#zip along with list slicing as 

  >>> x = [1,2,25,1,67,8,9,1,99]
>>> for i,j in zip(x[:-1],x[1:]):
...     if i==1:
...        print j
... 
2
67
99
  

 This can be written in a single list comprehension as  

  [j for i,j in zip(x[:-1],x[1:]) if i==1]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40843281)
 Using list comprehension 

  d = [[1,2],[4,6,2],[6,2,3,1],[7,2]]
close8 = [i.index(min(i, key=lambda x:abs(x-8))) for i in d]
# [1, 1, 0, 0]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16605932)
 You limit  x  to be smaller than  len(close) , but the last index of a list is at  len(close) - 1  (0 based indexing). This means in the last iteration of your loop  x + 1  will be equal to  len(close)  and out of bounds. 

 This works: 

  while x < len(close) - 1:
    diff = close[x+1]-close[x]
    data.append(diff)
    x = x + 1
  

 Your code can also be simplified to: 

  data = [elem - close[i - 1] for i, elem in enumerate(close) if i]
  

 This list comprehension: 

 
 Loops over all elements in  close . 
 Uses  enumerate()  to generate an index for each element, giving us both the index  i  and the element  elem . 
 Calculates the difference between the current element and the previous element in  close  (using the index - 1),  except  when the index is  0 , effectively skipping the one element for which there is no preceding element in  close . 
 

  

  >>> close = [5000,5010,5132,5134]
>>> [elem - close[i - 1] for i, elem in enumerate(close) if i]
[10, 122, 2]
  



