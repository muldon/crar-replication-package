Query: How do I zip keys with individual values in my lists in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13480129)
 using  itertools.cycle() : 

  In [51]: from itertools import *

In [52]: cyc=cycle(k)

In [53]: [{next(cyc):y for y in x} for x in v]
Out[53]: [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31562925)
 First, separate keys and values in the dict 

  >>> keys, values = zip(*d.items())
  

 Now,  zip  the values, adding the key-list as the first column 

  >>> zip(d[u"d"], *values)
[(5, 1, 'g', 9, 5), (1, 4, 'a', 9, 1), (10, 6, 'b', 9, 10), (2, 7, '9', 8, 2)]
  

 Sort the values by first column (the key-list) 

  >>> sorted(_)
[(1, 4, 'a', 9, 1), (2, 7, '9', 8, 2), (5, 1, 'g', 9, 5), (10, 6, 'b', 9, 10)]
  

 Then  zip  the result of the sort back and strip the key-column 

  >>> zip(*_)[1:]
[(4, 7, 1, 6), ('a', '9', 'g', 'b'), (9, 8, 9, 9), (1, 2, 5, 10)]
  

  zip  again with the keys to reconstruct the dictionary. 

  >>> dict(zip(keys, _))
{u'a': (4, 7, 1, 6),
 u'b': (9, 8, 9, 9),
 u'c': ('a', '9', 'g', 'b'),
 u'd': (1, 2, 5, 10)}
  

 Everything put together: 

  keys, values = zip(*d.items())
new_d = dict(zip(keys, zip(*sorted(zip(d[u"d"], *values)))[1:]))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37018092)
 Using  itertools.zip_longest  and list comprehension: 

  [{'email': i, 'id': j, 'ref': k} for (i, j, k) in itertools.zip_longest(d.get('email'), d.get('id'), d.get('ref'))]
  

  Example:  

  >>> d
{'ref': ['r_val1', 'r_val2', 'r_val3', 'r_val4'], 'id': ['i_val1', 'i_val2', 'i_val3', 'i_val4'], 'email': ['e_val1', 'e_val2', 'e_val3', 'e_val4', 'e_val5']}

>>> [{'email': i, 'id': j, 'ref': k} for (i, j, k) in itertools.zip_longest(d.get('email'), d.get('id'), d.get('ref'))]
[{'ref': 'r_val1', 'id': 'i_val1', 'email': 'e_val1'}, {'ref': 'r_val2', 'id': 'i_val2', 'email': 'e_val2'}, {'ref': 'r_val3', 'id': 'i_val3', 'email': 'e_val3'}, {'ref': 'r_val4', 'id': 'i_val4', 'email': 'e_val4'}, {'ref': None, 'id': None, 'email': 'e_val5'}]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11739445)
 . 

 The point is you should not modify  d  between calling  d.values()  and  d.keys() . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31670784)
 You can use https://docs.python.org/3/library/functions.html#zip function : 

  >>> zip(*d.values())
[(5, 1, 1), (6, 2, 2), (5, 3, 1), (6, 7, 2), (5, 8, 1), (6, 9, 2)]
  

 If you care about the order you should pass the values by a custom order to  zip  function.for example : 

  zip(d['x_axis'], d['y_axis'], d['z_axis'])
  

 Or use an  collections.OrderedDict  if you want to use  values()  and unpacking : 

  >>> from collections import OrderedDict
>>> d=OrderedDict([(u'x_axis', [1, 2, 3, 7, 8, 9]),(u'y_axis', [5, 6, 5, 6, 5, 6]), (u'z_axis', [1, 2, 1, 2, 1, 2])])
>>> 
>>> zip(*d.values())
[(1, 5, 1), (2, 6, 2), (3, 5, 1), (7, 6, 2), (8, 5, 1), (9, 6, 2)]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/21931336)
 First get the keys. You could sort them or whatever you like at this stage. Maybe you know what keys to use in what order, so you don't need to examine the data. 

  keys = list(d.keys())
  

 Define the named tuple: 

  Record = collections.namedtuple('Record', keys)
  

 Iterate all the lists in parallel: 

  [Record(*t) for t in zip(*(d[k] for k in keys))]
  

 or  list(map(Record, *(d[k] for k in keys)))  if you like  map . 

 Note that if  keys  is just  list(d.keys())  then you can use  d.values()  in place of  (d[k] for k in keys) , because even though the order of keys in the dictionary is arbitrary it's guaranteed to be the same as the order of values. So if you don't care about the order of the fields in the namedtuple then it simplifies to: 

  Record = collections.namedtuple('Record', d.keys())
[Record(*t) for t in zip(*(d.values()))]
  

 or  list(map(Record, *d.values()))  if you like  map . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46433606)
 Basic idea: get a list of all x-values and all y-values, then get the max of each of those individual lists.  

  import itertools
x,y = zip(*itertools.chain(*roi.values()))
print(max(x),max(y))
  

 Explanation:  roi.values()  gets all the values from the key-value pairs, then  itertools.chain(*...)  combines the lists of 2-tuples into 1 list, then finally  zip(*...)  inverts the lists so that instead of a list of  k  of 2-tuples, you have 2 k-tuples, which you can get the  max  of. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48815770)
 Here's my attempt at a somewhat functional solution for any number of dicts and any number of values to zip-sum. 

 Define how you want to merge entries. In this case by summing the individual components, materializing the result: 

  merge = lambda vs: list(map(sum, zip(*vs)))
  

 Then define how to merge two dicts: 

  def merge_dicts(ds):
    keys = set.union(*map(set, ds))
    return {k: merge(map(lambda d: d.get(k, repeat(0)), ds))
            for k in keys}
  

 Here I just go over the union of all keys, merging every dict's entry, with  repeat(0)  as default so  merge()  will just sum up zeroes for missing values. 

 After that you can merge your dicts like this: 

  merged = merge_dicts([dict1, dict2])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15183119)
 The quick and easy answer is  dict(zip(x,y)) , if you're ok with the keys being strings.  otherwise, use  dict(zip(map(int,x),y))  



