Query: how to convert a datetime string back to datetime object?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4170691)
 You want datetime.strptime(date_string, format). 

  from datetime import datetime
datetime.strptime("2010-11-13 10:33:54.227806", "%Y-%m-%d %H:%M:%S.%f")
  

 For details on the format string, see http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29906591)
 You could call  apply  and use  datetime.strptime : 

  In [37]:

df = pd.DataFrame(['05/06/2015 00:00', '22/06/2015 00:00'], columns=['date'])
df['date']= pd.to_datetime(df['date'])
df
Out[37]:
        date
0 2015-05-06
1 2015-06-22

In [38]:

df['date'] = df['date'].apply(lambda x: dt.datetime.strftime(x,'%Y-%m-%d'))
df
Out[38]:
         date
0  2015-05-06
1  2015-06-22
In [39]:

df.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 2 entries, 0 to 1
Data columns (total 1 columns):
date    2 non-null object
dtypes: object(1)
memory usage: 32.0+ bytes
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13356706)
 Try using  dateutil . It has a parse that will attempt to convert your string back into a  datetime  object. 

  >>> from dateutil import parser
>>> strtime = str(datetime.now())
>>> strtime
'2012-11-13 17:02:22.395000'
>>> parser.parse(strtime)
datetime.datetime(2012, 11, 13, 17, 2, 22, 395000)
  

 You can then subtract one  datetime  from another and get a  timedelta  object detailing the difference in time. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40808470)
 Use https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime to convert a string to timedelta. 

  import datetime

td = datetime.timedelta(hours=2)

# timedelta to string
s = str(td) # 2:00:00

# string to timedelta
t = datetime.datetime.strptime(s,"%H:%M:%S")
td2 = datetime.timedelta(hours=t.hour, minutes=t.minute, seconds=t.second)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29238720)
 You can convert the datetime object to a timetuple, and then use the time.mktime function 

<pre class="lang-python prettyprint-override"> import time
from datetime import datetime
timestamp = int(time.mktime(datetime.now().timetuple()))
  

 Convert it back with: 

<pre class="lang-html prettyprint-override"> now = datetime.fromtimestamp(timestamp)
  




-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5220053)
 Check out  datetime.datetime.strptime  and its sister  strftime  for this: 

  from datetime import datetime
time_obj = datetime.strptime("2011-03-07", "%Y-%m-%d")
  

 It is used for parsing and formating from datetime to string and back. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/4170713)
 I sugggest you install http://labix.org/python-dateutil: 

  from dateutil import parser
d = parser.parse(yourstring)
  

 This library gets a datetime object from your date-string in a 'smart' way... 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25659551)
 You can use the https://docs.python.org/2/library/datetime.html#datetime.datetime.isoformat method on a datetime object to convert it to an ISO-8601-formatted time string, then serialize it as JSON just fine. On the other end, call https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime on the formatted string to convert it back into a  datetime  object: 

  >>> from datetime import datetime as dt
>>> now = dt.now()
>>> now
datetime.datetime(2014, 9, 4, 3, 19, 44, 214096)
>>> isonow = now.isoformat()
>>> isonow
'2014-09-04T03:19:44.214096'
>>> format = "%Y-%m-%dT%H:%M:%S.%f"
>>> newtime = dt.strptime(isonow, format)
>>> newtime
datetime.datetime(2014, 9, 4, 3, 19, 44, 214096)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31955810)
  datetime.strptime()  is used for converting a string to a datetime object , when using  strptime()  you have to specify the correct format in which the date/time in the string exists . 

 In your case the format should be -  '%Y-%m-%d %H:%M:%S'  . 

 Example - 

  >>> test = '2015-08-12 13:07:32'
>>> import datetime
>>> datetime.datetime.strptime(test, '%Y-%m-%d %H:%M:%S')
datetime.datetime(2015, 8, 12, 13, 7, 32)
  

 

 If what you really want is the date-time back as a string with the  AM/PM  , then you need to use  strftime()  to convert it back to string with the format you want, in this case the format would be -  '%Y-%m-%d %I:%M:%S %p'  . Example - 

  >>> datetime.datetime.strptime(test, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d %I:%M:%S %p')
'2015-08-12 01:07:32 PM'
  

 

  datetime  objects internally do not store (and do not have to store) the AM/PM information, since that can be easily calculated from the hour. 



