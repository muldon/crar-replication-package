Query: How do I sort a list of dictionaries by values of the dictionary in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47891763)
 You need to use all items of each dict while sorting, and  d.items()  iterates items in arbitrary order, so they need to be sorted. And this is your sorting key: 

  a = [{1: 2, 7: 8}, {7: 8, 3: 4}, {5: 6}]
b = [{3: 4, 7: 8}, {7: 8, 1: 2}, {5: 6}]
sorted(a, key=lambda d: sorted(d.items()))
Out: [{1: 2, 7: 8}, {3: 4, 7: 8}, {5: 6}]

sorted(b, key=lambda d: sorted(d.items()))
Out: [{1: 2, 7: 8}, {3: 4, 7: 8}, {5: 6}]

x = [{1: 2},{1: 3}]
y = [{1: 3},{1: 2}]
sorted(x, key=lambda d: sorted(d.items()))
Out: [{1: 2}, {1: 3}]

sorted(y, key=lambda d: sorted(d.items()))
Out: [{1: 2}, {1: 3}]
  

 Note that  sorted(a, key=...)  creates a new list, while  a.sort(key=...)  makes sorting in place. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13208582)
 Using Python 3.2: 

  x = {"b":4, "a":3, "c":1}
for i in sorted(x.values()):
    print(list(x.keys())[list(x.values()).index(i)])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47796302)
 Sorting on all  keys  in the dictionaries can be done with: 

  a.sort(key=lambda d: d.keys())
b.sort(key=lambda d: d.keys())
  

 To get the result you want we need to sort the keys on ascending order as follows: 

  a.sort(key=lambda d: sorted(list(d.keys()), reverse=True))
b.sort(key=lambda d: sorted(list(d.keys()), reverse=True))
  

 This gives the following result: 

  >>> a
[{5: 6}, {1: 2, 7: 8}, {3: 4, 7: 8}]
>>> b
[{5: 6}, {1: 2, 7: 8}, {3: 4, 7: 8}]
  

 Edit: In order to sort based on the values as well (asked in the comments) the following might work: 

  a.sort(key=lambda d: sorted(list(d.keys()) + sorted(list(d.values())), reverse=True))
b.sort(key=lambda d: sorted(list(d.keys()) + sorted(list(d.values())), reverse=True))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52142908)
 . This will sort your dict by keys.  This is work only on Python 2.7 

  newlist = sorted(list_to_be_sorted, key=lambda k: k.keys()) 
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31741215)
 Of course, remember, you need to use  OrderedDict  because regular Python dictionaries don't keep the original order.  

  from collections import OrderedDict
a = OrderedDict(sorted(originalDict.items(), key = lambda x: x[1]))
  

 

 If you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an OrderedDict for 2.4  2.6  https://pypi.python.org/pypi/ordereddict, but  

  a) I don't know about how well it works 
  

   

  b) You have to download  install it of course. If you do not have administrative access, then I'm afraid the option's out.)
  

 

  def gen(originalDict):
    for x,y in sorted(zip(originalDict.keys(), originalDict.values()), key = lambda z: z[1]):
        yield (x, y)
    #Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. 

for bleh, meh in gen(myDict):
    if bleh == "foo":
        print(myDict[bleh])
  

 

 You can also print out every value 

  for bleh, meh in gen(myDict):
    print(bleh,meh)
  

 Please remember to remove the parentheses after print if not using Python 3.0 or above 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44148366)
 This method will not use lambda and works well on Python 3.6: 

   # sort dictionary by value
d = {'a1': 'fsdfds', 'g5': 'aa3432ff', 'ca':'zz23432'}
def getkeybyvalue(d,i):
    for k, v in d.items():
        if v == i:
            return (k)

sortvaluelist = sorted(d.values())

# In >> Python 3.6+ << the INSERTION-ORDER of a dict is preserved. That is,
# when creating a NEW dictionary and filling it 'in sorted order',
# that order will be maintained.
sortresult ={}
for i1 in sortvaluelist:   
    key = getkeybyvalue(d,i1)
    sortresult[key] = i1
print ('=====sort by value=====')
print (sortresult)
print ('=======================')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18691307)
 I would convert the dictionary to a list of tuples and sort it based on weight (in reverse order for descending), then just remove the objects to get a list of the keys 

  l = documents.items()
l.sort(key=lambda x: x[1]['weight'], reverse=True)
result = [d[0] for d in l]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5455643)
 Python dictionaries don't have any 'order' associated with them. It's merely a 'coincidence' that the dict is printing the same order. There are no guarantees that items in a dictionary with come out in any order. 

 If you want to deal with ordering you'll need to convert the dictionary to a list. 

  a = list(a) # keys in list
a = a.keys() # keys in list
a = a.values() # values in list
a = a.items() # tuples of (key,value) in list
  

 Now you can sort the list as normal, e.g.,  a.sort()  and reverse it as well, e.g.,  a.reverse()    


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16435785)
   

  import operator    
x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}
  

 For Python 3.x:  x.items()  replacing  iteritems() . 

  >>> sorted_x
{0: 0, 1: 2, 2: 1, 3: 4, 4: 3}
  

 Or try with  collections.OrderedDict ! 

  x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
from collections import OrderedDict

od1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/52345214)
 Starting from Python 3.6,  dict  objects are now ordered by insertion order. It's officially in the specs of Python 3.7. 

  >>> words = {"python": 2, "blah": 4, "alice": 3}
>>> dict(sorted(words.items(), key=lambda x: x[1]))
{'python': 2, 'alice': 3, 'blah': 4}
  

 Before that, you had to use  OrderedDict . 

 https://docs.python.org/3.7/library/stdtypes.html#typesmapping says: 

 
   Changed in version 3.7: Dictionary order is guaranteed to be insertion
  order. This behavior was implementation detail of CPython from 3.6.  
 



