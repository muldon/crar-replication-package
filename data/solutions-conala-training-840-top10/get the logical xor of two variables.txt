Query: get the logical xor of two variables
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8787948)
 XOR is implemented in  operator.xor . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4957708)
 It's easy when you know what XOR does: 

  def logical_xor(a, b):
    return (a and not b) or (not a and b)

test_data = [
  [False, False],
  [False, True],
  [True, False],
  [True, True],
]

for a, b in test_data:
    print '%r xor %s = %r' % (a, b, logical_xor(a, b))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/432940)
 Exclusive Or is defined as follows 

  def xor( a, b ):
    return (a or b) and not (a and b)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11036506)
 Exclusive-or is already built-in to Python, in the http://docs.python.org/library/operator.html#operator.xor module: 

<pre class="lang-py prettyprint-override"> from operator import xor
xor(bool(a), bool(b))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/433161)
 If you're already normalizing the inputs to booleans, then != is xor. 

  bool(a) != bool(b)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22265366)
 Sometimes I find myself working with 1 and 0 instead of boolean True and False values.  In this case xor can be defined as  

  z = (x + y) % 2
  

 which has the following truth table: 

       x
   |0|1|
  -+-+-+
  0|0|1|
y -+-+-+
  1|1|0|
  -+-+-+
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/432844)
 You can always use the definition of xor to compute it from other logical operations: 

  (a and not b) or (not a and b)
  

 But this is a little too verbose for me, and isn't particularly clear at first glance. Another way to do it is: 

  bool(a) ^ bool(b)
  

 The xor operator on two booleans is logical xor (unlike on ints, where it's bitwise). Which makes sense, since http://docs.python.org/library/functions.html?highlight=bool#bool, but is implemented to only have the values  0  and  1 . And logical xor is equivalent to bitwise xor when the domain is restricted to  0  and  1 . 

 So the  logical_xor  function would be implemented like: 

  def logical_xor(str1, str2):
    return bool(str1) ^ bool(str2)
  

 Credit to http://mail.python.org/pipermail/python-3000/2007-December/011560.html. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43476332)
 Simple, easy to understand: 

  sum( (bool(a), bool(b) ) == 1
  

 If an exclusive choice is what you're after, it can be expanded to multiple arguments: 

  sum( bool(x) for x in y ) == 1
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35198876)
 I've tested several approaches and  not a != (not b)  appeared to be the fastest. 

 Here are some tests 

  %timeit not a != (not b)
10000000 loops, best of 3: 78.5 ns per loop

In [130]: %timeit bool(a) != bool(b)
1000000 loops, best of 3: 343 ns per loop

In [131]: %timeit not a ^ (not b)
10000000 loops, best of 3: 131 ns per loop
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53510891)
 https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_xor.html and https://docs.scipy.org/doc/numpy/reference/generated/numpy.bitwise_xor.html#numpy.bitwise_xor will work for 2-D arrays, as will the operators  !=  and  ^  (essentially logical and bitwise XOR, respectively). 

  edit : I just noticed in your title you are looking for logical XOR, but I will leave the bitwise info there for reference in case it's helpful. 

  Setup : 

  a = np.random.choice([0,255], (5,5))
b = np.random.choice([0,255], (5,5))

>>> a
array([[255, 255,   0, 255, 255],
       [255, 255,   0, 255,   0],
       [255,   0,   0,   0,   0],
       [  0, 255, 255, 255, 255],
       [  0,   0, 255,   0,   0]])
>>> b
array([[  0, 255, 255, 255, 255],
       [255,   0,   0, 255,   0],
       [255,   0, 255,   0, 255],
       [  0,   0,   0,   0,   0],
       [255,   0,   0,   0, 255]])
  

  Logical XOR : 

  >>> np.logical_xor(a,b)
array([[ True, False,  True, False, False],
       [False,  True, False, False, False],
       [False, False,  True, False,  True],
       [False,  True,  True,  True,  True],
       [ True, False,  True, False,  True]])

# equivalently:
>>> a!=b
array([[ True, False,  True, False, False],
       [False,  True, False, False, False],
       [False, False,  True, False,  True],
       [False,  True,  True,  True,  True],
       [ True, False,  True, False,  True]])
  

  Bitwise XOR : 

  >>> np.bitwise_xor(a,b)
array([[255,   0, 255,   0,   0],
       [  0, 255,   0,   0,   0],
       [  0,   0, 255,   0, 255],
       [  0, 255, 255, 255, 255],
       [255,   0, 255,   0, 255]])

# equivalently:
>>> a^b
array([[255,   0, 255,   0,   0],
       [  0, 255,   0,   0,   0],
       [  0,   0, 255,   0, 255],
       [  0, 255, 255, 255, 255],
       [255,   0, 255,   0, 255]])
  



