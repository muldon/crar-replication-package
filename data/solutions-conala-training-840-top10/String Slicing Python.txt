Query: String Slicing Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4423505)
 Perhaps you could use  split() : 

  >>> s = 'Your ID number is: 41233'
>>> print s.split(":")[1].strip()
41233
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7983848)
  

  >>>mystr = "abcdefghijkl"
>>>mystr[-4:]
'ijkl'
  

 This https://docs.python.org/3/reference/expressions.html#slicings the string's last 4 characters. The -4 starts the range from the string's end. A modified expression with  [:-4]  removes the same 4 characters from the end of the string: 

  >>>mystr[:-4]
'abcdefgh'
  

 For more information on slicing see https://stackoverflow.com/a/509295/8117067. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4423533)
  text, sep, number = 'Your ID number is: 41233'.partition(':')
print number
  

 . But it won't fail if the separator is not in the string. 

 That unpacking works for split too: 

  text, number = 'Your ID number is: 41233'.split(':',1)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/766165)
 a string is essentially a sequence of characters and so the slicing operation works on it.  What you are doing is in fact: 

 -> get an slice of 'a' from start to end in steps of 1 backward. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9528361)
 A common way to achieve this is by string slicing.  

  MyString[a:b]  gives you a substring from index a to (b - 1). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40852704)
 For you problem "slicing" is the answer. 

 syntax :  s[a:b]   

 this will give you a string from index a to b-1
If you want string starting from a index till end then use 

  s[a:]  

 and if you want string from starting till index b then use 

  s[:b+1]  

 And for your example : 

  s="abcdefgh"
print s[2:]
  

 will print  cdefgh  and hence is the answer to your problem. 

 You could read more about it from https://www.dotnetperls.com/substring-python 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/21061987)
 For even length strings this should do it: 

  >>> s = "123456"
>>> it = reversed(s)
>>> ''.join(next(it) + x for x in it)
'563412'
  

 For odd length strings, you need to prepend the first character separately: 

  >>> s = "7123456"
>>> it = reversed(s)
>>> (s[0] if len(s)%2 else '') + ''.join(next(it) + x for x in it)
'7563412'
  

 

 Using slicing and  zip : 

  >>> s = "7123456"
>>> (s[0] if len(s)%2 else '') + ''.join(x+y for x, y in zip(s[-2::-2], s[::-2]))
'7563412'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7610735)
 You could use  slicing  

  x = "very_long_string_more_than_50_char_long"
print x[0:50]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40852685)
 In Python it is known as  string slicing  and the syntax is: 

  >>> foo = "abcdefgh"
>>> foo[2:]
'cdefgh'
  

 Check https://docs.python.org/2/tutorial/introduction.html#strings which demonstrates the slicing feature along with other functions available with  strings  in python.  

 I will also suggest to take a look at: http://pythoncentral.io/cutting-and-slicing-strings-in-python/ where it is demonstrated with some very nice examples. 

 Here are few examples related to slicing of string: 

  >>> foo[2:]     # start from 2nd index till end
'cdefgh'
>>> foo[:3]     # from start to 3rd index (excluding 3rd index)
'abc'
>>> foo[2:4]    # start from 2nd index till 4th index (excluding 4th index)
'cd'
>>> foo[2:-1]   # start for 2nd index excluding last index
'cdefg'
>>> foo[-3:-1]  # from 3rd last index to last index ( excluding last index)
'fg'
>>> foo[1:6:2]  # from 1st to 6th index (excluding 6th index) with jump/step of "2"
'bdf'
>>> foo[::-1]   # reverse the string; my favorite ;)
'hgfedcba'
  



