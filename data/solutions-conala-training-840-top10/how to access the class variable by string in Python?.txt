Query: how to access the class variable by string in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13303205)
 Try this: 

<pre class="lang-py prettyprint-override"> class Test:    
    a = 1    
    def __init__(self):  
         self.b=2   

test = Test()      
a_string = "b"   
print test.__dict__[a_string]   
print test.__class__.__dict__["a"]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13303122)
 use http://docs.python.org/2/library/functions.html?highlight=dir#getattr this way to do what you want: 

  test = Test()
a_string = "b"
print getattr(test, a_string)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28615737)
 You can use: 

  getattr(Test, a_string, default_value)  

 with a third argument to return some  default_value  in case  a_string  is not found on  Test  class. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13303121)
  getattr(test, a_string)
  

 plus some more characters so I can post it. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/30472028)
 You can access a variable by name using  locals()  or  globals()  respectively. In your case this would work as such: 

  locals()[values[0]](*values[1:])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10188144)
 I think you'd be better off with a dictionary if  Class.variable  really needs to be a string (for example because it's user input): 

  strings = { "string": [[arg1, arg2, arg3],[arg1, arg2, arg3]], 
            "string2": [[arg1, arg2, arg3],[arg1, arg2, arg3]] }
  

 Now you can access  strings[separateVariable][0] . 

 (In your example, you were trying to access  "string"[separateVariable][0]  which fails for sufficiently high values of  separateVariable ). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18536960)
 You accessed the super class variable correctly; your code gives you an error because of how you tried to print it. You used  .  for string concatenation instead of  + , and concatenated a string and a list.  

      print "Value of x = ". self.x
  

 to any of the following: 

      print "Value of x = " + str(self.x)
    print "Value of x =", self.x
    print "Value of x = %s" % (self.x, )
    print "Value of x = {0}".format(self.x)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50276865)
 In python, str() is the string constructor. It is used to cast an object to a string. 

 You can use it locally, but it will override the access to the function. You will not be able to use str() anymore. 

 for reference:
https://docs.python.org/2/library/functions.html#str 

 
   class str(object='') 
  
   Return a string containing a nicely printable representation of an
  object. For strings, this returns the string itself. The difference
  with repr(object) is that str(object) does not always attempt to
  return a string that is acceptable to eval(); its goal is to return a
  printable string. If no argument is given, returns the empty string,
  ''. 
 

 For general knowledge purpose, you can get back you constructor if you delete your variable. For example: 

  test = 1
str(test)
>>>'1'

str = 2
str(test)
>>>TypeError: 'int' object is not callable

del str

str(test)
>>>'1'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39951135)
 
   getattr(x, 'y')   is equivalent to   x.y   
   setattr(x, 'y', v)   is equivalent to   x.y = v   
   delattr(x, 'y')   is equivalent to   del x.y   
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54035590)
 If you have access to that function through literally any variable, you can use   .__name__ : 

   >>> def the_function():
...     pass
... 
>>> the_function.__name__
'the_function'
>>> foo = the_function
>>> foo.__name__
'the_function'
  



