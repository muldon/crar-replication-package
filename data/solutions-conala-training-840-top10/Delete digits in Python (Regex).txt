Query: Delete digits in Python (Regex)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/817189)
 To handle digit strings at the beginning of a line as well: 

  s = re.sub(r"(^|\W)\d+", "", s)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15202183)
  x.translate(None, string.digits)
  

 will delete all digits from string. To delete letters and keep the digits, do this: 

  x.translate(None, string.letters)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/817164)
  

  "\b\d+\b"
  

 That'll match only those digits that are not part of another word. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/817304)
 Non-regex solution: 

  >>> s = "This must not b3 delet3d, but the number at the end yes 134411"
>>> " ".join([x for x in s.split(" ") if not x.isdigit()])
'This must not b3 delet3d, but the number at the end yes'
  

 Splits by  " " , and checks if the chunk is a number by doing http://docs.python.org/library/stdtypes.html#str.isdigit, then joins them back together. More verbosely (not using a list comprehension): 

  words = s.split(" ")
non_digits = []
for word in words:
    if not word.isdigit():
        non_digits.append(word)

" ".join(non_digits)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/817140)
 Add a space before the \d+. 

  >>> s = "This must not b3 delet3d, but the number at the end yes 134411"
>>> s = re.sub(" \d+", " ", s)
>>> s
'This must not b3 delet3d, but the number at the end yes '
  

 Edit:  After looking at the comments, I decided to form a more complete answer.  I think this accounts for all the cases. 

  s = re.sub("^\d+\s|\s\d+\s|\s\d+$", " ", s)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17158891)
 Here's a shorter alternative, using  any()  and  string.digits : 

  from string import digits

a = ['in 1978 by', 'History', 'members', 'albums', 'June 4th, 1979', 
     'October 7,1986): "The Lounge', 'In 1984 the', 'early 1990s; prominent']

[x for x in a if any(y in x for y in digits)]

=> ['in 1978 by', 'June 4th, 1979', 'October 7,1986): "The Lounge',
    'In 1984 the', 'early 1990s; prominent']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34200027)
 To match any digit sequences other than 4-digit sequences starting with  18 / 19 / 20 , you can use 

  r'\b!:18|19|20)\d{2}\b)\d+\b'
  

 See https://regex101.com/r/tB0qR8/1 

 The regex matches: 

 
  \b  - leading word boundary 
  !:18|19|20)\d{2}\b)  - a negative lookahead that restricts the subsequent pattern  \d+  to only match when the no  18 ,  19  or  20  are in the beginning and then followed by exactly two digits  \d{2}  ( note  you can shorten the lookahead to  !:1[89]|20)\d{2}\b)  but a lot of people usually frown upon that as readability suffers) 
  \d+  - 1 or more digits 
  \b  - trailing word boundary 
 

 https://ideone.com/c6BxoW: 

  p = re.compile(r'\b!:18|19|20)\d{2}\b)\d+\b')
test_str = "Stack Overflow is a privately held website, the flagship site of the Stack Exchange Network, 4 5 6 created in 2008"
print p.sub("", test_str)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54020908)
 You will need  str.replace  with a carefully applied regex pattern: 

  # Thanks to @WiktorStribi≈ºew for the improvement!
df['col2'] = df['col2'].str.replace(r'(?<!\d)\d{4}(?!\d)', '')
df

  col1        col2  col3
0    A   12134 tea     2
1    B    coffee 1     1
2    C  green  tea     4
  

  Regex Breakdown  
The pattern  (?<!\d)\d{4}(?!\d)  will look for exactly 4 digits that are not preceeded by digits before or after (so strings of less/more than 4 digits are left alone). 

  (
    ?<!   # negative lookbehind 
    \d    # any single digit
)
\d{4}     # match exactly 4 digits
(
    ?!    # negative lookahead
    \d
)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25651064)
 Simplify regex 

  In [5]: re.findall(r'\d{6,7}', ' f123456 f1234567 ')
Out[5]: ['123456', '1234567']
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/817271)
 Using  \s  isn't very good, since it doesn't handle tabs, et al. A first cut at a better solution is: 

  re.sub(r"\b\d+\b", "", s)
  

 Note that the pattern is a raw string because  \b  is normally the backspace escape for strings, and we want the special word boundary regex escape instead. A slightly fancier version is: 

  re.sub(r"$\d+\W+|\b\d+\b|\W+\d+$", "", s)
  

 That tries to remove leading/trailing whitespace when there are digits at the beginning/end of the string. I say "tries" because if there are multiple numbers at the end then you still have some spaces. 



