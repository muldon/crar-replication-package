Query: How to count the number of a specific character at the end of a string ignoring duplicates?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42178631)
 You could also use a regexp to count the number of trailing question marks : 

  import re

def count_trailing_question_marks(text):
    last_question_marks = re.compile("\?*$")
    return len(last_question_marks.search(text).group(0))

print count_trailing_question_marks("one? two three??")
# 2
print count_trailing_question_marks("one? two three")
# 0
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42178509)
 There's not a built-in method for it.  But something simple like this should do the trick: 

  >>> len(my_text) - len(my_text.rstrip('?'))
2
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46871617)
 Use https://docs.python.org/3/library/itertools.html#itertools.groupby : 

  >>> from itertools import groupby
>>> l = [k for k,v in groupby(s)]

>>> l
=> ['B', 'F', 'B', 'F', 'B', 'F', 'B', 'F', 'B', 'F', 'B', 'F']

>>> l.count('B')
=> 6
  

  

  IN : s = 'BFFBFBFFFBFBBBFBBBBFF
  

  EDIT :  Also, for more extensive use, its better to use https://docs.python.org/3/library/collections.html#collections.Counter to get  count   for all the characters . 

  >>> from collections import Counter
>>> Counter(l)
=> Counter({'B': 6, 'F': 6})
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1155647)
 
   https://docs.python.org/2/library/stdtypes.html#str.count 
  
   Return the number of non-overlapping occurrences of substring  sub  in the range  [start, end] . Optional arguments  start  and  end  are interpreted as in slice notation. 
 

  >>> sentence = 'Mary had a little lamb'
>>> sentence.count('a')
4
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1483156)
 No regexp is needed, see http://docs.python.org/library/stdtypes.html#str.count: 

 
    str.count(sub[, start[, end]])  
  
   Return the number of non-overlapping occurrences of substring sub in the range [start, end]. Optional arguments start and end are interpreted as in slice notation. 
 

  >>> "A.B.C.D".count(".")
3
>>> "A/B.C/D".count(".")
1
>>> "A/B.C/D".count(".") == 1
True
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43957906)
 Try this, using https://docs.python.org/2/library/itertools.html#itertools.takewhile: 

  import itertools as it

s = 'ffffhuffh'
sum(1 for _ in it.takewhile(lambda c: c == 'f', s))
=> 4
  

 Similarly, for counting the characters at the end: 

  s = 'huffhffff'
sum(1 for _ in it.takewhile(lambda c: c == 'f', reversed(s)))
=> 4
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46871639)
 We can remove consecutive dups and use https://docs.python.org/3.1/library/collections.html#collections.Counter to count the B's that are left: 

  from collections import Counter

def remove_conseq_dups(s):
    res = ""
    for i in range(len(s)-1):
        if s[i] != s[i+1]:
            res+= s[i]
    return res

s = "BFFBFBFFFBFBBBFBBBBFF"
print(Counter(remove_conseq_dups(s))['B']) # 6
  

 And a https://docs.python.org/2/library/itertools.html#itertools.groupby solution: 

  from itertools import groupby

s = "BFFBFBFFFBFBBBFBBBBFF"
print(sum(map(lambda x: 1 if x == 'B' else 0, [x for x, v in groupby(s)])))
  

  

  print(len(list(filter(lambda x: x == 'B', [x for x, v in groupby(s)]))))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43957904)
 You may use  regular expression  with https://docs.python.org/3/library/re.html#re.match to find the occurrence of any character at the start of the string as: 

  >>> import re
>>> my_str = 'ffffhuffh'
>>> my_char = 'f'

>>> len(re.match('{}*'.format(my_char), my_str).group())
4
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21189358)
 Your question is not clear enough, if you are talking about counting a particular character in a string then use, 

 str.count(sub[, start[, end]]) 

 Return the number of non-overlapping occurrences of substring sub in the range [start, end]. Optional arguments start and end are interpreted as in slice notation. 

  word = 'elephant' 
word.count('e') 
#Gives you 2
  



