Query: Python: use regular expression to remove the white space from all lines
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3984592)
 you can try  strip()  if you want to remove front and back, or  lstrip()  if front 

  >>> s="  string with front spaces and back   "
>>> s.strip()
'string with front spaces and back'
>>> s.lstrip()
'string with front spaces and back   '

for line in open("file"):
    print line.lstrip()
  

 If you really want to use regex 

  >>> import re
>>> re.sub("^\s+","",s) # remove the front
'string with front spaces and back   '
>>> re.sub("\s+\Z","",s)
'  string with front spaces and back'  #remove the back
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3984796)
  nowhite = ''.join(mytext.split())
  

 NO whitespace will remain like you asked (everything is put as one word). More useful usualy is to join everything with  ' '  or  '\n'  to keep words separately. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3984615)
 Python's regex module does not default to http://docs.python.org/library/re.html#re.MULTILINE, so you need to specify that flag explicitly. 

  r = re.compile(r"^\s+", re.MULTILINE)
r.sub("", "a\n b\n c") # "a\nb\nc"

# or without compiling (only possible for Python 2.7+ because the flags option
# didn't exist in earlier versions of re.sub)

re.sub(r"^\s+", "", "a\n b\n c", flags = re.MULTILINE)

# but mind that \s includes newlines:
r.sub("", "a\n\n\n\n b\n c") # "a\nb\nc"
  

 It's also possible to include the flag inline to the pattern: 

  re.sub(r"(?m)^\s+", "", "a\n b\n c")
  

 An easier solution is to avoid regular expressions because the original problem is very simple: 

  content = 'a\n b\n\n c'
stripped_content = ''.join(line.lstrip(' \t') for line in content.splitlines(True))
# stripped_content == 'a\nb\n\nc'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53061915)
 I would use regular expressions to solve this problem: 

  import re

def spaces(file_name):
    """Return the number of spaces in the text."""
    with open(file_name, 'r') as f:
        return len(re.findall(r' +', f.read()))
  

 The regular expression  r' +'  will look for one or more consecutive whitespaces. So double whitespaces are only counted as one. Other whitespace characters like  '\t'  are ignored. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3992881)
 @AndiDog acknowledges in his (currently accepted) answer that it munches consecutive newlines. 

 Here's how to fix that deficiency, which is caused by the fact that  \n  is BOTH whitespace and a line separator. What we need to do is make an re class that includes only whitespace characters other than newline. 

 We want  whitespace and not newline , which can't be expressed directly in an re class. Let's rewrite that as  not not (whitespace and not newline)  i.e.  not(not whitespace or not not newline  (thanks, http://en.wikipedia.org/wiki/De_Morgan%27s_laws) i.e.  not(not whitespace or newline)  i.e.  [^\S\n]  in  re  notation. 

  

  >>> re.sub(r"(?m)^[^\S\n]+", "", "  a\n\n   \n\n b\n c\nd  e")
'a\n\n\n\nb\nc\nd  e'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27750852)
 In a regular expression, if you put characters inside square brackets, it means "any one of these characters". So  "[\t ]+"  will match any sequence of tabs and/or spaces. 

  formatted_string = re.sub("[\t ]+", " ", formatted_string)            
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13665195)
 Use this for removing all white space at once: 

  import re

s = ' as fa   sdf sdfsdf '
s = re.sub(r'\s+', '', s)

s
=> 'asfasdfsdfsdf'
  

 The advantage of this approach is that it eliminates all the spaces in-between characters - one, two, no matter how many there are, because the regular expression  r'\s+'  matches "one or more" whitespace characters - including spaces, tabs, etc. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7518194)
 You could use http://docs.python.org/library/stdtypes.html#str.strip to remove leading and trailing whitespaces: 

  In [1]: ' 56.00  '.strip()
Out[1]: '56.00'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23911814)
 Look at https://docs.python.org/2/library/re.html#re.X. It allows comments and ignores white spaces in regex. 

  a = re.compile(r"""\d +  # the integral part
               \.    # the decimal point
               \d *  # some fractional digits""", re.X)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/10974956)
 The  str.split  method will automatically remove all white space between items: 

  >>> str1 = "a    b     c      d"
>>> str1.split()
['a', 'b', 'c', 'd']
  

 Docs are here: http://docs.python.org/library/stdtypes.html#str.split 



