Query: get line count
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/845151)
 As for me this variant will be the fastest: 

  #!/usr/bin/env python

def main():
    f = open('filename')                  
    lines = 0
    buf_size = 1024 * 1024
    read_f = f.read # loop optimization

    buf = read_f(buf_size)
    while buf:
        lines += buf.count('\n')
        buf = read_f(buf_size)

    print lines

if __name__ == '__main__':
    main()
  

 reasons: buffering faster than reading line by line and  string.count  is also very fast 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/5278398)
  count = max(enumerate(open(filename)))[0]  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43179213)
 A one-line bash solution similar to https://stackoverflow.com/a/845069/1397061, using the modern  subprocess.check_output  function: 

  def line_count(file):
    return int(subprocess.check_output('wc -l {}'.format(file), shell=True).split()[0])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46447784)
 As suggested, use  FTP.retrlines , but if you must use  FTP.retrbinary , you will need to count on  only  each "\n", and not with each callback as well. 

  import ftplib

class FTPLineCounter(object):

    def __init__(self):
        self.count = 0

    def __call__(self, file_text):
        """Count the lines as the file is received"""
        self.count += file_text.count(b"\n")



ftp = ftplib.FTP("localhost")
ftp.login()

counter = FTPLineCounter()

ftp.retrbinary("RETR file_name", counter)

print(counter.count)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42627093)
 You can do one thing just create a file that is not having the commented line then run your code Ex. 

  infile = file('./file_with_comment.txt')

newopen = open('./newfile.txt', 'w')
for line in infile :
    li=line.strip()
    if not li.startswith("#"):
        newopen.write(line)

newopen.close()
  

 This will remove every line startswith # then run your function on  newfile.txt  

  def getWordCount(file_name, word):
  count = file_name.read().count(word)
  file_name.seek(0)
  return count
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15735445)
 you said a long line is divided in 2 lines or more,right? 

 you could count lines this way 

  count=0
for a in string.split():
    count+= 1+a//MaxLen
  

 where string is the text you are dealing with, and MaxLen is the maximum number of characters that the textbox can show in a line 

 but this just doesn't solve the problem if you don't know how to get MaxLen,and i actually don't... 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25544973)
 If one wants to get the line count cheaply in Python in Linux, I recommend this method: 

  import os
print os.popen("wc -l file_path").readline().split()[0]
  

 file_path can be both abstract file path or relative path. Hope this may help. 



