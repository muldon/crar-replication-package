Query: Running Python code contained in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26673865)
 The code below will add random letters to a string until the strings contained within  l  are inside your string. 

 It uses https://docs.python.org/3.4/library/string.html#string.ascii_lowercase to get the letters  a-z  and https://docs.python.org/3.4/library/random.html#random.choice to pick a random character from this string for adding to  s . 

 The  while  loop uses https://docs.python.org/3.4/library/functions.html#all to check that all of the sub-strings contained within  l  are inside  s . 

  import random
import string

lower = string.ascii_lowercase # letters a-z

s = 'zyxwvutsr'

l = ['abc', 'def']

# This loop will continue while the string s does not
# contain all of the substrings in l
while not all(i in s for i in l):
    s += random.choice(lower)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13358487)
 You encode valid python source code contained in a string: 

  import base64

source = '''\
print('Hello World!')
print('Not sure why you'd ever do this though..')
'''
code = base64.b64encode(source)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3994078)
 It is one line with regex... 

  import re

indicators = ["therefore", "for", "since"]
phrase = "... therefore, I conclude I am awesome."

indicators_in_phrase = set(re.findall(r'\b(%s)\b' % '|'.join(indicators), phrase.lower()))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8122096)
  

  any(substring in string for substring in substring_list)
  

 It will return  True  if any of the substrings in  substring_list  is contained in  string . 

 Note that there is a Python analogue of https://stackoverflow.com/questions/500925/to-check-if-a-string-contains-an-element-from-a-list-of-strings-is-there-a-b/500930#500930 in the linked question: 

  from itertools import imap
any(imap(s.__contains__, substring_list))
  

 Probably the above version using a generator expression is clearer though. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1015198)
 As others have pointed out, you can load the text into a string and use  exec "codestring" .  If contained in a file already, using http://docs.python.org/library/functions.html#execfile will avoid having to load it. 

 One performance note:  You should avoid execing the code multiple times, as parsing and compiling the python source is a slow process.  .  

  def keydown(self, key):
    exec user_code
  

 You can improve this a little by compiling the source into a code object (with  compile()  and exec that, or better, by constructing a function that you keep around, and only build once.  Either require the user to write "def my_handler(args...)", or prepend it yourself, and do something like: 

  user_source = "def user_func(args):\n" + '\n'.join("    "+line for line in user_source.splitlines())

d={}
exec user_source in d
user_func = d['user_func']
  

  

  if key == K_a:
   user_func(args)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3994110)
 
 Create set of indicators 
 Create set of phrases 
 Find intersection 
 

  Code:  

  indicators = ["therefore", "for", "since"]
phrase = "... therefore, I conclude I am awesome."
print list(set(indicators).intersection(set( [ each.strip('.,') for each in phrase.split(' ')])))
  

  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42251305)
 Running the following experiment the pythonic way: 

  [s + mystring for s in mylist]
  

 seems to be ~35% faster than the obvious use of a for loop like this: 

  i = 0
for s in mylist:
    mylist[i] = s+mystring
    i = i + 1
  

    

  import random
import string
import time

mystring = '/test/'

l = []
ref_list = []

for i in xrange( 10**6 ):
    ref_list.append( ''.join(random.choice(string.ascii_lowercase) for i in range(10)) )

for numOfElements in [5, 10, 15 ]:

    l = ref_list*numOfElements
    print 'Number of elements:', len(l)

    l1 = list( l )
    l2 = list( l )

    # Method A
    start_time = time.time()
    l2 = [s + mystring for s in l2]
    stop_time = time.time()
    dt1 = stop_time - start_time
    del l2
    #~ print "Method A: %s seconds" % (dt1)

    # Method B
    start_time = time.time()
    i = 0
    for s in l1:
        l1[i] = s+mystring
        i = i + 1
    stop_time = time.time()
    dt0 = stop_time - start_time
    del l1
    del l
    #~ print "Method B: %s seconds" % (dt0)

    print 'Method A is %.1f%% faster than Method B' % ((1 - dt1/dt0)*100)
  

    

  Number of elements: 5000000
Method A is 38.4% faster than Method B
Number of elements: 10000000
Method A is 33.8% faster than Method B
Number of elements: 15000000
Method A is 35.5% faster than Method B
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33528253)
 . 

  df = '<option value="85">APOE</option><option value="636">PICALM1<'
reg = '>([A-Z][^<]+)<'
print re.findall(reg,df)
['APOE', 'PICALM1']
  

 Parsing HTML with regular expressions may not be the best idea, have you considered using BeautifulSoup? 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3994052)
 I think what you are trying to do is something more like this: 

  import string

words_in_phrase = string.split(phrase)
  

 Now you'll have the words in a list like this: 

  ['...', 'therefore,', 'I', 'conclude', 'I', 'am', 'awesome.']
  

 Then compare the lists like so: 

  indicators_in_phrase = []
for word in words_in_phrase:
  if word in indicators:
    indicators_in_phrase.append(word)
  

 There's probably several ways to make this less verbose, but I prefer clarity.  Also, you might have to think about removing punctuation as in "awesome." and "therefore," 

 For that use rstrip as in the other answer 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6644092)
 Isn't it still just  find ?  From the http://docs.python.org/release/3.1.3/library/stdtypes.html#typesseq: 

  str.find(sub[, start[, end]])
  

 
   Return the lowest index in the string
  where substring sub is found, such
  that sub is contained in the slice
  s[start:end]. Optional arguments start
  and end are interpreted as in slice
  notation. Return -1 if sub is not
  found. 
 



