Query: Simple URL GET/POST function
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/4476389)
  requests  

<p 

 Here's a few common ways to use it: 

  import requests
url = 'https://...'
payload = {'key1': 'value1', 'key2': 'value2'}

# GET
r = requests.get(url)

# GET with params in URL
r = requests.get(url, params=payload)

# POST with form-encoded data
r = requests.post(url, data=payload)

# POST with JSON 
import json
r = requests.post(url, data=json.dumps(payload))

# Response, status etc
r.text
r.status_code
  

  httplib2  

<p 

  >>> from httplib2 import Http
>>> from urllib import urlencode
>>> h = Http()
>>> data = dict(name="Joe", comment="A test comment")
>>> resp, content = h.request("http://bitworking.org/news/223/Meet-Ares", "POST", urlencode(data))
>>> resp
{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',
 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', 
 'content-type': 'text/html'}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4476392)
 You could use this to wrap urllib2: 

  def URLRequest(url, params, method="GET"):
    if method == "POST":
        return urllib2.Request(url, data=urllib.urlencode(params))
    else:
        return urllib2.Request(url + "?" + urllib.urlencode(params))
  

 That will return a http://docs.python.org/library/urllib2.html#urllib2.Request object that has result data and response codes. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10022497)
 Even easier: via the http://docs.python-requests.org/en/latest/index.html module. 

  import requests
get_response = requests.get(url='http://google.com')
post_data = {'username':'joeb', 'password':'foobar'}
# POST some form-encoded data:
post_response = requests.post(url='http://httpbin.org/post', data=post_data)
  

 To send data that is not form-encoded, send it serialised as a string (example taken from the http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests): 

  import json
post_response = requests.post(url='http://httpbin.org/post', data=json.dumps(post_data))
# If using requests v2.4.2 or later, pass the dict via the json parameter and it will be encoded directly:
post_response = requests.post(url='http://httpbin.org/post', json=post_data)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4476425)
  import urllib

def fetch_thing(url, params, method):
    params = urllib.urlencode(params)
    if method=='POST':
        f = urllib.urlopen(url, params)
    else:
        f = urllib.urlopen(url+'?'+params)
    return (f.read(), f.code)


content, response_code = fetch_thing(
                              'http://google.com/', 
                              {'spam': 1, 'eggs': 2, 'bacon': 0}, 
                              'GET'
                         )
  

 [Update] 

 Some of these answers are old. Today I would use the  requests  module like the answer by robaple. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34853246)
 You gotta add "POST" in the route declaration accepted methods. You've put it in the function. 

  @app.route('/test', methods=['GET', 'POST'])
def test():
    if request.method=='GET':
        return('<form action="/test" method="post"><input type="submit" value="Send" /></form>')

    elif request.method=='POST':
        return "OK this is a post method"
    else:
        return("ok")
  

 See : http://flask.pocoo.org/docs/0.10/quickstart/ 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20279759)
 Your url in ajax request "/page/update/" doesn't match from urls.py.That is why you are getting 404 error page. I will show you my line code you can try this. 

   $.ajax({
    type: "POST",
    url: "/update/"
    data: {
        csrfmiddlewaretoken: '{{ csrf_token }}',
        data : somedata,
    },
    success: function(data) {
        alert(data);
    },
    error: function(xhr, textStatus, errorThrown) {
        alert("Please report this error: "+errorThrown+xhr.status+xhr.responseText);
    }
});
  

 /*'{{ csrf_token }}' is specifically for django*/ 

 This is the views: 

  from django.views.decorators.csrf import csrf_exempt
@csrf_exempt //You can use or not use choice is left to you
def update(request):
    if request.is_ajax():
        message = "Yes, AJAX!"
    else:
        message = "Not Ajax"

    return HttpResponse(message)
  

 This is urls.py 

  urlpatterns = patterns('',
    url(r'^$', views.index, name='index'),
    url(r'^update/$', views.update, name='update'),
)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36846930)
 I had a similar problem, i tried changing params to data  with json.dumps(): 

  from json impt dumps

r = requests.post(url, params=dumps(params), auth=(v_username, v_passwd), data=payload, headers=v_headers, verify=False)
  

   

  r = requests.post(url, data=dumps(params), auth=(v_username, v_passwd), data=payload, headers=v_headers, verify=False)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40117422)
 Use  url_for('index')  to generate the correct url for the action. 

  <form action="{{ url_for('index') }}">
  

 

 Currently, you're submitting to the url without the trailing  / . Flask redirects this to the route with the trailing  / , but POST data doesn't survive redirects on many browsers, so Flask is warning you about the issue. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/8737753)
 The query parameters are not included as part of the route matching, nor are they injected into function arguments. Only the matched URL portions are injected. What you're looking for is  request.args  (GET query parameters),  request.form  (POST) or  request.values  (combined). 

 You could do something like this if you wanted to support both: 

  @app.route('/search/<location>')
def search(location=None):
    location = location or request.args.get('location')
    # perform search
  

 Though, assuming you may want to search on other parameters, probably the best way to do it would be closer to: 

  def _search(location=None,other_param=None):
    # perform search

@app.route('/search')
def search_custom():
    location = request.args.get('location')
    # ... get other params too ...
    return _search(location=location, other params ... )

@app.route('/search/<location>')
def search_location(location):
    return _search(location=location)
  

 . 



