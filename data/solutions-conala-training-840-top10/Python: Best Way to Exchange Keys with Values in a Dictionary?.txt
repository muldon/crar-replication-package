Query: Python: Best Way to Exchange Keys with Values in a Dictionary?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1031878)
 Python 2: 

  res = dict((v,k) for k,v in a.iteritems())
  

 Python 3 (thanks to @erik): 

  res = dict((v,k) for k,v in a.items())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25221360)
 If you're using Python3, it's slightly different: 

  res = dict((v,k) for k,v in a.items())
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1087957)
 From Python 2.7 on, including 3.0+, there's an arguably shorter, more readable version: 

  >>> my_dict = {'x':1, 'y':2, 'z':3}
>>> {v: k for k, v in my_dict.items()}
{1: 'x', 2: 'y', 3: 'z'}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1087723)
  new_dict = dict( (my_dict[k], k) for k in my_dict)
  

 or even better, but only works in Python 3: 

  new_dict = { my_dict[k]: k for k in my_dict}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1031860)
  res = dict(zip(a.values(), a.keys()))  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51349492)
 Can be done easily with dictionary comprehension: 

  {d[i]:i for i in d}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18043402)
 You can make use of http://www.python.org/dev/peps/pep-0274/: 

  res = {v: k for k, v in a.iteritems()}
  

 Edited: For Python 3, use  a.items()  instead of  a.iteritems() . Discussions about the differences between them can be found in https://stackoverflow.com/questions/13998492/iteritems-in-python on SO. 



