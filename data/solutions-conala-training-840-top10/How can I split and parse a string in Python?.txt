Query: How can I split and parse a string in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5749208)
  "2.7.0_bf4fda703454".split("_")  gives a list of strings: 

  In [1]: "2.7.0_bf4fda703454".split("_")
Out[1]: ['2.7.0', 'bf4fda703454']
  

 This splits the string at  every  underscore. If you want it to stop after the first split, use  "2.7.0_bf4fda703454".split("_", 1) . 

 If you know for a fact that the string contains an underscore, you can even unpack the LHS and RHS into separate variables: 

  In [8]: lhs, rhs = "2.7.0_bf4fda703454".split("_", 1)

In [9]: lhs
Out[9]: '2.7.0'

In [10]: rhs
Out[10]: 'bf4fda703454'
  

 An alternative is to use http://docs.python.org/library/stdtypes.html#str.partition. The usage is similar to the last example, except that it returns three components instead of two. The principal advantage is that this method doesn't fail if the string doesn't contain the separator. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1697776)
 Use the http://docs.python.org/library/shlex.html to split the input first. 

  >>> import shlex
>>> shlex.split(raw_input())
this is "a test" of shlex
['this', 'is', 'a test', 'of', 'shlex']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10916640)
 Use  str.split : 

  numbers = "19 01 23 75 03 34".split()
  

 If you also want to parse them to integers you can use  map  and  int : 

  numbers = map(int, "19 01 23 75 03 34".split())
  

 See it working online: http://ideone.com/vOONu 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5749278)
 If it's always going to be an even LHS/RHS split, you can also use the  partition  method that's built into strings. It returns a 3-tuple as  (LHS, separator, RHS)  if the separator is found, and  (original_string, '', '')  if the separator wasn't present: 

  >>> "2.7.0_bf4fda703454".partition('_')
('2.7.0', '_', 'bf4fda703454')

>>> "shazam".partition("_")
('shazam', '', '')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/16595356)
  

  import os
path = os.path.normpath(path)
path.split(os.sep)
  

 First normalize the path string into a proper string for the OS. Then  os.sep  must be safe to use as a delimiter in string function split. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20029109)
 You can split at every non alphabetic characters 

  re.split("[^a-zA-Z]+",input)
  

 Though am assuming that your  $string  contain only alphabets.. 

 

 You can remove empty results with http://docs.python.org/2/library/functions.html#filter 

  filter(None, str_list)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52193633)
 You can use  re.split  with  ast.literal_eval : 

  import re, ast
result = [ast.literal_eval(i) for i in re.split('(?<=\))\s(?=\()', "(2,3) (3, 4) ( 5, 4)")]
  

 Output: 

  [(2, 3), (3, 4), (5, 4)]
  

 Note that  ast.literal_eval  is much more secure that the builtin  eval , as  ast.literal_eval  does not blindly evaluate whatever is passed to it, and instead checks if the input is a valid Python datatype. 

 However, the above will not work if the tuples in string form are not separated by a space i.e  "(2,3)(3, 4)(5, 6)" . In that case, you can create a small parser: 

  class Parse:
  def __init__(self, _input, _start=''):
    self.data, self.group, self.content = _input, _start, []
    self.parse()
  def __iter__(self):
    yield from map(ast.literal_eval, self.content)
  def parse(self):
    _val = next(self.data, None)
    if _val is not None:
       if _val == '(':
         r = Parse(self.data, _start="(")
         self.content.extend(r.content)
         self.data = r.data
       elif _val == ')':
         self.content.append(self.group+')')
       else:
         self.group += _val
       self.parse()

final_result = list(Parse(iter("(2,3)(3, 4)(5, 6)")))
  

 Output: 

  [(2, 3), (3, 4), (5, 6)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24971624)
 Use https://docs.python.org/2/library/urlparse.html#urlparse.parse_qs (https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs in Python 3.x) to parse query string: 

  >>> import urlparse
>>> a = "sequence=1,2,3,4&counter=3,4,5,6"
>>> {key: [int(x) for x in value[0].split(',')]
...  for key, value in urlparse.parse_qs(a).items()}
{'counter': [3, 4, 5, 6], 'sequence': [1, 2, 3, 4]}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20749146)
 You could parse a string of that format using http://pyparsing.wikispaces.com: 

  import pyparsing as pp
import datetime as dt

st='Place,08/09/2010,"15,531","2,909",650'

def line_grammar():
    integer=pp.Word(pp.nums).setParseAction(lambda s,l,t: [int(t[0])])
    sep=pp.Suppress('/')
    date=(integer+sep+integer+sep+integer).setParseAction(
              lambda s,l,t: dt.date(t[2],t[1],t[0]))
    comma=pp.Suppress(',')
    quoted=pp.Regex(r'("|\').*?\1').setParseAction(
              lambda s,l,t: [int(e) for e in t[0].strip('\'"').split(',')])
    line=pp.Word(pp.alphas)+comma+date+comma+quoted+comma+quoted+comma+integer
    return line

line=line_grammar()
print(line.parseString(st))
# ['Place', datetime.date(2010, 9, 8), 15, 531, 2, 909, 650]
  

 The advantage is you parse, convert, and validate in a few lines. Note that the ints are all converted to ints and the date to a datetime structure.   


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/3227990)
 Let assume you have have a file  filedata.txt  with content: 

  d:\stuff\morestuff\furtherdown\THEFILE.txt
d:\otherstuff\something\otherfile.txt
  

 You can read and split the file paths: 

  >>> for i in open("filedata.txt").readlines():
...     print i.strip().split("\\")
... 
['d:', 'stuff', 'morestuff', 'furtherdown', 'THEFILE.txt']
['d:', 'otherstuff', 'something', 'otherfile.txt']
  



