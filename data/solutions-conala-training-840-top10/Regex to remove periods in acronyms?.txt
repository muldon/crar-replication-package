Query: Regex to remove periods in acronyms?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/40197005)
  

  >>> re.sub(r'(?<!([A-Z])\.', r'\1', s)
'The CIA is a department in the US Government.'
  

 Replace single dots that are preceded by an uppercase single letter provided the single letter is not immediately preceded by anything in the  \w  character set.  The later criterion is enforced by the  negative lookbehind assertion  -  (?<! . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9861012)
 Your regex should look like this: 

  re.sub(r'\.[^.]*?\.$', '', someString)
  

 This will ensure that  re.sub  only matches the text between periods at the end of the string. Without the  $ , it will match any set of matching periods in the string.  

  EDIT  

 If you want to capture  everything  between dots:  \...  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15166148)
 You can streamline the code a bit: 

  import re
infilename = 'myfile.fasta'
outfilename = 'myfile_nodots.fasta'
regex = re.compile("[.-]+")    

with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:
    for line in infile:
        outfile.write(regex.sub("", line))
  

 If you also want to remove spaces that follow a dot or a dash, use a different regex: 

  regex = re.compile("[.-]+ *")    
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47734977)
 The  re  regex library is probably the tool for the job. 

 In order to remove every string of consecutive uppercase letters, the following code can be used: 

  import re
mytext = "hello, look an ACRONYM"
mytext = re.sub(r"\b[A-Z]{2,}\b", "", mytext)
  

 Here, the regex  "\b[A-Z]{2,}\b"  searches for multiple consecutive (indicated by  [...]{2,} ) capital letters ( A-Z ), forming a complete word ( \b...\b ). It then replaces them with the second string,  "" . 

 The convenient thing about regex is how easily it can be modified for more complex cases. For example: 

  mytext = re.sub(r"\b[A-Z\.]{2,}\b", "", mytext)
  

 Will replace consecutive uppercase letters and full stops, removing acronyms like A.B.C.D. as well as ABCD. The  \  before the  .    .  otherwise is used by regex as a kind of wildcard. 

 The  ?  specifier could also be used to remove acronyms that end in s, for example: 

  mytext = re.sub(r"\b[A-Z\.]{2,}s?\b", "", mytext)
  

 This regex will remove acronyms like ABCD, A.B.C.D, and even A.B.C.Ds. If other forms of acronym need to be removed, the regex can easily be modified to accommodate them. 

 The  re  library also includes functions like findall, or the match function, which allow for programs to locate and process each acronym individually. This might come in handy if you want to, for example, look at a list of the acronyms being removed and check there are no legitimate words there. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32865879)
 You can split the lines with  \(\d+\)  regex and then join with  .  stripping commas at both ends: 

  for line in file:
    res =".".join(re.split(r'\(\d+\)', line))
    writer.write(res.strip('.'))
  

 See https://ideone.com/0oscFJ 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1280397)
 The following worked for me (with thanks to Bart for his answer): 

  re.sub('\.(?!(\S[^. ])|\d)', '', s)
  

 This will not remove a dot if it is the first character in a word or acronym.  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1280754)
 A non-regex way: 

  >>> S = 'a.b.c. test@test.com http://www.test.com'
>>> ' '.join(w if '@' in w or ':' in w else w.replace('.', '') for w in S.split())
'abc test@test.com http://www.test.com'
  

 (Requires spaces to split on, though - so if you had something like commas with no spaces it could miss some.) 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1279163)
 If your data is always formatted like this then why not split your data into 3 parts by splitting on the space. 

 Then it's pretty trivial to remove the periods from the first element and use join to remerge the parts. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11024304)
 Here is a regex to match any number of spaces, periods, or letters: 

  [ .a-zA-Z]+
  

 Examples: 

  >>> re.search(r'[ .a-zA-Z]+', 'Miami').group(0)
'Miami'
>>> re.search(r'[ .a-zA-Z]+', 'San Francisco').group(0)
'San Francisco'
>>> re.search(r'[ .a-zA-Z]+', 'Chi. Cubs').group(0)
'Chi. Cubs'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/1279162)
 You could simply remove DOTS that don't have two [a-z] letters (or more) ahead of them: 

  \.(?![a-zA-Z]{2})
  

 But that will of course also remove the first DOT from the following address: 

 name.i@foo.bar 

 You could fix that by doing: 

  \.(?![a-zA-Z]{2}|[^\s@]*+@)
  

 but I'm sure there will be many more such corner cases. 



