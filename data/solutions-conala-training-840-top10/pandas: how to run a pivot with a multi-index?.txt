Query: pandas: how to run a pivot with a multi-index?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35415751)
 . 

  >>> df.groupby(['year', 'month', 'item'])['value'].sum().unstack('item')
item        item 1  item 2
year month                
2004 1          33     250
     2          44     224
     3          41     268
     4          29     232
     5          57     252
     6          61     255
     7          28     254
     8          15     229
     9          29     258
     10         49     207
     11         36     254
     12         23     209
  

 Or use  pivot_table : 

  >>> df.pivot_table(
        values='value', 
        index=['year', 'month'], 
        columns='item', 
        aggfunc=np.sum)
item        item 1  item 2
year month                
2004 1          33     250
     2          44     224
     3          41     268
     4          29     232
     5          57     252
     6          61     255
     7          28     254
     8          15     229
     9          29     258
     10         49     207
     11         36     254
     12         23     209
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35416021)
 I believe if you include  item  in your MultiIndex, then you can just unstack: 

  df.set_index(['year', 'month', 'item']).unstack(level=-1)
  

 This yields: 

<pre class="lang-none prettyprint-override">                 value      
item       item 1 item 2
year month              
2004 1         21    277
     2         43    244
     3         12    262
     4         80    201
     5         22    287
     6         52    284
     7         90    249
     8         14    229
     9         52    205
     10        76    207
     11        88    259
     12        90    200
  

 It's a bit faster than using  pivot_table , and about the same speed or slightly slower than using  groupby . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25275353)
 You need to re-index the axis first: 

  >>> idx = pd.MultiIndex.from_tuples(cols)
>>> p_table = p_table.reindex_axis(idx.get_level_values(1), axis=1)
>>> p_table.columns = idx
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38206263)
 You can first http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html and then http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unstack.html: 

  print (df.set_index(['height','Scenario']).stack().unstack(level=1))
Scenario         Scenario a  Scenario b  Scenario c
height                                             
0      Result 1           1           4           7
       Result 2          20          23          26
       Result 3          30          33          36
1      Result 1           2           5           8
       Result 2          21          24          27
       Result 3          31          34          37
2      Result 1           3           6           9
       Result 2          22          25          28
       Result 3          32          35          38
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38653022)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.transform.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop_duplicates.html: 

  df['amount'] = df.groupby(level=0)['amount'].transform(sum)
df = df.reset_index().drop_duplicates(subset=['declared','type','exdiv','paydate'])
print (df)
     declared     type       exdiv     paydate  amount
0  2014-01-31    final  2014-03-03  2014-03-10    3.10
1  2014-06-27  interim  2014-08-11  2014-08-18    1.55
2  2015-01-30    final  2015-03-02  2015-03-09    3.10
4  2015-06-26  interim  2015-08-07  2015-08-17    1.80
5  2016-01-29    final  2016-02-29  2016-03-07    3.45
  

 Or add http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html and  aggfunc=sum  to http://pandas.pydata.org/pandas-docs/stable/generated/pandas.pivot_table.html: 

  x=pd.pivot_table(df.reset_index(), 
                 values='amount', 
                 index=['declared','exdiv','paydate','type'], 
                 aggfunc=sum).reset_index()
print (x)
     declared       exdiv     paydate     type  amount
0  2014-01-31  2014-03-03  2014-03-10    final    3.10
1  2014-06-27  2014-08-11  2014-08-18  interim    1.55
2  2015-01-30  2015-03-02  2015-03-09    final    3.10
3  2015-06-26  2015-08-07  2015-08-17  interim    1.80
4  2016-01-29  2016-02-29  2016-03-07    final    3.45
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45633447)
 You can use tuples for select values in  MultiIndex  in columns: 

  tups = [('GrossRevenue_GBP', '<lambda>'),  ('GrossRevenue_GBP', 'sum'),  ('% Rev', 'sum'),  ('MOVC_GBP', '<lambda>'),  ('PM_GBP', '<lambda>'),  ('Country', ''),  ('product_cat', '')]
idx = list('ab')
cols = pd.MultiIndex.from_tuples(tups)
pivot = pd.DataFrame([[7,4,5,8,4,5,1],
                   [1,5,7,3,9,6,7]], columns=cols, index=idx)
print (pivot)
  GrossRevenue_GBP     % Rev MOVC_GBP   PM_GBP Country product_cat
          <lambda> sum   sum <lambda> <lambda>                    
a                7   4     5        8        4       5           1
b                1   5     7        3        9       6           7
  

 

  pivot['% PM'] = pivot[('PM_GBP','<lambda>')]/pivot[('GrossRevenue_GBP','<lambda>')]
print (pivot)
  GrossRevenue_GBP     % Rev MOVC_GBP   PM_GBP Country product_cat      % PM
          <lambda> sum   sum <lambda> <lambda>                              
a                7   4     5        8        4       5           1  0.571429
b                1   5     7        3        9       6           7  9.000000
  

 For simplier life is possible remove  MultiIndex  and create columns: 

  #rename columns by dict
pivot = pivot.rename(columns={'<lambda>':'tmean'})
#remove multiindex
pivot.columns = pivot.columns.map('_'.join).str.strip('_')

#simply divide
pivot['% PM'] = pivot['PM_GBP_tmean']/pivot['GrossRevenue_GBP_tmean']
print (pivot)
   GrossRevenue_GBP_tmean  GrossRevenue_GBP_sum  % Rev_sum  MOVC_GBP_tmean  \
a                       7                     4          5               8   
b                       1                     5          7               3   

   PM_GBP_tmean  Country  product_cat      % PM  
a             4        5            1  0.571429  
b             9        6            7  9.000000  
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50776391)
 Use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.stack.html and http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unstack.html: 

  df = (df.set_index(['company','product'])
       .stack()
       .unstack(axis=1)
       .rename_axis([None, None])
       .rename_axis(None, axis=1))
print (df)
                   E-comm    OS  Search  Social Media
Amazon    count       3.0   NaN     NaN           NaN
          average     2.4   NaN     NaN           NaN
Facebook  count       NaN   NaN     NaN          23.0
          average     NaN   NaN     NaN           3.2
Google    count       NaN  54.0     7.0           NaN
          average     NaN   4.4     3.4           NaN
Microsoft count      19.0   5.0     NaN           NaN
          average     5.2   1.2     NaN           NaN
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49661176)
 You need  pivot_table  for multi-columns pivot: 

  df.pivot_table(
    index=['store_id'], 
    columns=['product', 'sale_ind'], 
    values=['total_sold', 'percentage_sold']
)
  

 https://i.stack.imgur.com/oIqH6.png 

 Or in your case, there's no aggregation involved while pivoting, you can use  set_index  and  unstack : 

  df.set_index(['store_id', 'product', 'sale_ind']).unstack(['product', 'sale_ind'])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48309834)
 This is just a simple pivot table, is it not? 

  df.pivot_table(index=['account', 'pseudo'], columns='week', values='sales')

week               2017-12-16  2017-12-23  2017-12-30
account    pseudo                                    
4430012511 6362          5.58         NaN         NaN
           31527          NaN         NaN        2.79
           31608          NaN       19.53         NaN
           145584        8.37         NaN         NaN
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/53123250)
 Use  pivot_table : 

  df = df.pivot_table(index=['dir', 'hour'], columns='board_sign', values='pass').reset_index()
del df.columns.name

df
    dir hour    d   u
0   1     5   294   342
1   1     6   1368  1268
2   1     7   3880  3817
  



