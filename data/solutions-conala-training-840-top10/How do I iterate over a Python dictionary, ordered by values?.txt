Query: How do I iterate over a Python dictionary, ordered by values?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17887564)
 You can use an http://docs.python.org/2/library/collections.html#ordereddict-objects. Sure, this will require that you import a class from the  collections  module, but bear in mind - the "normal" dictionary doesn't maintain the order of its entries: 

 
   Ordered dictionaries are just like regular dictionaries but they remember the order that items were inserted. When iterating over an ordered dictionary, the items are returned in the order their keys were first added. 
 

 For example, here's a dictionary using sorted keys for insertion order, meaning: if you iterate over it, the entries will appear sorted by the key: 

  from collections import OrderedDict
dictionary = { 24249:'t', 390395:'b', 90395:'q', 5939:'z', 1:'k', 3909:'a' }

OrderedDict(sorted(dictionary.items(), key=lambda x: x[0]))

=> OrderedDict([(1, 'k'), (3909, 'a'), (5939, 'z'),
                (24249, 't'), (90395, 'q'), (390395, 'b')])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10083593)
 You can use  .keys() : 

  for key in your_dict.keys():
  print key
  

 or just iterate over the dictionary: 

  for key in your_dict:
  print key
  

 Do note that dictionaries aren't ordered. Your resulting keys will come out in a somewhat random order: 

  ['Wonderland', 'ALice', 'in']
  

 

 If you care about order, a solution would be to use lists, which  are  ordered: 

  sort_of_dict = [('ALice', 1), ('in', 2), ('Wonderland', 3)]

for key, value in sort_of_dict:
  print key
  

 Now you get your desired results: 

  >>> sort_of_dict = [('ALice', 1), ('in', 2), ('Wonderland', 3)]
>>> 
>>> for key, value in sort_of_dict:
...   print key
... 
ALice
in
Wonderland
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22664202)
  OrderedDicts  are ordered by http://docs.python.org/2/library/collections.html#ordereddict-objects. So you would have to construct a new OrderedDict by looping over the  key:value  pairs in the original object. There is no  OrderedDict  method that will help you. 

 So you could create a  tuple  to represent the idea order of the  keys , and then iterate over that to create a new  OrderedDict . 

  key_order = ('animal', 'people', 'food', 'drink')
new_queue = OrderedDict()
for k in key_order:
    new_queue[key] = queue[key]
  

  

  OrderedDict((k, queue[k]) for k in key_order)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/674551)
 The  items  method gives you a list of (key,value) tuples, which can be sorted using  sorted  and a custom sort key: 

  Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13) 

>>> a={ 'a': 6, 'b': 1, 'c': 2 }
>>> sorted(a.items(), key=lambda (key,value): value)
[('b', 1), ('c', 2), ('a', 6)]
  

 In Python 3, the lambda expression will have to be changed to  lambda x: x[1] . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18405632)
  

  mydict = {'Rust': {'definition':'rusts definition'},
          'Iron': {'definition':'iron definition'},
          'Pyrite': {'definition':'pyrite definition'}}

myorder = ['Pyrite', 'Rust', 'Iron']

from collections import OrderedDict

ordered = OrderedDict()
for k in myorder:
    ordered[k] = mydict[k]
  

 Or even shorter: 

  ordered = OrderedDict((k, mydict[k]) for k in myorder)
  

 Using the above snippet,  ordered  will contain the same keys/values as  mydict , but they'll be inserted in the same order specified by  myorder . That's the advantage of  OrderedDict : when iterating over it, it'll preserve the insertion order. 

 There's no way to sort the existing dictionary in-place (well, you  could  extract all the key-value pairs, eliminate them and add them again in the correct order, but that's not the idea, is it?), it's necessary to create a new one ... or simply iterate over the existing dictionary in the specified order: 

  for k in myorder:
    x = mydict[k] # do something with x
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/674522)
  sorted(dictionary.items(), key=lambda x: x[1])
  

  

  import operator
sorted(dictionary.items(), key=operator.itemgetter(1))
  

 However  operator  version requires CPython 2.5+ 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16705805)
 If all you want to do is iterate through a dictionary in order of the keys, you can use a regular dictionary and  sorted() : 

  >>> d = dict(s=5,g=4,a=6,j=10)
>>> d
{'g': 4, 's': 5, 'j': 10, 'a': 6}
>>> for k in sorted(d):
        print(k, ':', d[k])


a : 6
g : 4
j : 10
s : 5
>>> 
  

 (pardon the python3  print() ) 

 If you really want to stick with the ordered dict, then read the http://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes which shows an example of reordering an  OrderedDict : 

  >>> # regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

>>> # dictionary sorted by key
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])
  

 If you  really  entered them into an  OrderedDict  alphabetically in the first place, then I'm not sure why you're having trouble. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40954831)
 Alright, I'm going to answer my own question here.  A couple of people were kind enough to offer suggestions in the comments.  As suggested, I was working on accomplishing this with Pandas.  As I was doing so, however, it occurred to me that I could do this without having to learn the ins and outs of the Pandas module.   

  import csv

keys, values = [], []

for key, value in myOrderedDict.items():
    keys.append(key)
    values.append(value)       

with open("frequencies.csv", "w") as outfile:
    csvwriter = csv.writer(outfile)
    csvwriter.writerow(keys)
    csvwriter.writerow(values)
  

 So here's what's going on here: 

 
  Create two empty lists corresponding to the keys and values in my ordered dictionary  
  Iterate over the key/value pairs in my ordered dictionary, appending each pair to its respective list.  Because lists in Python retain their order, this ensures that items of corresponding indices in either list belong together  
  Write the keys to the first row of my CSV, and the values to the second  
 

 I'm sure there are more elegant ways to do this, but this is is sufficient for my purposes. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16705619)
 The whole point of an  OrderedDict  is that you can iterate through it normally in the order that keys were entered: 

  >>> from collections import OrderedDict
>>> d = OrderedDict()
>>> d[1] = 2
>>> d[0] = 3
>>> d[9] = 2
>>> for k, v in d.items():
        print(k, v)


(1, 2)
(0, 3)
(9, 2)
  

 Just make sure you don't feed  OrderedDict(...)  a dictionary to initialize it or it starts off unordered. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35836080)
  >>> d = {'a': [1, 2], 'b': [4, 5], 'c': [7, 8]}
  

 You can access the key, value pairs using https://docs.python.org/2/library/stdtypes.html#dict.items. 

  >>> list(d.items())
[('a', [1, 2]), ('c', [7, 8]), ('b', [4, 5])]
  

 Then you can iterate over the pairs and iterate over the list values: 

  >>> [(key, value) for (key, values) in d.items()
...  for value in values]
[('a', 1), ('a', 2), ('c', 7), ('c', 8), ('b', 4), ('b', 5)]
  

 The dictionary keys are not ordered alphabetically. If you want the exact output in your question you need to sort them, either before creating your list or after: 

  >>> pairs = _
>>> sorted(pairs)
[('a', 1), ('a', 2), ('b', 4), ('b', 5), ('c', 7), ('c', 8)]
  



