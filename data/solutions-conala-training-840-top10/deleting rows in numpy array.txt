Query: deleting rows in numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46825701)
  import numpy as np

a= np.matrix([[9,9,0,9,9],
    [1,2,1,9,9],
    [8,8,0,2,3],
    [7,7,0,7,8],
    [1,2,0,3,4],
    [6,6,3,6,6],
    [1,2,0,1,2]])

for i in range(0,7):
    if a[i,2]>=2:
        idx=i
        k=a[i,2]

idxL=[]

for j in range(0,k):
    idxL.insert(j,idx)
    idx=idx-1
a = np.delete(a, (idxL), axis=0)        
print a
  

 OUTPUT: 

  [[9 9 0 9 9]

 [1 2 1 9 9]

 [8 8 0 2 3]

 [1 2 0 1 2]]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29864596)
 There is no need to modify your original array by deleting rows/columns, in order to count the number of non zero elements. Simply use indexing, 

  a = np.array([[0,1,1,0],[1,1,1,1],[1,1,1,1],[0,1,1,0]])
irows, icols = np.indices(a.shape)
mask = (irows!=2)&(irows!=3)&(icols!=2)&(icols!=3)
np.count_nonzero(a[mask])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29864626)
 Instead of deleting the columns and rows you don't want, it is easier to select the ones you do want. Also note that it is standard to start counting rows and columns from zeros. To get your first example, you thus want to select all elements in rows 0 and 3 and in rows 0 and 3. This requires http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing, for which you can use the http://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html#numpy.ix_: 

  In [25]: np.count_nonzero(a[np.ix_([0,3], [0,3])])  
Out[25]: 0
  

 For your second example, you want to select rows 0 and 1 and columns 0 and 1, which can be done using http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing-and-indexing: 

  In [26]: np.count_nonzero(a[:2,:2])
Out[26]: 3
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11663150)
 The simplest way to delete rows and columns from arrays is the  numpy.delete  method. 

 Suppose I have the following array  x : 

  x = array([[1,2,3],
        [4,5,6],
        [7,8,9]])
  

 To delete the first row, do this: 

  x = numpy.delete(x, (0), axis=0)
  

 To delete the third column, do this: 

  x = numpy.delete(x,(2), axis=1)
  

 So you could find the indices of the rows which have a 0 in them, put them in a list or a tuple and pass this as the second argument of the function. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47819418)
  (Inspired from one of my https://stackoverflow.com/a/47808028/2956066 ) 

  In [100]: mask = ~(test == 'a')

In [101]: mask
Out[101]: 
array([[ True,  True, False],
       [ True,  True,  True],
       [ True, False,  True],
       [ True,  True,  True]], dtype=bool)

In [102]: test[np.all(mask, axis=1), :]
Out[102]: 
array([['4', '5', '6'],
       ['10', '11', '12']],
      dtype='<U21')
  

 But, please note that here we're  not   deleting  any rows from the original array. We're just slicing out the rows which doesn't have the alphabet  a . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3877578)
 This is similar to your original approach, and will use less space than https://stackoverflow.com/questions/3877491/deleting-rows-in-numpy-array/3877542#3877542, but I suspect it will be slower. 

  >>> import numpy as np
>>> p = np.array([[1.5, 0], [1.4,1.5], [1.6, 0], [1.7, 1.8]])
>>> p
array([[ 1.5,  0. ],
       [ 1.4,  1.5],
       [ 1.6,  0. ],
       [ 1.7,  1.8]])
>>> nz = (p == 0).sum(1)
>>> q = p[nz == 0, :]
>>> q
array([[ 1.4,  1.5],
       [ 1.7,  1.8]])
  

 By the way, your line  p.delete()  doesn't work for me -  ndarray s don't have a  .delete  attribute. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27403267)
 This can be achieved efficiently in Numpy by combining  lexsort  and  unique  as follows 

  import numpy as np

a = np.array([[0, 1, 1.2, 3], 
              [1, 5, 3.2, 4],
              [3, 4, 2.8, 4], 
              [2, 6, 2.3, 5]])

# Sort by last column and 3rd column when values are equal
j = np.lexsort(a.T)

# Find first occurrence (=smallest 3rd column) of unique values in last column
k = np.unique(a[j, -1], return_index=True)[1]

print(a[j[k]])
  

 This returns the desired result 

  [[ 0.   1.   1.2  3. ]
 [ 3.   4.   2.8  4. ]
 [ 2.   6.   2.3  5. ]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49839162)
 Is this what you want, or did I misunderstand your problem ? 

  import numpy as np

ref = np.array([1,0,3,4,0,6,7,8,9]).reshape(3,3) # reflectivity
lat = np.arange(9).reshape(3,3)                  # latitude
print("ref =\n", ref)
print("lat =\n", lat)
ref2 = ref[np.nonzero(ref)] # keep only non-zero
lat2 = lat[np.nonzero(ref)] # keep the items where 'ref' is non-zero
print("ref2 =", ref2)
print("lat2 =", lat2)
  

  

  ref =
 [[1 0 3]
  [4 0 6]
  [7 8 9]]
lat =
 [[0 1 2]
  [3 4 5]
  [6 7 8]]
ref2 = [1 3 4 6 7 8 9]
lat2 = [0 2 3 5 6 7 8]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53111674)
 You should aim to avoid  for  loops with NumPy when vectorised operations are available. Here, for example, you can use Boolean indexing: 

  import numpy as np

np.random.seed(0)

A = np.random.randint(0, 2, (10, 3))

res = A[(A != 0).sum(1) > 1]

array([[0, 1, 1],
       [0, 1, 1],
       [1, 1, 1],
       [1, 1, 0],
       [1, 1, 0],
       [0, 1, 1],
       [1, 1, 0]])
  

 The same logic can be applied for each array within your list of arrays. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35233857)
 Because you are generating random integers  with replacement ,  randvals  will almost certainly contain repeat indices. 

 Indexing with repeated indices will return the same row multiple times, so  matrix[randvals, :]  is guaranteed to give you an output with exactly 50 rows, regardless of whether some of them are repeated. 

 In contrast,  np.delete(matrix, randvals, 0)  will only remove  unique  row indices, so it will reduce the number of rows only by the number of unique values in  randvals . 

  

  print(np.unique(randvals).shape[0] == matrix_rows - test.shape[0])
# True
  

 To generate a vector of  unique  random indices between 0 and  1 -  matrix_rows , you could use http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.choice.html with  replace=False : 

  uidx = np.random.choice(matrix_rows, size=50, replace=False)
  

 Then  matrix[uidx].shape[0] + np.delete(matrix, uidx, 0).shape[0] == matrix_rows . 



