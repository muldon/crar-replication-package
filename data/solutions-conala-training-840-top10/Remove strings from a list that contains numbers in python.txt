Query: Remove strings from a list that contains numbers in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16139909)
  [[int(y) for y in x[0].split(',')] for x in lst]
  

 On python 2.x, you could use: 

  [map(int,x[0].split(',')) for x in lst]
  

 And in some ways, having inner list of the strings is inconvenient.  You could use  chain  to remove them: 

  from itertools import chain
[[int(y) for y in x.split(',')] for x in chain.from_iterable(lst)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40067970)
 You could convert the numbers to sets of characters: 

  >>> values = [1, 32, 523, 336, 13525]
>>> number = 23
>>> [value for value in values
...  if set(str(number)).isdisjoint(set(str(value)))]
[1]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16084717)
 I find using http://docs.python.org/3.3/library/stdtypes.html#str.isalpha the most elegant, but it will also remove items that contain other non-alphabetic characters: 

 
   Return true if all characters in the string are alphabetic and there is at least one character, false otherwise. Alphabetic characters are those characters defined in the Unicode character database as “Letter” 
 

  my_list = [item for item in my_list if item.isalpha()]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22472276)
 To remove punctuation, spaces, numbers from the beginning of each string in a list of strings: 

  import string

chars = string.punctuation + string.whitespace + string.digits    
a[:] = [s.lstrip(chars) for s in a]
  

 Note: it doesn't take into account non-ascii punctuation, whitespace, or digits. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4371272)
 To make a new list: 

  [re.sub(r'[^A-Za-z0-9]+', '', x) for x in list_of_strings]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27054510)
 You can use  str.split  and  set  

  >>> s = "15-105;ZH0311;TZZGJJ; ZH0311; ZH0311;DOC"
>>> ';'.join(s.split(";"))
'15-105;ZH0311;TZZGJJ; ZH0311; ZH0311;DOC'
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16127890)
 One way: 

  a = [ (2.3, 2.3123), (231.21, 332.12) ]
p = list()
for b in a:
    k = list()
    for c in b:
        k.append("{0:.2f}".format(c))
    p.append(tuple(k))
print p     
  

 remove inner loop: 

  p = list()
for b in a:
    p.append(tuple("{0:.2f}".format(c) for c in b))
  

 remove outer loop also: 

  p = [ tuple("{0:.2f}".format(c) for c in b) for b in a ]
  

 to print  p : 

  "\n".join([ "\t".join(b) for b in p ])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22985791)
 Use a function and apply to whole column: 

  In [94]:

df = pd.DataFrame({'Movies':['Save the last dance', '2012.0']})
df
Out[94]:
                Movies
0  Save the last dance
1               2012.0

[2 rows x 1 columns]

In [95]:

def trim_fraction(text):
    if '.0' in text:
        return text[:text.rfind('.0')]
    return text

df.Movies = df.Movies.apply(trim_fraction)

In [96]:

df
Out[96]:
                Movies
0  Save the last dance
1                 2012

[2 rows x 1 columns]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38328719)
  Question 2: 
To sum a list of integers: 

  a = [2, 3, 5, 8]
sum(a)
# 18
# or you can do:
sum(i for i in a)
# 18
  

 If the list contains integers as strings: 

  a = ['5', '6']
# import Decimal: from decimal import Decimal
sum(Decimal(i) for i in a)
  



