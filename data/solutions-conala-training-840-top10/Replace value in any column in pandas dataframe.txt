Query: Replace value in any column in pandas dataframe
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42172236)
 Just  replace()  the string: 

  In [10]: df.replace('-', 'NaN')
Out[10]: 
   T2MN   T2MX   RH2M  DFP2M RAIN
0  6.96   9.32  84.27   5.57  NaN
1  6.31  10.46    NaN   5.63  NaN
2   NaN  10.66  79.38   3.63  NaN
3  0.79   4.45  94.24   1.85  NaN
4  1.45   3.99  91.71   1.17  NaN
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53299912)
  

  import pandas as pd
dk=pd.DataFrame({"BrandName":['A','B','ABC','D','AB'],"Specialty":['H','I','J','K','L']})
  

 Now use  DataFrame.replace()  function: 

  dk.BrandName.replace(to_replace=['ABC','AB'],value='A')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51536246)
  

  print(df.replace(0,np.nan).ffill())
  

 Output: 

                A    B    C
2018-07-16  1.0  2.0  2.0
2018-07-17  3.0  2.0  5.0
2018-07-18  3.0  4.0  5.0
2018-07-19  3.0  4.0  5.0
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37506673)
 use  pandas   replace  method: 

  df = pd.DataFrame({'a': [1,2,3,4,0,0,0,0], 'b': [2,3,4,6,0,5,3,8]}) 

df 
   a  b
0  1  2
1  2  3
2  3  4
3  4  6
4  0  0
5  0  5
6  0  3
7  0  8

df['a']=df['a'].replace(0,df['a'].mean())

df
   a  b
0  1  2
1  2  3
2  3  4
3  4  6
4  1  0
5  1  5
6  1  3
7  1  8
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54294058)
   .map  +  .fillna  (if   'id'  is a unique key in  df2 ) 

  df1['city'] = df1.id.map(df2.set_index('id').city_in_mail).fillna(df1.city)

print(df1)
#     id city
#0  4735    x
#1    46    b
#2  2345    d
#3  8768    e
#4   807    f
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42172285)
 I think you want the actual  numpy.nan  instead of a string  NaN  as you can use a lot of methods such as  fillna / isnull / notnull  on the  pandas.Series / pandas.DataFrame  

  import pandas as pd

import numpy as np

df = pd.DataFrame([['-']*10]*10)

df = df.replace('-',np.nan)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37032526)
 Maybe it's not so elegant but...just looping through columns and replace: 

  for i in dfz[['A','B','C','D']].columns:
    dfz[i].replace(1,i,inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46112697)
 This solution will change the existing dataframe itself: 

  mydf = pd.DataFrame({"BrandName":["A", "B", "ABC", "D", "AB"], "Speciality":["H", "I", "J", "K", "L"]})
mydf["BrandName"].replace(["ABC", "AB"], "A", inplace=True)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45328582)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.mask.html with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.notnull.html: 

  df['r1'] = df['r1'].mask(df['r2'].notnull(), df['r2'])
print (df)

   sku   r1   r2
0    1  2.0  NaN
1    4  5.0  NaN
2    7  9.0  9.0
  

 Or http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html: 

  df.loc[df['r2'].notnull(), 'r1'] = df['r2']
print (df)
   sku   r1   r2
0    1  2.0  NaN
1    4  5.0  NaN
2    7  9.0  9.0
  



