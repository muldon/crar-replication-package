Query: How to base64 encode a PDF file in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36228333)
 you should use the base64 module for this 

  import base64
base64.b64encode(f.read())
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/210534)
 If you don't want to use the xmlrpclib's Binary class, you can just use the .encode() method of strings: 

  a = open("pdf_reference.pdf", "rb").read().encode("base64")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/208950)
 You can do it with the http://www.python.org/doc/2.5.2/lib/module-base64.html, legacy interface. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16205776)
 While it may work for Python 2: 

  >>> 'foo'.encode('base64')
'Zm9v\n'
  

 Python 3 doesn't support it: 

  >>> 'foo'.encode('base64')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
LookupError: unknown encoding: base64
  

 And in terms of speed (in Python 2), the  b64encode  method is about three times faster than  .encode() : 

  In [1]: %timeit 'fooasodaspf8ds09f8'.encode('base64')
1000000 loops, best of 3: 1.62 us per loop

In [5]: %timeit b64encode('fooasodaspf8ds09f8')
1000000 loops, best of 3: 564 ns per loop
  

 So in terms of both speed and compatibility, the  base64  module is better. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11511813)
 This is no different than encoding any other file... 

  import base64

with open('input.zip', 'rb') as fin, open('output.zip.b64', 'w') as fout:
    base64.encode(fin, fout)
  

 NB: This avoids reading the file into memory to encode it, so should be more efficient. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/24831693)
 In Python 3.x you need to convert your  str  object to a  bytes  object for  base64  to be able to encode them. You can do that using the  str.encode  method: 

  >>> import json
>>> d = {"alg": "ES256"} 
>>> s = json.dumps(d)  # Turns your json dict into a str
>>> print(s)
{"alg": "ES256"}
>>> type(s)
<class 'str'>
>>> base64.b64encode(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python3.2/base64.py", line 56, in b64encode
    raise TypeError("expected bytes, not %s" % s.__class__.__name__)
TypeError: expected bytes, not str
>>> base64.b64encode(s.encode('utf-8'))
b'eyJhbGciOiAiRVMyNTYifQ=='
  

 If you pass the output of  your_str_object.encode('utf-8')  to the  base64  module, you should be able to encode it fine. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38795804)
 If the string is unicode the easiest way is: 

  import base64                                                        

a = base64.b64encode(bytes(u'complex string: ñáéíóúÑ', "utf-8"))
b = base64.b64decode(a).decode("utf-8", "ignore")                    

print(b)    
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/208960)
 Actually, after some more digging, it looks like the  xmlrpclib  module may have the piece I need with it's  Binary  helper class: 

 
binary_obj = xmlrpclib.Binary( open('foo.pdf').read() )
 

 Here's an example from the http://trac-hacks.org/wiki/XmlRpcPlugin 

  
import xmlrpclib 
server = xmlrpclib.ServerProxy("http://athomas:password@localhost:8080/trunk/login/xmlrpc") 
server.wiki.putAttachment('WikiStart/t.py', xmlrpclib.Binary(open('t.py').read())) 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40454238)
 An alternative to base64: 

  import codecs

codecs.encode(bytes("mystring", 'utf8'), 'base64')
  



