Query: How do I find the first letter of each word?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47509392)
 This works: 

  s = 'Arabidopsis thaliana bologna'

l = s.split()
s2 = l[0][0] + '. ' + ' '.join(l[1:])
print(s2)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29334281)
 You can use the  title  method of  string  class which capitalizes the first letters of every word in a sentence: 

  my_list = ['apple pie', 'orange jam']
print my_list[0].title()
  

 result: 

  Apple Pie
  

 or  capitalize  method which only capitalizes the first letter: 

  my_list = ['apple pie', 'orange jam']
print my_list[0].capitalize()
  

 result: 

  Apple pie
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47509437)
 Use  replace()  : 

  >>> s = 'Arabidopsis thaliana'
>>> s.replace(s.split()[0], s[0])
'A thaliana'
  

 In the rare case, according to mrCarnivore if the first word is occurring multiple times we could use  maxreplace  parameter 

  >>> s = 'Arabidopsis Arabidopsis thaliana'
>>> s.replace(s.split()[0], s[0], 1)
'A Arabidopsis bologna'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/22114733)
 By using the string.find-method, you only get the first occurrence of the character in the word. By defining this method, you get all occurrences: 

  def find_all(word, guess):
    return [i for i, letter in enumerate(word) if letter == guess]
  

 You should also add a "continue" after checking if you've already guessed the letter before, so that you don't add it to the list again. 

 This should work: 

  def find_all(word, guess):
    return [i for i, letter in enumerate(word) if letter == guess]

current = "_" * len(theword)
x = list(current)
print (x)

guessed = []

while current != theword and lives > 0:

    print ("You have %d lives left" % lives)
    guess = input("Please input one letter or type 'exit' to quit.")
    guess = guess.lower()


    if guess == "exit":
        break
    elif guess in guessed:
        print ("You have already guessed this letter, please try again.")
        continue

    guessed.append(guess)

    if guess in theword:
        indices = find_all(theword, guess)
        x = list(current)
        for i in indices:
            x[i] = guess
            current = "".join(x)
            print ("Correct! \nYour guesses: %s" % (guessed))
            print(x)

    else:
        print ("Incorrect, try again")
        lives = lives -1
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29334304)
 You can use  str.capitalize()  to capitalise each string. If you have any other uppercase letters in the string they will be lowered which may or may not be relevant. 

 If you want every letter uppercase use  str.upper()  

  In [26]: "foo bar".capitalize() # first letter 
Out[26]: 'Foo bar'
In [30]: "foo Bar".capitalize() 
Out[30]: 'Foo bar'    
In [27]: "foo".upper() # all letters
Out[27]: 'FOO'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39600776)
 You are returning False as soon as you find a guessed letter that is not in the word. In your example, the very first letter is not in the word. 

 It would work if instead you loop through  Word  and check each letter if it is in the array  letters : 

  def WordGuessed(Word, letters):
    if letters == []:
        return False
    else:
        for i in Word:
            if i not in letters:
                return False
        else:
            if i == Word[-1]:
                return True

# prints True
print(WordGuessed('durian', ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't', 'u']))

# prints False, missing 'u'
print(WordGuessed('durian', ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't']))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/52808135)
 Setup your  vowels  in a string then using  enumerate  once you encounter a character that is in  vowels  you can store its  index  to  slice  your original string     

  s = 'this'
vowels = 'aeiou'

for i, v in enumerate(s):
    if v.lower() in vowels:
        x = i
        break

print(s[x:] + s[:x]) # => isth
  



