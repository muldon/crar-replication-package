Query: How to use Unicode characters in a python string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10268548)
 Unicode escapes only work in unicode strings, so this 

   a="\u2026"
  

 is actually a string of 6 characters: '\', 'u', '2', '0', '2', '6'. 

 To make unicode out of this, use  decode('unicode-escape') : 

  a="\u2026"
print repr(a)
print repr(a.decode('unicode-escape'))

## '\\u2026'
## u'\u2026'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29833547)
  

  >>> s = "<a href = \"http://www.mypage.com/\\u0441andmoretext\">\\u00b2<\\a>"
>>> s.decode("raw_unicode_escape")
u'<a href = "http://www.mypage.com/\u0441andmoretext">\xb2<\\a>'
  

 And then you can encode to utf8 as usual. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16658081)
 Use  \u  escaping in a unicode string literal: 

  >>> print u"\u25B2".encode("utf-8")
▲
  

 Alternatively, if you want to use HTML entities, you can use this answer: https://stackoverflow.com/a/2087433/71522 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40453270)
 On Python 2 you can use  

  >>> '\\a'.decode('string_escape')
'\x07'
  

 Note how  \a  is repr'd as  \x07 . 

 If the string is a unicode string with also extended characters, you need to decode it to a bytestring first, otherwise the default encoding (ascii!) is used to convert the unicode object to a bytestring first. 

 

 However, this codec doesn't exist in Python 3, and things are very much more complicated. You can use the  unicode-escape  to decode but it is very broken if the source string contains unicode characters too: 

  >>> '\aäầ'.encode().decode('unicode_escape')
'\x07Ã¤áº§'
  

 The resulting string doesn't consist of Unicode characters but bytes decoded as latin-1. The solution is to re-encode to latin-1 and then decode as utf8 again: 

  >>> '\\aäầ\u1234'.encode().decode('unicode_escape').encode('latin1').decode()
'\x07äầሴ'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12053219)
  try:
    string.decode('utf-8')
    print "string is UTF-8, length %d bytes" % len(string)
except UnicodeError:
    print "string is not UTF-8"
  

 In Python 2,  str  is a sequence of bytes and  unicode  is a sequence of characters.  You use  str.decode  to decode a byte sequence to  unicode , and  unicode.encode  to encode a sequence of characters to  str .  So for example,  u"é"  is the unicode string containing the single character U+00E9 and can also be written  u"\xe9" ; encoding into UTF-8 gives the byte sequence  "\xc3\xa9" . 

 In Python 3, this is changed;  bytes  is a sequence of bytes and  str  is a sequence of characters. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7258489)
 You can do every string operation, actually in Python 3, all str's are unicode. 

  >>> my_unicode_string = u"abcşiüğ"
>>> my_unicode_string[4]
u'i'
>>> my_unicode_string[3]
u'\u015f'
>>> print(my_unicode_string[3])
ş
>>> my_unicode_string[3:]
u'\u015fi\xfc\u011f'
>>> print(my_unicode_string[3:])
şiüğ
>>> print(my_unicode_string.strip(u"ğ"))
abcşiü
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29805750)
 Python does contain some special string codecs for cases like this. 

 In this case, if there are no other characters outside the 32-127 range, you can safely decode your byte-string using the "unicode_escape" codec to have a proper Unicode text object in Python. 
(On which your program should be performing all textual operations) - 
Whenever you are outputting that text again, you convert it to utf-8 as usual: 

  rawtext = r"""<a href="http://www.mypage.com/\u0441andmoretext">\u00b2<\a>"""
text = rawtext.decode("unicode_escape")
# Text operations go here
...
output_text = text.encode("utf-8")
  

 If there are othe bytes outside the 32-127 range, the unicode_escape codec 
assumes them to be in the latin1 encoding. So if your response mixes utf-8 and these \uXXXX sequences you have to: 

 
 decode the original string using utf-8 
 encode back to latin1 
 decode using "unicode_escape" 
 work on the text 
 encode back to utf-8 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44636884)
 The 'unicode-escape' encoding can show you the codepoints: 

  >>> s = u'統計情報'
>>> print(s.encode('unicode-escape'))
\u7d71\u8a08\u60c5\u5831
  

 But if you want to use those integers directly, it's better to apply  ord : 

  >>> ord(s[0])
32113
>>> 0x7d71
32113
  

 What I've described here works on both Python 2 and Python 3. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1211102)
 You can use encode to ASCII if you don't need to translate the non-ASCII characters: 

  >>> a=u"aaaàçççñññ"
>>> type(a)
<type 'unicode'>
>>> a.encode('ascii','ignore')
'aaa'
>>> a.encode('ascii','replace')
'aaa???????'
>>>
  



