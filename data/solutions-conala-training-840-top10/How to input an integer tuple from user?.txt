Query: How to input an integer tuple from user?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39850683)
 As @vlad-ardelean mentioned you can create a list and by means of "append" comand add its parameter as a single element to the list. However if your given input is going to be a Python list (or any other iterable such as a tuple) you can convert it to a string for display: 

  inputNumbers = input_list()
Buffer= []
Buffer += [('%03X' % ord(x)) for x in inputNumbers]
Vertical_list = []
Vertical_list= '\n'.join(map(str, Buffer))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52556100)
  usr_inpt = input("enter whatever you want to enter: ")
id, value = usr_inpt.split()
output = [(id,value)]
  

 this formats your input into a  tuple  ...but I would not recommend  dictionary , since every key must be unique and if you have multiple entries from the user, you could end up overwriting previously inputted user inputs. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2233945)
 If you still want the user to be prompted twice etc. 

  print 'Enter source'
source = sys.stdin.readline().strip()  #strip removes the \n

print 'Enter target'
target = sys.stdin.readline().strip()

myTuple = tuple([int(source), int(target)])
  

 This is probably less pythonic, but more didactic... 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52556109)
  d={}
user_input=input('input id and number separated by space')# 'id 1'
key_value_split=user_input.split(' ')
d[key_value_split[0]]=key_value_split[1] # for dict
print(d) # {'id': '1'}
  

 For tuple 

  print(d.items()) # [('id', '1')]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2234199)
 Turns out that  int  does a pretty good job of stripping whitespace, so there is no need to use  strip  

  tuple(map(int,raw_input().split(',')))
  

 For example: 

  >>> tuple(map(int,"3,4".split(',')))
(3, 4)
>>> tuple(map(int," 1 , 2 ".split(',')))
(1, 2)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8946161)
  input   eval() 's what you type.  So, when you type  1,2,3 , the result is a  tuple ; when you type  1 , the result is an  int .  Try typing  1,  instead of  1 .  Note that your first line ( mylist=[] ) is unnecessary. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34168892)
 You can use https://docs.python.org/2/library/functions.html#map. 

  myinput = "2 3"
mytuple = tuple(map(int, myinput.split(' ')))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11969034)
  

  elements = []
numberOfPrompts = raw_input("Enter total amount of elements: ")
for i in range(numberOfPrompts):
   # will prompt "Enter Element 1: " on the first iteration
   userInput = raw_input("Enter Element %s" % (i+1, )) 
   elements.append(userInput)
  

 Example case: 

  >>> Enter total amount of elements: 2 # now hit enter
  

 at this point, the value of the variable  numberOfPrompts  will be  2 .
The value of the variable  elements  will be  [] , i.e. it is an empty list 

  >>> Enter Element 1: 3.1415 # hit enter
  

  numberOfPrompts  stays  2 ,
 elements  will be  ['3.1415']  

  >>> Enter Element 2: 2.7182
  

  elements  will be  ['3.1415', '2.7182']  

 Now the for-loop is done and you got your user inputs conveniently in the 0-indexed list  elements , which you access like a tuple ( array ): 

  >>> elements[1]
2.7182
  

 

 Edit: 

 After reading your comment I noticed what you intend to do and, just like the other answer stated, it would be best to use a dictionary for this. This should work: 

  elements = {}
numberOfPrompts = raw_input("Enter total amount of elements: ")
for i in range(numberOfPrompts):
   # will prompt "Enter Element 1: " on the first iteration
   userInput = raw_input("Enter Element %s" % (i+1, )) 
   userInput = userInput.lower()
   elements[userInput] = float(elem_data.get(userInput))
  

 now  elements  will look like this: 

  {'oxygen':15.9994, 'hydrogen':1.0079}
  

 you can iterate over all keys like this (to find out, which elements have been entered): 

  for element in elements.keys():
    print element
# output:
oxygen
hydrogen
  

 To get all values (to sum them up, for instance), do something like this: 

  weightSum = 0
for weight in elements.values():
    weightSum += weight
print weightSum
# output:
17,0073
  

 Keep in mind that this example is for python 2.x. For python 3.x you will need to adjust a couple of things. 



