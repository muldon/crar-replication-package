Query: check if a string is a number (float)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26336546)
 Lets say you have digits in string.
str = "100949"
and you would like to check if it has only numbers 

  if str.isdigit():
returns TRUE or FALSE 
  

 http://docs.python.org/2/library/stdtypes.html#str.isdigit 

 otherwise your method works great to find the occurrence of a digit in a string.  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47922717)
  natural : [0, 1, 2 ... ∞] 

 Python 2 

  it_is = unicode(user_input).isnumeric()
  

 Python 3 

  it_is = str(user_input).isnumeric()
  

  integer : [-∞, .., -2, -1, 0, 1, 2, ∞] 

  try:
    int(user_input)
    it_is = True
 except ValueError:
    it_is = False
  

  float : [-∞, .., -2, -1.0...1, -1, -0.0...1, 0, 0.0...1, ..., 1, 1.0...1, 
..., ∞]  

  try:
    float(user_input)
    it_is = True
 except ValueError:
    it_is = False
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15205926)
 You can use Unicode strings, they have a method to do just what you want: 

  >>> s = u"345"
>>> s.isnumeric()
True
  

  

  >>> s = "345"
>>> u = unicode(s)
>>> u.isnumeric()
True
  

<p 

<p 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48729739)
 This answer provides step by step guide having function with examples to find the string is: 

 
  Positive integer  
  Positive/negative - integer/float  
  How to discard "NaN" (not a number) strings while checking for number?  
 

 Check if string is  positive  integer 

 You may use https://docs.python.org/2/library/stdtypes.html#str.isdigit to check whether given string is  positive  integer.  

  

  # For digit
>>> '1'.isdigit()
True
>>> '1'.isalpha()
False
  

 Check for string as positive/negative - integer/float 

  str.isdigit()  returns  False  if the string is a  negative  number or a float number. For example: 

  # returns `False` for float
>>> '123.3'.isdigit()
False
# returns `False` for negative number
>>> '-123'.isdigit()
False
  

 If you want to  also check for the  negative  integers and https://docs.python.org/3/library/functions.html#float , then you may write a custom function to check for it as: 

  def is_number(n):
    try:
        float(n)   # Type-casting the string to `float`.
                   # If string is not a valid `float`, 
                   # it'll raise `ValueError` exception
    except ValueError:
        return False
    return True
  

  

  >>> is_number('123')    # positive integer number
True

>>> is_number('123.4')  # positive float number
True

>>> is_number('-123')   # negative integer number
True

>>> is_number('-123.4') # negative `float` number
True

>>> is_number('abc')    # `False` for "some random" string
False
  

 Discard "NaN" (not a number) strings while checking for number 

 The above functions will return  True  for the "NAN" (Not a number) string because for Python it is valid float representing it is not a number. For example: 

  >>> is_number('NaN')
True
  

 In order to check whether the number is "NaN", you may use https://docs.python.org/2/library/math.html#math.isnan as: 

  >>> import math
>>> nan_num = float('nan')

>>> math.isnan(nan_num)
True
  

 Or if you don't want to import additional library to check this, then you may simply check it via comparing it with itself using  == . Python returns  False  when  nan  float is compared with itself. For example: 

  # `nan_num` variable is taken from above example
>>> nan_num == nan_num
False
  

 Hence, above  function  is_number  can be updated to return  False  for  "NaN"   as: 

  def is_number(n):
    is_number = True
    try:
        num = float(n)
        # check for "nan" floats
        is_number = num == num   # or use `math.isnan(num)`
    except ValueError:
        is_number = False
    return is_number
  

  

  >>> is_number('Nan')   # not a number "Nan" string
False

>>> is_number('nan')   # not a number string "nan" with all lower cased
False

>>> is_number('123')   # positive integer
True

>>> is_number('-123')  # negative integer
True

>>> is_number('-1.12') # negative `float`
True

>>> is_number('abc')   # "some random" string
False
  

   PS: Each operation for each check depending on the type of number comes with additional overhead. Choose the version of  is_number  function which fits your requirement.   


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32453110)
 For  int  use this: 

  >>> "1221323".isdigit()
True
  

 But for  float  we need some tricks ;-). Every float number has one point... 

  >>> "12.34".isdigit()
False
>>> "12.34".replace('.','',1).isdigit()
True
>>> "12.3.4".replace('.','',1).isdigit()
False
  

 Also for negative numbers just add  lstrip() : 

  >>> '-12'.lstrip('-')
'12'
  

 And now we get a universal way: 

  >>> '-12.34'.lstrip('-').replace('.','',1).isdigit()
True
>>> '.-234'.lstrip('-').replace('.','',1).isdigit()
False
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43353127)
 If you specifically need an int or float, you could try "is not int" or "is not float": 

  user_input = ''
while user_input is not int:
    try:
        user_input = int(input('Enter a number: '))
        break
    except ValueError:
        print('Please enter a valid number: ')

print('You entered {}'.format(a))
  

 If you only need to work with ints, then the most elegant solution I've seen is the ". 

  a = ''
while a.isdigit() == False:
    a = input('Enter a number: ')

print('You entered {}'.format(a))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/354073)
 In case you are looking for parsing (positive, unsigned) integers instead of floats, you can use the https://docs.python.org/2/library/stdtypes.html#str.isdigit function for string objects. 

  >>> a = "03523"
>>> a.isdigit()
True
>>> b = "963spam"
>>> b.isdigit()
False
  

 https://docs.python.org/2/library/stdtypes.html#string-methods 

 There's also something on Unicode strings, which I'm not too familiar with
https://docs.python.org/2/library/stdtypes.html#unicode.isnumeric 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6942164)
 You could also extract numbers from a string. 

  import string
extract_digits = lambda x: "".join(char for char in x if char in string.digits + ".")
  

 and then convert them to float. 

  to_float = lambda x: float(x) if x.count(".") <= 1 else None
  

  

  >>> token = "My pants got 2.5 legs"
>>> extract_digits(token)
'2.5'
>>> to_float(_)
2.5
>>> token = "this is not a valid number: 2.5.52"
>>> extract_digits(token)
'2.5.52'
>>> to_float(_)
None
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40097699)
 Check if string is  positive  digit (integer) and alphabet 

 You may use https://docs.python.org/2/library/stdtypes.html#str.isdigit and https://docs.python.org/2/library/stdtypes.html#str.isalpha to check whether given string is  positive  integer and alphabet respectively.  

  

  # For alphabet
>>> 'A'.isdigit()
False
>>> 'A'.isalpha()
True

# For digit
>>> '1'.isdigit()
True
>>> '1'.isalpha()
False
  

 Check for strings as positive/negative - integer/float 

  str.isdigit()  returns  False  if the string is a  negative  number or a float number. For example: 

  # returns `False` for float
>>> '123.3'.isdigit()
False
# returns `False` for negative number
>>> '-123'.isdigit()
False
  

 If you want to  also check for the  negative  integers and https://docs.python.org/3/library/functions.html#float , then you may write a custom function to check for it as: 

  def is_number(n):
    try:
        float(n)   # Type-casting the string to `float`.
                   # If string is not a valid `float`, 
                   # it'll raise `ValueError` exception
    except ValueError:
        return False
    return True
  

  

  >>> is_number('123')    # positive integer number
True

>>> is_number('123.4')  # positive float number
True

>>> is_number('-123')   # negative integer number
True

>>> is_number('-123.4') # negative `float` number
True

>>> is_number('abc')    # `False` for "some random" string
False
  

 Discard "NaN" (not a number) strings while checking for number 

 The above functions will return  True  for the "NAN" (Not a number) string because for Python it is valid float representing it is not a number. For example: 

  >>> is_number('NaN')
True
  

 In order to check whether the number is "NaN", you may use https://docs.python.org/2/library/math.html#math.isnan as: 

  >>> import math
>>> nan_num = float('nan')

>>> math.isnan(nan_num)
True
  

 Or if you don't want to import additional library to check this, then you may simply check it via comparing it with itself using  == . Python returns  False  when  nan  float is compared with itself. For example: 

  # `nan_num` variable is taken from above example
>>> nan_num == nan_num
False
  

 Hence, above  function  is_number  can be updated to return  False  for  "NaN"   as: 

  def is_number(n):
    is_number = True
    try:
        num = float(n)
        # check for "nan" floats
        is_number = num == num   # or use `math.isnan(num)`
    except ValueError:
        is_number = False
    return is_number
  

  

  >>> is_number('Nan')   # not a number "Nan" string
False

>>> is_number('nan')   # not a number string "nan" with all lower cased
False

>>> is_number('123')   # positive integer
True

>>> is_number('-123')  # negative integer
True

>>> is_number('-1.12') # negative `float`
True

>>> is_number('abc')   # "some random" string
False
  

 Allow Complex Number like "1+2j" to be treated as valid number 

 The above function will still return you  False  for the https://docs.python.org/3/library/stdtypes.html#typesnumeric. If you want your   is_number  function to treat  complex numbers  as valid number , then you need to type cast your passed string to https://docs.python.org/3/library/functions.html#complex instead of https://docs.python.org/3/library/functions.html#float. Then your  is_number  function will look like: 

  def is_number(n):
    is_number = True
    try:
        #      v type-casting the number here as `complex`, instead of `float`
        num = complex(n)
        is_number = num == num
    except ValueError:
        is_number = False
    return is_number
  

  

  >>> is_number('1+2j')    # Valid 
True                     #      : complex number 

>>> is_number('1+ 2j')   # Invalid 
False                    #      : string with space in complex number represetantion
                         #        is treated as invalid complex number

>>> is_number('123')     # Valid
True                     #      : positive integer

>>> is_number('-123')    # Valid 
True                     #      : negative integer

>>> is_number('abc')     # Invalid 
False                    #      : some random string, not a valid number

>>> is_number('nan')     # Invalid
False                    #      : not a number "nan" string
  

   PS: Each operation for each check depending on the type of number comes with additional overhead. Choose the version of  is_number  function which fits your requirement.   


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35808536)
  def is_float(string):
  try:
    return float(string) and '.' in string  # True if string is a number contains a dot
  except ValueError:  # String is not a number
    return False
  

 Output: 

  >> is_float('string')
>> False
>> is_float('2')
>> False
>> is_float('2.0')
>> True
>> is_float('2.5')
>> True
  



