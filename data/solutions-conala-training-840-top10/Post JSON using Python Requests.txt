Query: Post JSON using Python Requests
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43776494)
 The better way is： 

  url = "http://xxx.xxxx.xx"

datas = {"cardno":"6248889874650987","systemIdentify":"s08","sourceChannel": 12}

headers = {'Content-type': 'application/json'}

rsp = requests.post(url, json=datas, headers=headers)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30673415)
 If you use the  data  argument instead of the  json  argument, Requests will not know to encode the data as  application/json . You can use  json.dumps  to do that. 

  import json

server_return = requests.post(
    server_ip,
    headers=headers,
    data=json.dumps(event_data)
)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27398215)
 From requests 2.4.2 (https://pypi.python.org/pypi/requests), the "json" parameter is supported. No need to specify "Content-Type".  

  requests.post('http://httpbin.org/post', json={'test': 'cheers'})
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34732058)
 A small bug is causing you the trouble 

  response = requests.post('https://ws.foo.net/search', 
                         json=jsonObject # was json.dumps(jsonObject), 
                         auth=('name', 'password'))
  

 This should work fine 

 See, the request package will convert the python dict to Json (not you ;))  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9952774)
 It turns out I was missing the header information. The following works: 

  url = "http://localhost:8080"
data = {'sender': 'Alice', 'receiver': 'Bob', 'message': 'We did it!'}
headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
r = requests.post(url, data=json.dumps(data), headers=headers)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26344315)
 As of Requests version 2.4.2 and onwards, you can alternatively use 'json' parameter in the call which makes it simpler. 

  >>> import requests
>>> r = requests.post('http://httpbin.org/post', json={"key": "value"})
>>> r.status_code
200
>>> r.json()
{'args': {},
 'data': '{"key": "value"}',
 'files': {},
 'form': {},
 'headers': {'Accept': '*/*',
             'Accept-Encoding': 'gzip, deflate',
             'Connection': 'close',
             'Content-Length': '16',
             'Content-Type': 'application/json',
             'Host': 'httpbin.org',
             'User-Agent': 'python-requests/2.4.3 CPython/3.4.0',
             'X-Request-Id': 'xx-xx-xx'},
 'json': {'key': 'value'},
 'origin': 'x.x.x.x',
 'url': 'http://httpbin.org/post'}
  

 EDIT: This feature has been added to the official documentation. You can view it here: http://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30673376)
 You are not sending JSON data currently.  You need to set the  json  argument, not  data .  It's unnecessary to set  content-type  yourself in this case. 

  r = requests.post(url, json=event_data)
  

 The  text/html  header you are seeing is the  response's  content type.  Flask seems to be sending some HTML back to you, which seems normal.  If you expect  application/json  back, perhaps this is an error page being returned since you weren't sending the JSON data correctly. 

 You can read json data in Flask by using  request.json . 

  from flask import request

@app.route('/events', methods=['POST'])
def events():
    event_data = request.json
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35535240)
 You want to pass in  JSON encoded  data. See the http://dev.wheniwork.com/: 

 
   Remember — All post bodies must be JSON encoded data (no form data). 
 

 The  requests  library makes this trivially easy: 

  headers = {"W-Token": "Ilovemyboss"}
data = [
    {
        'url': '/rest/shifts',
        'params': {'user_id': 0, 'other_stuff': 'value'},
        'method': 'post',
    },
    {
        'url': '/rest/shifts',
        'params': {'user_id': 1,'other_stuff': 'value'},
        'method':'post',
    },
]
requests.post(url, json=data, headers=headers)
  

 By using the  json  keyword argument the data is encoded to JSON for you, and the  Content-Type  header is set to  application/json . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15900453)
  params  is for GET-style URL parameters,  data  is for POST-style body information. It is perfectly legal to provide  both  types of information in a request, and your request does so too, but you encoded the URL parameters into the URL already. 

 Your raw post contains  JSON  data though.  requests  can handle JSON encoding for you, and it'll set the correct  Content-Header  too; all you need to do is pass in the Python object to be encoded as JSON into the  json  keyword argument. 

 You could split out the URL parameters as well: 

  params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}
  

 then post your data with: 

  import requests

url = 'http://192.168.3.45:8080/api/v2/event/log'

data = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}
params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}

requests.post(url, params=params, json=data)
  

 The  json  keyword is new in  requests  version 2.4.2; if you still have to use an older version, encode the JSON manually using the  json  module and post the encoded result as the  data  key; you will have to explicitly set the Content-Type header in that case: 

  import requests
import json

headers = {'content-type': 'application/json'}
url = 'http://192.168.3.45:8080/api/v2/event/log'

data = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}
params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}

requests.post(url, params=params, data=json.dumps(data), headers=headers)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/31231286)
 Unless you set the  Content-Type  header to  application/json  in your request,  Flask will not attempt to decode any JSON found in your request body .  

 Instead,  get_json  will return  None  (which is what you're seeing right now). 

 So, you need to set the  Content-Type  header in your request. 

 Fortunately https://github.com/kennethreitz/requests/commit/8f17741849edb5e7eba0356f90cb17e43c938a2f, requests has a helper argument to post JSON; this will set the proper headers for you. Use: 

  requests.post(url, json=payload)
  

 Alternatively (e.g. using requests < 2.4.2), you can set the header yourself: 

  requests.post(url, data=json.dumps(payload), headers={"Content-Type": "application/json"})
  

 

 Here is the relevant code from Flask: 

 
 Flask https://github.com/mitsuhiko/flask/blob/805692108ae973281d793250ca883cc1412ab08d/flask/wrappers.py#L142-L143 (or if you pass  force=True  to  get_json ). Otherwise, it returns  None . 
 https://github.com/mitsuhiko/flask/blob/805692108ae973281d793250ca883cc1412ab08d/flask/wrappers.py#L118-L123, and looks for  application/json  there. 
 



