Query: Is it possible to wrap the text of xticks in matplotlib in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3464416)
 Perhaps try: 

  ax.set_xticklabels(labels, rotation=45)
  

 Thanks to Amro for pointing out that http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.xticks. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44314980)
 This is a result of your  plt.xticks  call. 

 When  rcParams['text.usetex']  is  True , MPL wraps ticklabels in  $ . For example,  ax.get_xticklabels()[0].get_text()  will give  u'0'  when  usetex  is  False , and  u'$0$'  when  usetex  is  True . 

 However, when you override the default tick-labels, you have to wrap them yourself, otherwise you get the sans-serif font. So, to fix this, I'd change your  plt.xticks  line to something like: 

   plt.xticks(x_list, ['$' + str(xt) + '$' for xt in xt_list])
  

 Here I'm using list comprehensions to loop over the ticklabels. I suppose it might also be possible to change the default sans-serif font family to be the same (serif) font as your serif family, but I think that may not entirely resolve the discrepancy between x- and y-labels since the strings are actually different. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3101288)
 You can manually set xticks (and yticks) using http://matplotlib.sourceforge.net/api/pyplot_api.html?highlight=xticks#matplotlib.pyplot.xticks: 

  import matplotlib.pyplot as plt
import numpy as np

x = np.array([0,1,2,3])
y = np.array([20,21,22,23])
my_xticks = ['John','Arnold','Mavis','Matt']
plt.xticks(x, my_xticks)
plt.plot(x, y)
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5439784)
 You set the count (and values) of the ticks using  set_xticks .  You set the text of the ticks using  set_xticklabels  

  from matplotlib import pyplot as plt
plt.plot([1,2,3],[3,4,3])
ax = plt.gca()
ax.set_xticks([1,2,3])
ax.set_xticklabels(['1/1','1/2','1/3'])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15538600)
 Use  plt.xticks()  instead of  ax.get_xticklabels() : 

  import matplotlib.pyplot as plt

fig, ax = plt.subplots(1)
ax.plot([-1, 0, 1, 2], range(4))
plt.savefig('/tmp/test.png')
loc, labels = plt.xticks()
print(type(loc))
# <type 'numpy.ndarray'>
print(loc)
# [-1.  -0.5  0.   0.5  1.   1.5  2. ]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10998872)
 Try pyplot.setp.  I think you could do something like this: 

  x = range(len(time))
plt.xticks(x,  time)
locs, labels = plt.xticks()
plt.setp(labels, rotation=90)
plt.plot(x, delay)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12921209)
 The  plt.xticks  command can be used to place LaTeX tick marks. See this http://matplotlib.sourceforge.net/users/usetex.html for more details. 

  import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np

cos = np.cos
pi = np.pi

# This is not necessary if `text.usetex : True` is already set in `matplotlibrc`.    
mpl.rc('text', usetex = True)
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
t = np.linspace(0.0, 2*pi, 100)
s = cos(t)
plt.plot(t, s)

plt.xticks([0, pi/2, pi, 3*pi/2, 2*pi],
           ['$0$', r'$\frac{\pi}{2}$', r'$\pi$', r'$\frac{3\pi}{2}$', r'$2\pi$'])
plt.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41599109)
  Sample the first and second arguments of xticks at the desired frequency! 

 The question is a duplicate from https://stackoverflow.com/questions/12608788/changing-the-tick-frequency-on-x-or-y-axis-in-matplotlib 

  import numpy as np
import matplotlib.pyplot as plt

y = np.array([4,4,4,5,5,6,5,5,4,4,4])
x = np.arange(y.shape[0])
my_xticks = np.array(['a','b','c','d','e','f','g','h','i','j','k'])
frequency = 3
plt.plot(x, y)
plt.xticks(x[::frequency], my_xticks[::frequency])
  

 https://i.stack.imgur.com/1Orqqm.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/39996352)
 If there are many close datapoints on y-axis, they overlap. . You can show only one of too close y-ticks. But the rest can be shown on the plot itself (not on y-axis). 

 Something like that can be used: 

  import matplotlib.pyplot as plt

data= [4270424, 4257372, 4100352, 4100356, 4100356]

fig, ax = plt.subplots(figsize=(10,8))

#Collect only those ticks that are distant enough from each other
#in order to get rid of ticks overlapping on y-axis:
yticks = [min(data)]         
for i in sorted(data[0:]):
  if i-yticks[-1] > 3500:      
    yticks.append(i)          
#################################################################

plt.plot(data, 'ko-')
plt.ylabel('Data point', fontsize=12)
plt.xlabel('Iteration point', fontsize=12)
plt.yticks(yticks)

plt.margins(0.05, 0.1) 


#Showing y-ticks right on the plot
offset = -1.45
x = ax.get_xticks()

for xp, yp in zip(x, data):
    label = "%s" % yp
    plt.text(xp-offset, yp+offset, label, fontsize=12, horizontalalignment='right', verticalalignment='bottom')
#################################

ax.grid()
plt.show()
  

  Output: 
https://i.stack.imgur.com/oaFir.jpg 

 You can also switch off displaying  yticks  on y-axis completely. In this case change this line  plt.yticks(yticks)  to this:  plt.yticks(yticks, visible=False) 
In this case you don't need ticks collecting part of code at all. .  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35928553)
 Use  ax.text  for text positions relative to axis positions rather than fig positions: 

  import matplotlib.pyplot as plt
import datetime
import numpy as np 

x = [datetime.datetime(2010, 12, 1, 0, 0),
     datetime.datetime(2011, 1, 1, 0, 0),
     datetime.datetime(2011, 5, 1, 1, 0)]
y = [4, 9, 2]

fig, ax = plt.subplots()
ax.bar(x, y, width = 20, align='center')

counts = np.random.randint(0, 25, len(ax.get_xticks()))

for i, xpos in enumerate(ax.get_xticks()):
    ax.text(xpos,-1, "Below tick\nlabel "+str(i), 
            size = 6, ha = 'center')

    ax.text(xpos, -1.25, "Count: "+str(counts[i]), 
            size = 6, ha = 'center')
  

 https://i.stack.imgur.com/BBIZx.png 



