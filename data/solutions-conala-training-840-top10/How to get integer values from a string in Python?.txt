Query: How to get integer values from a string in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11339230)
  >>> import re
>>> string1 = "498results should get"
>>> int(re.search(r'\d+', string1).group())
498
  

 If there are multiple integers in the string: 

  >>> map(int, re.findall(r'\d+', string1))
[498]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/11673489)
 An answer taken from https://stackoverflow.com/users/81179/christophed here: https://stackoverflow.com/a/2500023/1225603 

  r = "456results string789"
s = ''.join(x for x in r if x.isdigit())
print int(s)
456789
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40662863)
 Here's your one-liner, without using any regular expressions, which can get expensive at times: 

  >>> ''.join(filter(str.isdigit, "1234GAgade5312djdl0"))
  

 returns: 

  '123453120'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37411805)
 if you have multiple sets of numbers then this is another option 

  >>> import re
>>> print(re.findall('\d+', 'xyz123abc456def789'))
['123', '456', '789']
  

 its no good for floating point number strings though. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41959873)
 Since you are having string of  hex  values. You may remove  ' 0x'  from the string to get the single hex number string. For example: 

  my_str =  "0x00 0x01 0x13 0x00"
hex_str = my_str.replace(' 0x', '')
  

 where value hold by  hex_str  will be: 

  '0x00011300'   # `hex` string
  

 Now you may convert  hex  string to  int  as: 

  >>> int(hex_str, 16)
70400
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8706431)
 I don't think you'll get simpler than a format string and then a decode (needs Python 2.6+): 

  >>> "{0:08x}".format(0x31323334).decode('hex')
'1234'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36468194)
 Here's a pretty round-about way of doing it... First interpret the string as an integer (base 2): 

  >>> s = '01000000010000000000000000000000'
>>> i = int(s, 2)
>>> i
1077936128
  

 Now you can get the integer bitwise representation of that integer using  struct.pack : 

  >>> b = struct.pack('i', i)
>>> b
'\x00\x00@@'
  

 And finally, you can  struct.unpack  those bytes as if they were a float: 

  >>> f, = struct.unpack('f', b)
>>> f
3.0
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37609272)
  import re

''.join(re.findall(r'\d+', '82,000,00'))
  

 or another method will be, 

  int(filter(str.isdigit, '82,000,00'))
  



