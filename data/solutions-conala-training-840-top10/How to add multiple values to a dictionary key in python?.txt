Query: How to add multiple values to a dictionary key in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20585946)
  

  a["abc"] = [1, 2]
  

 This will result in: 

  >>> a
{'abc': [1, 2]}
  

  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29831483)
 Yes its possible but you need to use a container for your values. 

 For example you can use a list,also you can use https://docs.python.org/2/library/stdtypes.html#dict.setdefault method for assignment if your keys will have a multiple values, this is useful of you want to add another key with multiple values : 

  >>> d = {}
>>> d.setdefault('Key1',[]).append((1,2))
>>> d
{'Key1': [(1, 2)]}
>>> d['Key1'].append((1, 3))
>>> d
{'Key1': [(1, 2), (1, 3)]}
>>> d.setdefault('Key2',[]).append((4,2))
>>> d
{'Key2': [(4, 2)], 'Key1': [(1, 2), (1, 3)]}
  

 
    setdefault(key[, default])  
  
   If key is in the dictionary, return its value. If not, insert key with a value of default and return default. . 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39197284)
 This is a good use case for https://docs.python.org/3/library/collections.html: 

  from collections import defaultdict
name_num = {
    'Bill': [1, 2, 3, 4],
    'Bob': [3, 4, 2],
    'Mary': [5, 1],
    'Jim': [6, 17, 4],
    'Kim': [21, 54, 35],
}

new_dict = defaultdict(dict)
for name, nums in name_num.items():
    new_dict[len(nums)][name] = nums

print(dict(new_dict))
  

  Output : 

  {
    2: {'Mary': [5, 1]},
    3: {'Bob': [3, 4, 2], 'Jim': [6, 17, 4], 'Kim': [21, 54, 35]},
    4: {'Bill': [1, 2, 3, 4]}
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53874134)
 Make the dict not a dict of dicts, but a dict where a key corresponds to a list of other dicts. 

  d = defaultdict(dict)
d[node] = {'interface': [{'Eth1/48':'10.10.10.1'}]
d[node]['interface'].append({'Eth1/47':'10.10.11.1'})
  

 Dan's comment below was an excellent one.  He pointed out that it makes more sense to have IPs that can correspond to the same key rather than having a list of dicts of Eth*:ip pairs 

  d = defaultdict(dict)
d[node] = {'interface': {'Eth1/47':['10.10.10.1']}
d[node]['interface']['Eth1/48'] = ['10.10.10.1']
  

  

  d[node]['interface']['Eth1/47'].append('new.ip.address.ballin')
d[node]['interface']['Eth1/48'].append('new.ip.address.ballin')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29831518)
 You can't do it directly; in other words, a  dict  can't hold multiple values associated with the same key. You would need to have a  dict  of  list s. 

 If the set of keys isn't known in advance, you might want to use a  defaultdict , which will automatically create a  list  (or whatever) each time you access a key which doesn't already exist in the dictionary. 

  d = collections.defaultdict(list)
  

 To add elements, you would use 

  d['Key1'].append((1, 2))
  

   

  d['Key1'] = (1, 2)
  

 This lets you avoid writing special code to handle the first insertion with a given key. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8381589)
 I feel like consolidating info about Python dictionaries: 

 Creating an empty dictionary</h3>

  data = {}
# OR
data = dict()
  

 Creating a dictionary with initial values</h3>

  data = {'a':1,'b':2,'c':3}
# OR
data = dict(a=1, b=2, c=3)
# OR
data = {k: v for k, v in (('a', 1),('b',2),('c',3))}
  

 Inserting/Updating a single value</h3>

  data['a']=1  # Updates if 'a' exists, else adds 'a'
# OR
data.update({'a':1})
# OR
data.update(dict(a=1))
# OR
data.update(a=1)
  

 Inserting/Updating multiple values</h3>

  data.update({'c':3,'d':4})  # Updates 'c' and adds 'd'
  

 Creating a merged dictionary without modifying originals</h3>

  data3 = {}
data3.update(data)  # Modifies data3, not data
data3.update(data2)  # Modifies data3, not data2
  

 Deleting items in dictionary</h3>

  del data[key]  # Removes specific element in a dictionary
data.pop(key)  # Removes the key & returns the value
data.clear()  # Clears entire dictionary
  

 Check if a key is already in dictionary</h3>

  key in data
  

 Iterate through pairs in a dictionary</h3>

  for key in data: # Iterates just through the keys, ignoring the values
for key, value in d.items(): # Iterates through the pairs
for key in d.keys(): # Iterates just through key, ignoring the values
for value in d.values(): # Iterates just through value, ignoring the keys
  

 Create a dictionary from 2 lists</h3>

  data = dict(zip(list_with_keys, list_with_values))
  

 Feel free to add more! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34539241)
 You can use a https://docs.python.org/2/library/collections.html#collections.defaultdict to accomplish what you need. 

  from collections import defaultdict
my_dict = defaultdict(list)
my_dict[1].append([1,2])
my_dict[1].append([3,4])
my_dict[2].append([8,9])
  

 Now you can access each key element as you would access a  dictionary  

  >>> my_dict[1]
[[1, 2], [3, 4]]


>>> for k, v in my_dict.iteritems():
        print k,v

1 [[1, 2], [3, 4]]
2 [[8, 9]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27531731)
 use a https://docs.python.org/2/library/collections.html#collections.defaultdict appending the values to a list: 

  from collections  import defaultdict

audio = defaultdict(list)

if elementTree.find('./connections') is None:
    return
else:
    for connection_element in elementTree.findall('.//connections/connection'):
        # Get the type for this connection.
        controlType = connection_element.find('type')
        # Get the id for this connection.
        connectionID = connection_element.find('id')
        if controlType is not None and str(controlType.text) == '6':
            # Now find all of the classname(s) in this specific connection element.
            for class_name in connection_element.findall('classes/class/classname'):
                audio[connectionID.text].append(class_name.text)
    return audio
  

 Using  audio[connectionID.text] = class_name.text  will overwrite the value each time through the loop, dicts cannot have duplicate keys so using a list you can append and store all the values for each key . 

 If you want to print the key and values: 

  for k in audio:
    for val in audio[k]:
        print("{}:{}".format(k,val))
  

  

  for k,vals in audio.iteritems():
    for val in vals:
        print("{}:{}".format(k,val))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47670384)
 That is how dictionaries work, there can only be one value for a given key. 

 To achieve what you are trying to do you can use a list as the value. 

  from collections import defaultdict
dicta = defaultdict(list) #<===== See here

for entry in data:
    month_year = entry[0:7]
    if month_year == month:
        day = entry[8:10]
        trigger_time = entry[11:19]
        print month_year
        dicta[day.encode("ascii")].append(trigger_time) #<===== See here
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/21222526)
 You can use http://docs.python.org/2/library/stdtypes.html#dict.update: 

  d.update({'a': 10, 'c': 200, 'c': 30})
  

 This will overwrite the values for existing keys and add new key-value-pairs for keys that do not already exist. 



