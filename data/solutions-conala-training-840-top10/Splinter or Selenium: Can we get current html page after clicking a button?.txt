Query: Splinter or Selenium: Can we get current html page after clicking a button?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/26819950)
 With Selenium, assuming that  driver  is your initialized  WebDriver  object, this will give you the HTML that corresponds to the state of the DOM at the time you make the call: 

  driver.execute_script("return document.documentElement.outerHTML;")
  

 The return value is a string so you could do: 

  print(driver.execute_script("return document.documentElement.outerHTML;"))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54824001)
 To click on the element with text as  Upload from my Computer  you need to induce  WebDriverwait  for the  element to be clickable  and you can use either of the following solutions: 

 
   CSS_SELECTOR : 

  WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button.center-block.btn.btn-white-fill.btn-block#btnUploadFromMyComputer"))).click()
   
   XPATH : 

  WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, "//button[@class='center-block btn btn-white-fill btn-block ' and @id='btnUploadFromMyComputer']"))).click()
   
  Note: You have to add the following imports : 

  from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
   
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54823640)
 Selenium's  click()  does not support to operate on invisible element.  Thus please double confirm the button is visible or not when your code intend to click it. 

 If the button is not visible, how do you click it hands-on? Thus change your script to following the human steps to make the button visible before you can click it. 

 Back to your failure on below code 

  WebDriverWait(driver, 20).until(EC.element_to_be_clickable(
     (By.CSS_SELECTOR, "div.center-block btn.btn-white-fill.btn-block"))).click()
  

 The reason is you give a wrong css selector which can't find any element from the page util reach the waiting timeout. 

 The correct css selector of the button can be any one of following: 

 
 button.center-block.btn.btn-white-fill.btn-block 
 button#btnUploadFromMyComputer 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47490113)
 Splinter is not involved in the download of a file. 

 Maybe you need to navigate the page to find the exact URL, but then use the regular  requests  library for the download: 

  import requests

url="some.download.link.com"
result = requests.get(url)
with open('file.pdf', 'wb') as f:
    f.write(result.content)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22183775)
 The css selector looks alright, just that i am not sure from where have you got  find_by_css  as a method? 

 How about this :- 

  br.find_element_by_css_selector("div#edit-field-download-files-und-0 a.button.launcher").click()
  

 Selenium provides the following methods to locate elements in a page: 

  find_element_by_id
find_element_by_name
find_element_by_xpath
find_element_by_link_text
find_element_by_partial_link_text
find_element_by_tag_name
find_element_by_class_name
find_element_by_css_selector
  

 To find multiple elements (these methods will return a list): 

  find_elements_by_name
find_elements_by_xpath
find_elements_by_link_text
find_elements_by_partial_link_text
find_elements_by_tag_name
find_elements_by_class_name
find_elements_by_css_selector
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53973459)
  open_browser  and  get_cpf  are absolutely not related to each other... 

 Actually you don't need  get_cpf  at all. Just wait for text after clicking the button: 

  from selenium.webdriver.support.ui import WebDriverWait as wait

def open_browser():
    driver = webdriver.Chrome("/home/felipe/Downloads/chromedriver")
    driver.get(url)
    driver.find_element_by_id('bt_gerar_cpf').click()
    text_field = driver.find_element_by_id('texto_cpf')
    text = wait(driver, 10).until(lambda driver: not text_field.text == 'Gerando...' and text_field.text)
    return text

print(open_browser())
  

  Update  

 The same with requests: 

  import requests

url = 'https://www.4devs.com.br/ferramentas_online.php'
data = {'acao': 'gerar_cpf', 'pontuacao': 'S'}
response = requests.post(url, data=data)
print(response.text)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51093789)
  xPath  to the button is: 

  //li[@class = 'pagination-next']/a
  

 so every time you need to load next page you can click on this element: 

  next_page_btn = driver.find_elements_by_xpath("//li[@class = 'pagination-next']/a")
next_page_btn.index(0).click()
  

 Note: you should add a logic: 

  while True:
    next_page_btn = driver.find_elements_by_xpath("//li[@class = 'pagination-next']/a")
    if len(next_page_btn) < 1:
        print("No more pages left")
        break
    else:
        # do stuff
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51106963)
 The next_page_btn.index(0).click() wasn't working, but checking the len of next_page_btn worked to find if it was the last page, so I was able to do this.  

  while True:
    next_page_btn = driver.find_elements_by_xpath("//li[@class = 'pagination-next']/a")
    if len(next_page_btn) < 1:
        print("No more pages left")
        break
    else:
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.LINK_TEXT, 'Next'))).click()
  

  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/23087842)
 The problem is that the input you are clicking on is really hidden by setting  display: none  style. 

 To workaround it, execute javascript code to click on the input and set  checked  attribute: 

  browser.execute_script("""var element = document.getElementById('rdoAddressOption0');
                          element.click();
                          element.checked=true;""")
browser.find_by_id('body_content_btnContinue').first.click()
  



