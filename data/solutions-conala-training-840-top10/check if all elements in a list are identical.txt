Query: check if all elements in a list are identical
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35768901)
 Convert the list into the set and then find the number of elements in the set. If the result is 1, it has identical elements and if not, then the elements in the list are not identical. 

  list1 = [1,1,1]
len(set(list1)) 
>1

list1 = [1,2,3]
len(set(list1)
>3
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3844833)
 You can convert the list to a set. A set cannot have duplicates. So if all the elements in the original list are identical, the set will have just one element. 

  if len(sets.Set(input_list)) == 1
// input_list has all identical elements.
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8799402)
  def allTheSame(i):
    j = itertools.groupby(i)
    for k in j: break
    for k in j: return False
    return True
  

 Works in Python 2.4, which doesn't have "all". 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3844948)
 A solution faster than using set() that works on sequences (not iterables) is to simply count the first element. This assumes the list is non-empty (but that's trivial to check, and decide yourself what the outcome should be on an empty list) 

  x.count(x[0]) == len(x)
  

  

  >>> timeit.timeit('len(set(s1))<=1', 's1=[1]*5000', number=10000)
1.4383411407470703
>>> timeit.timeit('len(set(s1))<=1', 's1=[1]*4999+[2]', number=10000)
1.4765670299530029
>>> timeit.timeit('s1.count(s1[0])==len(s1)', 's1=[1]*5000', number=10000)
0.26274609565734863
>>> timeit.timeit('s1.count(s1[0])==len(s1)', 's1=[1]*4999+[2]', number=10000)
0.25654196739196777
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3162717)
  A = [[]]*2  creates a list with 2 identical elements:  [[],[]] .
The elements are the same exact list.
 

  A[0].append("a")
A[1].append("b")
  

 appends both  "a"  and  "b"  to the same list. 

  B = [[], []]  creates a list with 2 distinct elements.  

  In [220]: A=[[]]*2

In [221]: A
Out[221]: [[], []]
  

 This shows that the two elements of  A  are identical: 

  In [223]: id(A[0])==id(A[1])
Out[223]: True

In [224]: B=[[],[]]
  

 This shows that the two elements of  B  are different objects. 

  In [225]: id(B[0])==id(B[1])
Out[225]: False
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53772870)
 Or use  diff  method of numpy: 

  import numpy as np
def allthesame(l):
    return np.all(np.diff(l)==0)
  

  

  print(allthesame([1,1,1]))
  

 Output: 

  True
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41332976)
 Check if all elements equal to the first. 

  np.allclose(array, array[0])  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48802941)
 Change the list to a set. Then if the size of the set is only 1, they must have been the same. 

  if len(set(my_list)) == 1:
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54156826)
 Or use diff method of numpy: 

  import numpy as np
def allthesame(l):
    return np.unique(l).shape[0]<=1
  

  

  print(allthesame([1,1,1]))
  

 Output: 

 True 



