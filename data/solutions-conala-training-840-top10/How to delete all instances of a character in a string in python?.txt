Query: How to delete all instances of a character in a string in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22187259)
 Try  str.replace() : 

  str="it is icy"
print str.replace("i", "")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22187306)
  replace()  method will work for this. Here is the code that will help to remove character from string.  

  j_word = 'Stringtoremove'
word = 'String'    

for letter in word:
    if j_word.find(letter) == -1:
        continue
    else:
       # remove matched character
       j_word = j_word.replace(letter, '', 1)

#Output
j_word = "toremove"
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22187265)
  >>> x = 'it is icy'.replace('i', '', 1)
>>> x
't is icy'
  

 Since your code would only replace the first instance, I assumed that's what you wanted. If you want to replace them all, leave off the  1  argument. 

 Since you cannot replace the character in the string itself, you have to reassign it back to the variable. (Essentially, you have to update the reference instead of modifying the string.) 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3885121)
  

  pattern.replace("*"\*, "*")
  

  

  pattern.replace("\**", "*")
#                ^^^^
  

  

  pattern_after_substitution= re.sub(r"\*+", "*", pattern)
  

 which does what you wanted. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45396673)
 I suggest split (not saying that the other answers are invalid, this is just another way to do it): 

  def findreplace(char, string):
   return ''.join(string.split(char))
  

 Splitting by a character removes all the characters and turns it into a list. Then we join the list with the join function. You can see the ipython console test below 

  In[112]: findreplace('i', 'it is icy')
Out[112]: 't s cy'
  

 And the speed... 

  In[114]: timeit("findreplace('it is icy','i')", "from __main__ import findreplace")
Out[114]: 0.9927914671134204
  

 Not as fast as replace or translate, but ok. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32594712)
 Here's what I did to slice out the "M": 

  s = 'EXAMPLE'
s1 = s[:s.index('M')] + s[s.index('M')+1:]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3559592)
 To replace a specific position: 

  s = s[:pos] + s[(pos+1):]
  

 To replace a specific character: 

  s = s.replace('M','')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38645211)
 You can use a list comprehension towether with  replace  to clean all instances of  \n  within the string (assuming the password should not contain a carriage return): 

  >>> [pw.replace('\n', '') for pw in passwords]
['Monster1', 'Monster2', 'Monster3']
  



