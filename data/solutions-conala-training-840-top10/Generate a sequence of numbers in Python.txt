Query: Generate a sequence of numbers in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/11064945)
 Every number from 1,2,5,6,9,10... is divisible by 4 with remainder 1 or 2. 

  >>> ','.join(str(i) for i in xrange(100) if i % 4 in (1,2))
'1,2,5,6,9,10,13,14,...'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45339728)
 using numpy and list comprehension you can do the 

  import numpy as np
[num for num in np.arange(1,101) if (num%4 == 1 or num%4 == 2)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/37213038)
 This should do the trick 

  import random

sequence = []

desired_length = n # how many numbers you want
for i in range(desired_length):
    random_value = random.random()
    if random_value < .8:
        sequence.append(1)
    elif random_value < .95:
        sequence.append(2)
    else:
        sequence.append(3)

print sequence
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11064966)
 Includes some guessing on the exact sequence you are expecting: 

  >>> l = list(range(1, 100, 4)) + list(range(2, 100, 4))
>>> l.sort()
>>> ','.join(map(str, l))
'1,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30,33,34,37,38,41,42,45,46,49,50,53,54,57,58,61,62,65,66,69,70,73,74,77,78,81,82,85,86,89,90,93,94,97,98'
  

  

  >>> ','.join(map(str, sorted(list(range(1, 100, 4))) + list(range(2, 100, 4))))
  

  . this is Python 3 compatible)  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34577767)
 This works by exploiting the % properties of the list rather than the increments. 

  for num in range(1,100):
    if num % 4 == 1 or num % 4 ==2:
        n.append(num)
        continue
    pass
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47522303)
 python 3.6 

  for i in range(121):
    print(f'{i:03}')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22215011)
  ["{0:03}".fmat(i) f i in range(121)]
  

  

  ["%03d" % i f i in range(121)]
  

 To print: 

  print "\n".join(<either of the above expressions>)
  

 Me terse in Python 3.6+: 

  [f"{i:03}" f i in range(121)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17175908)
 The  range  function already does what you are setting out to do. 

 If you're in Python 2,  range(10)  returns 0 through 9, or in Python 3 it's  list(range(10)) . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19476177)
 Just as a heads up: in addition to the 2.3 change, python 3 gives numbers from python 2.x from randrange and probably other functions, even if the numbers from random.random are similar. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/17324422)
 That code is an attempt at using trial division to produce a sequence of primes. 

 To correct it: 

  pp = 2
ps = [pp]
lim = raw_input("Generate prime numbers up to what number? : ")
while pp < int(lim):
    pp += 1
    for a in ps:
        if pp%a==0:
            break
    else:                # unindent
        ps.append(pp)    #  this
  

 To make it much more efficient (in fact, optimal) trial division: 

  pp = 2
ps = [pp]
lim = raw_input("Generate prime numbers up to what number? : ")
while pp < int(lim):
    pp += 1
    for a in ps:
        if a*a > pp:         # stop
            ps.append(pp)    #  early
            break
        if pp%a==0:
            break
  



