Query: from list of integers, get number closest to a given value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12141198)
 Iterate over the list and compare the current closest number with  abs(currentNumber - myNumber) : 

  def takeClosest(myList, myNumber):
    closest = myList[0]
    for i in range(1, len(myList)):
        if abs(i - myNumber) < closest:
            closest = i
    return closest
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20613417)
  def closest(list, Number):
    aux = []
    for valor in list:
        aux.append(abs(Number-valor))

    return aux.index(min(aux))
  

 This code will give you the index of the closest number of Number in the list. 

 The solution given by KennyTM is the best overall, but in the cases you cannot use it (like brython), this function will do the work 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30603657)
 It's important to note that Lauritz's suggestion idea of using bisect does not actually find the closest value in MyList to MyNumber. Instead, bisect finds the next value in  order  after MyNumber in MyList. So in OP's case you'd actually get the position of 44 returned instead of the position of 4. 

  >>> myList = [1, 3, 4, 44, 88] 
>>> myNumber = 5
>>> pos = (bisect_left(myList, myNumber))
>>> myList[pos]
...
44
  

 To get the value that's closest to 5 you could try converting the list to an array and using argmin from numpy like so. 

  >>> import numpy as np
>>> myNumber = 5   
>>> myList = [1, 3, 4, 44, 88] 
>>> myArray = np.array(myList)
>>> pos = (np.abs(myArray-myNumber)).argmin()
>>> myArray[pos]
...
4
  

 I don't know how fast this would be though, my guess would be "not very". 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42945206)
 Considering you want closest minimum value . You can try min function also : 

  min(myList, key=lambda x:abs(x-myNumber))
  

  Update:  

 You can also go with this: 

  mylist = [1, 2, 3, 4, 5, 6, 7, 9, 10]
mynumber = int(raw_input("enter num : "))

def closest(list, Number):
    temp = []
    for i in list:
        temp.append(abs(Number-i))

    return temp.index(min(temp))

a = closest(mylist, mynumber)
print "index is : ",a
print "Closet value is : ",mylist[a]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45601937)
 It sounds like you want the closest value that is  less  than your index. IE: the closest value to 1 is 0, and the closest value to 0 is 11, and so on (based on your range [0-11]). 

  

  closest_value = (value - 1) % 12
  

 You should be able to use the result as an index to your notation_values so you can determine the corresponding musical note. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40842037)
 You can use  lambda  to take away 8 from all the values in the list, then get the value which is closest to 0 using  min  

 
    Single integers  
 

  d=[[1,2],[4,6,2],[6,2,3,1],[7,2]]
closest = []

for x in d:
    closest.append(x.index(min(x, key = lambda y:abs(y-8))))

print(closest)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12141215)
  >>> takeClosest = lambda num,collection:min(collection,key=lambda x:abs(x-num))
>>> takeClosest(5,[4,1,88,44,3])
4
  

 A http://docs.python.org/tutorial/controlflow.html#lambda-forms is a special way of writing an "anonymous" function (a function that doesn't have a name). You can assign it any name you want because a lambda is an expression. 

 The "long" way of writing the the above would be: 

  def takeClosest(num,collection):
   return min(collection,key=lambda x:abs(x-num))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51234129)
 You can use https://docs.python.org/2/library/bisect.html to find the insertion point of a value in a sorted list: 

  import bisect 
li=[2,4.635,9,18,27.548,36]

>>> li[bisect.bisect_left(li,8.9)-1]    
4.635     
  

 You could also just use a simple  for  loop and  zip  on a sorted list as well: 

  for lo,hi in zip(li,li[1:]):
    if lo< 8.9 <=hi:
        print lo 
        break   
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36312978)
 I have an answer to find the 2 closest numbers to the input value, please see the program below :- 

  from collections import OrderedDict


def find_closer():
    a = [9, 19, 87, 43, 10]
    b = int(input("Enter number :"))
    # diff_list = []
    diff_dict = OrderedDict()
    if b in a:
        b = input("Number already exists, please enter another number ")
    else:
        for x in a:
            diff = x - b
            if diff < 0:
                # diff_list.append(diff*(-1))
                diff_dict[x] = diff*(-1)
            else:
                # diff_list.append(diff)
                diff_dict[x] = diff
    print("diff_dict", diff_dict)
    # print(diff_dict[9])
    sort_dict_keys = sorted(diff_dict.keys())
    print(sort_dict_keys)
    closer_less = 0
    closer_more = 0
    for closer in sort_dict_keys:
        if closer < b:
            closer_less = closer
        else:
            closer_more = closer
            break
    print("closer less =", closer_less, "and closer more =", closer_more)


find_closer()
  

 . Hope it helps !! 



