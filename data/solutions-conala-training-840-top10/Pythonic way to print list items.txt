Query: Pythonic way to print list items
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15769321)
 I use this all the time :  

  #!/usr/bin/python

l = [1,2,3,7] 
print "".join([str(x) for x in l])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/31296603)
  [print(a) for a in list]  will give a bunch of None types at the end though it prints out all the items 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30451601)
 This will work: 

  n = m = 0
while m < len(l):
    m = m+5
    print("".join(l[n:m]))
    n = m
  

 But I believe there is a more pythonic way to accomplish the task. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28990359)
 You can use the  format  method: 

   print("{} and {}".format(",".join(items[:-1]), items[-1]))
  

 The first  {}  will be filled with the  join  of all the element but the last one and then you just print the last element. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33689266)
 I like this take for readability and use of Python as such: 

  dicts = [{'a':'asdasd', 'b': 123},{'a': 'asdasdasdas'}, {'a':123,'b':'asdasd'}]

def get_highest(current_highest, items_left):
    if not items_left:
        return current_highest
    else:
        item = items_left.pop()
        higher = {key: len(str(value)) for key, value in item.items() if (len(str(item[key])) > current_highest.get(key, 0))}
    if higher:
        current_highest.update(higher)
    return get_highest(current_highest, items_left)

print(get_highest(dict(), dicts))

{'b': 6, 'a': 11}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/33635360)
 Here's another way that doesn't rely on sorting/zipping but I wouldn't say one is more Pythonic than the other. 

  from itertools import chain

lst =[{'a':'asdasd', 'b': 123}, {'a': 'asdasdasdas'}, {'a':123,'b':'asdasd'}]
dct = {
    k: max(len(str(d.get(k, ""))) for d in lst)
    for k in set(chain.from_iterable(d.keys() for d in lst))
}

print(dct)
  

 Alternatively, you can use groupby: 

  from itertools import chain, groupby

lst =[{'a':'asdasd', 'b': 123}, {'a': 'asdasdasdas'}, {'a':123,'b':'asdasd'}]
dct = {
    k: max(len(str(v)) for _, v in g)
    for k, g in groupby(
        chain.from_iterable(d.items() for d in lst),
        lambda p: p[0]
    )
}

print(dct)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14841065)
 You are looking for http://docs.python.org/3/library/functions.html#sum with a http://www.youtube.com/watch?v=pShL9DCSIUw: 

  sum(len(v) for v in items.values())
  

 The  sum()  function totals the values of the given iterator, and the generator expression yields the length of each value in the lists. 

 Note that calling lists vectors is probably confusing to most Python programmers, unless you are using the term vector in the context of the domain of the problem. 



