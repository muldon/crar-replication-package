Query: Sort a list of dicts by dict values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37573661)
 Use https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions to flat the list of dicts into a list of tuples  (value, key) , use https://docs.python.org/3/library/functions.html#sorted to sort them by the value, use https://docs.python.org/3/library/stdtypes.html#str.join to format your output. 

  list_dicts = [  {'mike':[500,1000,1500,2750,3000]},
                {'john':[750,1250,2000]},
                {'luke':[600,1100]}]

# flat the list of dicts as a list of tuples (value, key), sort them
result = sorted([(item, k) for d in list_dicts for k, l in d.items() for item in l])

# format output
print('\n'.join([':'.join([str(i) for i in t]) for t in result]))
# Output
500:mike
600:luke
750:john
1000:mike
1100:luke
1250:john
1500:mike
2000:john
2750:mike
3000:mike
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9849262)
 Iterating over a dictionary (which is what the  sorted  function does) will give you only it's keys: 

  >>> sorted(mydict)
[u'den', u'jaime', u'jon', u'rob']
  

 Instead you want to sort both the keys and values - to do this, you would use  mydict.items()  (or  mydict.iteritems() , which is more efficient with large dicts): 

  >>> sorted(mydict.items())
[(u'den', 26), (u'jaime', 31), (u'jon', 30), (u'rob', 42)]
  

 Then your code would work as expected: 

  >>> from operator import itemgetter
>>> sorted(mydict.items(), key = itemgetter(1))
[(u'den', 26), (u'jon', 30), (u'jaime', 31), (u'rob', 42)]
  

 You may also want to sort with the dict's key as the secondary sort value, in case multiple keys have the same value: 

  >>> mydict={u'a': 1, 'z': 1, 'd': 1}
>>> sorted(mydict.items(), key = itemgetter(1))
[(u'a', 1), ('z', 1), ('d', 1)]
>>> sorted(mydict.items(), key = itemgetter(1, 0))
[(u'a', 1), ('d', 1), ('z', 1)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/613228)
 Dicts can't be sorted, but you can build a sorted list from them. 

 A sorted list of dict values: 

  sorted(d.values())
  

 A list of (key, value) pairs, sorted by value: 

  from operator import itemgetter
sorted(d.items(), key=itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2878123)
  l.sort(key=lambda x:x['title'])
  

 To sort with multiple keys, assuming all in ascending order: 

  l.sort(key=lambda x:(x['title'], x['title_url'], x['id']))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17822335)
 You are appending string, not a dictionary. 
. 

  testList = list()
testList.append({"_id": aList["_id"], "stuff": aList["stuff"], "stuff2": aCount, "stuff3": anotherList, "stuff4": aList["stuff2"]})
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45246448)
 You can avoid sorting by iterating over the existing, ordered keys in  B : 

 
 Merge list  A  into a single lookup dict 
 Build a new list from the order in  B , using the lookup dict to find the value matching each key 
 

 Code: 

  import itertools

merged_A = {k: v for d in A for k, v in d.items()}
sorted_A = [{k: merged_A[k]} for k in itertools.chain.from_iterable(B)]
# [{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  

 

 If required, you can preserve the original dict objects from  A  instead of building new ones: 

  keys_to_dicts = {k: d for d in A for k in d}
sorted_A = [keys_to_dicts[k] for k in itertools.chain.from_iterable(B)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10569687)
 You might want to use a recursive function to extract all the  key, value  pairs. 

  def extract(dict_in, dict_out):
    for key, value in dict_in.iteritems():
        if isinstance(value, dict): # If value itself is dictionary
            extract(value, dict_out)
        elif isinstance(value, unicode):
            # Write to dict_out
            dict_out[key] = value
    return dict_out
  

 Something of this sort. I come from C++ background so I had to google for all the syntaxes. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47913285)
 You can sort both lists before comparing them and compare the sorted results: 

  >>> list_dict_a = [
        {'expiration_date': None, 'identifier_country': None, 'identifier_number': 'Male', 'identifier_type': 'Gender', 'issue_date': None},
        {'expiration_date': None, 'identifier_country': 'VE', 'identifier_number': '1234567', 'identifier_type': 'Foo No.', 'issue_date': None}]

>>> list_dict_b = [
        {'identifier_country': 'VE', 'expiration_date': None, 'identifier_type': 'Foo No.', 'issue_date': None, 'identifier_number': '1234567'},
        {'identifier_country': None, 'expiration_date': None, 'identifier_type': 'Gender', 'issue_date': None, 'identifier_number': 'Male'}]

>>> list_dict_a == list_dict_b
False
>>> def key_func(d):
        items = ((k, v if v is not None else '') for k, v in d.items())
        return sorted(items)
>>> sorted(list_dict_a, key=key_func) == sorted(list_dict_b, key=key_func)
True
  

 The order of the dicts within each list will then not matter. 

 Passing the  key  function is needed, because dicts are not orderable, thus we need to tell the sorting function what key to use for each pair of dict objects when comparing them. A key for each dictionary is simply a sorted list of its (key, value) pairs. 

 The key function calculates a key for each dict as follows: 

  >>> dict_a0 = list_dict_a[0]
>>> key_func(dict_a0)
[('expiration_date', ''), ('identifier_country', ''), ('identifier_number', 'Male'), ('identifier_type', 'Gender'), ('issue_date', '')]
  

  Footnotes  

 In order for this list of (key, value) pairs to be comparable with other dicts' lists,  None  values had to be converted to an empty string. This allows None values to be comparable with other non-None values. 

 The underlying assumption in the solution above is that all dictionary values in your case are either strings or  None , and that "empty" values are consistently represented as  None  (and not e.g. by an empty string). If this is not the case,  key_func()  would have to be adjusted accordingly to assure that the resulting lists are always comparable to each other for any dict value expected in the data. 

 Also, for large dicts this key function might not be ideal, because comparisons of key pairs would be too slow. It would thus be better to instead calculate a unique hash value for each dict (but the same hash for dicts that compare equal). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17822323)
 your appending a string not a dictionary....you can make it a dictionary using the json library 

  testList.sort(key=lambda x: json.loads(x)['stuff2'])
  



