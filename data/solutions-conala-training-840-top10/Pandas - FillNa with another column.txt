Query: Pandas - FillNa with another column
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30357382)
 You can provide this column to  fillna  (see http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html), it will use those values on matching indexes to fill: 

  In [17]: df['Cat1'].fillna(df['Cat2'])
Out[17]:
0    cat
1    dog
2    cat
3    ant
Name: Cat1, dtype: object
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30357379)
 Just use the  value  parameter instead of  method : 

  In [20]: df
Out[20]:
  Cat1      Cat2  Day
0  cat     mouse    1
1  dog  elephant    2
2  cat     giraf    3
3  NaN       ant    4

In [21]: df.Cat1 = df.Cat1.fillna(value=df.Cat2)

In [22]: df
Out[22]:
  Cat1      Cat2  Day
0  cat     mouse    1
1  dog  elephant    2
2  cat     giraf    3
3  ant       ant    4
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51409561)
 Here is a more general approach (fillna method is probably better) 

  def is_missing(Cat1,Cat2):    
    if np.isnan(Cat1):        
        return Cat2
    else:
        return Cat1

df['Cat1'] = df.apply(lambda x: is_missing(x['Cat1'],x['Cat2']),axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41011740)
 use  fillna  and  join  

  df.fillna(df[['p_id_y']].join(df2.set_index('p_id'), on='p_id_y'))
  

 https://i.stack.imgur.com/P6WeN.png 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32756141)
 You can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html using that column: 

  In [4]: df['Two'].fillna(df['One'])
Out[4]:
0    21
1    11
2    25
Name: Two, dtype: float64
  

 So to actually change the column:  df['Two'] = df['Two'].fillna(df['One'])  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45883973)
 Or using  merge ,  fillna  

  import pandas as pd
import numpy as np

df1.loc[df.score==0,'score']=np.nan
df1.merge(df2,on='name',how='left').fillna(method='bfill',axis=1)[['name','score_x']]\
    .rename(columns={'score_x':'score'})
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39899458)
 This worked: 

   df['Date'].fillna(pd.to_datetime(df['FillDate']).dt.date, inplace=True)
  

 which gives 

        Id    Date       FillDate
      1.0  2015-08-01  2015-08-01
      2.0  2015-08-01  2015-08-01
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49310482)
 Assuming those are actual null values... 
You want  pd.DataFrame.fillna    

  df1.fillna(df2)

         B     C     D
key                   
key1  11.0   NaN   NaN
key2  55.0  33.0  88.0
key3  53.0  44.0  99.0
key4  22.0  55.0  77.0
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/40251964)
 a missing data would normally be a NaN values, not a string. So in the case that you have NaNs instead of '', you can actually pass another  column  to the  fillna()  method: 

  import pandas as pd
import numpy as np
df = pd.DataFrame({ 'fist': ['John', 'Mick'],
                    'last':['Lennon', np.nan],
                    'band':['Beatles', 'Rolling Stones'] })
In[37]: df
Out[37]: 
             band  fist    last
0         Beatles  John  Lennon
1  Rolling Stones  Mick     NaN
  

 now with  fillna()  

  df['last'].fillna(df.band, inplace=True)
df
Out[44]: 
             band  fist            last
0         Beatles  John          Lennon
1  Rolling Stones  Mick  Rolling Stones
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51535506)
   .shift()  and  fillna() : 

  df['y'] = (df['x'] - df['x'].shift(1)).fillna(df['x'])
  

 To explain what this is doing, if we  print(df['x'].shift(1))  we get the following series: 

  0    NaN
1    1.0
2    3.0
3    4.0
4    7.0
  

 Which is your values from  'x'  shifted down one row. The first row gets  NaN  because there is no value above it to shift down.   

  print(df['x'] - df['x'].shift(1))
  

  

  0    NaN
1    2.0
2    1.0
3    3.0
4    3.0
  

 Which is your subtracted values, but in our first row we get a  NaN  again. To clear this, we use  .fillna() , telling it that we want to just take the value from  df['x']  whenever a null value is encountered. 



