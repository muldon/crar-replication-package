Query: How to apply a logical operator to all elements in a python list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1790558)
 http://docs.python.org/library/functions.html can do this: 

  reduce(lambda a,b: a and b, alist, True)
  

 As fortran mentioned, all is the most succinct way to do it. But reduce answers the more general question "How to apply a logical operator to all elements in a python list?" 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6478660)
 Here's another solution: 

  def my_and(a_list):
    return not (False in a_list)

def my_or(a_list):
    return True in a_list
  

 ANDing all elements will return True if all elements are True, hence no False in a list.
ORing is similar, but it should return True if at least one True value is present in a list. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1790608)
 The idiom for such operations is to use the  reduce  function (global in Python 2.X, in module  functools  in Python 3.X) with an appropriate binary operator either taken from the  operator  module or coded explicitly. In your case, it's  operator.and_  

  reduce(operator.and_, [True, True, False])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39153234)
 Using the functional method in https://docs.python.org/2/library/operator.html#operator.or_ in combination with https://docs.python.org/2/library/functions.html#reduce: 

  >>> import operator, functools
>>> functools.reduce(operator.or_, [1,2,3])
3
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36219793)
 No, because that's not the way that  and  operation works in python. First off it doesn't  and  the list items separately. Secondly the  and  operator works between two objects and if one of them is False (https://docs.python.org/2/library/stdtypes.html#truth-value-testing <sup>1</sup>) it returns that and if both are True it returns the second one. Here is an example : 

  >>> [] and [False]
[]
>>> 
>>> [False] and []
[]
>>> [False] and [True]
[True]
  

 
    x and y  :   if  x  is false, then  x , else  y  
 

 If you want to apply the logical operations on all the lists pairs you can use numpy arrays: 

  >>> import numpy as np
>>> a = np.array([True, False])
>>> b = np.array([True, True])
>>> 
>>> np.logical_and(a,b)
array([ True, False], dtype=bool)
>>> np.logical_and(b,a)
array([ True, False], dtype=bool)
  

 

 <sub>
1. Here since you are dealing with lists an empty list will be evaluated as False 
</sub> 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26186990)
 The unary tilde operator (~) will do this for a numpy.ndarray.  

  >>> import numpy
>>> mylist = [True, True, False]
>>> ~numpy.array(mylist)
array([False, False, True], dtype=bool)
>>> list(~numpy.array(mylist))
[False, False, True]
  

 Note that the elements of the flipped list will be of type numpy.bool_ not bool. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46923062)
 It seems you are looking for the reduction method. So, use - 

  np.logical_xor.reduce([1,0,0,1,0,1,0,1])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22726558)
 You're thinking of http://docs.scipy.org/doc/numpy/reference/generated/numpy.all.html (for  logical_and ) or http://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html (for  logical_or ). 

  In [11]: a.any(axis=1)
Out[11]: array([ True,  True,  True], dtype=bool)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48802430)
  functools.reduce  is perfect for this use-case. It takes a function to apply to the accumulated value and the next value, the iterable you want to reduce, and optionally an initialiser. 

 For example, bitwise-or-ing every value in a list: 

  import functools

functools.reduce(lambda a, b: a ^ b, [1, 2, 3])
  

 This is equivalent to  1 ^ 2 ^ 3 . 



