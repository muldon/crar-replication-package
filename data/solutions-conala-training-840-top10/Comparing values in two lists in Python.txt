Query: Comparing values in two lists in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2244487)
 with http://docs.python.org/library/stdtypes.html#set.difference: 

  >>> list1 = ['one','two','three','four','five']
>>> list2 = ['one','two','four']
>>> set(list1).difference(list2)
{'five', 'three'}
  

 you can skip conversion of  list2  to set. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2244459)
  set(list1).difference(set(list2))  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5063003)
 Lists are mutable and, thus, not hashable.  A set can be built only out of hashable items.  Since values in the two dicts above are lists, sets cannot be built out of them.  However, if one were to change the type of values from lists to tuples (which are immutable), one could build sets and perform set operations. 

  >>> dict1 = {'blue': (2, 3, 4), 'green': (3, 4, 5), 'red': (1, 2, 3)}
>>> dict2 = {'green': (3, 4, 5), 'yellow': (2, 3, 4), 'red': (5, 2, 6)}
>>> list(set(dict1.items()) & set(dict2.items()))
[('green', (3, 4, 5))]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2244457)
 Use sets to get the difference between the lists: 

  >>> list1 = ['one','two','three','four','five']
>>> list2 = ['one','two','four']
>>> set(list1) - set(list2)
set(['five', 'three'])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51989053)
 For the first question, you could sort the zip of both lists, i.e. sort a list of tuple: 

  indexList = [5,3,2,2,7,1]
valueList = [1,2,3,4,5,6]

sorted(zip(indexList, valueList))
# [(1, 6), (2, 3), (2, 4), (3, 2), (5, 1), (7, 5)]
  

 Quote from https://stackoverflow.com/a/20145873/8069403: 

 
   Python sorts tuples and lists like these lexicographically; compare
  the first element, and only if that doesn't differ, compare the second
  element, etc. 
 

 And if you want to pack the values again into two lists: 

  indexList, valueList = list(zip(*sorted(zip(indexList, valueList))))

print( indexList, valueList )
# (1, 2, 2, 3, 5, 7) (6, 3, 4, 2, 1, 5)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47430061)
 You could convert your values to tuples. This way, they become hashable and you can put them into a dict: 

  dict1 = {'key1': [1,2,3], 'key2': [3,4,5]}
dict2 = {'key3': [2,3,4], 'key4': [1,2,3]}

same_lists = {}

for d in [dict1, dict2]:
    for k, v in d.items():
        same_lists.setdefault(tuple(v), []).append(k)

print(same_lists)
# {(1, 2, 3): ['key1', 'key4'], (3, 4, 5): ['key2'], (2, 3, 4): ['key3']}
  

 Now you only need to iterate over the values of your dict and look for multiple keys: 

  for common_keys in same_lists.values():
    if len(common_keys) > 1:
        print(common_keys)
# ['key1', 'key4']
  

 This solution is  O(n) , compared to your  O(n**2)  code. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17371975)
  >>> list1 = 'TK123','TK221','TK132'
>>> list2 = 'TK123A','TK1124B','TK221L','TK132P'
>>> def remove_trailing_letter(s):
...     return s[:-1] if s[-1].isalpha() else s
... 
>>> diff = set(map(remove_trailing_letter, list2)).difference(list1)
>>> diff
set(['TK1124'])
  

 And you can add the last letter back in, 

  >>> add_last_letter_back = {remove_trailing_letter(ele):ele for ele in list2}
>>> diff = [add_last_letter_back[ele] for ele in diff]
>>> diff
['TK1124B']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33147207)
 While a list comprehension was specified in the question and the answers above are probably better, I thought I'd chime in with a recursive solution: 

  def compare_lists(a, b, res=[]):
    if len(a) == len(b):
        if a == []:
            return res
        else:
            if a[0] == b[0]:
                res.append(1)
            else:
                res.append(0)
            return compare_lists(a[1:], b[1:])
    else:
        return "Lists are of different length."
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/382707)
 Index on the fields you want to use for lookup.   

  matches = []
biglist1_indexed = {}

for item in biglist1:
    biglist1_indexed[(item["transaction"], item["date"])] = item

for item in biglist2:
    if (item["transaction"], item["date"]) in biglist1_indexed:
        matches.append(item)
  

 This is probably thousands of times faster than what you're doing now. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/382483)
 What you want to do is to use correct data structures:  

 
  Create a dictionary of mappings of tuples of other values in the first dictionary to their id.  
  Create two sets of tuples of values in both dictionaries. Then use set operations to get the tuple set you want.  
  Use the dictionary from the point 1 to assign ids to those tuples.  
 



