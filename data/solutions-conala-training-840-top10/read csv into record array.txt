Query: read csv into record array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/44669986)
 You can use this code to send CSV file data into an array: 

  import numpy as np
csv = np.genfromtxt('test.csv', delimiter=",")
print(csv)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4724179)
 You can also try  recfromcsv()  which can guess data types and return a properly formatted record array. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48520438)
 Using https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html 

 A quite simple method. But it requires all the elements being float (int and so on) 

  import numpy as np 
data = np.loadtxt('c:\\1.csv',delimiter=',',skiprows=0)  
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26296194)
 I would recommend the http://pas.pydata.org/pas-docs/stable/generated/pas.io.parsers.read_csv.html function from the  pas  library: 

  import pas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])
  

 This gives a pas http://pas.pydata.org/pas-docs/dev/dsintro.html#dataframe - allowing https://stackoverflow.com/a/11077215/1461850. 

 
   DataFrame is a 2-dimensional labeled data structure with columns of
  potentially different types. You can think of it like a spreadsheet or
  SQL table... 
 

 

 I would also recommend  genfromtxt . However, since the question asks for a http://docs.scipy.org/doc/numpy/user/basics.rec.html, as opposed to a normal array, the  dtype=None  parameter needs to be added to the  genfromtxt  call: 

 Given an input file,  myfile.csv : 

  1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')
  

 gives an array: 

  array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])
  

   

  np.genfromtxt('myfile.csv',delimiter=',',dtype=None)
  

 gives a record array: 

  array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])
  

 This has the advantage that file with https://stackoverflow.com/a/15481761. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23058619)
 You could use  recfromcsv , which is http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html#shortcut-functions, instead: 

 If your file looks like: 

  col1,col2,col3
1.1, 2.4, 3.2
4.1, 5.2, 6.3
  

  

  a = np.recfromcsv('yourfile.csv')
  

  

  rec.array([(1.1, 2.4, 3.2), (4.1, 5.2, 6.3)], 
      dtype=[('col1', '<f8'), ('col2', '<f8'), ('col3', '<f8')])
  

 Note that  recfromcsv  uses the first row as column/record names. 

 Also, you can use the same input parameters as  genfromtxt  (e.g. the  delimiter  parameter). Your line of code might look like this if your file is tab delimited: 

  np.recfromcsv(datafile,delimiter='\t'))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50985074)
 I would suggest using tables ( pip3 install tables ).   .csv  file to  .h5  using pandas ( pip3 install pandas ), 

  import pandas as pd
data = pd.read_csv("dataset.csv")
store = pd.HDFStore('dataset.h5')
store['mydata'] = data
store.close()
  

 You can then easily, and with less time even for huge amount of data, load your data in a  NumPy array . 

  import pandas as pd
store = pd.HDFStore('dataset.h5')
data = store['mydata']
store.close()

# Data in NumPy format
data = data.values
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3519314)
 You can use Numpy's  genfromtxt()  method to do so, by setting the  delimiter  kwarg to a comma. 

  from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')
  

 More information on the function can be found at its respective http://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12117333)
 I think your best bet is to read the data in as a record array first using numpy. 

  # what you described:
In [15]: import numpy as np
In [16]: import pandas
In [17]: x = pandas.read_csv('weird.csv')

In [19]: x.dtypes
Out[19]: 
int_field            int64
floatlike_field    float64  # what you don't want?
str_field           object

In [20]: datatypes = [('int_field','i4'),('floatlike','S10'),('strfield','S10')]

In [21]: y_np = np.loadtxt('weird.csv', dtype=datatypes, delimiter=',', skiprows=1)

In [22]: y_np
Out[22]: 
array([(1, '2.31', 'one'), (2, '3.12', 'two'), (3, '1.32', 'three ')], 
      dtype=[('int_field', '<i4'), ('floatlike', '|S10'), ('strfield', '|S10')])

In [23]: y_pandas = pandas.DataFrame.from_records(y_np)

In [25]: y_pandas.dtypes
Out[25]: 
int_field     int64
floatlike    object  # better?
strfield     object
  



