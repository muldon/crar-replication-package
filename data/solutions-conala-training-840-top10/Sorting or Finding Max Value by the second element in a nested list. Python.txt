Query: Sorting or Finding Max Value by the second element in a nested list. Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43125593)
  max(zipped)[1] 
 #returns second element of the tuple  

 This should solve your problem in case you want to sort your data 
and find the maximum you can use  itemgetter  

  from operator import itemgetter
zipped.sort(key=itemgetter(1), reverse = True)
print(zipped[0][1]) #for maximum 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4800434)
 Use the  key  argument. 

  max(alk..., key=operator.itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43125622)
 The problem is that Python  compares tuples lexicographically  so it orders on the first item and only if these are equivalent, it compares the second and so on. 

 You can however use the   key=   in the  max(..  function, to  compare  on the second element: 

  max(zipped,<b>key=lambda x:x[1]</b>  

 
    Note 1 : Note that you do  not have to construct a  list(..  if you are only interested in the maximum value . You can use
   max(zip(neighbors,cv_scores,key=lambda x:x[1] . 
  
    Note 2 : Finding the  max(..  runs in  O(n  (linear time whereas sorting a list runs in  O(n log n . 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54051313)
 I did it by finding the second lowest value using a set and then selecting elements from the list with the same value. 

  #ordering by value
nl.sort(key = lambda x: x[1])

values_set = set()
for value in nl:
    values_set.add(value[1])

values_list = list(values_set)
#ordering
values_list.sort()
#getting second lowest values
lowest_values = [lowest for lowest in nl if lowest[1] == values_list[1] ]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4800441)
  max(alkaline_earth_values, key=lambda x: x[1])
  

 The reason this works is because the  key  argument of the  max  function specifies a function that is called when  max  wants to know the value by which the maximum element will be searched.  max  will call that function for each element in the sequence. And  lambda x: x[1]  creates a small function which takes in a list and returns the first (counting starts from zero) element.  

  k = lambda x: x[1]
  

 is the same as saying 

  def k(l):
  return l[1]
  

 but shorter and nice to use in situations like this. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40680699)
 For finding the max value, iterating twice looks extra overhead to me. Firstly, for flattening the list and then again to find the max value. Here is the example to create a recursive function to return you the max value of the nested list in a single iteration as: 

  # The good thing is, you need not to worry about the level of depth
# of the nested list, you can use it on any level of nested list

def get_max(my_list):
    m = None
    for item in my_list:
        if isinstance(item, list):
            item = get_max(item)
        if not m or m < item:
            m = item
    return m
  

  

  >>> my_list = [2,4,6,[5,10,3]]
>>> get_max(my_list)
10
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22442143)
 You can supply a key function to http://docs.python.org/3/library/stdtypes.html#list.sort to determine what value each item in your list should be mapped to for sorting. In your case, you can use a tuple of the negative Y-coordinate, and the X-coordinate to get your desired result: 

  >>> coordinates = [[1, 0], [3, 0], [2, 1], [3.5, 2], [4, 3], [6, 1], [6.5, 0], [10, 2], [10, 5], [9, 3.5], [7, 3], [9, 7], [7, 8], [5, 7], [4, 5], [2, 8], [1, 7], [0, 5], [1, 3], [0, 2]]
>>> coordinates.sort(key=lambda x: (-x[1], x[0]))
>>> coordinates
[[2, 8], [7, 8], [1, 7], [5, 7], [9, 7], [0, 5], [4, 5], [10, 5], [9, 3.5], [1, 3], [4, 3], [7, 3], [0, 2], [3.5, 2], [10, 2], [2, 1], [6, 1], [1, 0], [3, 0], [6.5, 0]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32167933)
 l = [[2, 'e'], [4, 'c'], [1, 'a'], [4, 'b'], [5, 'w'], [3, 'z']] 

  >>> l.sort()
  

 Normal sort: first the first element of the nested list is considered and then the second element. 

  >>>l.sort(key=lambda e: [e[0], e[1]])
  

 Similar to l.sort() 

  >>>l.sort(key=lambda e: [-e[0], e[1]])
  

 Now, what is does is- Reverse sort the the list on the basis of first element of the nested list AND sort normally on the internal elements of the nested sorted list i.e 

 first 2,3,4,5 etc are considered for sorting the list in reverse order( -e[0] == -2,-3,-4...) and then we sort the elements on the basis of second element for internal sorting (e[1] == 'w', 'a', 'b'...) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16435703)
  

  X=[ [[4,5,6], [[3.0, 4], [0.8, 3], [0.5, 10], [0.1, 11]]],
  [[2,1,3], [[2.0, 8], [0.8, 3], [0.2, 1], [0.1, 8]]]]
>>> X.sort(key=lambda x: x[1])
>>> X
[[[2, 1, 3], [[2.0, 8], [0.80000000000000004, 3], [0.20000000000000001, 1], [0.10000000000000001, 8]]], [[4, 5, 6], [[3.0, 4], [0.80000000000000004, 3], [0.5, 10], [0.10000000000000001, 11]]]]
  

 Most importantly,  X.sort(key=lambda x: x[1])  is sorting by second element of X, that is by this elements  [[val1, occurrences_of_val1], [val2, occurrences_of_val2],...] . Implicitely, it is sorting by  val1 , then in case of equality by  occurrences_of_val1  ...    



