Query: finding n largest differences between two lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9323304)
 Assuming the number of elements in the lists aren't huge, you could just difference all of them, sort, and pick the first  n : 

  print sorted((abs(x-y) for x,y in zip(old, new)), reverse=True)[:n]
  

 This would be  O(k log k)  where  k  is the length of your original lists. 

 If  n  is significantly smaller than  k , the best idea would be to use the http://docs.python.org/library/heapq.html#heapq.nlargest function provided by the  heapq  module: 

  import heapq
print heapq.nlargest(n, (abs(x-y) for x,y in zip(old, new))
  

 This will be  O(k log n)  instead of  O(k log k)  which can be significant for  k >> n . 
Also, if your lists are really big, you'd probably be better off using  itertools.izip  instead of the regular  zip  function. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9323276)
 Whenever you think "http://docs.python.org/library/heapq.html#heapq.nlargest", think http://docs.python.org/library/heapq.html.  

  >>> import heapq
>>> import random
>>> l1 = [random.randrange(100) for _ in range(100)]
>>> l2 = [random.randrange(100) for _ in range(100)]
>>> heapq.nlargest(10, (((a - b), a, b) for a, b in zip(l1, l2)))
[(78, 99, 21), (75, 86, 11), (69, 90, 21), (69, 70, 1), (60, 86, 26), (55, 95, 40), (52, 56, 4), (48, 98, 50), (46, 80, 34), (44, 81, 37)]
  

 This will find the x largest items in O(n log x) time, where n is the total number of items in the list; sorting does it in O(n log n) time. 

 It just occurred to me that the above doesn't actually do what you asked for. You want an index! . I'll also use  abs  here in case you want the absolute value of the difference:  

  >>> heapq.nlargest(10, xrange(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
[91, 3, 14, 27, 46, 67, 59, 39, 65, 36]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19263505)
 Yes, There is a function diff() in numpy. 
It can be used like this...   

  ints = [3, 5, 9, 15, 36]
x = numpy.array(ints)

numpy.diff(x)
  

 output:   

  [2, 4, 6, 21]  
  

 You can also use the same function to get the difference between two lists using axis parameter in the function. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41306543)
 As @kraskevich has pointed out, the correct answer is indeed: 

  sum(abs(x - y) for x, y in zip(sorted(xs), sorted(ys))
  

 I have come up with my own proof: 
Consider two lists  xs  and  ys  consisting of elements, in random order,  x1 ,  x2 , ...  xn  and  y1 ,  y2 , ...  yn . 
Since we're trying to find out the minimal sum of absolute difference, we could use square root instead of absolute values, which has little impact to find the minimum value. 
Therefore the sum of the differences is:   

  (x1 - y1)^2 + (x2 - y2)^2 + ... + (xn - yn)^2 
=x1^2 - 2x1 * y1 + y1^2 + ... + xn^2 - 2xn * yn + yn^2
  

 As we can see, in whatever manner we arrange the two lists, the quadratic terms xn^2 and yn^2 stay the same. So, to obtain a minimal result, we simply have to maximize the negative terms -2xn * yn. 

 In order to do so, we simply multiply the largest value in one list by the largest value in the other list, and then do the same for the second largest value in the two lists, etc. (see https://stackoverflow.com/questions/28332970/given-2-arrays-find-the-minimal-sum-of-multiplication-of-indexes). Hence, by sorting both lists and multiplying elements of the same index in the sorted lists, we obtain the minimal sum of differences. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11941217)
 You could use a dictionary having the identifier as the key and a list of the positions as the value. Then you can calculate the difference between the positions and have it as the 3rd element of the list. You can then iterate through the dictionary finding the largest value in position [2] of the dictionary's values. 

  d = {}
for each line in file1:
   d[identifier] = [position]

for each line in file2:
   d[identifier].append(position)
   d[identifier].append(d[identifier][1]-d[identifier][0])

maxDiff = 0
for x in d:
    value = d[x][2]
    if value > maxDiff:
        maxDiff = value
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8982940)
  mylist.sort(key=lambda t: t[0] - t[1])
  

 Note I'm subtracting them in the "wrong" order, which means that the differences will all come out negative and thereby sort the largest in magnitude to the beginning of the list. If you wanted, you could also subtract them in the "right" order and set  reverse=True : 

  mylist.sort(key=lambda t: t[1] - t[0], reverse=True)
  

 That might be clearer although a bit more verbose. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36023789)
  for index, (first, second) in enumerate(zip(list1, list2)):
    if first != second:
        print(index, second)
  

 Output: 

  1 K
6 T
  

 If you want the output you gave, we need to count from  1  instead of the usual  0 : 

  for index, (first, second) in enumerate(zip(list1, list2), start=1):
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/19436781)
 Isn't largest prime factor of 27 is 3 ??
The above code might be fastest,but it fails on 27 right ?
27 = 3*3*3
The above code returns 1
As far as I know.....1 is neither prime nor composite 

 I think, this is the better code 

  def prime_factors(n):
    factors=[]
    d=2
    while(d*d<=n):
        while(n>1):            
            while n%d==0:
                factors.append(d)
                n=n/d
            d+=1
    return factors[-1]
  



