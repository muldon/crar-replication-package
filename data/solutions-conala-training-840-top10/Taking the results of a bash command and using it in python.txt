Query: Taking the results of a bash command and using it in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5745049)
 Instead of os.system, I recommend you to use the subprocess module: http://docs.python.org/library/subprocess.html#module-subprocess 

 With that module, you can communicate (input and output) with a shell. The documentation explains the details of how to use it. 

 Hope this helps! 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13119122)
 Use this script, worked for me :
 

  #!/bin/bash  
source /path/to/active
gunicorn_django -c $(pwd)/path/to/conffilefrom/presentworkingdirectory -D
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5745133)
 First up, the use of  input()  is discouraged as it expects the user to type in valid Python expressions. Use  raw_input()  instead: 

  app = raw_input('Name of the application: ')
  

 Next up, the return value from  system('pidof')  isn't the PID, it's the exit code from the  pidof  command, i.e. zero on success, non-zero on failure. You want to http://docs.python.org/library/subprocess.html#replacing-bin-sh-shell-backquote of  pidof . 

  import subprocess

# Python 2.7 only
pid = int(subprocess.check_output(['pidof', app]))

# Python 2.4+
pid = int(subprocess.Popen(['pidof', app], stdout=subprocess.PIPE).communicate()[0])

# Older (deprecated)
pid = int(os.popen('pidof ' + app).read())
  

 The next line is missing a space after the  grep  and would have resulted in a command like  grep1234 . Using the string formatting operator  %  will make this a little easier to spot: 

  os.system('top -d 30 | grep %d > test.txt' % (pid))
  

 The third line is badly quoted and should have caused a syntax error. Watch out for the single quotes inside of single quotes. 

  os.system("awk '{print $10, $11}' test.txt > test2.txt")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47814300)
 Use  bash -c  command: 

  find . -type f -exec bash -c 'mv "$1" $(urlencode "$1")' _ {}  \;
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38744502)
 I ended up using this. 

  import subprocess
import sys
import re

HOST = "user@" + box
COMMAND = 'my long command with many many flags in single quotes'

ssh = subprocess.Popen(["ssh", "%s" % HOST, COMMAND],
                       shell=False,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
result = ssh.stdout.readlines()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/17243207)
  subprocess.Popen(['/my/file/path/programname.sh arg1 arg2 %s' % arg3], shell = True).
  

 If you use  shell = True  the script and its arguments have to be passed as a string. Any other elements in the  args  sequence will be treated as arguments to the shell.  

 You can find the complete docs at http://docs.python.org/2/library/subprocess.html#subprocess.Popen. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/38123452)
 This was a long time ago, but the solution I ended up taking was to write quick and very-dirty scripts using a combination of python cProfile, awk, grep, and bash.  The first (main) script indexed the files and called the other scripts, a second script ran python cProfile on (one) input file and formatted the output for easy parsing, and a third script combined the results. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14055895)
 Execute a cygwin shell (e.g.  bash ) and have it run your script, instead of running your script directly: 

  subprocess.check_output("C:/cygwin/bin/bash.exe ./listChains.sh < 2p31protein.pdb")
  

 Alternatively, associate the  .sh  filetype extension to open with  bash.exe . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12205137)
  

  ./run $( python blah.py var1 var2 )
  

 The  $(  )  syntax opens a subshell, and runs the command. The stdout output is then dumped in its place 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6379916)
 tshark is taking the  '  from  '%s' . don't use the single-quotes: 

  cmd = r"tshark -r %s -e frame.number -e ip.src_host -e tcp.srcport -E separator=%s -T fields tcp" % (filename, sep)
  

 when you ran it from the command line, Bash stripped the single-quotes off and tshark didn't see them. 



