Query: ISO Time (ISO 8601) in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28147286)
 Local to ISO&nbsp;8601: 

  import datetime
datetime.datetime.now().isoformat()
  

 UTC to ISO&nbsp;8601: 

  import datetime
datetime.datetime.utcnow().isoformat()
  

 Local to ISO&nbsp;8601 without microsecond: 

  import datetime
datetime.datetime.now().replace(microsecond=0).isoformat()
  

 UTC to ISO&nbsp;8601 with TimeZone information (Python&nbsp;3): 

  import datetime
datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).isoformat()
  

 Local to ISO&nbsp;8601 with TimeZone information (Python&nbsp;3): 

  import datetime, time

# Calculate the offset taking into account daylight saving time
utc_offset_sec = time.altzone if time.localtime().tm_isdst else time.timezone
utc_offset = datetime.timedelta(seconds=-utc_offset_sec)
datetime.datetime.now().replace(tzinfo=datetime.timezone(offset=utc_offset)).isoformat()
  

 For Python 2, see and use https://pypi.python.org/pypi/pytz/. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15142736)
 I found the datetime.isoformat in http://docs.python.org/2/library/datetime.html.  

  datetime.isoformat([sep])

Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.mmmmmm or, if microsecond is 0, YYYY-MM-DDTHH:MM:SS

If utcoffset() does not return None, a 6-character string is appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if microsecond is 0 YYYY-MM-DDTHH:MM:SS+HH:MM

The optional argument sep (default 'T') is a one-character separator, placed between the date and time portions of the result. For example,
>>>

>>> from datetime import tzinfo, timedelta, datetime
>>> class TZ(tzinfo):
...     def utcoffset(self, dt): return timedelta(minutes=-399)
...
>>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
'2002-12-25 00:00:00-06:39'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26553001)
 Both ways: 

 Epoch to ISO time: 

  isoTime = time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(epochTime))
  

 ISO time to Epoch: 

  epochTime = time.mktime(time.strptime(isoTime, '%Y-%m-%dT%H:%M:%SZ'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49471822)
 Here's one way to get from A to B: 

  >>> import datetime
... 
... d = datetime.datetime.now()
... print(d)
... print(d.isoformat())
... print(d.isocalendar())
... 
... yr, weeknum, weekday = map(str, d.isocalendar())
... weeknum = '0' + weeknum if len(weeknum) == 1 else weeknum
... weekday = '0' + weekday
... '-'.join((yr, weeknum, weekday)) + d.isoformat()[10:]
... 
2018-03-24 22:01:33.781735
2018-03-24T22:01:33.781735
(2018, 12, 6)
'2018-12-06T22:01:33.781735'
  

  

  >>> def customiso(dt):
...     yr, weeknum, weekday = map(str, dt.isocalendar())
...     weeknum = '0' + weeknum if len(weeknum) == 1 else weeknum
...     weekday = '0' + weekday
...     return '-'.join((yr, weeknum, weekday)) + dt.isoformat()[10:]
... 

>>> customiso(d)
'2018-12-06T22:01:33.781735'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9628279)
  Python datetime to ISO-8601 String:  

  >>> from datetime import datetime
>>> now    = datetime.utcnow()
>>> string = now.strftime("%Y-%m-%dT%H:%M:%S +0000")                # Manually specifying ' +0000' since we know we have UTC time.
>>> 
>>> string
'2012-03-08T21:19:26 +0000'
  

  ISO-8601 String to Python datetime:  

  >>> from datetime import datetime
>>> string = "2012-03-08T21:19:26 +0000"
>>> time   = datetime.strptime(string, "%Y-%m-%dT%H:%M:%S +0000")   # Only works for UTC time.
>>> 
>>> time
datetime.datetime(2012, 3, 8, 21, 18, 31)
  

  NSDate to ISO-8601 NSString:  

  NSDate          *now            = [NSDate date];
NSDateFormatter *dateFormatter  = [[[NSDateFormatter alloc] init] autorelease];
NSLocale        *locale         = [[[NSLocale alloc] initWithLocaleIdentifier:@"en_US"] autorelease];
NSTimeZone      *timeZone       = [NSTimeZone timeZoneWithName:@"UTC"];
[dateFormatter setLocale:locale];                                   // Using "en_US" for locale ?eliminates/reduces? issues with systems running different locales.
[dateFormatter setTimeZone:timeZone];
[dateFormatter setFormatterBehavior:NSDateFormatterBehavior10_4];   // Explicitly re-stating default behavior for 10.4+.
[dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss Z"];
NSString        *iso8601String  = [dateFormatter stringFromDate:now];

NSLog(@"%@", iso8601String);
2012-03-09T02:44:37 +0000
  

  ISO-8601 NSString to NSDate:  

  NSString        *iso8601String = @"2012-03-09T20:37:49 +0000";
NSDateFormatter *dateFormatter  = [[[NSDateFormatter alloc] init] autorelease];
NSLocale        *locale         = [[[NSLocale alloc] initWithLocaleIdentifier:@"en_US"] autorelease];
[dateFormatter setLocale:locale];                                   // Using "en_US" for locale ?eliminates/reduces? issues with systems running different locales.
[dateFormatter setFormatterBehavior:NSDateFormatterBehavior10_4];   // Explicitly re-stating default behavior for 10.4+.
[dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss Z"];
NSDate *date = [dateFormatter dateFromString:iso8601String];

NSLog(@"%@", date);
2012-03-09 20:37:49 +0000
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2151151)
 You'll need to use  os.stat  to get the file creation time and a combination of  time.strftime  and  time.timezone  for formatting: 

  >>> import time
>>> import os
>>> t = os.stat('C:/Path/To/File.txt').st_ctime
>>> t = time.localtime(t)
>>> formatted = time.strftime('%Y-%m-%d %H:%M:%S', t)
>>> tz = str.format('{0:+06.2f}', float(time.timezone) / 3600)
>>> final = formatted + tz
>>> 
>>> final
'2008-11-24 14:46:08-02.00'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34006019)
 Here is what I use to convert to the XSD datetime format: 

  from datetime import datetime
datetime.now().replace(microsecond=0).isoformat()
# You get your ISO string
  

 I came across this question when looking for the XSD date time format ( xs:dateTime ). I needed to remove the microseconds from  isoformat . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52187229)
 ISO&nbsp;8601 allows a compact representation with no separators except for the  T , so I like to use this one-liner to get a quick timestamp string: 

  >>> datetime.datetime.utcnow().strftime("%Y%m%dT%H%M%S.%fZ")
'20180905T140903.591680Z'
  

 If you don't need the microseconds, just leave out the  .%f  part: 

  >>> datetime.datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
'20180905T140903Z'
  

 For local time: 

  >>> datetime.datetime.now().strftime("%Y%m%dT%H%M%S")
'20180905T140903'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/27506674)
 https://docs.python.org/2/library/datetime.html#datetime.datetime.utcfromtimestamp converts seconds since the epoch to the corresponding UTC https://docs.python.org/2/library/datetime.html#datetime-objects.  

  datetime.datetime  objects have a https://docs.python.org/2/library/datetime.html#datetime.date.isoformat which returns the date as a string in ISO 8601 format. 

  In [6]: import datetime as DT

In [7]: seconds_since_epoch = 0

In [8]: DT.datetime.utcfromtimestamp(seconds_since_epoch)
Out[8]: datetime.datetime(1970, 1, 1, 0, 0)

In [9]: DT.datetime.utcfromtimestamp(seconds_since_epoch).isoformat()
Out[9]: '1970-01-01T00:00:00'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/4036669)
 I agree with Jarek, and I furthermore note that the ISO offset separator character is a colon, so I think the final answer should be: 

  isodate.datetime_isoformat(datetime.datetime.now()) + str.format('{0:+06.2f}', -float(time.timezone) / 3600).replace('.', ':')
  



