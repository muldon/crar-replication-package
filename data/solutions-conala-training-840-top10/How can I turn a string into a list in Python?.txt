Query: How can I turn a string into a list in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31751092)
 This works in Python 2: 

  d = {j[0]:j[1] for j in [i.split(', ') for i in l]}
  

 Output: 

  {'CDE': 'Graps', 'ABC': 'Apple'}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19799559)
 First, join each element of  List1  to form a single, space-separated string. Then split that and convert each element of the resulting list to an integer. 

  >>> List1 = ['1 2 3 4 5', '6 7 8 9 10', '11 12 13 14 15']
>>> [ int(x) for x in ' '.join(List1).split()]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
  

 You can also use a nested  for  with the list comprehension: 

  >>> [ int(x) for y in List1 for x in y.split() ]
  

 You parse each  for  expression in the same order as a regular nested  for  loop. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10693785)
 The following Python code will turn your string into a list of strings: 

  import ast
teststr = "['aaa','bbb','ccc']"
testarray = ast.literal_eval(teststr)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27535702)
 Its what that  ast.literal_eval  is for  : 

  >>> ast.literal_eval('[1,2,3]')
[1, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15365745)
 You need to flatten the nested lists in your result and then turn it into a string. Here's one way to do it: 

  >>> import itertools
>>> result = [['I', 'R', 'A', ' ', 'O'], [' ', 'E', 'D', 'Y', 'U']]
>>> ''.join(itertools.chain(*result))
'IRA O EDYU'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/23974284)
 Use a https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions: 

  >>> rows = ['1\t0.00032822\n', '2\t0.00029311\n', '3\t0.0002048\n'] 
>>> [r.split()[1] for r in rows]
['0.00032822', '0.00029311', '0.0002048']
  

 What this does is: 

 
 Go through each item in  rows  in turn, 
 Give it the name  r , 
 Split each  r  into a list with https://docs.python.org/3/library/stdtypes.html#str.split, by cutting at whitespace (which can be spaces, tabs or newlines), 
 Take item 1 from that list (where item 0 is the first one, because Python uses https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi). 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30297530)
 You need to return the array after splitting it 

  def str_to_list(x):
    return x.split(', ')

print str_to_list("a, b, c, d, e")
  

 So yo can do 

  def str_to_list(x):
    return x.split(', ')

y = "a, b, c, d, e"
y = str_to_list(y)
print y
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21559234)
 the  ast  module has a  literal_eval  that does what you want 

  import ast
l = "['Hello', 'my', 'name', 'is', 'Apple']"
l1 = ast.literal_eval(l)
  

 Outputs: 

  ['Hello', 'my', 'name', 'is', 'Apple']
  

 http://docs.python.org/2/library/ast.html#ast.literal_eval 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41624067)
 I wanted a way to do this without using an extra module. First turn list to string, then append to an array: 

  dataset_list = ''.join(input_list)
dataset_array = []
for item in dataset_list.split(';'): # comma, or other
    dataset_array.append(item)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6726645)
 String to list: 

  >>> list('abc')
['a', 'b', 'c']
  

 List to string: 

  >>> ''.join(['a', 'b', 'c'])
'abc'
  



