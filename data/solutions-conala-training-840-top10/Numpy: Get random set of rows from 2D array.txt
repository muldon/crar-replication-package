Query: Numpy: Get random set of rows from 2D array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52947818)
 If you want to generate multiple random subsets of rows, for example if your doing RANSAC. 

  num_pop = 10
num_samples = 2
pop_in_sample = 3
rows_to_sample = np.random.random([num_pop, 5])
random_numbers = np.random.random([num_samples, num_pop])
samples = np.argsort(random_numbers, axis=1)[:, :pop_in_sample]
# will be shape [num_samples, pop_in_sample, 5]
row_subsets = rows_to_sample[samples, :]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52900203)
 I see permutation has been suggested. In fact it can be made into one line: 

  >>> A = np.random.randint(5, size=(10,3))
>>> np.random.permutation(A)[:2]

array([[0, 3, 0],
       [3, 1, 2]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44012891)
 If you need the same rows but just a random sample then, 

  import random
new_array = random.sample(old_array,x)
  

 Here x, has to be an 'int' defining the number of rows you want to randomly pick. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31794767)
 Another option is to create a random mask if you just want to down-sample your data by a certain factor. Say I want to down-sample to 25% of my original data set, which is currently held in the array  data_arr : 

  # generate random boolean mask the length of data
# use p 0.75 for False and 0.25 for True
mask = numpy.random.choice([False, True], len(data_arr), p=[0.75, 0.25])
  

 Now you can call  data_arr[mask]  and return ~25% of the rows, randomly sampled. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27815343)
 This is an old post, but this is what works best for me: 

  A[np.random.choice(A.shape[0], num_rows_2_sample, replace=False)]
  

 change the replace=False to True to get the same thing, but with replacement.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53866936)
 This is a similar answer to the one Hezi Rasheff provided, but simplified so newer python users understand what's going on (I noticed many new datascience students fetch random samples in the weirdest ways because they don't know what they are doing in python). 

 You can get a number of random indices from your array by using: 

  indices = np.random.choice(A.shape[0], amount_of_samples, replace=False)
  

 You can then use slicing with your numpy array to get the samples at those indices: 

  A[indices]
  

 This will get you the specified number of random samples from your data. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14262743)
  >>> A = np.random.randint(5, size=(10,3))
>>> A
array([[1, 3, 0],
       [3, 2, 0],
       [0, 2, 1],
       [1, 1, 4],
       [3, 2, 2],
       [0, 1, 0],
       [1, 3, 1],
       [0, 4, 1],
       [2, 4, 2],
       [3, 3, 1]])
>>> idx = np.random.randint(10, size=2)
>>> idx
array([7, 6])
>>> A[idx,:]
array([[0, 4, 1],
       [1, 3, 1]])
  

 Putting it together for a general case: 

  A[np.random.randint(A.shape[0], size=2), :]
  

 For non replacement (numpy 1.7.0+): 

  A[np.random.choice(A.shape[0], 2, replace=False), :]
  

 I do not believe there is a good way to generate random list without replacement before 1.7. Perhaps you can setup a small definition that ensures the two values are not the same. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45093891)
 As per https://github.com/numpy/numpy/issues/5344 issue, the feature was considered in 2014, but no substantial additions have been made to the API since then. There is, however, a better solution that cleverly makes use of  numpy.random.choice  and numpy's fancy indexing: 

 Starting with  

  In [102]: x = numpy.eye(3); x
Out[102]: 
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
  

 You may use  numpy.random.choice  to generate a list of random indices, like this: 

  In [103]: i = numpy.random.choice(3, 10); i
Out[103]: array([2, 2, 0, 2, 1, 1, 2, 0, 0, 1])
  

 Then use  i  to index  x : 

  In [104]: x[i]
Out[104]: 
array([[ 0.,  0.,  1.],
       [ 0.,  0.,  1.],
       [ 1.,  0.,  0.],
       [ 0.,  0.,  1.],
       [ 0.,  1.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.],
       [ 1.,  0.,  0.],
       [ 1.,  0.,  0.],
       [ 0.,  1.,  0.]])
  

 With a workaround this efficient, I don't believe a change to the API is necessary. 

 Do note that, for generating rows with a certain probability distribution, the procedure is the same. Specify a probability distribution on the indices itself. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54440432)
 This is a way to do it: 

  import numpy as np

np.random.seed(100)
# Make input
arr1 = np.random.randint(1, 11, (5, 5)).astype('float')
# Select five indices from the whole array
idx_nan = np.random.choice(arr1.size, 5, replace=False)
# "Unravel" the indices and set their values to NaN
arr1[np.unravel_index(idx_nan, arr1.shape)] = np.nan
print(arr1)
  

 Output: 

<pre class="lang-none prettyprint-override"> [[ 9.  9.  4.  8.  8.]
 [ 1.  5.  3.  6.  3.]
 [ 3. nan nan nan  9.]
 [ 5.  1. 10.  7.  3.]
 [ 5. nan  6.  4. nan]]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/46984851)
 . 

 We could stack two random arrays with properly assigned  low  and  high  values - 

  In [39]: n = 10000 # no. of rows

In [40]: np.c_[np.random.randint(1,11,(n)), np.random.randint(11,21,(n))]
Out[40]: 
array([[ 6, 19],
       [ 8, 18],
       [ 6, 11],
       ..., 
       [ 5, 12],
       [10, 16],
       [ 7, 17]])

In [41]: _.min(0), _.max(0) # verify
Out[41]: (array([ 1, 11]), array([10, 20]))
  

 Another would be to create 2D random array with  [1,10]  interval and then add  10  offset for the second column, thus getting us  [11,20]  interval for it - 

  In [42]: np.random.randint(1,11,(n,2)) + [0,10]
Out[42]: 
array([[10, 16],
       [ 9, 12],
       [ 4, 17],
       ..., 
       [ 7, 15],
       [ 5, 11],
       [ 4, 14]])

In [43]: _.min(0), _.max(0) # verify
Out[43]: (array([ 1, 11]), array([10, 20]))
  



