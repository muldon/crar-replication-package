Query: Regex punctuation split [Python]
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19894514)
 Using  string.punctuation  and character class: 

  >>> from string import punctuation
>>> r = re.compile(r'[\s{}]+'.format(re.escape(punctuation)))
>>> r.split('dss!dfs^  #$% jjj^')
['dss', 'dfs', 'jjj', '']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19894589)
 The official Python documentation has a good example for this one. It will split on all non-alphanumeric characters (whitespace and punctuation). Literally \W is the character class for all Non-Word characters. Note: the underscore "_" is considered a "word" character and will not be part of the split here. 

  re.split('\W+', 'Words, words, words.')
  

 See https://docs.python.org/3/library/re.html for more examples, search page for "re.split" 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1157498)
 Another way, without regex 

  import string
punc = string.punctuation
thestring = "Hey, you - what are you doing here!?"
s = list(thestring)
''.join([o for o in s if not o in punc]).split()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33393581)
 A modified version of larsks' answer, where you don't need to type all punctuation characters yourself: 

  import re, string

re.split("[" + string.punctuation + "]+", test)
['hello', 'how are you', 'I am fine', 'thank you', ' And you', '']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9797418)
 Since you don't want to use the re module, you can use this: 

   test.replace(',',' ').replace('.',' ').replace('?',' ').split()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9797403)
 This is the best way I can think of without using the re module: 

  "".join((char if char.isalpha() else " ") for char in test).split()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9797398)
 If you want to split a string based on  multiple  delimiters, as in your example, you're going to need to use the  re  module despite your bizarre objections, like this: 

  >>> re.split('[?.,]', test)
['hello', 'how are you', 'I am fine', 'thank you', ' And you', '']
  

 It's  possible  to get a similar result using  split , but you need to call split once for every character, and you need to iterate over the results of the previous split.  This works but it's u-g-l-y: 

  >>> sum([z.split() 
... for z in sum([y.split('?') 
... for y in sum([x.split('.') 
... for x in test.split(',')],[])], [])], [])
['hello', 'how', 'are', 'you', 'I', 'am', 'fine', 'thank', 'you', 'And', 'you']
  

 This uses  sum()  to flatten the list returned by the previous iteration. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14557619)
  >>> re.split(r'[?!]*', 'How????are!!!you')
['How', 'are', 'you']
  

 As for why  \?*  doesn't work, just look at what  re.findall  finds: 

  >>> re.findall(r'\?*', 'How????are!!!you')
['', '', '', '????', '', '', '', '', '', '', '', '', '', '']
  

 The alternation always takes the first branch if possible.  re.split  tries to only split by nonempty matches, so you end up splitting by  ?  but not  !  (since  \?*  will match any empty string,  \!*  will never match in a non-overlapping fashion). 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9797442)
 You can write a function to extend usage of  .split() : 



  def multi_split(s, seprators):
    buf = [s]
    for sep in seprators:
        for loop, text in enumerate(buf):
            buf[loop:loop+1] = [i for i in text.split(sep) if i]
    return buf
  

 And try it: 

  >>> multi_split('hello,how are you?I am fine,thank you. . 
 ['hello', 'how', 'are', 'you', 'I', 'am', 'fine', 'thank', 'you', 'And', 'you']  

 This will be more clearer and can be used in other situations. 



