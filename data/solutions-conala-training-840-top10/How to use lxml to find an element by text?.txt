Query: How to use lxml to find an element by text?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10258841)
 You'll find the missing text here 

  >>> some_tag.find("strong").tail
' World'
  

 Look at http://lxml.de/tutorial.html and search for "tail". 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14300008)
 . Use  text()=  rather than  @text  (which indicates an attribute). 

  e = root.xpath('.//a[text()="TEXT A"]')
  

 Or, if you know only that the text contains "TEXT A", 

  e = root.xpath('.//a[contains(text(),"TEXT A")]')
  

 Or, if you know only that text starts with "TEXT A", 

  e = root.xpath('.//a[starts-with(text(),"TEXT A")]')
  

 See http://www.w3.org/TR/xpath/#section-String-Functions for more on the available string functions. 

 

 For example, 

  import lxml.html as LH

text = '''\
<html>
    <body>
        /1234.html
        /3243.html
        /7445.html
    <body>
</html>'''

root = LH.fromstring(text)
e = root.xpath('.//a[text()="TEXT A"]')
print(e)
  

  

  [<Element a at 0xb746d2cc>]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17764708)
 Another way that looks more straightforward to me: 

  results = []
root = lxml.hmtl.fromstring(the_html_above)
for tag in root.iter():
    if "TEXT A" in tag.text
        results.append(tag)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45930758)
 you can use extract content by using lxml
lxml library allow you use xpath to extract content from html 

  from lxml import etree
selector=etree.HTML(pageText)
article_text=selector.xpath('//div[@class="article-block-multiple live-snippet"]/div[1]')[0].text
  

 i don't use BeautifulSoup.I think you can use BeautifulSoup like this 

  table = soup.find_all("div",{ "class": "article-block-multiple live-snippet"]"})
  

 then use find child element ,find the first div element 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28737115)
 Here is one way to do it: 

  from lxml import etree

# Create an ElementTree instance 
tree = etree.parse("bookstore.xml")  

# Get all 'book' elements that have a 'name' child with a string value of 'abc'
books = tree.xpath('book[name="abc"]')

# Print name and price of those books
for book in books:
    print book.find("name").text, book.find("price").text
  

 Output when using the XML in the question: 

  abc 30
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32494748)
 You need to get the  strong  tag element, and then use  element.tail  to get the text after it. Example - 

  In [12]: from lxml import html

In [13]: tree = html.fromstring(" text1 : text2 ")

In [14]: x = tree.xpath('//strong[text()="text1"]')

In [15]: for i in x:
   ....:     print(i.tail)
   ....:
: text2
  

 This would also work for  lxml.etree  , not just  lxml.html  . Example - 

  In [16]: from lxml import etree

In [18]: tree = etree.fromstring("<elem> text1 : text2</elem>")

In [19]: x = tree.xpath('//strong[text()="text1"]')

In [20]: for i in x:
   ....:     print(i.tail)
   ....:
: text2
  

 

  

  In [21]: x = tree.xpath('//strong[text()="text1"]')

In [23]: for i in x:
   ....:     print('text :',i.text)
   ....:     print('tail :',i.tail)
   ....:
text : text1
tail : : text2
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/39832753)
   .text , use  text_content()  method: 

  In [5]: a.find(".//i").getparent().text_content().strip()
Out[5]: 'sometext'
  

 Or, you can get to the  following text sibling  of the  i  element: 

  In [6]: a.xpath(".//i/following-sibling::text()")[0].strip()
Out[6]: 'sometext'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10261540)
  from lxml import etree

XML = '<some_tag class="abc"> Hello  World</some_tag>'

some_tag = etree.fromstring(XML)

for element in some_tag:
    print element.tag, element.text, element.tail
  

 Output: 

   <pre class="lang-none prettyprint-override"> strong Hello  World
  

 For information on the  .text  and  .tail  properties, see: 

 
 http://lxml.de/tutorial.html#elements-contain-text 
 http://infohost.nmt.edu/tcc/help/pubs/pylxml/web/etree-view.html 
 

 To get exactly the result that you expected, use 

  print etree.tostring(some_tag.find("strong"))
  

 Output: 

   Hello  World
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/10837113)
 If you want to use the standard library http://docs.python.org/library/xml.etree.elementtree.html, rather than lxml, you can use iteration to find all sub elements with a particular text value. For example: 

  import sys
import xml.etree.ElementTree as etree

s = """<root>
    <element>A</element>
    <element>B</element>
</root>"""

e = etree.fromstring(s)

if sys.version_info < (2, 7):
    found = [element for element in e.getiterator() if element.text == 'A']
else:
    found = [element for element in e.iter() if element.text == 'A']

print found[0].text # This prints 'A', honestly!
  

 Note: you may want to perform some stripping of the  text  value of your elements in the list comprehension. 

  Edit  This will work to any depth in your XML tree. For example,  

  s = """<root>
    <element>A</element>
    <element><sub>A</sub></element>
</root>"""

found = [element for element in e.getiterator() if element.text == 'A']

for f in found:
    print f
  

   

  <Element element at 7f20a882e3f8>
<Element sub at 7f20a882e4d0>
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36572225)
 Looks like  lxml  doesn't provide a special API to create text node. You can simply set  text  property of a parent element to create or modify text node in that element, for example : 

  >>> from lxml import etree
>>> raw = '''<root><foo/></root>'''
>>> root = etree.fromstring(raw)
>>> root.text = 'bar'
>>> etree.tostring(root)
'<root>bar<foo/></root>'
  



