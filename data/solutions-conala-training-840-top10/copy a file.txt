Query: copy a file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/36396465)
<pre class="lang-py prettyprint-override"> from subprocess import call
call("cp -p <file> <file>", shell=True)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44996087)
 You can use one of the copy functions from the https://docs.python.org/3/library/shutil.html package: 

 
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Function              preserves     supports          accepts     copies other
                      permissions   directory dest.   file obj    metadata  
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
https://docs.python.org/3/library/shutil.html#shutil.copy              ✔             ✔                 ☐           ☐
<a href="https://docs.python.org/3/library/shutil.html#shutil.copy2"2              ✔             ✔                 ☐           ✔
<a href="https://docs.python.org/3/library/shutil.html#shutil.copyfile"file           ☐             ☐                 ☐           ☐
<a href="https://docs.python.org/3/library/shutil.html#shutil.copyfileobj"fileobj        ☐             ☐                 ✔           ☐
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 

 Example: 

  import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15234107)
 Python's shutil is a much more portable method of copying files.  Try the sample below: 

  import os
import sys
import shutil

source = raw_input("Enter source file path: ")
dest = raw_input("Enter destination path: ")

if not os.path.isfile(source):
    print "Source file %s does not exist." % source
    sys.exit(3)

try:
    shutil.copy(source, dest)
except IOError, e:
    print "Could not copy file %s to destination %s" % (source, dest)
    print e
    sys.exit(3)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/125810)
 Copying a file is a relatively straightforward operation as shown by the examples below, but you should instead use the https://docs.python.org/library/shutil.html for that. 

<pre class="lang-py prettyprint-override"> def copyfileobj_example(source, dest, buffer_size=1024*1024):
    """      
    Copy a file from source to dest. source and dest
    must be file-like objects, i.e. any object with a read or
    write method, like for example StringIO.
    """
    while True:
        copy_buffer = source.read(buffer_size)
        if not copy_buffer:
            break
        dest.write(copy_buffer)
  

 If you want to copy by filename you could do something like this: 

<pre class="lang-py prettyprint-override"> def copyfile_example(source, dest):
    # Beware, this example does not handle any edge cases!
    with open(source, 'rb') as src, open(dest, 'wb') as dst:
        copyfileobj_example(src, dst)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/33283187)
 https://docs.python.org/2.7/library/shutil.html?highlight=shutil.copy#shutil.copy will not copy the file to a new location, it will overwrite the file.   

 
   Copy the file src to the file or directory dst. If dst is a directory,
   a file with the same basename as src is created (or overwritten)  in
  the directory specified. Permission bits are copied. src and dst are
  path names given as strings. 
 

 So you have to check yourself if the destination file exists and alter the destination as appropriate. For example, this is what you can use to achieve a safe copy: 

  def safe_copy(file_path, out_dir, dst = None):
    """Safely copy a file to the specified directory. If a file with the same name already 
    exists, the copied file name is altered to preserve both.

    :param str file_path: Path to the file to copy.
    :param str out_dir: Directory to copy the file into.
    :param str dst: New name for the copied file. If None, use the name of the original
        file.
    """
    name = dst or os.path.basename(file_path)
    if not os.path.exists(os.path.join(out_dir, name)):
        shutil.copy(file_path, os.path.join(out_dir, name))
    else:
        base, extension = os.path.splitext(name)
        i = 1
        while os.path.exists(os.path.join(out_dir, '{}_{}{}'.format(base, i, extension))):
            i += 1
        shutil.copy(file_path, os.path.join(out_dir, '{}_{}{}'.format(base, i, extension)))
  

 Here, a  '_number'  is inserted right before the extension to generate a unique destination name in case of duplicate. Like  'foo_1.txt' . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53053105)
 Here is another example of a recursive copy function that lets you copy the contents of the directory (including sub-directories) one file at a time, which I used to solve this problem. 

  import os
import shutil

def recursive_copy(src, dest):
    """
    Copy each file from src dir to dest dir, including sub-directories.
    """
    for item in os.listdir(src):
        file_path = os.path.join(src, item)

        # if item is a file, copy it
        if os.path.isfile(file_path):
            shutil.copy(file_path, dest)

        # else if item is a folder, recurse 
        elif os.path.isdir(file_path):
            new_dest = os.path.join(dest, item)
            os.mkdir(new_dest)
            recursive_copy(file_path, new_dest)
  

  EDIT:  If you can, definitely just use  shutil.copytree(src, dest) . This requires that that destination folder does not already exist though. If you need to copy files into an existing folder, the above method works well! 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54537427)
 One problem here is that you do not specify the path of the file. As you are executing the command from the parent directory, the script has no way of knowing that  testfile2.txt  is in a subdirectory of your input directory. To fix this, use: 

  shutil.copy(os.path.join(foldername, filename), copyDirAbs)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40319071)
 The cause for  shutil.copy()  not working is that you are not using the latest Python, Python 3.6  shutil.copy()   can  handle  Path  objects (or subclasses thereof). That for older versions of Python this throws an error is because those implementations of  shutil  expect string arguments for  copy , and not  pathlib.Path  type arguments.  

  

  my_file.copy(to_file)
  

 You can subclass Path to include such a method, and adapt the creation of  my_file . I find it easier to just graft/monkey-patch/duck-punch it on the existing  pathlib.Path  

  from pathlib import Path


def _copy(self, target):
    import shutil
    assert self.is_file()
    shutil.copy(str(self), str(target))  # str() only there for Python < (3, 6)

Path.copy = _copy
  

 You can put this code anywhere you like, as long as it gets executed before calling the  .copy  method on any of the  Path  instances.   .copy()  can be a file or a directory. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45694203)
 I suggest using https://stackoverflow.com/a/123212/6327658 answer, but supposing you have a  text file  and don't want to use additional libraries in your code just to copy it, you can use the following one-liner: 

  with open(source, 'r') as src, open(dest, 'w') as dst: dst.write(src.read())
  



