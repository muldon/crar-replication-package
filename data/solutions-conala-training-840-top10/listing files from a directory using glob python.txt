Query: listing files from a directory using glob python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/168424)
 I've done this in the past for a Python script to determine the last updated files in a directory:  

  import glob
import os

search_dir = "/mydir/"
# remove anything from the list that is not a file (directories, symlinks)
# thanks to J.F. Sebastion for pointing out that the requirement was a list 
# of files (presumably not including directories)  
files = filter(os.path.isfile, glob.glob(search_dir + "*"))
files.sort(key=lambda x: os.path.getmtime(x))
  

 That should do what you're looking for based on file mtime. 

  EDIT : Note that you can also use os.listdir() in place of glob.glob() if desired - the reason I used glob in my original code was that I was wanting to use glob to only search for files with a particular set of file extensions, which glob() was better suited to. To use listdir here's what it would look like:  

  import os

search_dir = "/mydir/"
os.chdir(search_dir)
files = filter(os.path.isfile, os.listdir(search_dir))
files = [os.path.join(search_dir, f) for f in files] # add path to each file
files.sort(key=lambda x: os.path.getmtime(x))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40216619)
 Use glob to list all files and directories. . 

  p = Path('C:\\Users\\akrio\\Desktop\\Test').glob('**/*')
files = [x for x in p if x.is_file()]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16865840)
 This is where fnmatch comes very handy: 

  import fnmatch

print len(fnmatch.filter(os.listdir(dirpath), '*.txt'))
  

 More details: http://docs.python.org/2/library/fnmatch.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18783474)
 Here's my answer using glob without filter if you want to read files with a certain extension in date order (Python 3).   

  dataset_path='/mydir/'   
files = glob.glob(dataset_path+"/morepath/*.extension")   
files.sort(key=os.path.getmtime)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22202074)
 According to http://code.google.com/p/unladen-swallow/source/browse/trunk/Lib/fnmatch.py, the only special characters it recognizes are  * ,  ? ,  [  and  ] . Hence any pattern that does not contain any of these will only match itself. We can therefore implement the  cheapglob  mentioned in the question as 

  def cheapglob(s): return glob.glob(s) if re.search("[][*?]", s) else [s]
  

 This will only hit the file system for patterns which include special characters. This differs subtly from a plain  glob.glob : For a pattern with no special characters like "foo.txt", this function will return  ["foo.txt"]  regardless of whether that file exists, while  glob.glob  will return  []  if the file isn't there. So the calling function will need to handle the possibility that some of the returned files might not exist. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49534391)
 Another very readable variant for Python 3.4+ is using pathlib.Path.glob: 

  from pathlib import Path
folder = '/foo'
[f for f in Path(folder).glob('*') if f.is_file()]
  

 It is simple to make more specific, e.g. only look for Python source files which are not symbolic links, also in all subdirectories: 

  [f for f in Path(folder).glob('**/*.py') if not f.is_symlink()]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17831807)
  glob.glob()  returns a list. . 

  WD = "E:\\AA"
import glob
files = glob.glob ('*.jpg')
with open ('infiles.txt', 'w') as in_files:
    for eachfile in files: in_files.write(eachfile+'\n')
  



