Query: Python regex split case insensitive in 2.6
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/8994027)
 Create a  re.RegexObject  using  re.compile()   and then call it's  split()  method. 

 Example: 

  >>> re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')
['foo', 'bar']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8994008)
 You can just add (?i) to the regular expression to make it case insensitive:  

  >>> import re
>>> reg = "(foo)(?i)"
>>> re.split(reg, "fOO1foo2FOO3")
['', 'fOO', '1', 'foo', '2', 'FOO', '3']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20782263)
 You should use regex: 

  re.split('\s*[Ff]eat\.', a)
  

  and  and  or  do some boolean judgement. 

  "feat." or "Feat." -> "feat." if "feat." else "Feat." -> "feat."

"feat." and "Feat." -> "Feat." if "feat." else "feat." -> "Feat."
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20782251)
 Use a regex instead: 

  >>> import re
>>> regex = re.compile(r"\s*feat\.\s*", flags=re.I)
>>> regex.split("abc feat. def")
['abc', 'def']
>>> regex.split("abc Feat. def")
['abc', 'def']
  

 or, if you don't want to allow  FEAT.  or  fEAT.  (which this regex would): 

  >>> regex = re.compile(r"\s*[Ff]eat\.\s*")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35976915)
 I believe that's what you're looking for. You may also add the flag  re.IGNORECASE  like so  res = re.split(regex, s, re.IGNORECASE)  if you wish for it to be case insensitive. See https://docs.python.org/3/library/re.html#re.split for further documentation. 

  import re
trails = ("Fire trail", "Firetrail", "Fire Trail", "FT", "firetrail")

# \b means word boundaries.
regex = r"\b(?:{})\b".format("|".join(trails))

s = """Poverty Point FT
Cedar Party Fire Trails
Mailbox Trail
Carpet Snake Creek Firetrail
Pretty Gully firetrail - Roayl NP"""

res = re.split(regex, s)
  

  UPDATE:  

 In case you go line by line, and don't want the end you can do this: 

  import re
trails = ("Fire trail", "Firetrail", "Fire Trail", "FT", "firetrail", "Trail", "Trails")

# \b means word boundaries.
regex = r"\b(?:{}).*".format("|".join(trails))

s = """Poverty Point FT
Cedar Party Fire Trails
Mailbox Trail
Carpet Snake Creek Firetrail
Pretty Gully firetrail - Roayl NP"""

res = [r.strip() for r in re.split(regex, s)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42406605)
 The case-insensitive marker,  (?i)  can be incorporated directly into the regex pattern: 

  >>> import re
>>> s = 'This is one Test, another TEST, and another test.'
>>> re.findall('(?i)test', s)
['Test', 'TEST', 'test']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5206399)
 As to making the matching case insensitive, you can use the  I  or  IGNORECASE  flags from the  re  module, for example when compiling your regex: 

  regex = re.compile("^[a-ząčęėįšųūž]+_\d+$", re.I)
  

 As to removing the lines not matching this regex, you can simply construct a new string consisting of the lines that  do  match: 

  new_s = "\n".join(line for line in s.split("\n") if re.match(regex, line))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/376889)
 Here's a better way to do it than some of the other solutions: 

  re.findall(r'(?i)(?<![a-z0-9])[a-f0-9]{32}(?![a-z0-9])', data)
  

 This ensures that the match must be a string of 32 hexadecimal digit characters,  but which is not contained within a larger string of other alphanumeric characters.  With all the other solutions, if there is a string of 37 contiguous hexadecimals the pattern would match the first 32 and call it a match, or if there is a string of 64 hexadecimals it would split it in half and match each half as an independent match. Excluding these is accomplished via the lookahead and lookbehind assertions, which are non-capturing and will not affect the contents of the match. 

 i) flag which will makes the pattern case-insensitive which saves a little bit of typing, and that wrapping the entire pattern in parentheses is superfluous. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/787881)
 You can supply the flag re.IGNORECASE to functions in the re module as described in the http://docs.python.org/library/re.html. 

  matcher = re.compile(myExpression, re.IGNORECASE)
  



