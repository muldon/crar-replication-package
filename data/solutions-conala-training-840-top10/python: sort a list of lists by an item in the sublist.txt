Query: python: sort a list of lists by an item in the sublist
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/853055)
 It looks likes you want, for a list of sublists and a given item, to return a list of pairs where each pair is (the index of the sublist, the index of the item within the sublist). You can do that using http://docs.python.org/tutorial/datastructures.html#list-comprehensions and Python's built in http://docs.python.org/library/functions.html#enumerate function: 

  def getPosition(list, item):
    return [(i, sublist.index(item)) for i, sublist in enumerate(list)]
  

  Edit:  See @scribble's answer above/below. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18142120)
 You can custom the sort behaviour by pass a key and reverse.  sorted  will return a new list. If in-place sort wanted, use  list.sort . 

  >>> a = [["user1", 100], ["user2", 234], ["user3", 131]]
>>> sorted(a, key=lambda x: x[1], reverse=True)
[['user2', 234], ['user3', 131], ['user1', 100]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6070051)
  >>> from operator import itemgetter
>>> L=[['a',[10]], ['b',[1]], ['c',[5,10]], ['d',[5,1,-10]], ['e',[5,1,-1]]]
>>> sorted(L, key=itemgetter(1), reverse=True)
[['a', [10]], ['c', [5, 10]], ['e', [5, 1, -1]], ['d', [5, 1, -10]], ['b', [1]]]
>>> 
  

 I'd use itemgetter(1) here, which is roughly equivalent to the lambda function in the other answers. This effectively does the sort with the key being the sublists since they are item number 1. (item number 0 is the letters a-e) 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49478817)
 Python's list.sort() method is "stable", i. e. the relative order of items that compare equal does not change. Therefore you can also achieve the desired order by calling sort() twice: 

  >>> list1 = [[3, 1, 5], [0, 4, 1, 5], [4, 0, 1, 5]]
>>> list1.sort()  # sort by sublist contents
>>> list1.sort(key=len)  # sort by sublist length
>>> list1
[[3, 1, 5], [0, 4, 1, 5], [4, 0, 1, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53253921)
 why not flatten the initial list and go from there  

  flat_list = [item for sublist in m for item in sublist]  

 would return  [1,2,3,4,5,10,6,2,1]  so now you're really on  flat_list[2:]  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18142107)
 http://docs.python.org/2/library/functions.html#sorted accept optional  key  function and reverse parameter. 

  >>> sorted([["user1", 100], ["user2", 234], ["user3", 131]], key=lambda x: x[1], reverse=True)
[['user2', 234], ['user3', 131], ['user1', 100]]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46491437)
 This works. 

  list1=[[0.10, 0.90, 0.20], [0.15, 0.80], [0.68, 0.08, 0.30]]

list_lengths = [len(x) for x in list1]
flattened = [item for items in list1 for item in items]
items_sorted = sorted(flattened)

loc = 0
lists2 = []
for length in list_lengths:
    lists2.append(items_sorted[loc:loc+length])
    loc += length

print(lists2)
  

 You need to get list lengths at some point to build the final lists2. To get your ordered values properly, you flatten and sort the list, then you add lists to list2 by slicing your sorted items. 

 Note that this will work for arbitrary length lists and tuples. 



