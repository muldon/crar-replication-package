Query: Sort Pandas Dataframe by Date
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49702492)
 The  sort  method has been http://pandas.pydata.org/pandas-docs/version/0.17/generated/pandas.DataFrame.sort.html for DataFrames. It is now http://pandas.pydata.org/pandas-docs/version/0.17/generated/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values. After converting to datetime object using  df['Date']=pd.to_datetime(df['Date']) , 

  df.sort_values(by=['Date'])
  

 Note: to sort  in-place  and/or in a descending order (reverse-chronological): 

  df.sort_values(by=['Date'], inplace=True, ascending=False)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42964118)
 you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.assign.html method: 

  In [22]: df.assign(x=pd.to_datetime(df['date'])).sort_values('x').drop('x', 1)
Out[22]:
         date  int
2  10/15/2016    1
0   1/15/2017    2
1   2/15/2017    3
3   3/15/2017    4
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/52864590)
 The data looks like this 

  Date,Last
2016-12-30,1.05550
2016-12-29,1.05275
2016-12-28,1.04610
2016-12-27,1.05015
2016-12-23,1.05005
  

 Read the data by using pandas  

  import pandas as pd
df = pd.read_csv('data',sep=',')
# Displays the data head
print (df.head())
         Date     Last
0  2016-12-30  1.05550
1  2016-12-29  1.05275
2  2016-12-28  1.04610
3  2016-12-27  1.05015
4  2016-12-23  1.05005

# Sort column with name Date
df = df.sort_values(by = 'Date')
         Date     Last
4  2016-12-23  1.05005
3  2016-12-27  1.05015
2  2016-12-28  1.04610
1  2016-12-29  1.05275
0  2016-12-30  1.05550

# reset the index
df.reset_index(inplace=True)

# Display the data head after index reset
       index        Date     Last
0      4  2016-12-23  1.05005
1      3  2016-12-27  1.05015
2      2  2016-12-28  1.04610
3      1  2016-12-29  1.05275
4      0  2016-12-30  1.05550

# delete the index
del df['index']

# Display the data head
print (df.head())
         Date     Last
0  2016-12-23  1.05005
1  2016-12-27  1.05015
2  2016-12-28  1.04610
3  2016-12-29  1.05275
4  2016-12-30  1.05550
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42964133)
  numpy 's  argsort  returns the permutation necessary for sorting an array.  We can take advantage of that using  iloc .  So by converting the dates using  pd.to_datetime  then subsequently  grabbing the values and calling  argsort  we've done all that we need to sort the original dataframe without changing any of it's columns. 

  df.iloc[pd.to_datetime(df.date).values.argsort()]

         date  int
2  10/15/2016    1
0   1/15/2017    2
1   2/15/2017    3
3   3/15/2017    4
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43955728)
 I think you can use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html + http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html + http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DatetimeIndex.strftime.html + http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html: 

  df.index = pd.to_datetime(df.index, format='%d_%b')
df = df.sort_index()
df.index = df.index.strftime('%d_%b')
df.plot()
  

  

  np.random.seed(10)
df = pd.DataFrame({'a':[3,5,6,1]}, index=['11_May','12_May','1_May', '2_May'])
print (df)
        a
11_May  3
12_May  5
1_May   6
2_May   1

df.index = pd.to_datetime(df.index, format='%d_%b')
df = df.sort_index()
df.index = df.index.strftime('%d_%b')
print (df)
        a
01_May  6
02_May  1
11_May  3
12_May  5

df.plot()
  

 https://i.stack.imgur.com/yhDdf.png 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/28161433)
 You can use  pd.to_datetime()  to convert to a datetime object. It takes a format parameter, but in your case I don't think you need it. 

  >>> import pandas as pd
>>> df = pd.DataFrame( {'Symbol':['A','A','A'] ,
    'Date':['02/20/2015','01/15/2016','08/21/2015']})
>>> df
         Date Symbol
0  02/20/2015      A
1  01/15/2016      A
2  08/21/2015      A
>>> df['Date'] =pd.to_datetime(df.Date)
>>> df.sort('Date') # This now sorts in date order
        Date Symbol
0 2015-02-20      A
2 2015-08-21      A
1 2016-01-15      A
  

 For future search, you can change the sort statement: 

  >>> df.sort_values(by='Date') # This now sorts in date order
        Date Symbol
0 2015-02-20      A
2 2015-08-21      A
1 2016-01-15      A
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/31821546)
 You can use  pd.datetools.parse  to try and convert your date column (currently a string) into a datetime object; then you should be able to sort: 

  df = pd.DataFrame({'MEETING START TIME': ['10:30 AM','12:30 PM', '2:00 PM', '4:00 PM', '9:15 AM', '9:15 AM']})
df['MEETING START TIME'] = df['MEETING START TIME'].map(lambda x: pd.datetools.parse(x))
df.sort('MEETING START TIME')

Out[33]: 
   MEETING START TIME
5 2015-08-05 09:15:00
4 2015-08-05 09:15:00
0 2015-08-05 10:30:00
1 2015-08-05 12:30:00
2 2015-08-05 14:00:00
3 2015-08-05 16:00:00
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52784767)
 I changed your 'Sept' to 'September' to keep it consistent with the other months' naming convention. 

 Then I made an ordered list of month names with pd.date_range. 

 Subdivided the list by the values you had (keeps the correct month-order). 

 Made a categorical using that sublist, and then sorted on those values 

  import pandas as pd


df = pd.DataFrame([['August', 2], ['July', 3], ['September', 6]], columns=['A', 'B'])

full_month_list = pd.date_range('2018-01-01','2019-01-01', freq='MS').strftime("%B").tolist()
partial_month_list = [x for x in month_list if x in df['A'].values]
df['A'] = pd.Categorical(df['A'], partial_month_list)

df.sort_values('A')
  

  

      A           B
1   July        3
0   August      2
2   September   6
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54046640)
 First convert the  date  to date format , then we sort the value  b  using  sort_values  , and using  drop_duplicates  to get what you need  

  df=df.assign(days=df.date.dt.date).sort_values('b')
yourdf=pd.concat([df.drop_duplicates('days'),df.drop_duplicates('days',keep='last')]).\
        sort_index().\
          drop('days',1)
yourdf
Out[242]: 
   b                date
0  1 1999-12-29 23:59:12
2  3 1999-12-29 23:59:14
3  3 1999-12-30 23:59:12
4  1 1999-12-30 23:59:13
7  3 1999-12-31 23:59:13
8  1 1999-12-31 23:59:14
  



