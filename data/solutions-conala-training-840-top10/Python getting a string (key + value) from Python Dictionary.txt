Query: Python getting a string (key + value) from Python Dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17463059)
 Assuming Python 2.x, I would use something like this 

  dict = {'key1': 'value1', 'key2': 'value2'}
str = ''.join(['%s_%s' % (k,v) for k,v in dict.iteritems()])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17463020)
 A  list  of key-value  str s, 

  >>> d = {'key1': 'value1', 'key2': 'value2'}
>>> ['{}_{}'.format(k,v) for k,v in d.iteritems()]
['key2_value2', 'key1_value1']
  

 Or if you want a single string of all key-value pairs, 

  >>> ', '.join(['{}_{}'.format(k,v) for k,v in d.iteritems()])
'key2_value2, key1_value1'
  

  EDIT:  

 Maybe you are looking for something like this, 

  def checkCommonNodes(id, rs):
    id_key, id_value = id.split('_')
    for r in rs:
        try:
            if r[id_key] == id_value:
                print "".join('{}_{}'.format(k,v) for k,v in r.iteritems())
        except KeyError:
            continue
  

 You may also be wanting to  break  after  print ing - hard to know exactly what this is for. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7016749)
 As https://stackoverflow.com/questions/7016696/why-does-pythons-dictionary-iteration-seemingly-work-with-a-copy/7016735#7016735 points out, strings are immutable and you are just rebinding  x  to a new string created by the slice notation. You can demonstrate that  x   does  point to the same object in the dictionary by using  id : 

  >>> obj = 'hello'

>>> id(obj)
<<< 4318531232

>>> d = {'key': obj}   

>>> [id(v) for v in d.values()]
<<< [4318531232]

>>> [id(v) for v in d.itervalues()]
<<< [4318531232]

>>> [(k, id(v)) for k, v in d.items()]
<<< [('key', 4318531232)]

>>> [(k, id(v)) for k, v in d.iteritems()]
<<< [('key', 4318531232)]
  

 You can use  iteritems  to iterate over key and value together to do what you want: 

  for k,v in dict.iteritems():
    dict[k] = v[2:]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54488163)
  Use https://docs.python.org/3/library/stdtypes.html#dict.items : 

 You can use  dict.items()  (https://docs.python.org/3/library/stdtypes.html#dict.iteritems for python 2), it returns pairs of keys and values, and you can simply pick its first. 

  >>> d = { 'a': 'b' }
>>> key, value = list(d.items())[0]
>>> key
'a'
>>> value
'b'
  

 I converted  d.items()  to a list, and picked its  0  index, you can also convert it into an iterator, and pick its first using  next : 

  >>> key, value = next(iter(d.items()))
>>> key
'a'
>>> value
'b'
  

  Use https://docs.python.org/3/library/stdtypes.html#dict.keys and https://docs.python.org/3/library/stdtypes.html#dict.values : 

 You can also use  dict.keys()  to retrieve all of the dictionary keys, and pick its first key. And use  dict.values()  to retrieve all of the dictionary values: 

  >>> key = list(d.keys())[0]
>>> key
'a'
>>> value = list(d.values())[0]
>>> value
'b'
  

 Here, you can use  next(iter(...))  too: 

  >>> key = next(iter(d.keys()))
>>> key
'a'
>>> value = next(iter(d.values()))
'b'
  

  Ensure getting a  str  : 

 The above methods don't ensure retrieving a string, they'll return whatever is the actual type of the key, and value. You can explicitly convert them to  str : 

  >>> d = {'some_key': 1}
>>> key, value = next((str(k), str(v)) for k, v in d.items())
>>> key
'some_key'
>>> value
'1'
>>> type(key)
<class 'str'>
>>> type(value)
<class 'str'>
  

 Now, both  key , and  value  are  str . Although actual value in dict was an  int . 

  Disclaimer : These methods will pick first key, value pair of dictionary if it has multiple key value pairs, and simply ignore others. And it will NOT work if the dictionary is empty. If you need a solution which simply fails if there are multiple values in the dictionary, https://stackoverflow.com/questions/54488095/python-3-dictionary-key-to-a-string-and-value-to-another-string/54488163?#54488269 is the one you should look for. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13938219)
 Your JSON data is a list of dictionaries, so after  json.loads(s)  you will have  jdata  as a list, not a dictionary. 

 Try something like the following: 

  import json

s = '[{"i":"imap.gmail.com","p":"someP@ss"},{"i":"imap.aol.com","p":"anoterPass"}]'
jdata = json.loads(s)
for d in jdata:
    for key, value in d.iteritems():
        print key, value
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/16971577)
 Perhaps you wanted to join the results of the value: 

  In [11]: sqlQry= " ".join(''.join(value) for key, value in simpleDict.items() if 'DDL' in key)

In [12]: sqlQry
Out[12]: 'create table bla columns bla bla'
  

  at the moment you are trying to join a list of lists..  

  In [13]: ''.join([['a','b']])
TypeError                                 Traceback (most recent call last)
<ipython-input-13-7289bd6c8196> in <module>()
----> 1 ''.join([['a','b']])

TypeError: sequence item 0: expected string, list found
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53660134)
 That's because with a  key=itemgetter(1)  you are sorting  by value . 

 To sort by key, like you are requesting with your example, use  itemgetter(0) : 

  >>> "".join([v for k, v in sorted(data.items(), key=itemgetter(0))])
'100000testTokenExample1234561508852342226'
  

 Note that also simply sorting the item tuples (using their natural ordering), you get the same sorting: 

  >>> "".join([v for k, v in sorted(data.items())])
'100000testTokenExample1234561508852342226'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43455721)
 Think of it this way: 

  values  = {'A1' : '123', 'B1' : 456}

for key, value in values.items():
    #do what you want, e.g.
    print(key)
    print(value)

# result:
# A1
# 123
# B1
# 456
  

   .items() : 

  values  = {'A1' : '123', 'B1' : 456}

for entry in values:
    print(entry)
    a,b = entry
    #do what you want, e.g.
    print(a)
    print(b)

# result:
# A1
# A
# 1
# B1
# B
# 1
  

 As you can see, the script is reading each dictionary key and getting the first 2 elements from it (with strings behaving like lists). 



