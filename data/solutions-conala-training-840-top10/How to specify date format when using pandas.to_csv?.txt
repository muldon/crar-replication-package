Query: How to specify date format when using pandas.to_csv?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/22798849)
 With the new version of Pandas you can use the date_format parameter of the http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html method: 

  df.to_csv(filename, date_format='%Y%m%d')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30246005)
 This is already supported in http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv as a param  date_format : 

  t="""date,val
12/05/1984,sadas
1/11/1980,sadas
2/4/1945,sadas
22/10/1921,sadas"""
df = pd.read_csv(io.StringIO(t), parse_dates=[0])
df.to_csv(r'c:\data\date.csv', date_format='%Y-%m-%d')
  

 Yields: 

  ,date,val
0,1984-12-05,sadas
1,1980-01-11,sadas
2,1945-02-04,sadas
3,1921-10-22,sadas
  

 The format strings are of the form taken from https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14000420)
 You could use http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior to save these as separate columns: 

  df['date'] = df['datetime'].apply(lambda x: x.strftime('%d%m%Y'))
df['time'] = df['datetime'].apply(lambda x: x.strftime('%H%M%S'))
  

 and then be specific about which columns to export to csv: 

  df[['date', 'time', ... ]].to_csv('df.csv')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/21463069)
  

   pd.to_datetime(mydata.pop('Date'), format="%b%Y")
  

 but that would expect the date to appear like  Apr2002  (note not all caps). 

 You can specify a datetime format using the format string, and the format string will accept strftime arguments (defined http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior). There is some http://pandas.pydata.org/pandas-docs/dev/generated/pandas.tseries.tools.to_datetime.html on this too. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50397947)
 You need to specify the format of the string datetimes to make sure the dates are read as expected, as in: 

  pd.to_datetime(wind.Date, format="%d/%m/%Y")
  

 For more information see the https://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html, and http://strftime.org/. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26190153)
 Pandas uses  strftime , so use https://docs.python.org/2/library/time.html#time.strftime.   

 For  02-Oct_2014  it looks like you want  %d-%b_%Y  

  >>> df = pd.DataFrame(list(range(5)), index=pd.date_range('10/1/14', periods=5))
>>> print(df.to_csv(date_format='%d-%b_%Y'))
,0
01-Oct_2014,0
02-Oct_2014,1
03-Oct_2014,2
04-Oct_2014,3
05-Oct_2014,4
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12273646)
 In order to parse a multi-column date, you need to tell pandas which columns should be combined into a single date, so you need to say  parse_dates=['Year','Day','Hour','Min','Sec']  

 You also need to define your own parser that takes a element from each column you specified in  parse_dates : 

  In [1]: import pandas as pd

In [2]: from datetime import datetime, timedelta

In [3]: from cStringIO import StringIO

In [4]: data = """\
Year,Day,Hour,Min,Sec.,P1'S1
 2003,  1, 0, 0,12.22, 0.541
 2003,  1, 1, 0,20.69, 0.708
 2003,  1, 2, 0, 4.95, 0.520
 2003,  1, 3, 0,13.42, 0.539
"""

In [5]: def parse(yr, doy, hr, min, sec):
    yr, doy, hr, min = [int(x) for x in [yr, doy, hr, min]]
    sec = float(sec)
    mu_sec = int((sec - int(sec)) * 1e6)
    sec = int(sec)
    dt = datetime(yr - 1, 12, 31)
    delta = timedelta(days=doy, hours=hr, minutes=min, seconds=sec,
                      microseconds=mu_sec)
    return dt + delta
   ...: 

In [6]: pd.read_csv(StringIO(data), parse_dates={'datetime':      
           ['Year','Day','Hour','Min','Sec.']}, 
           date_parser=parse, index_col='datetime')
Out[6]: 
                            P1'S1
datetime                         
2003-01-01 00:00:12.220000  0.541
2003-01-01 01:00:20.690000  0.708
2003-01-01 02:00:04.950000  0.520
2003-01-01 03:00:13.419999  0.539
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17301686)
 I think it's going to be easier just to parse the dates them when reading the csv: 

  In [1]: df = pd.read_csv('0132_3.TXT', header=None, sep='\s+\s', parse_dates=[[0]])

In [2]: df
Out[2]:
                    0      1
0 2013-04-29 00:00:00  7.667
1 2013-04-29 00:00:00  7.000
2 2013-04-29 00:00:00  7.000
3 2013-04-29 00:00:00  7.333
4 2013-04-29 00:00:00  7.000
  

 Since you're using a unusual date format you need to specify a date parser too: 

  In [11]: def date_parser(ss):
             day, month, year, hour, min, sec = ss.split()
             return pd.Timestamp('20%s-%s-%s %s:%s:%s' % (year, month, day, hour, min, sec))

In [12]: df = pd.read_csv('0132_3.TXT', header=None, sep='\s+\s', parse_dates=[[0]], date_parser=date_parser)

In [13]: df
Out[13]:
                    0      1
0 2013-04-29 18:15:00  7.667
1 2013-04-29 18:30:00  7.000
2 2013-04-29 18:45:00  7.000
3 2013-04-29 19:00:00  7.333
4 2013-04-29 19:15:00  7.000
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36998752)
 In version pandas  0.18.0  you can add parameter  dayfirst=True  and then it works: 

  import pandas as pd
import io

temp=u"""start_date
04/10/96
15/07/97
10/12/97
06/03/99
//1994
/02/1967
"""
#after testing replace io.StringIO(temp) to filename
df = pd.read_csv(io.StringIO(temp),  parse_dates = ['start_date'], dayfirst=True)
  start_date
0 1996-10-04
1 1997-07-15
2 1997-12-10
3 1999-03-06
4 1994-01-01
5 1967-02-01
  

 Another solution: 

 You can parsing with http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html with different parameters  format  and  errors='coerce'  and then http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.combine_first.html: 

  date1 = pd.to_datetime(df['start_date'], format='%d/%m/%y', errors='coerce')
print date1
0   1996-10-04
1   1997-07-15
2   1997-12-10
3   1999-03-06
4          NaT
5          NaT
Name: start_date, dtype: datetime64[ns]

date2 = pd.to_datetime(df['start_date'], format='/%m/%Y', errors='coerce')
print date2
0          NaT
1          NaT
2          NaT
3          NaT
4          NaT
5   1967-02-01
Name: start_date, dtype: datetime64[ns]

date3 = pd.to_datetime(df['start_date'], format='//%Y', errors='coerce')
print date3
0          NaT
1          NaT
2          NaT
3          NaT
4   1994-01-01
5          NaT
Name: start_date, dtype: datetime64[ns]
  



  print date1.combine_first(date2).combine_first(date3)
0   1996-10-04
1   1997-07-15
2   1997-12-10
3   1999-03-06
4   1994-01-01
5   1967-02-01
Name: start_date, dtype: datetime64[ns]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54285518)
 Add parameters  parse_dates  and  index_col  for  DatetimeIndex  in http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html, also because format with starting days add  dayfirst=True , check also http://pandas.pydata.org/pandas-docs/stable/io.html#international-date-formats: 

  df_m = pd.read_csv('coins_mktcap.csv', parse_dates=['date'], index_col=['date'], dayfirst=True)
df_m = df_m.dropna(axis=1, how='all')
  

 In your solution is possible add same parameter: 

  data_m['date'] = pd.to_datetime(data_m['date'], dayfirst=True)
  

 Or specify format: 

  data_m['date'] = pd.to_datetime(data_m['date'], format='%d/%m%y')
  



