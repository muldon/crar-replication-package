Query: How can I sum the product of two list items using for loop in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41821169)
 Just https://docs.python.org/3/library/functions.html#zip the lists to generate pairs, multiply them and feed to https://docs.python.org/3/library/functions.html#sum: 

  >>> a = [1,2,3]
>>> b = [4,5,6]
>>> sum(x * y for x, y in zip(a, b))
32
  

 In above  zip  will return iterable of tuples containing one number from both lists: 

  >>> list(zip(a, b))
[(1, 4), (2, 5), (3, 6)]
  

 Then generator expression is used to multiply the numbers together: 

  >>> list(x*y for x, y in list(zip(a, b)))
[4, 10, 18]
  

 Finally  sum  is used to sum them together for final result: 

  >>> sum(x*y for x, y in list(zip(a, b)))
32
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41821173)
 You have some problems in your code, first off you cant index your list with parenthesis you need  [] , secondly you've created a generator not a number. 

 You need to  zip  your lists first: 

  In [3]: sum(i*j for i,j in zip(a, b))
Out[3]: 32
  

 Or as a functional approach use  operator.mul  within  map  and  sum : 

  In [11]: from operator import mul 

In [12]: sum(map(mul, a, b))
Out[12]: 32
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41821273)
 A generator by itself, even if applied so as to generate the list result, will just give you a list of the products. You still need to do something to add up the elements of the list, which you can't do inside your generator. 

 Your method looks like you've mixed generator syntax with a traditional  for  loop, which would look like this: 

  score = 0
for i in range(len(a)):
  score = score + a[i]*b[i]
  

 The cleanest, or at least most Pythonic, solution probably uses  zip  to combine the lists, a list comprehension to multiply the elements, and  sum  to add them all up: 

  score = sum([x*y for (x,y) in zip(a,b)])
  

 You could also use  reduce  for the full-on functional approach (note that you have to  import  it from  functools  if you use Python 3): 

  score = reduce(lambda s,t: s+t[0]*t[1], zip(a,b), 0)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31206202)
 To get all the permutations of elements with a list comprehension: 

  [a == b for a in list_1 for b in list_2]
  

 Functionality is the same as the nested for loops: 

  list_3 = []
for a in list_1:
    for b in list_2:
        list_3.append(a == b)  # Or a + b, etc.
  

 Functional implementation is a bit more confusing: 

  list_3 = map(lambda x: map(lambda y: y == x, list_2), list_1)
  

 This creates a list of lists, however, so you'd want to flatten it with any of the techniques described https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python 

  sum(list_3, [])
  

 Or use  itertools.product  as suggested by @bereal. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43234652)
 One important  logical problem  here is you have to skip the number of items in each list while find the max element in your for loop. That is, instead of  

 Example, 

  6 67828645 425092764 242723908 669696211 501122842 438815206
  

 and your data is  

  67828645 425092764 242723908 669696211 501122842 438815206
  

 That is, 

  input().split()
  

 You have to use, 

  input().split()[1:]
  

 As pointed by Paul Hankin, you basically need to find max(sum of powers % m)
You have to find the combination from three lists whose sum%m is max. 

 So, this is basically, 

 You scan the input, split with space, leaving the first element which is the number of values in each line,you map them to integers. And then, you find the squares and append them to a list  s . Having that you find the product(itertools module) Example - product([1,2],[3,4,5]) will give, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]. Now, you can find the sum of each such result % m and find the max value! 

 That is, 



<pre class="lang-python prettyprint-override"> k,m=map(int,input().split())
from itertools import product
s=[]
for _ in range(k):
&#9;s.append(map(lambda x:x**2,map(int,input().split()[1:])))
print(max([sum(i)%m for i in product(*s)]))
  

 https://tio.run/nexus/python3#dc3NDoIwDAfws3uKXkw2gmSARCXhSQgxE4Y2sI9sI@HFPeOIXj21zb/tb5tS1ShhKeqQorZLoCzzdsZYGRmdUYBBumDM7AGVNS6AdWZY@kB803ZkNA7ugBqc0E9JJ1aTg8@EtVIPdH88C/UYBKz1miRF@odq87pjEbQuhvFspa1fFEV2VLALuAs/lyaexeVtKyHnnJMCKjiTEi5whRuQKo7fNufw1ubUi/4lPw 

 This will give you the desired output! 

  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53349881)
 You can do it like this, by first reorganizing your data by key: 

  from collections import defaultdict
from itertools import product


def doProdSum(list_of_dicts):
    # We reorganize the data by key
    lists_by_key = defaultdict(list)
    for d in list_of_dicts:
        for k, v in d.items():
            lists_by_key[k].append(v)

    # list_by_key looks like {'a': [[0, 1, 2], [1, 1, 1]], 'b': [[10], [1, 2, 3, 4, 5]],'c': [[1, 2, 3, 4]]}

    # Then we generate the output
    out = {}
    for key, lists in lists_by_key.items():
        out[key] = [sum(prod) for prod in product(*lists)]

    return out
  

 Example output:     

  list_of_dicts = [{"a":[0,1,2],"b":[10],"c":[1,2,3,4]}, {"a":[1,1,1],"b":[1,2,3,4,5]}]
doProdSum(list_of_dicts)

# {'a': [1, 1, 1, 2, 2, 2, 3, 3, 3],
#  'b': [11, 12, 13, 14, 15],
#  'c': [1, 2, 3, 4]}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41821213)
 Let's take a close look at your code: 

  score = ((sum+(a(i)*b(i)) for i in range(len(a)))
  

 The right hand side of this statement is a generator expression. Think of a generator as a lazy list. It doesn't actually sum anything, so to be more correct you should do 

  score = (a[i]*b[i] for i in range(len(a)))
  

 (Note the brackets, not parentheses, for subscripting the lists.) 

 Now  score  is a generator which "contains" the products of corresponding elements of the original lists  a  and  b . 

 The next step is to iterate over the list to sum the elements: 

  for x in score:
    sum += x
print(sum)
  

 As others have already posted, you can do this all in one line with  zip()  and  sum()  built-in functions: 

  sum([x*y for x, y in zip(a, b)])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28609188)
  import itertools
sum(a[i][j] - b[k][l] for i, j, k, l in itertools.product(range(1, 100), repeat=4))
  

  itertools.product  is equivalent to a nested  for  loop.  It will run over every  (i, j, k, l)  tuple from  (1, 1, 1, 1)  to  (99, 99, 99, 99) .   This will skip zero , which you seem to have asked for. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30228048)
 You can also brute force it using two loops 

  mydict = {'item1':[1,2,3],'item2':[10,20,30]}

x = []
for i in mydict['item1']:
    for j in mydict['item2']:
        x.append((i,j))
  

 All this code does is go through all of the item in  mydict['item1'] , then through each item in  mydict['item2'] , then appends a pair of each to a new list. 

 It will give you this result: 

  [(1, 10), (1, 20), (1, 30), (2, 10), (2, 20), (2, 30), (3, 10), (3, 20), (3, 30)]
  



