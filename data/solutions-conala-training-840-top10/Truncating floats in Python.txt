Query: Truncating floats in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25702460)
 I did something like this: 

  from math import trunc


def truncate(number, decimals=0):
    if decimals < 0:
        raise ValueError('truncate received an invalid value of decimals ({})'.format(decimals))
    elif decimals == 0:
        return trunc(number)
    else:
        factor = float(10**decimals)
        return trunc(number*factor)/factor
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/51011812)
  def precision(value, precision):
    """
    param: value: takes a float
    param: precision: int, number of decimal places
    returns a float
    """
    x = 10.0**precision
    num = int(value * x)/ x
    return num
precision(1.923328437452, 3)
  

 
   
     1.923 
   
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29574663)
 use numpy.round 

  import numpy as np
precision = 3
floats = [1.123123123, 2.321321321321]
new_float = np.round(floats, precision)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34707419)
 Simple python script - 

  n = 1.923328437452
n = float(int(n * 1000))
n /=1000
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29247646)
  

  def truncate(f, n):
    return math.floor(f * 10 ** n) / 10 ** n
  

 testing: 

  >>> f=1.923328437452
>>> [truncate(f, n) for n in range(5)]
[1.0, 1.9, 1.92, 1.923, 1.9233]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41989817)
 At my Python 2.7 prompt: 

  >>> int(1.923328437452 * 1000)/1000.0
1.923  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/784665)
  def trunc(num, digits):
   sp = str(num).split('.')
   return '.'.join([sp[0], sp[1][:digits]])
  

 This should work.  It should give you the truncation you are looking for. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40470820)
 A general and simple function to use: 

  def truncate_float(number, length):
    """Truncate float numbers, up to the number specified
    in length that must be an integer"""

    number = number * pow(10, length)
    number = int(number)
    number = float(number)
    number /= pow(10, length)
    return number
  



