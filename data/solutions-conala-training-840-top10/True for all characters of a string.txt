Query: True for all characters of a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18667460)
  

  if string.isalpha():
    print("It's all letters")
  

 http://docs.python.org/2/library/stdtypes.html#str.isalpha is only true if  all  characters in the string are letters: 

 
   Return true if all characters in the string are alphabetic and there is at least one character, false otherwise. 
 

  

  >>> 'hello'.isalpha()
True
>>> '42hello'.isalpha()
False
>>> 'hel lo'.isalpha()
False
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38195098)
  import re
not (re.search('^[pvc]+$', string))
  

 Not sure what you want if string is empty, and this one will return true. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/31095522)
 use  str.isalpha()   

 Ref: https://docs.python.org/2/library/stdtypes.html#str.isalpha 

 
   Return true if all characters in the string are alphabetic and there
  is at least one character, false otherwise. 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24384914)
  unicode.isnumeric()
  

 Return True if there are only numeric characters in S, False otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH. 

  str.isdigit()
  

 Return true if all characters in the string are digits and there is at least one character, false otherwise. 

 For 8-bit strings, this method is locale-dependent. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14312895)
 Try the following regular expression 

  re.search("(^[ 0-9]{9})", deed)
  

 The expression  "(^[ 0-9]{9})"  locates the string at beginning of the line and only match if the first 9 characters are either numubers or blanks. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38195097)
 Use  set(..  

  if set(yourString - set("pvc":
    return True
else:
    return False
  

 Edit: this should be turned into a single expression.                  

  return set(your_string - set('pvc'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28997088)
 This is a perfect use case of https://docs.python.org/2/tutorial/datastructures.html#sets. The following code will solve your problem: 

  def only_uses_letters_from(string1, string2):
   """Check if the first string only contains characters also in the second string."""
   return set(string1) <= set(string2)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/43002960)
 You can use  islower()  on your string to see if it contains some lowercase letters (amongst other characters).  or  it with  isupper()  to also check if contains some uppercase letters: 

 below: letters in the string: test yields true 

  >>> z = "(555) 555 - 5555 ext. 5555"
>>> z.isupper() or z.islower()
True
  

 below: no letters in the string: test yields false. 

  >>> z= "(555).555-5555"
>>> z.isupper() or z.islower()
False
>>> 
  

 Not to be mixed up with  isalpha()  which returns  True  only if all characters are letters, which isn't what you want. 

 Note that https://stackoverflow.com/a/47453486/5337834 answer completes mine nicely, since mine doesn't handle the mixed case well. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14859998)
  all(map(predicate, string))
  

 Functionally the same as @Abe's answer but with map instead (also lazy in python3) 



