Query: python's re: return True if regex contains in the string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15742632)
 The best one by far is  

  bool(re.search('ba[rzd]', 'foobarrrr'))
  

 Returns True 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9012040)
  Match  objects are always true, and  None  is returned if there is no match. . 

 Code: 

  >>> st = 'bar'
>>> m = re.match(r"ba[r|z|d]",st)
>>> if m:
...     m.group(0)
...
'bar'
  

 Output =  bar  

 If you want  search  functionality 

  >>> st = "bar"
>>> m = re.search(r"ba[r|z|d]",st)
>>> if m is not None:
...     m.group(0)
...
'bar'
  

 and if  regexp  not found than 

  >>> st = "hello"
>>> m = re.search(r"ba[r|z|d]",st)
>>> if m:
...     m.group(0)
... else:
...   print "no match"
...
no match
  

  As @bukzor mentioned if st =  foo bar  than match will not work. So, its more appropriate to use  re.search .  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19300192)
 You do not need regular expressions to check if a substring exists in a string. 

  line = 'This,is,a,sample,string'
result = bool('sample' in line) # returns True
  

 If you want to know if a string contains a  pattern  then you should use  re.search  

  line = 'This,is,a,sample,string'
result = re.search(r'sample', line) # finds 'sample'
  

 This is best used with pattern matching, for example: 

  line = 'my name is bob'
result = re.search(r'my name is (\S+)', line) # finds 'bob'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51547750)
 You want to match a digit followed with a dot and then another digit. 

 Use 

  r"\d\.\d"
  

 See the https://regex101.com/r/RszKsg/1. 

 In Python, to check if a string matches the pattern use 

  m = re.search(r"\d\.\d", s)
if m:
    print("Matched!")
  

 A note on Unicode:  \d  in Python 3.x regex will also match all Unicode digits, like those (examples): 

  0٠۰߀०০੦૦୦௦౦೦൦๐໐༠០᠐᧐᱐꘠０1١۱߁१১੧૧୧௧౧೧൧๑໑༡១᠑᧑᱑꘡１2٢۲߂२২੨૨୨௨౨೨൨๒໒༢២᠒᧒᱒꘢２3٣۳߃३৩੩૩୩௩౩೩൩෩๓໓༣៣᠓᧓᱓꘣３4٤۴߄४৪੪૪୪௪౪೪൪๔໔༤៤᠔᧔᱔꘤４5٥۵߅५৫੫૫୫௫౫೫൫෫๕໕༥៥᠕᧕᱕꘥５6٦۶߆६৬੬૬୬௬౬೬൬๖໖༦៦᠖᧖᱖꘦６7٧۷߇७৭੭૭୭௭౭೭൭෭๗໗༧៧᠗᧗᱗꘧７8٨۸߈८৮੮૮୮௮౮೮൮๘໘༨៨᠘᧘᱘꘨８9٩۹߉९৯੯૯୯௯౯೯൯෯๙໙༩៩᠙᧙᱙꘩９
  

 To avoid that, pass the https://docs.python.org/3/library/re.html#re.A to the https://docs.python.org/3/library/re.html#re.search or https://docs.python.org/3/library/re.html#re.compile methods. Or, use  [0-9]  instead of  \d . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47990903)
 Placing a negative looksahead after a quantified pattern with a lazy or greedy quantifier almost never yields expected results because of backtracking: once the  .*  matches 0+ chars other than line break chars it checks the lookahead pattern and since there is no  work  right after the end of the first line, the result is  true . 

 To fix the regex, you need to make sure  .  matches line break chars (pass  re.DOTALL  modifier or add  (?s)  at the start) and move  .*  to the lookahead: 

  re.search(r'project(?!.*work)', s, re.DOTALL)
  

 See the https://regex101.com/r/sSlzNt/1. 

 This pattern means: find  project  and then fail the match if there is  check  substring after any 0+ chars.  

 Note that if you plan to use this regex as is, it might make more sense to use  if 'project' in s and 'work' not in s  to check for the same thing. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29014557)
 The  !  doesn't have any special meaning in RegEx, you need to use  ^  to negate the match, like this 

  >>> re.match('^[^0-9a-zA-Z]+$','_')
<_sre.SRE_Match object; span=(0, 1), match='_'>
  

 In Python 2.x, 

  >>> re.match('^[^0-9a-zA-Z]+$','_')
<_sre.SRE_Match object at 0x7f435e75f238>
  

  Note:  this RegEx will give you a match, only if the entire string is full of non-alphanumeric characters. 

 If you want to check if any of the characters is non-alphanumeric, then you need to use  re.search  and drop the  +  and  $ , like this 

  >>> re.search('[^0-9a-zA-Z]', '123abcd!')
<_sre.SRE_Match object; span=(7, 8), match='!'>
  

 It means that find any character other than  0-9 ,  a-z  and  A-Z , anywhere in the string. ( re.match  will try to match from the beginning of the string. Read more about the differences between  re.search  and  re.match  https://stackoverflow.com/q/180986/1903116). 

  Note:  The best solution to this problem is, using https://docs.python.org/2/library/stdtypes.html#str.isalnum, like this 

  >>> "123abcdABCD".isalnum()
True
>>> "_".isalnum()
False
  

 This will return  True  only if the entire string is full of alphanumeric characters. But, if you want to see if any of the characters in the string is alphanumeric, then you need to use https://docs.python.org/2/library/functions.html#any function like this 

  >>> any(char.isalnum() for char in "_!@#%^$()*")
False
>>> any(char.isalnum() for char in "_!@#%^a()*")
True
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37256735)
 I think what you are looking for is  re.fullmatch . 

  import re
ponct = '[' + re.escape('-/\()&') + ']*'
p = re.compile(ponct + '[0-9]+' + ponct)
  

 Then  p.fullmatch('(678983y733)')  will return None, 
and all your other examples will return a match. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11278383)
  pat.search  doesn't return a Boolean value but a http://docs.python.org/library/re.html#re.MatchObject so your comparison will fail: 

  In [9]: p = pat.search(test_string)

In [10]: p
Out[10]: <_sre.SRE_Match at 0x3cfa608>

In [11]: type(p)
Out[11]: _sre.SRE_Match
  

 See http://docs.python.org/library/re.html?highlight=re.search#re.search docs: 

 
   re.search(pattern, string, flags=0) 
  
   Scan through string looking for a location where the regular
  expression pattern produces a match,  and return a corresponding
  MatchObject instance . Return None if no position in the string matches
  the pattern; note that this is different from finding a zero-length
  match at some point in the string. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42257922)
 Just use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.contains.html 

  >>> df
          title
0     dogs r us
1  pigs can fly
2     dog games

>>> df['Match'] = df.title.str.contains('dog')

>>> df
          title  Match
0     dogs r us   True
1  pigs can fly  False
2     dog games   True
  

 If you want the check to be case insensitive, you can use a  re.IGNORECASE  flag.  

  >>> df['Match'] = df.title.str.contains('dog', flags=re.IGNORECASE)
  

 Since this is using  re.search , you can check for multiple strings with a regular regex way, something like  

  >>> df['Match'] = df.title.str.contains('dog|cats', flags=re.IGNORECASE)
  



