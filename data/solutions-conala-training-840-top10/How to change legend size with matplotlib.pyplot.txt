Query: How to change legend size with matplotlib.pyplot
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29694950)
 There are also a few named http://matplotlib.org/api/text_api.html#matplotlib.text.Text.set_size, apart from the size in points: 

  xx-small
x-small
small
medium
large
x-large
xx-large
  

  

  pyplot.legend(loc=2, fontsize = 'x-small')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8798022)
 On my install, FontProperties only changes the text size, but it's still too large and spaced out.  I found a parameter in  pyplot.rcParams :  legend.labelspacing , which I'm guessing is set to a fraction of the font size.   

  pyplot.rcParams.update({'legend.labelspacing':0.25})
  

 I'm not sure how to specify it to the pyplot.legend function - passing 

  prop={'labelspacing':0.25}
  

  

  prop={'legend.labelspacing':0.25}
  

 comes back with an err. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39473158)
 using  import matplotlib.pyplot as plt  

  Method 1: specify the fontsize when calling legend (repetitive)  

  plt.legend(fontsize=20) # using a size in points
plt.legend(fontsize="x-large") # using a named size
  

 With this method you can set the fontsize for each legend at creation (allowing you to have multiple legends with different fontsizes). However, you will have to type everything manually each time you create a legend.  

 (Note: @Mathias711 listed the available named fontsizes in his answer) 

  Method 2: specify the fontsize in rcParams (convenient)  

  plt.rc('legend',fontsize=20) # using a size in points
plt.rc('legend',fontsize='medium') # using a named size
  

 With this method you set the default legend fontsize, and all legends will automatically use that unless you specify otherwise using method 1. This means you can set your legend fontsize at the beginning of your code, and not worry about setting it for each individual legend.  

 If you use a named size e.g.  'medium' , then the legend text will scale with the global  font.size  in  rcParams . To change  font.size  use  plt.rc(font.size='medium')  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14499442)
 Here is how to change the fontsize of the legend list and/or legend title: 

  legend=plt.legend(list,loc=(1.05,0.05), title=r'$\bf{Title}$') #Legend: list, location, Title (in bold)
legend.get_title().set_fontsize('6') #legend 'Title' fontsize
plt.setp(plt.gca().get_legend().get_texts(), fontsize='12') #legend 'list' fontsize
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/7125157)
 You can set an individual font size for the legend by adjusting the  prop  keyword.  

  plot.legend(loc=2, prop={'size': 6})
  

 This takes a dictionary of keywords corresponding to  matplotlib.font_manager.FontProperties  properties. See the http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.legend: 

 
   Keyword arguments: 

  prop: [ None | FontProperties | dict ]
    A matplotlib.font_manager.FontProperties instance. If prop is a 
    dictionary, a new instance will be created with prop. If None, use
    rc settings.
  
 

 It is also possible, as of version http://matplotlib.org/api/legend_api.html#matplotlib.legend.Legend, to use the keyword  fontsize . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/51721142)
 I think this is the better way.  

  import matplotlib.font_manager as fm

## your font directory 
font_path = '/Users/frhyme/Library/Fonts/BMDOHYEON_otf.otf'

## font_name 
font_name = fm.FontProperties(fname=font_path).get_name()

plt.legend(prop={'family':font_name, 'size':20})
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37990331)
 This is the fastest: 

  plt.legend(loc=2,prop={'size':6})
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44163331)
 @ImportanceOfBeingErnest 's answer is good if you only want to change the linewidth inside the legend box. But I think it is a bit more complex since you have to copy the handles before changing legend linewidth. Besides, it can not change the legend label fontsize. The following two methods can not only change the linewidth but also the legend label text font size in a more concise way. 

 Method 1</h3>

  import numpy as np
import matplotlib.pyplot as plt

# make some data
x = np.linspace(0, 2*np.pi)

y1 = np.sin(x)
y2 = np.cos(x)

# plot sin(x) and cos(x)
fig = plt.figure()
ax  = fig.add_subplot(111)
ax.plot(x, y1, c='b', label='y1')
ax.plot(x, y2, c='r', label='y2')

leg = plt.legend()
# get the individual lines inside legend and set line width
for line in leg.get_lines():
    line.set_linewidth(4)
# get label texts inside legend and set font size
for text in leg.get_texts():
    text.set_fontsize('x-large')

plt.savefig('leg_example')
plt.show()
  

 Method 2</h3>

  import numpy as np
import matplotlib.pyplot as plt

# make some data
x = np.linspace(0, 2*np.pi)

y1 = np.sin(x)
y2 = np.cos(x)

# plot sin(x) and cos(x)
fig = plt.figure()
ax  = fig.add_subplot(111)
ax.plot(x, y1, c='b', label='y1')
ax.plot(x, y2, c='r', label='y2')

leg = plt.legend()
# get the lines and texts inside legend box
leg_lines = leg.get_lines()
leg_texts = leg.get_texts()
# bulk-set the properties of all lines and texts
plt.setp(leg_lines, linewidth=4)
plt.setp(leg_texts, fontsize='x-large')
plt.savefig('leg_example')
plt.show()
  

 The above two methods produce the same output image: 

   


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9651897)
 As pointed by Adam, you need to make space on the side of your graph.
If you want to fine tune the needed space, you may want to look at the http://matplotlib.sourceforge.net/api/figure_api.html?highlight=add_axes#matplotlib.figure.Figure.add_axes method of matplotlib.pyplot.artist. 

 Below is a rapid example: 

  import matplotlib.pyplot as plt
import numpy as np

# some data
x = np.arange(0, 10, 0.1)
y1 = np.sin(x)
y2 = np.cos(x)

# plot of the data
fig = plt.figure()
ax = fig.add_axes([0.1, 0.1, 0.6, 0.75])
ax.plot(x, y1,'-k', lw=2, label='black sin(x)')
ax.plot(x, y2,'-r', lw=2, label='red cos(x)')
ax.set_xlabel('x', size=22)
ax.set_ylabel('y', size=22)
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)

plt.show()
  

 and the resulting image:   


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/7125095)
 This should do 

  import pylab as plot
params = {'legend.fontsize': 20,
          'legend.handlelength': 2}
plot.rcParams.update(params)
  

 Then do the plot afterwards. 

 There are a ton of other rcParams, they can also be set in the matplotlibrc file. 

 Also presumably you can change it passing a  matplotlib.font_manager.FontProperties  instance but this I don't know how to do.  --> see Yann's answer. 



