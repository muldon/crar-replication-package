Query: check if a directory exists and create it if necessary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13183555)
 Try this code, it checks if path exists till n sub directory level, and create directory if not exists. 

  def pathtodir(path):
if not os.path.exists(path):
    l=[]
    p = "/"
    l = path.split("/")
    i = 1
    while i < len(l):
        p = p + l[i] + "/"
        i = i + 1
        if not os.path.exists(p):
            os.mkdir(p, 0755)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21349806)
 Here's my take, which lets the system libraries do all the path-wrangling.  Any errors other than the directory already existing are propagated. 

  import os, errno

def ensure_dir(dirname):
    """
    Ensure that a named directory exists; if it does not, attempt to create it.
    """
    try:
        os.makedirs(dirname)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49851755)
 Use this command check and create dir 

   if not os.path.isdir(test_img_dir):
     os.mkdir(str("./"+test_img_dir))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/944561)
 
   "From python documentation  os.makedirs  will fail if one of the parents exists." 
 

 No, http://docs.python.org/library/os.html#os.makedirs will fail if the directory itself already exists. It won't fail if just any of the parent directories already exists. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27136145)
 In Python a statement is executed just when the previous statement have finished, thats how an interpreter works. 

 My guess is that  shutil.rmtree  tell the filesystem to delete some directory tree and in that moment Python gives terminate the work of that statement -- even if the filesystem have not deleted the complete directory tree --. For that reason, if the directory tree is big enough, when Python get to the line  os.makedirs(dir_name)  the directory can still to exist. 

 A faster operation (faster than deleting) is to rename the directory: 

  import os
import tempfile
import shutil

dir_name = "test"

if (os.path.exists(dir_name)):
    # `tempfile.mktemp` Returns an absolute pathname of a file that 
    # did not exist at the time the call is made. We pass
    # dir=os.path.dirname(dir_name) here to ensure we will move
    # to the same filesystem. Otherwise, shutil.copy2 will be used
    # internally and the problem remains.
    tmp = tempfile.mktemp(dir=os.path.dirname(dir_name))
    # Rename the dir.
    shutil.move(dir_name, tmp)
    # And delete it.
    shutil.rmtree(tmp)


# At this point, even if tmp is still being deleted,
# there is no name collision.
os.makedirs(dir_name)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45166303)
 Create directory path, database file and table 

 Here is a recipe to create the directory path, database file and table
when necessary. If these already exist, the script will overwrite nothing and simply use what is at hand. 

  import os
import sqlite3

data_path = './really/deep/data/path/'
filename = 'whatever'

os.makedirs(data_path, exist_ok=True)

db = sqlite3.connect(data_path + filename + '.sqlite3')
db.execute('CREATE TABLE IF NOT EXISTS TableName (id INTEGER PRIMARY KEY, quantity INTEGER)')
db.close()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/40949679)
 If you consider the following:  

  os.path.isdir('/tmp/dirname')
  

 means a directory (path) exists AND is a directory. So for me this way does what I need. So I can make sure it is folder (not a file) and exists. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/273208)
 Check https://docs.python.org/3/library/os.html#os.makedirs:  (It makes sure the complete path exists.) 
 To handle the fact the directory might exist, catch OSError.
(If exist_ok is False (the default), an OSError is raised if the target directory already exists.) 

  import os
try:
    os.makedirs('./path/to/somewhere')
except OSError:
    pass
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54406915)
 Here is an alternative way to do this using the excellent standard library  pathlib  module, which generally makes things neater. 

 As explained elsewhere,  to_csv  will only create the file if it doesn't exist but not any directories, so you need to first ensure that these exist. 

  from pathlib import Path

output_file = 'my_file.csv'
output_dir = Path('long_path/to/my_dir')

output_dir.mkdir(parents=True, exist_ok=True)

df.to_csv(output_dir / output_file)  # can join path elements with / operator
  

 Setting  parents=True  will also create any necessary parent directories, and  exist_ok=True  means it won't raise an error if the directory already exists, so you don't have to explicitly check that separately. 



