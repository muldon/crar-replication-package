Query: Sort A list of Strings Based on certain field
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17474264)
 You want to sort based on the  float  values (not string values), so try:     

  >>> b = ["949.0","1099.0"]
>>> b.sort(key=float)
>>> b
['949.0', '1099.0']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49847680)
 A list of strings gets sorted alphabetically. 

 You need to supply a key function, in order to split on the  '\t'  char, and parse the first field as integer: 

  >>> l=['0\t ***       *', '1\t    *     *', '2\t     *   *', '3\t      ***', '-1\t            *', '-2\t             *', '-3\t              **']
>>> l.sort(key=lambda x: int(x.split('\t')[0]), reverse=True)
>>> l
['3\t      ***', '2\t     *   *', '1\t    *     *', '0\t ***       *', '-1\t            *', '-2\t             *', '-3\t              **']
  

 Note that instead of doing  new_list = sorted(new_list, reverse=True)  you can do in-place sort with  new_list.sort(reverse=True) . 

 Or, if you don't mind using third party packages, you can have a look at the https://github.com/SethMMorton/natsort package, which seems to solve exactly this kind of problems. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7817348)
 Use  ValueSortedDict  from http://pypi.python.org/pypi/dicts: 

  from dicts.sorteddict import ValueSortedDict
d = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_dict = ValueSortedDict(d)
print sorted_dict.items() 

[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38389035)
 You can use the list method  list.sort  which sorts in-place or use the  sorted()  built-in function which returns a new list. the  key  argument takes a function which it applies to each element of the sequence before sorting. You can use a combination of  string.split(',')  and indexing to the second element, e.g. some_list[1], so: 

  In [8]: list_of_strings
Out[8]: 
['81:0A:D7:19:25:7B, 2016-07-14 14:29:13, 2016-07-14 14:29:15, -69, 22:22:22:22:22:23,null,^M',
 '3B:3F:B9:0A:83:E6, 2016-07-14 01:28:59, 2016-07-14 01:29:01, -36, 33:33:33:33:33:31,null,^M',
 'B3:C0:6E:77:E5:31, 2016-07-14 08:26:45, 2016-07-14 08:26:47, -65, 33:33:33:33:33:32,null,^M',
 '61:01:55:16:B5:52, 2016-07-14 06:25:32, 2016-07-14 06:25:34, -56, 33:33:33:33:33:33,null,^M']

In [9]: sorted(list_of_strings, key=lambda s: s.split(',')[1])
Out[9]: 
['3B:3F:B9:0A:83:E6, 2016-07-14 01:28:59, 2016-07-14 01:29:01, -36, 33:33:33:33:33:31,null,^M',
 '61:01:55:16:B5:52, 2016-07-14 06:25:32, 2016-07-14 06:25:34, -56, 33:33:33:33:33:33,null,^M',
 'B3:C0:6E:77:E5:31, 2016-07-14 08:26:45, 2016-07-14 08:26:47, -65, 33:33:33:33:33:32,null,^M',
 '81:0A:D7:19:25:7B, 2016-07-14 14:29:13, 2016-07-14 14:29:15, -69, 22:22:22:22:22:23,null,^M']
  

 Or if you'd rather sort a list in place,  

  list_of_strings
Out[12]: 
['81:0A:D7:19:25:7B, 2016-07-14 14:29:13, 2016-07-14 14:29:15, -69, 22:22:22:22:22:23,null,^M',
 '3B:3F:B9:0A:83:E6, 2016-07-14 01:28:59, 2016-07-14 01:29:01, -36, 33:33:33:33:33:31,null,^M',
 'B3:C0:6E:77:E5:31, 2016-07-14 08:26:45, 2016-07-14 08:26:47, -65, 33:33:33:33:33:32,null,^M',
 '61:01:55:16:B5:52, 2016-07-14 06:25:32, 2016-07-14 06:25:34, -56, 33:33:33:33:33:33,null,^M']

list_of_strings.sort(key=lambda s: s.split(',')[1])

list_of_strings
Out[14]: 
['3B:3F:B9:0A:83:E6, 2016-07-14 01:28:59, 2016-07-14 01:29:01, -36, 33:33:33:33:33:31,null,^M',
 '61:01:55:16:B5:52, 2016-07-14 06:25:32, 2016-07-14 06:25:34, -56, 33:33:33:33:33:33,null,^M',
 'B3:C0:6E:77:E5:31, 2016-07-14 08:26:45, 2016-07-14 08:26:47, -65, 33:33:33:33:33:32,null,^M',
 '81:0A:D7:19:25:7B, 2016-07-14 14:29:13, 2016-07-14 14:29:15, -69, 22:22:22:22:22:23,null,^M']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8148132)
 This works in 3.1. 

  import operator
slovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)
print(slovar_sorted)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/38160887)
 Just make a particular case in your key method: if starts with x, return a truncated string starting with "0" so it will appear first, but will be still sorted after "x". 

  z=['mix', 'xyz', 'apple', 'xanadu', 'aardvark']

z.sort(key=lambda x : "0"+x if x.startswith("x") else x)
print(z)
  

 yields: 

  ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/613228)
 Dicts can't be sorted, but you can build a sorted list from them. 

 A sorted list of dict values: 

  sorted(d.values())
  

 A list of (key, value) pairs, sorted by value: 

  from operator import itemgetter
sorted(d.items(), key=itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21431134)
 Just use  key  parameter of  sort  method. 

  test.sort(key = lambda x: x.split("(")[1])
  

  

 Edit:  test  is the array. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31800325)
 Write a function lensort to sort a list of strings based on length.  

  def lensort(a):
    n = len(a)
    for i in range(n):
        for j in range(i+1,n):
            if len(a[i]) > len(a[j]):
                temp = a[i]
                a[i] = a[j]
                a[j] = temp
    return a
print lensort(["hello","bye","good"])
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/13208582)
 Using Python 3.2: 

  x = {"b":4, "a":3, "c":1}
for i in sorted(x.values()):
    print(list(x.keys())[list(x.values()).index(i)])
  



