Query: Convert tuple to list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9051552)
 there is a python built in function:
list and tuple 

 list( the tuple)...to conver tuple to list
tuple( the list )....to convert list to tuple  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50171010)
 Do  not  name variables after classes. In your example, you do this both with  list  and  tuple . 

 You can rewrite as follows: 

  lst = ['a', 'b']
tup = tuple(lst)
lst.append('a')
another_tuple = tuple(lst)
  

  Explanation by line  

 
 Create a list, which is a mutable object, of 2 items. 
 Convert the list to a tuple, which is an immutable object, and assign to a new variable. 
 Take the original list and append an item, so the original list now has 3 items. 
 Create a tuple from your  new  list, returning a tuple of 3 items. 
 

 

 The code you posted does not work as you intend because: 

 
 When you call  another_tuple=tuple(list) , Python attempts to treat your  tuple  created in the second line  as a function . 
 A  tuple   variable  is not callable. 
 Therefore, Python exits with  TypeError: 'tuple' object is not callable . 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48838316)
 A tuple is an immutable list. It means once you create a tuple, it cannot be modified.
[Read more about tuples and other sequential data types here.][1]
So, if you really need to change a tuple during run time: 

 
 Convert the tuple into a list 
 Make the necessary changes to the list 
 Convert the list back to a tuple 
 

 

  OR  

 
 Create a list 
 Modify the list 
  Convert the list into a tuple 

So, in your case:  
 
 



 a = []
for i in range (1,10):
    a.append((i,i,i))
a = tuple(a)   
print a 




-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29290390)
 This should do it: 

  def lol_to_tuple(lol):
    return tuple(el if type(el) is not list 
                    else lol_to_tuple(el) 
                 for el in lol)
  

 To go back, just replace tuple with list: 

  def tuples_to_lol(tuples):
    return list(el if type(el) is not tuple 
                   else tuples_to_lol(el) 
                for el in tuples)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37379506)
  

  set(second_list) - set(first_list)
  

 because strings are hashable and you can put them in sets. If you have non-hashable values then tell us what they are and we can probably come up with a workaround. For example: 

 
 You can convert a list to a tuple using  tuple(the_list) , can back using  list(the_tuple) . 
 You can convert a set to a tuple using  tuple(the_set) , can back using  set(the_tuple) . 
 You can convert a nested list to a nested tuple using  tuple(map(tuple, the_list))  and back using  list(map(list, the_tuple)) . 
 You can convert a dictionary to a nested tuple using  tuple(the_dict.items())  and back using  dict(the_tuple) . 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20614469)
 You can convert a list to tuple with  tuple  function like this 

  tuple(lst)
  

 And to check if a list and tuple are the same, you can simply do this 

  return tuple(lst) == tup
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20761214)
  >>> l = [[], [], [('ef', 1)], [], [('cd', 3)], [('ab', 2)]]
>>> import itertools
>>> [list(itertools.chain(*item)) for item in l]
[[], [], ['ef', 1], [], ['cd', 3], ['ab', 2]]
  

 This will also handle multiple tuples per list element (if that's what is desired): 

  >>> l = [[], [], [('ef', 1)], [], [('cd', 3),('ab', 2)]]
>>> [list(itertools.chain(*item)) for item in l]
[[], [], ['ef', 1], [], ['cd', 3, 'ab', 2]]
  



