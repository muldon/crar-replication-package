Query: How do I stack two DataFrames next to each other in Pandas?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13082062)
 pd.concat is also an option 

  In [17]: pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)
Out[17]:
             GOOG                  AAPL
             Open   High    Low    Open    High     Low
Date
2011-01-03  21.01  21.05  20.78  596.48  605.59  596.48
2011-01-04  21.12  21.20  21.05  605.62  606.18  600.12
2011-01-05  21.19  21.21  20.90  600.07  610.33  600.05
2011-01-06  20.67  20.82  20.55  610.68  618.43  610.05
2011-01-07  20.71  20.77  20.27  615.91  618.25  610.13
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/54710137)
 If I understand correctly you want to modify your  dfs  in place however  stack  is not an inplace operator but returns a new  df  as the output 

  df = pd.DataFrame({'a': [1,2], 'b': [3,4]})
df1 = pd.DataFrame({'a': [5,6], 'b': [7,8]})


new_dfs = list(map(pd.DataFrame.stack, [df, df1]))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/54710244)
 Assign output to new list od  Series , because  stack  not working inplace: 

  dfs = [df.stack() for df in [df1, df2, df3, df4]]
  

  

  df1, df2, df3, df4 = dfs
  

  

  df = pd.concat(dfs, axis=1)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/13079936)
 Have a look at the  join  method of dataframes, use the  lsuffix  and  rsuffix  attributes to create new names for the joined columns.   

  >>> x
          A         B         C
0  0.838119 -1.116730  0.167998
1 -1.143761  0.051970  0.216113
2 -0.614441  0.208978 -0.630988
3  0.114902 -0.248791 -0.503172
4  0.836523 -0.802074  1.478333
>>> y
          A         B         C
0 -0.455859 -0.488645 -1.618088
1 -2.295255  0.524681  1.021320
2 -0.484612  1.101463 -0.081476
3 -0.475076  0.915797 -0.998777
4 -0.847538  0.057044  1.053533
>>> x.join(y, lsuffix="_x", rsuffix="_y")
        A_x       B_x       C_x       A_y       B_y       C_y
0  0.838119 -1.116730  0.167998 -0.455859 -0.488645 -1.618088
1 -1.143761  0.051970  0.216113 -2.295255  0.524681  1.021320
2 -0.614441  0.208978 -0.630988 -0.484612  1.101463 -0.081476
3  0.114902 -0.248791 -0.503172 -0.475076  0.915797 -0.998777
4  0.836523 -0.802074  1.478333 -0.847538  0.057044  1.053533
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40679311)
 If the dates are in the index then simply: 

  df['20160101':'20160301']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44724546)
  import pandas as pd

df1 = pd.DataFrame({'col1':['AA','AB','AC'], 'col2':[12,13,14]})
df2 = pd.DataFrame({'col1':['AA','AB','AD'], 'col2':[12,13,15]})
  

 Now, you can use  concat  to stack them and  group  them: 

  df = pd.concat( [df1, df2],axis=0,ignore_index=True)
df = df.groupby('col1').sum().reset_index()
print(df) 
  

 Output: 

     col1  col2
0   AA    24
1   AB    26
2   AC    14
3   AD    15
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51614045)
 Another way you can do it using  stack ,  merge , and  pivot : 

  df_out = (df2.stack().reset_index()
             .merge(df1, left_on='level_1', right_on='cat')[['level_0','mag',0]])

df_out.pivot('level_0','mag',0).reset_index(drop=True)
  

 Output: 

  mag   101   256   760   888
0    E50R  AZ33  AZ33  REZ3
1    T605  YYU6  YYU6  YHG5
2    IR50  P0O9  P0O9  BF53
3     NaN  YY9I  YY9I   NaN
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49701263)
 IIUC: 
https://stackoverflow.com/a/49620539/2336654 
https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html 

  pd.concat(C, keys=list(zip(A, B)), axis=1)

        Jan                           Feb                           Mar                    
  location1                     location2                     location3                    
          A         B         C         A         B         C         A         B         C
0 -0.519821 -1.820451 -0.645732 -0.519821 -1.820451 -0.645732 -0.519821 -1.820451 -0.645732
1  1.043477 -0.666565 -0.298504  1.043477 -0.666565 -0.298504  1.043477 -0.666565 -0.298504
  

 

 Alternatively 

  pd.concat(dict(zip(zip(A, B), C)), axis=1)
  



