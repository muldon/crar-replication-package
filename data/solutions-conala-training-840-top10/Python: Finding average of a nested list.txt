Query: Python: Finding average of a nested list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2157646)
 If you have http://numpy.scipy.org/ installed: 

  >>> import numpy as np
>>> a = [[1,2,3],[4,5,6],[7,8,9]]
>>> arr = np.array(a)
>>> arr
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
>>> np.mean(arr)
5.0
>>> np.mean(arr,axis=0)
array([ 4.,  5.,  6.])
>>> np.mean(arr,axis=1)
array([ 2.,  5.,  8.])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2153459)
  a = [sum(x)/len(x) for x in zip(*a)]
# a is now [4, 5, 6] for your example
  

 In Python 2.x, if you don't want integer division, replace  sum(x)/len(x)  by  1.0*sum(x)/len(x)  above. 

 http://docs.python.org/library/functions.html#zip. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27098595)
 Assuming value in dictionary contains list of only two elements (which are again lists):   

  d = {'dog': [['4.1', '7.0', 'dog'], ['1.2', '3.4', 'dog']], 'cat': [['1', '8.2', '5.501', 'cat'], ['6.5', '8', '9.1', 'cat']]}

avg_dict = {}
for key in d:
    avg_list = []
    i = 0
    while (i < len(d[key][0]) - 1):
        avg_list.append((float(d[key][0][i]) + float(d[key][1][i])) /2.0)
        i += 1
    avg_dict[key] = avg_list

print(avg_dict)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29062467)
  

  x=[ [["apple",2]], [["cake",5],["cake",8]], [["chocolate",3],["chocolate",9],["chocolate",10]],[["grapes",6]] ]
y=[]
for i in x:
    avg=0
    c=0
    for k in i:
        avg=k[1]+avg
        c=c+1
    avg=avg/c
    y.append([k[0],avg])
    avg=0
    c=0

print y
  

 Output: 

  [['apple', 2], ['cake', 6], ['chocolate', 7], ['grapes', 6]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44302923)
 You could just use  sum  and a generator expression: 

  >>> l= [['a', 10, 30], ['b', 34, 89], ['c', 40, 60],['d',30,20]]
>>> length = float(len(l))  # in Python 3 you don't need the "float"
>>> sum(subl[1] for subl in l) / length 
28.5
>>> sum(subl[2] for subl in l) / length
49.75
  

 Or even do that inside a list comprehension: 

  >>> [sum(subl[subj] for subl in l) / length for subj in range(1, 3)]
[28.5, 49.75]
  

 Similarly for the average of one sublist: 

  >>> length = float(len(l[0])) - 1
>>> [sum(subl[1:]) / length for subl in l]
[20.0, 61.5, 50.0, 25.0]
  

 When you have python 3.4 or newer you can replace the  sum / length  with https://docs.python.org/3/library/statistics.html#statistics.mean: 

  >>> from statistics import mean
>>> [mean(subl[subj] for subl in l) for subj in range(1, 3)]  
[28.5, 49.75]

>>> [mean(subl[1:]) for subl in l]
[20, 61.5, 50, 25]
  

 

 You asked about the best way so I probably should mention that there are packages dedicated for tabular data. For example If you have  pandas  it's even easier using  DataFrame  and  mean : 

  >>> import pandas as pd

>>> df = pd.DataFrame(l, columns=['name', 'x', 'y']) 
>>> df[['x', 'y']].mean(axis=0)
x    28.50
y    49.75
dtype: float64

>>> df[['x', 'y']].mean(axis=1)
0    20.0
1    61.5
2    50.0
3    25.0
dtype: float64
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44161334)
 Here is an option with a defaultdict: 

  from collections import defaultdict
avg = defaultdict(lambda :{'count': 0, 'sum': 0})
â€‹
# calculate the sum and count for each key
for k, v in data:
    avg[k]['count'] += 1
    avg[k]['sum'] += v

# calculate the average
[(k, v['sum']/v['count']) for k, v in avg.items()]

#[('A', 2.0),
# ('D', 12.0),
# ('F', 8.0),
# ('E', 12.0),
# ('B', 4.714285714285714),
# ('C', 10.0)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29062553)
 You can do it with 2 list comprehensions and http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html function or https://docs.python.org/3/library/statistics.html function if you use python 3: 

  In [1]: [[x[0][0], round(np.mean([y[1] for y in x]))] for x in data]
Out[1]: [['apple', 2.0], ['cake', 7.0], ['chocolate', 7.0], ['grapes', 6.0]]
  

 If you don't have mean function, you can calculate it like this 

  In [2]: tmp = ([x[0][0], [y[1] for y in x]] for x in data)
In [3]: [[x[0], round(sum(x[1])*1.0/len(x[1]))] for x in tmp]
Out[3]: [['apple', 2.0], ['cake', 7.0], ['chocolate', 7.0], ['grapes', 6.0]]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44161569)
 Try with https://docs.python.org/2/library/itertools.html#itertools.groupby 

  from itertools import groupby
data_ = [(n,[i[1] for i in g]) for n,g in groupby(data, key = lambda x:x[0])]   
result = [(i,float(sum(j))/float(len(j))) for i,j in data_]
  

     

  [('A', 2.0),
 ('B', 4.714285714285714),
 ('C', 10.0),
 ('D', 12.0),
 ('E', 12.0),
 ('F', 8.0)]
  



