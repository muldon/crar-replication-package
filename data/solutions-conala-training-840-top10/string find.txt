Query: string find
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34445090)
 Again, old thread, but here's my solution using a  generator  and plain  str.find .  

  def findall(p, s):
    '''Yields all the positions of
    the pattern p in the string s.'''
    i = s.find(p)
    while i != -1:
        yield i
        i = s.find(p, i+1)
  

 Example</h3>

  x = 'banananassantana'
[(i, x[i:i+2]) for i in findall('na', x)]
  

 returns 

  [(2, 'na'), (4, 'na'), (6, 'na'), (14, 'na')]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/51207335)
 This does the trick for me using re.finditer 

  import re

text = 'This is sample text to test if this pythonic '\
       'program can serve as an indexing platform for '\
       'finding words in a paragraph. It can give '\
       'values as to where the word is located with the '\
       'different examples as stated'

#  find all occurances of the word 'as' in the above text

find_the_word = re.finditer('as', text)

for match in find_the_word:
    print('start {}, end {}, search string \'{}\''.
          format(match.start(), match.end(), match.group()))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4665027)
  >>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int
  

  

  def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches

list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]
  

 No temporary strings or regexes required. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42049019)
  from timeit import timeit
from re import search, DOTALL


def partition_find(string, start, end):
    return string.partition(start)[2].rpartition(end)[0]


def re_find(string, start, end):
    # applying re.escape to start and end would be safer
    return search(start + '(.*)' + end, string, DOTALL).group(1)


def index_find(string, start, end):
    return string[string.find(start) + len(start):string.rfind(end)]


# The wikitext of "Alan Turing law" article form English Wikipeida
# https://en.wikipedia.org/w/index.php?title=Alan_Turing_law&action=edit&oldid=763725886
string = """..."""
start = '==Proposals=='
end = '==Rival bills=='

assert index_find(string, start, end) \
       == partition_find(string, start, end) \
       == re_find(string, start, end)

print('index_find', timeit(
    'index_find(string, start, end)',
    globals=globals(),
    number=100_000,
))

print('partition_find', timeit(
    'partition_find(string, start, end)',
    globals=globals(),
    number=100_000,
))

print('re_find', timeit(
    're_find(string, start, end)',
    globals=globals(),
    number=100_000,
))
  

  

  index_find 0.35047444528454114
partition_find 0.5327825636197754
re_find 7.552149639286381
  

  re_find  was almost 20 times slower than  index_find  in this example. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14979188)
 To extract  STRING , try: 

  myString = '123STRINGabc'
startString = '123'
endString = 'abc'

mySubString=myString[myString.find(startString)+len(startString):myString.find(endString)]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13094326)
 This will find the second occurrence of substring in string. 

  def find_2nd(string, substring):
   return string.find(substring, string.find(substring) + 1)
  

 Edit: I haven't thought much about the performance, but a quick recursion can help with finding the nth occurrence: 

  def find_nth(string, substring, n):
   if (n == 1):
       return string.find(substring)
   else:
       return string.find(substring, find_nth(string, substring, n - 1) + 1)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3221900)
 http://docs.python.org/library/stdtypes.html#str.find 

  >>> s = "the dude is a cool dude"
>>> s.find('dude')
4
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4664946)
 You can use  re.finditer()  for non-overlapping matches.  

  >>> import re
>>> aString = 'this is a string where the substring "is" is repeated several times'
>>> print [(a.start(), a.end()) for a in list(re.finditer('is', aString))]
[(2, 4), (5, 7), (38, 40), (42, 44)]
  

 but  won't  work for: 

  In [1]: aString="ababa"

In [2]: print [(a.start(), a.end()) for a in list(re.finditer('aba', aString))]
Output: [(0, 3)]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30465415)
 Basically, you want to find a substring in a string in Python. There are two ways to search for a substring in a string in Python. 

  Method 1:  in  operator  

 You can use the Python's  in  operator to check for a substring. . It will return  True  if the substring was found in the string else  False . 

  >>> "King" in "King's landing"
True

>>> "Jon Snow" in "King's landing"
False
  

  Method 2:  str.find()  method  

 The second method is to use the  str.find()  method.   .find()  method on the string in which substring is to found. We pass the substring to the find() method and check its return value. If its value is other than -1, the substring was found in the string, otherwise not. The value returned is the index where substring was found. 

  >>> some_string = "valar morghulis"

>>> some_string.find("morghulis")
6

>>> some_string.find("dohaeris")
-1
  

 I would recommend you to use the first method as it is more Pythonic and intuitive. 



