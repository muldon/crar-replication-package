Query: Python float to int conversion
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10898289)
 The problem is that you have a string and not a float, see this as comparison: 

  >>> int(20.0)
20
>>> int('20.0')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '20.0'
  

 You can workaround this problem by first converting to float and then to int: 

  >>> int(float('20.0'))
20
  

 So it would be in your case: 

  levels = [int(float(gex_dict[i])) for i in sorted(gex_dict.keys())]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10898298)
 It looks like the problem is that  gex_dict[i]  actually returns a string representation of a float  '20.0' . Although int() has the capability to cast from a float to an int, and a string representation of an integer to an int. It does not have the capability to cast from a string representation of a float to an int. 

 The documentation for int can be found here:
http://docs.python.org/library/functions.html#int 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10898270)
 It looks like the value is a string, not a float.  So you need  int(float(gex_dict[i]))  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/48682440)
  def int_float_none(x):
    # it may be already int or float 
    if isinstance(x, (int, float)):
        return x
    # all int like strings can be converted to float so int tries first 
    try:
        return int(x)
    except (TypeError, ValueError):
        pass
    try:
        return float(x)
    except (TypeError, ValueError):
        return None
  

 Function above for any object passed will return int or float conversion or None. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31400668)
 You can not convert that hex values to  float  directly, instead you can convert to int with specifying a proper base using  int()  function :  

  >>> l = [u'0', u'FF', u'7', u'0', u'FF', u'FFF', u'FFF']
>>> [int(i,16) for i in l]
[0, 255, 7, 0, 255, 4095, 4095]
  

 Or use  float  on  int  values : 

  >>> [float(int(i,16)) for i in l]
[0.0, 255.0, 7.0, 0.0, 255.0, 4095.0, 4095.0]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20519754)
 Notice that  you are not converting from float to int  using the floor division operator. The result of this operation is still a float. In Python 2.7.5 (CPython),  n=n//1  is exactly the same thing of: 

  n.__floordiv__(1)
  

 that is basically the same thing of: 

  n.__divmod__(1)[0]
  

 both functions return a float instead of an int. Inside the CPython  __divmod__  function, the denominator and numerator must be converted from PyObject to double. So, in this case, it's faster to use the  floor  function instead of the  //  operator, because only one conversion is needed. 

  from cmath import floor
n=floor(n)
  

 In the case you really want to convert a float to integer, I don't think there is a way to beat up the int(n) performance. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17824661)
 When you do  int(x) , it ALWAYS rounds down, meaning if you do  int(4.9999)  you'll get 4. Consider using  int(round(x))  instead 

  EDIT:  

 Wait...if you've multiplied by 100, why are you even using floats at all? What do you need the decimals for? Why not just turn cents into an int after you multiply by 100 and then get rid of all of this float nonsense? 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10898267)
  '20.0'  is a string, not a  float ; you can tell by the single-quotes in the error message. You can get an  int  out of it by first parsing it with  float , then truncating it with  int : 

  >>> int(float('20.0'))
20
  

 (Though maybe you'd want to store floats instead of strings in your dictionary, since that is what you seem to be expecting.) 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35251064)
 It is specified in the  Semantics for True division  in  https://www.python.org/dev/peps/pep-0238/ : 

 
   True division for  int s and  long s  will convert the arguments to
     float   and then apply a  float  division.  That is, even  2/1  will
    return a  float  ( 2.0 ), not an  int .  For  float s and  complex , it       will be the same as classic division. 
 

 So an automatic conversion is performed when an  int  is found. Note that this is the default behaviour in Python 3. In python 2 you'll need to  import  from  __future__  in order to have similar results.  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2375344)
 To convert from a numeric type to a string: 

  str(100)
  

 To convert from a string to an int: 

  int("100")
  

 To convert from a string to a float: 

  float("100")
  



