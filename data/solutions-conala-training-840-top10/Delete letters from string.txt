Query: Delete letters from string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15202183)
  x.translate(None, string.digits)
  

 will delete all digits from string. To delete letters and keep the digits, do this: 

  x.translate(None, string.letters)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15886411)
  import string
s = 'abcdefgABCDEFGHIJKLMNOP'
s.translate(None,string.ascii_lowercase)
  

 http://docs.python.org/2/library/string.html#string.translate function will delete all characters from the string that are in  deletechars , a list of characters. Then, the string will be translated using table  (we are not using it in this case) . 

 To remove only the lower case letters, you need to pass http://docs.python.org/2/library/string.html#string.ascii_lowercase as the list of letters to be deleted. 

 The  table  is None because when the table is  None , only the character deletion step will be performed. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17736075)
 You have linked to the Python 3.x documentation, but if  translate()  is being used with multiple arguments then this code is probably from Python 2.x where that is valid.  Here is the http://www.python.org/doc//current/library/stdtypes.html#str.translate. 

 As you can see there, the second argument is optional and it specifies characters that should be deleted from the input string (on Python 3.x you would do this by mapping the characters to  None ). 

 So for  "Agh#$%#%2341- -!.translate(table, delete_table) , first all characters present in  delete_table  are removed, and then a translation is performed using  table . 

 Since  delete_table  is constructed using  string.maketrans()  translating all lowercase letters to space, it will be a string that contains every ASCII character except for lowercase letters: 

  >>> delete_table = string.maketrans(string.ascii_lowercase, ' '*len(string.ascii_lowercase))
>>> delete_table
'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`                          {|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
>>> ''.join(c for c in map(chr, range(0, 256)) if c not in delete_table)
'abcdefghijklmnopqrstuvwxyz'
  

 So all other characters will be removed from the string, and then the translation with  table  will not modify anything since  string.maketrans('', '')  is used. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14750739)
 In python 2 the second argument to the  translate  method allows you to specify characters to delete 

 http://docs.python.org/2/library/stdtypes.html#str.translate 

 The example given shows that you can use  None  as a translation table to  just  delete characters: 

  >>> 'read this short text'.translate(None, 'aeiou')
'rd ths shrt txt'
  

 (You can get a list of all ASCII letters from the string module as  string.letters .) 

  Update : Python 3 also has a  translate  method, though it requires a slightly different setup: 

  from string import ascii_letters
tr_table = str.maketrans({c:None for c in ascii_letters})
'12345v'.transate(tr_table)
  

 For the record, using translation tables in Python 2 is  much ,  much  faster than the join/filter method: 

  >>> timeit("''.join(filter(lambda c:not c.isalpha(), '12454v'))")
2.698641061782837
>>> timeit("''.join(filter(str.isdigit, '12454v'))") 
1.9351119995117188
>>> timeit("'12454v'.translate(None, string.letters)", "import string")
0.38182711601257324
  

 Likewise in Python 3: 

  >>> timeit("'12454v'.translate(tr_table)", "import string; tr_table=str.maketrans({c:None for c in string.ascii_letters})")
0.6507143080000333
>>> timeit("''.join(filter(lambda c:not c.isalpha(), '12454v'))")
2.436105844999929
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/23176091)
 If your goal is to return a string that is equal to the original string with the vowels removed, try: 

  import re
def anti_vowel(text):
    return re.sub("[aeiou]+", "", text)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22788627)
 The  or  does not work the way you think it works in English.  

  new_s = ''

for entry in s:
    if entry.isalpha() or entry.isdigit() or entry.isspace():
        new_s += entry

print(new_s)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6323484)
 There are other ways also you may consider e.g. simply loop thru string and skip unwanted chars e.g. assuming you want to delete all ascii chars which are not letter or digits 

  >>> newstring = [c for c in "a!1#b$2c%3\t\nx" if c in string.letters + string.digits]
>>> "".join(newstring)
'a1b2c3x'
  

 or use string.translate to map one char to other or delete some chars e.g. 

  >>> todelete = [ chr(i) for i in range(256) if chr(i) not in string.letters + string.digits ]
>>> todelete = "".join(todelete)
>>> "a!1#b$2c%3\t\nx".translate(None, todelete)
'a1b2c3x'
  

 this way you need to calculate  todelete  list once or  todelete  can be hard-coded once and use it everywhere you need to convert string  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14750778)
   .translate  method. 

  >>> import string
>>> str='12454v'
>>> str.translate(None, string.letters)
'12454'
  

 There is a very good answer about  .translate  method https://stackoverflow.com/questions/1450897/python-removing-characters-except-digits-from-string.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/17820623)
 This will do it: 

  def erase(string, positions):
    return "".join([y for x,y in enumerate(string) if x not in positions])
  

  

  >>> s='xx22xx_1x_xxxx-xxxx'
>>> erase(s, (0,1,7))
'22xx_x_xxxx-xxxx'
>>>
  



