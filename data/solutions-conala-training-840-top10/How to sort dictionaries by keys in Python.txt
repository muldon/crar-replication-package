Query: How to sort dictionaries by keys in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52142908)
 . This will sort your dict by keys.  This is work only on Python 2.7 

  newlist = sorted(list_to_be_sorted, key=lambda k: k.keys()) 
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47796302)
 Sorting on all  keys  in the dictionaries can be done with: 

  a.sort(key=lambda d: d.keys())
b.sort(key=lambda d: d.keys())
  

 To get the result you want we need to sort the keys on ascending order as follows: 

  a.sort(key=lambda d: sorted(list(d.keys()), reverse=True))
b.sort(key=lambda d: sorted(list(d.keys()), reverse=True))
  

 This gives the following result: 

  >>> a
[{5: 6}, {1: 2, 7: 8}, {3: 4, 7: 8}]
>>> b
[{5: 6}, {1: 2, 7: 8}, {3: 4, 7: 8}]
  

 Edit: In order to sort based on the values as well (asked in the comments) the following might work: 

  a.sort(key=lambda d: sorted(list(d.keys()) + sorted(list(d.values())), reverse=True))
b.sort(key=lambda d: sorted(list(d.keys()) + sorted(list(d.values())), reverse=True))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47891763)
 You need to use all items of each dict while sorting, and  d.items()  iterates items in arbitrary order, so they need to be sorted. And this is your sorting key: 

  a = [{1: 2, 7: 8}, {7: 8, 3: 4}, {5: 6}]
b = [{3: 4, 7: 8}, {7: 8, 1: 2}, {5: 6}]
sorted(a, key=lambda d: sorted(d.items()))
Out: [{1: 2, 7: 8}, {3: 4, 7: 8}, {5: 6}]

sorted(b, key=lambda d: sorted(d.items()))
Out: [{1: 2, 7: 8}, {3: 4, 7: 8}, {5: 6}]

x = [{1: 2},{1: 3}]
y = [{1: 3},{1: 2}]
sorted(x, key=lambda d: sorted(d.items()))
Out: [{1: 2}, {1: 3}]

sorted(y, key=lambda d: sorted(d.items()))
Out: [{1: 2}, {1: 3}]
  

 Note that  sorted(a, key=...)  creates a new list, while  a.sort(key=...)  makes sorting in place. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4331945)
 
   Use http://docs.python.org/dev/library/collections.html#collections.OrderedDict, if you use python 2.7 or later. 
 

 Ordered dictionaries are just like regular dictionaries but they remember the order that items were inserted. When iterating over an ordered dictionary, the items are returned in the order their keys were first added. 

 From the example 

  >>> # regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

>>> # dictionary sorted by key
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])
  

 For trying to achieve something of the same effect for python 2.4 or lower, see: 

 
 http://code.activestate.com/recipes/576693/ 
 

 
    A drop-in substitute for Py2.7's new collections.OrderedDict that works in Python 2.4-2.6.    
 

 
 http://pypi.python.org/pypi/ordereddict 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52618454)
 A Python dict is an unsorted collection, at least it is before Python 3.6, so you can't guarantee that the keys retain insertion order. And since you want the keys to be in numerical order we need to sort them. 

 Then we can use a list comprehension to extract the corresponding values from each dict in the list, and use tuple assignment to assign each of the list to a separate name. 

  data = [{50: 2, 75: 3, 99: 4}, {50: 5, 75: 6, 99: 7}, {50: 8, 75: 9, 99:10}]
a, b, c = [[d[k] for d in data] for k in sorted(data[0].keys())]
  

 FWIW, it may be more convenient to save the output as a single list of lists, rather than as 3 separate lists. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26921626)
 This will work in Python 2 and 3: 

  >>> mylist = [{.56: 'a'}, {1.0: 'a'}, {.98: 'b'}, {1.0: 'c'}]

>>> sorted(mylist, key=lambda d: max(d.keys()), reverse=True)
[{1.0: 'a'}, {1.0: 'c'}, {0.98: 'b'}, {0.56: 'a'}]
  

 It uses the  sorted 's  key  argument to sort based on the largest key of each dict, which in this case will just be the first one if you only have one. 

 The other solution may work, but this is much more straightforward. 

 P.S. Don't ever name your variables after Python builtins like  list . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26921613)
 With Python 3+, since it throws an error as @Simon mentions. This depends on your dictionaries being singletons: 

  >>> lst = [{.56: 'a'}, {1.0: 'a'}, {.98: 'b'}, {1.0: 'c'}]
>>> sorted(lst, key=lambda d: d.keys()[0], reverse=True)
[{1.0: 'a'}, {1.0: 'c'}, {0.98: 'b'}, {0.56: 'a'}]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2291650)
 Dictionaries in python (and hash tables in general) are unordered. In python you can use the  sort()  method on the keys to sort them. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35329463)
 In Python, dictionaries are represented internally by hash tables so you cannot natively get back the keys in sorted order. You can use  sorted(d.keys())  to return a list of keys in sorted order. You can also use  collections.OrderedDict  if you pre-sort the keys. If you do not know the order of the keys ahead of time and you need to maintain the keys in sorted order as you insert values, you could take a look at https://pypi.python.org/pypi/sortedcontainers for the SortedDict type. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/17963354)
 Dictionaries are arbitrarily ordered in Python. The order is not guaranteed and you should not rely on it. If you need an ordered collection, use either http://docs.python.org/2/library/collections.html#collections.OrderedDict or a list. 

 If you want to access the dictionary in key order, first get a list of the keys then sort it and then step through that: 

  keys = Digit.keys()
keys.sort()

for i in keys:
   print Digit[i]
  



