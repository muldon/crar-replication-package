Query: How to urlencode a querystring in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9472647)
 Python 3: 

 http://docs.python.org/py3k/library/urllib.parse.html?highlight=urllib#urllib.parse.quote_plus 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33266288)
 In Python 3, this worked with me 

<pre class="lang-py prettyprint-override"> import urllib

urllib.parse.quote(query)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47448466)
 If the urllib.parse.urlencode( ) is giving you errors , then Try the urllib3 module .</h3>

 The  syntax  is as follows :  

  import urllib3
urllib3.request.urlencode({"user" : "john" }) 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24730081)
  

  urllib.pathname2url(stringToURLEncode)
  

  urlencode  won't work because it only works on dictionaries.  quote_plus  didn't produce the correct output. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5607708)
 You need to pass your parameters into http://docs.python.org/2/library/urllib.html#urllib.urlencode as either a mapping (dict), or a sequence of 2-tuples, like: 

  >>> import urllib
>>> f = { 'eventName' : 'myEvent', 'eventDescription' : 'cool event'}
>>> urllib.urlencode(f)
'eventName=myEvent&eventDescription=cool+event'
  

  Python 3 or above  

 Use: 

  >>> urllib.parse.urlencode(f)
eventName=myEvent&eventDescription=cool+event
  

 Note that this does  not  do url encoding in the commonly used sense (look at the output). For that use  urllib.parse.quote_plus . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15503663)
 for future references (ex: for python3) 

  >>> import urllib.request as req
>>> query = 'eventName=theEvent&eventDescription=testDesc'
>>> req.pathname2url(query)
>>> 'eventName%3DtheEvent%26eventDescription%3DtestDesc'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18558040)
 Try http://docs.python-requests.org/en/latest/ instead of urllib and you don't need to bother with urlencode! 

  import requests
requests.get('http://youraddress.com', params=evt.fields)
  

  EDIT:  

 If you need  ordered name-value pairs  or multiple values for a name then set params like so: 

  params=[('name1','value11'), ('name1','value12'), ('name2','value21'), ...]
  

 instead of using a dictionary. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54260909)
 For use in scripts/programs which need to support both python 2 and 3, the six module provides quote and urlencode functions: 

  >>> from six.moves.urllib.parse import urlencode, quote
>>> data = {'some': 'query', 'for': 'encoding'}
>>> urlencode(data)
'some=query&for=encoding'
>>> url = '/some/url/with spaces and %;!<>&'
>>> quote(url)
'/some/url/with%20spaces%20and%20%25%3B%21%3C%3E%26'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13363676)
 Python has a built in tool for encoding a dictionary (any mapping object) into a query string 

  params = {'a': 'one', 'b': 'two', }

urllib.urlencode(params)

'a=one&b=two'
  

 http://docs.python.org/2/library/urllib.html#urllib.urlencode 

  QueryDict  takes a querystring as first param of its contstructor 

  def __init__(self, query_string, mutable=False, encoding=None):  

  q = QueryDict('a=1&b=2')  

 https://github.com/django/django/blob/master/django/http/request.py#L260 

 Update: in  Python3 , urlencode has https://docs.python.org/3/library/urllib.parse.html: 

  from urllib.parse import urlencode

params = {'a': 'one', 'b': 'two', }
urlencode(params)
'a=one&b=two'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18648642)
 Context</h3>

 
 Python (version 2.7.2 ) 
 

 Problem</h3>

 
 You want to generate a urlencoded query string. 
 You have a dictionary or object containing the name-value pairs. 
 You want to be able to control the output ordering of the name-value pairs. 
 

 Solution</h3>

 
 urllib.urlencode 
 urllib.quote_plus 
 

 Pitfalls</h3>

 
 dictionary output arbitrary ordering of name-value pairs

 
 (see also: https://stackoverflow.com/questions/526125) 
 (see also: https://stackoverflow.com/questions/15479928) 
  
 handling cases when you  DO NOT  care about the ordering of the name-value pairs 
 handling cases when you  DO  care about the ordering of the name-value pairs 
 handling cases where a single name needs to appear more than once in the set of all name-value pairs 
 

 Example</h3>

 The following is a complete solution, including how to deal with some pitfalls. 

  ### ********************
## init python (version 2.7.2 )
import urllib

### ********************
## first setup a dictionary of name-value pairs
dict_name_value_pairs = {
  "bravo"   : "True != False",
  "alpha"   : "http://www.example.com",
  "charlie" : "hello world",
  "delta"   : "1234567 !@#$%^&*",
  "echo"    : "user@example.com",
  }

### ********************
## setup an exact ordering for the name-value pairs
ary_ordered_names = []
ary_ordered_names.append('alpha')
ary_ordered_names.append('bravo')
ary_ordered_names.append('charlie')
ary_ordered_names.append('delta')
ary_ordered_names.append('echo')

### ********************
## show the output results
if('NO we DO NOT care about the ordering of name-value pairs'):
  queryString  = urllib.urlencode(dict_name_value_pairs)
  print queryString 
  """
  echo=user%40example.com&bravo=True+%21%3D+False&delta=1234567+%21%40%23%24%25%5E%26%2A&charlie=hello+world&alpha=http%3A%2F%2Fwww.example.com
  """

if('YES we DO care about the ordering of name-value pairs'):
  queryString  = "&".join( [ item+'='+urllib.quote_plus(dict_name_value_pairs[item]) for item in ary_ordered_names ] )
  print queryString
  """
  alpha=http%3A%2F%2Fwww.example.com&bravo=True+%21%3D+False&charlie=hello+world&delta=1234567+%21%40%23%24%25%5E%26%2A&echo=user%40example.com
  """ 
  



