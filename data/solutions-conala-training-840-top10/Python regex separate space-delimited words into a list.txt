Query: Python regex separate space-delimited words into a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37445417)
 You can use Regex and a simple list comprehension to do this. The regex will pull out words and separate punctuation, and the list comprehension will remove the blank spaces. 

  import re
s = "I want that one, it is great. Don't do it."
new_s = [c.strip() for c in re.split('(\W+)', s) if c.strip() != '']
print new_s
  

 The output of  new_s  will be: 

  ['I', 'want', 'that', 'one', ',', 'it', 'is', 'great', '.', 'Don', "'", 't', 'do', 'it', '.']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/4383096)
  "hello world sample text".split()
  

 will split on any whitespace. If you only want to split on spaces 

  "hello world sample text".split(" ")
  

 regex version would be something like this 

  re.split(" +", "hello world sample text")
  

 which works if you have multiple spaces between the words 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30383962)
 This is not a regular sentence where words are joined with an underscore. Since you are just checking if the word is present, you may either remove  \b  (as it is matching on a word boundary and  _  is a word character!) or add alternatives: 

  import re
my_other_string = 'the_boat_has_sunk'
my_list = ['car', 'boat', 'truck']
my_list = re.compile(r'(?:\b|_)(?:%s)(?=\b|_)' % '|'.join(my_list))
if re.search(my_list, my_other_string):
    print('yay')
  

 See http://ideone.com/nR91vD 

  EDIT : 

 Since you say  it has to be true if one of the words in the list is in the string, not only as a separate word , but  it musn't match if for example boathouse is in the string , I suggest first replacing non-word characters and  _  with space, and then using the regex you had with  \b : 

  import re
my_other_string = 'the_boathouse_has_sunk'
my_list = ['car', 'boat', 'truck']
my_other_string = re.sub(r'[\W_]', ' ', my_other_string)
my_list = re.compile(r'\b(?:%s)\b' % '|'.join(my_list))
if re.search(my_list, my_other_string):
    print('yay')
  

 This will not print  yay , but if you remove  house , it will. 

 See http://ideone.com/UJsJ03 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50472680)
 Assuming your data really looks like this: 

    col1     col2
0    a  a b c d
1    s  e f g h
2    f  i j k l
  

   join   with   findall   

  df.join(pd.DataFrame(df.col2.str.findall(r'\w+').values.tolist())).drop('col2', 1)

  col1  0  1  2  3
0    a  a  b  c  d
1    s  e  f  g  h
2    f  i  j  k  l
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52830813)
 You can use  re.findall(r'[^_ ]+', word)  instead to split the underscore or space-delimited words. Also add another comprehension layer to flatten the possible tuples of strings: 

  import re
L1 = [animal for item in mylist for word in (item if isinstance(item, (tuple, list)) else (item,)) for animal in re.findall(r'[^_ ]+', word)]
  

  L1  would become: 

  ['dog', 'camel', 'horse', 'List', 'of', 'people', 'saved', 'by', 'Oskar', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2424234)
 <s>Just  line.split()  could give you stripped words list.</s> 

 Updating  each  inside the loop does not make any changes to the  words  list 

 Should be done like this 

  for i in range(len(words)):
    words[i]=words[i].rstrip()
  

  

  words=map(str.rstrip,words)
  

 http://docs.python.org/library/functions.html#map for details on map. 

  one liner with list comprehension 

  words=[x.rstrip() for x in line.split("\t")]
  

  with regex . 

  words=re.("[^\t]+",line)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50473162)
 A simpler way is using  expand=True  argument. 

  # sample data
df = pd.DataFrame({'c1':['a','b','c'], 'c2':['a b c d','e f g h','i j k l']})

# transform into multiple columns
df = pd.concat([df['c1'],df['c2'].str.split(' ', expand=True)], axis=1)

print(df)

  c1  0  1  2  3
0  a  a  b  c  d
1  b  e  f  g  h
2  c  i  j  k  l
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/37728157)
 It's not regex, but you could do this: 

  words = [word for word in string.split() if len(word) == 3]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21371971)
 You can do this in 1-2 lines, but it is easiest to read if you break it up: 

  words = "mike dc car dc george dc jerry dc"
wlist = words.split()
mystr = ""
for i in range(0, len(wlist), 2):
    mystr = "%s%s %s\t" % (mystr, wlist[i], wlist[i+1])
print mystr
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22875044)
 If you have tabs, this is pretty trivial, but if you're just looking for something where there's more than one space, you can use python's  re.split  method to do this: 

  import re

re.split('\s{2,}', '235Carling             Robert         140 Simpson Ave     Toronto        Ont M6T9H1416/247-2538416/889-6178')

['235Carling', 'Robert', '140 Simpson Ave', 'Toronto', 'Ont M6T9H1416/247-2538416/889-6178']
  

 Where  \s{2,}  just matches any series of 2 or more whitespace characters. 

 If the characters between your rows there are actually tabs you can avoid the regex alltogether: 

  test = '235Carling             Robert         140 Simpson Ave     Toronto        Ont M6T9H1416/247-2538416/889-6178'

test.split('\t')

['235Carling', 'Robert', '140 Simpson Ave', 'Toronto', 'Ont M6T9H1416/247-2538416/889-6178']
  



