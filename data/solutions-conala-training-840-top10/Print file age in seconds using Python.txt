Query: Print file age in seconds using Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/54291789)
 The accepted answer not actually answer the question, it just give answer for last modification time. for getting file age in second, minutes or hour you can do this. 

  import os, time

def file_age(filepath):
    return time.time() - os.path.getmtime(filepath)

seconds = file_age('myFile.txt') # 7200 seconds
minutes = int(seconds) / 60 # 120 minutes
hours = minutes / 60 # 2 hours
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6879539)
 Another approach (I know I wasn't the first answer but here goes anyway): 

  import time, os, stat

def file_age_in_seconds(pathname):
    return time.time() - os.stat(pathname)[stat.ST_MTIME]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6879383)
 Use stat.M_TIME to get the last modified time and subtract it from the current time. 

 http://docs.python.org/library/stat.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6879454)
 This shows how to find a file's (or directory's) last modification time: 

 Here are the number of seconds since the Epoch, using http://docs.python.org/library/os.html#os.stat 

  import os
st=os.stat('/tmp')    
mtime=st.st_mtime
print(mtime)
# 1325704746.52
  

 Or, equivalently, using http://docs.python.org/library/os.path.html#os.path.getmtime: 

  print(os.path.getmtime('/tmp'))
# 1325704746.52
  

 If you want a http://docs.python.org/library/datetime.html#datetime-objects object: 

  import datetime         
print("mdatetime = {}".format(datetime.datetime.fromtimestamp(mtime)))
# mdatetime = 2012-01-04 14:19:06.523398
  

 Or a formated string using http://docs.python.org/library/time.html#time.ctime 

  import stat
print("last accessed => {}".format(time.ctime(st[stat.ST_ATIME])))
# last accessed => Wed Jan  4 14:09:55 2012
print("last modified => {}".format(time.ctime(st[stat.ST_MTIME])))
# last modified => Wed Jan  4 14:19:06 2012
print("last changed => {}".format(time.ctime(st[stat.ST_CTIME])))
# last changed => Wed Jan  4 14:19:06 2012
  

 Although I didn't show it, there are equivalents for finding the access time and change time for all these methods. Just follow the links and search for "atime" or "ctime". 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/508764)
  from datetime import datetime, timedelta
datetime.now()
datetime.datetime(2009, 2, 3, 15, 17, 35, 156000)
datetime.now() - datetime(1984, 6, 29 )
datetime.timedelta(8985, 55091, 206000)
datetime.now() - datetime(1984, 6, 29 )
datetime.timedelta(8985, 55094, 198000) # my age...
  

 timedelta(days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/510638)
 If you don't want to use datetime (e.g. if your Python is old and you don't have the module), you can just use the time module. 

  s = "Mon, 17 Nov 2008 01:45:32 +0200"
import time
import email.utils # Using email.utils means we can handle the timezone.
t = email.utils.parsedate_tz(s) # Gets the time.mktime 9-tuple, plus tz
d = time.time() - time.mktime(t[:9]) + t[9] # Gives the difference in seconds.
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12126443)
 Use UTC time otherwise age in seconds can go backwards during DST transition: 

  from datetime import datetime

born = datetime(1981, 12, 2) # provide UTC time
age = datetime.utcnow() - born
print(age.total_seconds())
  

 You also can't use local time if your program runs on a computer that is in a different place (timezone) from where a person was born or if the time rules had changed in this place since birthday. It might introduce several hours error.  

 If you want to take into account leap seconds then the task becomes almost impossible. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12938261)
  datetime.date  only tracks year, month, and days.  If you want the time as well you should use http://docs.python.org/library/datetime.html#datetime.datetime: 

  >>> from datetime import datetime
>>> str(datetime.now() - datetime(1985, 5, 8))
'10024 days, 8:51:08.441714'
  

 The result of the subtraction is a http://docs.python.org/library/datetime.html#datetime.timedelta object, which has the attributes  days ,  seconds , and  microseconds  for customizing output: 

  >>> delta = datetime.now() - datetime(1985, 5, 8)
>>> print "Your age is %d days and %d seconds" % (delta.days, delta.seconds)
Your age is 10024 days and 32125 seconds
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/526976)
 
   is there a real way to do this with strptime? 
 

 No, but since your format appears to be an RFC822-family date, you can read it much more easily using the http://docs.python.org/library/email.util.html#email.utils.parsedate_tz library instead: 

  >>> import email.utils
>>> email.utils.parsedate_tz('Tue, 22 Jul 2008 08:17:41 +0200')
(2008, 7, 22, 8, 17, 41, 0, 1, 0, 7200)
  

 (7200 = timezone offset from UTC in seconds) 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/51696246)
 Take advantage of https://docs.python.org/3/library/datetime.html#timedelta-objects. 

  import datetime as dt


def years_ago(start: str):
    sec_per_year = 365.24 * 24 * 60 * 60
    delta = dt.datetime.now() - dt.datetime.strptime(start, '%d/%m/%Y')
    return delta.total_seconds() / sec_per_year


if __name__ == '__main__':
    print(int(years_ago(input('What is your date of birth (dd/mm/yyyy) ? '))))
  



