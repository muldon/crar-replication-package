Query: Non-consuming regular expression split in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5801963)
  >>> re.split("(?<=[\.\?!]) ", text)
['This is an example.', 'Is it made up of more than once sentence?', 'Yes, it is.']
  

 The crucial thing is the use of a  look-behind  assertion with  ?<= . 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9048552)
 Use a non-capturing group, like: 

  re.split('(?:,)', 'a,b')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/8923566)
 You can use "look ahead" feature offered by a lot of regular expression engines. Basically, the regex engines checks for a pattern without consuming it when it comes to look ahead. 

  import re
s = "u:sads asdas asdsad n:sadasda as:adds sdasd dasd a:sed eee"
re.split(r'\s(?=[a-z]:)', s)
  

 This means, split only when we have a  \s  followed by any letter and a colon but  don't  consume those tokens. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6709656)
 using a regular expression to split your string seems a bit overkill: the string  split()  method may be just what you need. 

 anyway, if you really need to match a regular expression in order to split your string, you should use the http://docs.python.org/library/re.html#re.split method, which splits a string upon a regular expression match. 

 also, use a correct regular expression for splitting: 

  >>> line = 'path:bte00250 Alanine, aspartate and glutamate metabolism path:bte00330 Arginine and proline metabolism'
>>> re.split(' (?=path:)', line)
['path:bte00250 Alanine, aspartate and glutamate metabolism', 'path:bte00330 Arginine and proline metabolism']
  

 the  (?=...)  group is a lookahead assertion: the expression matches a space  (note the space at the start of the expression)  which is followed by the string  'path:' , without consuming what follows the space. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49703763)
 Negative lookahead: 

  re.split('\.(?![0-9])', line)
  

  

  ['Apple is $3.00 higher than banana', ' Banana is cheap', 'I hate apple', '']
  

 Since  I  stands directly after dot, your regular expression  '\.[^0-9]'  will remove  I  because  .I  will match as a separator, and all separators are removed.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8291063)
 Your regex is consuming non whitespace characters only ( \S ). That is why it stops matching when it encounters a space character. 

   . . This will greedily match all characters except newlines ( \n ). 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/49617123)
 Use  re.split  instead: 

  >>> re.split('[_.]', 'ab9c_xy8z_12a3.pdf')[-2]
'12a3'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15318108)
 You don't even need regex. 

  pieces = s.split('_') # pieces are composed of only ? and o
for piece in pieces:
    if 'o' in piece and len(piece) >= n: # piece must have a substring of length n with o in it somewhere
        print "found it"
        break
else:
    print "didn't find it"
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/27660276)
  +  is greedy by default. so  \w+  in this  (\w+)(n't)?  regex matches greedily  upto the  n  in the string  can't  and then it won't backtrack to get the result of  can't  because you make the next pattern that is  (n't)?  . 

 In-order to avoid this, you need to add a non-greedy quantifier  ?  next to the  +  symbol like  

  (\w+?)(n't)?
  

 So that it would stop consuming the word characters using this  (\w+)  pattern once it finds a substring like  n't  . 

 https://regex101.com/r/rF1sU7/4 

  >>> words = ["can't", 'dog']
>>> [re.findall(r"(\w+?)(n't)?\b", w) for w in words]
[[('ca', "n't")], [('dog', '')]]
  

 Adding a word boundary next to the optional group will give you the desired output because we declared the previous pattern that is  \w+?  as non-greedy and we also make the following  (n't)  . So it splits up the input string. After adding the word boundary  \b  next to the optional group, it ensures that there must be a word boundary follows the matched string.  



