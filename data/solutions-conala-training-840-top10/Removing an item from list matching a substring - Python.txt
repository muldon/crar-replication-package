Query: Removing an item from list matching a substring - Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12666912)
 How about something simple like: 

  >>> [x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
['this doesnt', 'this shouldnt', 'this isnt', 'this musnt']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12666970)
 Another technique using  filter  

  filter( lambda s: not (s[0:3]=="@$\t" or s[0]=="#"), sents)
  

 The problem with your orignal approach is when you're on list item  i  and determine it should be deleted, you remove it from the list, which slides the  i+1  item into the  i  position. The next iteration of the loop you're at index  i+1  but the item is actually  i+2 .  

 Make sense? 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12666923)
 This should work: 

  [i for i in sents if not ('@$\t' in i or '#' in i)]
  

 If you want only things that begin with those specified sentential use the  str.startswith(stringOfInterest)  method 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12953357)
 Instead of removing an item from the list you're iterating over, try creating a new list with Python's nice http://docs.python.org/tutorial/datastructures.html#list-comprehensions: 

  foods = ['applepie','orangepie', 'turkeycake']
pieless_foods =  [f for f in foods if 'pie' not in f]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49638776)
   .mainlog  is not a string, it's a set of individual characters. 

 That's removing all leading and trailing characters that are in that list. 

 We'd get the same result if we passed in the argument   aiglmno. . 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41934083)
 I have solved it by generating a list of all possible substrings of the title. Then matching this with the match I got from the longest common substring function. 

  def get_all_substrings(input_string):
    length = len(input_string)
    return set([input_string[i:j+1] for i in range(length) for j in range(i,length)])

longest_substring_match = 'mycompany'
page_title = 'This is an example page title | My Company'

for substring in get_all_substrings(page_title):
    if re.sub('[^0-9a-zA-Z]+', '', substring).lower() == longest_substring_match.lower():
        match = substring
        break

print(match)
  

 Edit: https://stackoverflow.com/a/22470047/1107806 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9396328)
 You are not keeping the result of  x.replace() . Try the following instead: 

  for tag in tags:
    x = x.replace(tag, '')
print x
  

 Note that your approach matches any substring, and not just full words. For example, it would remove the  LOL  in  RUN LOLA RUN . 

 One way to address this would be to enclose each tag in a pair of  r'\b'  strings, and look for the resulting http://docs.python.org/library/re.html. The  r'\b'  would only match at word boundaries: 

  for tag in tags:
    x = re.sub(r'\b' + tag + r'\b', '', x)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/48748129)
 Remove the string only found at word boundaries using regular expression: 

  import re

l_r = [re.sub(r'\binc$', '', s) for s in l]
  

  \b  is special character matching word boundaries,  $  means the end of the string or just before the newline at the end of the string. For further information read the https://docs.python.org/2/library/re.html. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25467561)
 You cannot use  in  membership testing with a substring; you'd have to loop over  keyList   again  to test each substring. 

 It'd be far more efficient to grou all strings by prefix: 

  by_prefix = {}
for x in keyList:
    by_prefix.setdefault(x.rsplit('_', 1)[0], []).append(x)

for prefix, matches in by_prefix.iteritems():
    print 'Matches for {} are {}'.format(prefix, by_prefix[prefix])
  

 This only prints the matching elements; all  other  keys are those that didn't match, but they'll be printed on their own: 

  >>> keyList = ["pass1_v1", "pass1_v3", "pass1_v5", "pass2_v1", "pass2_v3", "pass3_v4"]
>>> by_prefix = {}
>>> for x in keyList:
...     by_prefix.setdefault(x.rsplit('_', 1)[0], []).append(x)
... 
>>> for prefix, matches in by_prefix.iteritems():
...     print 'Matches for {} are {}'.format(prefix, by_prefix[prefix])
... 
Matches for pass2 are ['pass2_v1', 'pass2_v3']
Matches for pass1 are ['pass1_v1', 'pass1_v3', 'pass1_v5']
Matches for pass3 are ['pass3_v4']
  



