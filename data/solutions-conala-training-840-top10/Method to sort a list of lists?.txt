Query: Method to sort a list of lists?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5201203)
 Pass the  key  argument. 

  L.sort(key=operator.itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1815271)
 to sort the list u can use a custom sort method some thing like this 

  x = [('ba',4), ('hh',5), ('gg', 25)]

def sortMethod(x,y):
    if x[1] < y[1]:return 1
    elif x[1] > y[1]:return -1
    else: return 0


print x         #unsorted
x.sort(sortMethod)
print x         #sorted
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24565420)
 Lists have a sort method: 

  old_list = [1,9,7,3,6]
new_list = [x for x in old_list if x < 7]
new_list.sort()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/51333992)
 If you want to avoid creating a new list, then just iterate over the lists and call  .sort()  

  >>> foo = [[[2, 2, 2], [1, 1, 1], [3, 3, 3]], [[2, 2, 2], [1, 1, 1], [3, 3, 3]]]

for i in foo:
    i.sort()

>>> foo                                                                         
[[[1, 1, 1], [2, 2, 2], [3, 3, 3]], [[1, 1, 1], [2, 2, 2], [3, 3, 3]]]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9543293)
 @Ignacio's answer is the best, but just in case you need to  sort the lists in-place  without making new lists, you can try this: 

  import itertools
list_enumerate = itertools.count()

list_2.sort(reverse=True, key=lambda k: list_1[next(list_enumerate)])
list_1.sort(reverse=True)
print list_1
print list_2
  

 Note that  I do not think there is any guarantee that the  key  function is called for each list item in order  (which is necessary for this to work), so this is a risky method to use. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20183124)
 You can use  list.sort  with its optional https://wiki.python.org/moin/HowTo/Sorting#Key_Functions and a http://docs.python.org/2/tutorial/controlflow.html#lambda-expressions: 

  >>> lst = [
...     ['John',2],
...     ['Jim',9],
...     ['Jason',1]
... ]
>>> lst.sort(key=lambda x:x[1])
>>> lst
[['Jason', 1], ['John', 2], ['Jim', 9]]
>>>
  

 This will sort the list in-place. 

 

 Note that for large lists, it will be faster to use http://docs.python.org/2/library/operator.html#operator.itemgetter instead of a  lambda : 

  >>> from operator import itemgetter
>>> lst = [
...     ['John',2],
...     ['Jim',9],
...     ['Jason',1]
... ]
>>> lst.sort(key=itemgetter(1))
>>> lst
[['Jason', 1], ['John', 2], ['Jim', 9]]
>>>
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37319041)
 You can sort any list in two ways. 

 
  Using the  sorted  method :: In this the sorted method will return a sorted list but the actual list remains the same 

  x=[1,2,3.1,4.5,2.3]
y = sorted(x)
y = sorted(x,key=float) #in case if the values were there as string.
  

 In this case x still remains as  [1,2,3.1,4.5,2.3], where as the sorted list i.e [1,2,2.3,3.1,4.5] will be returned and in this case will be assigned to y.   
  Using the  sort  method call provided for lists :: in this the sort method call will sort the actual list 

  x=[1,2,3.1,4.5,2.3]
x.sort()
  

 In this case x will be sorted , hence if you try to print x it will be like [1,2,2.3,3.1,4.5].  
 

 You can use any of these methods according to your requirement. 

 .   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/49478817)
 Python's list.sort() method is "stable", i. e. the relative order of items that compare equal does not change. Therefore you can also achieve the desired order by calling sort() twice: 

  >>> list1 = [[3, 1, 5], [0, 4, 1, 5], [4, 0, 1, 5]]
>>> list1.sort()  # sort by sublist contents
>>> list1.sort(key=len)  # sort by sublist length
>>> list1
[[3, 1, 5], [0, 4, 1, 5], [4, 0, 1, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34721405)
 You have to use the optional  key  argument of the  .sort()  method. 

  

  for sublist in my_lists:
    sublist.sort(key="*/+-".index)
  

 Or if you want to create a new list: 

  new_list = [sorted(sublist, key="*/+-".index) for sublist in my_lists]
  

 Note that using dictionnary may be more efficient if you have many lists: 

  d = {"*": 0, "/": 1, "+": 2, "-": 3}
key = d.get
  



