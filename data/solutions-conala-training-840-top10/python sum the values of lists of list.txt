Query: python sum the values of lists of list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/53610417)
 Get the sum of each list individually, and then sum the both scalar values to get the total_sum: 

  In [1733]: num_list_1 = [1,2,3,4]

In [1734]: num_list_2 = [5,6,7,8]

In [1737]: sum(num_list_1) + sum(num_list_2)
Out[1737]: 36
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/48192820)
 Instead of the builtin  sum , which requires integers or floats throughout the list or tuple, you can use  reduce : 

  s1 = [1, 4, 5, 6]
s2 = ['a', 'b', 'c']
print(reduce(lambda x, y:x+y, s1))
print(reduce(lambda x, y:x+y, s2))
  

 Output: 

  16
abc
  

 In Python3,  functools  is required to use  reduce : 

  from functools import reduce
print(reduce(lambda x, y:x+y, s1))
  

  Edit : to sum the values of nested lists, it may be best to use recursion, as the list could be of arbitrary depth: 

  def flatten(l):
   return reduce(lambda x, y:x+y, [i if not isinstance(i, list) else flatten(i) for i in l])

print(flatten([['a', 'b', 'c'], ['d', 'e', ['h', ['18', 'dd', 'b']]]]))
  

 Output: 

  abcdeh18ddb
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/40823295)
 Just use https://docs.python.org/3/library/itertools.html#itertools.compress from  itertools  and feed it to  sum ; it's built for this purpose: 

  from itertools import compress 
r = sum(compress(list_2, list_1))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46985281)
 This will add the desired item to  items : 

  items['Total'] = map( sum, zip(*items.values()) )
  

 
  items.values()  gets you the lists of numbers.  For the example data, this would be  [[2,5,7],[4,6,7]]  
  zip(*items.values())   pivots  that list of lists, giving you a list grouping values at the same index together.  For the example, this would be  [[2,4],[5,6],[7,7]]  
 We  map  the  sum  function over these lists, giving you the sum sequence of sums desired. 
 Finally, this gets assigned to the desired element of  items . 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/280224)
  l.sort(key=sum_nested)
  

 Where  sum_nested()  is: 

  def sum_nested(astruct):
    try: return sum(map(sum_nested, astruct))
    except TypeError:
        return astruct


assert sum_nested([[([8, 9], 10), 11], 12]) == 50
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/40823235)
 Zip the lists, then sum only values where the first element is  1 : 

  s = sum(b for a, b in zip(list_1, list_2) if a)
  

 Another zip approach would be an element-wise multiplication between the lists (thus eliminating elements whose parallel is  0 ): 

  s = sum(a * b for a, b in zip(list_1, list_2))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23109241)
  fruits, values = ["Apple", "Orange", "Pear"], [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]
print zip(map(sum, zip(*values)), fruits)
# [(0.5, 'Apple'), (0.7, 'Orange'), (0.8999999999999999, 'Pear')]
  

 In the above code, 

  zip(*values)
  

 will get all the corresponding elements in the  values  list together.  

  [(0.1, 0.4), (0.2, 0.5), (0.3, 0.6)]
  

 now, we can to add them, so we do 

  map(sum, zip(*values))
  

 which finds the sum of all the corresponding elements in the  values  list. The result would be like this 

  [0.5, 0.7, 0.8999999999999999]
  

 Now, all we have to do is to map it with the corresponding  fruits  so we simply  zip  it. That's it :-) 

 Since, you are using Python 3.x, where  zip  returns an iterator instead of a list, you need to get the list like this 

  list(zip(map(sum, zip(*values)), fruits))
  

 If you want to do this without  zip  and  map , you can use 

  result = []
for i in range(len(fruits)):
    total = 0
    for j in range(len(values)):
        total += values[j][i]
    result.append([total, fruits[i]])
print result
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51345320)
 The more intuitive way would be to do a nested sum: 

  sum(sum(x) for x in Banking_Deposits.values())
  

 You can also use https://docs.python.org/3/library/functions.html#sum  start  parameter to join the lists first: 

  sum(sum(Banking_Deposits.values(), []))
  

 The default value for  start  is 0, which is why you get the error:  0 + [...]  does not compute. Not to mention that your original sum would yield a very long list instead of a number, since that's what you get from adding lists together. 

 A better way to chain the lists would be using https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable, which wouldn't allocate multiple lists as byproducts: 

  sum(chain.from_iterable(Banking_Deposits.values()))
  

 https://stackoverflow.com/a/51345317/2988730 suggests an equivalent and more intuitive method for flattening the values that I highly recommend. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41712474)
  sum(d.values(),[])  works but not performant because it applies  a = a + b  for each temp list. 

 Use  itertools.chain.from_iterable  instead: 

  import itertools
print(list(itertools.chain.from_iterable(d.values())))
  

  

  print(sorted(itertools.chain.from_iterable(d.values())))
  



