Query: Python logging typeerror
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19841563)
 Martijn's answer is correct, but if you prefer to use new style formatting with logging, it can be accomplished by subclassing Logger. 

  import logging

class LogRecord(logging.LogRecord):
    def getMessage(self):
        msg = self.msg
        if self.args:
            if isinstance(self.args, dict):
                msg = msg.format(**self.args)
            else:
                msg = msg.format(*self.args)
        return msg

class Logger(logging.Logger):
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None):
        rv = LogRecord(name, level, fn, lno, msg, args, exc_info, func)
        if extra is not None:
            for key in extra:
                rv.__dict__[key] = extra[key]
        return rv
  

 Then just set the logging class: 

  logging.setLoggerClass(Logger)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42823461)
 Try  logging.setLogRecordFactory  in Python 3.2+: 

  import collections
import logging


class _LogRecord(logging.LogRecord):

    def getMessage(self):
        msg = str(self.msg)
        if self.args:
            if isinstance(self.args, collections.Mapping):
                msg = msg.format(**self.args)
            else:
                msg = msg.format(*self.args)
        return msg


logging.setLogRecordFactory(_LogRecord)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11140398)
 You should add to your logging message a %s value, so it would be like this: 

  logger.debug('content of file not propper: %s', ie)
  

 I have used the logger in a different way also, just adding the message directly like this: 

  logger.debug('content of file not propper: %s' % ie)
  

 which seems to me a lot more straight foward.  

 About the pdb, it is a really nice way to debug your program, I recommend it 100% :) 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/12843568)
 You could do the formatting yourself: 

  logging.info('date={}'.format(date))
  

 As was pointed out by Martijn Pieters, this will always run the string formatting, while using the logging module would cause the formatting to only be performed if the message is actually logged.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18292518)
 http://docs.python.org/2/howto/logging.html#logging-advanced-tutorial an integer constant with value of 20 

 
   INFO  Confirmation that things are working as expected. 
 

 What you need is http://docs.python.org/2/library/logging.html#logging.info 

  logging.info("test")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18292514)
 You are trying to call  logging.INFO , which is an integer constant denoting one of the pre-defined logging levels: 

  >>> import logging
>>> logging.INFO
20
>>> type(logging.INFO)
<type 'int'>
  

 You probably wanted to use the http://docs.python.org/2/library/logging.html#logging.Logger.info (note, all  lowercase ) instead: 

 
   Logs a message with level  INFO  on this logger. The arguments are interpreted as for  debug() . 
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12843139)
 You cannot use new-style formatting when using the logging module; use  %s  instead of  {} . 

  logging.info('date=%s', date)
  

 The logging module uses the old-style  %  operator to format the log string. See the http://docs.python.org/library/logging.html#logging.Logger.debug for more detail. 

 If you really want to use  str.format()  string formatting, consider using custom objects that apply the formatting 'late', when actually converted to a string: 

  class BraceMessage(object):
    def __init__(self, fmt, *args, **kwargs):
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs

    def __str__(self):
        return self.fmt.format(*self.args, **self.kwargs)

__ = BraceMessage

logging.info(__('date={}', date))
  

 This is an approach the https://docs.python.org/3/howto/logging-cookbook.html#using-custom-message-objects, and it happens to work on Python 2 too. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12914199)
 Alternatively you can create a formatter of your own, but then you have to include it everywhere. 

  class DebugFormatter(logging.Formatter):
    def format(self, record):
        try:
            return super(DebugFormatter, self).format(record)
        except:
            print "Unable to format record"
            print "record.filename ", record.filename
            print "record.lineno ", record.lineno
            print "record.msg ", record.msg
            print "record.args: ",record.args
            raise


FORMAT = '%(levelname)s %(filename)s:%(lineno)d  %(message)s'
formatter = DebugFormatter(FORMAT)
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
handler.setFormatter(formatter)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38153450)
 You could either use 

  logging.debug('ATTEMPTS:%s', attempts)
  

  

  logging.debug('ATTEMPTS:{0}'.fmat(attempts))
  

 The first method passes two parameters into the logging.debug function which will automatically fmat the log. The second method passes in a single pre-fmatted string into the logging.debug function. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/20780813)
 The python logging functions support a built-in string replacement http://docs.python.org/2/library/logging.html#logging.debug. This logging supports both arg and kwarg replacement.  

  from sys     import stderr
from logging import getLogger, StreamHandler, Formatter, DEBUG

l  = getLogger()
sh = StreamHandler(stderr)
sh.setLevel(DEBUG)
f  = Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
sh.setFormatter(f)
l.addHandler(sh)
l.setLevel(DEBUG)

L0 = ['abc', 'def', 'ghi']
L1 = ['jkl', 'mno', 'pqr']

l.info('%(list_0)s - %(list_1)s', { 'list_0': L0, 'list_1' : L1 })
# identical to 
l.info('%s - %s', L0, L1)
# identical to 
l.info('%s - %s' % (L0, L1))
  



