Query: Python Regex Get String Between Two Substrings
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/48738098)
 You may use 

  import re
text = 'MIKE an entry for mike WILL and here is wills text DAVID and this belongs to david'
subs = ['MIKE','WILL','TOM','DAVID']
res = re.findall(r'({0})\s*(.(?=\s*(?:{0}|$))'.format("|".join(subs)), text)
print(res)
# => [('MIKE', 'an entry for mike'), ('WILL', 'and here is wills text'), ('DAVID', 'and this belongs to david')]
  

 See the https://ideone.com/T4JO2i. 

 The pattern that is built dynamically will look like https://regex101.com/r/0cNztQ/1 in this case. 

  Details  

 
  (MIKE|WILL|TOM|DAVID)  - Group 1 matching one of the alternatives substrings 
  \s*  - 0+ whitespaces 
  (.  - Group 2 capturing any 0+ chars other than line break chars (use  re.S  flag to match any chars), as few as possible, up to the first... 
  (?=\s*(?:MIKE|WILL|TOM|DAVID|$))  - 0+ whitespaces followed with one of the substrings or end of string ( $ ). These texts are not consumed, so, the regex engine still can get consequent matches. 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43983706)
 You can use this regex: 

  \b[FG]\d{2}(?:\s+[FG]\d{2})*\b
  

 Non-capturing group  (?:\s+[FG]\d{2})*  will find zero or more of the following space separated F/G substrings. 

  Code:  

  >>> my_string = "this data is F56 F23 and G87"
>>> re.findall(r'\b[FG]\d{2}(?:\s+[FG]\d{2})*\b', my_string)
['F56 F23', 'G87']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29703850)
 You want the string between the  (  and  , , you are catching everything between the parens: 

  match = re.findall("api\((.*?),", string)

print match 
["'randomkey123xyz987'"]
  

 Or match between the  '' : 

  match = re.findall("api\('(.*?)'", string)
print match 
['randomkey123xyz987']
  

 If that is how your strings actually look you can split: 

  string = "api('randomkey123xyz987', 'key', 'text')"

print(string.split(",",1)[0][4:])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28979405)
  gr-Y10 gr-eps i36">(.*?)<\\\\/td

                      ^^
  

 make your  *  non greedy by appending  ? .By making it non greedy it will stop at the first instance of  <\\\\/td  else it will capture upto last  <\\\\/td . 

 See demo. 

 https://regex101.com/r/iS6jF6/2#python 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22030658)
 You can do this with the re module: 

  import re
  

 Here's a possible search string: 

  my_txt = 'NfT foo NxS bar baz NPT'
  

 So we use the regular expression that first looks for an N, any character other than a P, and a character that is either an S or a T. 

  regex = 'N[^P][ST]'
  

 and using  re.findall : 

  found = re.findall(regex, my_txt)
  

 and found returns: 

  ['NfT', 'NxS']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29703912)
 If the string contains only one instance, use https://docs.python.org/2/library/re.html#re.search instead: 

  >>> import re
>>> s = "api('randomkey123xyz987', 'key', 'text')"
>>> match = re.search(r"api\('([^']*)'", s).group(1)
>>> print match
randomkey123xyz987
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18934921)
 Regex might be overkill here: 

  >>> word = 'tryt'
>>> text = 'trytryt'
>>> [i for i, _ in enumerate(text) if text.startswith(word, i)]
[0, 3]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28979546)
 Knowing the https://stackoverflow.com/questions/28978362/scraping-a-website-with-clickable-content-in-python and taking into account it is HTML, here is a solution involving an  HTML Parser , http://www.crummy.com/software/BeautifulSoup/bs4/doc/: 

  soup = BeautifulSoup(input_data)

for row in soup.select('div#tab-growth table tr'):
    for td in row.find_all('td', headers=re.compile(r'gr-eps')):
        print td.text
  

 Basically, for every row in the "growth" table, we are finding the cells with  gr-eps  in headers ("EPS %" part of the table).  

  60.00
—
—
—
—
42.22
3.13
—
—
—
-498.46
...
  

 https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags also. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26077700)
 In  python  

  >>> a='AGGGCUUAGCUGCUUGUGAGCA'
>>> b='UUCACAGUGGCUAAGUUCCGC'
>>> c='CUGAGGAGCAGGGCUUAGCUGCUUGUGAGCAGGGUCCACACCAAGUCGUGUUCACAGUGGCUAAGUUCCGCCCCCCAG'
>>> regex = a + '(.*?)' + b
>>> regex
'AGGGCUUAGCUGCUUGUGAGCA(.*?)UUCACAGUGGCUAAGUUCCGC'
>>> re.findall(regex,c)
['GGGUCCACACCAAGUCGUG']
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36766294)
 Another way of getting this using regex is: 

  import re
s = "Hello, stack exchange. Let's solve my query"
s1 = "solve"
s2 = "stack"
s3 = "Not present"
r1 = re.compile('|'.join([s1,s2,s3]))
r1.findall(s)
  

 this will return a list like this: 

  ['stack', 'solve']
  

 from the index of the list you can get which of the search string occured first. 



