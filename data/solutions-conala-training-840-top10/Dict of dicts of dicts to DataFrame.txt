Query: Dict of dicts of dicts to DataFrame
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15455455)
  df = pd.Panel.from_dict(d).to_frame()
  

 output: 

                     col1        col2
major minor                        
data1 row1         0.87        0.87
      row2      15352.3     15352.3
      row3            0           0
data2 row1   Title col1  Title col2
      row2   Title col1  Title col2
      row3   Title col1  Title col2
data3 row1      14.4878     24.4878
      row2      14.9561     24.9561
      row3      16.8293     26.8293
data4 row1   Title row1  Title row1
      row2   Title row2  Title row2
      row3   Title row3  Title row3
  

 If you don't want use Panel: 

  pd.concat(map(pd.DataFrame, d.itervalues()), keys=d.keys()).stack().unstack(0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38133498)
 This should work: 

  df.set_index('Initial')[['Age', 'Sex']].T.apply(tuple).to_dict()

{'A': (39, 'F'), 'C': (49, 'M'), 'M': (19, 'F')}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/51570818)
 The  pd.DataFrame  constructor accepts a list of dictionaries directly. This will be more efficient than appending repeatedly to an existing dataframe. Here's a demo: 

  d1 = {'name': 'Demetrius', 'number': '0001',
      'style': 'D', 'text': 'Demetrius an der...',
      'year': '1797'}

d2 = {'name': 'ABC', 'number': '0002',
      'style': 'E', 'text': 'Some text',
      'year': '1850'}

L = [d1, d2]

df = pd.DataFrame(L)

print(df)

        name number style                 text  year
0  Demetrius   0001     D  Demetrius an der...  1797
1        ABC   0002     E            Some text  1850
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43502623)
 use http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html with  records  

  df.reset_index().to_dict('records')

[{'A': 25.0, 'B': 58.0, 'C': 16.0},
 {'A': 25.0, 'B': 59.0, 'C': 135.0},
 {'A': 25.0, 'B': 60.0, 'C': 36.0}]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38498744)
 You can use  to_dict  method of pandas' DataFrame instance. For example: 

  import pandas as pd
df = pd.read_csv('file.csv', delimiter=r',\s+', index_col=0)
print(df.to_dict())
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47947042)
 Instead of a list a  dict  of  dict s 

  import pandas as pd
import numpy as np
list1 = ['obj1','obj2','obj3']
list2 = ['cat','dog','tree']
list3 = [7,8,9]
list4 = ['red','green','blue']
pd.DataFrame(np.array([list1, list2, list3, list4])).to_dict()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45193145)
 I think you can use  DataFrame  constructor with converting  data  column to  numpy array  by http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.values.html and then to  list : 

  #borrowing sample from DeepSpace's answer
df = pd.DataFrame({'data': [{'a': 1, 'b': 2}, {'a': 3, 'c': 4}]})
print (df)
               data
0  {'a': 1, 'b': 2}
1  {'a': 3, 'c': 4}

df1 = pd.DataFrame(df['data'].values.tolist(), index=df.index)
print (df1)
   a    b    c
0  1  2.0  NaN
1  3  NaN  4.0
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46408271)
  Option 1  
Use  pd.DataFrame.lookup    

  df.assign(VALUE=pd.DataFrame(mydict).lookup(df.DAY, df.YEAR))

  TYPE  YEAR  DAY  VALUE
0    a  2004   10   7.10
1    b  2005   12   9.19
2    c  2006  180  12.33
3    a  2007  127  33.11
4    b  2008  221  19.17
5    c  2008   17   5.13
  

 

  Option 2  
comprehension +  zip    

  df.assign(VALUE=[mydict[y][d] for y, d in zip(df.YEAR, df.DAY)])

  TYPE  YEAR  DAY  VALUE
0    a  2004   10   7.10
1    b  2005   12   9.19
2    c  2006  180  12.33
3    a  2007  127  33.11
4    b  2008  221  19.17
5    c  2008   17   5.13
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/47947026)
 Since you tag  pandas  , By using  to_dict  

  pd.DataFrame({'obj':list1,'type':list2,'num':list3,'color':list4}).to_dict('r')
Out[1204]: 
[{'color': 'red', 'num': 7, 'obj': 'obj1', 'type': 'cat'},
 {'color': 'green', 'num': 8, 'obj': 'obj2', 'type': 'dog'},
 {'color': 'blue', 'num': 9, 'obj': 'obj3', 'type': 'tree'}]
  



