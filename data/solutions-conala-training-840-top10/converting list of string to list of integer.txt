Query: converting list of string to list of integer
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10352796)
 this works: 

  nums = [int(x) for x in intstringlist]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50628662)
 You can convert to  int  within your list comprehension via  map : 

  testlist = [list(map(int, elements.split())) for elements in \
            mytesttring.strip().split('\n')]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10351840)
 One way is to use list comprehensions: 

  intlist = [int(x) for x in stringlist]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34405540)
 . Splitting a string and converting a string to an integer are very common tasks, and Python has built in tools to achieve them. 

  str.split  splits a string into a list by a given delimiter.
 int  can convert a string to an integer. You can use  map  to apply a function to all elements of a list. 

  >>> map(int, "123|456|890|60".split('|'))
[123, 456, 890, 60]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13905990)
 Use  list  on a number converted to string: 

  In [1]: [int(x) for x in list(str(123))]
Out[2]: [1, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13905946)
 Convert the integer to string first, and then use  map  to apply  int  on it: 

  >>> num = 132
>>> map(int, str(num))    #note, This will return a map object in python 3.
[1, 3, 2]
  

 or using a list comprehension: 

  >>> [int(x) for x in str(num)]
[1, 3, 2]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43575400)
 It can be done by converting every integer to string and joining the strings: 

  p = [''.join(map(str, sub_list)) for sub_list in p]  # ['1234', '2341']
  

 Ever every nested list, like  [1, 2, 3, 4] ,  map(str, [1, 2, 3, 4])  would create a list of strings. In this example:  ['1', '2', '3', '4'] . Using the https://docs.python.org/2/library/stdtypes.html#str.join function, the string-numbers are mapped into a single string,  '1234' . 

 Since this operation is performed for every sub-list, the result is a a list of the joined strings. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44105370)
 Say there is a list of strings named  list_of_strings  and output is list of integers named  list_of_int .  map  function is a builtin python function which can be used for this operation. 

  '''Python 2.7'''
list_of_strings = ['11','12','13']
list_of_int = map(int,list_of_strings)
print list_of_int 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54241553)
 A simple way is to flatten the list using a nested list comprehension, then convert each character in the string to integer. 

 Here's how you can modify your code: 

  mylist = [[], ['0000000'], ['2200220'], ['2222220'], ['2200220'], ['2000020'], []]
print([[int(z) for z in y] for x in mylist for y in x])
#[[0, 0, 0, 0, 0, 0, 0],
# [2, 2, 0, 0, 2, 2, 0],
# [2, 2, 2, 2, 2, 2, 0],
# [2, 2, 0, 0, 2, 2, 0],
# [2, 0, 0, 0, 0, 2, 0]]
  



