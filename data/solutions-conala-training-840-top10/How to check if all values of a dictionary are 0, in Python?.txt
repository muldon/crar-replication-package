Query: How to check if all values of a dictionary are 0, in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28433663)
 Your values is a list! 

  for item in d.values():
    if 'the' in item:
        print "value in dictionary"
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35254098)
 You may also do it the other way using any :  

  >>> any(x != 0 for x in somedict.values())
  

 If it returns True , then all the keys are not 0 , else all keys are 0  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35254031)
 use  all() : 

  all(value == 0 for value in your_dict.values())
  

  all  returns  True  if all elements of the given iterable are true. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28433617)
  d.values()  usually stores the values in list format. So you need to iterate through the list contents and check for the substring  the  is present or not. 

  >>> d = {'f':['the', 'foo']}
>>> for i in d.values():
        if 'the' in i:
            print("value in dictionary")
            break


value in dictionary
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29838863)
 Your "dictionaries" are actually lists. Thus, when you try to call  dict1.values() , you are calling  .values  on a list. Try calling  dict1[0].values()  instead: 

  >>> dict1 = [{'status':u'received'}]
>>> dict2 = [{'status': u'pending'}]
>>> 'received' in dict1[0].values()
True
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7960965)
 In your code,  d = {"a", "b", "c"} ,  d  is a set, not a dictionary. 

 Neither dictionary keys nor sets can contain duplicates. If you're looking for duplicate  values , check if the set of the values has the same size as the dictionary itself: 

  def has_duplicate_values(d):
    return len(set(d.values())) != len(d)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/5073655)
 You cannot have key* s * with the same value. This means that there is only one key in your dictionary, because every subsequent one will overwrite the previous. If you are concerned that all keys have the values which are one. Then you do something like this: 

  if set(your_dict.values()) == set([1]):
   pass
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46793107)
 Test with  any , since empty dicts are  falsy : 

  >>> collection_a = {}
>>> collection_b = {"test": {}}
>>> any(collection_a.values())
False
>>> any(collection_b.values())
False
  

 This assumes that the dictionary value is always a dictionary. 



