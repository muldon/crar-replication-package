Query: Get the number of all keys in a dictionary of dictionaries in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35428910)
 Here is the recursive function to find the nested dictionaries' total number of keys... 

  s=0
def recurse(v):
   if type(v)==type({}):
     for k in v.keys():
      global s
      s+=1
      recurse(v[k])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/35427962)
   

  n = sum([len(v)+1 for k, v in dict_test.items()])
  

 What you are doing is iterating over all keys k and values v. The values v are your subdictionaries. You get the length of those dictionaries and add one to include the key used to index the subdictionary. 

 Afterwards you sum over the list to get the complete number of keys. 

 EDIT: 

 To clarify, this snippet works only for dictionaries of dictionaries as asked. Not dictionaries of dictionaries of dictionaries... 
So do not use it for nested example :) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35428360)
 Using a generator function and the https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator syntax new in Python 3.x. This will work for an arbitrary nested dictionary 

  >>> from collections import Mapping
>>> def count_keys(mydict):
...     for key, value in mydict.items():
...         if isinstance(value, Mapping):
...             yield from count_keys(value)
...     yield len(mydict)
... 
>>> dict_test = {'key2': {'key_in3': 'value', 'key_in4': 'value'}, 'key1': {'key_in2': 'value', 'key_in1': 'value'}}
>>> sum(count_keys(dict_test))
6
  

 In Python 2.x you need a to do this: 

  >>> def count_keys(mydict):
...     for key, value in mydict.items():
...         if isinstance(value, Mapping):
...             for item in count_keys(value):
...                 yield 1
...         yield 1
... 
>>> sum(count_keys(dict_test))
6
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18836198)
 Is this what you need? 

  in_dicts = [{'a':10, 'b': 0, 'c': 2}, {'a':7, 'b': 4, 'c': 4}, {'a':4, 'b': 5, 'c': 3}]
out_dict = {}

for in_d in in_dicts:
  for k, v in in_d.iteritems():
    out_dict.setdefault(k, []).append(v)  
print out_dict
  

 {'a': [10, 7, 4], 'c': [2, 4, 3], 'b': [0, 4, 5]} 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/32719857)
 First get all keys and set up a new dictionary from your list of dictionaries: 

  d1 = {'a' : 2, 'b' : 1, 'c' : 1}
d2 = {'a' : 3, 'b' : 1.1, 'd' : 2}
mylist = [d1, d2]
sum_dict = dict.fromkeys(set().union(*mylist), 0)
  

 After that that is simple to just iterate over the list of dictionaries and the keys: 

  for d in mylist:
    for k in d.keys():
        sum_dict[k] += d[k]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53950646)
  first way    

 iteration on a dictionary gives u its keys, so a simple   

  >>> [key for key in dict]
  

 gives u a list of keys and you can get what you want with   

  >>> [key for dict in dict_list for key in dict]
  

  second way    

 use  .key()  (used in your code)
but there is no need to use  list()  (edit: for python 2) 
here's what it will look like:   

  >>> [dict.keys()[0] for dict in dict_list]
  

 in your code, dictionaries have only one key so these two has the same result. 
but  I prefer the first one  since it gives all keys of all the dictionaries 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11399459)
 The following example will extract the keys: 

  set_ = set()
for dict_ in dictionaries:
    set_.update(dict_.keys())
print set_
  



