Query: Delete an element from a dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5844685)
  d = {1: 2, '2': 3, 5: 7}
del d[5]
print 'd = ', d
  

 Result: d = {1: 2, '2': 3} 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/22564121)
 https://docs.python.org/library/stdtypes.html#dict.pop mutates the dictionary. 

   >>>lol = {"hello":"gdbye"}
 >>>lol.pop("hello")
    'gdbye'
 >>> lol
     {}
  

 . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11571416)
 To get those ones: 

  >>> {k: v for k, v in tupled_dict.iteritems() if 'a' in k}
{('a', 1): 1, ('a', 2): 0}
  

 Similarly, to delete the other ones: 

  >>> tupled_dict = {k: v for k, v in tupled_dict.iteritems() if 'a' not in k}
>>> tupled_dict
{('b', 1): 1, ('c', 4): 0}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54040211)
 Good old verbose  for  loop, then list comprehension: 

  tmp=[]
for dct in datalist:
  if not any(e[0] == dct["plate"] for e in tmp):
    tmp.append((dct["plate"], dct["confidence"]))


[ {"plate": plate, "confidence": confidence} for plate, confidence in tmp ]
#=> [{'plate': '01', 'confidence': '80'}, {'plate': '02', 'confidence': '91'}]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/54039444)
 If any element from the groups of duplicates is acceptable, you could do: 

  datalist = [
    {'plate': "01", 'confidence': "80"},
    {'plate': "01", 'confidence': "60"},
    {'plate': "02", 'confidence': "91"},
    {'plate': "02", 'confidence': "91"},
]

result = list({ d['plate'] : d for d in datalist }.values())
print(result)
  

  Output  

  [{'plate': '02', 'confidence': '91'}, {'plate': '01', 'confidence': '60'}]
  

 The idea is to create a dictionary where the keys are values of  plate  and the values are the dictionaries themselves. If you want to keep the first duplicate entries use https://docs.python.org/3/library/functions.html#reversed: 

  result = list({d['plate']: d for d in reversed(datalist)}.values())
  

  Output  

  [{'plate': '02', 'confidence': '91'}, {'plate': '01', 'confidence': '80'}]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11571479)
 This snippet will work even if 'a' isn't the first element in a key tuple: 

  from operator import methodcaller

contains_a = methodcaller('__contains__', 'a')
keys = filter(contains_a, tupled_dict)
new_dict = dict(zip(keys, map(tupled_dict.get, keys))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54039617)
 You can use one groupby: 

  list(map(lambda x: next(x[1]), groupby(sorted(datalist, key=lambda d: d['plate']), lambda d: d['plate'])))
  

 Results: 

  [{'plate': '01', 'confidence': '80'}, {'plate': '02', 'confidence': '91'}]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45526235)
 nice one-liner to check if the key is present, delete it, return the value, or default: 

  ret_val = ('key' in body and body.pop('key')) or 5
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11571390)
 I haven't tested it for performance, but I suggest you start by getting a baseline using a for loop, and then another with http://www.python.org/dev/peps/pep-0274/ . 

  >>> {k:v for k, v in tupled_dict.iteritems() if k[0] == 'a'}
{('a', 1): 1, ('a', 2): 0}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/54039620)
 you can also use pandas 

  import pandas as pd
df = pd.DataFrame(data = datalist)
df.drop_duplicates(subset = ['plate'],keep='first',inplace=True)
output = df.to_dict(orient='record')
  

 keep = 'first' or 'last' will help in which entry to keep in output 



