Query: get count of values associated with key in dict python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35269469)
 Another way is 

  len(filter(lambda x:x['success'], s))
  

 it can crash if you don't have 'success' in dict 

  len(filter(lambda x:x.get('success',False), s))
  

 may do the job 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21328699)
 If you want to make sure that, the  data  exists in  count_per_data  and the value of  count_per_data  exists in  score_per_count , you can use the list comprehension as a filter, like this 

  return geometric_mean([score_per_count[count_per_data[data]] for data in  combinations(blob) if data in count_per_data and count_per_data[data] in score_per_count])
  

 More readable version, 

  return geometric_mean([score_per_count[count_per_data[data]]
     for data in combinations(blob)
     if data in count_per_data and count_per_data[data] in score_per_count])
  

 But,  if you want to use default values  when key is not found in a dictionary, then you can use  dict.get . Quoting from http://docs.python.org/2/library/stdtypes.html#dict.get docs, 

  get(key[, default])
  

 
   Return the value for key if key is in the dictionary, else default. If
  default is not given, it defaults to None, so that this method never
  raises a KeyError. 
 

 You can use it, like this 

  count_per_data.get(data, 0)
  

 If  data  is not found in  count_per_data ,  0  will be used instead. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35269912)
 Here is how you do it elegantly: 

  args = [
    {'id': 19, 'success': True, 'title': u'apple'},
    {'id': 19, 'success': False, 'title': u'some other '},
    {'id': 19, 'success': False, 'title': u'dont know'}
]


count_success = lambda x: 1 if x['success'] else 0

success_list = map(count_success, args)

print(sum(success_list))  # Python 3
print sum(success_list)   # Python 2
  

  

  1
  

 This is as Pythonic as it gets. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46045046)
 
   For what purpose is this function useful? 
 

 One particular usage is counting with dictionary. Let's assume you want to count a number of occurrences of each element in a given list. The common way to do so is to make a dictionary where keys are elements and values are the number of occurrences. 

  fruits = ['apple', 'banana', 'peach', 'apple', 'pear']
d = {}
for fruit in fruits:
    if fruit not in d:
        d[fruit] = 0
    d[fruit] += 1
  

  .get() method you can make this code more compact and clear: 

  for fruit in fruits:
      d[fruit] = d.get(fruit, 0) + 1
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31904105)
 You just need to use your  vals  dict and keep keys from  aDict  with values that have a  count == 1  in vals then calling sorted to get a sorted output list: 

  def existsOnce3(aDict):  
    vals = {}
    # create dict to sum all value counts
    for i in aDict.values():
        vals.setdefault(i,0)
        vals[i] += 1   
    # use each v/val from aDict as the key to vals
    # keeping each k/key from aDict if the count is 1
    return sorted(k for k, v in aDict.items() if vals[v] == 1)
  

 Using a collections.Counter dict to do the counting just call Counter on your values then apply the same logic, just keep each k that has a v count == 1 from the Counter dict: 

  from collections import Counter
cn = Counter(aDict.values())
print(sorted(k for k,v in aDict.items() if cn[v] == 1))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26980900)
  total_val_count  is a Series. The index of the Series are values in  dataset[attr] , 
and the values in the Series are the number of times the associated value in  dataset[attr]  appears.  

 When you index a Series with  total_val_count[i] , Pandas looks for  i  in the index and returns the assocated value. In other words,  total_val_count[i]  is indexing by index value, not by ordinal.
Think of a Series as a mapping from the index to the values. When using plain indexing, e.g.  total_val_count[i] , it behaves more like a  dict  than a  list .  

 You are getting a KeyError because  0  is not a value in the index.
To index by ordinal, use  total_val_count.iloc[i] .  

 Having said that, using  for i in range(len(total_val_count.index))  -- or, what amounts to the same thing,  for i in range(len(total_val_count))  --  is not recommended.    

  for i in range(len(total_val_count)):
    print(total_val_count.iloc[i])
  

 you could use 

  for value in total_val_count.values:
    print(value)
  

 This is more readable, and allows you to access the desired value as a variable,  value , instead of the more cumbersome  total_val_count.iloc[i] . 

 Here is an example which shows how to iterate over the values, the keys, both the keys and values: 

  import pandas as pd

s = pd.Series([1, 2, 3, 2, 2])
total_val_count = s.value_counts()

print(total_val_count)
# 2    3
# 3    1
# 1    1
# dtype: int64

for value in total_val_count.values:
    print(value)
    # 3
    # 1
    # 1

for key in total_val_count.keys():
    print(key)
    # 2
    # 3
    # 1

for key, value in total_val_count.iteritems():
    print(key, value)
    # (2, 3)
    # (3, 1)
    # (1, 1)

for i in range(len(total_val_count)):
    print(total_val_count.iloc[i])
    # 3
    # 1
    # 1
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26872527)
 The clue is to work with the dict's items ( i.e.  key-value pair tuples). Then by using the second element of the item as the  max  key (as opposed to the  dict  key) you can easily extract the highest value and its associated key. 

   mydict = {'A':4,'B':10,'C':0,'D':87}
>>> max(mydict.items(), key=lambda k: k[1])
('D', 87)
>>> min(mydict.items(), key=lambda k: k[1])
('C', 0)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12915790)
 It seems to me that a better data structure would be: 

  {111:[('A', 4),('B',10)], 112:[('A': 3)]}
  

 Then you can print the dict easily: 

  for k,v in d.items():
   print "Type: {0}\t Text Count".format(k)
   for item in v:
       print "\t\t{0}  {1}".format(*v)
  

 To convert your dict to this form, I'd use a  defaultdict : 

  from collections import defaultdict
d = defaultdict(list)
for k,v in yourdict.items():
    new_key,value0 = (x.strip() for x in k.split(','))
    d[int(new_key)].append((value0,v))
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51656284)
 You can use  dict.setdefault  to initialize the two lists while you iterate over the dict items and appending values to the sub-lists. 

  o = {}
for (a, b), v in myDict.items():
    o.setdefault(a, [[], []])[0].append(b)
    o[a][1].append(v)
print(o)
  

 This outputs: 

  {'A': [['X'], [1.0]], 'B': [['Y', 'Z'], [0.4, 0.6]], 'C': [['X', 'Y', 'Z'], [0.1, 0.3, 0.6]]}
  



