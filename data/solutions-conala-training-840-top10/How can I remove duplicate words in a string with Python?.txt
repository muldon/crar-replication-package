Query: How can I remove duplicate words in a string with Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28607213)
 An alternative is to use regular expressions and match http://en.wikipedia.org/wiki/Whitespace_character#Unicode too. Here are some examples: 

  Remove ALL spaces in a string, even between words:  

  import re
sentence = re.sub(r"\s+", "", sentence, flags=re.UNICODE)
  

  Remove spaces in the BEGINNING of a string:  

  import re
sentence = re.sub(r"^\s+", "", sentence, flags=re.UNICODE)
  

  Remove spaces in the END of a string:  

  import re
sentence = re.sub(r"\s+$", "", sentence, flags=re.UNICODE)
  

  Remove spaces both in the BEGINNING and in the END of a string:  

  import re
sentence = re.sub("^\s+|\s+$", "", sentence, flags=re.UNICODE)
  

  Remove ONLY DUPLICATE spaces:       

  import re
sentence = " ".join(re.split("\s+", sentence, flags=re.UNICODE))
  

 (All examples work in both Python 2 and Python 3) 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7794619)
  string1 = "calvin klein design dress calvin klein"
words = string1.split()
print (" ".join(sorted(set(words), key=words.index)))
  

 This sorts the set of all the (unique) words in your string by the word's index in the original list of words. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7794386)
 In Python 2.7+, you could use http://docs.python.org/dev/library/collections.html#collections.OrderedDict for this: 

  from collections import OrderedDict
s = "calvin klein design dress calvin klein"
print ' '.join(OrderedDict((w,w) for w in s.split()).keys())
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7794230)
 You can use a set to keep track of already processed words. 

  words = set()
result = ''
for word in string1.split():
    if word not in words:
        result = result + word + ' '
        words.add(word)
print result
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43970341)
 This snippet adds words, and removes duplicated letters before inserting them 

  words = []
length = 5
file = open('dictionary.txt')
for word in file:
    clean_word = word.strip('\n')
    if len(clean_word) == length + 1:
        words.append(''.join(set(clean_word))
  

 We convert the string to a set, which removed duplicates, and then we join the set to a string again: 

  >>> word = "helloool"
>>> set(word)
set(['h', 'e', 'l', 'o'])
>>> ''.join(set(word))
'helo'
  

 I am not 100% sure how you want to remove duplicates like this, so I've assumed no letter can be more than once in the word (as your question specifies "duplicate letter" and not "double letter"). 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5388763)
 You need to doubly escape the back-reference: 

  re.sub('(.+) \(\\1\)', '\\1', 'the (the)')
--> the
  

 Or use the http://docs.python.org/release/2.5.2/ref/strings.html: 

 
   When an "r" or "R" prefix is present, a character following a backslash is included in the string without change, and all backslashes are left in the string. 
 

  re.sub(r'(.+) \(\1\)', r'\1', 'the (the)')
--> the
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/27043874)
  def remove_letters(str1,str2):
    s = set(str1)
    return "".join([char for char in str2 if char not in s])
  

  

  def remove_letters(str1, str2):
    res = ""  
    s = set(str1)
    for char in str2:
        if char not in s: 
            res += char
    return res
  

 Both the loop and the list comprehension have the same logic, we keep the chars in str2 that don't appear in str1. 

 Using your own code, you need to iterate over str2 and remove any char from str2_list that  is in str1 then use join on the list to get a string: 

  def remove_letters(str1,str2):
    str2_list = list(str2)
    for char in str2:
        if char in str1:
             str2_list.remove(char)
    return "".join(str2_list)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27043872)
 You can use https://docs.python.org/3/library/stdtypes.html#str.translate and https://docs.python.org/3/library/stdtypes.html#str.maketrans for this: 

  >>> def remove_letters(str1,str2):
...     return str2.translate(str.maketrans('', '', str1))
...
>>> remove_letters('abc', 'aaabbbccc')
''
>>> remove_letters('abc', 'aaaxbbbycccz')
'xyz'
>>>
  

 If you test this solution with https://docs.python.org/3/library/timeit.html#timeit.timeit, you will see it is quite efficient: 

  >>> from timeit import timeit
>>>
>>> def remove_letters(str1,str2):
...     s = set(str1)
...     return "".join([char for char in str2 if char not in s])
...
>>> timeit("remove_letters('abc', 'aaaxbbbycccz')", "from __main__ import remove_letters")
6.056879016746539
>>>
>>> def remove_letters(str1,str2):
...     return str2.translate(str.maketrans('', '', str1))
...
>>> timeit("remove_letters('abc', 'aaaxbbbycccz')", "from __main__ import remove_letters")
5.283739134443065
>>>
  



