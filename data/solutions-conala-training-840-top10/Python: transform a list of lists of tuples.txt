Query: Python: transform a list of lists of tuples
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/24591174)
  Python 2:  

  Python 2.7.6 (default, Apr  9 2014, 11:48:52) 
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.38)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> di={'word1':22, 'word2':45, 'word3':66}
>>> zip(*sorted(di.items(), key=itemgetter(1), reverse=True))
[('word3', 'word2', 'word1'), (66, 45, 22)]
>>> k,v=zip(*sorted(di.items(), key=itemgetter(1), reverse=True))
>>> k
('word3', 'word2', 'word1')
>>> v
(66, 45, 22)
  

  Python 3:  

  Python 3.4.1 (default, May 19 2014, 13:10:29) 
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> di={'word1':22, 'word2':45, 'word3':66}
>>> k,v=zip(*sorted(di.items(), key=itemgetter(1), reverse=True))
>>> k
('word3', 'word2', 'word1')
>>> v
(66, 45, 22)
  

   It is exactly the same for both Python 2 and Python 3   

 If you want lists vs tuples (both Python 3 and Python 2): 

  >>> k,v=map(list, zip(*sorted(di.items(), key=itemgetter(1), reverse=True)))
>>> k
['word3', 'word2', 'word1']
>>> v
[66, 45, 22]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10633553)
 In case of arbitrary nested lists(just in case): 

  def flatten(lst):
    result = []
    for element in lst: 
        if hasattr(element, '__iter__'):
            result.extend(flatten(element))
        else:
            result.append(element)
    return result

>>> flatten(output)
[12.2817, 12.2817, 0, 0, 8.52, 8.52]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10634605)
 use  itertools  chain: 

  >>> import itertools
>>> list(itertools.chain.from_iterable([(12.2817, 12.2817), (0, 0), (8.52, 8.52)]))
[12.2817, 12.2817, 0, 0, 8.52, 8.52]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/37759160)
  zip  the dictionary items in the lists. Transform the dictionaries into a list of key-value  tuples , merge the lists using  + , then transform the merged list back into a dictionary: 

  [dict(i.items()+j.items()+k.items()) for i, j, k in zip(list1, list2, list3)]
  

 In python 3.x, you will need to call  list  on the  dict_items : 

  [dict(list(i.items())+list(j.items())+list(k.items())) for i,j,k in zip(list1, list2, list3)]
  

  

  [{'answer': 'SysteminfoScreen',
  'question': 'Fan offline information can be found on what Screen under General Menu? ',
  'correct_answer': 'SysteminfoScreen'},
 {'answer': 'qkview',
  'question': 'What is the tool for F5 BIGIP to get packet traces. ',
  'correct_answer': 'TCP Dump'},
 {'answer': 'Offline',
  'question': 'On a HTTP Health Monitor configuration. If Receive string and Disabling string matched and Reverse is enabled. What would be the status of pool members?',
  'correct_answer': 'Disabled'}]
  

 Dictionary items are not ordered, so each dictionary may not go in Question-Answer-CorrectAnswer order. Order may be different. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10634517)
 Or you can flatten the list like this: 

  reduce(lambda x,y:x+y, map(list, output))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39842756)
 You can also use  numpy.subtract  

 It has the advantage over the difference operator,  - , that you do not have to transform the  sequences  (list or tuples) into a  numpy arrays  â€” you save the two commands: 

  array1 = np.array([1.1, 2.2, 3.3])
array2 = np.array([1, 2, 3])
  

  Example:  (Python 3.5) 

  import numpy as np
result = np.subtract([1.1, 2.2, 3.3], [1, 2, 3])
print ('the difference =', result)
  

 which gives you 

  the difference = [ 0.1  0.2  0.3]
  

 Remember, however, that if you try to subtract sequences (lists or tuples) with the  -  operator you will get an error. In this case, you need the above commands to transform the sequences in  numpy arrays  

  Wrong Code:  

  print([1.1, 2.2, 3.3] - [1, 2, 3])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/54788453)
 Can transform them both to dicts: 

  tf = [(('0', 'CD'), 0.0036429872495446266), (('09:00', 'CD'), 0.0018214936247723133)]

tf_dict = dict(tf)
print(tf_dict) 
>> {('0', 'CD'): 0.0036429872495446266, ('09:00', 'CD'): 0.0018214936247723133}

idf = [(('0', 'CD'), 2.4385423487861106), (('09:00', 'CD'), 2.739572344450092)]
idf_dict = dict(idf)


# now you have same keys in both dicts
res = {k: v*idf_dict[v] for k,v in tf_dict.items()}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6952779)
 Why use a tuple ? they are made so you cannot add new values after you define it you can only "summon" a new one .
And if you already have a tuple you can transform your tuple in to a list to for the exchange period . 

  d = {'a':'val1' , 'b': 'val2'}
tuple1 = ( 1 , 2 , 3 )
list1 = list(tuple1).append(d)
  

 this way you can use the list if you ever want to add something new to it and summon some other tuple.
and if you really want it to be a tuple back use the tuple function .  

  tuple2 = tuple(list1)
  

 Any way i hope you got the point of lists and tuples . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20578893)
 What you're looking to do is to create  equivalence classes  of the values.  

 Normally, this is easy: just reverse the dict into a multidict (a dict whose values are sets or lists of 0 or more actual values), and then each set or list of values is an equivalent class: 

  original_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 2}

from collections import defaultdict
reverse_multidict = defaultdict(list)
for key, value in original_dict.items():
    reverse_multidict[value].append(key)

matchList = list(reverse_multidict.values()) # leave out the list() in 2.x
  

 However, in your case, the values are  dict s, which means they can't be used as keys in a  dict . 

 The simplest way around that is to transform each  dict  into something that's immutable and hashable, like a tuple of key-value tuples: 

  for key, value in original_dict.items():
    reverse_multidict[tuple(value.items())].append(key)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/20355299)
 Firstly, your values are tuples, not lists. The difference is subtle, but the relevant part is that tuples are not mutable 

 So, let's first transform what you have to a list-valued dictionary, and then solve your problem 

  >>> dict1 = {'a':(1, 4, 7), 'b':(2, 5, 8), 'c':(3, 6, 9)}
>>> dict1 = {k:list(v) for k,v in dict1.items()}
>>> dict1
{'b': [2, 5, 8], 'c': [3, 6, 9], 'a': [1, 4, 7]}
>>> answer = {k:list(itertools.chain.from_iterable(zip(v,v))) for k,v in dict1.items()}
>>> answer
{'b': [2, 2, 5, 5, 8, 8], 'c': [3, 3, 6, 6, 9, 9], 'a': [1, 1, 4, 4, 7, 7]}
  



