Query: Pythonic way to get the largest item in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1874232)
 Use the http://docs.python.org/library/functions.html#max function or do it FP style: 

  reduce(lambda max, c: max if c <= max else c, [1, 6, 9, 2, 4, 0, 8, 1, 3])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1874225)
 You could use the  max  function. 

 
   Help on built-in function max in module __builtin__: 
  
   max(...) 
  
   max(iterable[, key=func]) -> value 
  
   max(a, b, c, ...[, key=func]) -> value 
  
   With a single iterable argument, return its largest item.
    With two or more arguments, return the largest argument. 
 

  max_item = max(a_list, key=operator.itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/48255910)
 https://docs.python.org/3/library/heapq.html says, 

 
   Our pop method returns the smallest item, not the largest (called a
  “min heap” in textbooks; a “max heap” is more common in texts because
  of its suitability for in-place sorting). 
 

 So you cannot get a max heap directly. However, one way to get it indirectly is to push the  negative  of the item on the heap, then take the negative again just after you pop the item. So instead of  heappush(h, (200, 1))  you execute  heappush(h, (-200, -1)) . And to pop and print the max item, execute 

  negmaxitem = heappop(h)
maxitem = (-negmaxitem[0], -negmaxitem[1])
print(maxitem)
  

 There are other ways to get the same effect, depending on what exactly you are storing in the heap. 

 Note that trying  h[-1]  in a min-heap does not work to find the max item--the heap definition does not guarantee the max item will end up at the end of the list.  nlargest  should work but has time complexity of  O(log(n))  to just examine the largest item in a min-heap, which defeats the purpose of the heap. My way has time complexity  O(1)  in the negative-heap to examine the largest item. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1218943)
 You can use a Heap data structure. A heap will not necessarily be ordered, but it is a fairly fast way to keep semi-ordered data, and it has the benefit of the smallest item always being the first element in the heap. 

 A heap has two basic operations that will help you: Add and Replace. 

 Basically what you do is add items to it until you get to a 100 items (your top N number per your question). Then after that, you replace the first item with every new item, as long as the new item is bigger than the first item. 

 Whenever you replace the first item with something bigger, the internal code in the heap will adjust the heap contents so that if the new item is not the smallest, it will bubble up into the heap, and the smallest item will "bubble down" to the first element, ready to be replaced along the way. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20164055)
 The key can also be a lambda, for example: 

  people = [("Tom", 33), ("Dick", 55), ("Harry", 44)]
oldest = max(people, key=lambda p: p[1])
  

 For some reason, using a lambda makes it feel more like "my code" is doing the work, compared with  itemgetter . I think this feels particularly nice when you have a collection of objects: 

  class Person(object):
    def __init__(self, name, age):
        self.name = name
        self.age = age

people = [Person("Tom", 33), Person("Dick", 55), Person("Harry", 44)]
oldest = max(people, key=lambda p: p.age)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49962684)
 If you are looking for a one-liner, the following should work: 

  return sorted(((item, a.count(item)) for item in set(a)), key=lambda k: k[1], reverse=True)[n-1][0]  

 While the above uses more Python language features, I actually prefer the readability of your original code.  

 As a side note, in your original code, you should  return key  because you currently are trying to print a function that doesn't return a value. 

 If you care about ties, as @sberry mentioned, you can do: 

 Get smallest value when count is the same: 

  return sorted(((item, a.count(item)) for item in set(a)), 
    key=lambda k: (k[1], k[0]), reverse=True)[n-1][0]
  

 Get largest value when count is the same: 

  return sorted(((item, a.count(item)) for item in set(a)), 
    key=lambda k: (k[1], -k[0]), reverse=True)[n-1][0]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/2946904)
 The http://docs.python.org/library/heapq.html module provides a http://docs.python.org/library/heapq.html#heapq.nlargest function that efficiently finds the n largest elements of a list: 

  >>> from heapq import nlargest
>>> items = [100, 300, 200, 400]
>>> indexes = [0, 1, 2, 3]
>>> nlargest(2, indexes, key=lambda i: items[i])
[3, 1]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/42202980)
 You can use the built-in  sorted  to sort a list.  sorted  accepts a  reverse  parameter (a boolean) so you can sort the list descending. 

 You can even pass a string to  sorted  and it will sort the individual characters into a list. 

 To get the third, or second, or nth biggest item in the list, just sort the list in descending order then call that item, e.g.  obj[0]  for the largest item,  obj[1]  for the second-largest, etc. 

  

  """ Returns nth largest object from string or list """
def nth_largest(obj, n=1):
    obj = sorted(obj, reverse=True)
    return obj[n-1]

>>> nth_largest('abxztu', 3)
'u'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5227377)
 The dictionary "a" is an iterable structure in python. When you loop through with  for x in a , you are looping over the keys in the dictionary. 

 In the second line, the max function takes two arguments: An iterable object (a), and an optional "key" function. The Key function is going to be used to evaluate the value of the items in a--the largest of which will be returned. 

 Examples: 

  >>> a = dict(((1,3),(0,-1),(3,21)))
>>> for x in a:
...     print x #output the value of each item in our iteration
... 
0
1
3
  

 Note here that only the "keys" are output. When we pass each of these keys to "get"... 

  >>> a.get(0)
-1
>>> a.get(1)
3
>>> a.get(3)
21
  

 We get the value for each key. Now see how max works. 

  >>> b=[2, 3, 5, 6, 4]
>>> max(b)
6
>>> def inverse(x):
...     return 1.0 / x
... 
>>> max(b, key=inverse)
2
  

 As you can see, max (by default) will just find the largest number in our iterable list. If we define the "inverse" function, it will return the largest item in b for which  inverse(item)  is the largest. 

 Combine these two items and we see that  max(a, key=a.get)  is going to return the  item  in  a  for which the value of  a.get(item)  is largest. i.e. the key corresponding to the largest value. 



