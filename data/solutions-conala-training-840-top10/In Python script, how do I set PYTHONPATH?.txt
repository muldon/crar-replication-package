Query: In Python script, how do I set PYTHONPATH?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3108309)
 PYTHONPATH ends up in http://docs.python.org/library/sys.html#sys.path, which you can modify at runtime. 

  import sys
sys.path += ["whatever"]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/843701)
 Try specifying the full path to the Python interpreter in the command line, something like: 

  /foo/bar/python2.6 script.py
/baz/python objcscript.py
  

 You can also add a shebang to the beginning of your script (first line): 

  #! /foo/bar/python2.6 script.py
  

 If you have the environment variable  PYTHONPATH  set, you might have to unset it or change it. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39682723)
 Append your paths so there is only one PYTHONPATH.   

  PYTHONPATH="/Applications/python/common:/Applications/sitecustomize:$PYTHONPATH"
export PYTHONPATH
  

 Then  source ~/.bash_profile  

 OR import them into your Python script (this would only work for the script added to): 

  import sys
sys.path.append("/Applications/python/common")
sys.path.append("/Applications/sitecustomize")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/3108307)
 You can get and set environment variables via  os.environ : 

  import os
user_home = os.environ["HOME"]

os.environ["PYTHONPATH"] = "..."
  

 But since your interpreter is already running, this will have no effect.  

  import sys
sys.path.append("...")
  

 which is the array that your  PYTHONPATH  will be transformed into on interpreter startup. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15317038)
 Setting PYTHONPATH 

 By the output of the  export  comm you tried, it looks like the shell you are using is not bash. https://stackoverflow.com/questions/1281546/what-shell-am-i-in covers some ways on how to find out which shell you are on. After finding out your shell, you can find out how to set environment variables (PYTHONPATH) in that shell. 

 You might also try these to set the PYTHONPATH for the duration of running your script (the last one should work on (T)CSH): 

  PYTHONPATH=your_directory python script_name
  

  

  env PYTHONPATH=your_directory python script_name
  

 Testing that the PYTHONPATH you set works 

 To see that PYTHONPATH really gets set  works within Python, instead of running the script like above with  python script_name , use  python -c 'import os; print os.getenv("PYTHONPATH")' . It should display the PYTHONPATH you just set. 

 Likewise, printing  sys.path  in Python interpreter should output the path in PYTHONPATH as one of the entries. 

 If PYTHONPATH is set correctly 

 If you successfully set your PYTHONPATH  the problem persists, try running the Python interpreter from the path you have  gdata  in. 

  cd path_which_has_subdirectory_gdata
python
  

 In Python interpreter, try importing the gdata module: 

  import gdata
  

 If that works, try also importing the module that causes the  ImportError : 

  import gdata.spreadsheet.service
  

 If these imports work from Python interpreter, there's probably something wrong with your [script1]. If not, try to confirm that gdata module really is where you think it is; the correct directory for the module should contain a file named  __init__.py   PYTHONPATH should be set to point to the directory  above  the module in hierarchy. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/3108301)
 You don't set  PYTHONPATH , you add entries to http://docs.python.org/library/sys.html. It's a list of directories that should be searched for Python packages, so you can just append your directories to that list. 

  sys.path.append('/path/to/whatever')
  

 In fact,  sys.path  is initialized by splitting the value of  PYTHONPATH  on the path separator character ( :  on Linux-like systems,  ;  on Windows). 

 You can also add directories using http://docs.python.org/library/site.html, and that method will also take into account  .pth  files existing within the directories you pass. (That would not be the case with directories you specify in  PYTHONPATH .) 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22946156)
 Instead of setting PYTHONPATH in  os.environ , you need to to  modify  sys.path  , like: 

  import sys
sys.path.append(pythonpath)
  

 And then go on with your  import s. 

 The reason setting PYTHONPATH in  os.environ  does not work is that  sys.path  is what the interpreter refers to at the point of executing an  import  directive. 

 If you set a PYTHONPATH environment variable and then start the interpreter, it would see it, add it to  sys.path , and carry on. 

 If you start the interpreter with no PYTHONPATH env-var set,  sys.path  would not be updated at startup, and the new value in  os.environ['PYTHONPATH'] , which is set after the interpreter-startup, will be left unused. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2901431)
 You use  SET  on Windows: 

  SET PYTHONPATH=.
python scripts/doit.py
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11744336)
 In python there is no difference between modules and scripts; You can execute both scripts and modules.  The file must be on the pythonpath AFAIK because python must be able to find the file in question.  If python is executed from a directory, then the directory is automatically added to the pythonpath. 

 Refer to https://stackoverflow.com/questions/1186789/what-is-the-best-way-to-call-a-python-script-from-another-python-script for more information about modules vs scripts 

 There is also a builtin function execfile(filename) that will do what you want 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/18862374)
 Updating  sys.path.append()  will change the paths that the current script searches for modules/packages. Updating  os.environ[]  will only affect subprocesses, if you pass them the environment.
These only affect the directories that are searched for modules/packages, as  /usr/bin/python  is usually the python executable neither would have any effect. 

 If you are trying to specify a version of python to use to execute the script then use a shebang at the top of the script: 

  #!/usr/bin/python
  

 Make sure the script is set executable  chmod +x script  and then execute it directly via cron. 



