Query: in Python, how to convert list of float numbers to string with certain format?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/16127903)
 Assuming you have some list-of-lists or list-of-tuples: 

  lst = [ [ 1,2,3 ], [ 1e6, 2e6, 3e6], [1e-6, 2e-6, 3e-6] ]
  

 You can create a parallel list-of-lists using list comprehension: 

  str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]
  

 Or a list-of-tuples: 

  str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]
  

 Then, if you'd like to display this set of numbers: 

  str_display = '\n'.join(' '.join(lst) for lst in strlist)
print str_display
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16127890)
 One way: 

  a = [ (2.3, 2.3123), (231.21, 332.12) ]
p = list()
for b in a:
    k = list()
    for c in b:
        k.append("{0:.2f}".format(c))
    p.append(tuple(k))
print p     
  

 remove inner loop: 

  p = list()
for b in a:
    p.append(tuple("{0:.2f}".format(c) for c in b))
  

 remove outer loop also: 

  p = [ tuple("{0:.2f}".format(c) for c in b) for b in a ]
  

 to print  p : 

  "\n".join([ "\t".join(b) for b in p ])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/16127911)
 Using numpy you could do it this way: 

<pre class="lang-py prettyprint-override"> >>> a=[[11.2345, 2.0, 3.0], [4.0, 5.0, 61234123412341234]]
>>> numpy.char.mod('%14.8E', a)

array([['1.12345000E+01', '2.00000000E+00', '3.00000000E+00'],
      ['4.00000000E+00', '5.00000000E+00', '6.12341234E+16']],
      dtype='|S14')
  

 The datatype in the numpy array of strings is given as S14 which http://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html is a string (S) of 14 byte length.  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43353715)
 You probably want to format the strings using  .format . 

  >>> '{:0.4f}'.format(1.36)
'1.3600'
>>> '{:0.4f}'.format(1.96256684)
'1.9626'
  

 The full code could look something like: 

  ' '.join('{} {:0.4f}'.format(*t) for t in l)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/45422902)
 You can try this way: 

  my_list = ['2-7', '10-22', '22-50', '50-70', '2-7', '10-22', '22-50', '50-70', '2-7', '10-22', '22-50', '50-70']

list_2 = []

for val in my_list:
  x , y = map(float, val.split('-'))
  list_2.append([x, y])

print(list_2)
  

 Output: 

  [[2.0, 7.0], [10.0, 22.0], [22.0, 50.0], [50.0, 70.0], [2.0, 7.0], [10.0, 22.0], [22.0, 50.0], [50.0, 70.0], [2.0, 7.0], [10.0, 22.0], [22.0, 50.0], [50.0, 70.0]]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44767189)
 Try   ['{:.0e}'.format(float(x)) for x in A]  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45422621)
 Try the split function and map function    

  list_2 = []
for item in my_list:
    list_2.append(list(map(float,item.split('-'))))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4644000)
 If you want the result as the nearest binary floating point number use  float : 

  result = [float(x.strip(' "')) for x in A1]
  

 If you want the result stored exactly use http://docs.python.org/library/decimal.html instead of  float : 

  from decimal import Decimal
result = [Decimal(x.strip(' "')) for x in A1]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43083535)
 The comments state the objective is to  print to 2 decimal places .  

 There's a simple answer for Python 3: 

  >>> num=3.65
>>> "The number is {:.2f}".format(num)
'The number is 3.65'
  

 or equivalently with f-strings (Python 3.6+): 

  >>> num = 3.65
>>> f"The number is {num:.2f}"
'The number is 3.65'
  

 As always, the float value is an approximation: 

  >>> "{}".format(f)
'3.65'
>>> "{:.10f}".format(f)
'3.6500000000'
>>> "{:.20f}".format(f)
'3.64999999999999991118'
  

 I think most use cases will want to work with floats and then only  print  to a specific precision. 

 Those that want the  numbers themselves  to be stored to exactly 2 decimal digits of precision, I suggest use the https://docs.python.org/3/library/decimal.html type. https://docs.python.org/3/tutorial/floatingpoint.html for those that are interested. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45422929)
  my_list = ['2-7', '10-22', '22-50', '50-70', 
           '2-7', '10-22', '22-50', '50-70', 
           '2-7', '10-22', '22-50', '50-70']

list_2 = []
for item in my_list:
    first, second = item.split('-')
    list_2.append([float(first), float(second)])
  

 Every item in your original list  my_list  is by the  split()  method divided into two parts and assigned to the variables  first  and  second , respectively. 

 As they are still  strings , in the last command I used the  float()  function to convert them to numbers. 



