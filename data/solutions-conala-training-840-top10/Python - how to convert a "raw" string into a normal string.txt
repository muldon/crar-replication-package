Query: Python - how to convert a "raw" string into a normal string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/24242787)
 This would work for Python 3: 

  b'\\x89\\n'.decode('unicode_escape')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/24242596)
 Python 2 byte strings can be decoded with the  'string_escape'  codec: 

  raw_string.decode('string_escape')
  

  

  >>> '\\x89\\n'.decode('string_escape')
'\x89\n'
  

 For  unicode  literals, use  'unicode_escape' . In Python 3, where strings are unicode strings by default, only byte strings have a  .decode()  method: 

  raw_byte_string.decode('unicode_escape')
  

 If your input string is  already  a unicode string, use  codecs.decode()  to convert: 

  import codecs

codecs.decode(raw_unicode_string, 'unicode_escape')
  

  

  >>> b'\\x89\\n'.decode('unicode_escape')
'\x89\n'
>>> import codecs
>>> codecs.decode('\\x89\\n', 'unicode_escape')
'\x89\n'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27603180)
 You might want to use raw string: 

  value = r'\x55'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8445492)
 Is this what you're searching f? 

  hex_string = '0A'
'{0:b}'.fmat(int(hex_string, 16))
# returns '1010'
  

  

  ''.join('{0:04b}'.fmat(int(c, 16)) f c in hex_string)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/29219959)
 An easy way to do what you're trying to do... convert your string to a hex decimal then use the built in bin function to convert it to binary. 

  dec_string = int(your_string, 16) #cast as int

bin_string = bin(dec_string) #convert to binary
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54577676)
 This error occurs because you are using a normal string as a path
Just put r before your normal string it converts normal string to raw string: 

  import numpy as np
import cv2

cap = cv2.VideoCapture(r"C:\Users\gokul\PycharmProjects\GpuTry\sample.mp4")
while(True):
    ret, frame = cap.read()
    print(frame)
  

 The above code worked perfect. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41218131)
 Here is an example code 

  import unicodedata    
raw_text = u"here $%6757 dfgdfg"
convert_text = unicodedata.normalize('NFKD', raw_text).encode('ascii','ignore')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/743410)
 I need to convert it back to string with the binascii module, like: 

  >>> btxt = binascii.a2b_base64(page.rawByte)
  

 then btxt can be treated as a normal string. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/29389852)
 There is nothing to convert - the  r  prefix is only significant in source code notation, not for program logic. 

 As a rule, if you use a single backslash in a normal string, it will automatically be converted to a double backslash if it doesn't start a valid escape sequence: 

  >>> "\n \("
'\n \\('
  

 Since it may be difficult to remember all the valid/invalid escape sequences, raw string notation was introduced. But there is no way and no need to convert a string after it has been defined. 

 In your case, the correct approach would be to use 

  str_var = ur"some text with escapes e.g. \( \' \)"
  

 which happens to result in the same string here, but is more explicit. 



