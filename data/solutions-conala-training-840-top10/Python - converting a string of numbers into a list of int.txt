Query: Python - converting a string of numbers into a list of int
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19334405)
 You can also use list comprehension on splitted string 

  [ int(x) for x in example_string.split(',') ]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/34581171)
 Use  str.split()  to split your string at spaces, then apply  int  to every element: 

  s = '2 -5 7 8 10 -205'
nums = [int(num) for num in s.split()]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/19334399)
 Split on commas, then map to integers: 

  map(int, example_string.split(','))
  

 Or use a list comprehension: 

  [int(s) for s in example_string.split(',')]
  

 The latter works better on Python 3 if you want a list result. 

 This works because  int()  tolerates whitespace: 

  >>> example_string = '0, 0, 0, 11, 0, 0, 0, 0, 0, 19, 0, 9, 0, 0, 0, 0, 0, 0, 11'
>>> map(int, example_string.split(','))  # Python 2, in Python 3 returns iterator object
[0, 0, 0, 11, 0, 0, 0, 0, 0, 19, 0, 9, 0, 0, 0, 0, 0, 0, 11]
>>> [int(s) for s in example_string.split(',')]
[0, 0, 0, 11, 0, 0, 0, 0, 0, 19, 0, 9, 0, 0, 0, 0, 0, 0, 11]
  

 Splitting on  just  a comma also is more tolerant of variable input; it doesn't matter if 0, 1 or 10 spaces are used between values. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34581312)
 Built-in method would do the job as well: 

  >>> s = '2 -5 7 8 10 -205'
>>> map(int, s.split())
[2, -5, 7, 8, 10, -205]
  

 If Python 3+: 

  >>> s = '2 -5 7 8 10 -205'
>>> list(map(int, s.split()))
[2, -5, 7, 8, 10, -205]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34581178)
 If your string looks like this: 

  s = '2 -5 7 8 10 -205'
  

 You can create a list of ints by using a list comprehension. First you will split the string on whitespace, and parse each entry individually: 

  >>> [int(x) for x in s.split(' ')]
[2, -5, 7, 8, 10, -205] ## list of ints
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30333586)
 You need to  decode  the bytes to text: 

  line = line.decode('ascii')
  

  Then  split the line and convert to integers: 

  list.append([int(n) for n in line.split(',')])
  

  int()  can handle extra whitespace, so stripping isn't really needed. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34581184)
 You could do this with a list comprehension: 

  data = ('2 -5 7 8 10 -205')
l = [int(i) for i in data.split()]
print(l)
[2, -5, 7, 8, 10, -205]
  

 Or alternatively you could use the  map  function: 

  list(map(int, data.split()))
[2, -5, 7, 8, 10, -205]
  

  Benchmarking : 

  In [725]: %timeit list(map(int, data.split()))
100000 loops, best of 3: 2.1 µs per loop

In [726]: %timeit [int(i) for i in data.split()]
100000 loops, best of 3: 2.54 µs per loop
  

 So with map it works faster 

  Note :  list  is added to map because I'm using python 3.x. If you're using python 2.x you don't need that. 



