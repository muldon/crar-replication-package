Query: how to get the last part of a string before a certain character?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2406041)
 Normally http://docs.python.org/library/os.path.html#os.path.dirname is used for this. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45919495)
 You can use  -1  to always get the  last  part rather than the  second  part. 

  df['c'] = df['b'].apply(lambda x: x.split("'")[-1])

print(df)

#    a        b      c
# 0  1     ciao   ciao
# 1  2    hotel  hotel
# 2  3  l'hotel  hotel 
  

 However, keep in mind that this will brake if you have have strings with 2 or more apostrophes (but your requirement doesn't specify what to do in these cases anyway). 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20947817)
    

  import re
s = 'LAST LAST2 First First2'
print re.search("[A-Z][a-z].*$",s).group().split()
  

 
  [A-Z]  match a single character present in the range between A and Z
(case sensitive)  
  [a-z]  match a single character present in the
range between a and z (case sensitive)  
  .*  matches any character
(except newline) Quantifier: Between zero and unlimited times, as
many times as possible, giving back as needed [greedy]  
  $  assert
position at end of the string 
 

  Non-regex  

  s = 'LAST LAST2 First First2'
print [i for i in s.split() if not i.isupper()]
  

    

  ['First', 'First2']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16405079)
 This would give you the desired result in a single line: 

  s = " - ".join(s.split(' - ')[:-1])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/35608206)
 If we ignore the "tie" requirement; https://docs.python.org/3/library/collections.html#collections.Counter works: 

  from collections import Counter
from itertools import chain

def most_common_character(input_str):
    return Counter(chain(*input_str.casefold().split())).most_common(1)[0][0]
  

 Example: 

  >>> most_common_character('The cosmos is infinite')
'i'
>>> most_common_character('ab' * 3)
'a'
  

 To return the last character that has the most count, we could use https://docs.python.org/3/library/collections.html#collections.OrderedDict: 

  from collections import Counter, OrderedDict
from itertools import chain
from operator import itemgetter

class OrderedCounter(Counter, OrderedDict):
    pass

def most_common_character(input_str):
    counter = OrderedCounter(chain(*input_str.casefold().split()))
    return max(reversed(counter.items()), key=itemgetter(1))[0]
  

 Example: 

  >>> most_common_character('ab' * 3)
'b'
  

 Note: this solution assumes that https://docs.python.org/3/library/functions.html#max returns the first character that has the most count (and therefore there is a https://docs.python.org/3/library/functions.html#reversed, to get the last one) and all characters are single Unicode codepoints. In general, you might want to use  \X  regular expression (supported by https://pypi.python.org/pypi/regex), to extract http://unicode.org/glossary/#user_perceived_character (http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries) from the Unicode string. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/29665894)
 You could use https://docs.python.org/2/library/re.html function. 

  >>> import re
>>> re.findall(r'\$(\d+)', "I bought a boat for $5000 and it's awesome")
['5000']
>>> re.findall(r'\$(\d+(?:\.\d+)?)', "I bought two boats for $5000  $5000.45")
['5000', '5000.45']
  

  

  >>> s = "I bought a boat for $5000 and it's awesome"
>>> [i[1:] for i in s.split() if i.startswith('$')]
['5000']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8162045)
  >>> s = "wolfdo65gtornado!salmontiger223"
>>> s.split('!')[0]
'wolfdo65gtornado'
>>> s = "wolfdo65gtornadosalmontiger223"
>>> s.split('!')[0]
'wolfdo65gtornadosalmontiger223'
  

 if it doesnt encounter a " ! " character, it will just grab the entire text though. if you would like to output an error if it doesn't match any " ! "  

  s = "something!something"
if "!" in s:
  print "there is a '!' character in the context"
else:
  print "blah, you aren't using it right :("
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/54084180)
 Use  str.split , and extract the last slice with  -1  (also gracefully handles false cases): 

  df = pd.DataFrame(columns=[
    'data.answers.1234567890.value.0987654321', 'blahblah.value.12345', 'foo'])    
  

  

  df.columns = df.columns.str.split('value.').str[-1]
df.columns
# Index(['0987654321', '12345', 'foo'], dtype='object')
  

 

 Another alternative is splitting inside a listcomp: 

  df.columns = [x.split('value.')[-1] for x in df.columns]
df.columns
# Index(['0987654321', '12345', 'foo'], dtype='object')
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34311504)
   .  in your regex, you need to use  \. , so your code should look like this: 

  company = re.findall('^From:.+@(.*)\.',line)
#                                  ^ this position was wrong
  

 See it https://regex101.com/r/gM6aI3/1. 

 Note that this will always match the last occurrence of  .  in your string, because  (.*)  is greedy. If you want to match the  first  occurence, you need to exclude any  .  from your capturing group: 

  company = re.findall('^From:.+@([^\.]*)\.',line)
  

   

 See a https://www.debuggex.com/r/4tVEr6O4Ka0Gp9C5. 



