Query: How to count the number of occurences of `None` in a list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14075748)
  

  def countOccurencesAtTheEndOfTheList(L):
    return (lambda num: None if num <= 2 else min(5, num))(len(L) if all(map(lambda x: x == L[-1], L)) else len(L) - 1 - = L[-1]][-1])

print countOccurencesAtTheEndOfTheList([1,1,2])
print countOccurencesAtTheEndOfTheList([1,2,1,1])
print countOccurencesAtTheEndOfTheList([1,2,1,1,1])
print countOccurencesAtTheEndOfTheList([1,1,2,2,2,2])
print countOccurencesAtTheEndOfTheList([1,2,1,1,1,1,1,1])
  

 output: 

  None
None
3
4
5
  

 Explanation: 

  = L[-1]]  Gets the indices of each element of L that do not match the last element.  
 = L[-1]][-1]  Gets the index of the rightmost element that does not match the last element. This is only valid if all of the elements in the list are not identical. 
 len(L) - 1 - [the above line]  gets the number of elements at the end of the list that match the last element, if all of the elements in the list are not identical.  
 all(map(lambda x: x== L[-1], L)  returns True only if all of the elements in the list are identical. 
 len(L) if [the above line] else [the line above the above line]  gets the number of elements at the end of the list that match the last element, regardless of whether all the elements in the list are identical or not. 
 lambda num: None if num <= 2 else min(5, num)  returns  None  if the value is too low, and clamps the maximum possible value to 5. 

 . Please do not write code like this. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/51550683)
 As indicated by the https://docs.python.org/2/library/collections.html#collections.Counter.most_common 

 
    most_common([n])  
  
   Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None, most_common() returns all elements in the counter.   Elements with equal counts are ordered arbitrarily  : 
 

 So the order of the ones listed with a count of 1 are not guaranteed in any particular order because the underlying structure is a  dict . 

 If you want your results alphabetically, you'll need to do some more processing. 

  from collections import Counter

c = Counter() #counter generating code

print sorted(c.most_common(), key=lambda i: (-i[1], i[0]))[:3]
  

 . https://docs.python.org/2/library/collections.html#collections.Counter.most_common, then https://docs.python.org/2/library/functions.html#sorted by 2nd parameter (the word frequency) in descending order, then 1st parameter (the word) in ascending order. Finally taking the https://docs.python.org/2.3/whatsnew/section-slices.html of the first 3 elements for your result. 

  Edit:  I realized that I wasn't sorting properly, and https://docs.python.org/2/library/operator.html#operator.itemgetter is limited to only ascending order. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/46862440)
 You can iterate  first  list and  add   occurences  of a given number to a  sum  using  count  method. 

  for number in list1: 
   s += list2.count(number);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/49748016)
 Convert your list to string using join. Then do: 

  text.count(pattern)
  

 If you need to count overlapping matches then you will have to use regex matching or define your own function. 

  Edit 
Here is the full code: 

  def overlapping_occurences(string, sub):
    count = start = 0
    while True:
        start = string.find(sub, start) + 1
        if start > 0:
            count+=1
        else:
            return count

given_list = [1, 1, 0, 1, 1, 1, 1, 0, 1, 1]
pattern = [1,1,0,1,1]

text = ''.join(str(x) for x in given_list)
print(text)
pattern = ''.join(str(x) for x in pattern)
print(pattern)
print(text.count(pattern)) #for no overlapping
print(overlapping_occurences(text, pattern))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49748070)
 You can solve it using following two steps: 

 
 Combine all elements of the list in a single string 
  Use python count function to match the pattern in the string 

  a_new = ''.join(map(str,a))

pattern = ''.join(map(str,pattern))

a_new.count(pattern)
   
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53257430)
 You don't have to use the loop at all to achieve this. Sort the list and find the number at the last index and use count(number) to get the number of occurences.  

  numbers = [1, 3, 4, 2, 3, 4, 5]
numbers.sort() 
print(numbers) 
[1, 2, 3, 3, 4, 4, 5]
  

 list.count(number) 

  [1, 2, 3, 3, 4, 4, 5].count(5)
1
  

 or you can use import the below one 

   from collections import Counter
 Counter(list)
  

 will give you the output count in dictionary format. 

  Counter({'1': 1, '2': 1, '3': 2, '4': 2, '5': 1})
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29822049)
 Use .. 

  

  with open("dictionary.txt","r") as f:
for line in f:
    if a_master.count(line.strip()) !=0:
        file.write( "Count " + line.strip() + str((a_master).count(line.strip())))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11829492)
  from collections import Counter
from itertools import chain

counts = Counter(chain.from_iterable(my_list))
  

 or generate a new list and use count: 

  new_list = list(chain.from_iterable(my_list))
print new_list.count(whatever)
  

 If you wanted how many times 'a' is the first, then something like: 

  sum(1 for el in my_list if el[0] is a) # or == a if object identity is not required
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45829195)
  sum([1 for elem in <yourlist> if elem==<your_value>])
  

 This will return the amount of occurences of your_value 



