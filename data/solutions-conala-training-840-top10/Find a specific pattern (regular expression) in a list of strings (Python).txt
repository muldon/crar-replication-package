Query: Find a specific pattern (regular expression) in a list of strings (Python)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/42059804)
 If you are looking for something that actually needs to be "pattern" based then you can use python's re module and sub the regular expression pattern for what you want. 

  import re


alist=['a_name1_1', 'a_name1_2', 'a_name1_3']
alist_changed = []

pattern = r'_\w*_'

for x in alist:
    y = re.sub(pattern, '_n1_', x, 1)
    #print(y)
    alist_changed.append(y)


print(alist_changed)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46912148)
  

  import re
final_vals = [i for i in l if re.findall('^[a-zA-Z]{6}\w{2}|(^[a-zA-Z]{6}\w{2}\w{3})', i) and not re.findall('BANK', i, re.IGNORECASE)]
  

 Output: 

  ['PSSTFRPPLYO', 'BNTETNTT', 'BSABESBBXXX']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29696695)
 Use  re.search  function along with the list comprehension. 

  >>> teststr = ['1 FirstString', '2x Sec String', '3rd String', 'x forString', '5X fifth']
>>> [i for i in teststr if re.search(r'\d+[xX]', i) ]
['2x Sec String', '5X fifth']
  

  \d+  matches one or more digits.  [xX]  matches both upper and lowercase  x . 

 By defining it as  a separate function. 

  >>> def SomeFunc(s):
        return [i for i in s if re.search(r'\d+[xX]', i)]

>>> print(SomeFunc(['1 FirstString', '2x Sec String', '3rd String', 'x forString', '5X fifth']))
['2x Sec String', '5X fifth']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6750279)
 You can create one regular expression, which will match, when any of the terms is found: 

  >>> s, t = "A kiwi, please.", "Strawberry anyone?"
>>> import re
>>> pattern = re.compile('apple|banana|peach|plum|pineapple|kiwi', re.IGNORECASE)
>>> pattern.search(s)
<_sre.SRE_Match object at 0x10046d4a8>
>>> pattern.search(t) # won't find anything
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/5983121)
 You should use http://docs.python.org/library/re.html#re.findall, it will find all non-overlapping matches of a pattern in a string, and return it as a list of strings. 

  import re
re.findall('_FILE:(.*?)_', string)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/12394320)
 You can use a regular expression: 

  import re

def matches(s, sub_strings):
    sub_strings = sorted(sub_strings, key=len, reverse=True)
    pattern = '|'.join(re.escape(substr) for substr in sub_strings)
    return re.findall(pattern, s)
  

 This is at least short and quick, but it will not necessarily find the best set of matches; it is too greedy. For example, 

  matches("bears", ["bea", "be", "ars"])
  

 returns  ["bea"] , when it should return  ["be", "ars"] . 

 

 Explanation of the code: 

 
  The first line sorts the substrings by length, so that the longest strings appear at the start of the list. This makes sure that the regular expression will prefer longer matches over shorter ones.  
  The second line creates a regular expression pattern consisting of all the substrings, separated by the  |  symbol, which means “or”.  
  The third line just uses the  re.findall  function to find all matches of the pattern in the given string  s .  
 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13840909)
 If there are any capturing groups in the regular expression then http://docs.python.org/2/library/re.html#re.findall returns only the values captured by the groups. If there are no groups the entire matched string is returned. 

 
    re.findall(pattern, string, flags=0)  
  
   Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found.  If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group.  Empty matches are included in the result unless they touch the beginning of another match. 
 

 

 
   How to write the regexp directly such that it returns ['X', 'B', 'D'] ? 
 

 Instead of using a capturing group you can use a non-capturing group: 

  >>> re.findall(r"(?:^|\+)([A-Z])", formula)
['X', 'B', 'D']
  

 Or for this specific case you could try a simpler solution using a word boundary: 

  >>> re.findall(r"\b[A-Z]", formula)
['X', 'B', 'D']
  

 Or a solution using  str.split  that doesn't use regular expressions: 

  >>> [s[0] for s in formula.split('+')]
['X', 'B', 'D']
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3274577)
 Cletus gave a very good answer. If however one of the strings to match could be a substring of another, then you would to reverse sort the strings first so that shortest matches do not obscure longer ones. 

 If, as Alex has noted, the original poster wanted what he actually asked for, then a more tractable solution than using permutations might be to:  

 
 Remove any duplicates in list_patterns. (It could be better off starting with a set then turning it into a reverse-sorted list without duplicates).  
 re.escape() the items of the list. 
 Surround each item in individually a group  (... ) . 
 '.join() all the groups. 
 Find the set of the indices of all groups that matched, and compare its length with  len(list_patterns) . 
 

 If there is at least one match for every entry in your original list of strings, then the length of the set should match. 

 The code would be something like: 

  import re

def usedgroupindex(indexabledata):
    for i,datum in enumerate(indexabledata):
        if datum: return i
    # return None

def findallstrings(list_patterns, string):
    lp = sorted(set(list_patterns), reverse=True)
    pattern = "|".join("(%s)" % re.escape(p) for p in lp)
    # for m in re.findall(pattern, string): print (m, usedgroupindex(m))
    return ( len(set(usedgroupindex(m) for m in re.findall(pattern, string)))
             == len(lp) )

list_patterns = [': error:', ': warning:', 'cc1plus:', 'undefine reference to']
string = ' XZX '.join(list_patterns)

print ( findallstrings(list_patterns, string) )
  



