Query: Elegant way to create a dictionary of pairs, from a list of tuples?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/45542191)
 Would this be enough 

  celebr = ['Tony','Harry','Katty','Sam']
perc = [69,31,0,0]

dlist = []

for i, j in zip(celebr, perc):
    dlist.append({i: j})

print dlist
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/52964077)
 Use a set comprehension to iterate over the key, value pairs, and then create new tuples from the exploded (unpacked) key and the value: 

  >>> {(*k, v) for k, v in d.items()}
{('e', 'f', 'g', 6), ('a', 'b', 'c', 4)}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/12816825)
 In fact, you do not necessarily need a tuple for create a choice, quite a list: 

  >>> d = {'AL' : 'Alabama', 'AK' : 'Alaska',}
>>> d.items()
[('AK', 'Alaska'), ('AL', 'Alabama')]
  

  

  >>> tuple(d.items())
(('AK', 'Alaska'), ('AL', 'Alabama'))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/27537616)
 You can use dictionary comprehension, to create a dictionary with the filtered values, like this 

  >>> {key: d1[key] for key in d1 if d1[key] > 0}
{'c': 8, 'd': 7}
  

 You can also use  dict.items()  like this 

  >>> {key: value for key, value in d1.items() if value > 0}
{'c': 8, 'd': 7}
  

 Note: Using  dict.iteritems()  will be more memory efficient in Python 2.7, as  dict.items()  will create a list of tuples with all the key-value pairs. 

 If your intention is to just remove the values which are  0 , then you can even shorten it like this 

  >>> {key: value for key, value in d1.items() if value}
{'c': 8, 'd': 7}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48408878)
  def fun(item):
     return [item[item1]+' '+k for k in item[item2]]
res = []
[res.append(fun(i)) for i in some_list if(fun(i)) not in res]
print res
  

 this should work 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45542274)
  

  celebr = ['Tony','Harry','Katty','Sam']
perc = [69,31,0,0]

b = [{celebr[i]: perc [i]} for i in range(0, len(celebr))]

print(b)
  

 Output : 

  [{'Tony': 69}, {'Harry': 31}, {'Katty': 0}, {'Sam': 0}]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22393719)
 If the dictionary you want to order is created outside of your control, you might use the following to get its  key:value  pairs as a list of tuples: 

  pairs = my_dict.items()
  

 You can then sort this list any way you like. When you've done that, you can pass the ordered list of pairs to the  OrderedDict  constructor 

  from collections import OrderedDict
# sort in some way (for example, reverse the key order)
pairs = reversed(my_dict.items())
ordered = OrderedDict(pairs)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/45542983)
 You can implement with  zip  and  dict . 

  dict(zip(celebr,perc))
  

 Results: 

  In [14]: celebr = ['Tony', 'Harry', 'Katty', 'Sam'] 
In [15]: perc = [69, 31, 0, 0]

In [16]: dict(zip(celebr,perc))
Out[16]: {'Harry': 31, 'Katty': 0, 'Sam': 0, 'Tony': 69}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45542258)
 Your example merely creates a list containing the dicts  items . Your question asks for a list of sets. If you really want individual dicts then use a colon to separate the key and the value: 

  >>> [{k, v} for (k, v) in d.items()]
[{'Tony', 69}, {'Harry', 31}, {'Katty', 0}, {'Sam', 0}]
>>> [{k: v} for (k, v) in d.items()]
[{'Tony': 69}, {'Harry': 31}, {'Katty': 0}, {'Sam': 0}]
  



