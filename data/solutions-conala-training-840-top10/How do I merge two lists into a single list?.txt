Query: How do I merge two lists into a single list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/52435647)
 You should make  mergeSort  return the merged list, and the caller should output the returning value of  mergeSort  instead: 

  def merge(arr1, arr2):
    merged = []
    while arr1 and arr2:
        if arr1[0] > arr2[0]:
            arr1, arr2 = arr2, arr1
        merged.append(arr1.pop(0))
    merged.extend(arr1 or arr2)
    return merged
def mergeSort(arr):
    if len(arr) <= 1:
        return arr
    return merge(mergeSort(arr[:len(arr)//2]), mergeSort(arr[len(arr)//2:]))
a = [9, 5, 12, 4, 6, 8, 45, 2]
print(mergeSort(a))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3472046)
 If you care about order: 

  #import operator
import itertools
a = [1,2]
b = ['a','b']
#c = list(reduce(operator.add,zip(a,b))) # slow.
c = list(itertools.chain.from_iterable(zip(a,b))) # better.
  

  print c  gives  [1, 'a', 2, 'b']  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34762046)
  a = [0, 3, 6, 9]
b = [1, 4, 7, 10]
c = [2, 5, 8, 11]
d=[]
print [j  for i in zip(a,b,c) for j in i]
  

 Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/52694804)
 You don't actually have a list of dictionaries, but a list of lists of dictionaries, and you're trying to merge the dictionaries within the sub-lists, so you should initialize your  defaultdict  inside the loop that iterates through the main list: 

  empty = []
for smaller_list in list_of_dictionaries2:
    correct2 = defaultdict(list)
    for d in smaller_list:
        for k,v in d.items():
            correct2[k].append(v)
    empty.append(correct2)
  

  empty  would become: 

  [defaultdict(<class 'list'>, {0: [3523, 7245], 1: [3524, 7246, 20898], 2: [3540, 7247, 20899], 4: [3541, 20901], 5: [3542, 7249, 20902], 3: [7248, 20900], 6: [7250]}), defaultdict(<class 'list'>, {0: [3], 1: [4], 2: [5], 3: [6]})]  

 Note that your expected output for the second merged  defaultdict  is incorrect since the value of each key should be a list after merge. Also the list of lists of dictionary should become a list of  defaultdict s of lists after the merge, not a list of lists of  defaultdict s of lists. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50829932)
 the following code will scale  

  from itertools import chain
out = []
for each in zip(*list_):
    out.append(list(chain.from_iterable(each)))
  

 Or a single liner 

  print([list(chain.from_iterable(each)) for each in zip(*list_)])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2489163)
 If you build the result in reverse sorted order, you can use  pop()  and still be O(N) 
 pop()  from the right end of the list does not require shifting the elements, so is O(1) 
Reversing the list before we return it is O(N)  

  >>> def merge(l, r):
...     result = []
...     while l and r:
...         if l[-1] > r[-1]:
...             result.append(l.pop())
...         else:
...             result.append(r.pop())
...     result+=(l+r)[::-1]
...     result.reverse()
...     return result
... 
>>> merge([1,2,6,7], [1,3,5,9])
[1, 1, 2, 3, 5, 6, 7, 9]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/15703642)
  >>> import itertools
>>> ''.join(map(str, itertools.chain.from_iterable(zip(list1, list2))))
1one2two3three4four5five'
  

  Explanation:  

 
   zip(list1, list2)  creates a list containing tuples of matching elements from the two lists: 

  >>> zip(list1, list2)
[(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four'), (5, 'five')]
   
  http://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable flattens that nested list: 

  >>> list(chain.from_iterable(zip(list1, list2)))
[1, 'one', 2, 'two', 3, 'three', 4, 'four', 5, 'five']
   
  Now we need to ensure that there are only strings, so we apply  str()  to all items using  map()   
 Eventually  ''.join(...)  merges the list items into a single string with no separator. 
 



