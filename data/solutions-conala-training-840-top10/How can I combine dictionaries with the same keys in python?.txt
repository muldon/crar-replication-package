Query: How can I combine dictionaries with the same keys in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46650721)
 You can use dictionary comprehension for Python dicts: 

  a1 = {'x1':1, 'x2':2, 'x3':3}
a2 = {'x1':2, 'x2':3, 'x3':4}

a3 = {
    key: a1.get(key, 0) + a2.get(key, 0)
    for key in set(a1.keys() + a2.keys())
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45649266)
  bar = {
    k: [d.get(k) for d in foo]
    for k in set().union(*foo)
}
  

 Things to google: 

 
 python list comprehension 
 python dict comprehension 
 python star 
 python dict get 
 python set union 
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/27383069)
  from copy import deepcopy

d1 = {"admin": {"key1": "v2"}}
d2 = {"admin": {"key2": "v3"},
      "user": {"something": "else"}}

def merge(one, two):
    if isinstance(two, dict):
        result = deepcopy(one)
        for key, value in two.iteritems():
            if key in result and isinstance(result[key], dict):
                result[key] = merge(result[key], value)
            else:
                result[key] = deepcopy(value)
        return result
    return two

print merge(d1, d2)
  

 Output 

  {'admin': {'key2': 'v3', 'key1': 'v2'}, 'user': {'something': 'else'}}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46976071)
 The other answers are based on the assumption that all dictionaries involved have all the same keys. If you aren't sure that this is the case, I recommend using https://docs.python.org/3/library/collections.html#collections.defaultdict: 

  from collections import defaultdict

result = defaultdict(list)

for d in (a,b):
    for key, value in d.items():
        result[key].append(value)
  

 Additionally, this solution works for any number of dictionaries. Simply add all dictionaries you want to merge, to the tuple  (a,b) . 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11533309)
 If all the dicts have the same set of keys, this will work: 

  dict((k, [d[k] for d in dictList]) for k in dictList[0])
  

 If they may have different keys, you'll need to first built a set of keys by doing set unions on the keys of the various dicts: 

  allKeys = reduce(operator.or_, (set(d.keys()) for d in dictList), set())
  

 Then you'll need to protect against missing keys in some dicts: 

  dict((k, [d[k] for d in [a, b] if k in d]) for k in allKeys)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13624432)
 I'm assuming you mean that you want  {key1: value1, key2:value2, keyn:valuen} . That is, you want to combine all the separate dictionaries into a single one with each of the keys and values from the individual dictionaries. 

 Here's how I'd do it, using a dictionary comprehension: 

   l = [{"key1":"value1"},{"key2":"value2"},{"keyn":"valuen"}]
 result = {k:v for d in l for k, v in d.iteritems()}

 print result # {'key2': 'value2', 'key1': 'value1', 'keyn': 'valuen'}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8447781)
 Here is a class, RUDict (for Recursive-Update dict) that implements the behaviour you're looking for: 

  class RUDict(dict):

    def __init__(self, *args, **kw):
        super(RUDict,self).__init__(*args, **kw)

    def update(self, E=None, **F):
        if E is not None:
            if 'keys' in dir(E) and callable(getattr(E, 'keys')):
                for k in E:
                    if k in self:  # existing ...must recurse into both sides
                        self.r_update(k, E)
                    else: # doesn't currently exist, just update
                        self[k] = E[k]
            else:
                for (k, v) in E:
                    self.r_update(k, {k:v})

        for k in F:
            self.r_update(k, {k:F[k]})

    def r_update(self, key, other_dict):
        if isinstance(self[key], dict) and isinstance(other_dict[key], dict):
            od = RUDict(self[key])
            nd = other_dict[key]
            od.update(nd)
            self[key] = od
        else:
            self[key] = other_dict[key]


def test():
    dict1 = {'A' : {'B' : 'C'}}
    dict2 = {'A' : {'D' : 'E'}}

    dx = RUDict(dict1)
    dx.update(dict2)
    print(dx)


if __name__ == '__main__':
    test()


>>> import RUDict
>>> RUDict.test()
{'A': {'B': 'C', 'D': 'E'}}
>>>
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/25408421)
  d = {}
for k, v in dict_a.items():
    if k in dict_b:
        val1, val2 =  (v[0]+ dict_b[k][0]) / 2, (v[1] + dict_b[k][1]) / 2 # average sum of ele1 and ele2 in each value list
        d[k] = [val1, val2] # set new value to key
    else:
        d[k] = v # else just add the k,v 

for k,v in dict_b.items(): # add rest of keys from dict_b
    if k not in d: # if key not already in d add it
        d[k] = v
print d

{'key3': [37, 89.56], 'key2': [35, 76], 'key1': [39, 71], 'key4': [46, 89]}
  

 If you don't want to use  dict_b  again: 

  d = {}
for k, v in dict_a.items():
    if k in dict_b:
        val1, val2 = (v[0]+ dict_b[k][0]) / 2, (v[1] + dict_b[k][1]) / 2 # average sum of ele1 and ele2 in each value list
        d[k] = [val1, val2] # set new value to key
        del dict_b[k] # remove key
    else:
        d[k] = v # else just add the k,v

d.update(dict_b) # update with remainder of dict_b
  



