Query: Remove or adapt border of frame of legend using matplotlib
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25540279)
 When plotting a plot using matplotlib: 

 How to remove the box of the legend? 

  plt.legend(frameon=False)
  

 How to change the color of the border of the legend box? 

  leg = plt.legend()
leg.get_frame().set_edgecolor('b')
  

 How to remove only the border of the box of the legend? 

  leg = plt.legend()
leg.get_frame().set_linewidth(0.0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40541318)
 One more related question, since it took me forever to find the answer: 

  How to make the legend background blank ( i.e.  transparent, not white):  

  legend = plt.legend()
legend.get_frame().set_facecolor('none')
  

 Warning, you want  'none'  (the string).  None  means the default color instead. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50019930)
 You can remove the border of the legend by using the argument  frameon=False  in the call to  plt.legend() . 

 If you only have one figure and axes active, then you can use  plt.gca()  to get the current axes. Alternatively  df.plot.bar  returns an  axes  object (which I would suggest using because  plt.gca()  might get confusing when working with multiple figures). Therefore you can set the visibility of the spines to  False : 

  ax = dfA.plot.bar(stacked=True, color=[colorDict.get(x, '#333333') for x in 
dfA.columns],figsize=(10,8))
plt.legend(loc='upper right', bbox_to_anchor=(1.4, 1), frameon=False)

for spine in ax.spines:
    ax.spines[spine].set_visible(False)

    # Color of the spines can also be set to none, suggested in the comments by ScoutEU 
    # ax.spines[spine].set_color("None")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44872496)
 Legends can have a title which you specify by the  title  argument. The space between the legend and the axes border is dertermined by a parameter  borderaxespad , which can be set to zero.  

 To have the legend itself https://stackoverflow.com/a/44620643/4124317, you may set the legend's  _legend_box.align  to "left". 

  leg=ax.legend([xx, xy,xz], ("0%", "60%",'100%'),
              loc='upper left',
              title = "IOTs replacement\nwith FAC", 
              borderaxespad=0)

leg.get_frame().set_alpha(0.0)
leg._legend_box.align = "left"
  

 https://i.stack.imgur.com/bGATh.png 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6520663)
 If you just want to use  rcParams , the proper parameters are  xticks.color  and  yticks.color .  I can't seem to find a key for the legend frame color.  You can set that (along with the tick colors) programmatically though.  

  import pylab

pylab.plot([1,2,3],[4,5,6], label ='test')
lg = pylab.legend()
lg.get_frame().set_edgecolor('blue')
ax = pylab.axes()

for line in ax.yaxis.get_ticklines():
    line.set_color('blue')
for line in ax.xaxis.get_ticklines():
    line.set_color('blue')

for label in ax.yaxis.get_ticklabels():
    label.set_color('blue')
for label in ax.xaxis.get_ticklabels():
    label.set_color('blue')

pylab.show()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18604199)
 You can try to use  ax.spines . For example: 

  import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(x, y)

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
  

 If you want to remove all spines (and probably ticks as well), you can do 

  [s.set_visible(False) for s in ax.spines.values()]
[t.set_visible(False) for t in ax.get_xticklines()]
[t.set_visible(False) for t in ax.get_yticklines()]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47749903)
 You may limit the saved region of a figure to the bounding box of the legend using the  bbox_inches  argument to  fig.savefig . Below to versions of a function which you can simply call with the legend you want to save as argument. You may either use the legend created in the original figure here (and remove it afterwards,  legend.remove() ) or you may create a new figure for the legend and simply use the function as it is. 

 Export legend boundingbox</h3>

 In case the complete legend shall be saved, the bounding box supplied to the  bbox_inches  argument would be simply the transformed bounding box of the legend. This works well if the legend has no border around it. 

  import matplotlib.pyplot as plt

colors = ["crimson", "purple", "gold"]
f = lambda m,c: plt.plot([],[],marker=m, color=c, ls="none")[0]
handles = [f("s", colors[i]) for i in range(3)]
labels = colors
legend = plt.legend(handles, labels, loc=3, framealpha=1, frameon=False)

def export_legend(legend, filename="legend.png"):
    fig  = legend.figure
    fig.canvas.draw()
    bbox  = legend.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
    fig.savefig(filename, dpi="figure", bbox_inches=bbox)

export_legend(legend)
plt.show()
  

 https://i.stack.imgur.com/9SDyp.png 

 Export extended legend bounding box</h3>

 If there is a border around the legend, the above solution may be suboptimal. In this case it makes sense to extend the bounding box by some pixels to include the border to its full. 

  import numpy as np
import matplotlib.pyplot as plt

colors = ["crimson", "purple", "gold"]
f = lambda m,c: plt.plot([],[],marker=m, color=c, ls="none")[0]
handles = [f("s", colors[i]) for i in range(3)]
labels = colors
legend = plt.legend(handles, labels, loc=3, framealpha=1, frameon=True)

def export_legend(legend, filename="legend.png", expand=[-5,-5,5,5]):
    fig  = legend.figure
    fig.canvas.draw()
    bbox  = legend.get_window_extent()
    bbox = bbox.from_extents(*(bbox.extents + np.array(expand)))
    bbox = bbox.transformed(fig.dpi_scale_trans.inverted())
    fig.savefig(filename, dpi="figure", bbox_inches=bbox)

export_legend(legend)
plt.show()
  

 <a href="https://i.stack.imgur.com/Hk8Nv.png"  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28720127)
  ax.axis('off') , will as Joe Kington pointed out, remove everything except the plotted line. 

 For those wanting to only remove the frame (border), and keep labels, tickers etc, one can do that by accessing the  spines  object on the axis. Given an axis object  ax , the following should remove borders on all four sides: 

  ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)
  

 And, in case of removing  x  and  y  ticks from the plot:  

   ax.get_xaxis().set_ticks([])
 ax.get_yaxis().set_ticks([])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/43129546)
 Both methods work in matplotlib 2.0. Either use the  edgecolor  argument 

  plt.legend(edgecolor="limegreen")
  

 or set the property of the frame 

  legend = plt.legend()
legend.get_frame().set_edgecolor("limegreen")
  

 Earlier versions don't have those options. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/3219849)
 To adjust the http://matplotlib.sourceforge.net/api/artist_api.html?highlight=dashes#matplotlib.lines.Line2D.set_dashes, use 

  a.plot(x, y, '--', label='foo bar', dashes=(2,2))
  

 and the http://matplotlib.sourceforge.net/api/artist_api.html?highlight=legend#matplotlib.legend.Legend.get_frame line width, 

  lg = a.legend()
fr = lg.get_frame()
fr.set_lw(0.2)
  



