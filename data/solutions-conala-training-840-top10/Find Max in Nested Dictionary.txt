Query: Find Max in Nested Dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47654477)
 You can use list comprehension or other way: 

  print([min(item) for item in zip(*x)])
  

 is same as: 

  min_list=[]
for i in zip(*x):
    min_list.append(min(i))
print(min_list)
  

 output: 

  [1, 5, 2, 4]
  

 For max: 

  print([max(item) for item in zip(*x)])
  

 is same as: 

  max_list=[]
for i in zip(*x):
    max_list.append(max(i))

print(max_list)
  

 output: 

  [9, 10, 7, 12]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/12829912)
 This should work for nested dictionary: 

  def find_max(d, name=None):
    return max((v, name) if k == "count" else find_max(v, k) for k, v in d.items())

>>> find_max(d)
(9.0, 'nationwide')
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44624877)
 This is an optional implementation to your issue. 

 First, filter all subkey1 with True. 

 Second, find from the filtered dictionary the max value within subkey2. 

  d = {'key1' : {'subkey1' : True,  'subkey2' : 4},
     'key2' : {'subkey1' : True,  'subkey2' : 8},
     'key3' : {'subkey1' : False, 'subkey2' : 1},
     'key4' : {'subkey1' : False, 'subkey2' : 9} }

max_d = {v["subkey2"]:{k:v} for k,v in d.items() if v["subkey1"]} # create new dictionary that the key is the value from subkey2 and the value is the original key and value.
max_int = max(max_d.keys(), key=int) # get the max key

print (max_d[max_int]) # print the maximum 

>>> {'key2': {'subkey1': True, 'subkey2': 8}}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/50183064)
 You can use a dictionary comprehension with  max : 

  d={'a':{'1':4,'2':6},'b':{'1':5,'2':10}}
new_d = {a:max(b, key=b.get) for a, b in d.items()}
  

 Output: 

  {'a': '2', 'b': '2'}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43177823)
 You can catch the value in the iteration to avoid looking up the value with  [] , but it's not that much cleaner: 

  max((sum(c.values()), key) for key, c in x.items())
  

 You can provide max with a function which looks nice if you only want to return the key of the max entry: 

  max(x, key=lambda k: sum(x[k].values()))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34965286)
 Don't use the name  dict , it will shadow the builtin dictionary. You can create a dictionary mapping your orignal keys to the maximum value of the sublists: 

  >>> d_max = {k:max(d[k]) for k in d}
>>> d_max
{'a': 5, 'c': 3, 'b': 7}
  

 And then iterate over the sorted items of that dictionary: 

  >>> for k, v in sorted(d_max.items(), key=lambda x: x[1], reverse=True):
...     print('{} : {}'.format(k,v))
... 
b : 7
a : 5
c : 3
  

  edit : If you never need the  d_max  dictionary in order to look up the max values, we can simplify a little further: 

  >>> for k,v in sorted(((max(d[k]), k) for k in d), reverse=True): 
...     print('{} : {}'.format(v,k))
... 
b : 7
a : 5
c : 3
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43177929)
  []  are unneeded 

  print ( max((sum(x[ng].values()), ng) for ng in x)[1] )
  

  .items() 

  print ( max((sum(v.values()), k) for k,v in x.items())[1] )
  

 Max w/ lambda version 

  print ( max(x, key=lambda y: sum(x[y].values())) )
  

 The  map  method 

  print ( max(map(lambda ng: (sum(x[ng].values()), ng), x))[1] )
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36933796)
 This is how i solved this issue: 

  #get minimum and maximum stock options

result = min(data_dict.values(), key=lambda v:v['exercised_stock_options'] if v['exercised_stock_options'] != 'NaN' else float('inf'))
print result

result = max(data_dict.values(), key=lambda v:v['exercised_stock_options'] if v['exercised_stock_options'] != 'NaN' else float('-inf'))
print result
  



