Query: Using inheritance in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25296366)
 You should get that without any further effort. Here's some documentation from http://www.swig.org/Doc1.3/Python.html#Python_nn21. 

 
   31.3.8 C++ inheritance 
  
   SWIG is fully aware of issues related to C++ inheritance. Therefore, if you have classes like this 
 

  class Foo {
...
};

class Bar : public Foo {
...
};
  

 
   those classes are wrapped into a hierarchy of Python classes that reflect the same inheritance structure. All of the usual Python utility functions work normally: 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1185911)
 What you're interested in is a program called http://www.swig.org. It will generate Python wrappers and interfaces for C++ code. I use it with templates, inheritance, namespaces, etc. and it works well. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4143512)
  def mixer(*args):
    """Decorator for mixing mixins"""
    def inner(cls):
        for a,k in ((a,k) for a in args for k,v in vars(a).items() if callable(v)):
            setattr(cls, k, getattr(a, k).im_func)
        return cls
    return inner

class Mixin(object):
    def b(self): print "b()"
    def c(self): print "c()"

class Mixin2(object):
    def d(self): print "d()"
    def e(self): print "e()"


@mixer(Mixin, Mixin2)
class Foo(object):
    # Somehow mix in the behavior of the Mixin class,
    # so that all of the methods below will run and
    # the issubclass() test will be False.

    def a(self): print "a()"

f = Foo()
f.a()
f.b()
f.c()
f.d()
f.e()
print issubclass(Foo, Mixin)
  

 output: 

  a()
b()
c()
d()
e()
False
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7372443)
 Java has a fairly straightforward inheritance model: classes must have one (and only one) parent . You can't inherit from multiple parents, although you can implement multiple interfaces, which can be seen as Java's version of "multiple inheritance." 

 Most methods in Java classes are dynamically (late) bound, with the exception of methods declared  static ,  private  and  final  in the parent class. 

 In Python, as you have noted, you can inherit from multiple (or no) parents. Note that with multiple inheritance you can get the "http://en.wikipedia.org/wiki/Diamond_problem." You should be aware of how Python resolves that and the implications this has when you refer to a parent class in Python (ie: who's your daddy?) 

 In Python, everything is dynamically bound, and since you can add members to an instance, not all instances of the same class are guaranteed to have the same members. 

 Finally, there's a slight difference in how constructors are overridden: In Java, children classes  must  call the parent's constructor (refinement overriding), whereas in Python children classes can override the constructor and not call the parent's constructor (replacement overriding). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9188059)
 I would still prefer composition to inheritance, whether multiple or single. Really getting into duck typing is a bit like having loads of implicit interfaces everywhere, so you don't even need inheritance (or abstract classes) very much at all in Python. But that's  prefer  composition, not  never use inheritance . If inheritance (even multiple) is a good fit and composition isn't, then use inheritance. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4139597)
 You can add the methods as functions: 

  Foo.b = Mixin.b.im_func
Foo.c = Mixin.c.im_func
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/1629783)
 You could use a class decorator (Python 2.6 and up) if you just want to add a common function to several classes (instead of using inheritance). 

  def addF(y):
    def f(self, x):
        return "Hello", x, "and", y

    def decorate(cls):
        cls.f = f
        return cls

    return decorate


@addF(1)
class X(object):
    pass

@addF(2)
class Y(object):
    pass

print X().f("X")
print Y().f("Y")

>>> 
Hello X and 1
Hello Y and 2
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/840979)
  

  ShortName = MyReallyBigClassNameWhichIHateToType
  

 A class in Python is just an object like any other, and can have more than one name. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/224020)
 Doesn't all of this assume that the base class is a new-style class? 

  class A:
    def __init__(self):
        print("A.__init__()")

class B(A):
    def __init__(self):
        print("B.__init__()")
        super(B, self).__init__()
  

 Will not work in Python 2.  class A  must be new-style, i.e:  class A(object)  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6709274)
 In Python, there is no separate instance of a base class if the base class is inherited multiple times. I don't believe it's possible to achieve what you're asking using inheritance. Composition should work fine though. 

 P.S. Your question is phrased in a rather cryptic manner (using C++ terminology for a purely Python question), but I think I understood it. If I didn't, my apologies. 



