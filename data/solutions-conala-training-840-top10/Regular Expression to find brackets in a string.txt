Query: Regular Expression to find brackets in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30766813)
 You could also do this without a regex: 

  s="(a(vdwvndw){}]"
keep = {"(",")","[","]","{","}"}
print("".join([ch for ch in s if ch in keep]))
((){}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30766216)
 Use the following ( Closing square bracket  must be  escaped  inside  character class ): 

  brackets=re.search(r"[(){}[\]]+",s)
                           â†‘
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30766307)
 The regular expression  "[(){}[]]+"  (or rather  "[](){}[]+"  or  "[(){}[\]]+"  (as others have suggested)) finds a sequence of consecutive characters.
What you need to do is find all of these sequences and join them. 

 One solution is this: 

  brackets = ''.join(re.findall(r"[](){}[]+",s))
  

 Note also that I rearranged the order of characters in a class, as  ]  has to be at the beginning of a class so that it is not interpreted as the end of class definition. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/30766212)
 You have to escape the first closing square bracket. 

  r'[(){}[\]]+'
  

 To combine all of them into a string, you can search for anything that  doesn't  match and remove it. 

  brackets = re.sub( r'[^(){}[\]]', '', s)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26388332)
  if not (re.match(r"^[A-Za-z]*$", shift)):
  

 This will find everything from the start of the sentence  ^  

 Square brackets will find ONLY the characters that are within them  [ ]  

  A-Za-z  specifies which characters to find 

  *  is everything 

 and  $  matches the end of the string 

  Edit:  

 if you want to include spaces, use  \s  

  if not (re.match(r"^[A-Za-z\s]*$", shift)):
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/14933806)
  re.match  "matches" since the beginning of the string, but there is an extra  1 . 

 Use  re.search  instead, which will "search" anywhere within the string. And, in your case, also find something: 

  >>> re.search(pattern,s).groups()
('89059809102', '30589533')
  

 If you remove the brackets in pattern, it will still return a valid  _sre.SRE_Match , object, but with empty  groups : 

  >>> re.search('\s\d{11}/\d{8}',s).groups()
()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11295365)
  re.findall(r'<HR>\s*<font size="\+1">(.*?)</font><BR>', html, re.DOTALL)
  

  findall  is returning a list with everything that is captured between the brackets in the regular expression. I used re.DOTALL so the dot also captures end of lines. 

 I used  \s*  because I was not sure whether there would be any whitespace. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/38879460)
 I would use https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression in this approach. 

  import re

soup.find_all('li', {'class': re.compile(r'regex_pattern')})
  

 Because you have a known string but an arbitrary (I'm assuming unknown) number you can use a regular expression to define the pattern of what you expect the string to be. Example: 

  re.compile(r'^KNOWN_STRING[0-9]+$')
  

 This would find all known strings with one or more numbers at the end. See https://docs.python.org/3.4/library/re.html for more about regular expressions in Python. 

 Edit, to answer the question: 

 
   Would this be correct given two digits in the id? soup.find_all('li', {'class': re.compile(r'^TheMatch v-1 c-[0-9][0-9]+$')}). . 
 

  

  soup.find_all('li', {'class': re.compile(r'^TheMatch v-1 c-[0-9]{2}$')})
  

 The  +  just means one or more of the previous regular expression. 

 What I did was specify in brackets  {2}  after the regular expression the number of instances I was expecting to be there  2 . 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/30093849)
  [:?]\s\[[^\]]+?\]
  

   

 https://www.debuggex.com/r/6lYU40QL99Y0ipK1 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/34394882)
 Your grouping is wrong. Use brackets for the grouping: 

  (merchant ID \d+|device ID \d+)
  

 e.g. 

  >>>re.findall('(merchant ID \d+|device ID \d+)', string_1)
['merchant ID 1234', 'device ID 45678']
  



