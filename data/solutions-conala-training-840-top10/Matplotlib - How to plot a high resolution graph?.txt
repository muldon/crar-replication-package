Query: Matplotlib - How to plot a high resolution graph?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39870761)
 You can save your graph as svg for a lossless quality: 

  import matplotlib.pylab as plt

x = range(10)

plt.figure()
plt.plot(x,x)
plt.savefig("graph.svg")
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39870740)
 You can use http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.savefig to export to an image file: 

  plt.savefig('filename.png')
  

 In addition, you can specify the  dpi  argument to some scalar value, for example: 

  plt.savefig('filename.png', dpi=300)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39870773)
 use  plt.figure(dpi=1200)  before all your  plt.plot...  and at the end use  plt.savefig(...  see: http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.figure
and
http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47283983)
 Use a resolution that uses specific sizing that is large : 

   fig = plt.figure(figsize=(19.20,10.80))
  

 produces 1080p for example and you can go much higher than this. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/47283998)
  savefig(fname, dpi=None, facecolor='w', edgecolor='w',
    orientation='portrait', papertype=None, format=None,
    transparent=False, bbox_inches=None, pad_inches=0.1,
    frameon=None)
  

 you can use dpi=300 or other values 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54650655)
 You can tell matplotlib to create a high dpi figure using 

  plt.figure(dpi=300)
  

 before creating your plot. You can save your plot in higher dpi using: 

  plt.savefig("figurename.png", dpi=300)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47284340)
 You can use  savfig()  to export to an image file with specification of the dpi: 

  import matplotlib.pyplot as plt
...
plt.savefig('plot_name.png', dpi = 300)
  

 You can choose needed dpi by yourself. I hope it will be useful for you. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44046267)
 You need to return the values from the  HIGH  function and plot them with a marker. 

  import io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


u = u"""DateTime;Temperature
2017-05-01 07:20:00;49.15
2017-05-01 07:19:00;49.14
2017-05-01 07:18:00;49.15
2017-05-01 07:17:00;49.14
2017-05-01 07:16:00;49.14
2017-05-01 07:15:00;49.15
2017-05-01 07:14:00;49.15
2017-05-01 07:13:00;49.15
2017-05-01 07:12:00;49.16
2017-05-01 07:11:00;49.17
2017-05-01 07:10:00;49.18
2017-05-01 07:09:00;49.16
2017-05-01 07:08:00;49.15
2017-05-01 07:07:00;49.15
2017-05-01 07:06:00;49.16
2017-05-01 07:05:00;49.19
2017-05-01 07:04:00;49.19
2017-05-01 07:03:00;49.20
2017-05-01 07:02:00;49.21
2017-05-01 07:01:00;49.15"""

data = io.StringIO(u)
df = pd.read_csv(data, sep=";", index_col=0)
df.index = pd.to_datetime(df.index)


def HIGH(a, span):
    x,y = [],[]
    for m in range(span, len(a)-span):
        temp_df = a.iloc[m-span:m+span]
        cur = float(pd.DataFrame.max(temp_df, axis=0))
        if float(a.iloc[m]) == cur:
            x.append( a.index.values[m] )
            y.append( float(a.iloc[m]) )
    return x,y

plt.plot(df)
x,y = HIGH(df,5)
plt.plot(x,y, marker="*", color="crimson", ls="", ms=15)
plt.show()
  

 https://i.stack.imgur.com/KMJFp.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44900528)
 The resolution you chose for the basemap,  resolution='c'  is "coarse", meaning that detailed coastlines will not be shown. You can use any of the other possible resolutions 

  l (low), i (intermediate), h (high), f (full)
  

 Example: 

  resolution="l" : 
https://i.stack.imgur.com/isKXI.png 

  resolution="i" : 
<a href="https://i.stack.imgur.com/AVGOB.png"  

  resolution="h" : 
<a href="https://i.stack.imgur.com/1pTDw.png"  

  resolution="f" : 
<a href="https://i.stack.imgur.com/9T633.png"  

 Code to reproduce: 

  from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

m = Basemap(projection='merc', 
        llcrnrlat=52.3303609,urcrnrlat=52.4268763,
        llcrnrlon=4.6992733, urcrnrlon=5.2415393,
        resolution="f")

m.fillcontinents(color='bisque')
m.drawcoastlines()
m.drawmapboundary(fill_color='lightcyan')

plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36294064)
 The plot window uses screen resolution and you can zoom it without loss of information. If you put a  figure  just before showing it the only thing that should happen is that two windows will appear (because you already have one figure working). So if you want to customize figure size just do it before populating your plot: 

  import networkx as nx
import matplotlib.pyplot as plt

plt.figure(figsize=(18,18))

G = nx.gnm_random_graph(300,200)
graph_pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, graph_pos, node_size=10, node_color='blue', alpha=0.3)
nx.draw_networkx_edges(G, graph_pos)
nx.draw_networkx_labels(G, graph_pos, font_size=8, font_family='sans-serif')

plt.show()
  

 To have an image (here resolution is important) that you can zoom and avoid seeing big pixels you can either: 

  plt.savefig("plot.png", dpi=1000)
  

 , saving a png with a very large dpi.  

  plt.savefig("plot.pdf")
  

 , which will save the plot as vector graphic (into pdf). Matplotlib plot window has a tool which allows you to zoom in to any part of the plot: 

 https://i.stack.imgur.com/JFxB9.png 



