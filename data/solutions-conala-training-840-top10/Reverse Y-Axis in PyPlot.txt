Query: Reverse Y-Axis in PyPlot
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25200999)
 The best way to do this is simply to use this in the following order: 

  plt.scatter(x, y)
plt.yscale('log')
plt.gca().invert_yaxis()
plt.show()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42999576)
 using ylim() might be the best approach for your purpose: 

  xValues = list(range(10))
quads = [x** 2 for x in xValues]
plt.ylim(max(quads), 0)
plt.plot(xValues, quads)
  

 will result:https://i.stack.imgur.com/mYSvX.png 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32502481)
 Alternatively, you can use the http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.axis function, which allows you inverting any of the plot axis 

  ax = matplotlib.pyplot.axis()
matplotlib.pyplot.axis((ax[0],ax[1],ax[3],ax[2]))
  

 Or if you prefer to only reverse the X-axis, then 

  matplotlib.pyplot.axis((ax[1],ax[0],ax[2],ax[3]))
  

 Indeed, you can invert both axis: 

  matplotlib.pyplot.axis((ax[1],ax[0],ax[3],ax[2]))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8280500)
 There is a new API that makes this even simpler. 

  plt.gca().invert_xaxis()
  

  

  plt.gca().invert_yaxis()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2052799)
 https://stackoverflow.com/questions/2051744/pyplot-reverse-y-axis/2052203#2052203's answer is correct, but usually a shorter method is just to reverse the single axis in question: 

  plt.scatter(x_arr, y_arr)
ax = plt.gca()
ax.set_ylim(ax.get_ylim()[::-1])
  

 where the  gca()  function returns the current Axes instance and the  [::-1]  reverses the list. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18318831)
 Use the http://matplotlib.org/mpl_toolkits/mplot3d/api.html?highlight=invert_zaxis#mpl_toolkits.mplot3d.axes3d.Axes3D.invert_zaxis method of the  Axes3D : 

  from matplotlib import pyplot as p
from mpl_toolkits.mplot3d import Axes3D    # @UnusedImport

import numpy as np
from math import pi, cos, sin

z = np.arange(0, 1, 0.02)
theta = np.arange(0, 2 * pi + pi / 50, pi / 50)

fig = p.figure()
axes1 = fig.add_subplot(111, projection='3d')
for zval in z:
    x = zval * np.array([cos(q) for q in theta])
    y = zval * np.array([sin(q) for q in theta])
    axes1.plot(x, y, -zval, 'b-')
axes1.set_xlabel("x label")
axes1.set_ylabel("y label")
axes1.set_zlabel("z label")

axes1.invert_zaxis()

p.show()
  

   


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12842043)
 If you're in ipython in  pylab  mode, then 

  plt.gca().invert_yaxis()
show()
  

 the  show()  is required to make it update the current figure. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/47492841)
 By default matplotlib will order axes from smallest to largest. You can override that default for the x-axis by calling  invert_xaxis  on the  Axes  object: 

  from matplotlib import pyplot as plt
import numpy as np
x = np.array([3, 2, 1])
y = np.array([4, 5, 6])
plt.plot(x, y)
ax = plt.gca()
ax.invert_xaxis()
plt.show()
  

 https://i.stack.imgur.com/a6m1Z.png 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/54005544)
 Use: 

  # generate the data
n = 6
y = np.random.randint(low=0, high=10, size=n)
x = np.arange(n)

# generate the ticks and reverse it
xticks = range(n)
# xticks.reverse()

# plot the data
plt.figure()
ax = plt.subplot(111)
ax.bar(x, y)
# print xticks # prints [5, 4, 3, 2, 1, 0]
ax.set_xticklabels(xticks[::-1])          # <- Changed
plt.show()
  

 https://i.stack.imgur.com/mmD4D.png 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/42948008)
 If you are using a 'hex'  jointplot()  for a heatmap like I was, then you can do this: 

  import matplotlib.pyplot as plt
import numpy
import seaborn

x = numpy.arange(10)
y = x**2

g = seaborn.jointplot(x, y, kind='hex')
g.fig.axes[0].invert_yaxis()

plt.show()
  

 https://i.stack.imgur.com/LpCFr.png 



