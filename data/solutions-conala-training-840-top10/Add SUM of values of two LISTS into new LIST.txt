Query: Add SUM of values of two LISTS into new LIST
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14051047)
 From https://docs.python.org/2/library/operator.html#operator.add 

  import operator
map(operator.add, first,second)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30275849)
 Try the following code: 

  first = [1, 2, 3, 4]
second = [2, 3, 4, 5]
third = map(sum, zip(first, second))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39668083)
 Here is another way to do it. We make use of the internal __add__ function of python: 

  class SumList(object):
    def __init__(self, this_list):
        self.mylist = this_list

    def __add__(self, other):
        new_list = []
        zipped_list = zip(self.mylist, other.mylist)
        for item in zipped_list:
            new_list.append(item[0] + item[1])
        return SumList(new_list)

    def __repr__(self):
        return str(self.mylist)

list1 = SumList([1,2,3,4,5])
list2 = SumList([10,20,30,40,50])
sum_list1_list2 = list1 + list2
print(sum_list1_list2)
  

  Output  

  [11, 22, 33, 44, 55]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14050959)
 This extends itself to any number of lists: 

  [sum(sublist) for sublist in itertools.izip(*myListOfLists)]
  

 In your case,  myListOfLists  would be  [first, second]  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14050853)
 The  zip  function is useful here, used with a list comprehension. 

  [x + y for x, y in zip(first, second)]
  

 If you have a list of lists (instead of just two lists): 

  lists_of_lists = [[1, 2, 3], [4, 5, 6]]
[sum(x) for x in zip(*lists_of_lists)]
# -> [5, 7, 9]
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15459253)
 The easy way and fast way to do this is: 

  three = [sum(i) for i in zip(first,second)] # [7,9,11,13,15]
  

 Alternatively, you can use numpy sum: 

  from numpy import sum
three = sum([first,second], axis=0) # array([7,9,11,13,15])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23350064)
 Default behavior in numpy is add componentwise 

  import numpy as np
np.add(first, second)
  

 which outputs 

  array([7,9,11,13,15])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/24493747)
 Assuming both lists  a  and  b  have same length, you do not need zip, numpy or anything else. 

 Python 2.x and 3. 

  [a[i]+b[i] for i in range(len(a))]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/14947439)
 The original post is a little confusing: the examples look like a multimap rather than a dict of lists.   

 I assume that you have a defaultdict with lists of numbers and you'd like to create a new defaultdict that contains the cumulative sum of the values in each list.   

  d2 = defaultdict(list)
for k, v in d.iteritems():
    sum = 0.0
    v2 = []
    for x in v:
        sum += x
        v2.append(sum)
    d2[k] = v2
  

 Note that the new defaultdict won't auto-compute cumulative sums as you add new values. 

 If you have a library like numpy installed, you can use  numpy.cumsum  instead of using a python loop to compute the cumulative sum. 

 It's not clear to me what exactly you mean by "never bigger than 1."  Do you want to ignore elements after the cumulative sum reaches 1?  Do you want to ignore individual values greater than 1, but keep accumulating smaller ones, even if the sum grows beyond 1?  Do you want to have the same number of elements in each output list, but cap the element values at 1? 



