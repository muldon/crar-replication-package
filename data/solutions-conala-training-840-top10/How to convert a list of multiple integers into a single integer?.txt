Query: How to convert a list of multiple integers into a single integer?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41069712)
 If you don't like map you can always use a list comprehension: 

  s = [str(i) for i in x]
r = int("".join(s))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1914908)
 Its a list of lists, so  

  num = int(''.join(''.join(l) f l in lists))
  

  

  def flatten( nested ):
    f inner in nested:
        f x in inner:
            yield x

num = ''.join(flatten(lists))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1914951)
 I'd use http://docs.python.org/library/itertools.html#itertools.itertools.chain.from_iterable for this (new in python 2.6) 

 Example code: 

  import itertools
x = [['48', '5', '0'], ['77', '56', '0'], ['23', '76', '34', '0']]
print int(''.join(itertools.chain.from_iterable(x)))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/41067989)
 If you have a list of  int s and you want to join them together, you can use https://docs.python.org/3/library/functions.html#map with https://docs.python.org/3/library/functions.html#func-str to convert them to strings,  join  them on the empty string and then cast back to  int s with https://docs.python.org/3/library/functions.html#int. 

 In code, this looks like this: 

  r = int("".join(map(str, x)))
  

 and  r  now has the wanted value of  135 . 

 This, of course, is a limited approach that comes with some conditions. It requires the list in question to contain nothing else but positive  int s (as your sample) or strings representing  int s, else the steps of conversion to string might fail or the joining of (negative) numbers will be clunky.  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/41068073)
 Using only math (no conversions to or from strings), you can use the  reduce  function ( functools.reduce  in Python 3) 

  b = reduce(lambda total, d: 10*total + d, x, 0)
  

 This makes use of Horner's rule, which factors the polynomial representing the number to reduce the number of multiplications. For example, 

  1357 = 1*10*10*10 + 3*10*10 + 5*10 + 7     # 6 multiplications
     = ((1*10 + 3)*10 + 5)*10 + 7          # 3 multiplications
  

 As a result, this is faster than computing powers of 10 or creating a string and converting the result to an integer. 

  >>> timeit.timeit('reduce(lambda t,d: 10*t+d, x, 0)', 'from functools import reduce; x=[1,3,5,7]')
0.7217515400843695
>>> timeit.timeit('int("".join(map(str, [1,3,5,7])))')
1.425914661027491
>>> timeit.timeit('sum(d * 10**i for i, d in enumerate(x[::-1]))', 'x=[1,3,5,7]')
1.897974518011324
  

 

 In fairness, string conversion is faster once the number of digits gets larger. 

  >>> import timeit

# 30 digits
>>> setup='from functools import reduce; x=[5, 2, 6, 8, 4, 6, 6, 4, 8, 0, 3, 1, 7, 6, 8, 2, 9, 9, 9, 5, 4, 5, 5, 4, 3, 6, 9, 2, 2, 1]' 
>>> print(timeit.timeit('reduce(lambda t,d: 10*t+d, x, 0)', setup))
6.520374411018565
>>> print(timeit.timeit('int("".join(map(str, x)))', setup))
6.797425839002244
>>> print(timeit.timeit('sum(d * 10**i for i, d in enumerate(x[::-1]))', setup))
19.430233853985555

# 60 digits
>>> setup='from functools import reduce; x=2*[5, 2, 6, 8, 4, 6, 6, 4, 8, 0, 3, 1, 7, 6, 8, 2, 9, 9, 9, 5, 4, 5, 5, 4, 3, 6, 9, 2, 2, 1]' 
>>> print(timeit.timeit('reduce(lambda t,d: 10*t+d, x, 0)', setup))
13.648188541992567
>>> print(timeit.timeit('int("".join(map(str, x)))', setup))
12.864593736943789
>>> print(timeit.timeit('sum(d * 10**i for i, d in enumerate(x[::-1]))', setup))
44.141602706047706

# 120 digits!
>>> setup='from functools import reduce; x=4*[5, 2, 6, 8, 4, 6, 6, 4, 8, 0, 3, 1, 7, 6, 8, 2, 9, 9, 9, 5, 4, 5, 5, 4, 3, 6, 9, 2, 2, 1]' 
>>> print(timeit.timeit('reduce(lambda t,d: 10*t+d, x, 0)', setup))
28.364255172084086
>>> print(timeit.timeit('int("".join(map(str, x)))', setup))
25.184791765059344
>>> print(timeit.timeit('sum(d * 10**i for i, d in enumerate(x[::-1]))', setup))
99.88558598596137
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53960617)
 Use integer addition? 

  def increment(match):
    # convert the four matches to integers
    a,b,c,d = [int(x) for x in match.groups()]

    *a,b,c,d = [int(x) for x in str(a*1000 + b*100 + c*10 + d + 1)]
    a = ''.join(map(str,a)) # fix for 2 digit 'a'
    # return the replacement string
    return f'{a}.{b}.{c}.{d}'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41068065)
 Here is a more mathematical way that does not have to convert back and forth to string. Note that it will only work if 0 <= i <= 9. 

  >>> x = [1, 3, 5]
>>> sum(d * 10**i for i, d in enumerate(x[::-1]))
135
  

 The idea is to multiply each element in the list by its corresponding power of 10 and then to sum the result. 



