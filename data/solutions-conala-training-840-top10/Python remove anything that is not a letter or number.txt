Query: Python remove anything that is not a letter or number
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6323761)
 Also you can try to use isalpha and isnumeric methods the following way: 

  text = 'base, sample test;'
getVals = lambda x: (c for c in text if c.isalpha() or c.isnumeric())
map(lambda word: ' '.join(getVals(word)): text.split(' '))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6323461)
 you can use predefined regex in python :  \W  corresponds to the set  [^a-zA-Z0-9_] .   

  import re
s = 'Hello dutrow 123'
re.sub('\W', '', s)
--> 'Hellodutrow123'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6323437)
  '\W'  is the same as  [^A-Za-z0-9_]  plus accented chars from your locale. 

  >>> re.sub('\W', '', 'text 1, 2, 3...')
'text123'
  

 Maybe you want to keep the spaces or have all the words (and numbers): 

  >>> re.findall('\w+', 'my. text, --without-- (punctuation) 123')
['my', 'text', 'without', 'punctuation', '123']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43351982)
 How about a non regular-expression solution? 

  >>> from string import letters, digits
>>> from itertools import dropwhile
>>> 
>>> keep = set(letters + digits)
>>> s = '$@@^test123'
>>> ''.join(dropwhile(lambda c: c not in keep, s))
'test123'
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/6323376)
 In the char set matching rule  [...]  you can specify  ^  as first char to mean "not in" 

  import re
re.sub("[^0-9a-zA-Z]",        # Anything except 0..9, a..z and A..Z
       "",                    # replaced with nothing
       "this is a test!!")    # in this string

--> 'thisisatest'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/43023827)
 This will remove any characters that ARE NOT letters, by going through each character and only adding it to the output if it is a letter: 

  output_string = ""

for char in Comp_String:
    if char.isalpha():
        output_string = output_string + char
  

 This will remove any characters that ARE numbers, by going through each character and only adding it to the output if it is not a number: 

  output_string = ""

for char in Comp_String:
    if not char.isdigit():
        output_string = output_string + char
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6325804)
  [\w]  matches (alphanumeric or underscore). 

  [\W]  matches (not (alphanumeric or underscore)), which is equivalent to (not alphanumeric and not underscore) 

 You need  [\W_]  to remove ALL non-alphanumerics. 

 When using re.sub(), it will be much more efficient if you reduce the number of substitutions (expensive) by matching using  [\W_]+  instead of doing it one at a time. 

 Now all you need is to define alphanumerics: 

  str  object, only ASCII A-Za-z0-9: 

      re.sub(r'[\W_]+', '', s)
  

  str  object, only locale-defined alphanumerics: 

      re.sub(r'[\W_]+', '', s, flags=re.LOCALE)
  

  unicode  object, all alphanumerics: 

      re.sub(ur'[\W_]+', u'', s, flags=re.UNICODE)
  

 Examples for  str  object: 

  >>> import re, locale
>>> sall = ''.join(chr(i) for i in xrange(256))
>>> len(sall)
256
>>> re.sub('[\W_]+', '', sall)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
>>> re.sub('[\W_]+', '', sall, flags=re.LOCALE)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
>>> locale.setlocale(locale.LC_ALL, '')
'English_Australia.1252'
>>> re.sub('[\W_]+', '', sall, flags=re.LOCALE)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\x83\x8a\x8c\x8e\
x9a\x9c\x9e\x9f\xaa\xb2\xb3\xb5\xb9\xba\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\
xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd8\xd9\xda\xdb\xdc\xdd\xde\
xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\
xf3\xf4\xf5\xf6\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# above output wrapped at column 80
  

 Unicode example: 

  >>> re.sub(ur'[\W_]+', u'', u'a_b A_Z \x80\xFF \u0404', flags=re.UNICODE)
u'abAZ\xff\u0404'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44650282)
 I understand the spaces you need to remove reside in between letters. 

 Use 

  re.sub(r'(?<=[^\W\d_])\s+(?=[^\W\d_])', '', text)
  

  Details : 

 
  (?<=[^\W\d_])  - a positive lookbehind requiring a Unicode letter immediately to the left of the current location 
  \s+  - 1+ whitespaces (remove  +  if only one is expected) 
  (?=[^\W\d_])  -  a  positive lookahead that requires a Unicode letter immediately to the right of the current location. 
 

 You do not need  re.U  flag since it is on by default in Python 3. You need it in Python 2 though. 

 You may also use capturing groups: 

  re.sub(r'([^\W\d_])\s+([^\W\d_])', r'\1\2', text)
  

 where the non-consuming lookarounds are turned into consuming capturing groups ( (...) ). The  \1  and  \2  in the replacement pattern are backreferences to the capturing group values. 

 See a https://ideone.com/bhPjR1: 

  import re
text = "今天特别 热，但是我买了 3 个西瓜。"
print(re.sub(r'(?<=[^\W\d_])\s+(?=[^\W\d_])', '', text))
// => 今天特别热，但是我买了 3 个西瓜。
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6323484)
 There are other ways also you may consider e.g. simply loop thru string and skip unwanted chars e.g. assuming you want to delete all ascii chars which are not letter or digits 

  >>> newstring = [c for c in "a!1#b$2c%3\t\nx" if c in string.letters + string.digits]
>>> "".join(newstring)
'a1b2c3x'
  

 or use string.translate to map one char to other or delete some chars e.g. 

  >>> todelete = [ chr(i) for i in range(256) if chr(i) not in string.letters + string.digits ]
>>> todelete = "".join(todelete)
>>> "a!1#b$2c%3\t\nx".translate(None, todelete)
'a1b2c3x'
  

 this way you need to calculate  todelete  list once or  todelete  can be hard-coded once and use it everywhere you need to convert string  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36781932)
 You could use a regular expression to remove the non digit characters and then parse the number with  float  : 

  import re

value = float(re.sub(r"[^\d.]", "", post.text))
print("value: %s" % value)
  



