Query: How to replace repeated instances of a character with a single instance of that character in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3885121)
  

  pattern.replace("*"\*, "*")
  

  

  pattern.replace("\**", "*")
#                ^^^^
  

  

  pattern_after_substitution= re.sub(r"\*+", "*", pattern)
  

 which does what you wanted. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3878622)
 Well regular expressions wise I would do exactly as JoshD has suggested. .  

 Use -  

  regex  = re.compile('\*+')
result = re.sub(regex, "*", string)
  

 This would essentially cache your regex. So subsequent usage of this in a loop would make your regex operations fast.  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3878566)
 I'd suggest using the http://docs.python.org/library/re.html#re.sub sub function: 

  import re

result = re.sub("\*+", "*", "***abc**de*fg******h")
  

 I highly recommend reading through the article about RE and good practices. . In practice, using raw strings is a good idea. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42662229)
 You can use back reference in the pattern to match repeated characters and then replace it with two instances of the matched character, here  (.)\1+  will match a pattern that contains the same character two or more times, replace it with only two instances by  \1\1 : 

  import re
re.sub(r"(.)\1+", r"\1\1", s)
# "heyy how are youu, it's so cool here, cool."
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3878738)
 The naive way to do this kind of thing with  re  is 

  re.sub('\*+', '*', text)
  

 That replaces runs of 1 or more asterisks with one asterisk. For runs of exactly one asterisk, that is running very hard just to stay still. Much better is to replace runs of  TWO or more  asterisks by a single asterisk: 

  re.sub('\*\*+', '*', text)
  

 This can be well worth doing: 

  \python27\python -mtimeit -s"t='a*'*100;import re" "re.sub('\*+', '*', t)"
10000 loops, best of 3: 73.2 usec per loop

\python27\python -mtimeit -s"t='a*'*100;import re" "re.sub('\*\*+', '*', t)"
100000 loops, best of 3: 8.9 usec per loop
  

 Note that re.sub will return a reference to the input string if it has found no matches, saving more wear and tear on your computer, instead of a whole new string. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13433616)
 for example: 

  >>> import re
>>> s = "`...```.....``...`....`````...`"
>>> re.sub(r'((?<!`)(``)*`(?!`))', r'\1\1', s)
'``...``````.....``...``....``````````...``'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34464509)
 You can use a http://www.regular-expressions.info/lookaround.html regex to replace the pips that are followed with an alphabetical character: 

  >>> import re
>>> st = "f|u|n|n|y||b|o|y||a||c|a|t" 
>>> re.sub(r'\|(?=[a-z]|$)',r'',st)
'funny|boy|a|cat'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4485198)
  

  text = re.sub(r"([" + re.escape(string.punctuation) + r"])\1+", r"\1", text)
  

 This uses  re.escape()  to ensure that the punctuation characters are properly escaped as necessary. The  \1  backreferences refer to the part within the parentheses  () , which is the  first  punctuation character matched. So this replaces instances of two or more repeated punctuation characters with the same single character. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34464645)
 Use regular expressions. 

  import re

line = "f|u|n|n|y||b|o|y||a||c|a|t" 
line = re.sub("(?!\|\|)(\|)", "", line)

print(line)
  

 Output : 

  funny|boy|a|cat
  



