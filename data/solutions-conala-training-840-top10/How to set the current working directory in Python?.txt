Query: How to set the current working directory in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34971949)
  import os
print os.getcwd()  # Prints the current working directory
  

 To set the working directory: 

  os.chdir('c:\\Users\\uname\\desktop\\python')  # Provide the new path here
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/45975442)
 It work for  Mac  also  

  import os
path="/Users/HOME/Desktop/Addl Work/TimeSeries-Done"
os.chdir(path)
  

 To check working directory 

  os.getcwd()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1810762)
 Perhaps this is what you are looking for: 

  import os
os.chdir(default_path)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1810760)
 Try http://docs.python.org/library/os.html#os.chdir 

 
  os.chdir(path)
  
  
           Change the current working directory to path. . 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31956194)
 If you are sure that you do not want to change the current working directory for  spark  to work, and you just need to set the  spark_home  variable correctly. Then just use  os.path.join()  directly, you do not have to do  os.chdir()  before that. And then use  os.path.abspath()  to get the absolute path. 

  os.path.abspath  can handle relative paths as well, so you can use  ..  and  .  . 

 Example - 

  import os.path
spark_home = os.path.abspath(os.path.join(os.getcwd(),../../../SDK/SparkHome))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/50020131)
 Use... 

  import os
os.chdir(path)
  

 Where (path) is in the format shown from the output of... 

  os.getcwd()
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/23191366)
 You can use: 

  os.path.split(os.getcwd())[0]  to get the parent directory. 

 Then, you can use: 

  a=os.path.split(os.getcwd())[0]
os.listdir(a)
  

 for listing the contents of the parent directory 

 Also, this works too:- 

  os.listdir(os.pardir)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40544627)
 You access a file through a relative path. It looks like the current working directory is not set in the same way in your last case (OS X Finder): this would cause the file to not be found. 

 You can therefore set the working directory based on the location of your program: 

  import os

# __file__ is a relative path to the program file (relative to the current
# working directory of the Python interpreter).
# Therefore, dirname() can yield an empty string,
# hence the need for os.path.abspath before os.chdir() is used:
prog_dir = os.path.abspath(os.path.dirname(__file__))
os.chdir(prog_dir)  # Sets the current directory
  

 You might set the current working directory to something a bit different from this, depending on what the script expects (maybe the parent directory of the script:  os.path.join(prog_dir, os.pardir) ). 

 This should even remove the need for doing  try : since the script uses paths relative to the current working directory, the current directory should instead be set first. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13732284)
 When you run sh function you spawn a new bash process which then changes current directory and exits.  Then you spawn a new process which knows nothing about what happened to the first bash process.  Its current directory is, again, set to the home directory of the current user. 
To change Python process' current working directory use 

  os.chdir("blah")`
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/27211338)
 In my case it was the problem with my current directory. 

 I have added the following lines to set the current working directory to my script directory. 

 Hope this will solve the problem if writing to the script directory do not need admin permission.  

  import sys, os

def getScriptPath():
    return os.path.dirname(os.path.realpath(sys.argv[0]))

print 'Current working directory : ', os.getcwd()
os.chdir(getScriptPath())
print 'Changed working directory : ', os.getcwd()
  



