Query: Sort NumPy float array column by column
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12496601)
 the following will work, but there might be a faster way: 

  A = np.array(sorted(A,key=tuple))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30623882)
 From http://mail.scipy.org/pipermail/numpy-discussion/2008-December/039332.html, here's another solution: 

  >>> a
array([[1, 2],
       [0, 0],
       [1, 0],
       [0, 2],
       [2, 1],
       [1, 0],
       [1, 0],
       [0, 0],
       [1, 0],
      [2, 2]])
>>> a[np.lexsort(np.fliplr(a).T)]
array([[0, 0],
       [0, 0],
       [0, 2],
       [1, 0],
       [1, 0],
       [1, 0],
       [1, 0],
       [1, 2],
       [2, 1],
       [2, 2]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7588949)
 From http://wiki.python.org/moin/HowTo/Sorting, I think you can do: 

  a = ([[1, 2, 3], [4, 5, 6], [0, 0, 1]]); 
a = sorted(a, key=lambda a_entry: a_entry[1]) 
print a
  

 The output is: 

  [[[0, 0, 1], [1, 2, 3], [4, 5, 6]]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46230001)
 numpy ndarray sort by the 1st, 2nd or 3rd column: 

  >>> a = np.array([[1,30,200], [2,20,300], [3,10,100]])

>>> a
array([[  1,  30, 200],         
       [  2,  20, 300],          
       [  3,  10, 100]])

>>> a[a[:,2].argsort()]           #sort by the 3rd column ascending
array([[  3,  10, 100],
       [  1,  30, 200],
       [  2,  20, 300]])

>>> a[a[:,2].argsort()][::-1]     #sort by the 3rd column descending
array([[  2,  20, 300],
       [  1,  30, 200],
       [  3,  10, 100]])

>>> a[a[:,1].argsort()]        #sort by the 2nd column ascending
array([[  3,  10, 100],
       [  2,  20, 300],
       [  1,  30, 200]])
  

 To explain what is going on here:  argsort()  is passing back an array containing integer sequence of its parent:
https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html 

  >>> x = np.array([15, 30, 4, 80, 6])
>>> np.argsort(x)
array([2, 4, 0, 1, 3])
  

 Sort by column 3, then by column 2 then 1: 

  >>> a = np.array([[2,30,200], [1,30,200], [1,10,200]])

>>> a
array([[  2,  30, 200],
       [  1,  30, 200],
       [  1,  10, 200]])

>>> a[np.lexsort((a[:,2], a[:,1],a[:,0]))]
array([[  1,  10, 200],
       [  1,  30, 200],
       [  2,  30, 200]])

>>> a[np.lexsort((a[:,2], a[:,1],a[:,0]))][::-1]        #reverse
array([[  2  30 200]
       [  1  30 200]
       [  1  10 200]])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28074361)
 You can use numpy's http://docs.scipy.org/doc/numpy/reference/generated/numpy.lexsort.html.  Lexsort, though, sorts using the last column as the primary key.  One way to get what you want is to specify the columns explicitly:  

   x[np.lexsort((x[:,1], x[:,0]))]

 # array([[0, 0],
 #   [0, 1],
 #   [1, 0],
 #   [1, 1]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5047432)
  

  v[v[:,0].argsort()]
  

 (with  v  being the array).   v[:,0]  is the first column, and  .argsort()  returns the indices that would sort the first column.  You then apply this ordering to the whole array using advanced indexing.  Note that you get a sorte copy of the array. 

 The only way I know of to sort the array in place is to use a record dtype: 

  v.dtype = [("x", float), ("y", float), ("z", float)]
v.shape = v.size
v.sort(order="x")
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12496595)
 http://docs.scipy.org/doc/numpy/reference/generated/numpy.lexsort.html#numpy.lexsort will work here: 

  A[np.lexsort(A.T)]
  

 You need to transpose  A  before passing it to lexsort because when passed a 2d array it expects to sort by rows (last row, second last row, etc). 

 The alternative possibly slightly clearer way is to pass the columns explicitly: 

  A[np.lexsort((A[:, 0], A[:, 1]))]
  

 You still need to remember that lexsort sorts by the last key first (there's probably some good reason for this; it's the same as performing a stable sort on successive keys). 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2828121)
 I suppose this works:  a[a[:,1].argsort()]  

 This indicates the second column of  a  and sort it based on it accordingly. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35530479)
 Your array is a string array, so you need to convert it to float array first: 

  data = data.astype(float)
data[0,data[0,:].argsort()]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22638759)
  numpy  way of doing it: 

  In [7]:
AV=np.array(vec)
AV[:,np.argsort(AV[:,:,1])]
Out[7]:
array([[[[  0.00000000e+00,   6.36942675e-05],
         [  1.00000000e+00,   6.36942675e-05],
         [  2.00000000e+00,   6.36942675e-05],
         [  3.00000000e+00,   6.36942675e-05],
         [  4.00000000e+00,   6.36942675e-05],
         [  5.00000000e+00,   6.36942675e-05],
         [  6.00000000e+00,   6.36942675e-05],
         [  8.00000000e+00,   6.36942675e-05],
         [  4.99500000e+03,   6.36942675e-05],
         [  4.99600000e+03,   6.36942675e-05],
         [  4.99700000e+03,   6.36942675e-05],
         [  4.99800000e+03,   6.36942675e-05],
         [  4.99900000e+03,   6.36942675e-05],
         [  7.00000000e+00,   7.71408351e-04]]]])
  

 There is a  np.set_printoptions()  for controlling print options. There is no way, however, to only print the first 10 lines, you can instead print the first  n  lines and the last  n  lines by:  np.set_printoptions(threshold=a_samll_number, edgeitems=n)  



