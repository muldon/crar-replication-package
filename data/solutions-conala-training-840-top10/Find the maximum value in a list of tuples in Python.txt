Query: Find the maximum value in a list of tuples in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6783101)
 On Python 2, this isn't specified in the documentation and isn't in the portable in-Python section of the standard library, so this behaviour may vary between implementations.  

 In the source to CPython 2.7 this is implemented in  ./Python/bltinmodule.c  by  builtin_max  <sup>[http://hg.python.org/cpython/file/8527427914a2/Python/bltinmodule.c#l1441]</sup>, which wraps the more general  min_max  function  <sup>[<a href="http://hg.python.org/cpython/file/8527427914a2/Python/bltinmodule.c#l1337" ]</sup>. 

  min_max  will iterate through the values and use  PyObject_RichCompareBool  <sup>[http://docs.python.org/release/2.7.2/c-api/object.html#PyObject_RichCompareBool]</sup> to see if they are greater than the current value. If so, the greater value replaces it. Equal values will be skipped over. 

 The result is that the first maximum will be chosen in the case of a tie. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13145525)
 In addition to max, you can also sort: 

  >>> lis
[(101, 153), (255, 827), (361, 961)]
>>> sorted(lis,key=lambda x: x[1], reverse=True)[0]
(361, 961)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6783051)
 From empirical testing, it appears that  max()  and  min()  on a list will return the first in the list that matches the  max() / min()  in the event of a tie: 

  >>> test = [(1, "a"), (1, "b"), (2, "c"), (2, "d")]
>>> max(test, key=lambda x: x[0])
(2, 'c')
>>> test = [(1, "a"), (1, "b"), (2, "d"), (2, "c")]
>>> max(test, key=lambda x: x[0])
(2, 'd')
>>> min(test, key=lambda x: x[0])
(1, 'a')
>>> test = [(1, "b"), (1, "a"), (2, "d"), (2, "c")]
>>> min(test, key=lambda x: x[0])
(1, 'b')
  

 And https://stackoverflow.com/questions/6783000/which-maximum-does-python-pick-in-the-case-of-a-tie/6783101#6783101 confirms that this is indeed the case. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44153522)
 For Python 3, the behavior of  max()  in the case of ties is no longer just an implementation detail as detailed in the other answers. The feature is now guaranteed, as the https://docs.python.org/3/library/functions.html#max explicitly state: 

 
   If multiple items are maximal, the function returns the first one
  encountered. This is consistent with other sort-stability preserving
  tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and
  heapq.nlargest(1, iterable, key=keyfunc). 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13145419)
 Use  max() : 

   
Using  itemgetter() : 

  In [53]: lis=[(101, 153), (255, 827), (361, 961)]

In [81]: from operator import itemgetter

In [82]: max(lis,key=itemgetter(1))[0]    #faster solution
Out[82]: 361
  

 using  lambda : 

  In [54]: max(lis,key=lambda item:item[1])
Out[54]: (361, 961)

In [55]: max(lis,key=lambda item:item[1])[0]
Out[55]: 361
  

  timeit  comparison: 

  In [30]: %timeit max(lis,key=itemgetter(1))
1000 loops, best of 3: 232 us per loop

In [31]: %timeit max(lis,key=lambda item:item[1])
1000 loops, best of 3: 556 us per loop
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6783187)
 For Python 2 versions, IMO, I believe you cannot assume that  max()  returns the first maximal element in the list in the case of ties. I have this belief because  max()  is supposed to implement the true mathematical function  max , which is used on sets that have a total order, and where elements do not have any "hidden information". 

  (I will assume that others have researched correctly and the Python documentation does not give any guarantees for  max() .)  

  (In general, there are an endless number of questions you can ask about the behavior of a library function, and almost all of them can't be answered. For example: How much stack space will  max()  use? Will it use SSE?  Can it compare the same pair of objects more than once (if comparison has a side effect)? Can it run faster than O(n) time for "special" known data structures? etc. etc.)  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6783135)
 Your question somewhat leads to a note. When sorting a data structure, there is often a desire to keep relative order of objects that are considered equal for the purposes of comparison. This would be known as a http://en.wikipedia.org/wiki/Sorting_algorithm#Stability. 

 If you absolutely needed this feature, you could do a  sort() , which http://mail.python.org/pipermail/python-dev/2004-July/046416.html and then have knowledge of the order relative to the original list. 

 As per python itself, I don't believe that you get any guarantee of which element you will get when you call  max() . Other answers are giving the cpython answer, but other implementations (IronPython, Jython) could function differently. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/23023693)
  >>> mx = []
>>> mn = []
>>> for i, j in _list:
...     mx.append(i)
...     mn.append(j)
...
>>> x = (max(mx), max(mn))
>>> x
(3, 4)
  

 Append each value to a list, and then get the maximum. From that, create a tuple. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9725047)
 Try a list comprehension: 

  max_value = max(x[0] for x in A)
print [x for x in A if x[0] == max_value]
  

 See it working online: http://ideone.com/LPCyW 



