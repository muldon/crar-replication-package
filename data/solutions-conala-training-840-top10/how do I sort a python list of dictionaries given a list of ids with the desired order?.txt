Query: how do I sort a python list of dictionaries given a list of ids with the desired order?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17734866)
 Use sort with a custom key: 

  users.sort(key=lambda x: order.index(x['id']))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27967608)
 I think you are on the right track. If you need to speed it up, because your list is too long and you are having quadratic complexity, you can turn the list into a dictionary first, mapping the ids to their respective indices. 

  indices = {id_: pos for pos, id_ in enumerate(ids)}
rez.sort(key = lambda x: indices[x['id']])
  

 This way,  indices  is  {0: 5, 1: 0, 2: 1, 3: 6, 4: 2, 5: 4, 6: 3} , and  rez  is 

  [{'id': 1, 'val': 7}, 
 {'id': 2, 'val': 8}, 
 {'id': 4, 'val': 0}, 
 {'id': 6, 'val': -4}, 
 {'id': 5, 'val': -1}, 
 {'id': 0, 'val': 9}, 
 {'id': 3, 'val': 2}]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/23057948)
 You are  grouping ; this is easiest with a https://docs.python.org/2/library/collections.html#collections.defaultdict: 

  from collections import defaultdict

newresult = defaultdict(list)

for entry in result:
    job_id = entry.pop('job_id')
    newresult[job_id].append(entry)
  

  newresult  is a dictionary and these are not ordered; if you need to access job ids in ascending order, sort the keys as you list them: 

  for job_id in sorted(newresult):
    # loops over the job ids in ascending order.
    for job in newresult[job_id]:
        # entries per job id
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18691307)
 I would convert the dictionary to a list of tuples and sort it based on weight (in reverse order for descending), then just remove the objects to get a list of the keys 

  l = documents.items()
l.sort(key=lambda x: x[1]['weight'], reverse=True)
result = [d[0] for d in l]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17734990)
 If the lists are really big: 

  userd = {d['id']:d for d in users}
sortedusers = [userd.get(o) for o in order]
  

 This is  O(2n) . A solution using  sort  only will be  O(n^3.log(n))  (sort is  nlogn , finding position of every id in list is  O(n^2) ), which is clearly worse for larger lists. For smaller lists (such as 3 items), the low overhead of not creating a new data structure will make it faster; conversely if you keep sorting by new  order  specifications, the overhead of making the new dict will quickly amortise. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15614118)
 Standard Python dictionaries are inherently unordered. However, you could use http://docs.python.org/2/library/collections.html#collections.OrderedDict. It preserves the insertion order, so all you have to do is add the key/value pairs in the desired order: 

  In [4]: collections.OrderedDict(sorted(result.items()))
Out[4]: OrderedDict([('1', 'value1'), ('2', 'value2')])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35078317)
 Make a mapping of 8 to 0, 7 to 1, ..., 11 to 5 using https://docs.python.org/3/library/functions.html#enumerate: 

  >>> order = [8,7,5,9,10,11
>>> list_of_dct = [{'value':11}, {'value':8}, {'value':5},
                   {'value':7}, {'value':10}, {'value':9}
>>> sort_keys = {item: i for i, item in enumerate(order}
>>> sort_keys
{5: 2, 7: 1, 8: 0, 9: 3, 10: 4, 11: 5}
  

 And use it as a sorting key: 

  >>> list_of_dct.sort(key=lambda d: sort_keys.d['value', len(sort_keys
>>> list_of_dct
[{'value': 8}, {'value': 7}, {'value': 5}, {'value': 9},
 {'value': 10}, {'value': 11}
  

 use  sort_keys...  instead of  sort_keys[..  to prevent  KeyError  in case of value is misisng in  order . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35078315)
 Use index of the  order  list to sort-Just try if every dictionary has one value and you want sorting by that value- 

  sorted(list_of_dct,key=lambda x:order.index(x.values()[0]))
  

 But if you have multiple values for one key then change the index (i.e  [0] ) on which you will sort. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/52946283)
 You are looking to sort lists of lists in your dictionary values,  not the order of dictionary keys . For this, you can use a dictionary comprehension: 

  res = {k: sorted(v, key=lambda x: x[1]) for k, v in test_dict.items()}

{'a': [[54, 1, 34], [2, 5, 9], [1, 6, 8]],
 'b': [[2, 1, 9], [54, 2, 34], [1, 3, 8]],
 'c': [[1, 1, 8], [54, 7, 34], [2, 9, 9]]}
  

 For the functional equivalent, you can use  key=operator.itemgetter(1) . In Python 3.6+, your dictionary order should be maintained. Prior to 3.6 dictionaries are unordered and you should not expect any particular ordering of keys. 

 To order by key, you can use https://docs.python.org/3/library/collections.html#collections.OrderedDict: 

  from collections import OrderedDict

res_ordered = OrderedDict(sorted(res.items(), key=lambda x: x[0]))

OrderedDict([('a', [[54, 1, 34], [2, 5, 9], [1, 6, 8]]),
             ('b', [[2, 1, 9], [54, 2, 34], [1, 3, 8]]),
             ('c', [[1, 1, 8], [54, 7, 34], [2, 9, 9]])])
  



