Query: sort a list of lists by a specific index of the inner list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50947068)
  array.sort(key = lambda x:x[1])
  

 You can easily sort using this snippet, where 1 is the index of the element. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/15544861)
 Itemgetter lets you to sort by multiple criteria / columns: 

  sorted_list = sorted(list_to_sort, key=itemgetter(2,0,1))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45920204)
 I think lambda function can solve your problem. 

  old_list = [[0,1,'f'], [4,2,'t'],[9,4,'afsd']]

#let's assume we want to sort lists by last value ( old_list[2] )
new_list = sorted(old_list, key=lambda x: x[2])

#Resulst of new_list will be:

[[9, 4, 'afsd'], [0, 1, 'f'], [4, 2, 't']]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/42996099)
 multiple criteria can also be implemented through lambda function 

  sorted_list = sorted(list_to_sort, key=lambda x: (x[1], x[0]))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40358248)
 This code will work for a list of lists. The internal lists don't have to be the same length. 

 At each level we iterate over a list using  enumerate  to get the list item and its index. At the top level, each item is another list, and the inner loop iterates over each of those lists to get their indices and values, storing the indices (as a tuple) in a tuple that also contains the value. We then sort the resulting list of tuples ( b ) on the values, and then split it using  zip  into a tuple of all the indices and a tuple of the values.   

  from operator import itemgetter

a = [[5, 2], [7, 4], [0, 3]]

b = [((i, j), v) for i, t in enumerate(a) for j, v in enumerate(t)]
b.sort(key=itemgetter(-1), reverse=True)
print(b)
coords, vals = zip(*b)
print(vals)
print(coords)
  

  output  

  [((1, 0), 7), ((0, 0), 5), ((1, 1), 4), ((2, 1), 3), ((0, 1), 2), ((2, 0), 0)]
(7, 5, 4, 3, 2, 0)
((1, 0), (0, 0), (1, 1), (2, 1), (0, 1), (2, 0))
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53876834)
 You can split your 1-dim list into lists of lists - every time a  '\n'  occures you start a new inner list - then sort the inner ones and recombine them: 

  a = ['ot=apple', 'zz=top', 'par=four', 'xyz_test=wff', 'sesh=232d23f23f33ff', 
     '\n', 'xt=cal', 'poss=33', '\n', 'val=fifty', 'dvx=32f23f2', 
     '\n','dsfad=www', 'orr=dsav']

b = '\n'

# partition your data into sublists
stacked = [[]]
for k in a:
    if k == b:
        stacked.append([])
    else:
        stacked[-1].append(k)

# remove empty list at end if present
if not stacked[-1]:
    stacked = stacked[:-1]

# sort each inner list
for sublist in stacked:
    sublist.sort()

# unstack again
retval = []
for k in stacked:
    retval.append(b) # add a \n
    retval.extend(k) # extend with the sublist

# remove the first \n
retval = retval[1:]

print a 
print stacked 
print retval 
  

 Output: 

  # a
['ot=apple', 'zz=top', 'par=four', 'xyz_test=wff', 'sesh=232d23f23f33ff', '\n', 'xt=cal', 
 'poss=33', '\n', 'val=fifty', 'dvx=32f23f2', '\n', 'dsfad=www', 'orr=dsav']

# stacked 
[['ot=apple', 'par=four', 'sesh=232d23f23f33ff', 'xyz_test=wff', 'zz=top'], ['poss=33', 'xt=cal'], 
 ['dvx=32f23f2', 'val=fifty'], ['dsfad=www', 'orr=dsav']]

# retval
['ot=apple', 'par=four', 'sesh=232d23f23f33ff', 'xyz_test=wff', 'zz=top', '\n', 
 'poss=33', 'xt=cal', '\n', 'dvx=32f23f2', 'val=fifty', '\n', 'dsfad=www', 'orr=dsav']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8020413)
  my_list.st(key=lambda x: x[-1])
  

  

  my_list.st(key=operat.itemgetter(-1))
  

 The second option is slightly faster. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21688555)
  def merge_list(a, b):
    d = dict((val[0], set(val[1:])) for val in a)
    result = []
    for val in b:
        k = val[0]
        if k in d:
            match = [x for x in val[1:] if x - 1 in d[k]]
            if match:
                result.append([k] + match)
    return result
  

 Similar to the other answers, this will first convert one of the lists to a dictionary with the first element of each inner list as the key and the remainder of the list as the value.  Then we walk through the other list and if the first element exists as a key in the dictionary, we find all values that meet your criteria using the list comprehension and if there were any, add an entry to the  result  list which is returned at the end. 



