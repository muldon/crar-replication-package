Query: Summarizing a dictionary of arrays in Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43209475)
 Here is a  numpy  solution: 

  import numpy as np

dict(zip(np.ravel(a), np.vstack([b, c]).tolist()))

#{'x': ['x1', 'y1'], 'y': ['x2', 'y2']}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43208764)
 If you want to preserve your arrays: 

  print {k: a for k, a in zip(a[0], [b, c])}
>>> {'y': array([['x2', 'y2']], 
  dtype='|S2'), 'x': array([['x1', 'y1']], 
  dtype='|S2')}
  

  

  print {k: list(a[0]) for k, a in zip(a[0], [b, c])}
>>> {'y': ['x2', 'y2'], 'x': ['x1', 'y1']}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3411081)
 For such a small slice it's not worth using islice 

  sorted(mydict.iteritems(), key=lambda (k,v): sum(v), reverse=True)[:3]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43208725)
 If you actually want  d={'x':['x1','x2'],'y':['y1','y2']}  you can go: 

  d = {i: [j, x] for i,j,x in zip(a,b,c)}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43208594)
  zip  the arrays inside a dictionary comprehension: 

  d = {x: list(*i) for x, i in zip(*a, (b, c))}
  

 or, alternatively: 

  d = {x: [y, z] for x, (y, z) in zip(*a, (*b, *c))}
  

 or, if you like deep unpacking scenarios: 

  d = {x: [y, z] for x, ((y, z),) in zip(*a, (b, c))}
  

 there's quite a number of packing/unpacking combinations to choose from. All these of course produce the same output with the dictionary  d  now being: 

  {'x': ['x1', 'y1'], 'y': ['x2', 'y2']}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/18199003)
 I just realized that http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html  can do it.  

  np.concatenate(dct.values(), axis= 1)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3411052)
 It's easy to do with a sort: 

  sorted(mydict.iteritems(), key=lambda tup: sum(tup[1]), reverse=True)[:3]
  

 This is reasonable if the ratio is similar to this one (3 / 5).  If it's larger, you'll want to avoid the sort (O(n log n)), since top 3 can be done in O(n).  For instance, using http://docs.python.org/library/heapq.html, the heap module: 

  heapq.nlargest(3, mydict.iteritems(), key=lambda tup: sum(tup[1]))
  

 This is O(n + 3 log n), since assembly the initial heap is O(n) and re-heapifying is O(log n). 

 EDIT: If you're using Python 2.7 or later, you can easily convert to a http://docs.python.org/dev/library/collections.html#collections.OrderedDict (http://code.activestate.com/recipes/576693/ for Python 2.4+): 

  OrderedDict(heapq.nlargest(3, mydict.iteritems(), key=lambda tup: sum(tup[1])))
  

  OrderedDict  has the same API as  dict , but remembers insertion order. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33363390)
 If all the values for  level  for each date would be in the same range, you can group based on  date  (using  DataFrame.groupby()  ) and then take  max  for  level  column and then ceil all the values (to the upper bound) , and then convert that series to dictionary using  Series.to_dict()  . Example - 

  df.groupby('date')['level'].first().apply(np.ceil).to_dict()
  

  

  In [44]: df
Out[44]:
          date  hour  level
0   2015-10-27     0   2.50
1   2015-10-27     1   2.50
2   2015-10-27     2   2.50
3   2015-10-27     3   2.50
4   2015-10-28     0   0.00
5   2015-10-28     1   0.00
6   2015-10-28     2   0.00
7   2015-10-28     3   0.00
8   2015-10-28     4   0.00
14  2015-10-29     0   3.23
15  2015-10-29     1   3.23

In [45]: df.groupby('date')['level'].first().apply(np.ceil).to_dict()
Out[45]: {'2015-10-27': 3.0, '2015-10-28': 0.0, '2015-10-29': 4.0}
  

 

 If you want the values in your dictionary as  int  , you can convert the values to  int  before converting to dictionary using  Series.astype()  method. Example - 

  In [46]: df.groupby('date')['level'].first().apply(np.ceil).astype(int).to_dict()
Out[46]: {'2015-10-27': 3, '2015-10-28': 0, '2015-10-29': 4}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/45832195)
 You can use pandas. 

  import pandas as pd

dict1 = {"number of storage arrays": 45, "number of ports":2390}

df = pd.DataFrame(data=dict1, index=[0])

df = (df.T)

print (df)

df.to_excel('dict1.xlsx')
  



