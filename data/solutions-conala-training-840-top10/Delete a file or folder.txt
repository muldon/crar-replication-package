Query: Delete a file or folder
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/28391705)
 If all you want is delete just the  pdf  file you can use the  os.walk  function and  fnmatch.fnmatch  function. 

  import os
from fnmatch import fnmatch

for dirpath, dirnames, filenames in os.walk(os.curdir):
    for file in filenames:
        if fnmatch(file, '*.pdf'):
            os.remove(os.path.join(dirpath, file))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/53316656)
 Try  listdir + remove : 

  import os
for i in os.listdir('directory path'):
    if i.endswith('.pdf'):
        os.remove(i)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/41789397)
 Create a function for you guys. 

  def remove(path):
    """ param <path> could either be relative or absolute. """
    if os.path.isfile(path):
        os.remove(path)  # remove the file
    elif os.path.isdir(path):
        shutil.rmtree(path)  # remove dir and all contains
    else:
        raise ValueError("file {} is not a file or dir.".format(path))
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36694715)
 I have managed to do it in the following way.  My code function is below: 

  @staticmethod
def deleteProjects():
    #projects = os.listdir(os.path.join(ENGINE_DIR, r"scv\Projects"))
    ENGINE_DIR = r"C:\AutoTest\engine"
    projects = os.listdir(os.path.join(ENGINE_DIR, r"scv\Projects"))
    for project in projects:
        logging.error("Project %s not deleted" % project)
        path = os.path.join(os.path.join(ENGINE_DIR, r"scv\Projects"), project)
        print "*** path ***"
        print path
        shutil.rmtree(path)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/49455049)
 shutil.rmtree is the asynchronous function, 
so if you want to check when it complete, you can use while...loop 

  import os
import shutil

shutil.rmtree(path)

while os.path.exists(path):
  pass

print('done')
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/42641792)
 Python syntax to delete a file 

  import os
os.remove("/tmp/<file_name>.txt")
  

  

  import os
os.unlink("/tmp/<file_name>.txt")
  

 Best practice 

 
 First, check whether the file or folder exists or not then only delete that file. This can be achieved in two ways : 
a.  os.path.isfile("/path/to/file")  
b. Use  exception handling.   
 

  EXAMPLE  for  os.path.isfile  

  #!/usr/bin/python
import os
myfile="/tmp/foo.txt"

## If file exists, delete it ##
if os.path.isfile(myfile):
    os.remove(myfile)
else:    ## Show an error ##
    print("Error: %s file not found" % myfile)
  

 Exception Handling</h3>

  #!/usr/bin/python
import os

## Get input ##
myfile= raw_input("Enter file name to delete: ")

## Try to delete the file ##
try:
    os.remove(myfile)
except OSError as e:  ## if failed, report it back to the user ##
    print ("Error: %s - %s." % (e.filename, e.strerror))
  

 RESPECTIVE OUTPUT</h3>

 
Enter file name to delete : demo.txt
Error: demo.txt - No such file or directory.

Enter file name to delete : rrr.txt
Error: rrr.txt - Operation not permitted.

Enter file name to delete : foo.txt
 

 Python syntax to delete a folder</h3>

  shutil.rmtree()
  

 Example for  shutil.rmtree()  

  #!/usr/bin/python
import os
import sys
import shutil

# Get directory name
mydir= raw_input("Enter directory name: ")

## Try to remove tree; if failed show an error using try...except on screen
try:
    shutil.rmtree(mydir)
except OSError as e:
    print ("Error: %s - %s." % (e.filename, e.strerror))
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/37617472)
 This parquet "file" will actually be a directory. https://stackoverflow.com/questions/303200/how-do-i-remove-delete-a-folder-that-is-not-empty-with-python shows how to delete a directory with files in it  

  import shutil
shutil.rmtree('/folder_name')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6615332)
 Using  rmtree  and recreating the folder could work, but I have run into errors when deleting and immediately recreating folders on network drives. 

 The proposed solution using walk does not work as it uses  rmtree  to remove folders and then may attempt to use  os.unlink  on the files that were previously in those folders.  This causes an error. 

 The posted  glob  solution will also attempt to delete non-empty folders, causing errors. 

 I suggest you use: 

  folder_path = '/path/to/folder'
for file_object in os.listdir(folder_path):
    file_object_path = os.path.join(folder_path, file_object)
    if os.path.isfile(file_object_path):
        os.unlink(file_object_path)
    else:
        shutil.rmtree(file_object_path)
  



