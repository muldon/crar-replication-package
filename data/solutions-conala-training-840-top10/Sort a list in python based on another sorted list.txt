Query: Sort a list in python based on another sorted list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5233644)
 Lambda functions are not a Python specific concept, but are a general programming term for anonymous function, i.e. functions without a name. In Python they are commonly used where you need to pass a simple function as a parameter to another function. 

 The  sort  method on lists takes a parameter  key  which is a function that is used to calculate the value the list is sorted on. Imagine you are sorting a list of two element tuples, and you want to sort the list based on the first element. You need to pass a function to  key  which returns the first element.  

  def first_element(x):
    return x[0]
my_list.sort(key=first_element)
  

 or, much more concisely you can do: 

  my_list.sort(key=lambda x: x[0])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46365677)
 You can lookup where each  [0]  element of  A  is located using  .index  in  B   

  >>> sorted(A, key = lambda i: B.index(i[0]))
[[6, 1], [1, 3], [3, 5]]
  

 or in-place sort 

  >>> A.sort(key = lambda i: B.index(i[0]))
>>> A
[[6, 1], [1, 3], [3, 5]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4110705)
 You can pass a  key  function to  sorted  which returns a tuple containing the two things you wish to sort on.  Assuming that your big dictionary is called  d : 

  def keyfunc(tup):
    key, d = tup
    return d["downloads"], d["date"]

items = sorted(d.items(), key = keyfunc)
  

 You can do this with a  lambda  if you prefer, but this is probably more clear.  Here's the equivalent lambda-based code: 

  items = sorted(d.items(), key = lambda tup: (tup[1]["downloads"], tup[1]["date"]))
  

 Incidentally, since you mentioned that you wanted to sort by "downloads" first, the above two examples sort according to download counts in ascending order.  However, from context it sounds like you might want to sort in decreasing order of downloads, in which case you'd say 

  return -d["downloads"], d["date"]
  

 in your  keyfunc .  If you wanted something like sorting in ascending order for non-zero download numbers, then having all zero-download records after that, you could say something like 

  return (-d["downloads"] or sys.maxint), d["date"]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29066554)
 I like having a list of sorted indices. That way, I can sort any list in the same order as the source list. Once you have a list of sorted indices, a simple list comprehension will do the trick: 

      X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
    Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

    sorted_y_idx_list = sorted(range(len(Y)),key=lambda x:Y[x])
    Xs = [X[i] for i in sorted_y_idx_list ]

    print( "Xs:", Xs )
    # prints: Xs: ["a", "d", "h", "b", "c", "e", "i", "f", "g"]
  

 Note that the sorted index list can also be gotten using numpy argsort(). 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40653766)
 List 

  dict = {'Neetu':22,'Shiny':21,'Poonam':23}
print sorted(dict.items())
sv = sorted(dict.values())
print sv
  

  

  d = []
l = len(sv)
while l != 0 :
    d.append(sv[l - 1])
    l = l - 1
print d`
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/36518844)
  In [5]: sorted(unsorted_list, key=presorted_list.index)
Out[5]: ['2C', '2D', '3D', '4D']
  

 or, for better performance (particularly when  len(presorted_list)  is large), 

  In [6]: order = {item:i for i, item in enumerate(presorted_list)}    
In [7]: sorted(unsorted_list, key=order.__getitem__)
Out[7]: ['2C', '2D', '3D', '4D']
  

 For more on how to sort using  key s, see the excellent https://wiki.python.org/moin/HowTo/Sorting/#Key_Functions. 

 

 If  unsorted_list  contains items (such as  '6D' ) not in  presorted_list  then the above methods will raise an error. You first have to decide how you want to sort these items. If you want them placed at the end of the list, you could use  

  In [10]: unsorted_list = ['3D','2C','6D','4D','2D']

In [11]: sorted(unsorted_list, key=lambda x: order.get(x, float('inf')))
Out[11]: ['2C', '2D', '3D', '4D', '6D']
  

 or if you wish to place such items at the front of the list, use 

  In [12]: sorted(unsorted_list, key=lambda x: order.get(x, -1))
Out[12]: ['6D', '2C', '2D', '3D', '4D']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46034972)
 You need to call  list  on the returned  dict_keys  object to cast it into a list which has the  list.sort  method: 

  keys = list(data.keys())
keys.sort()
  

 Or simply call  sorted  directly on the  dict_keys  object to return a sorted list: 

  keys = sorted(data.keys())
  

 On another note, you should dedent this part of the code so the sorting is not done every time a new key is added to the dict, but at the end of the loop.  

 Or simply apply  sorted  on the dict directly if you don't actually need the list of keys: 

  for email in emails.readlines():
    (user, domain) = email.split('@')
    data[domain] = email
print([v for _, v in sorted(data.items(), key=lambda x: x[0])]))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46367552)
 Assuming that  A  and  B  have the same length, each of the first elements of the tuples in  A  corresponds to an element in  B  and there are no duplicates, you can use this: 

  >>> A = [[3,5],[1,3],[6,1]]
>>> B = [6,1,3]
>>> A_ind = {b: [b, a] for (b, a) in A}
>>> [A_ind[b] for b in B]
[[6, 1], [1, 3], [3, 5]]
  

 This simply creates a  dict , mapping the  b  part from  A  to the whole elements and looking up the respective elements in  B  in that  dict . Using neither  sorted  not  index , this has complexity of O(n). 

 If there  can  be duplicate elements, you can create a  dict  (or  defaultdict ) mapping keys to lists of elements having that key: 

  >>> A = [[3,5],[1,3],[6,1],[1,4]]
>>> A_ind = collections.defaultdict(list)
>>> for b, a in A:
...     A_ind[b].append([b,a])
...     
>>> B = [6,1,3,1]
>>> [a for b in B for a in A_ind[b]]
[[6, 1], [1, 3], [1, 4], [3, 5], [1, 3], [1, 4]]
  

 Or turn the  list  into  iter ators to distribute the values in  A  to the matching keys in  B : 

  >>> A_ind = {k: iter(v) for k, v in A_ind.items()}
>>> [next(A_ind[b]) for b in B]
[[6, 1], [1, 3], [3, 5], [1, 4]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/10214043)
 Your example works by creating a new list with the element at index  1  followed by the original tuple for each tuple in the list. .  (3,(1,3))  for the first element. The sorted function sorts by each element starting from index  0  so the list is sorted by the second item. The function then goes through each item in the new list, and returns the orignal tuples. 

 Another way of doing this is by using the  key  parameter in the sorted function which sorts based on the value of the  key . In this case you want the  key  to be the item in each tuple at index  1 . 

  >>> from operator import itemgetter
>>> sorted([(1, 3), (3, 2), (2, 1)],key=itemgetter(1))
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/45246448)
 You can avoid sorting by iterating over the existing, ordered keys in  B : 

 
 Merge list  A  into a single lookup dict 
 Build a new list from the order in  B , using the lookup dict to find the value matching each key 
 

 Code: 

  import itertools

merged_A = {k: v for d in A for k, v in d.items()}
sorted_A = [{k: merged_A[k]} for k in itertools.chain.from_iterable(B)]
# [{'a': 'apple'}, {'e': 'egg'}, {'b': 'ball'}, {'g': 'goal'}, {'f': 'float'}]
  

 

 If required, you can preserve the original dict objects from  A  instead of building new ones: 

  keys_to_dicts = {k: d for d in A for k in d}
sorted_A = [keys_to_dicts[k] for k in itertools.chain.from_iterable(B)]
  



