Query: swap values in a tuple/list inside a list in python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35511458)
 You can use  reversed  like this: 

  tuple(reversed((1, 2)) == (2, 1)
  

 To apply it to a list, you can use  map  or a list comprehension: 

  map(tuple, map(reversed, tuples))     # map
[tuple(reversed(x)) for x in tuples]  # list comprehension
  

 If you're interested primarily in runtime speed, I can only recommend that you profile the various approaches and pick the fastest. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7192720)
  

  x = 'stack'
y = 'exchange'
z = 'overflow'

l = [x, y]
l
['stack', 'exchange']
  

 use python's swap 

  y, z = z, y
  

 but then, you have to re-assign the list 

  l = [x, y]
l

['stack', 'overflow']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13384972)
 You could use map: 

  map (lambda t: (t[1], t[0]), mylist)
  

 Or list comprehension: 

  [(t[1], t[0]) for t in mylist]
  

 List comprehensions are preferred and supposedly much faster than map when lambda is needed, however note that list comprehension has a strict evaluation, that is it will be evaluated as soon as it gets bound to variable, if you're worried about memory consumption use a  generator  instead: 

  g = ((t[1], t[0]) for t in mylist)
#call when you need a value
g.next()
  

 There are some more details here: https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7923553)
  b = a[:][:]  is just  b = (a[:])[:]   a copy of a copy of the iginal list. The lists inside the iginal list are still referenced and when you change them it shows in both lists.   

  

  b = [l[:] f l in a] # a new list, consisting of copies each sublist
  

   

  from copy impt deepcopy
b = deepcopy(a)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37678817)
 You can just use a simple list comprehension to swap (provide you are sure to have an even size) and then join: 

  ''.join([ l[i+1] + l[i] for i in range(0, len(l), 2) ])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46729494)
 Problem 

 Tuples are immutables indeed.  a  might be a list, or even a list of lists. So this code: 

  L = list(a)
  

 won't change anything. The problem appears to be that  a  is a list of lists of tuples.  a[i][j]  is a tuple, and it's not possible to assign new values to it: 

  >>> t = ('a', 'b')
>>> t[0] = 'b'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
  

 Possible solution 

 If you're working with 3-D matrices, http://www.numpy.org/ could probably help you. It supports https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing: 

  >>> import numpy as np
>>> table = np.arange(18).reshape(3,3,2)
>>> table
array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5]],

       [[ 6,  7],
        [ 8,  9],
        [10, 11]],

       [[12, 13],
        [14, 15],
        [16, 17]]])
>>> table[:, :, [0, 1]] = table[:, :, [1, 0]]
>>> table
array([[[ 1,  0],
        [ 3,  2],
        [ 5,  4]],

       [[ 7,  6],
        [ 9,  8],
        [11, 10]],

       [[13, 12],
        [15, 14],
        [17, 16]]])
  

 Elements inside the matrix don't have to be numbers, they could be any objects: 

  >>> class T(str):
...   pass
... 
>>> T('test')
'test'
>>> m = np.array([[(T(1), T(2))],[(T(3), T(4))]])
>>> m[:, :, [0, 1]] = m[:, :, [1, 0]]
>>> m
array([[['2', '1']],

       [['4', '3']]], 
      dtype='<U1')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51999476)
 For tuple assignments, Python uses the stack structure directly: 

  >>> import dis
>>> def abc(a, b):
...     a, b = b, a
... 
>>> dis.dis(abc)
  2           0 LOAD_FAST                1 (b)
              3 LOAD_FAST                0 (a)
              6 ROT_TWO             
              7 STORE_FAST               0 (a)
             10 STORE_FAST               1 (b)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE  
  

 In python, assignments in a target list on the left-hand side are done from left to right.   


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/8392490)
 http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences. 

 http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences are mutable, so convert your  board_state  to a  list  of  list s: 

  >>> board_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
  

 And then use the standard Python idiom for https://stackoverflow.com/questions/2493920/how-to-switch-position-of-two-items-in-a-python-list: 

  >>> board_state[1][1], board_state[2][1] = board_state[2][1], board_state[1][1]
>>> board_state
[[0, 1, 2], [3, 7, 5], [6, 4, 8]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/51999433)
 
   How is a,b = b,a implemented? 
 

 First,  b, a  creates a tuple. You can verify this using e.g. 

  >>> tmp = 1, 2
>>> tmp
(1, 2)
  

 Then, the assignment uses sequence unpacking, overwriting the names a, b. Hence the code is basically 

  >>> tmp = (a, b)
>>> b, a = tmp
  

 
   How do both operations compare in terms of speed? 
 

 This would depend on your implementation of python. If you use CPython (the standard version), then C++ would likely be much faster since it is compiled and optimized. 

 CPython implementation details 

 In CPython, the swap is sometimes optimized. For small swaps (<4 elements) it uses an optimized swap 

  >>> def swap(a, b):
>>>     a, b = b, a
>>> dis.dis(swap)
  3           0 LOAD_FAST                1 (b)
              3 LOAD_FAST                0 (a)
              6 ROT_TWO
              7 STORE_FAST               0 (a)
             10 STORE_FAST               1 (b)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE
>>> def swap(a, b, c):
>>>     a, b, c = c, b, a
>>> dis.dis(swap)
  3           0 LOAD_FAST                2 (c)
              3 LOAD_FAST                1 (b)
              6 LOAD_FAST                0 (a)
              9 ROT_THREE
             10 ROT_TWO
             11 STORE_FAST               0 (a)
             14 STORE_FAST               1 (b)
             17 STORE_FAST               2 (c)
             20 LOAD_CONST               0 (None)
             23 RETURN_VALUE
  

 For swaps of 4 or more elements it does exactly what I wrote above, without optimization. 

  >>> def swap(a, b, c, d):
>>>     a, b, c, d = d, c, b, a
>>> dis.dis(swap)
  3           0 LOAD_FAST                3 (d)
              3 LOAD_FAST                2 (c)
              6 LOAD_FAST                1 (b)
              9 LOAD_FAST                0 (a)
             12 BUILD_TUPLE              4
             15 UNPACK_SEQUENCE          4
             18 STORE_FAST               0 (a)
             21 STORE_FAST               1 (b)
             24 STORE_FAST               2 (c)
             27 STORE_FAST               3 (d)
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE
  



