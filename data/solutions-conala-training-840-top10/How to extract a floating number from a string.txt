Query: How to extract a floating number from a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23787305)
 You can use the following regex to get integer and floating values from a string: 

  re.findall(r'[\d\.\d]+', 'hello -34 42 +34.478m 88 cricket -44.3')

['34', '42', '34.478', '88', '44.3']
  

 Thanks
Rex 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8267633)
  re.findall(r"[-+]?\d*\.\d+|\d+", "Current Level: -13.2 db or 14.2 or 3")
  

 
 

  re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", "Current Level: -13.2 db or 14.2 or 3 or -3")
  

 will also return negative int values (like -3 in the end of this string) 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4703508)
 You may like to try something like this which covers all the bases, including not relying on whitespace after the number: 

  >>> import re
>>> numeric_const_pattern = r"""
...     [-+]? # optional sign
...     (?:
...         (?: \d* \. \d+ ) # .1 .12 .123 etc 9.1 etc 98.1 etc
...         |
...         (?: \d+ \.? ) # 1. 12. 123. etc 1 12 123 etc
...     )
...     # followed by optional exponent part if desired
...     (?: [Ee] [+-]? \d+ ) ?
...     """
>>> rx = re.compile(numeric_const_pattern, re.VERBOSE)
>>> rx.findall(".1 .12 9.1 98.1 1. 12. 1 12")
['.1', '.12', '9.1', '98.1', '1.', '12.', '1', '12']
>>> rx.findall("-1 +1 2e9 +2E+09 -2e-9")
['-1', '+1', '2e9', '+2E+09', '-2e-9']
>>> rx.findall("current level: -2.03e+99db")
['-2.03e+99']
>>>
  

  

  numeric_const_pattern = '[-+]? (?: (?: \d* \. \d+ ) | (?: \d+ \.? ) )(?: [Ee] [+-]? \d+ ) ?'
rx = re.compile(numeric_const_pattern, re.VERBOSE)
rx.findall("Some example: Jr. it. was .23 between 2.3 and 42.31 seconds")
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20135077)
 You can get a string representation pretty easily: 

  >>> '{:.4f}'.format(23.1234567890)
'23.1235'
  

 You can also use the  round  function: 

  >>> round(23.1234567890, 4)
23.1235
  

 Note that if you use  round , the number will almost never be  exactly  to the 4 digits of precision that you want due to the representation of floating point numbers. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4703409)
 If your float is always expressed in decimal notation something like 

  >>> import re
>>> re.findall("\d+\.\d+", "Current Level: 13.4 db.")
['13.4']
  

 . 

 A more robust version would be: 

  >>> re.findall(r"[-+]?\d*\.\d+|\d+", "Current Level: -13.2 db or 14.2 or 3")
['-13.2', '14.2', '3']
  

 If you want to validate user input, you could alternatively also check for a float by stepping to it directly: 

  user_input = "Current Level: 1e100 db"
for token in user_input.split():
    try:
        # if this succeeds, you have your (first) float
        print float(token), "is a float"
    except ValueError:
        print token, "is something else"

# => Would print ...
#
# Current is something else
# Level: is something else
# 1e+100 is a float
# db is something else
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4627407)
 If you render the float as a string, then you can just index the digits you like: 

  str(123.456)[:2]
  

  

  >>> str(123.456)[:2]
'12'
>>>
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18177329)
 Here is a simple regular expression to find floating point numbers. 

<pre class="lang-js prettyprint-override"> /[-+][0-9]*\.[0-9]+/
  

 http://regexpal.com/flags=g&regex=%5b-%2B%5d%3F%5b0-9%5d%2a.%3F%5b0-9%5d%2B&input=%5bsomeString%20xpos%3D1024.0%20ypos%3D768.0%20someotherString%5d 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18237992)
 https://docs.python.org/3/library/re.html#simulating-scanf has an answer that covers +/-, and exponent notation 

  scanf() Token      Regular Expression
%e, %E, %f, %g     [-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?
%i                 [-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)
  

 This regular expression does not support international formats where a comma is used as the separator character between the whole and fractional part (3,14159).
In that case, replace all  \.  with  [.,]  in the above float regex. 

                          Regular Expression
International float     [-+]?(\d+([.,]\d*)?|[.,]\d+)([eE][-+]?\d+)?
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4627455)
 If you want to do it a "mathy" way, you could also divide by 1e<number of digits to strip>. For example: 

 
>>> int(123.456 / 1e1) # 1e1 == 10
12
>>> int(123.456 / 1e2) # 1e2 == 100
1
>>> int(123.456 / 1e-1) # 1e-1 == 0.1
1234
 

 This will be much faster than converting float -> string -> int, but will not always behave exactly the same way as the string method above (eg,  int(1.2 / 1e1)  will be  0 , not  '1.' ). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2663623)
 It appears there is no built-in string formatting trick which allows you to (1) print floats whose first significant digit appears after the 15th decimal place and (2) not in scientific notation. So that leaves manual string manipulation. 

 Below I use the  decimal  module to extract the decimal digits from the float.
The  float_to_decimal  function is used to convert the float to a  Decimal  object. The obvious way  decimal.Decimal(str(f))  is wrong because  str(f)  can lose significant digits. 

  float_to_decimal  was lifted from the http://docs.python.org/library/decimal.html#decimal-faq. 

 Once the decimal digits are obtained as a tuple of ints, the code below does the obvious thing: chop off the desired number of sigificant digits, round up if necessary, join the digits together into a string, tack on a sign, place a decimal point and zeros to the left or right as appropriate.  

 At the bottom you'll find a few cases I used to test the  f  function. 

  import decimal

def float_to_decimal(f):
    # http://docs.python.org/library/decimal.html#decimal-faq
    "Convert a floating point number to a Decimal with no loss of information"
    n, d = f.as_integer_ratio()
    numerator, denominator = decimal.Decimal(n), decimal.Decimal(d)
    ctx = decimal.Context(prec=60)
    result = ctx.divide(numerator, denominator)
    while ctx.flags[decimal.Inexact]:
        ctx.flags[decimal.Inexact] = False
        ctx.prec *= 2
        result = ctx.divide(numerator, denominator)
    return result 

def f(number, sigfig):
    # http://stackoverflow.com/questions/2663612/nicely-representing-a-floating-point-number-in-python/2663623#2663623
    assert(sigfig>0)
    try:
        d=decimal.Decimal(number)
    except TypeError:
        d=float_to_decimal(float(number))
    sign,digits,exponent=d.as_tuple()
    if len(digits) < sigfig:
        digits = list(digits)
        digits.extend([0] * (sigfig - len(digits)))    
    shift=d.adjusted()
    result=int(''.join(map(str,digits[:sigfig])))
    # Round the result
    if len(digits)>sigfig and digits[sigfig]>=5: result+=1
    result=list(str(result))
    # Rounding can change the length of result
    # If so, adjust shift
    shift+=len(result)-sigfig
    # reset len of result to sigfig
    result=result[:sigfig]
    if shift >= sigfig-1:
        # Tack more zeros on the end
        result+=['0']*(shift-sigfig+1)
    elif 0<=shift:
        # Place the decimal point in between digits
        result.insert(shift+1,'.')
    else:
        # Tack zeros on the front
        assert(shift<0)
        result=['0.']+['0']*(-shift-1)+result
    if sign:
        result.insert(0,'-')
    return ''.join(result)

if __name__=='__main__':
    tests=[
        (0.1, 1, '0.1'),
        (0.0000000000368568, 2,'0.000000000037'),           
        (0.00000000000000000000368568, 2,'0.0000000000000000000037'),
        (756867, 3, '757000'),
        (-756867, 3, '-757000'),
        (-756867, 1, '-800000'),
        (0.0999999999999,1,'0.1'),
        (0.00999999999999,1,'0.01'),
        (0.00999999999999,2,'0.010'),
        (0.0099,2,'0.0099'),         
        (1.999999999999,1,'2'),
        (1.999999999999,2,'2.0'),           
        (34500000000000000000000, 17, '34500000000000000000000'),
        ('34500000000000000000000', 17, '34500000000000000000000'),  
        (756867, 7, '756867.0'),
        ]

    for number,sigfig,answer in tests:
        try:
            result=f(number,sigfig)
            assert(result==answer)
            print(result)
        except AssertionError:
            print('Error',number,sigfig,result,answer)
  



