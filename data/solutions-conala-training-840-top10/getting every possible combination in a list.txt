Query: getting every possible combination in a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37268061)
 You are looking for  permutations  of any length.  

  import itertools
...
c = []
for i in range(len(beers)):
    c.extend(itertools.permutations(beers, i + 1))
print(c)
  

  

  [([1, 10],), ([2, 7],), ([3, 9],), ([1, 10], [2, 7]), ([1, 10], [3, 9]),
 ([2, 7], [1, 10]), ([2, 7], [3, 9]), ([3, 9], [1, 10]), ([3, 9], [2, 7]), 
 ([1, 10], [2, 7], [3, 9]), ([1, 10], [3, 9], [2, 7]), ([2, 7], [1, 10], [3, 9]), 
 ([2, 7], [3, 9], [1, 10]), ([3, 9], [1, 10], [2, 7]), ([3, 9], [2, 7], [1, 10])]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/37268096)
 You could combine https://docs.python.org/2/library/itertools.html#itertools.permutations with https://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable: 

  >>> from itertools import permutations, chain
>>> beers = ['speights', 'tui', 'export']
>>> list(chain.from_iterable(permutations(beers, i) for i in xrange(1, len(beers) + 1)))
[('speights',), ('tui',), ('export',), ('speights', 'tui'), ('speights', 'export'), ('tui', 'speights'), ('tui', 'export'), ('export', 'speights'), ('export', 'tui'), ('speights', 'tui', 'export'), ('speights', 'export', 'tui'), ('tui', 'speights', 'export'), ('tui', 'export', 'speights'), ('export', 'speights', 'tui'), ('export', 'tui', 'speights')]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/5106605)
 you can also do it as a generator: 

  L1=['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse']
tuples = [(x,y) for x in L1 for y in L1 if x != y]
for entry in tuples:
    if (entry[1], entry[0]) in tuples:
        tuples.remove((entry[1],entry[0]))
for pair in tuples:
    input1= open('file_%s'%(pair[0]), 'r')
    file1= pickle.load(input1)
    input2= open('file_%s'%(pair[1]), 'r')
    file2= pickle.load(input2)
  

 After the first loop, the contents of  tuples  is: 

  ('cat', 'dog')
('cat', 'fish')
('cat', 'rabbit')
('cat', 'horse')
('cat', 'bird')
('cat', 'frog')
('cat', 'mouse')
('dog', 'fish')
('dog', 'rabbit')
('dog', 'horse')
('dog', 'bird')
('dog', 'frog')
('dog', 'mouse')
('fish', 'rabbit')
('fish', 'horse')
('fish', 'bird')
('fish', 'frog')
('fish', 'mouse')
('rabbit', 'horse')
('rabbit', 'bird')
('rabbit', 'frog')
('rabbit', 'mouse')
('horse', 'bird')
('horse', 'frog')
('horse', 'mouse')
('bird', 'frog')
('bird', 'mouse')
('frog', 'mouse')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1385935)
 If you have python 2.6, why not use http://docs.python.org/library/itertools.html#itertools.combinations? 

  from itertools import combinations
combinations(range(10), 4)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1386207)
 Take a look at http://docs.python.org/library/itertools.html: 

  >>> from itertools import combinations, permutations, product
>>> def pp(chunks):
...     print(' '.join(map(''.join, chunks)))
...
>>> pp(combinations('012', 2))
01 02 12
>>> pp(permutations('012', 2))
01 02 10 12 20 21
>>> pp(product('012', repeat=2))
00 01 02 10 11 12 20 21 22
>>> from itertools import combinations_with_replacement
>>> pp(combinations_with_replacement('012', 2))
00 01 02 11 12 22
  

 http://docs.python.org/dev/library/itertools.html#itertools.combinations_with_replacement is available in Python 3.1 (or 2.7). 

 It seems that http://docs.python.org/library/itertools.html#itertools.product is the most suitable for your task. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5106330)
 How about http://docs.python.org/library/itertools.html#itertools.combinations? 

 Usage example: 

  >>> list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))
[(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4),
(3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]
  

 First argument is an iterable, second is  r , length of subsequences returned. 

 You can then concatenate the results with ease using map or a comprehension: 

  map(lambda x: x[0] + "_" + x[1], itertools.combinations(["cat", "dog", "fish"], 2)))
  

  x  in the lambda is a  r -sized tuple.  

 Result of the above would be: 

  ['cat_dog', 'cat_fish', 'dog_fish']
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/14692100)
 Use http://docs.python.org/2/library/itertools.html#itertools.product: 

  for combo in itertools.product(self.data1, self.data2, self.data3, self.data4):
    # combo is a tuple of 4 characters.
  

  

  for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    # combo is a tuple of 4 characters.
  

  

  >>> import itertools                                                                                                                >>> d = {'1': ['a', 'd', 'e', 'l', 's'], '2': ['s', 'i', 'r', 't', 'n'], '3': ['b', 'o', 'e', 'm', 'k'], '4': ['f', 'y', 'u', 'n', 'g'] }
>>> for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
...     print ''.join(combo)
... 
asbf
asby
asbu
asbn
asbg
asof
asoy
asou
ason
asog
asef

...

snkf
snky
snku
snkn
snkg
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/4359094)
 http://docs.python.org/library/itertools.html#itertools.product 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/5106348)
 In reality what you're asking how to do is produce all combinations of  two  items taken in the list of names (as opposed to  all  the possible combination of them).  

 That means you can use the built-in https://docs.python.org/3/library/itertools.html#itertools.combinations generator function to easily (and efficiently) generate pairs of the names you want with no repeats: 

  L1 = ['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse']

for pair in combinations(L1, 2):
    print(pair)
    input1 = open('file_%s' % pair[0], 'r')
    input2 = open('file_%s' % pair[1], 'r')
  

 Pairs processed: 

<pre class="lang-none prettyprint-override"> ('cat', 'dog')
('cat', 'fish')
('cat', 'rabbit')
('cat', 'horse')
('cat', 'bird')
('cat', 'frog')
('cat', 'mouse')
('dog', 'fish')
('dog', 'rabbit')
('dog', 'horse')
('dog', 'bird')
('dog', 'frog')
('dog', 'mouse')
('fish', 'rabbit')
('fish', 'horse')
('fish', 'bird')
('fish', 'frog')
('fish', 'mouse')
('rabbit', 'horse')
('rabbit', 'bird')
('rabbit', 'frog')
('rabbit', 'mouse')
('horse', 'bird')
('horse', 'frog')
('horse', 'mouse')
('bird', 'frog')
('bird', 'mouse')
('frog', 'mouse')
  



