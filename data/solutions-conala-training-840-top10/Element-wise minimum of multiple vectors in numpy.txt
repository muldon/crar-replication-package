Query: Element-wise minimum of multiple vectors in numpy
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/39277693)
 Convert to NumPy array and perform http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.min.html along the first axis - 

  np.asarray(V).min(0)
  

 Or simply use http://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html as under the hoods, it will convert the input to an array before finding the minimum along that axis - 

  np.amin(V,axis=0)
  

  

  In [52]: v1 = [2,5]

In [53]: v2 = [4,5]

In [54]: v3 = [4,4]

In [55]: v4 = [1,4]

In [56]: V = [v1, v2, v3, v4]

In [57]: np.asarray(V).min(0)
Out[57]: array([1, 4])

In [58]: np.amin(V,axis=0)
Out[58]: array([1, 4])
  

 If you need to final output as a list, append the output with http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tolist.html. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/39279912)
  *V  works if  V  has only 2 arrays.   np.minimum  is a  ufunc  and takes 2 arguments. 

 As a  ufunc  it has a  .reduce  method, so it can apply repeated to a list inputs. 

  In [321]: np.minimum.reduce([np.arange(3), np.arange(2,-1,-1), np.ones((3,))])
Out[321]: array([ 0.,  1.,  0.])
  

 I suspect the  np.min  approach is faster, but that could depend on the array and list size. 

  In [323]: np.array([np.arange(3), np.arange(2,-1,-1), np.ones((3,))]).min(axis=0)
Out[323]: array([ 0.,  1.,  0.])
  

 The  ufunc  also has an  accumulate  which can show us the results of each stage of the reduction.  Here's it's not to interesting, but I could tweak the inputs to change that. 

  In [325]: np.minimum.accumulate([np.arange(3), np.arange(2,-1,-1), np.ones((3,))])
     ...: 
Out[325]: 
array([[ 0.,  1.,  2.],
       [ 0.,  1.,  0.],
       [ 0.,  1.,  0.]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49419982)
 You are looking for an element-wise  min . The builtin  min  function only works for a single iterable, not multiple of them at a time. 

 What you're looking for is something along these lines, using  np.minimum . 

  v = np.minimum(df['sPort'], df['dPort'])
df['svc_port'] = np.where(v <= 1024, v, df['dPort'])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/32009706)
 you can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.minimum.html to find the element-wise minimum of an array 

  import numpy as np
df["new_col"] = df["col1"] - np.minimum(0,df["col2"])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53132373)
  EDIT:  As question has been updated I had to update too: 

 You have to align matrices first to be able to make an element-wise matrix operation without using any loop: 

      import numpy as np

    a = [
         [1,2,3],
         [4,5,6],
         [7,8,9],
         [10,11,12]
         ]

    weights = [
               [1,3,3], 
               [2,2,2],
               [3,1,1]
              ]

    w_s = np.array( (4 * [weights[0]], 4 * [weights[1]], 4 * [weights[2]]) )
    a_s = np.array(3 * [a])

result_matrix1 = w_s * a_s[0]
result_matrix2 = w_s * a_s[1]
result_matrix3 = w_s * a_s[2]

print(result_matrix1)
print(result_matrix2)
print(result_matrix3)
  

  Output:   

  [[[ 1  6  9]
  [ 4 15 18]
  [ 7 24 27]
  [10 33 36]]

 [[ 2  4  6]
  [ 8 10 12]
  [14 16 18]
  [20 22 24]]

 [[ 3  2  3]
  [12  5  6]
  [21  8  9]
  [30 11 12]]]
[[[ 1  6  9]
  [ 4 15 18]
  [ 7 24 27]
  [10 33 36]]

 [[ 2  4  6]
  [ 8 10 12]
  [14 16 18]
  [20 22 24]]

 [[ 3  2  3]
  [12  5  6]
  [21  8  9]
  [30 11 12]]]
[[[ 1  6  9]
  [ 4 15 18]
  [ 7 24 27]
  [10 33 36]]

 [[ 2  4  6]
  [ 8 10 12]
  [14 16 18]
  [20 22 24]]

 [[ 3  2  3]
  [12  5  6]
  [21  8  9]
  [30 11 12]]]
  

 The solution is  numpy , but you can do it with  pandas  as well, if you prefer it, of course. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46088173)
   

  import numpy as np

smax = np.minimum(s1, s2)
  

 https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.minimum.html 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/41579511)
 Use https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html  - 

  np.einsum('ijk,ik->ij',matrices,vectors)
  

 Steps : 

 1) Keep the first axes aligned. 

 2) Sum-reduce the last axes from the input arrays against each other. 

 3) Let the remainining axes(second axis from  matrices ) be element-wise multiplied. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41270838)
 Using numpy's https://docs.scipy.org/doc/numpy/reference/generated/numpy.minimum.html function which does element-wise minimum of array elements.    

  numpy.minimum(a, b)
  



