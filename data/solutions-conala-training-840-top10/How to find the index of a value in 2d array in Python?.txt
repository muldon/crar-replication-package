Query: How to find the index of a value in 2d array in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/27175491)
 You can use http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html to return a tuple of arrays of x and y indices where a given condition holds in an array. 

 If  a  is the name of your array: 

  >>> np.where(a == 1)
(array([0, 0, 1, 1]), array([0, 1, 2, 3]))
  

 If you want a list of (x, y) pairs, you could  zip  the two arrays: 

  >>> zip(*np.where(a == 1))
[(0, 0), (0, 1), (1, 2), (1, 3)]
  

 Or, even better, @jme points out that  np.asarray(x).T  can be a more efficient way to generate the pairs. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/47856209)
 You are looking for the index with the maximum value along the first axis: 

  >>> a.argmax(axis=1)
array([2, 2, 2, 1, 1, 1, 1, 0])
  

 
    a.argmax(axis=None, out=None)  
  
   Return indices of the maximum values along the given axis. 
 

 If the other values are not necessarily less than one, filter for  1  first.
This gives an array of  True  and  False  values. Now, use  argmax() : 

  >>> (a == 1).argmax(axis=1)
array([2, 2, 2, 1, 1, 1, 1, 0])
  

  True  acts like a  1  and  False  like a  0 , because  bool  inherits from  int . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44171154)
 Compare b and a element wise, and then find the first True value index for each row, or set to nan if all False. 

  np.where(np.sum(b==a[:,None],1) > 0, np.argmax(b==a[:,None],1), np.nan)
Out[22]: array([ nan,   2.,  nan])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53470929)
 You want https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.unravel_index.html. The https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.argmax.html will return an index as if the flattened version of array is traversed. The  unravel_index  will give you the  N-D  indices. 

  a = np.random.randint(0, 10, (4,4))
ind = np.unravel_index(np.argmax(a, axis=None), a.shape)  # returns a tuple
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/51122495)
 With  

 https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.argpartition.html#numpy.argpartition, https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html and https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html routines: 

 Test ndarray  arr  is a shuffled array with values  0  to  99  of shape  (11, 9) . 
Let's say we want to find the list of 2d indices of top 7 largest values: 

  In [1018]: arr
Out[1018]: 
array([[36, 37, 38, 39, 40, 41, 42, 43, 44],
       [27, 28, 29, 30, 31, 32, 33, 34, 35],
       [72, 73, 74, 75, 76, 77, 78, 79, 80],
       [ 0,  1,  2,  3,  4,  5,  6,  7,  8],
       [18, 19, 20, 21, 22, 23, 24, 25, 26],
       [45, 46, 47, 48, 49, 50, 51, 52, 53],
       [ 9, 10, 11, 12, 13, 14, 15, 16, 17],
       [90, 91, 92, 93, 94, 95, 96, 97, 98],
       [54, 55, 56, 57, 58, 59, 60, 61, 62],
       [63, 64, 65, 66, 67, 68, 69, 70, 71],
       [81, 82, 83, 84, 85, 86, 87, 88, 89]])

In [1019]: top_N = 7

In [1020]: idx = np.argpartition(arr, arr.size - top_N, axis=None)[-top_N:]

In [1021]: result = np.column_stack(np.unravel_index(idx, arr.shape))

In [1022]: result
Out[1022]: 
array([[7, 2],
       [7, 3],
       [7, 4],
       [7, 5],
       [7, 7],
       [7, 8],
       [7, 6]])
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26373897)
 Once you use  np.argmax(x)  to get  7  you can then do this: 

  >>> np.unravel_index(np.argmax(x), x.shape)
(1, 3)
  

 This converts the flat index back a 2D one, and you can easily see which row it is. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36462044)
 Try something like : 

  def find(value, array):
    for l in array:
        if l[0]==value:
            return l
  

  

  array[list(zip(*array))[0].index(value)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17792681)
 You can use the following: 

  import numpy as np

a = np.array([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ]
)

print a.compress(a.sum(0) > 15, 1)

[[3]
 [6]
 [9]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/41161969)
 Seems like a good setup to use https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html as we can  force  it to be  3D  and then simply slice the m-th index along the last axis, like so - 

  np.atleast_3d(A)[...,m] # Or np.atleast_3d(A)[:,:,m]
  

 It's still a view into the array, so no efficiency lost there! 

  Case runs  

 1) 2D : 

  In [160]: A = np.random.randint(11,99,(4,5))

In [161]: np.atleast_3d(A)[...,0]
Out[161]: 
array([[13, 84, 38, 15, 26],
       [64, 91, 29, 11, 48],
       [25, 66, 77, 14, 87],
       [59, 96, 98, 30, 88]])

In [162]: A
Out[162]: 
array([[13, 84, 38, 15, 26],
       [64, 91, 29, 11, 48],
       [25, 66, 77, 14, 87],
       [59, 96, 98, 30, 88]])
  

 2) 3D : 

  In [163]: A = np.random.randint(11,99,(4,3,5))

In [164]: np.atleast_3d(A)[...,1]
Out[164]: 
array([[34, 81, 66],
       [56, 20, 25],
       [45, 36, 64],
       [82, 64, 31]])

In [165]: A[:,:,1]
Out[165]: 
array([[34, 81, 66],
       [56, 20, 25],
       [45, 36, 64],
       [82, 64, 31]])
  



