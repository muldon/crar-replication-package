Query: delete a list element by value
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32298308)
 This example is fast and will delete all instances of a value from the list: 

  a = [1,2,3,1,2,3,4]
while True:
    try:
        a.remove(3)
    except:
        break
print a
>>> [1, 2, 1, 2, 4]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43229928)
 We can also use . 

  >>> lst = [23,34,54,45]
>>> remove_element = 23
>>> if remove_element in lst:
...     lst.pop(lst.index(remove_element))
... 
23
>>> lst
[34, 54, 45]
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/15692408)
 If you know what value to delete, here's a simple way (as simple as I can think of, anyway): 

  a = [0, 1, 1, 0, 1, 2, 1, 3, 1, 4]
while a.count(1) > 0:
    a.remove(1)
  

 You'll get
 [0, 0, 2, 3, 4]  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2793341)
 To remove an element's first occurrence in a list, simply use  list.remove : 

  >>> a = ['a', 'b', 'c', 'd']
>>> a.remove('b')
>>> print a
['a', 'c', 'd']
  

 Mind that it does not remove all occurrences of your element. Use a list comprehension for that. 

  >>> a = [10, 20, 30, 40, 20, 30, 40, 20, 70, 20]
>>> a = [x for x in a if x != 20]
>>> print a
[10, 30, 40, 30, 40, 70]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43813812)
  

  def cleaner(seq, value):    
    temp = []                      
    for number in seq:
        if number != value:
            temp.append(number)
    return temp
  

 And if you want to remove some, but not all: 

  def cleaner(seq, value, occ):
    temp = []
    for number in seq:
        if number == value and occ:
            occ -= 1
            continue
        else:
            temp.append(number)
    return temp
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2793348)
 Finding a value in a list and then deleting that index (if it exists) is easier done by just using list's remove method: 

  >>> a = [1, 2, 3, 4]
>>> try:
...   a.remove(6)
... except ValueError:
...   pass
... 
>>> print a
[1, 2, 3, 4]
>>> try:
...   a.remove(3)
... except ValueError:
...   pass
... 
>>> print a
[1, 2, 4]
  

 If you do this often, you can wrap it up in a function: 

  def remove_if_exists(L, value):
  try:
    L.remove(value)
  except ValueError:
    pass
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53447210)
  

  a.remove('b') if 'b' in a else None
  

 sometimes it usefull 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2793345)
  

  a=[1,2,3,4]
if 6 in a:
    a.remove(6)
  

 but above need to search 6 in list a 2 times, so try except would be faster 

  try:
    a.remove(6)
except:
    pass
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35672179)
 Keep in mind that np.delete(arr, ind) deletes the element at index  ind  NOT the one with that value.   

 This means that as you delete things, the array is getting shorter.  

  values = [0,1,2,3,4,5]
np.delete(values, 3) 
[0,1,2,4,5]  #deleted element 3 so now only 5 elements in the list
#tries to delete the element at the fifth index but the array indices only go from 0-4
np.delete(values, 5) 
  

 One of the ways you can solve the problem is to sort the indices that you want to delete in descending order (if you really want to delete the array). 

  inds_to_delete = sorted([3,1,5], reverse=True) # [5,3,1]
# then delete in order of largest to smallest ind
  

  

  inds_to_keep = np.array([0,2,4])
values = values[inds_to_keep]
  



