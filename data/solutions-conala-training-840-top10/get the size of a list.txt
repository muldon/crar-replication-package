Query: get the size of a list
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13298512)
  import os
from os.path import join, getsize

file_list = []
for root, dirs, files in os.walk('Test'):
    file_list.extend( join(root,f) for f in files )
    #May be *slightly* faster at the expense of a little readability 
    # and a little memory
    # file_list.extend( [ join(root,f) for f in files ] ) 


print (sorted(file_list, key=getsize))
  

 And the same thing for  dirs  -- Although I'm not really sure what the "size" of a directory actually is -- You probably can't sort that one with  getsize  (and if you can, you won't get a result that is meaningful). 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20938494)
 I'd use python's  itertools , but if you had to implement this yourself, here's code that returns all permutations of a specified size for a list of values. 

 Example:  values = [1,2,3] ,  size = 2  =>  [[3, 2], [2, 3], [2, 1], [3, 1], [1, 3], [1, 2]]  

  def permutate(values, size):
  return map(lambda p: [values[i] for i in p], permutate_positions(len(values), size))

def permutate_positions(n, size):
  if (n==1):
    return [[n]]

  unique = []
  for p in map(lambda perm: perm[:size], [ p[:i-1] + [n-1] + p[i-1:] for p in permutate_positions(n-1, size) for i in range(1, n+1) ]):
    if p not in unique:
      unique.append(p)

  return unique
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20112630)
  >>> a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
>>> b = [ a[i:i+10] for i in range(0,len(a),10) ]
>>> b
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23]]
  

 . To change chunks (say for size =  chunk_size , you'd have to change  a[i:i+chunk_size]  and change range to  range(0,len(a),chunk_size)  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46826785)
 Simply  list(var.size()) , e.g.: 

  >>> import torch
>>> from torch.autograd import Variable
>>> from torch import IntTensor
>>> var = Variable(IntTensor([[1,0],[0,1]]))

>>> var
Variable containing:
 1  0
 0  1
[torch.IntTensor of size 2x2]

>>> var.size()
torch.Size([2, 2])

>>> list(var.size())
[2, 2]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/10560298)
 I output the directories in a dictionary instead of a list, but see if you like it: 

  def get_files(target):
    # Get file size and modified time for all files from the target directory and down.
    # Initialize files list
    filelist = []
    dirdict = {}
    # Walk the directory structure
    for root, dirs, files in os.walk(target):
        # Do not walk into directories that are mount points
        dirs[:] = filter(lambda dir: not os.path.ismount(os.path.join(root, dir)), dirs)
        for name in files:
            # Construct absolute path for files
            filename = os.path.join(root, name)
            # Test the path to account for broken symlinks
            if os.path.exists(filename):
                # File size information in bytes
                size = float(os.path.getsize(filename))
                # Get the modified time of the file
                mtime = os.path.getmtime(filename)
                # Create a tuple of filename, size, and modified time
                construct = filename, size, str(datetime.datetime.fromtimestamp(mtime))
                # Add the tuple to the master filelist
                filelist.append(construct)
                if root in dirdict.keys():
                    dirdict[root] += size
                else:
                    dirdict[root] = size
    return(filelist, dirdict)
  

 If you want the dirdict as a list of tuples, just do this: 

  dirdict.items()
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47785259)
 Python does not grow the list one by one.  It always allocates large chunks. The chunk size is dependent on the size of the list. So the pre-allocated space gets bigger when the list get bigger. 

 For example, if you do 10 million appends, it does about 100 allocation, i.e. steps growing the list. 

 If you start with an empty list and grow it by appending one element at a time you get this steps the actually allocate new memory: 

   list size:  allocations
        10:   3
       100:  10
      1000:  27
     10000:  46
    100000:  65
   1000000:  85
  10000000: 104
  

 MATLAB array are more comparable to NumPy arrays. These array are fixed in size an growing them step-by-step is very expensive. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19862590)
  

  >>> size = [4]
>>> a = ('nadav', 3, size)
>>> size = [3]
>>> a
('nadav', 3, [4])
  

 What you are doing is assinging a  new list  to  size  while  a  will still point to the old list. You have to modify the existing list instead: 

  >>> size = [4]
>>> a = ('nadav', 3, size)
>>> size[:] = [3]
>>> a
('nadav', 3, [3])
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/855455)
 According to the https://svn.python.org/projects/python/trunk/Objects/listobject.c?revision=69227&view=markup, the maximum size of a list is  PY_SSIZE_T_MAX/sizeof(PyObject*) . 

  PY_SSIZE_T_MAX  is defined in https://svn.python.org/projects/python/trunk/Include/pyport.h?revision=70489&view=markup to be  ((size_t) -1)>>1  

 On a regular 32bit system, this is (4294967295 / 2) / 4  or 536870912. 

 Therefore the maximum size of a python list on a 32 bit system is  536,870,912  elements.  

 As long as the number of elements you have is equal or below this, all list functions should operate correctly. 



