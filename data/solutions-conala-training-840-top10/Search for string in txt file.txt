Query: Search for string in txt file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13499045)
 In regular expression, a  .  signifies any single character. Use  \. . 

  if re.search('\.txt', line):
   print(re.sub("11", "12", line), end='')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/28817064)
 You can use  re.search  function to search for a string 

  foo = """['306\n', '303\n', '313\n', '323\n', '417\n', '281\n', '304\n', '322\n', '320\n', '319\n', '308\n', '310\n', '414\n', '415\n', '314\n', '312\n', '307\n', '305\n', '285\n', '286\n', '318\n', '283\n', '282\n', '294\n', '309\n', '416\n', '418\n', '321\n', '185\n']"""

sid = '185'
a = sid + '\n'

if re.search(a,foo):
     print "its here"
else:
     print "its not here"
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45981333)
 You can use  with  statement to open a file safely and read each line with a  readlines  method.  readlines  returns a list of string. 

 Below code should work in your case: 

  import sys
import re

with open('desktop/trail.txt', 'r') as f:
    for line in f.readlines():
        line = line_string.rstrip()
        date = re.search(r'date=[0-9]+\-[0-9]+\-[0-9]+', line)
        date = date.group()
        print date
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5791515)
 Do you  have  to do it in Python? Otherwise, simply  grep -l "string" *.txt *.log  would work. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/44271165)
 No need for regex for this solution - you don't need to bring a cannon to a thumb-fight. Use Python's native string search/check: 

  file_list = ["file1.zip", "file1.txt"]
file_prefix = "file1"
file_exclude = "zip"

result = [e for e in file_list if e.startswith(file_prefix) and not e.endswith(file_exclude)]
# ['file1.txt']
  

 . 

 If you don't want to search for edges only and you want to filter out only entries that don't have the  zip  suffix after the  file_prefix  no matter where it is in the string (so you want to match  some_file1.txt , or even  a_zip_file1.txt , but not  file1_zip.txt ) you can slightly modify it: 

  file_list = ["file1.zip", "file1.txt", "some_file1.txt", "a_zip_file1.txt", "file1_zip.txt"]
file_prefix = "file1"
file_exclude = "zip"

result = [e for e in file_list if e.find(file_exclude) < e.find(file_prefix)]
# ['file1.txt', 'some_file1.txt', 'a_zip_file1.txt']
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8234662)
 Use  search  instead of  findall : 

  number = re.search(r'\d+', filename).group()
  

 Alternatively: 

  number = filter(str.isdigit, filename)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/17841092)
 The tool  normally  used for things like this is grep. So, let's do the same except in Python. 

  with open('file.text', 'r') as fp:
  for line in fp:
    match = re.search('string=([^,]+)', line)
    if match:
      print match.group(1)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/22864025)
 The  re.search()  call compiles your pattern and  also  interprets the backslashed expressions. Use  re.escape()  to prevent that: 

  if re.search(re.escape(substring), line):
  

 Better still, don't use  re.search()  at all, you are looking for literal text here so a simple membership test should do: 

  if substring in line:
  



