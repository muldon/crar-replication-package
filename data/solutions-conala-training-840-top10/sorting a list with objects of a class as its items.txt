Query: sorting a list with objects of a class as its items
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17038995)
 One way is to define in your class the  __lt__()  and  __eq__() methods, which will tell Python how one instance of your class should be sorted when compared to another: 

  class A():
    def __init__(self):
        self.sortattr = 'anniversary_score' # you can use 'baby_score', 'birthday_score' instead
    def __lt__(self, other):
        return getattr(self, self.sortattr) < getattr(other, other.sortattr)
    def __eq__(self, other):
        return getattr(self, self.sortattr) == getattr(other, other.sortattr)
  

 Then, just use  sort()  as you do for a list of numbers, strings etc: 

   mylist.sort() # to sort in-place

 sorted(mylist)  # to return a new sorted list
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17038658)
  your_list.sort(key = lambda x : x.anniversary_score)
  

 or if the attribute name is a string then you can use : 

  import operator
your_list.sort(key=operator.attrgetter('anniversary_score'))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53522215)
 While dictionaries are insertion-ordered in Python 3.6 (as an implementation detail) and officially in 3.7+, for a robust ordered dictionary use https://docs.python.org/3/library/collections.html#collections.OrderedDict: 

  from collections import OrderedDict

res = OrderedDict(sorted(d.items(), key=lambda x: x[1].count))
  

  OrderedDict  is a subclass of  dict , so you should lose no functionality. 

 If such an ordering is  natural  or  typical  to your class objects, consider defining  __eq__  and  __lt__  methods to your class https://stackoverflow.com/a/48731059/9209546 and then use: 

  from operator import itemgetter

res = OrderedDict(sorted(d.items(), key=lambda x: x[1]))
res = OrderedDict(sorted(d.items(), key=itemgetter(1)))  # functional equivalent
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/53521313)
 To sort the values of a dictionary, you can do the following: 

  sorted_values = sorted(dict.values(), key=lambda x: x.count)
  

 I do not see the need for sorting an entire dictionary, however. If the key value can hold a list of  A  objects and you want to sort that: 

  dict[key] = sorted(dict[key], key=lambda x: x.count)
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17038713)
 Using  sorted : 

  class X():
     def __init__(self, a_s):
          self.anniversary_score = a_s

li = [X(1), X(2), X(3), X(4)]
sorted(li, key=lambda x: x.anniversary_score)
  

 Generally, the http://wiki.python.org/moin/HowTo/Sorting has just about everything you'll ever need to know about sorting in Python. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1549085)
  sort_me.sort(key=attr_or_itemgetter('name'))
  

 Where  attr_or_itemgetter() : 

  class attr_or_itemgetter(object):
    def __init__(self, name):
        self.name = name
    def __call__(self, obj):
        try: return getattr(obj, name)
        except AttributeError:
            return obj[name]
  

 NOTE: It intentionally doesn't check for dictionary type, therefore  attr_or_itemgetter('items')  applied to a dictionary will return  dict.items  method. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/53521172)
 Assuming you are using a version of Python that provides for guaranteed ordering, you need to create a new dict, inserting the elements in the proper order. 

  old_dict = { ... }
new_dict = dict(sorted(old_dict.items(), key=lambda kv: kv[1].count))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36214761)
 Something that may help you understand a bit better: http://www.tutorialspoint.com/python/python_classes_objects.htm 

 What you describe as  item.function()  is actually a method, which is defined by the class that said  item  belongs to. You need to form a comprehensive understanding of  function ,  class ,  object ,  method  and maybe more in Python. 

 Just conceptually speaking, when you call  L.sort() , the  sort()  method of type/class  list  actually accepts an argument usually by convention called  self  that represents the object/instance of the type/class  list , in this case  L . And  sort  just like a standalone  sorted  function but just applies the sorting logic to  L  it self . Comparatively,  sorted  function would require an iterable (a  list , for example), to be its required argument in order to function. 

 Code example: 

  my_list = [2, 1, 3]

# .sort() is a list method that applies the sorting logic to a
# specific instance of list, in this case, my_list
my_list.sort()

# sorted is a built-in function that's more generic which can be
# used on any iterable of Python, including list type
sorted(my_list)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53241392)
 Instead of sorting the items in reverse order and removing them from the right, 

 
  def enqueue(self, item):
    self.items.append(item)
    self.items.sort(key=self.sortComparatorByCost, reverse=True)

def dequeue(self):
    return self.items.pop()
  
 

 you could remove them from the left. That would avoid reversing the order of insertion of the items with the same cost.  

  def enqueue(self, item):
    self.items.append(item)
    self.items.sort(key=self.sortComparatorByCost)

def dequeue(self):
    return self.items.pop(0)
  

 Removing items from the beginning of a list https://wiki.python.org/moin/TimeComplexity, however, so you could better use a https://docs.python.org/3/library/collections.html#collections.deque (replacing  pop(0)  by  popleft() ) to fix that. A  deque  on the other hand, has no in-place  sort()  method, so would need to replace  self.items.sort()  by  self.items = deque(sorted(self.items))  as well. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/48777504)
 Looking at this following snippet: 

  def read_file(self):
    with open('grocery.txt') as file:
        items = [Item]
  

 The first thing you put in the list is the class itself, which doesnâ€™t have the attribute  price . Attributes are only passed on within instances of the class. Instead, you want to declare the list as empty:  items = [] . 



