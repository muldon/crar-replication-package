Query: Most Pythonic way to concatenate strings
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/32658371)
 One way would be to use https://docs.python.org/3/library/stdtypes.html#str.join and list comprehension , example - 

  In [1]: import numpy as np

In [2]: pic = np.array([ 'H','e','l','l','o','W','o','r','l','d']).reshape(2,5)

In [3]: pic
Out[3]:
array([['H', 'e', 'l', 'l', 'o'],
       ['W', 'o', 'r', 'l', 'd']],
      dtype='<U1')

In [4]: '\n'.join([''.join(x) for x in pic])
Out[4]: 'Hello\nWorld'
  

 If you really need the  \n  at the end, you can concatenate it after joining th strings. Example - 

  In [5]: '\n'.join([''.join(x) for x in pic]) + '\n'
Out[5]: 'Hello\nWorld\n'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14227532)
 That could work if you convert your list to tuple like this: 

  t = ["a", "b", "c"]
s = "%s.%s.%s" % tuple(t)
  

 But, python strings has the built in method .join, so, if your list grows, you can handle it like this: 

  '.'.join(t)
  

 That's the "pythonic way", you also should avoid using the + operator with strings, always use .join and format strings. This is because Python Strings (and tuples) are not mutable objects, so, when you're doing 

  "abc" + "cde"
  

 Python has to allocate new memory to store the new string. 

 I hope this solved your question 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13494197)
 http://docs.python.org/2/library/stdtypes.html#str.join 

  >>> list('hello')
['h', 'e', 'l', 'l', 'o']
>>> ''.join(_)
'hello'
  

  

  from operator import add
reduce(add, ['h', 'e', 'l', 'l', 'o'])
  

 But optimised for strings, it also  only allows strings , otherwise it raises a  TypeError   


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44834704)
 You can convert all your string attributes to list of strings:  

  string_list = [myobj.str for myobj in l]  

 The code above creates list of strings using generator. Afterwards u would use a standard way to concatenate strings: 

  "".join(string_list)  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2711589)
 The easiest way would be 

  Section = 'Sec_' + Section
  

 But for efficiency, see: https://waymoot.org/home/python_string/ 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/2134393)
 Of course it's  join .   Let's do it in a really stupid way: 
If the problem was only adding 2 strings, you'd most likely use  str1 + str2 . What does it take to get that to the next level? Instinctively, for most (I think), will be to use  sum .  

  In [1]: example = ['a', 'b', 'c']
In [2]: sum(example, '')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython console> in <module>()
TypeError: sum() can't sum strings [use ''.join(seq) instead]
  

  Python simply told me what to use!  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/35398766)
 A  defaultdict  would do the trick: 

  from collections import defaultdict
dct = defaultdict(list)
for k, v in mylist:
    dct[k].append(v)
mynewlist = [(k, ','.join(v)) for k, v in dct.iteritems()]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10984878)
 The list comprehension is the most "pythonic" way. 

 The most "numpythonic" way would be: 

  >>> data = np.array([['a','b'],['c','d']])
# a 2D view
>>> data.view('S2')
array([['ab'],
       ['cd']], 
      dtype='|S2')
# or maybe a 1D view ...fastest solution:
>>> data.view('S2').ravel()
array(['ab', 'cd'], 
      dtype='|S2')
  

 No looping, no list comprehension, not even a copy.  The buffer just sits there unchanged with a different "view" so this is the fastest solution available. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/44683599)
 Yes you can use the following oneliner: 

  from itertools import zip_longest

c = ''.join([x+y for x,y in zip_longest(str(a),str(b),fillvalue='')])
  

 The code works as follows: we use  zip_longest  to zip the two strings together, and we make use of  fillvalue s in case one of the iterables gets exhausted. Then for each two "digits" (or empty strings in case the string is exhausted), we concatenate these together, and then we concatenate all those combinations of the zip together for the result. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/35398725)
 You could use https://docs.python.org/2/library/itertools.html#itertools.groupby to do the grouping here: 

  from itertools import groupby
from operator import itemgetter

mynewlist = [
    (key, ', '.join([s for num, s in group]))
    for key, group in groupby(mylist, itemgetter(0))]
  

 This uses https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions to process each group and extract the strings from the grouped tuples for concatenation. The https://docs.python.org/2/library/operator.html#operator.itemgetter tells  groupby()  to group the input on the first element: 

  >>> from itertools import groupby
>>> from operator import itemgetter
>>> mylist = [(8, 'dddd'), (8, '33333'), (8, 'fdsss'), (9, 'fsfjs'),(10, 'dddd'), (10, '33333'), (12, 'fdsss'), (12, 'fsfjs')]
>>> [(key, ', '.join([s for num, s in group])) for key, group in groupby(mylist, itemgetter(0))]
[(8, 'dddd, 33333, fdsss'), (9, 'fsfjs'), (10, 'dddd, 33333'), (12, 'fdsss, fsfjs')]
  

 Note that the  groupby()  iterator groups only  consecutive  matching elements. That means if your input is not sorted, then tuples with the same initial element are not necessarily going to always be put together either. If your input is not sorted and you need all tuples with the same starting element to be grouped regardless of where they are in the input sequence, use a dictionary to group the elements first: 

  grouped = {}
for key, string in mylist:
    grouped.setdefault(key, []).append(string)
mynewlist = [(key, ', '.join([s for num, s in group])) for key, group in grouped.items()]
  



