Query: Is there a way to make the Tkinter text widget read only?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3842234)
 You have to change http://effbot.org/tkinterbook/text.htm#patterns of the  Text  widget from  NORMAL  to  DISABLED   after  entering  text.insert()  or  text.bind()  : 

  text.config(state=DISABLED)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/42177262)
 You have to re-read the file each time you want to update the widget. For example: 

  def update():
    with open("htfl.txt","r") as f:
        data = f.read()
        T.delete("1.0", "end")  # if you want to remove the old data
        T.insert(END,data)
    T.after(1000, update)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24965264)
  text = Text(app, state='disabled', width=44, height=5)
  

 Before and after inserting, change the state, otherwise it won't update 

  text.configure(state='normal')
text.insert('end', 'Some Text')
text.configure(state='disabled')
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/45417036)
 Use this code in windows if you want to disable user edit and allow <kbd>Ctrl</kbd>+<kbd>C</kbd> for copy on screen text: 

  def txtEvent(event):
    if(event.state==12 and event.keysym=='c' ):
        return
    else:
        return "break"

txt.bind("<Key>", lambda e: txtEvent(e))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34811313)
 Very easy solution is just to bind any key press to a function that returns "break" like so: 

  import Tkinter

root = Tkinter.Tk() 

readonly = Tkinter.Text(root)
readonly.bind("<Key>", lambda e: "break")
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26547820)
 Easy solution to use a textbox with an integrated scrollbar: 

  Python 3 : 

  #Python 3
import tkinter 
import tkinter.scrolledtext

tk = tkinter.Tk() 
text = tkinter.scrolledtext.ScrolledText(tk)
text.pack()
tk.mainloop()
  

 To read the textbox: 

  string = text.get("1.0","end")   # reads from the beginning to the end
  

 Of course you can shorten the imports if you want. 

 In  Python 2  you  import ScrolledText  instead. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/22921901)
 . 

 add 2 lines within class StdoutRedirector: 

  class StdoutRedirector(IORedirector):
   '''A class for redirecting stdout to this Text widget.'''
   def write(self,message):
      self.text_area.config(state = "normal")
      self.text_area.insert("insert", message)
      self.text_area.config(state = "disabled")
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/3819568)
 You may be interested by the http://effbot.org/tkinterbook/pack.htm#Tkinter.Pack.pack_forget-method and http://effbot.org/tkinterbook/grid.htm#Tkinter.Grid.grid_forget-method  methods of a widget. In the following example, the button disappear when clicked 

  from Tkinter import *

def hide_me(event):
    event.widget.pack_forget()

root = Tk()
btn=Button(root, text="Click")
btn.bind('<Button-1>', hide_me)
btn.pack()
btn2=Button(root, text="Click too")
btn2.bind('<Button-1>', hide_me)
btn2.pack()
root.mainloop()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/1602312)
 The easiest  way is to use a disabled text widget with a height of 1 line: 

  from Tkinter import *

master = Tk()

w = Text(master, height=1, borderwidth=0)
w.insert(1.0, "Hello, world!")
w.pack()

w.configure(state="disabled")

# if tkinter is 8.5 or above you'll want the selection background
# to appear like it does when the widget is activated
# comment this out for older versions of Tkinter
w.configure(inactiveselectbackground=w.cget("selectbackground"))

mainloop()
  

 You could use an entry widget in a similar manner. 



