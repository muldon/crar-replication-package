Query: How to remove symbols from a string with Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/875978)
 One way, using http://docs.python.org/library/re.html: 

  >>> s = "how much for the maple syrup? $20.99? That's ridiculous!!!"
>>> re.sub(r'[^\w]', ' ', s)
'how much for the maple syrup   20 99  That s ridiculous   '
  

 
   \w  will match alphanumeric characters and underscores  
   [^\w]  will match anything that's  not  alphanumeric or underscore  
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/876854)
 Sometimes it takes longer to figure out the regex than to just write it out in python: 

  import string
s = "how much for the maple syrup? $20.99? That's ricidulous!!!"
for char in string.punctuation:
    s = s.replace(char, ' ')
  

 If you need other characters you can change it to use a white-list or extend your black-list. 

 Sample white-list: 

  whitelist = string.letters + string.digits + ' '
new_s = ''
for char in s:
    if char in whitelist:
        new_s += char
    else:
        new_s += ' '
  

 Sample white-list using a generator-expression: 

  whitelist = string.letters + string.digits + ' '
new_s = ''.join(c for c in s if c in whitelist)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/876405)
 I often just open the console and look for the solution in the objects methods.  

  >>> a = "hello ' s"
>>> dir(a)
[ (....) 'partition', 'replace' (....)]
>>> a.replace("'", " ")
'hello   s'
  

 Short answer: Use  string.replace() . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14599280)
 You can use re.sub function. 

  >>> import re 
>>> x = "This is a sentence. (once a day) [twice a day]"
>>> re.sub("([\(\[]).*?([\)\]])", "\g<1>\g<2>", x)
'This is a sentence. () []'
  

 If you want to remove the [] and the () you can use this code: 

  >>> import re 
>>> x = "This is a sentence. (once a day) [twice a day]"
>>> re.sub("[\(\[].*?[\)\]]", "", x)
'This is a sentence.  '
  

 Important: This code will not work with nested symbols 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/36312386)
 Your regex seems incomplete, but you were on the right track. Note that  a pipe symbol inside a character class is treated as a literal and your  [0-9|+]  matches a digit or a  |  or a  +  symbols. 

 You may use 

  ,?\+\d+_[^,]+
  

 See the https://regex101.com/r/tN2fV9/3 

 Explanation: 

 
  ,?  - optional  ,  (if the "word" is at the beginning of the string, it should be optional) 
  \+  - a literal  +  
  \d+  - 1+ digits 
  _  - a literal underscore 
  [^,]+  - 1+ characters other than  ,  
 

 https://ideone.com/l3t7B1: 

  import re
p = re.compile(r',?\+\d+_[^,]+')
test_str = "+1223,+12_remove_me,+222,+2223_remove_me"
result = p.sub("", test_str)
print(result)
# => +1223,+222
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39901522)
  string.punctuation  misses loads of punctuation marks that are commonly used in the real world. How about a solution that works for non-ASCII punctuation? 

  import regex
s = u"string. With. Some・Really Weird、Non？ASCII。 「（Punctuation）」?"
remove = regex.compile(ur'[\p{C}|\p{M}|\p{P}|\p{S}|\p{Z}]+', regex.UNICODE)
remove.sub(u" ", s).strip()
  

 Personally, I believe this is the best way to remove punctuation from a string in Python because: 

 
 It removes all Unicode punctuation 
 It's easily modifiable, e.g. you can remove the  \{S}  if you want to remove punctuation, but keep symbols like  $ . 
 You can get really specific about what you want to keep and what you want to remove, for example  \{Pd}  will only remove dashes. 
 This regex also normalizes whitespace. It maps tabs, carriage returns, and other oddities to nice, single spaces. 
 

 This uses Unicode character properties, which https://en.wikipedia.org/wiki/Unicode_character_property. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47145769)
  

  import re
s = "H8e%&l6&%l@8095o a@/9^65$n228d w%e60$$#&9l3@/c6o5m3e" 
s1 = "I1^/0^^@9t #$%% i/@4#s 11P17/9$M 5^&* a^$45$5$0n&##^4d 6^&&* I $%^$%^ a8@@94%3*m t3120i36&^1r2&^##0e&^d"
final_string = re.sub("(?<=[a-zA-Z\.\!])[/#\$\%\^\&\*\@0123456789]+(?=[a-zA-Z\.\!])", '', s) 
print(final_string)
new_final_string = re.sub("(?<=[a-zA-Z\.\!])[/#\$\%\^\&\*\@0123456789]+(?=[a-zA-Z\.\!])", '', s1)
print(new_final_string)
print(re.sub("(?<=[a-zA-Z\.\!])[/#\$\%\^\&\*\@0123456789]+(?=[a-zA-Z\.\!])", '', ',. a3%2%1/3$s*0. d8^!'))
  

 Output: 

  'Hello and welcome'
It #$%% is 11PM 5^&* and 6^&&* I $%^$%^ am tired
,. as. d!
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52228088)
 Replace the pattern  r' (?.|(?<=[-/$_]) '  with empty string using  re.sub  

  >>> lst = ["Tax pin number is 1 - 866 - 704 - 7388 .",
...              "No , emu is not protected in Victoria .",
...              "Find is to lose as construct is to _ _ _ _ _ _ .",
...              "$ 1,0 is equal to $ 1,0 ."]
>>> 
>>> def modify_answers(answers):
...     ptrn = re.compile(r' (?.|(?<=[-/$_]) ')
...     return [ptrn.sub('', answer) for answer in answers]
... 
>>> 
>>> pprint(modify_answers(lst))
['Tax pin number is 1-866-704-7388.',
 'No , emu is not protected in Victoria.',
 'Find is to lose as construct is to ______.',
 '$1,0 is equal to $1,0.'] 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/34429225)
  import re
s1=re.sub(r"[^0-9 ]"," ",s)
  

 You can use  re  here. 

   .  of floating numbers use 

  (?!(?<=\d)\.(?=\d))[^0-9 ]
  



