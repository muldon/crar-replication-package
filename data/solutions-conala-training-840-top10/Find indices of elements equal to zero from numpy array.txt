Query: Find indices of elements equal to zero from numpy array
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50849388)
 I would do it the following way: 

  >>> x = np.array([[1,0,0], [0,2,0], [1,1,0]])
>>> x
array([[1, 0, 0],
       [0, 2, 0],
       [1, 1, 0]])
>>> np.nonzero(x)
(array([0, 1, 2, 2]), array([0, 1, 0, 1]))

# if you want it in coordinates
>>> x[np.nonzero(x)]
array([1, 2, 1, 1])
>>> np.transpose(np.nonzero(x))
array([[0, 0],
       [1, 1],
       [2, 0],
       [2, 1])
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/41732745)
 There is https://docs.scipy.org/doc/numpy/reference/generated/numpy.argwhere.html#numpy-argwhere, 

  import numpy as np
arr = np.array([[1,2,3], [0, 1, 0], [7, 0, 2]])
np.argwhere(arr == 0)
  

 which returns all found indices as rows: 

  array([[1, 0],    # Indices of the first zero
       [1, 2],    # Indices of the second zero
       [2, 1]],   # Indices of the third zero
      dtype=int64)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4588654)
 http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html is my favorite. 

  >>> x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])
>>> numpy.where(x == 0)[0]
array([1, 3, 5])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/24472589)
 If you are working with a one-dimensional array there is a syntactic sugar: 

<pre class="lang-python prettyprint-override"> >>> x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])
>>> numpy.flatnonzero(x == 0)
array([1, 3, 5])
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24553551)
 You can also use  nonzero()  by using it on a boolean mask of the condition, because  False  is also a kind of zero. 

  >>> x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])

>>> x==0
array([False, True, False, True, False, True, False, False, False, False, False], dtype=bool)

>>> numpy.nonzero(x==0)[0]
array([1, 3, 5])
  

 It's doing exactly the same as  mtrw 's way, but it is more related to the question ;) 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30639372)
 For two arrays  a, b  with: 

  a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 3, 2, 4, 5])
  

  np.equal(a,b)  has the same output as  a==b  (which is easier to understand at first, I think): 

  > array([ True, False, False,  True,  True], dtype=bool)
  

 The elements are checked element-wise and then an array of booleans is created. 

  np.where()  checks some condition element-wise on an array: 

  np.where(a > 2)
> (array([2, 3, 4]),)
  

 So combining  np.where  and  np.equal  is the thing you want: 

  np.where(np.equal(a,b))
> (array([0, 3, 4]),)
  

  edit : nevermind, just saw that I were far too slow ^^ 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/30639020)
 This is one way of doing it with numpy: 

  np.where(np.equal(Predictions, Labels))
  

  

  np.equal(Predictions, Labels).nonzero()
  

 It will return a single element tuple though, so to get the actual array, add  [0]  as in: 

  np.equal(Predictions, Labels).nonzero()[0]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2148172)
  result = numpy.where(x == y, x, 0)
  

 Have a look at http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html documentation for explanation.  Basically,  numpy.where(a, b, c) , for a condition  a  returns an array of shape  a , and with values from  b  or  c , depending upon whether the corresponding element of  a  is true or not.   b  or  c  can be scalars. 

 By the way,  x & y  is not necessarily "always true" for two positive numbers.  It does http://en.wikipedia.org/wiki/Bitwise_operation#AND for elements in  x  and  y : 

  x = numpy.array([2**p for p in xrange(10)])
# x is [  1   2   4   8  16  32  64 128 256 512]
y = x - 1
# y is [  0   1   3   7  15  31  63 127 255 511]
x & y
# result: [0 0 0 0 0 0 0 0 0 0]
  

 This is because the bitwise representation of each element in  x  is of the form  1  followed by  n  zeros, and the corresponding element in  y  is  n  1s.  In general, for two non-zero numbers  a  and  b ,  a & b  may equal zero, or non-zero but not necessarily equal to either  a  or  b . 



