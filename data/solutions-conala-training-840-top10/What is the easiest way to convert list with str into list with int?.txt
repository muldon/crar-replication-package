Query: What is the easiest way to convert list with str into list with int?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10206053)
 If your strings are not only numbers (ie. u''), you can use : 

  new = [int(i) for i in ["1", "2", "3"] if isinstance(i, int) or isinstance(i, (str, unicode)) and i.isnumeric()]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14780887)
 Use  int()  with either  str.split() : 

  In [31]: s='20 01'

In [32]: int("".join(s.split()),16)
Out[32]: 8193
  

 or  str.replace()  and pass the base as 16: 

  In [34]: int(s.replace(" ",""),16)
Out[34]: 8193
  

 Here  both  split()  and  replace()  are converting   '20 01'  into  '2001' : 

  In [35]: '20 01'.replace(" ","")
Out[35]: '2001'

In [36]: "".join('20 01'.split())
Out[36]: '2001'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44808789)
 If It is array and has installed numpy. We can used below code as well. 

  import numpy as np

np.array(['1', '2', '3'],dtype=int)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2424425)
 Python 2. 

  map(int, ["1", "2", "3"])
  

 Python 3.x (in 3.x,  map  returns an iterator, not a list as in 2.x): 

  list(map(int, ["1", "2", "3"]))
  

  map  documentation: http://docs.python.org/library/functions.html#map, http://docs.python.org/3.1/library/functions.html#map 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2398100)
 Depending on the fmat in the text file, it may be easier to convert directly 

  >>> b=bytearray('BBA7F69E'.decode('hex'))
  

  

  >>> b=bytearray('BB A7 F6 9E'.replace(' ','').decode('hex'))
>>> b
bytearray(b'\xbb\xa7\xf6\x9e')
>>> b[0]
187
>>> hex(b[0])
'0xbb'
>>> 
  

 a bytearray is easily converted to a list 

  >>> list(b) == [0xBB, 0xA7, 0xF6, 0x9E]
True

>>> list(b)
[187, 167, 246, 158]
  

 If you want to change the way the list is  displayed  you'll need to make your own list class 

  >>> class MyList(list):
...  def __repr__(self):
...   return '['+', '.join("0x%X"%x if type(x) is int else repr(x) f x in self)+']'
... 
>>> MyList(b)
[0xBB, 0xA7, 0xF6, 0x9E]
>>> str(MyList(b))
'[0xBB, 0xA7, 0xF6, 0x9E]'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/7789592)
 So you want to access the digits in a integer like elements in a list; easiest way I can think of is: 

  n = 56789
lastdigit = int(repr(n)[-1])
# >  9
  

 Convert  n  into a string, accessing last element then use int constructor to convert back into integer. 

  

  n = 179.123
fstr = repr(n)
signif_digits, fract_digits = fstr.split('.')
# >  ['179', '123']
signif_lastdigit = int(signif_digits[-1])
# >  9
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34801440)
 When you read something from a file or  sys.stdin , Python threats it as a string object. You should create an  int  object from string, and the easiest way to do this is to convert the whole list of strings to a list of ints: 

   P = map(int, line.split())
  

 In this way you apply the function  int  to every object inside  line.split()  (which is a list), and put the result (a list of ints) inside  P . 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52340488)
 The easiest way to convert a base-12 encoded string to int is via  int(string, 12) . The reverse is not quite as easy, because Python doesn't seem to have a built-in way to do that. You can use format specifiers for binary, octal, and hex, but not arbitrary bases. 

 You can get a reversed list of digits using  divmod() , which does division with remainder. 

  def to_digits(x, base):
     while x > 0:
         x, rem = divmod(x, base)
         yield rem
  

 But to round-trip, we want a string. Convert the int to a character (using a string as a lookup table), and join them into a string, then use a negatively-stepped slice to reverse it. 

  def to_base_12(num):
    return ''.join('0123456789AB'[d] for d in to_digits(num, 12))[::-1]
  

 With a longer lookup table, you could generalize this into higher bases. 

 Strings are already sequences, but if you want to convert that back to a list, you can just call  list()  on it. The inverse is that  ''.join()  method you just saw. 

 Now that you can convert your base-12 representation to Python int objects and back, you can simply add them with  + . 



