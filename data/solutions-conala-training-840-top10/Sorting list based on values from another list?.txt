Query: Sorting list based on values from another list?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51903823)
 I actually came here looking to sort a list by a list where the values matched. 

  list_a = ['foo', 'bar', 'baz']
list_b = ['baz', 'bar', 'foo']
sorted(list_b, key=lambda x: list_a.index(x))
# ['foo', 'bar', 'baz']
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/49494834)
 I have created a more general function, that sorts more than two lists based on another one, inspired by @Whatang's answer. 

  def parallel_sort(*lists):
    """
    Sorts the given lists, based on the first one.
    :param lists: lists to be sorted

    :return: a tuple containing the sorted lists
    """

    # Create the initially empty lists to later store the sorted items
    sorted_lists = tuple([] for _ in range(len(lists)))

    # Unpack the lists, sort them, zip them and iterate over them
    for t in sorted(zip(*lists)):
        # list items are now sorted based on the first list
        for i, item in enumerate(t):    # for each item...
            sorted_lists[i].append(item)  # ...store it in the appropriate list

    return sorted_lists
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6620187)
 zip, sort by the second column, return the first column. 

  zip(*sorted(zip(X,Y), key=operator.itemgetter(1)))[0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6618553)
 Zip the two lists together, sort it, then take the parts you want: 

  >>> yx = zip(Y, X)
>>> yx
[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]
>>> yx.sort()
>>> yx
[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]
>>> x_sorted = [x for y, x in yx]
>>> x_sorted
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']
  

  

  [x for y, x in sorted(zip(Y, X))]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/52545309)
 Something like this should work: 

  def position(value):
    try:
        return short_list.index(value)
    except ValueError:
        return len(short_list)

long_list.sort(key=position)
  

 https://docs.python.org/3/library/functions.html#sorted, so using  len(short_list)  ensures that the unknown values sort last. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45514542)
 https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.sort_together has a tool for sorting iterables in parallel: 

  from more_itertools import sort_together

sort_together([Y, X])[1]
# ('a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/19382336)
 Another alternative, combining several of the answers. 

  zip(*sorted(zip(Y,X)))[1]
  

 In order to work for python3: 

  list(zip(*sorted(zip(B,A))))[1]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/40653766)
 List 

  dict = {'Neetu':22,'Shiny':21,'Poonam':23}
print sorted(dict.items())
sv = sorted(dict.values())
print sv
  

  

  d = []
l = len(sv)
while l != 0 :
    d.append(sv[l - 1])
    l = l - 1
print d`
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/48176435)
 . 

  list_a = [5,4,3,2,1]
list_b = [1,1.5,1.75,2,3,3.5,3.75,4,5]
  

 Say you want list a to match list b. 

  orderedList =  sorted(list_a, key=lambda x: list_b.index(x))
  

 This is helpful when needing to order a smaller list to values in larger. Assuming that the larger list contains all values in the smaller list, it can be done. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/6618548)
 The most obvious solution to me is to use the  key  keyword arg. 

  >>> X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
>>> Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]
>>> keydict = dict(zip(X, Y))
>>> X.sort(key=keydict.get)
>>> X
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']
  

 Note that you can shorten this to a one-liner if you care to: 

  >>> X.sort(key=dict(zip(X, Y)).get)
  



