Query: Convert binary string to list of integers using Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/18627860)
 Though in your second list you express the integers as binary, they are still of type  int .  You can convert the strings, however: 

  a = [int(x, 2) for x in a]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18627859)
 Use  int  with base 2: 

  >>> a=['0b11001000', '0b01001100', '0b00111100', '0b00011111', 
...        '0b11110000', '0b01011010', '0b10010110', '0b00011110']
>>> [int(x, 2) for x in a]
[200, 76, 60, 31, 240, 90, 150, 30]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38935406)
 You can use https://wiki.python.org/moin/BitwiseOperators like this: 

  >>> lst = [0, 1, 0, 0]
 >>> bin(int(''.join(map(str, lst)), 2) << 1)
'0b1000'
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18367077)
 To convert from integers < 256 to binary, use the  chr  function.  So you're looking at doing the following. 

  newFileBytes=[123,3,255,0,100]
newfile=open(path,'wb')
newfile.write((''.join(chr(i) for i in newFileBytes)).encode('charmap'))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13663352)
 You could use this command: 

  map(int, list(bin(YOUR_NUMBER)[2:]))
  

 What it does is this: 

 
  bin(YOUR_NUMBER)  converts  YOUR_NUMBER  into its binary representation 
  bin(YOUR_NUMBER)[2:]  takes the effective number, because the string is returned in the form  '0b110' , so you have to remove the  0b  
  list(...)  converts the string into a list 
  map(int, ...)  converts the list of strings into a list of integers 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/49315825)
  Assign binary numbers to a variable:  You can use integer variables to hold the binary values. They can be created from the binary representation using the  0b  prefix. 

  x = 0b110  # assigns the integer 6
  

  Perform bit operations:  The bit operations  &  ( and ),  |  ( or ),  ^  ( xor ),  ~  ( not ) can be used on integers and perform the respective binary operations. 

  x = 0b110
y = 0b011
z = x & y  # assigns the integer 0b010 (2)
  

  Transform them to ASCII:  To convert a number to ASCII you can use  chr . 

  x = 0b1100001  # assigns 97
print(chr(x))  # prints 'a'
  

  Transform from ASCII:  If you use integers to represent the binary values you can use  ord  to convert ASCII values. 

  s = 'a'
x = ord(a)  # assigns the integer 0b1100001 (97)
  

  Print integer in binary:  An integer can be printed in binary using the string format method on the string  "{0:b}" . 

  x = 0b1100001
s = "{0:b}".format(x)
print(s)  # prints '1100001'
  

 If you do not mind the  0b  prefix you can also use  bin . 

  x = 0b1100001
s = bin(x)
print(s)  # prints '0b1100001'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/36509386)
 You can first use the format function to get a binary string like your current function. For e.g the following snippet creates a binary string of 8 bits corresponding to integer 58. 

  >>>u = format(58, "08b")
'00111010'
  

 Now iterate the string to convert each bit to an int to get your desired list of bits encoded as integers. 

  >>>[int(d) for d in u]
[0, 0, 1, 1, 1, 0, 1, 0]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7292104)
 If you've got more than 8 characters to convert (and I'm presuming you do) then you'll need something like this (using Python): 

  >>> b = '0010101001010101010111101010100101011011'
>>> bytearray(int(b[x:x+8], 2) for x in range(0, len(b), 8))
bytearray(b'*U^\xa9[')
  

 This splits the bit string into 8 character chunks (and if your string isn't a multiple of 8 long you should pad it first), converts each chunk into an integer and then converts the list of integers into a  bytearray  which can be written directly to your binary file (there's no need to convert it to a string): 

  >>> with open('somefile', 'wb') as f:
...     f.write(the_bytearray)
  

 If you have more tasks like this then there are libraries that can help, for example here's the same conversion using my http://python-bitstring.googlecode.com module: 

  >>> from bitstring import BitArray
>>> with open('somefile', 'wb') as f:
...     BitArray(bin=b).tofile(f)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13663331)
 Solution 

 Probably the easiest way is not to use http://docs.python.org/2/library/functions.html#bin and string slicing, but use features of http://docs.python.org/2.7/library/stdtypes.html#str.format: 

  '{:b}'.format(some_int)
  

  

  >>> print '{:b}'.format(6)
110
>>> print '{:b}'.format(123)
1111011
  

 In case of http://docs.python.org/2/library/functions.html#bin you just get the same string, but prepended with " 0b ", so you have to remove it. 

 Getting list of  int s from binary representation 

  EDIT : Ok, so do not want just a string, but rather a list of integers.  

  your_list = map(int, your_string)
  

 Combined solution for edited question 

 So the whole process would look like this: 

  your_list = map(int, '{:b}'.format(your_int))
  

 A lot cleaner than using  bin()  in my opinion. 



