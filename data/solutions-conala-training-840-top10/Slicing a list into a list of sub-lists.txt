Query: Slicing a list into a list of sub-lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2231713)
 The documentation of the http://docs.python.org/library/itertools.html module contains the following http://docs.python.org/library/itertools.html#recipes: 

  import itertools

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.izip_longest(fillvalue=fillvalue, *args)
  

 This function returns an iterator of tuples of the desired length: 

  >>> list(grouper(2, [1,2,3,4,5,6,7]))
[(1, 2), (3, 4), (5, 6), (7, None)]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29066209)
 You can use  slicing  : 

  >>> l= [1,0,1,1,1,0,1,0,          
...     0,0,0,1,1,0,0,0,                      
...     1,1,1,0,0,1,0,0,                      
...     0,0,0,0,0,1,1,1] 

>>> [l[i:i+8] for i in range(0,len(l),8)]
[[1, 0, 1, 1, 1, 0, 1, 0], 
 [0, 0, 0, 1, 1, 0, 0, 0], 
 [1, 1, 1, 0, 0, 1, 0, 0], 
 [0, 0, 0, 0, 0, 1, 1, 1]]
  

 for check the consecutive 1 in your sub-lists : 

  >>> new=[l[i:i+8] for i in range(0,len(l),8)]
>>> [all(i==1 for i in sub) for sub in new]
[False, False, False, False]
>>> new.append([1,1,1,1,1,1,1])
>>> [all(i==1 for i in sub) for sub in new]
[False, False, False, False, True]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/49757687)
 This is a common chunking problem, I would use slicing in a list-comp: 

  [L[i:i+n] for i in range(0, len(L), n)]
#[[0,   1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
# [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
# [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
# [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
# [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92]]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/20900978)
 You can do it with slicing. See https://stackoverflow.com/questions/509211/pythons-slice-notation for more details. 

  list = [[1,2,3],[4,5,6],[7,8,9],[2,4,3], ... ]

for i in range(0, len(list), 7):
  L1, L2, L3, L4, L5, L6, L7 = list[i:i+7]
  ...
  

  Note : the length of the list must be a multiple of 7 to do this. If not, append as much as  None  s to make sure it is divisible by 7. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2231685)
  [input[i:i+n] for i in range(0, len(input), n)]        # Use xrange in py2k
  

 where  n  is the length of a chunk. 

 Since you don't define what might happen to the final element of the new list when the number of elements in  input  is not divisible by  n , I assumed that it's of no importance: with this you'll get last element equal 2 if  n  equal 7, for example. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/22771718)
 A really pythonic variant (python 3): 

  list(zip(*(iter([1,2,3,4,5,6,7,8,9]),)*3))
  

 A list iterator is created and turned into a tuple with 3x the same iterator, then unpacked to zip and casted to list again. One value is pulled from each iterator by zip, but as there is just a single iterator object, the internal counter is increased globally for all three. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34531134)
 The answer to your question is no, there is no efficient oneliner that will swap elements inplace like using a for loop and  sub[0],sub[2] = sub[2],sub[0] , if you want a oneliner and to change the original list you would have to slice: 

  l = [['G', 'Y', 'V', 'X'], ['C', 'F', 'Z', 'Y'], ['B', 'X', 'B', 'J'], ['P', 'T', 'U', 'W']]

l[:] = [sub[2:3] + sub[1:2] + sub[0:1] + sub[3:] for sub in l]
  

 which would be considerably less efficient as you are creating multiple new lists by slicing as opposed to simply swapping two references in a list.  

 If you passed the new order explicitly you could use  itemgetter  but that would also involve mapping to lists after. 

  l = [['G', 'Y', 'V', 'X'], ['C', 'F', 'Z', 'Y'], ['B', 'X', 'B', 'J'], ['P', 'T', 'U', 'W']]
from operator import itemgetter

l[:] = map(itemgetter(2, 1, 0, 3), l)

print(l)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/51519938)
 Try  del  and  slicing . The worst time complexity is  O(N^2) . 

  sub_list=['a', int]
big_list=[1, 'a', int, 3, float, 'a', int, 5]
i=0
while i < len(big_list):
    if big_list[i:i+len(sub_list)]==sub_list:
        del big_list[i:i+len(sub_list)]
    else:
        i+=1

print(big_list)
  

 result: 

  [1, 3, <class 'float'>, 5]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/38885803)
  def check_ordered_sublist_in_list(sub_list, main_list):
    sub_list = np.array(sub_list)
    main_list = np.array(main_list)
    return any(all(main_list[n:(n + len(sub_list))] == sub_list) 
               for n in range(0, len(main_list) - len(sub_list) + 1))

>>> check_ordered_sublist_in_list([2, 3], [1, 2, 3, 4])
True

>>> check_ordered_sublist_in_list([1, 5, 4], [5, 1, 5, 4])
True

>>> check_ordered_sublist_in_list([1, 2], [4, 3, 2, 1])
False
  

 This converts the lists to numpy arrays (for computational efficiency) and then uses slicing to check if the  sub_list  is contained within the slice.  Any success returns True. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/30321154)
 You should use Numpy slicing. 

 Given a 3D numpy array  M , you can select an sub-array of it, with for instance, 

  M_selection = M[i_min:i_max, j_min:j_max, k_min:k_max]
  

 or alternatively, explicitly defining the slice, 

  sl_i = slice(i_min, i_max)
sl_j = slice(j_min, j_max)
sl_k = slice(k_min, k_max)
M_selection = M[sl_i, sl_j, sl_k]
  

 where  (i_min, i_max) , etc. are the boundaries of the sub-array. 

 See the http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html of advanced Numpy indexing for more details. 



