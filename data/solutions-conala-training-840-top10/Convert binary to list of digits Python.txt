Query: Convert binary to list of digits Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30971156)
  input = 0x15

output = [int(x) for x in '{:08b}'.format(input)]
  

  {0:0=8b}'.format(0x15)  represents your  input  in  binary  format with  0 padding  to 8 digits, then using list comprehension to create a list of bits. 

 Alternatively, you can use  map  function: 

  output = map(int, [x for x in '{:08b}'.format(0x15)])  

 EDIT: Variable bit width, 

 If you want to make number of bits variable, here is one way: 

  width = 8 #8bit width
output = [int(x) for x in '{:0{size}b}'.format(0x15,size=width)]
output = map(int, [x for x in '{:0{size}b}'.format(0x15,size=width)])
  

 This was tested in Python 2.7 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13081133)
 First convert the number to binary and then to string: 

  str(bin(7))
'0b111' #note the 0b in front of the binary number
  

 Next, remove the  0b  from the string 

  str(bin(7))[2:]
'111'
  

 Finally we use list comprehension to create a list of ints from the string, which has  roughly  the following form: 

  [expr for i in iterable]
[int(i) for i in str(bin(x))[2:]]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13081142)
 An expression like  map(int, list(bin((1<<8)+x))[-4:])  will give you the low 4 bits of a number, as a list.  ( Edit: A cleaner form is   map(int,bin(x)[2:].zfill(4))   ; see below .)  If you know how many bits you wish to show, replace the 4 (in  [-4:] ) with that number; and make the 8 (in  (1<<8) ) a larger number if necessary.  For example: 

  >>> x=0b0111
>>> map(int,list(bin((1<<8)+x))[-4:])
[0, 1, 1, 1]
>>> x=37; map(int,list(bin((1<<8)+x))[-7:])
[0, 1, 0, 0, 1, 0, 1]
>>> [int(d) for d in bin((1<<8)+x)[-7:]]
[0, 1, 0, 0, 1, 0, 1]
  

 The last example above shows an alternative to using map and list.  The following examples show a slightly cleaner form for obtaining leading zeroes.  In these forms, substitute the desired minimum number of bits in place of 8. 

  >>> x=37; [int(d) for d in bin(x)[2:].zfill(8)]
[0, 0, 1, 0, 0, 1, 0, 1]
>>> x=37; map(int,bin(x)[2:].zfill(8))
[0, 0, 1, 0, 0, 1, 0, 1]
>>> x=37; map(int,bin(x)[2:].zfill(5))
[1, 0, 0, 1, 0, 1]
>>> x=37; map(lambda k:(x>>-k)&1, range(-7,1))
[0, 0, 1, 0, 0, 1, 0, 1]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/39585899)
 You can store the remainders as digits in a string.  Here is one possible function to convert from decimal to binary: 

  def dec2bin(d_num):
    assert d_num >= 0, "cannot convert negative number to binary"
    if d_num == 0:
        return '0'
    b_num = ""
    while d_num > 0:
        b_num = str(d_num%2) + b_num
        d_num = d_num//2
    return b_num
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50457938)
 Binary operations are fairly useful for this task: 

 
  Convert each sublist to a binary number, where a 0 is turned into a 1 bit, and other numbers are turned into a 0 bit. 

 For example,  [0,1,2,0,4]  would be turned into  10010 , which is 18.  
  Eliminate duplicate numbers.  
 Combine the remaining numbers pairwise and combine them with a binary OR. 
 Find the number with the most 1 bits. 
 

 The code: 

  lists = [[0,1,2,0,4],
         [0,1,2,0,2],
         [1,0,0,0,1],
         [1,0,0,1,0]]

import itertools

def to_binary(lst):
    num = ''.join('1' if n == 0 else '0' for n in lst)
    return int(num, 2)

def count_ones(num):
    return bin(num).count('1')

# Step 1 & 2: Convert to binary and remove duplicates
binary_numbers = {to_binary(lst) for lst in lists}

# Step 3: Create pairs
combinations = itertools.combinations(binary_numbers, 2)

# Step 4 & 5: Compute binary OR and count 1 digits
zeros = (count_ones(a | b) for a, b in combinations)

print(max(zeros))  # output: 5
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53839867)
 For those of us who need to convert signed integers (range -2**(digits-1) to 2**(digits-1)-1) to 2's complement binary strings, this works: 

  def int2bin(integer, digits):
if integer >= 0:
    return bin(integer)[2:].zfill(digits)
else:
    return bin(2**digits + integer)[2:]
  

 This produces: 

  >>> int2bin(10, 8)
'00001010'
>>> int2bin(-10, 8)
'11110110'
>>> int2bin(-128, 8)
'10000000'
>>> int2bin(127, 8)
'01111111'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34784498)
 This is a recursive function that returns a list of strings of base b representations of the integers in your list 

  def convertToBase(num,base):
    q=num/base
    r=num%base
    if (q == 0):
        return str(r)
    else:
        return convertToBase(q,base) + str(r)

pix = [0,3,15,56,12,34] #the list of numbers you want converted to base b
print [convertToBase(x,4) for x in pix]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13081135)
 Once you get that string  0b111 , it's straightforward to split out the digits that you're interested in. For each character of everything after the  0b  in the string, convert it to an integer. 

  [int(d) for d in str(bin(x))[2:]]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/42317408)
 I think you can use  apply  with  Series  and  list  for convert  digits  to columns and then http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mode.html: 

  print (df['values'].apply(lambda x: pd.Series(list(x))))
   0  1  2
0  0  0  1
1  1  1  0
2  1  1  1

df1 = df['values'].apply(lambda x: pd.Series(list(x))).mode()
print (df1)
   0  1  2
0  1  1  1
  

 Last select row, create  list  and  join : 

  print (''.join(df1.iloc[0].tolist()))
111
  

 Another possible solution with  list comprehension : 

  df = pd.DataFrame([list(x) for x in df['values']])
print (df)
   0  1  2
0  0  0  1
1  1  1  0
2  1  1  1
  

 If output is  DataFrame  is possible use  apply   join : 

  df = pd.DataFrame({'categories':['A','B','C', 'D'],'values':['001','110','111', '000']})
print (df)
  categories values
0          A    001
1          B    110
2          C    111
3          D    000

print (pd.DataFrame([list(x) for x in df['values']]).mode())
   0  1  2
0  0  0  0
1  1  1  1

df1 = pd.DataFrame([list(x) for x in df['values']]).mode().apply(''.join, axis=1)
print (df1)
0    000
1    111
dtype: object
  



