Query: Add items to a dictionary of lists
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10487291)
  

  array = {}
  

 IN your example you are using  array  as a dictionary, not an array. If you need an array, in Python you use lists: 

  array = []
  

 Then, to add items you do: 

  array.append('a')
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10487303)
  {}  represents an empty dictionary, not an array/list.  F lists  arrays, you need  [] . 

 To initialize an empty list do this: 

  my_list = []
  

  

  my_list = list()
  

 To add elements to the list, use  append  

  my_list.append(12)
  

 To  extend  the list to include the elements from another list use  extend  

  my_list.extend([1,2,3,4])
my_list
--> [12,1,2,3,4]
  

 To remove an element from a list use  remove  

  my_list.remove(2)
  

 Dictionaries represent a collection of key/value pairs also known as an associative array  a map.  

 To initialize an empty dictionary use  {}    dict()  

 Dictionaries have keys and values 

  my_dict = {'key':'value', 'another_key' : 0}
  

 To extend a dictionary with the contents of another dictionary you may use the  update  method 

  my_dict.update({'third_key' : 1})
  

 To remove a value from a dictionary 

  del my_dict['key']
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/11613404)
 zip it but transpose it first: 

  >>> keys = ['k1', 'k2', 'k3', 'k4']
>>> data = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
>>> print dict(zip(keys, zip(*data)))
{'k3': (3, 7, 11, 15), 'k2': (2, 6, 10, 14), 'k1': (1, 5, 9, 13), 'k4': (4, 8, 12, 16)}
  

 If you want lists not tuples in the array: 

  >>> print dict(zip(keys, [list(i) for i in zip(*data)]))
  

 And if you want to use your version, just make dictionary comprehension, not  fromkeys : 

  my_dict = { k : [] for k in keys }
  

 The problem in your case that you initialize  my_dict  with the same value: 

  >>> my_dict = dict.fromkeys(keys, [])
>>> my_dict
{'k3': [], 'k2': [], 'k1': [], 'k4': []}
>>> my_dict['k3'].append(1)
>>> my_dict
{'k3': [1], 'k2': [1], 'k1': [1], 'k4': [1]}
  

 When you do it right (with dictionary/list comprehension): 

  >>> my_dict = dict((k, []) for k in keys )
>>> my_dict
{'k3': [], 'k2': [], 'k1': [], 'k4': []}
>>> my_dict['k3'].append(1)
>>> my_dict
{'k3': [1], 'k2': [], 'k1': [], 'k4': []}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31093777)
 You could use dict.viewitems with a for loop: 

  d1 = {'a': ('x', 'y'), 'b': ('k', 'l')}
d2 = {'a': ('m', 'n'), 'c': ('p', 'r')}

d3 = {}

for key, item in d1.viewitems() | d2.viewitems():
    d3[key]= d3.get(key,()) + item

print(d3)

{'a': ('x', 'y', 'm', 'n'), 'c': ('p', 'r'), 'b': ('k', 'l')}
  

 Or use  a defaultdict: 

  from collections import defaultdict
d3 = defaultdict(tuple)
for key, item in d1.viewitems() | d2.viewitems():
    d3[key] += item

print(d3)
  

 Or use viewkeys for your lists as they are not hashable: 

  d1 = {'a': ['x', 'y'], 'b': ['k', 'l']}
d2 = {'a': ['m', 'n'], 'c': ['p', 'r']}


d3 = {}

for key in d1.viewkeys() | d2.viewkeys():
    d3[key] = d1.get(key, []) + d2.get(key, [])

print(d3)
  

 Which you can write as a dict comp: 

  d3 = {key:d1.get(key, []) + d2.get(key, []) for key in  d1.viewkeys() | d2.viewkeys()}
  

 for lists you could also  chain the items: 

  d1 = {'a': ['x', 'y'], 'b': ['k', 'l']}
d2 = {'a': ['m', 'n'], 'c': ['p', 'r']}


from collections import defaultdict
d3 = defaultdict(list)
from itertools import chain
for key, v in chain.from_iterable((d1.items(),d2.items())):
    d3[key] += v

print(d3)

defaultdict(<type 'list'>, {'a': ['x', 'y', 'm', 'n'], 'c': ['p', 'r'], 'b': ['k', 'l']})
  

 For python3 just use  .items  and  .keys  as they return dictview objects. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8381589)
 I feel like consolidating info about Python dictionaries: 

 Creating an empty dictionary</h3>

  data = {}
# OR
data = dict()
  

 Creating a dictionary with initial values</h3>

  data = {'a':1,'b':2,'c':3}
# OR
data = dict(a=1, b=2, c=3)
# OR
data = {k: v for k, v in (('a', 1),('b',2),('c',3))}
  

 Inserting/Updating a single value</h3>

  data['a']=1  # Updates if 'a' exists, else adds 'a'
# OR
data.update({'a':1})
# OR
data.update(dict(a=1))
# OR
data.update(a=1)
  

 Inserting/Updating multiple values</h3>

  data.update({'c':3,'d':4})  # Updates 'c' and adds 'd'
  

 Creating a merged dictionary without modifying originals</h3>

  data3 = {}
data3.update(data)  # Modifies data3, not data
data3.update(data2)  # Modifies data3, not data2
  

 Deleting items in dictionary</h3>

  del data[key]  # Removes specific element in a dictionary
data.pop(key)  # Removes the key & returns the value
data.clear()  # Clears entire dictionary
  

 Check if a key is already in dictionary</h3>

  key in data
  

 Iterate through pairs in a dictionary</h3>

  for key in data: # Iterates just through the keys, ignoring the values
for key, value in d.items(): # Iterates through the pairs
for key in d.keys(): # Iterates just through key, ignoring the values
for value in d.values(): # Iterates just through value, ignoring the keys
  

 Create a dictionary from 2 lists</h3>

  data = dict(zip(list_with_keys, list_with_values))
  

 Feel free to add more! 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34961304)
 You can use a dictionary to categorize the sub-lists based on first two items then iterate over the items and calculate the sum : 

  >>> d = {}
>>> for sub in a:
...    d.setdefault(tuple(sub[:2]),[]).append(sub[2:])
... 

>>> 
>>> [k+tuple(map(sum, zip(*v))) for k,v in d.items()]
[(1, 2, 13, 12, 13), (1, 3, 4, 5, 7), (3, 4, 2, 3, 4)]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34098012)
 No that's impossible by definition. The way hash tables (like  dict s and  set s) do lookups is fundamentally unique from the way arrays (like  list s) do lookups. The logical error is that if you have a datatype that only saves duplicates, what happens if you mutate one of the elements to be non-unique? 

  a, b = [0], [0, 1]
s = SpecialSet(a, b)
a.append(1)  # NOW WHAT?!
  

 If you want to add a dictionary to a set, you can add the  dict.items  view of it (which is really just a list of tuples), but you have to cast to tuple first. 

  a = {1:2, 3:4}
s = set()
s.add(tuple(a.items()))
  

 Then you'd have to re-cast to dict that once it leaves the set to get a dictionary back 

  for tup in s:
    new_a = dict(tup)
  

 A built-in  frozendict  type was proposed in https://www.python.org/dev/peps/pep-0416/ but ultimately rejected. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1553483)
 Use collections.defaultdict: 

  import collections

likes = collections.defaultdict(list)

for key, value in favorites.items():
    likes[key].append(value)
  

  defaultdict  takes a single argument, a factory for creating values for unknown keys on demand.   list  is a such a function, it creates empty lists. 

 And iterating over .items() will save you from using the key to get the value. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/31930871)
 You need to add one more zip, since  dict  constructor accepts list of  tuple s, but not two  list s: 

  my_dict_3 = dict(zip(list1, zip(list2, list3)))
  

 Also note that  dict s in Python are not ordered and this code  sorted(my_dict.items(), key=operator.itemgetter(1), reverse=True)  returns list of  tuple s instead of  sorted   dict .  

 To sort  my_dict_3  you can use following code: 

  sorted_my_dict_3_items = sorted(my_dict_3.items(), key=lambda item: item[1][0], reverse=True)
sorted_my_dict_3 = OrderedDict(sorted_items)
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/24948920)
 You can use sets: 

  from itertools import product
pairs = set()
for (ak, av), (bk, bv) in product(a.items(), b.items()):
    if not set(av).intersection(set(bv)):
        pairs.add("%s+%s" % tuple(sorted([ak, bk])))
print pairs
  

    

  set(['bird+cat', 'cat+fish', 'cat+cat', 'cat+dog', 'dog+raccoon'])
  

 This can be more efficient if you have sets instead of lists in the first place. 



