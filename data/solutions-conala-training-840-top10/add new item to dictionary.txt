Query: add new item to dictionary
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6416157)
  

  default_data['item3'] = 3
  

 As https://stackoverflow.com/questions/6416131/python-add-new-item-to-dictionary/6416142#6416142 says, you can use http://docs.python.org/library/stdtypes.html#dict.update to add more than one item.  An example: 

  default_data.update({'item4': 4, 'item5': 5})
  

 Please see the docs about http://docs.python.org/tutorial/datastructures.html#dictionaries and http://docs.python.org/library/stdtypes.html#mapping-types-dict. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6416155)
  default_data['item3'] = 3
  

 answer must be so long. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6416142)
  default_data['item3'] = 3
  

 . 

  

  default_data.update({'item3': 3})
  

 which is nice if you want to insert multiple items at once. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/6416471)
 It occurred to me that you may have actually be asking how to implement the  +  operator for dictionaries, the following seems to work: 

  >>> class Dict(dict):
...     def __add__(self, other):
...         copy = self.copy()
...         copy.update(other)
...         return copy
...     def __radd__(self, other):
...         copy = other.copy()
...         copy.update(self)
...         return copy
... 
>>> default_data = Dict({'item1': 1, 'item2': 2})
>>> default_data + {'item3': 3}
{'item2': 2, 'item3': 3, 'item1': 1}
>>> {'test1': 1} + Dict(test2=2)
{'test1': 1, 'test2': 2}
  

 Note that this is more overhead then using  dict[key] = value  or  dict.update() , so I would recommend against using this solution unless you intend to create a new dictionary anyway. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/53771583)
 With a dict comprehension, you can enumerate through your dictionary and set the new values to the tuple of your existing values and the corresponding zip code: 

  new_dict = {k:tuple([v,zip_codes[i]]) for i, (k,v) in enumerate(dictionary.items())}
>>> new_dict
{1: ('a', 25840), 2: ('b', 26807), 3: ('c', 24739), 4: ('d', 26501)}
  

 Or very similarly, you can zip the dictionary and the zip codes and iterate through that: 

  new_dict = {k:tuple([v,z]) for z, (k,v) in zip(zip_codes,dictionary.items())}
>>> new_dict
{1: ('a', 25840), 2: ('b', 26807), 3: ('c', 24739), 4: ('d', 26501)}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/53771619)
 You can just use dictionary.update, and, since you are using numbers as dictionary keys, you can use a regular old  for  loop and don't even have to use  enumerate , but you have to remember that list indices start from 0 and your dictionary keys start from 1: 

  dictionary = {1:'a', 2:'b', 3:'c', 4:'d'}
zip_codes = [25840, 26807, 24739, 26501]

for i in range(1, len(zip_codes)+1):
    d1 = {i:[dictionary[i], zip_codes[i-1]]}
    dictionary.update(d1)

print(dictionary)
>>>{1: ['a', 25840], 2: ['b', 26807], 3: ['c', 24739], 4: ['d', 26501]}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28741549)
 Remove quotes if  item  and  value  are live variable in your code. 

 e.g. 

  >>> item = "b"
>>> value = "b2"
>>> d1 = {"a":"1a"}
>>> d1.update({'item': 'value'})
>>> d1
{'a': '1a', 'item': 'value'}
>>> d1.update({item: value})
>>> d1
{'a': '1a', 'item': 'value', 'b': 'b2'}
>>> 
  

 

 https://docs.python.org/2/library/stdtypes.html. 

 Update the dictionary with the key/value pairs from other, overwriting existing keys. .
update() accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two).  

 e.g. 

  >>> d2 = {"a": 1, "b": 2}
>>> d1 = {"c": 3}
>>> d1.update(d2)
>>> d1
{'a': 1, 'c': 3, 'b': 2}
  

 If keyword arguments are specified, the dictionary is then updated with those key/value pairs:  

 e.g. 

  >>> d1 = {"c": 3}
>>> d1.update(a=1, b=2)
>>> d1
{'a': 1, 'c': 3, 'b': 2}
  

 

 Set key and value into dictionary. 

 This will create new key if key is not present in dictionary and assign value to it. If key is present then this will replace value with new value. 

 e.g. 

  >>> d1 = {"c": 3}
>>> d1["e"] = 5
>>> d1
{'c': 3, 'e': 5}
>>> d1["e"] = 6
>>> d1
{'c': 3, 'e': 6}
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/30966976)
 First of all it doesn't added the item at the end of dictionary because dictionaries use hash-table to storing their elements and are unordered. if you want to preserve the order you can use  collections.OrderedDict .but it will appends the item at the end of your dictionary. One way is appending that item to the fist of your items then convert it to an Orderd: 

  >>> from collections import OrderedDict
>>> d=OrderedDict()
>>> for i,j in [(1,'a'),(2,'b')]:
...    d[i]=j
... 
>>> d
OrderedDict([(1, 'a'), (2, 'b')])
>>> d=OrderedDict([(3,'t')]+d.items())
>>> d
OrderedDict([(3, 't'), (1, 'a'), (2, 'b')])
  

 Also as another efficient way if it's not necessary to use a dictionary you can use a  deque  that allows you to append from both side : 

  >>> from collections import deque
>>> d=deque()
>>> d.append((1,'a'))
>>> d.append((4,'t'))
>>> d
deque([(1, 'a'), (4, 't')])
>>> d.appendleft((8,'p'))
>>> d
deque([(8, 'p'), (1, 'a'), (4, 't')])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13411724)
 You are setting  items  to a new empty dictionary every time you call  additem .  So it always erases whatever's there before adding a new item.  Instead, set  items = {}  once outside the function.  There is also no point in doing  self.item = str(item)  (and the same for the price), because this will just overwrite the existing  self.item , so you'll only have access to the most recent one. 

 Actually, what you probably should do is make  items  an attribute of the object, like this: 

  class Store:

    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.items = {}

    # rest of your code here. . .

    def additem(self, item, price):
        self.items[str(item)] = float(price)

    def delitem(self, item):
        del self.items[str(item)]

    def displayinventory(self):
        return self.items
  

 The way you're doing it, there's only one global  items  dict that will be shared among all Stores.  The above way gives each store its own items dict so it can keep its own record of its own items. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/14234060)
 You have to define your dictionary ( d  is a nice name). You can do it this way: 

  with open('C:/Temp/file1.txt') as f:#
    d = dict(line.strip().split('=', 1) for line in f)

for k,v in d.iteritems():
    print("param = {0}, value = {1}".format(k,v))
  



