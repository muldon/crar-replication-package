Query: Pandas: Elementwise multiplication of two dataframes
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/49544431)
 To utilize Pandas broadcasting properties, you can use https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.multiply.html. 

  df.multiply(df3['col1'], axis=0)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21023432)
 Another way is create list of columns and join them: 

  cols = [pd.DataFrame(df[col] * df3.col1, columns=[col]) for col in df]
mul = cols[0].join(cols[1:])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45789309)
   pandas     

  (df1.gt(.5) & df2.lt(.3) & df3.gt(.6)).astype(int)

            a  b  c
2000-01-01  0  0  0
2000-01-02  1  0  0
2000-01-03  0  0  0
2000-01-04  0  0  0
2000-01-05  0  0  0
  

 

  with some  numpy  v1  

  pd.DataFrame(
    (
        (df1.values > .5) &
        (df2.values < .3) &
        (df3.values > .6)
    ).astype(int),
    df1.index, df1.columns
)

            a  b  c
2000-01-01  0  0  0
2000-01-02  1  0  0
2000-01-03  0  0  0
2000-01-04  0  0  0
2000-01-05  0  0  0
  

 

  with some  numpy  v2  

  pd.DataFrame(
    np.where(
        (df1.values > .5) &
        (df2.values < .3) &
        (df3.values > .6), 1, 0
    ),
    df1.index, df1.columns
)

            a  b  c
2000-01-01  0  0  0
2000-01-02  1  0  0
2000-01-03  0  0  0
2000-01-04  0  0  0
2000-01-05  0  0  0
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/34113967)
 Use  dot : 

  import numpy as np
import pandas as pd

np.random.seed(0)

# Numpy
m1 = np.random.randn(5, 5)
m2 = np.random.randn(5, 5)

>>> m1.dot(m2)
array([[ -5.51837355,  -4.08559942,  -1.88020209,   2.88961281,
          0.61755013],
       [  1.4732264 ,  -0.2394676 ,  -0.34717755,  -4.18527913,
         -1.75550855],
       [ -0.1871964 ,   0.76399007,  -0.26550057,  -3.43359244,
         -0.68081106],
       [ -0.23996774,   0.95331428,  -2.833788  ,  -0.37940614,
          0.05464387],
       [  3.73328914,  -0.59578959,   3.96803224, -10.65362381,
         -4.34460348]])

# Pandas
df1 = pd.DataFrame(m1)
df2 = pd.DataFrame(m2)

>>> df1.dot(df2)
          0         1         2          3         4
0 -5.518374 -4.085599 -1.880202   2.889613  0.617550
1  1.473226 -0.239468 -0.347178  -4.185279 -1.755509
2 -0.187196  0.763990 -0.265501  -3.433592 -0.680811
3 -0.239968  0.953314 -2.833788  -0.379406  0.054644
4  3.733289 -0.595790  3.968032 -10.653624 -4.344603

df3 = pd.DataFrame(np.random.randn(5, 3))
df4 = pd.DataFrame(np.random.randn(3, 5))

>>> df3.dot(df4)
          0         1         2         3         4
0  0.991673  1.954500  0.322110  0.493841  0.080462
1  0.160482  1.548039 -0.826426  0.972538 -0.048610
2  0.628194  0.482943  0.742597 -0.236226  0.089525
3 -0.098316  0.817702 -0.725945  1.271506 -0.309596
4 -1.053413  0.948427 -2.445940  2.814147 -0.726829
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46361100)
 This works for me: 

  mul = df.mul(df3.c, axis=0)
  

 Or, when you want to subtract (divide) instead:  

  sub = df.sub(df3.c, axis=0)
div = df.div(df3.c, axis=0)
  

 Works also with a  nan  in df (e.g. if you apply this to the df:  df.iloc[0]['col2'] = np.nan)  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47585387)
 You can using  numpy  + pandas  

  df_new=pd.DataFrame(data=np.concatenate(df1.values[:,None]*df2.values),
           columns=df1.columns,
             index=np.concatenate(df1.index.values[:,None]+df2.index.values))
df_new.index=pd.MultiIndex.from_tuples(df_new.index)
df_new
Out[162]: 
             v1  v2  v3  v4  v5
A 1990 5  M   0   0   2   0   4
          F   1   0   2   1   4
       10 M   1   0   0   0   0
          F   0   3   2   0   0
  2000 5  M   0   0   0   0   1
          F   2   0   0   3   1
       10 M   2   0   0   0   0
          F   0   5   0   0   0
B 1990 5  M   0   0   1   0   1
          F   6   0   1   2   1
       10 M   6   0   0   0   0
          F   0   2   1   0   0
  2000 5  M   0   0   5   0   0
          F   3   0   5   0   0
       10 M   3   0   0   0   0
          F   0   4   5   0   0
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46580760)
 You can convert the elements in df2 to list using applymap and then just ordinary addition to combine the list i.e  

  index = ['fst', 'scd']

column = ['a','b']


A = pd.DataFrame([[[1, 2],[1, 4]],[[3, 4],[3, 2]]],index,column)
B = pd.DataFrame([[0.392414,0.264117],[ 0.641136 , 1.644251]],index,column)
  

  Option 1  : 

  n =  B.applymap(lambda y: [y])
ndf = A.apply(lambda x : x+n[x.name])
  

  Option 2  :
using  pd.concat  to know how this works check https://stackoverflow.com/questions/46583382/how-to-flatten-rows-having-similar-index-in-pandas i.e  

  pd.concat([A,B]).groupby(level=0).apply(lambda g: pd.Series({i: np.hstack(g[i].values) for i in A.columns}))
  

 To make you current method give correct output shift the loops i.e  

  pd.DataFrame([[np.append(A.loc[i,j], B.loc[i,j]) for j in A.columns] for i in A.index], columns=A.columns, index=A.index)
  

 Output: 

 
                       a                     b
fst  [1.0, 2.0, 0.392414]  [1.0, 4.0, 0.264117]
scd  [3.0, 4.0, 0.641136]  [3.0, 2.0, 1.644251]
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/41773719)
 Simply combine the dataframes and use  .corr() : 

  result = pd.concat([df1, df2], axis=1).corr()
#     A    B    C    D
#A  1.0  1.0  1.0  1.0
#B  1.0  1.0  1.0  1.0
#C  1.0  1.0  1.0  1.0
#D  1.0  1.0  1.0  1.0
  

 The result contains all wanted (and also some unwanted) correlations. E.g.: 

  result[['C','D']].ix[['A','B']]
#     C    D
#A  1.0  1.0
#B  1.0  1.0
  



