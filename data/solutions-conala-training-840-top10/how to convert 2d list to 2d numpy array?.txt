Query: how to convert 2d list to 2d numpy array?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/47968846)
 If you build a 2D list and convert it to numpy with  np.array()  it will return a numpy array with 2 dimensions. 

 If you build a 3D list and convert it to numpy with  np.array()  it will return a numpy array with 3 dimensions. 

 Minimal working example: 

  my_list = [[[0,1,2],[0,1,2]],[[0,1,2],[0,1,2]]]
my_list
  

 
   [[[0, 1, 2], [0, 1, 2]], [[0, 1, 2], [0, 1, 2]]] 
 

  my_np_array = np.array(my_list)
my_np_array.shape
  

 
   (2, 2, 3) 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21322767)
 You can just call  np.array  on the list of 1D arrays. 

  >>> import numpy as np
>>> arrs = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]
>>> arrs
[array([1, 2, 3]), array([4, 5, 6]), array([7, 8, 9])]
>>> arr2d = np.array(arrs)
>>> arr2d.shape
(3, 3)
>>> arr2d
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53481646)
 You can use  *  operator on list. 

  import numpy as np
arr = np.array(3*[range(0,5)])
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38258158)
 The array may be recreated: 

  a = np.array(a.tolist())
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14681777)
 I think you should use numpy, which is purpose-built for working with matrices/arrays, rather than a list of lists.  That would look like this: 

  >>> import numpy as np
>>> list_ = [0,1,2,3]
>>> a = np.array(list_).reshape(2,2)
>>> a
array([[0, 1],
       [2, 3]])
>>> a.shape
(2, 2)
  

 Avoid calling a variable  list  as it shadows the built-in name.   


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13747443)
 dataPoints is not a 2d list. Convert it first into a 2d list and then it will work: 

  d=np.array(dataPoints.tolist())
  

 Now d is (100,3) as you wanted. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7717418)
 Just pass the list to  np.array : 

  a = np.array(a)
  

 You can also take this opportunity to set the  dtype  if the default is not what you desire. 

  a = np.array(a, dtype=...)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/46153483)
 I am using large data sets exported to a python file in the form 

  XVals1 = [.........] 
XVals2 = [.........] 
  

 Each list is of identical length.  I use 

  >>> a1 = np.array(SV.XVals1)

>>> a2 = np.array(SV.XVals2)
  

  

  >>> A = np.matrix([a1,a2])
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/35976847)
 also you can use  zip  function like this 

  In [1]: import numpy as np

In [2]: list1 = [ 2, 7 , 8 , 5]

In [3]: list2 = [18 ,29, 44,33]

In [4]: list3 = [2.3, 4.6, 8.9, 7.7]

In [5]: np.array(zip(list1,list2,list3))
Out[5]: 
array([[  2. ,  18. ,   2.3],
       [  7. ,  29. ,   4.6],
       [  8. ,  44. ,   8.9],
       [  5. ,  33. ,   7.7]])
  



