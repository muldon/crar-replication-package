Query: Play a Sound with Python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/307316)
 pyMedia's sound example does http://pymedia.org/tut/play_wav.html. This should be all you need. 

  import time, wave, pymedia.audio.sound as sound
f= wave.open( 'YOUR FILE NAME', 'rb' )
sampleRate= f.getframerate()
channels= f.getnchannels()
format= sound.AFMT_S16_LE
snd= sound.Output( sampleRate, channels, format )
s= f.readframes( 300000 )
snd.play( s )
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/307501)
 http://www.speech.kth.se/snack/ can play wav, au and mp3 files.   

  s = Sound() 
s.read('sound.wav') 
s.play()
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14018627)
 You can see this: http://www.speech.kth.se/snack/ 

  s = Sound() 
s.read('sound.wav') 
s.play()
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7592937)
 After the play() command add a delay of say 10 secs or so, it'll work 

  import pygame

import time

pygame.init()

pygame.mixer.music.load("test.wav")

pygame.mixer.music.play()

time.sleep(10)
  

 This also plays .mp3 files. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/43758468)
  if key == 113: #theq key
        winsound.Playsound(None, windsound.SND_FILENAME)
        winsound.PlaySound(sound_path, winsound.SND_FILENAME)
  

 If the sound parameter is None, any currently playing waveform sound is stopped. So do that before every sound file played. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/26294211)
 The trick is that you get an object of type  pygame.mixer.Channel  when you call the  play()  method of a sound ( pygame.mixer.Sound ). You can test if the sound is finished playing using the channel's  get_busy()  method. 

 A simple example: 

  import pygame.mixer, pygame.time

mixer = pygame.mixer

mixer.init()
tada = mixer.Sound('tada.wav')
channel = tada.play()

while channel.get_busy():
    pygame.time.wait(100)  # ms
    print "Playing..."
print "Finished."
  

 The examples assumes you have a sound file called 'tada.wav'. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11382133)
 sounda.play() returns an object which is necessary for playing the sound. With it you can also find out if the sound is still playing: 

  channela = sounda.play()
while channela.get_busy():
   pygame.time.delay(100)
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/53619742)
 In order to play sound effects over music (or sound effects over other sound effects), you can use Channels. for example: 

  # initialize
pygame.mixer.pre_init()
pygame.mixer.init()
pygame.init()

# start playing the background music
pygame.mixer.music.load(os.path.join(os.getcwd(), 'sound', 'main_theme.wav'))
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(loops=-1)  # loop forever
  

 Then later in the code, you can play sound effects through Channels: 

  # play a sound on channel 0 with a max time of 600 milliseconds
pygame.mixer.Channel(0).play(pygame.mixer.Sound('sound\gun_fire.wav'), maxtime=600)

# you can play a longer sound on another channel and they won't conflict
pygame.mixer.Channel(1).play(pygame.mixer.Sound("sound\death.wav"), maxtime=2000)
  

 For more information on https://www.pygame.org/docs/ref/mixer.html#pygame.mixer.Channel 

 if you are looking to set the volume of an individual channel, you can use the https://www.pygame.org/docs/ref/mixer.html#pygame.mixer.Channel.set_volume function: 

  channel.set_volume(0.5)  # play at 50% volume
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/15323370)
 I just released a simple python wrapper around sox that will play a sound with Python.  It's very easy to install as you need Python 2.6 or greater, sox (easy to get binaries for most architectures) and the wrapper ( https://github.com/standarddeviant/sound4python ).  If you don't have sox, go here: http://sourceforge.net/projects/sox/files/sox/ 

 You would play audio with it by: 

  from sound4python import sound
import random
a = []
for idx in xrange(1*16000):
    a.append(random.randint(-16384,16384))
sound(a)
  

 Keep in mind, the only parts actually involved in playing audio are just these: 

  from sound4python import sound
...
sound(a)    
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/22023285)
 points_sound.play() should return a channel object. This object is necessary for playing the sound. 

  points_channel = points_sound.play()
  

 This has me helped in my own case. 



