Query: retrieving list items from request.POST in django/python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37723949)
 Try following django >1.4 and use  

  request.POST.dict()
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3303396)
  request.POST  is a dictionary-like object containing all given HTTP POST parameters.  

 When you loop through  request.POST , you only get the keys.  

  for key in request.POST:
    print(key)
    value = request.POST[key]
    print(value)
  

 To retrieve the keys and values together, use the https://docs.djangoproject.com/en/1.9/ref/request-response/#django.http.QueryDict.items method. 

  for key, value in request.POST.items():
    print(key, value)
  

 Note that  request.POST  can contain multiple items for each key. If you are expecting multiple items for each key, you can use https://docs.djangoproject.com/en/1.9/ref/request-response/#django.http.QueryDict.lists, which returns all values as a list. 

  for key, values in request.POST.lists():
    print(key, values)
  

 For more information see the Django docs for https://docs.djangoproject.com/en/1.9/ref/request-response/#django.http.QueryDict. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13798405)
 Try this you get list of videos based on filter 

  user_channel = Everything.objects.filter(profile = request.user, playlist = 'Channel')
video = [x.video for x in user_channel]
print video/print video[0]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4456403)
  request.POST  is a http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict - if you're expecting multiple values for a key, use its  getlist  method.: 

  debug = data.getlist('tags')
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/46671399)
 When accessing  request.GET  and  request.POST , you don't get a regular dictionary, you get a https://docs.djangoproject.com/en/1.11/ref/request-response/#querydict-objects object. When accessed as a dictionary, it returns the last value for a key. If you want the full list, use the https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.QueryDict.getlist method, for instance: 

  request.POST.getlist("somekey")
  

 
   Returns a list of the data with the requested key. 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/8274757)
  

  list = request.POST.getlist('list')
  

 also consider changing the name of variable  list  to something else, it's a built in type. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/46671375)
 Try using https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.QueryDict.getlist 

  request.POST.getlist('categoryes[]')
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/17689721)
 I had this problem on a line like this, it was taking about 1.0 second! It's in a flask post handler: 

  username=request.form.get('username')
  

 I was testing it with curl -F: 

  curl -F username="x" http://127.0.0.1:5000/func
  

 I just changed -F to -d and it got 0.0004 seconds!!! 

  curl -d username="x" http://127.0.0.1:5000/func
  

 I think flask has a problem to retrieving "multipart/form-data" content-type. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/26198674)
 There's not need to do any of that.  

  self.request.get('variable_name')
  

 Notice that I'm not specifying the method (GET, POST, etc). This is https://cloud.google.com/appengine/docs/python/tools/webapp/requestclass#Request_get and https://cloud.google.com/appengine/docs/python/gettingstartedpython27/handlingforms 

 The fact that you use Django templates doesn't mean the handler is processed by Django as well 



