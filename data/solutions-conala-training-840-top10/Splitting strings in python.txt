Query: Splitting strings in python
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43323538)
 Using regular expression splitting with  re : 

  import re


txt = 'Hans went to house number 10 92384 29349'

' | '.join(re.split('\s(?=\d)',txt))

# 'Hans went to house number | 10 | 92384 | 29349'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3345062)
  s = re.split(r"[~\r\n]+", string_to_split)
  

 This will give you a list of strings in s. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/24042690)
 You should split on the https://docs.python.org/2/library/re.html#regular-expression-syntax  [+-/*]  after removing the whitespace from the string: 

  >>> import re
>>> def mysplit(mystr):
...     return re.split("([+-/*])", mystr.replace(" ", ""))
...
>>> mysplit("A7*4")
['A7', '*', '4']
>>> mysplit("Z3+8")
['Z3', '+', '8']
>>> mysplit("B6 / 11")
['B6', '/', '11']
>>>
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14355561)
 If you don't need whitespace you could use : 

  "t1, t2, t3,t4".replace(" ", "").split(",")
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/34062151)
 Use https://docs.python.org/2/library/stdtypes.html?highlight=join#str.join when concatenating strings: 

  lst = []
for line in my_file:
    if 'chr' in line:   
        word = line.split("\t")
        lst.extend(word[7].split(";"))
        lst.extend(word[9].split(":"))
        lst.extend(adp[0].split("="))
        out = '\t'.join(lst)
        outputfile.write(out)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/349386)
 If the big string you're receiving is merely delimited then you could try splitting it. See http://www.java2s.com/Code/Python/String/Splittingstrings.htm. 

 To clarify, you get the delimited list of the strings, split that list into a python list, and voila!, you have a python list... 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/42051968)
 You may also use https://docs.python.org/2/library/itertools.html#itertools.groupby with  key  as https://docs.python.org/2/library/stdtypes.html#str.isdigit to achieve this as: 

  >>> from itertools import groupby
>>> my_list = ['17.', '0,5', ',5', 'CO2-heidet', '1990ndatel']

>>> [[''.join(j) for i, j in groupby(l, str.isdigit)] for l in my_list]
[['17', '.'], ['0', ',', '5'], [',', '5'], ['CO', '2', '-heidet'], ['1990', 'ndatel']]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/5286571)
  def flatten(foo):
    for x in foo:
        if hasattr(x, '__iter__'):
            for y in flatten(x):
                yield y
        else:
            yield x
  

 (Strings conveniently do not actually have an  __iter__  attribute, unlike pretty much every other iterable object in Python. Note however that this changes in Python 3, so the above code will only work in Python 2.x.) 

 Version for Python 3.x:</h3>

  def flatten(foo):
    for x in foo:
        if hasattr(x, '__iter__') and not isinstance(x, str):
            for y in flatten(x):
                yield y
        else:
            yield x
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21905220)
 Seems question is not about strings equality, but of  sets  equality. You can compare them this way  only  by splitting strings and converting them to sets: 

  s1 = 'abc def ghi'
s2 = 'def ghi abc'
set1 = set(s1.split(' '))
set2 = set(s2.split(' '))
print set1 == set2
  

 Result will be 

  True
  



