Query: Python: How to write multiple strings in one line?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/29700710)
 below line works for me, 

   target.write(line1 + line + line2 + line + line3 + line)
  

 Before that i added 

   line = '\n'
  

 my code like: 

   from sys import argv
 script, filename = argv
 print 'Appending process starts on: %r' % filename
 target = open(filename, 'a')
 print 'Enter the contents:\t'
 line1 = raw_input('Next:\t')
 line2 = raw_input('Next:\t')
 line3 = raw_input('Next:\t')
 line = '\n'
 target.write(line1 + line + line2 + line + line3 + line)
 print 'Thank you !'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6931443)
  with open('output', 'w') as fp:
    while True:
        a, x, y, z = calculate_a(), calculate_x(), calculate_y(), calculate_z()
        fp.write('{} {} {} {}\n'.format(a, x, y, z)
  

 or, if you want to collect all the values and then write them all at once 

  with open('output', 'w') as fp:
    lines = []
    while True:
        a, x, y, z = calculate_a(), calculate_x(), calculate_y(), calculate_z()
        lines.append('{} {} {} {}\n'.format(a, x, y, z))
    fp.writelines(lines)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20702545)
 Here is a suggestion to deal with files, I suppose the pattern you search is a whole line (there is nothing more on the line than the pattern and the pattern fits on one line). 

<pre class="lang-py prettyprint-override"> line = ... # What to match
input_filepath = ... # input full path
output_filepath = ... # output full path (must be different than input)
with open(input_filepath, "r", encoding=encoding) as fin \
     open(output_filepath, "w", encoding=encoding) as fout:
    pattern_found = False
    for theline in fin:
        # Write input to output unmodified
        fout.write(theline)
        # if you want to get rid of spaces
        theline = theline.strip()
        # Find the matching pattern
        if pattern_found is False and theline == line:
            # Insert extra data in output file
            fout.write(all_data_to_insert)
            pattern_found = True
    # Final check
    if pattern_found is False:
        raise RuntimeError("No data was inserted because line was not found")
  

 This code is for Python 3, some modifications may be needed for Python 2, especially the  with  statement (see http://docs.python.org/2.7/library/contextlib.html#contextlib.nested. If your pattern fits in one line but is not the entire line, you may use  "theline in line"  instead of  "theline == line" . If your pattern can spread on more than one line, you need a stronger algorithm. :) 

 To write to the same file, you can write to another file and then move the output file over the input file. I didn't plan to release this code, but I was in the same situation some days ago. So here is a class that insert content in a file between two tags and support writing on the input file: https://gist.github.com/Cilyan/8053594 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8691360)
  target.write(line1 \n, line2 \n, line3 \n)
  

 \n only make sense inside a string literal. Without the quotes, you dont have string literals. 

  target.write(line1 \n, line2 \n, line3 \n)
  

 Ok, now everything is a string literal. But you want line1, line2, line3 to not be string literals. You need those as python expressions to refer the variables in question. Basically, you have to put quotes around strings that are actually text like "\n" but not around variables. If you did that, you might have gotten something like: 

  target.write(line1 \n line2 \n line3 \n)
  

 What is  2 2 ? Its nothing. You have to specify to python how to combine the two pieces. So you can have  2 + 2  or  2 * 2  but  2 2  doesnt make any sense. In this case, we use add to combine two strings 

  target.write(line + \n + line2 + \n + line3 + \n)
  

  

  target.write(%r \n, %r \n, %r \n) % (line1, line2, line3)
  

 Again  \n  only makes sense inside a string literal. The % operator when used to produce strings takes a string as its left side. So you need all of that formatting detail inside a string. 

  target.write(%r \n, %r \n, %r \n) % (line1, line2, line3)
  

 But that produce 3 string literals, you only want one. If you did this, write complained because it excepts one string, not 3. So you might have tried something like: 

  target.write(%r \n%r \n%r \n) % (line1, line2, line3)
  

 But you want to write the line1, line2, line3 to the file. In this case, you are trying to the formatting after the write has already finished. When python executes this it will run the target.write first leaving: 

  None % (line1, line2, line3)
  

 Which will do nothing useful.  To fix that we need to to put the  % ()  inside the  .write()  

  target.write(%r\n%r\n%r\n % (line1, line2, line3))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/8691338)
 Here's one way: 

  target.write(line1 + '\n' + line2 + '\n' + line3 + '\n')
  

 The reason the following doesn't work 

  target.write(line1 \n, line2 \n, line3 \n)
  

 Is that  line1  is a variable (note it's not quoted) but  '\n'  is a string literal (since it's in quotes).  The addition operator is overloaded for strings to concatenate (combine) them. 

 The reason this doesn't work: 

  target.write('line1 \n, line2 \n, line3 \n')
  

 Is because  line1  is a variable.  When you put it in quotes, it's no longer treated as a variable. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/6932307)
 One-liner for the lulz: 

  open('file','w').writelines(' '.join(j+str(i) for j in strings) + '\n' for i in range(1,len(strings)+1))
  

 You can separate the file operation with  with  if you want.
You must provide  strings = 'axyz'  or  strings = ['some', 'other', 'strings', 'you', 'may', 'have']  

 And, if your numbers aren't always  1, 2, 3, 4 , replace  range(1,len(strings)+1)  with your list... 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8691323)
 Your last try looks promising.  

  "%s \n %s \n %s" % (line1, line2, line3)
  

 this applies the operator  %  to a string (with 3  %s  placeholders) and a tuple of values to substitute (here, strings). The result is the formatted string. 

 So you'd need to wrap that in the function which takes the result: 

  target.write("%s \n %s \n %s" % (line1, line2, line3) )
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/44586921)
 You need to convert them to strings and strip them to remove any tailing characters. 

  str(value1).strip() + str(value2).strip()
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6022146)
 there are several ways to do this. for example just using  +  should do the trick. 

 "abc" + "def" # produces "abcdef" 

 If you try to concatenate multiple strings you can do this with the join method: 

  ', '.join(('abc', 'def', 'ghi')) # produces 'abc, def, ghi'
  

 If you want no delimiter, use the empty string  ''.join()  method. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/37799510)
 You can collect the strings you want to write to the file in a list (etc.) and then use python's built-in file operations, namely  open(<file>)  and  <file>.write(<string>) , as such: 

  strings = ['hello', 'world', 'today']

# Open the file for (a)ppending, (+) creating it if it didn't exist
f = open('file.txt', 'a+')

for s in strings:
    f.write(s + "\n")
  

 See also: https://stackoverflow.com/questions/4706499/how-do-you-append-to-a-file-in-python 



