Query: Convert list of strings to int
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/7368914)
 Use a https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions: 

  results = [int(i) for i in results]
  

 e.g. 

  >>> results = ["1", "2", "3"]
>>> results = [int(i) for i in results]
>>> results
[1, 2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33130583)
 Use  isdigit  method of string: 

  numbers = [int(s) if s.isdigit() else float(s) for s in numbers]
  

 or with map: 

  numbers = map(lambda x: int(x) if x.isdigit() else float(x), numbers)
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34696928)
 You can read the whole input and use a regular expression: 

  import sys
import re

numbers = map(int, re.findall(r'\d+', sys.stdin.read()))
print numbers, sum(numbers)
  

  

  11 22
33
  

 The output is 

  [11, 22, 33] 66
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/26229596)
 you can you simple list comprehension :) 

  results = [int(i) if i.isdigit() else i for i in L]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9088057)
 Because  str(a)  gives you the string representation of a list, ie, "[3]". 

  

  "".join([str(elem) for elem in a])
  

 to convert the list of ints to a list of strings before joining. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10206053)
 If your strings are not only numbers (ie. u''), you can use : 

  new = [int(i) for i in ["1", "2", "3"] if isinstance(i, int) or isinstance(i, (str, unicode)) and i.isnumeric()]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/7368801)
 Use the https://docs.python.org/2/library/functions.html#map function (in Python 2.x): 

  results = map(int, results)
  

 In Python 3, you will need to convert the result from <a href="https://docs.python.org/3/library/functions.html#map"  to a list: 

  results = list(map(int, results))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/50550118)
 Use the  ast module . 

    

  import ast
l = ['1' , '2.2' , '3']
print([ast.literal_eval(i) for i in l])
  

  Output:  

  [1, 2.2, 3]
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/33130411)
 Use a helper function: 

  def int_or_float(s):
    try:
        return int(s)
    except ValueError:
        return float(s)
  

 Then use a list comprehension to apply the function: 

  [int_or_float(el) for el in lst] 
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/9571360)
 If you want to keep the integers as they are in the list while just changing the strings to unicode, you can do 

  x = ['Some strings.', 1, 2, 3, 'More strings!']
y = [i.decode('UTF-8') if isinstance(i, basestring) else i for i in x]
  

 which gets you 

  [u'Some strings.', 1, 2, 3, u'More strings!']
  



