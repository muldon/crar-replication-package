Query: Python date string formatting
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30819460)
 You can use  datetime.strptime  with a proper format : 

  >>> datetime.strptime('15-MARCH-2015','%d-%B-%Y')
datetime.datetime(2015, 3, 15, 0, 0)
  

 Read more about  datetime.strptime  and date formatting: https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14847064)
 If you use the  python-dateutil  library (https://crate.io/packages/python-dateutil/) you can convert that value to a  datetime . 

  >>> dateutil.parser.parse('2013-03-14T14:15:23-07:00')
datetime.datetime(2013, 3, 14, 14, 15, 23, tzinfo=tzoffset(None, -25200))
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/36362288)
 If you know the location in the string and the date formatting, you can use slicing together with  strptime : 

  import datetime as dt

>>> dt.datetime.strptime(string[:10], '%Y-%m-%d').date()
datetime.date(2014, 12, 4)
  

 If you want to use a package such as pandas: 

  >>> pd.to_datetime(string[:10])
Timestamp('2014-12-04 00:00:00')
  

 You can also use the https://pypi.python.org/pypi/python-dateutil package: 

  from dateutil.parser import parse

parse(string[:10]).date()
datetime.date(2014, 12, 4)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43201225)
 Just for fun, I endend up with this solution. 

  a = datetime.datetime(1322, 10, 10)
# %Y%m%d
''.join(map(lambda x: '{:02}'.format(getattr(a, x)), ('year', 'month', 'day')))
# %Y-%m-%d
'-'.join(map(lambda x: '{:02}'.format(getattr(a, x)), ('year', 'month', 'day')))
# %Y%m%d%H%M%S
''.join(map(lambda x: '{:02}'.format(getattr(a, x)), ('year', 'month', 'day', 'hour', 'minute', 'second')))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27641734)
 You can use  strptime  from datetime module to get python compatible date time from your query result using a format string. (You might have to play with the format string a bit to suit your case) 

  ts = '2015-03-01T17:09:00.000+0000' to a format string like
f = '%Y-%m-%dT%H:%M:%S.%f%z'
date_from_sql = datetime.datetime.strptime(ts, f)
now = datetime.datetime.now()
delta = date_from_sql - now
  

 The .000 is probably microseconds (denoted by %f in the format string) and the +0000 is the utc offset (denoted by %z in the format string). Check this out for more formatting options: https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior 

 Check out this thread for an example: https://stackoverflow.com/questions/14291636/what-is-the-proper-way-to-convert-between-mysql-datetime-and-python-timestamp 

 Checkout this for more on strptime https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/1712130)
 You can find all the string format codes here: http://au2.php.net/strftime 

  In [1]: import datetime

In [2]: today=datetime.date.today()

In [3]: yesterday=today-datetime.timedelta(1)

In [4]: yesterday.strftime('%m%d%y')
Out[4]: '110909'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/10624968)
 You can use http://docs.python.org/2/library/time.html#time.strftime to help you format your date. 

 E.g., 

  import datetime
t = datetime.datetime(2012, 2, 23, 0, 0)
t.strftime('%m/%d/%Y')
  

  

  '02/23/2012'
  

 More information about formatting see http://docs.python.org/library/datetime.html#strftime-strptime-behavior 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/18098927)
 Use date formatting with http://docs.python.org/2/library/datetime.html#datetime.date.strftime: 

  difference.strftime('%Y%m%d')
  

  

  >>> from datetime import date
>>> difference = date.today()
>>> difference.strftime('%Y%m%d')
'20130807'
  

 You can do the same with the separate integer components of the  date  object, but you need to use the right string formatting parameters; to format an integer to two digits with leading zeros, use  %02d , for example: 

  localexpiry = '%04d%02d%02d' % (difference.year, difference.month, difference.day)
  

 but using  date.strftime()  is more efficient. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/11148911)
 You want  datetime.strptime , it parses text into datetimes: 

  >>> d = "2012-06-21 20:36:11"
>>> datetime.datetime.strptime(d, "%Y-%m-%d %H:%M:%S")
datetime.datetime(2012, 6, 21, 20, 36, 11)
  

 Formatting the date in the way you want is almost doable: 

  >>> datetime.datetime.strftime(t, "%d %B %Y %H:%m")
'21 June 2012 20:06'
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/36947330)
  

  lines = [
'Stand-Up: "Weird Al" Yankovic',   
'Stand-Up: "Weird Al" Yankovic HD',    
'Doug Benson 3 HD',    
'Midnight 11-14-13',   
'Midnight 11-14-13 HD',    
'Midnight 01-06-14',   
'Midnight 01-06-14 HD',    
'Midnight 01-07-14'  
]

def clean_string(string):
    clean = string
    if ":" in string:
        clean = string.split(":")[0]
    else:
        if string.endswith(" HD"):
            string = string.replace(" HD", "")
        clean = string.split(" ")
        try:
            datetime.strptime(clean[-1], '%m-%d-%y')
            clean = string.replace(clean[-1], "")
        except ValueError:
            clean = string
    return clean
  

 It actually tries to convert the date string to a date; meaning it won't strip out invalid dates (after all, they could be values). If you don't care about this, you can replace it with a regex that finds all numbers,  str 's  isdigit()  method or something similar. 

 Output: 

  >>> for line in lines:
...     print clean_string(line)
... 
Stand-Up
Stand-Up
Doug Benson 3
Midnight
Midnight
Midnight
Midnight
Midnight
>>> 
  



