Query: Pythonic way to insert every 2 elements in a string
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3258802)
 If you want to preserve the last character if the string has an odd length, then you can modify KennyTM's answer to use http://docs.python.g/library/itertools.html#itertools.izip_longest: 

  >>> s = "aabbccd"
>>> from itertools impt izip_longest
>>> '-'.join(a+b f a,b in izip_longest(s[::2], s[1::2], fillvalue=""))
'aa-bb-cc-d'
  

  

  >>> t = iter(s)
>>> '-'.join(a+b  f a,b in izip_longest(t, t, fillvalue=""))
'aa-bb-cc-d'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3258596)
 Assume the string's length is always an even number, 

  >>> s = '12345678'
>>> t = iter(s)
>>> '-'.join(a+b for a,b in zip(t, t))
'12-34-56-78'
  

 The  t  can also be eliminated with 

  >>> '-'.join(a+b for a,b in zip(s[::2], s[1::2]))
'12-34-56-78'
  

 

 The algorithm is to group the string into pairs, then join them with the  -  character.  

 The code is written like this. Firstly, it is split into odd digits and even digits. 

  >>> s[::2], s[1::2]
('1357', '2468')
  

 Then http://docs.python.org/py3k/library/functions.html#zip is used to combine them into an iterable of tuples. 

  >>> list( zip(s[::2], s[1::2]) )
[('1', '2'), ('3', '4'), ('5', '6'), ('7', '8')]
  

 But tuples aren't what we want. This should be a list of strings. This is the purpose of the list comprehension 

  >>> [a+b for a,b in zip(s[::2], s[1::2])]
['12', '34', '56', '78']
  

 Finally we use http://docs.python.org/py3k/library/stdtypes.html#str.join to combine the list. 

  >>> '-'.join(a+b for a,b in zip(s[::2], s[1::2]))
'12-34-56-78'
  

 The first piece of code is the same idea, but consumes less memory if the string is long. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4296986)
 Here's a list based solution: 

  import random

def insert_spaces(s):
    s = list(s)
    for i in xrange(len(s)-1):
        while random.randrange(2):
            s[i] = s[i] + ' '
    return ''.join(s)
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/31040944)
 I've got two one liners. 

  

  >>> letters = ['a','b','c','d','e','f','g','h','i','j']
  

 
  Use  enumerate  to get index, add  'x'  every 3<sup>rd</sup> letter,  eg :  mod(n, 3) == 2 , then concatenate into string and  list()  it. 

  >>> list(''.join(l + 'x' * (n % 3 == 2) for n, l in enumerate(letters)))

['a', 'b', 'c', 'x', 'd', 'e', 'f', 'x', 'g', 'h', 'i', 'x', 'j']
  

 But as https://stackoverflow.com/users/2707864/sancho-s https://stackoverflow.com/questions/31040525/insert-element-in-python-list-after-every-nth-element/31040944?noredirect=1#comment88477417_31040944 this doesn't work if any of the elements have more than one letter.  
  Use nested comprehensions to flatten a list of lists<sup>(a)</sup>, sliced in groups of 3 with  'x'  added if less than 3 from end of list. 

  >>> [x for y in (letters[i:i+3] + ['x'] * (i < len(letters) - 2) for
     i in xrange(0, len(letters), 3)) for x in y]

['a', 'b', 'c', 'x', 'd', 'e', 'f', 'x', 'g', 'h', 'i', 'x', 'j']
   
 

 (a)  [item for subgroup in groups for item in subgroup]  flattens a jagged list of lists. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/4298271)
 Just because no one used  map  yet: 

  import random
''.join(map(lambda x:x+' '*random.randint(0,1), s)).strip()
  



