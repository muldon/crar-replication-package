Query: Create a dictionary with list comprehension
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/51115687)
 Use list comprehension with nested dict comprehension: 

  new_list = [{ k: v * 2 if k == 'two' else v for k,v in x.items()} for x in myList]
print (new_list)
[{'one': 1, 'two': 4, 'three': 3}, 
 {'one': 4, 'two': 10, 'three': 6}, 
 {'one': 7, 'two': 16, 'three': 9}]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/43312979)
 You can use list comprehension to create the dictionaries using: 

  my_list_dict = [{'attendance': v, 'data': k} for k,v in my_dict.items()]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/43312977)
 Sure, you can do it using a  list comprehension  like: 

  [{'attendance': a, 'date': d} for d, a in my_dict.items()]
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/46500727)
 <div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"> In [106]: def up(x):
     ...:     d = copy.deepcopy(GLOBAL)
     ...:     d.update(second=x)
     ...:     return d
     ...: 

In [107]: GLOBAL
Out[107]: {'first': "Won't change", 'second': ''}

In [108]: map(up, words)
Out[108]: 
[{'first': "Won't change", 'second': 'a'},
 {'first': "Won't change", 'second': 'test'}]  
</div>
</div>
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17686855)
 Just use a regular  for  loop: 

  from collections import defaultdict

d = defaultdict(list)

for key, value in your_list:
    d[key].append(value)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45615886)
  >>> newlist = [(k,v['label']) for (k,v) in newdict.items()]
>>> newlist
[('1', '10232'), ('3', '3530'), ('2', '2420')]
  

 If you want also integers, you have to add int(): 

  newlist = [(int(k),int(v['label'])) for (k,v) in newdict.items()]
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28718815)
 You could use https://docs.python.org/3/library/collections.html from collections module. 

  >>> from collections import defaultdict
>>> data = [(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3)]
>>> m = defaultdict(list)
>>> for i,j in data:
        m[i].append(j)


>>> m
defaultdict(<class 'list'>, {1: [2, 3, 4], 2: [1, 2, 3]})
>>> dict(m)
{1: [2, 3, 4], 2: [1, 2, 3]}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/52693367)
  defaultdict </h3>

 You can use  collections.defaultdict . Your dictionary comprehension will never work as you are not defining any lists. This is likely to be more efficient than using a dictionary comprehension, which would involve iterating each dictionary for each unique key. 

  from collections import defaultdict

dd = defaultdict(list)

for d in list_of_dictionaries:
    for k, v in d.items():
        dd[k].append(v)
  

  

  print(dd)

defaultdict(list,
            {0: [3523, 7245],
             1: [3524, 7246, 20898],
             2: [3540, 7247, 20899],
             4: [3541, 20901],
             5: [3542, 7249, 20902],
             3: [7248, 20900],
             6: [7250]})
  

 Dictionary comprehension</h3>

 A dictionary comprehension is  possible  but this requires calculating the union of keys and iterating the list of dictionaries for each of these keys: 

  allkeys = set().union(*list_of_dictionaries)

res = {k: [d[k] for d in list_of_dictionaries if k in d] for k in allkeys}

{0: [3523, 7245],
 1: [3524, 7246, 20898],
 2: [3540, 7247, 20899],
 3: [7248, 20900],
 4: [3541, 20901],
 5: [3542, 7249, 20902],
 6: [7250]}
  

 Time complexity</h3>

 Consider these terms: 

  n = sum(map(len, list_of_dictionaries))
m = len(set().union(*list_of_dictionaries))
k = len(list_of_dictionaries)
  

 In this context, the  defaultdict  solution will have complexity O( n ), while the dictionary comprehension will have complexity O( mk ), where  mk  >=  n . 



