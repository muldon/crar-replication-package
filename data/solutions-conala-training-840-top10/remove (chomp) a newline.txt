Query: remove (chomp) a newline
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/5764202)
 rstrip doesn't do the same thing as chomp, on so many levels. Read http://perldoc.perl.org/functions/chomp.html and see that chomp is very complex indeed. 

 However, my main point is that chomp removes at most 1 line ending, whereas rstrip will remove as many as it can. 

 Here you can see rstrip removing all the newlines: 

  >>> 'foo\n\n'.rstrip(os.linesep)
'foo'
  

 A much closer approximation of typical Perl chomp usage can be accomplished with re.sub, like this: 

  >>> re.sub(os.linesep + r'\Z','','foo\n\n')
'foo\n'
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27054136)
 you can use strip: 

  line = line.strip()
  

  

  >>> "\n\n hello world \n\n".strip()
'hello world'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/326279)
 Note that rstrip doesn't act exactly like Perl's chomp() because it doesn't modify the string. That is, in Perl: 

  $x="a\n";

chomp $x
  

 results in  $x  being  "a" . 

  

  x="a\n"

x.rstrip()
  

 will mean that the value of  x  is  still   "a\n" . Even  x=x.rstrip()  doesn't always give the same result, as it strips all whitespace from the end of the string, not just one newline at most. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/275659)
 And I would say the "pythonic" way to get lines without trailing newline characters is splitlines(). 

  >>> text = "line 1\nline 2\r\nline 3\nline 4"
>>> text.splitlines()
['line 1', 'line 2', 'line 3', 'line 4']
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/37346773)
 Just use :  

  line = line.rstrip("\n")
  

  

  line = line.strip("\n")
  

 You don't need any of this complicated stuff 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/5803510)
 Careful with  "foo".rstrip(os.linesep) : That will only chomp the newline characters for the platform where your Python is being executed. Imagine you're chimping the lines of a Windows file under Linux, for instance: 

  $ python
Python 2.7.1 (r271:86832, Mar 18 2011, 09:09:48) 
[GCC 4.5.0 20100604 [gcc-4_5-branch revision 160292]] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import os, sys
>>> sys.platform
'linux2'
>>> "foo\r\n".rstrip(os.linesep)
'foo\r'
>>>
  

 Use  "foo".rstrip("\r\n")  instead, as Mike says above. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/275025)
 Try the method  rstrip()  (see doc http://docs.python.org/2/library/stdtypes.html#str.rstrip and https://docs.python.org/3/library/stdtypes.html#str.rstrip) 

  >>> 'test string\n'.rstrip()
'test string'
  

 Python's  rstrip()  method strips  all  kinds of trailing whitespace by default, not just one newline as Perl does with http://perldoc.perl.org/functions/chomp.html. 

  >>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'
  

 To strip only newlines: 

  >>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '
  

 There are also the methods  lstrip()  and  strip() : 

  >>> s = "   \n\r\n  \n  abc   def \n\r\n  \n  "
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32882948)
 This would replicate exactly perl's chomp (minus behavior on arrays) for "\n" line terminator: 

  def chomp(x):
    if x.endswith("\r\n"): return x[:-2]
    if x.endswith("\n") or x.endswith("\r"): return x[:-1]
    return x
  

 (Note: it does not modify string 'in place'; it does not strip extra trailing whitespace; takes \r\n in account) 



