Query: Python: comprehension to compose two dictionaries
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17846568)
 One way to do it is: 

  result = {k: d2.get(v) for k, v in d1.items()}
  

 What behavior did you want for keys that have a value that is not in d2? 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17846579)
 Just loop through the items of  d1  and then for each element you want to put in the result don’t use the value from  d1  but instead look up the new value within  d2  using  d1 ’s value as the key: 

  >>> d1 = {1: 'a', 2: 'b', 3: 'c'}
>>> d2 = {'a': 'A', 'b': 'B', 'c': 'C'}
>>> d = {k: d2[v] for (k, v) in d1.items()}
>>> d
{1: 'A', 2: 'B', 3: 'C'}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17846586)
 This way works even if not all values in  d1  are valid keys for  d2 : 

   {k1:d2[d1[k1]] for k1 in d1 if d1[k1] in d2}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/54298701)
  

  my_list = ['one'] + (['two'] if add_two else []) + ['three']
  

 Or use a list comprehension: 

  my_list = [x for x in ('one', 'two' if add_two else '', 'three') if x]
  

 Or the functional way to remove Falsy values: 

  my_list = list(filter(None, ('one', 'two' if add_two else '', 'three')))
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17846862)
  This is what I've got so far:

    { k1:v2 for (k1,v1) in d1 for (k2,v2) in d2 if v1 == k2 }
  

 Two things you should note: 

 1) When you use a for-in loop directly on a dict: 

  for (k1, v1) in some_dict:
  

 python loops over the keys in the dict, i.e that for-in loop is equivalent to: 

  for (k1, v1) in some_dict.keys()
  

 But you are telling python that there will be a two tuple returned each time through the loop, (k1, v1), and python only returns a key each time through the loop.  So that is an error.   

  for (k1, v1) in some_dict.items()
  

 The items() function returns a two tuple:  (key, value) each time through the loop. 

 2) Suppose you have this data: 

  data = [ 
    [1, 2, 3], 
    ['a', 'b', 'c']
]
  

  

  results = [x for x in inner_array for inner_array in data]
  

 But that produces the error: 

  Traceback (most recent call last):
  File "1.py", line 5, in <module>
    results = [x for x in inner_array for inner_array in data]
NameError: name 'inner_array' is not defined
  

 To make it work, the loops have to be written "backwards": 

  results = [x for inner_array in data for x in inner_array]
print results

--output:--
[1, 2, 3, 'a', 'b', 'c']
  

 I think the easiest way to remember that is: the loops are in the same order as if you wrote them without a list comprehension: 

  results = [] 

for inner_array in data:
    for x in inner_array:
        results.append(x)
  

 Personally, I would like to see that changed in python, so that inside a list/dict/set comprehension you work from "the inside out", like you wrote it.  In any case, this is what your code looks like with the changes: 

  d1 = {1:'a',2:'b',3:'c'}
d2 = {'a':'A','b':'B','c':'C'}

results = {
        k1: v2 
        for (k2,v2) in d2.items() 
        for (k1,v1) in d1.items() if v1 == k2 
}

print results

--output:--
{1: 'A', 2: 'B', 3: 'C'}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/34569892)
 Why not compose the two? 

  def normalizeSortString(s):
    return local.strxfrm(s).lower()

def getSortKey(k):
    return (normalizeSortString(k['artist']), normalizeSortString(k["album"]))

somelist.sort(key=getSortKey)
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/50682458)
 Using a dictionary comprehension: 

  d3 = {k: d2[v] for k, v in d1.items()}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/36450109)
 You can do this by list comprehension like; 

  >>> D1 = {'A':1,'B':2,'C':3,'D':4}
>>> D2 = {'A':10,'B':20,'X':3}
>>> {a:[b, c] for a, b in D1.items() for a1, c in D2.items() if a == a1}
{'B': [2, 20], 'A': [1, 10]}
>>> 
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/16653524)
 You can compose the functions like this 

  [my_functionb(my_functiona(x)) for x in a]
  

 The form in Thomas' answer is useful if you need to apply a condition 

  [my_functionb(y) for y in (my_functiona(x) for x in a) if y<10]
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/28924674)
 It looks like you want a list of tuples with the keys and values paired. 

 To do this you can do two for loops in a list comprehension, and use http://www.tutorialspoint.com/python/dictionary_items.htm to output the keys and values as tuples: 

  [kv for d in ld for kv in d.items()]
  

 outputs: 

  [('a', 10), ('b', 20), ('p', 10), ('u', 100)]
  



