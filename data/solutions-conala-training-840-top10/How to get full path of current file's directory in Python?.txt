Query: How to get full path of current file's directory in Python?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/50098973)
 In Python 3: 

  from pathlib import Path

mypath = Path().absolute()
print(mypath)
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10293159)
 1.To get the current directory full path 

      >>import os
    >>print os.getcwd()
  

 o/p:"C :\Users\admin\myfolder" 

 1.To get the current directory folder name alone 

      >>import os
    >>str1=os.getcwd()
    >>str2=str1.split('\\')
    >>n=len(str2)
    >>print str2[n-1]
  

  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/32711758)
 To get the current directory full path:  

 
   os.path.realpath('.') 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/47488299)
 Use  abspath : 

  dir = os.path.abspath('.')
  

 or for the current working directory 

  dir = os.path.getcwd()
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/19601889)
 This line of code should work for any file, as long as you are using Python 2.7.  Using __file__ will use the current script for the file to locate. 

  os.path.dirname(os.path.abspath(__file__))
  

 The abspath() part is necessary to get the full absolute path name instead of simply the directory name.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/41447012)
 Get a list of files with Python 2 and 3 

<hr/>

 I have also made a short video here:  http://pythonprogramming.altervista.org/how-to-get-all-the-file-in-a-directory/  

<hr/>

  os.listdir()  

  or..... how to get all the files (and directories) in the current directory (Python 3)  

 The simplest way to have the file in the current directory in Python 3 is this. It's really simple; use the  os  module and the  listdir()  function and you'll have the file in that directory (and eventual folders that are in the directory, but you will not have the file in the subdirectory, for that you can use walk - I will talk about it later). 

  >>> import os
>>> arr = os.listdir()
>>> arr
['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']
  

<hr/>

  Using glob  

  I found glob easier to select the file of the same type or with something in common. Look at the following example:  

  import glob

txtfiles = []
for file in glob.glob("*.txt"):
    txtfiles.append(file)
  

  Using list comprehension  

  import glob

mylist = [f for f in glob.glob("*.txt")]
  

 Getting the full path name with os.path.abspath</h3>

 As you noticed, you don't have the full path of the file in the code above. If you need to have the absolute path, you can use another function of the  os.path  module called  _getfullpathname , putting the file that you get from  os.listdir()  as an argument. There are other ways to have the full path, as we will check later (I replaced, as suggested by mexmex, _getfullpathname with  abspath ). 

  >>> import os
>>> files_path = [os.path.abspath(x) for x in os.listdir()]
>>> files_path
['F:\\documenti\applications.txt', 'F:\\documenti\collections.txt']
  

<hr/>

 Get the full path name of a type of file into all subdirectories with  walk </h3>

 I find this very useful to find stuff in many directories, and it helped me find a file about which I didn't remember the name: 

  import os

# Getting the current work directory (cwd)
thisdir = os.getcwd()

# r=root, d=directories, f = files
for r, d, f in os.walk(thisdir):
    for file in f:
        if ".docx" in file:
            print(os.path.join(r, file))
  

  os.listdir(): get files in the current directory (Python 2)  

 In Python 2 you, if you want the list of the files in the current directory, you have to give the argument as '.' or os.getcwd() in the os.listdir method. 

  >>> import os
>>> arr = os.listdir('.')
>>> arr
['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']
  

 To go up in the directory tree</h3>

  >>> # Method 1
>>> x = os.listdir('..')

# Method 2
>>> x= os.listdir('/')
  

 Get files: os.listdir() in a particular directory (Python 2 and 3)</h3>

  >>> import os
>>> arr = os.listdir('F:\\python')
>>> arr
['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']
  

 Get files of a particular subdirectory with os.listdir()</h3>

  import os

x = os.listdir("./content")
  

 os.walk('.') - current directory</h3>

  >>> import os
>>> arr = next(os.walk('.'))[2]
>>> arr
['5bs_Turismo1.pdf', '5bs_Turismo1.pptx', 'esperienza.txt']
  

 glob module - all files</h3>

  import glob
print(glob.glob("*"))

out:['content', 'start.py']
  

 next(os.walk('.')) and os.path.join('dir','file')</h3>

  >>> import os
>>> arr = []
>>> for d,r,f in next(os.walk("F:\_python")):
>>>     for file in f:
>>>         arr.append(os.path.join(r,file))
...
>>> for f in arr:
>>>     print(files)

>output

F:\\_python\\dict_class.py
F:\\_python\\programmi.txt
  

 next(os.walk('F:\') - get the full path - list comprehension</h3>

  >>> [os.path.join(r,file) for r,d,f in next(os.walk("F:\\_python")) for file in f]
['F:\\_python\\dict_class.py', 'F:\\_python\\programmi.txt']
  

  os.walk - get full path - all files in sub dirs  

  x = [os.path.join(r,file) for r,d,f in os.walk("F:\\_python") for file in f]

>>>x
['F:\\_python\\dict.py', 'F:\\_python\\progr.txt', 'F:\\_python\\readl.py']
  

 os.listdir() - get only txt files</h3>

  >>> arr_txt = [x for x in os.listdir() if x.endswith(".txt")]
>>> print(arr_txt)
['work.txt', '3ebooks.txt']
  

 glob - get only txt files</h3>

  >>> import glob
>>> x = glob.glob("*.txt")
>>> x
['ale.txt', 'alunni2015.txt', 'assenze.text.txt', 'text2.txt', 'untitled.txt']
  

 Using glob to get the full path of the files</h3>

 If I should need the absolute path of the files: 

  >>> from path import path
>>> from glob import glob
>>> x = [path(f).abspath() for f in glob("F:\*.txt")]
>>> for f in x:
...  print(f)
...
F:\acquistionline.txt
F:\acquisti_2018.txt
F:\bootstrap_jquery_ecc.txt
  

 Other use of glob</h3>

 If I want all the files in the directory: 

  >>> x = glob.glob("*")
  

 Using os.path.isfile to avoid directories in the list</h3>

  import os.path
listOfFiles = [f for f in os.listdir() if os.path.isfile(f)]
print(listOfFiles)

> output

['a simple game.py', 'data.txt', 'decorator.py']
  

 Using pathlib from (Python 3.4)</h3>

  import pathlib

>>> flist = []
>>> for p in pathlib.Path('.').iterdir():
...  if p.is_file():
...   print(p)
...   flist.append(p)
...
error.PNG
exemaker.bat
guiprova.mp3
setup.py
speak_gui2.py
thumb.PNG
  

 If you want to use list comprehension 

  >>> flist = [p for p in pathlib.Path('.').iterdir() if p.is_file()]
  

 *You can use also just pathlib.Path() instead of pathlib.Path(".") 

 Use glob method in pathlib.Path() 

  import pathlib

py = pathlib.Path().glob("*.py")
for file in py:
    print(file)
  

 output: 

  stack_overflow_list.py
stack_overflow_list_tkinter.py
  

 Get all and only files with os.walk</h3>

  import os
x = [i[2] for i in os.walk('.')]
y=[]
for t in x:
    for f in t:
        y.append(f)

>>> y
['append_to_list.py', 'data.txt', 'data1.txt', 'data2.txt', 'data_180617', 'os_walk.py', 'READ2.py', 'read_data.py', 'somma_defaltdic.py', 'substitute_words.py', 'sum_data.py', 'data.txt', 'data1.txt', 'data_180617']
  

 Get only files with next and walk in a directory</h3>

  >>> import os
>>> x = next(os.walk('F://python'))[2]
>>> x
['calculator.bat','calculator.py']
  

 Get only directories with next and walk in a directory</h3>

  >>> import os
>>> next(os.walk('F://python'))[1] # for the current dir use ('.')
['python3','others']
  

 Get all the subdir names with  walk </h3>

  >>> for r,d,f in os.walk("F:\_python"):
...  for dirs in d:
...   print(dirs)
...
.vscode
pyexcel
pyschool.py
subtitles
_metaprogramming
.ipynb_checkpoints
  

 os.scandir() from Python 3.5 on</h3>

  >>> import os
>>> x = [f.name for f in os.scandir() if f.is_file()]
>>> x
['calculator.bat','calculator.py']

# Another example with scandir (a little variation from docs.python.org)
# This one is more efficient than os.listdir.
# In this case, it shows the files only in the current directory
# where the script is executed.

>>> import os
>>> with os.scandir() as i:
...  for entry in i:
...   if entry.is_file():
...    print(entry.name)
...
ebookmaker.py
error.PNG
exemaker.bat
guiprova.mp3
setup.py
speakgui4.py
speak_gui2.py
speak_gui3.py
thumb.PNG
>>>
  

 

 . 1: How many files are there in the subdirectories? 

 In this example, we look for the number of files that are included in all the directory and its subdirectories. 

  import os

def count(dir, counter=0):
    "returns number of files in dir and subdirs"
    for pack in os.walk(dir):
        for f in pack[2]:
            counter += 1
    return dir + " : " + str(counter) + "files"

print(count("F:\\python"))

> output

>'F:\\\python' : 12057 files'
  

 .2: How to copy all files from a directory to another? 

 A script to make order in your computer finding all files of a type (default: pptx) and copying them in a new folder. 

  import os
import shutil
from path import path

destination = "F:\\file_copied"
# os.makedirs(destination)

def copyfile(dir, filetype='pptx', counter=0):
    "Searches for pptx (or other - pptx is the default) files and copies them"
    for pack in os.walk(dir):
        for f in pack[2]:
            if f.endswith(filetype):
                fullpath = pack[0] + "\\" + f
                print(fullpath)
                shutil.copy(fullpath, destination)
                counter += 1
    if counter > 0:
        print("------------------------")
        print("\t==> Found in: `" + dir + "` : " + str(counter) + " files\n")

for dir in os.listdir():
    "searches for folders that starts with `_`"
    if dir[0] == '_':
        # copyfile(dir, filetype='pdf')
        copyfile(dir, filetype='txt')


> Output

_compiti18\Compito Contabilità 1\conti.txt
_compiti18\Compito Contabilità 1\modula4.txt
_compiti18\Compito Contabilità 1\moduloa4.txt
------------------------
==> Found in: `_compiti18` : 3 files
  

 . 3: How to get all the files in a txt file 

 In case you want to create a txt file with all the file names: 

  import os
mylist = ""
with open("filelist.txt", "w", encoding="utf-8") as file:
    for eachfile in os.listdir():
        mylist += eachfile + "\n"
    file.write(mylist)
  

 ample: txt with all the files of an hard drive</h3>

  """We are going to save a txt file with all the files in your directory.
We will use the function walk()

"""

import os

# see all the methods of os
# print(*dir(os), sep=", ")
listafile = []
percorso = []
with open("lista_file.txt", "w", encoding='utf-8') as testo:
    for root, dirs, files in os.walk("D:\\"):
        for file in files:
            listafile.append(file)
            percorso.append(root + "\\" + file)
            testo.write(file + "\n")
listafile.sort()
print("N. of files", len(listafile))
with open("lista_file_ordinata.txt", "w", encoding="utf-8") as testo_ordinato:
    for file in listafile:
        testo_ordinato.write(file + "\n")

with open("percorso.txt", "w", encoding="utf-8") as file_percorso:
    for file in percorso:
        file_percorso.write(file + "\n")

os.system("lista_file.txt")
os.system("lista_file_ordinata.txt")
os.system("percorso.txt")
  

 All the file of C:\\ in one text file</h3>

 This is a shorter version of the previous code. Change the folder where to start finding the files if you need to start from another position. This code generate a 50 mb on text file on my computer with something less then 500.000 lines with files with the complete path. 

  import os

with open("file.txt", "w", encoding="utf-8") as filewrite:
    for r, d, f in os.walk("C:\\"):
        for file in f:
            filewrite.write(f"{r + file}\n")    
  

 A function to search for a certain type of file 

  import os

def searchfiles(extension='.ttf'):
    "Create a txt file with all the file of a type"
    with open("file.txt", "w", encoding="utf-8") as filewrite:
        for r, d, f in os.walk("C:\\"):
            for file in f:
                if file.endswith(extension):
                    filewrite.write(f"{r + file}\n")

# looking for ttf file (fonts)
searchfiles('ttf')
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29769091)
 To get full path of the directory that contains the executed file use this: 

  os.path.dirname(os.path.abspath(__file__))
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/33540872)
  Answer to #1:  

 If you want the current directory, do this: 

  import os
os.getcwd()
  

 If you want just any folder name and you have the path to that folder, do this: 

<pre class="lang-python prettyprint-override"> def get_folder_name(folder):
    '''
    Returns the folder name, given a full folder path
    '''
    return folder.split(os.sep)[-1]
  

  Answer to #2:  

  import os
print os.path.abspath(__file__)
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/19204316)
 With full path and accounting for path being  .   ..      ....subfolder  etc: 

  import os pprint
pprint.pprint([os.path.join(os.path.abspath(path) x[0]) \
    for x in os.walk(os.path.abspath(path))])
  



