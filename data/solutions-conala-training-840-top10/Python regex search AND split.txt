Query: Python regex search AND split
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35771481)
 Regex and split 

  source = "Hello #world I am in #London and it is #sunny today"
reg_out = re.search('[^#]*#[^#]*#', source)
split_out = reg_out.group().split()
print split_out[:-1]
  

 O/P:['Hello', '#world', 'I', 'am', 'in'] 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/50736433)
 Since  a  is a string,  split  in your case only accepts a literal string to split, not a regex. To split with a regex pattern, you need  re.split . 

 However, you may use 

  import re
a = 'readyM01JUN_01_18_0144.xlsx'
m = re.search(r'\d([^_\d]+)_\d', a) # Or, r'\d([a-zA-Z]+)_\d'
if m:
    print(m.group(1))
  

 See the https://ideone.com/1ZmGyy 

  Pattern details  

 
  \d  - a digit 
  ([^_\d]+)  - Group 1 matching and capturing ( m.group(1)  will hold this value) 1+ chars other than digits and  _  (you may even use  ([a-zA-Z]+)  to match 1+ ASCII letters) 
  _\d  - a  _  and a digit. 
 

 See the https://regex101.com/r/GH4SYO/1. 

 Note that  re.search  returns the  first  leftmost match. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/35677418)
  re.split  and keep your delimiters, then filter out the strings which only contain whitespace. 

  >>> import re
>>> s = 'Hi, How are you?'
>>> [x for x in re.split('(\s|!|\.|\?|\n)', s) if x.strip()]
['Hi,', 'How', 'are', 'you', '?']
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19894589)
 The official Python documentation has a good example for this one. It will split on all non-alphanumeric characters (whitespace and punctuation). Literally \W is the character class for all Non-Word characters. Note: the underscore "_" is considered a "word" character and will not be part of the split here. 

  re.split('\W+', 'Words, words, words.')
  

 See https://docs.python.org/3/library/re.html for more examples, search page for "re.split" 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48001617)
 I think you want something like this: 

  search = filter(None, (re.search(arg, data) for arg in argv[1].split()))
  

  

  search = re.search('|'.join(argv[1].split()), data)
  

 You can then check the search results, if  len(search) == len(argv[1].split()) , then it means all patterns matched, and  if search  is truthy, then it means at least one of them matched. 

 Ok, I think I got it, you can use a lookahead assertion like this: 

  >>> re.search('(?=.*thing)(?=.*same)', data)
  

 You can obviously programatically build such regex: 

  re.search(''.join('(?=.*{})'.format(arg) for arg in argv[1].split()), data)
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/46357245)
 You are printing the entire line, you can instead do: 

  print(ln.split('@')[0])
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/11457798)
 1
Yes it is correct, search stops after the first match. 

 2
try  findall  instead of  search  

 It returns a list. 

  re.findall( r'(\w+)=([^;]+)', string, re.I)
  

 If you want to use split: 

  [re.split('=',s) for s in re.split(';',string)]
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/10543589)
  >>> import re
>>> s = "Some.File.Num10.example.txt"
>>> p = re.compile("Num\d{2}")
>>> match = p.search(s)
>>> s[:match.start()]
'Some.File.'
  

 This would be more efficient that doing a split because search doesn't have to scan the whole string. It breaks on the first match. In your example it wouldn't make a different as the strings are short but in case your string is very long and you know that the match is going to be in the beginning, then this approach would be faster. 

 I just wrote a small program to profile search() and split() and confirmed the above assertion. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/2157949)
  

  import re

m=re.match('^(?P<first>[A-Za-z]+)(?P<second>[0-9]+)$',"Foo9")
print m.group('first')
print m.group('second')
  

 Using search: 

  import re

s='Foo9'
m=re.search('(?<=\D)(?=\d)',s)
first=s[:m.start()]
second=s[m.end():]

print first, second
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/2260113)
  >>> sentence="a quick brown fox for you"
>>> pattern="fo"
>>> for word in sentence.split():
...     if word.startswith(pattern):
...         print word
...
fox
for
  

 Split the sentence on spaces, use a loop to search for the pattern and print them out. 



