Query: Create a list of tuples with adjacent list elements if a condition is true
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38251312)
  

  >>> [(x,y) for x,y in zip(myList, myList[1:]) if y == 9]
[(8, 9), (4, 9), (7, 9)]
  

 

 What is the code above doing: 

 
  zip(some_list, some_list[1:])  would generate a list of pairs of adjacent elements. 
 Now with that tuple, filter on the condition that the second element is equal to  9 .  
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/38258062)
 My solution is similar to one of Jim's advanced with zero-index check 

  myList = [9, 1, 8, 9, 2, 4, 9, 6, 7, 9, 8]

[(myList[i-1], x) for i, x in enumerate(myList) if x==9 and i!=0]

# [(8, 9), (4, 9), (7, 9)]
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/38251568)
 You can also do it without slicing by creating iterators: 

  l = myList = [1,8,9,2,4,9,6,7,9,8]

it1, it2 = iter(l), iter(l)
# consume first element from it2 -> leaving 8,9,2,4,9,6,7,9,8
next(it2, "")
# then pair up, (1,8), (8,9) ...
print([(i, j) for i,j in zip(it1, it2) if j == 9])
  

 Or use the https://docs.python.org/2.7/library/itertools.html#recipes to create your pairs 

  from itertools import tee, izip

def pairwise(iterable):
    "s -> (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
  

 If using python3, just import  tee  and use the regular  zip . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/38251331)
 Part of your issue is that  myList[i:i]  will always return an empty list. The end of a slice is exclusive, so when you do  a_list[0:0]  you're trying to take the elements of  a_list  that exist  between  index 0 and index 0. 

 You're on the right track, but you want to zip the list with itself. 

  [(x, y) for x, y in zip(myList, myList[1:]) if y==9]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/38253584)
 It is really surprising that no one has added a functional approach.  

 Another alternative answer is using a https://docs.python.org/3/library/functions.html#filter. This builtin function returns an iterator (list in Python2) consisting of all the elements present in the list that return  True  for a particular function  

  >>> myList = [1,8,9,2,4,9,6,7,9,8]
>>> list(filter(lambda x:x[1]==9,zip(myList, myList[1:])))
[(8, 9), (4, 9), (7, 9)]
  

 It is to be noted that the https://stackoverflow.com/questions/13638898/how-to-use-filter-map-and-reduce-in-python-3-3-0. The difference between the functional approach and list comprehensions is discussed in https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map.  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/54809584)
 You can pair the adjacent tuples by zipping the list with itself with an offset of 1, append the tuple to a temporary list  c  if it is not adjacent to the last tuple, or extend the list in the last tuple if adjacent, and instantiate a dict with the resulting list of tuples: 

  c = []
for (a, _), (b, l) in zip([(None, [])] + temp_list, temp_list):
    if a is None or b - a >= 2:
        c.append((b, l))
    else:
        c[-1][1].extend(l)
  

 so that  dict(c)  becomes: 

  {18: [2773], 57: [87], 98: [34], 135: [5], 140: [56], 164: [2151, 2194, 2101, 2049, 2298, 2244, 2004, 2343], 236: [2752], 245: [636], 250: [2290, 2241, 2194, 2146, 2098, 2050, 2001, 2337, 1952, 1905, 1857, 1809, 1760, 1713, 1661, 1614, 1717, 1564, 1522], 284: [2773], 303: [2744], 339: [1842, 560, 945, 1026, 975, 875, 854, 833, 783, 1093, 1601, 1477, 1440, 1384, 1362, 1327, 1298, 1237, 1203, 1181, 1130], 413: [972, 924, 880, 787, 1067, 1019, 834, 1299, 1160, 1114, 1253, 1207], 487: [555, 491, 459, 522, 2130, 2092, 1791, 1752, 1589, 2243, 2206, 2168, 2053, 1870, 1831, 1713, 1635, 1513, 1476, 2358, 2321, 2283, 1673, 1551], 569: [2046, 1981, 1956, 2137, 2111, 2073, 2019, 1922], 619: [535], 621: [684], 623: [979, 1110, 613, 2060, 1774], 690: [1824, 1771, 1721, 1926, 1902, 1849, 1798, 1746, 1694], 700: [2743], 893: [421, 650, 602, 556, 510, 466, 746, 697, 1160], 898: [524, 479, 435, 760, 717, 665, 615, 568], 925: [1273], 932: [1087], 936: [1127], 964: [700, 604, 558, 2775, 747, 649], 1018: [2785], 1039: [426]}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/26855019)
 My approach uses  MultiIndex : 

  #make it a multi-indexed Series
stacked = y.stack()

#restrict to where it's True
true_stacked = stacked[stacked]

#get index as a list of tuples
result = true_stacked.index.tolist()
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26855290)
 If you want a single tuple for each row index: 



  import pandas as pd
import numpy as np
df = pd.DataFrame(np.random.normal(0, 1, (4,4)), index=['a', 'b', 'c', 'd'], columns=['e', 'f', 'g', 'h'])

# build column replacement
column_dict = {}
for col in [{col: {True: col}} for col in df.columns]:
    column_dict.update(col)

# replace where > 0
df = (df>0).replace(to_replace=column_dict)

# convert to tuples and drop 'False' values
[tuple(y for y in x if y != False) for x in df.to_records()]
  



