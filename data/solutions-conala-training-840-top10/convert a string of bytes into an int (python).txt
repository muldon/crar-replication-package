Query: convert a string of bytes into an int (python)
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/6728042)
  import struct
  

 For Python 3 (with comments' help): 

  h = '9DA92DAB'
struct.unpack('>i', bytes.fromhex(h))
  

 For Python 2: 

  h = '9DA92DAB'
struct.unpack('>i', h.decode('hex'))
  

  

  h = '9DA92DAB'
struct.unpack('<i', h.decode('hex'))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46533979)
 Convert the  int  to a  str  then  .encode  into  bytes : 

  >>> x = 123456
>>> bs = str(x).encode('ascii')
>>> bs
b'123456'
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9356262)
 The shortest way, I think, is the following: 

  import struct
val = 0x11223344
val = struct.unpack("<I", struct.pack(">I", val))[0]
print "%08x" % val
  

 This converts an integer to a byte-swapped integer. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/846045)
 You can use the http://docs.python.org/library/struct.html module: 

  import struct
print struct.pack('>I', your_int)
  

  '>I'  is a format string.  >  means big endian and  I  means unsigned int. Check the documentation for more format chars. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/846067)
 This is fast and works for small and (arbitrary) large ints: 

  def Dump(n): 
  s = '%x' % n
  if len(s) & 1:
    s = '0' + s
  return s.decode('hex')
print repr(Dump(1245427))  #: '\x13\x00\xf3'
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/47968107)
  

  var = 'і' # var is ukrainian і
  

 .
Flow is this. value/which is string => bytes => int => binary 

  binary_var = '{:b}'.format(int.from_bytes(var.encode('utf-8'), byteorder='big'))
  

 Now binary_var is '1101000110010110'. It type is string. 

 Now go back, you want get unicode value from binary: 

  int_var = int(binary_var, 2) # here we get int value, int_var = 53654
  

 Now we need convert integer to bytes. Ukrainian 'і' is not gonna fit into 1 byte but in 2. We convert to actual  bytes bytes_var = b'\xd1\x96' 

  bytes_var = int_var.to_bytes(2, byteorder='big') 
  

 Finally we decode our bytes. 

  ukr_i = bytes_var.decode('utf-8') # urk_i = 'і'
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/12859903)
 In Python 3.2+, you can use http://docs.python.org/py3k/library/stdtypes.html#int.to_bytes: 

 If you don't want to specify the size 

<pre class="lang-python prettyprint-override"> >>> n = 1245427
>>> n.to_bytes((n.bit_length() + 7) // 8, 'big') or b'\0'
b'\x13\x00\xf3'
  

 If you don't mind specifying the size 

  >>> (1245427).to_bytes(3, byteorder='big')
b'\x13\x00\xf3'
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/28524760)
 Single-source Python 2/3 compatible version based on https://stackoverflow.com/a/846067/4279: 

  #!/usr/bin/env python
import binascii

def int2bytes(i):
    hex_string = '%x' % i
    n = len(hex_string)
    return binascii.unhexlify(hex_string.zfill(n + (n & 1)))

print(int2bytes(1245427))
# -> b'\x13\x00\xf3'
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/25499894)
  int  objects can be converted to bytes using the method  to_bytes . However, you have to specify the number of bytes and byte order. 

 Example: 

  n.to_bytes(2, 'little')  # b'\x01\x01'
  



