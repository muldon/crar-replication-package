Query: How do I create an encrypted string for password?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38425860)
 Use the "not-yet-commons-ssl.jar" from http://juliusdavies.ca/commons-ssl/. 

 <a href="http://juliusdavies.ca/commons-ssl/pbe.html"pbe.html  

 PBE code example (DES-3):* 

  char[] password = {'c','h','a','n','g','e','i','t'};
byte[] data = "Hello World!".getBytes();

// Encrypt!
byte[] encrypted = OpenSSL.encrypt("des3", password, data);
System.out.println("ENCRYPTED: [" + new String(encrypted) + "]");

// Decrypt results of previous!
data = OpenSSL.decrypt("des3", password, encrypted);
System.out.println("DECRYPTED: [" + new String(data) + "]");


OUTPUT:
=======================
ENCRYPTED: [U2FsdGVkX19qplb9qVDVVEYxH8wjJDGpMS+F4/2pS2c=]
DECRYPTED: [Hello World!]
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7762882)
 What you really need is Symmetric cryptography, i.e., the algorithm uses same key to encrypt and decrypt the data. There are many algorithms available which support symmetric cryptography like DES, AES. 

 Have a look at this example: http://www.java2s.com/Code/Java/Security/EncryptionanddecryptionAESECBPKCS7Padding.htm 

 In the above example, replace 

  byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
  

  

  byte[] keyBytes = yourPassword.getBytes();
  

 It uses the bouncycastle library, which is arguably the best cryptography libraries available. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29226937)
 I know its overkill but i would use http://www.jasypt.org/ library since its realy easy to use. All you need is random seed to encrypt or decrpyt. 

 Here is the source code for encrypting data: 

  String seed = "ipNumber";
String myIpValue = "192.168.0.1";

StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
encryptor.setPassword(seed);
String encrypted= encryptor.encrypt(myIpValue);
  

 And for data decryption: 

  StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
encryptor.setPassword(seed);

String decrypted = encryptor.decrypt(encrypted);
  

 Or you could just encode or decode your string to base64 example is show here:
https://stackoverflow.com/questions/19743851/base64-java-encode-and-decode-a-string 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9921369)
 Here are some helpers to encrypt or decrypt using AES in Java: 

  public static final String AES = "AES";

/**
 * Encrypt a value and generate a keyfile.
 * If the keyfile is not found, then a new one will be created.
 * 
 * @throws GeneralSecurityException
 * @throws IOException if an I/O error occurs
 */
public static String encrypt(String value, File keyFile)
        throws GeneralSecurityException, IOException {
    if (!keyFile.exists()) {
        KeyGenerator keyGen = KeyGenerator.getInstance(CryptoUtils.AES);
        keyGen.init(128);
        SecretKey sk = keyGen.generateKey();
        FileWriter fw = new FileWriter(keyFile);
        fw.write(byteArrayToHexString(sk.getEncoded()));
        fw.flush();
        fw.close();
    }

    SecretKeySpec sks = getSecretKeySpec(keyFile);
    Cipher cipher = Cipher.getInstance(CryptoUtils.AES);
    cipher.init(Cipher.ENCRYPT_MODE, sks, cipher.getParameters());
    byte[] encrypted = cipher.doFinal(value.getBytes());
    return byteArrayToHexString(encrypted);
}

/**
 * Decrypt a value.
 * 
 * @throws GeneralSecurityException
 * @throws IOException if an I/O error occurs
 */
public static String decrypt(String message, File keyFile)
        throws GeneralSecurityException, IOException {
    SecretKeySpec sks = getSecretKeySpec(keyFile);
    Cipher cipher = Cipher.getInstance(CryptoUtils.AES);
    cipher.init(Cipher.DECRYPT_MODE, sks);
    byte[] decrypted = cipher.doFinal(hexStringToByteArray(message));
    return new String(decrypted);
}

private static SecretKeySpec getSecretKeySpec(File keyFile)
        throws NoSuchAlgorithmException, IOException {
    byte[] key = readKeyFile(keyFile);
    SecretKeySpec sks = new SecretKeySpec(key, CryptoUtils.AES);
    return sks;
}

private static byte[] readKeyFile(File keyFile)
        throws FileNotFoundException {
    Scanner scanner = new Scanner(keyFile).useDelimiter("\\Z");
    String keyValue = scanner.next();
    scanner.close();
    return hexStringToByteArray(keyValue);
}

private static String byteArrayToHexString(byte[] b) {
    StringBuffer sb = new StringBuffer(b.length * 2);
    for (int i = 0; i < b.length; i++) {
        int v = b[i] & 0xff;
        if (v < 16) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(v));
    }
    return sb.toString().toUpperCase();
}

private static byte[] hexStringToByteArray(String s) {
    byte[] b = new byte[s.length() / 2];
    for (int i = 0; i < b.length; i++) {
        int index = i * 2;
        int v = Integer.parseInt(s.substring(index, index + 2), 16);
        b[i] = (byte) v;
    }
    return b;
}
  

 Just call the appropiate method. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/3771336)
 Take a look at http://jasypt.org. It has already done the heavy lifting for you. Specifically, the  org.jasypt.encryption.pbe.StandardPBEStringEncryptor  and  org.jasypt.properties.PropertyValueEncryptionUtils  classes. 

 Create an encryptor: 

  SimplePBEConfig config = new SimplePBEConfig(); 
config.setAlgorithm("PBEWithMD5AndTripleDES");
config.setKeyObtentionIterations(1000);
config.setPassword("propertiesFilePassword");

StandardPBEStringEncryptor encryptor = new org.jasypt.encryption.pbe.StandardPBEStringEncryptor();
encryptor.setConfig(config);
encryptor.initialize();
  

 Then use  PropertyValueEncryptionUtils  to encrypt / decrypt values: 

  PropertyValueEncryptionUtils.encrypt(value, encryptor);
PropertyValueEncryptionUtils.decrypt(encodedValue, encryptor)
  

 Note the encoded value will start with  ENC(  and end with  ) , so it's easy to tell if a property from a file is encrypted. 

 Also, note that the password used for  config.setPassword()  is  not  the password you are encoding to store in the properties file. Instead, it is the password to encrypt / decrypt  the value  you are storing. What this password is and how to set it is up to you. I default to the fully qualified classname of whatever is reading the Properties file. 

 Finally, if you are using Spring, Jasypt has an  EncryptablePropertyPlaceholderConfigurer  class that you can use to load the properties file and use  ${foo}  syntax in your Spring XML files to do variable substitution for things like DB passwords. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11914732)
 You want to encrypt your file('s content) with a password. Here is a pretty well known library to do it: http://www.jasypt.org/ 

 From their site: 

  ..encrypting and decrypting a text...

BasicTextEncryptor textEncryptor = new BasicTextEncryptor();
textEncryptor.setPassword(myEncryptionPassword);
String myEncryptedText = textEncryptor.encrypt(myText);
...
String plainText = textEncryptor.decrypt(myEncryptedText);
  

 You can read/write the encrypted content to your file.  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20176961)
 It does work and it does require password for encryption and decryption. To simplify the example I have initiated two sessions of StandardPBEStringEncryptor as encryptor and decryptor 

  public static void main(String[] args) {
    StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
    encryptor.setPassword("mySecretPassword");        
    String encryptedText = encryptor.encrypt("Hello World");
    System.out.println("Encrypted text is: " + encryptedText);

    StandardPBEStringEncryptor decryptor = new StandardPBEStringEncryptor();
    decryptor.setPassword("mySecretPassword");  
    String decryptedText = decryptor.decrypt(encryptedText);
    System.out.println("Decrypted text is: " + decryptedText);
    }
  

 output: 

  Encrypted text is: +pBbr+KOb7D6Ap/5vYJIUoHbhOruls+L
Decrypted text is: Hello World
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7762892)
 You're trying to re-invent the wheel. Unless you're doing it for fun, I'd recommend using something like http://en.wikipedia.org/wiki/Advanced_Encryption_Standard. If you just google "AES in java" you'll find a number of examples. 

 If you are doing it for fun and want something simple to implement, have a look at http://en.wikipedia.org/wiki/ROT13 as well. 

 Here's an example for AES in Java: 

  private static final String ALGORITHM = "AES";
private static final byte[] keyValue = 
    new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };

 public String encrypt(String valueToEnc) throws Exception {
    Key key = generateKey();
    Cipher c = Cipher.getInstance(ALGORITHM);
    c.init(Cipher.ENCRYPT_MODE, key);
    byte[] encValue = c.doFinal(valueToEnc.getBytes());
    String encryptedValue = new BASE64Encoder().encode(encValue);
    return encryptedValue;
}

public String decrypt(String encryptedValue) throws Exception {
    Key key = generateKey();
    Cipher c = Cipher.getInstance(ALGORITHM);
    c.init(Cipher.DECRYPT_MODE, key);
    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);
    byte[] decValue = c.doFinal(decordedValue);
    String decryptedValue = new String(decValue);
    return decryptedValue;
}

private static Key generateKey() throws Exception {
    Key key = new SecretKeySpec(keyValue, ALGORITHM);
    return key;
}
  

 You may want to improve on this code. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/37405070)
 I have used this for my project. 

  'com.scottyab:aescrypt:0.0.1'(ref: [enter link description here][1]
  

  

  String encryptedMsg = AESCrypt.encrypt(password, message);
  

  

  String messageAfterDecrypt = AESCrypt.decrypt(password, encryptedMsg);
  

 if you are more concerned about security go with SHA1 or SHA256.
Hope this helps. 

 Edit:
In my case, i have to encrypt login password and send it to server over the network. 

  String userPassword = password.getText().toString();
try {
        encryptedMsg = AESCrypt.encrypt(userPassword, Config.secretlogin);
   } catch (GeneralSecurityException e) {
        e.printStackTrace();
   }
  

 So in backend, i have decrypted the secure password with the key and in both sides i am using the same AES(Android and backend). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/11914775)
 When you want to encrypt files, strings, etc there are 2 main approaches.
You should start by building a class or method to convert ur string/file to an array of bytes. Build another method to convert the array of bytes back to the string/file. 

 You may encrypt a file using 2 approaches:
1 - Symmetric key - A secret word (usually a huge string of chars or a password set by the user) will encrypt your file and password, and the same password will be used to decrypt.
2 - Asymmetric key - You generate a pair of keys. One is called the public key and the other is called a private key. Public keys are used to encrypt files, private keys to decrypt.
This would be the more 'professional' approach. 

 If you want a really safe approach, you should download GnuPG. GnuPG is an executable that manages assymmetric encryption, you may build a class to work with GnuPG and let GnuPG manage ur encryption/decryption process. 

 Theres an unsafe approach that is 'native' to java (symmetric key) that may work out for you: 

 Encryption: 

  byte[] key = //... password converted to an array of bytes
byte[] dataToSend = ...

Cipher c = Cipher.getInstance("AES");
SecretKeySpec k =
  new SecretKeySpec(key, "AES");
c.init(Cipher.ENCRYPT_MODE, k);
byte[] encryptedData = c.doFinal(dataToSend);
  

  

  byte[] key = //
byte[] encryptedData = //

Cipher c = Cipher.getInstance("AES");
SecretKeySpec k =
  new SecretKeySpec(key, "AES");
c.init(Cipher.DECRYPT_MODE, k);
byte[] data = c.doFinal(encryptedData);
  

 Hope this helps. 



