Query: Use Scanner to read a list of comma separated values
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3828588)
 If you've only got two columns, separated by a comma, an easy alternative to  Scanner  is to just use  String.substring : 

  int i = s.indexOf(',');
String name = s.substring(0,i);
String desc = s.substring(i+1);
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36588218)
 Set the delimiter of your Scanner to accept commas: 

  Scanner input = new Scanner(System.in).useDelimiter(", ");
  

 The default delimiter is whitespace, but you can set it to something else via https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html#useDelimiter-java.lang.String-. 

 Also, since the delimiter is a regex, you can make the space after the commas optional too: 

  Scanner input = new Scanner(System.in).useDelimiter(", ?");
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/53643212)
 If the numbers are separated by commas, you should  not  be removing the commas. I would use a  Scanner . I would use  try-with-resources  instead of an explicit  close() . And I would  split  each line on comma ( \\s*  globs optional whitespace).  

  List<Integer> listIntegers = new ArrayList<>();
File f = new File("D:\\generated30-1.cav");
try (Scanner sc = new Scanner(f)) {
    while (sc.hasNextLine()) {
        String line = sc.nextLine();
        String[] tokens = line.split("\\s*,\\s*");
        for (String token : tokens) {
            listIntegers.add(Integer.parseInt(token));
        }
    }
} catch (Exception e) {
    e.printStackTrace();
}
return listIntegers;
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/40028178)
 Most likely you have  Locale  issues and your  Scanner  tries to parse doubles with comma delimeter, but you set comma as a scanner delimeter. Try the following solution: 

  Scanner input = new Scanner(System.in)
        .useDelimiter(",")
        .useLocale(Locale.ENGLISH);
  

 This will set doubles delimiter to dot and your comma-separated doubles should work fine.  

 Be sure to place the comma at the end of input to parse the last value, e.g.  1000.00,3.25,5,  (may be even it is the primary reason of your inputs not working) 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/22936364)
 you can use the nextLine method to read a String and use the method split to separate by comma like this: 

  public static void main(String args[])
    {
        Scanner dis=new Scanner(System.in);
        int a,b,c;
        String line;
        String[] lineVector;

        line = dis.nextLine(); //read 1,2,3

        //separate all values by comma
        lineVector = line.split(",");

        //parsing the values to Integer
        a=Integer.parseInt(lineVector[0]);
        b=Integer.parseInt(lineVector[1]);
        c=Integer.parseInt(lineVector[2]);

        System.out.println("a="+a);
        System.out.println("b="+b);
        System.out.println("c="+c);
    }
  

 This method will be work with 3 values separated by comma only. 

 If you need change the quantity of values may you use an loop to get the values from the vector. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10960359)
 To split your String by comma(,) use  str.split(",")  and for tab use  str.split("\\t")  

      try {
        BufferedReader in = new BufferedReader(
                               new FileReader("G:\\RoutePPAdvant2.txt"));
        String str;

        while ((str = in.readLine())!= null) {
            String[] ar=str.split(",");
            ...
        }
        in.close();
    } catch (IOException e) {
        System.out.println("File Read Error");
    }
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/684140)
 Your best bet is to use the java.util.Scanner class to read in the values in the config file, using the comma as a delimiter.  Link here to the Javadoc: 

 http://java.sun.com/j2se/1.5.0/docs/api/java/util/Scanner.html 

 Example would be: 

  Scanner sc = new Scanner(new File("thing.config"));
sc.useDelimiter(",");
while (sc.hasNext()) {
   String token = sc.next();
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/35523706)
 The easiest thing to do for your case is to read a line first, and then use  split() , as all the lines are formatted exactly alike. And use  ArrayList  of  String[]  to make your list of lists. 

 Example using BufferedReader: 

  import java.util.*;
import java.io.*;

class Test {
    public static void main(String[] args) {
        ArrayList<ArrayList<String>> myList = new ArrayList<>();
        try {
            BufferedReader in = new BufferedReader(new FileReader("foo.txt"));
            while(in.ready()) {
                String line = in.readLine();
                String[] parts = line.split(", ");
                ArrayList<String> lineList = new ArrayList<>();
                for (String s : parts) {
                    lineList.add(s);
                }
                myList.add(lineList);
            }
        }
        catch(Exception e) {
        }

        for(ArrayList<String> elem : myList) {
            for(String item : elem) {
                System.out.print(item + " ");
            }
            System.out.println();
        }
    }
}
  

 

 Using Scanner (incomplete example): 

  public static void main(String[] args) {
    try {
        Scanner in = new Scanner(new File("foo.txt"));
        in.useDelimiter(", ");

        while(in.hasNext()) {
            System.out.println(in.next());
        }
    }
    catch (Exception e) {
    }
}
  



