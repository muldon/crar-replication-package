Query: How to implement the hashCode and equals method using Apache Commons?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13633931)
 One difference is that  HashCodeBuilder  can compute the hash code reflectively: 

  public int hashCode() {
  return HashCodeBuilder.reflectionHashCode(this);
}
  

 That is, using  HashCodeBuilder , you don't have to list the individual fields, although you can. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7239361)
 Apache commons-lang has an automatic equals builder - e.g. "reflection-equals". http://commons.apache.org/lang/api-3.0.1/org/apache/commons/lang3/builder/EqualsBuilder.html. Also note that there is a http://commons.apache.org/lang/api-3.0.1/org/apache/commons/lang3/builder/HashCodeBuilder.html in the same library.  

 

 Example using this library: 

  static class A {
    private int a;
    private String b;
    A(int a, String b) {
        this.a = a;
        this.b = b;
    }
}

public static void main(String[] args) {
    A a1 = new A(123, "Hello World!");
    A a2 = new A(321, "Hello!");
    A a3 = new A(123, "Hello World!");

    System.out.println(EqualsBuilder.reflectionEquals(a1, a2, true));
    System.out.println(EqualsBuilder.reflectionEquals(a1, a3, true));
}
  

 Output: 

  false
true
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/114123)
 Use the reflection methods on Apache Commons https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/EqualsBuilder.html and https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/HashCodeBuilder.html. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5038916)
 If you don't to write your own, there is also the possibility to use http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Objects.html 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/17265747)
 You can't compare equals using the method hashCode why: 

 a.equals(b) == true, a.hashCode() is mandatorily == b.hashCode() 

 a.hashCode() == b.hashCode(), a.equals(b) NOT is mandatory, more can be == false 

 Example of implementation using one attribute (x). Generate by eclipse: 

  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + x;
    return result;
}

public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Node other = (Node) obj;
    if (x != other.x)
        return false;
    return true;
}   
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/13633897)
  HashCodeBuilder  has the funky reflective hash code implementation, but other than that, no -- you should probably use  Objects . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/3869294)
 Use http://commons.apache.org/lang/api-2.4/org/apache/commons/lang/builder/HashCodeBuilder.html/EqualsBuilder.html from Commons Lang: 

  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
}
  

 See the API for ways to do it without using reflection. You can tell it which fields to include, or which to ignore. 

 See also EqualsBuilder, for overriding an equals method. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13178804)
 Use rather the org.apache.commons library which gives you sophisticated ways implement those valuable methods well. The same library also contains ToStringBuilder which is very handy too. 

 Maven dependency => commons-lang3 (org.apache.commons) 

  class WhatEver{
...

   @Override
   public int hashCode() {
       return HashCodeBuilder.reflectionHashCode(this, false);
   }


   @Override
   public boolean equals(Object obj) {
       return EqualsBuilder.reflectionEquals(this, obj, false);
   }

...
}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9704700)
 As the message says, your object needs to implement the Comparable interface to be sortable. Alternatively, you can provide a comparator to your  sort()  method. For example, assuming your objects are Strings and you want to sort based on hashcodes, you could do this: 

  public static void main(String[] args) {
    List<String> list = Arrays.asList("string", "sdkj");
    for (String s : list) {
        System.out.println(s + "=" + s.hashCode());
    }
    Collections.sort(list, new Comparator<String>() {

        @Override
        public int compare(String o1, String o2) {
            return o1.hashCode() - o2.hashCode();
        }
    });
    System.out.println("After Sorting");
    for (String s : list) {
        System.out.println(s + "=" + s.hashCode());
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/5039178)
 The commons/lang builders are great and I have been using them for years without noticeable performance overhead (with and without hibernate. But as Alain writes, the Guava way is even nicer: 

 Here's a sample Bean: 

  public class Bean{

    private String name;
    private int length;
    private List<Bean> children;

}
  

 Here's equals( and hashCode( implemented with Commons/Lang: 

  @Override
public int hashCode({
    return new HashCodeBuilder(
        .append(name
        .append(length
        .append(children
        .HashCode(;
}

@Override
public boolean equals(final Object obj{
    if(obj instanceof Bean{
        final Bean other = (Bean obj;
        return new EqualsBuilder(
            .append(name, other.name
            .append(length, other.length
            .append(children, other.children
            .isEquals(;
    } else{
        return false;
    }
}
  

 and here with Java 7 or higher (inspired by Guava: 

  @Override
public int hashCode({
    return Objects.hash(name, length, children;
}

@Override
public boolean equals(final Object obj{
    if(obj instanceof Bean{
        final Bean other = (Bean obj;
        return Objects.equals(name, other.name
            && length == other.length // special handling for primitives
            && Objects.equals(children, other.children;
    } else{
        return false;
    }
}
  

 Note: this code originally referenced Guava, but as comments have pointed out, this functionality has since been introduced in the JDK, so Guava is no longer required. 

 As you can see the Guava / JDK version is shorter and avoids superfluous helper objects. In case of equals, it even allows for short-circuiting the evaluation if an earlier  Object.equals(  call returns false ( be fair: commons / lang has an  ObjectUtils.equals(obj1, obj2  method with identical semantics which could be used instead of  EqualsBuilder   allow short-circuiting as above. 

 So: yes, the commons lang builders are very preferable over manually constructed  equals(  and  hashCode(  methods (or those awful monsters Eclipse will generate for you, but the Java 7+ / Guava versions are even better. 

 And a note about Hibernate: 

 be careful about using lazy collections in your equals(, hashCode( and String( implementations. That will fail miserably if you don't have an open Session. 

 

 Note (about equals(: 

 a in both versions of equals( above, you might want  use one or both of these shortcuts also: 

  @Override
public boolean equals(final Object obj{
    if(obj == this return true;  // test for reference equality
    if(obj == null return false; // test for null
    // continue as above
  

 b depending on your interpretation of the equals( contract, you might also change the line(s 

      if(obj instanceof Bean{
  

  

      // make sure you run a null check before this
    if(obj.getClass( == getClass({ 
  

 If you use the second version, you probably also want  call  super(equals(  inside your  equals(  method. Opinions differ here, the pic is discussed in this question:  

 
   https://stackoverflow.com/q/8248970/342852 
 

 (although it's about  hashCode( , the same applies   equals(  

 

  Note (inspired by Comment from https://stackoverflow.com/users/274473/kayahr  

  Objects.hashCode(..  (just as the underlying  Arrays.hashCode(...  might perform badly if you have many primitive fields. In such cases,  EqualsBuilder  may actually be the better solution. 



