Query: How do I compare two dates?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15925576)
 java.util.Date class has before and after method to compare dates. 

<pre class="lang-java prettyprint-override"> Date date1 = new Date();
Date date2 = new Date();

if(date1.before(date2)){
    //Do Something
}

if(date1.after(date2)){
    //Do Something else
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/25963783)
 Use http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html to convert to  Date  to compare: 

  SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm");
Date start = sdf.parse(startDate);
Date end = sdf.parse(endDate);
System.out.println(start.before(end));
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2592549)
 Compare the two dates: 

    Date today = new Date();                   
  Date myDate = new Date(today.getYear(),today.getMonth()-1,today.getDay());
  System.out.println("My Date is"+myDate);    
  System.out.println("Today Date is"+today);
  if (today.compareTo(myDate)<0)
      System.out.println("Today Date is Lesser than my Date");
  else if (today.compareTo(myDate)>0)
      System.out.println("Today Date is Greater than my date"); 
  else
      System.out.println("Both Dates are equal"); 
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/18099342)
 first parse the string into a Date object using a SimpleDateFormat : 

  String dateStringA = "Wed, 31 Jul 2013 09:31:51";
String dateStringB = "Mon, 05 Aug 2013 10:18:24";
SimpleDateFormat parserSDF = new SimpleDateFormat("EEE, DD MMM yyyy HH:mm:ss");
Date dateA = parserSDF.parse(dateStringA);
Date dateB = parserSDF.parse(dateStringB);
if (dateA.compareTo(dateB) > 0) {
    System.out.println("A bigger");
}
  

 then compare the Date objects using compareTo method 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/15925564)
 You can use: 

  date1.before(date2);
  

  

  date1.after(date2);
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/32330680)
 In this very case you can just compare strings  date1.compareTo(date2) .  

 EDIT: However, the proper way is to use  SimpleDateFormat : 

  DateFormat f = new SimpleDateFormat("yyyy-mm-dd");
Date d1 = f.parse(date1, new ParsePosition(0));
Date d2 = f.parse(date2, new ParsePosition(0));
  

 And then compare dates: 

  d1.compareTo(d2);
  

 The comparison will return negative value if  d1  is before  d2  and positive if  d1  is after  d2 . 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/25051354)
 Convert the Date String to  java.util.Date  object using http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html and compare those date objects with http://docs.oracle.com/javase/7/docs/api/java/util/Date.html#after(java.util.Date) or http://docs.oracle.com/javase/7/docs/api/java/util/Date.html#before(java.util.Date) methods. 

 

 In  java 8  - using new http://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html, parse date String using   DateTimeFormat  and get  LocalDate  object and compare them. 

  DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
final LocalDate dt1 = dtf.parseLocalDate(dateString1);
final LocalDate dt2 = dtf.parseLocalDate(dateString2);

final boolean check = dt1.isAfter(dt2);
if(check)
    System.out.println(dt1 +" is after "+dt2);
else
    System.out.println(dt2 +" is after "+dt1);
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14452268)
 java.util.Date implements Comparable interface. That means it has compareTo method which you can use to compare 2 dates 

   int res = date1.compareTo(date2);
  

 
 res = 0 if date1 is equal to date2;  
 res < 0 if date1 is before date2; 
 res > 0 if date1 is after date2 
 



