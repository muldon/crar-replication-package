Query: Create a very large file using mapping
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21159495)
 Castor ignores fields that aren't specified in the mapping file  by default . 

 Example: (Given an object and the mapping as below) 

 Object containing 2 fields while mapping file only specifies mapping for  1 of the field only . 

    public class TestObj {
String param1;
String param2;

public String getParam1() {
    return param1;
}
public void setParam1(String param1) {
    this.param1 = param1;
}
public String getParam2() {
    return param2;
}
public void setParam2(String param2) {
    this.param2 = param2;
}}
  

 Mapping File (test-mapping.xml) 

  <mapping>
<class name="TestObj">
    <map-to />
    <field name="param1" type="java.lang.String">
        <bind-xml name="param1" node="element" />
    </field>
</class>
</mapping>
  

 Test code to print xml 

      Marshaller marshaller = new Marshaller();
    Mapping mapping = new Mapping();
    mapping.loadMapping("test-mapping.xml");
    marshaller.setMapping(mapping);
    TestObj obj = new TestObj();
    StringWriter writer = new StringWriter();
    obj.setParam1("1");
    obj.setParam2("2");

    marshaller.setWriter(writer);
    marshaller.marshal(obj);

    System.out.println("output:"+writer.toString());
  

  

  <test-obj>
<param1>1</param1>
</test-obj>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29337515)
 I think the problem is with structure of your mapping file. 

 Here is a sample example. 

  mapping.json
{
"en_brochures": {
    "properties": {
        "text": {
            "type": "string",
            "store": true,
            "index_analyzer": "en_analyzer",
            "term_vector": "yes"
        },
        "classification": {
            "type": "string",
            "index": "not_analyzed"
        },
        "language": {
            "type": "string",
            "index": "not_analyzed"
        }
    }
    }
}



String mapping = new String(Files.readAllBytes(Paths.get("mapping.json")));
    createIndexRequestBuilder.addMapping('en_brochures', mapping);
    CreateIndexResponse indexResponse =createIndexRequestBuilder.execute().actionGet();
  

 This works in mine, you can try. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3803824)
 Create a sparse file. That is, open a file, seek to a position above 1GB and write some bytes. 

 Relevant: https://stackoverflow.com/questions/245251/create-file-with-given-size-in-java 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2997328)
 Use http://www.hibernate.org/subprojects/tools.html with http://docs.jboss.org/tools/3.1.0.GA/en/hibernatetools/html/index.html 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12561209)
 I guess that you are trying create Java classes from XSD for futher XML<->POJO mapping.   

 If so - it depends on mapping lib that you use. Assume that you are using JAXB 2. The easiest way is to use XJC Maven plugin like here : http://mojo.codehaus.org/xjc-maven-plugin/usage.html and Maven will package everything to JAR then. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9648239)
 I would use RandomAcessFile for the above.   

 If you are loading a large amount of data I would use memory mapping as this will appear to be much faster (and sometimes it is) BTW You can use FileInputStream for memory mapping as well. 

  FileChannel in = new FileInputStream("test.bin").getChannel();
MappedByteBuffer mbb = in.map(FileChannel.MapMode, 0, (int) in.size());
// access mbb anywhere
long l = mbb.getLong(40000000); // long at byte 40,000,000
// 
in.close();
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8652482)
  Donot create such a huge byte[] array . Your heap may go out of memory. It is bad idea to create byte[] array of file length for such a large file.  create small byte array and read the file in chunk by chunk basis  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/2997295)
 Try http://www.redhat.com/developer_studio/guides/hibernatetools/html_single/#codegen using  hbm2java  ant target. Example http://onjava.com/pub/a/onjava/2005/12/14/hibernate-class-generation-with-hbm2java.html and http://www.coderanch.com/t/219298/ORM/java/hibernate-ant-task-hbm-java 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/12353343)
 You will always go out of memory for Large Data size. How about dividing your Data and creating small chuncks and then appending all those together. 

 Or an other option is using SAX parser which consumes less  http://tech.inhelsinki.nl/2007-08-29/. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/47664994)
 FYI, for anyone looking at this, the answer is there is not a way to do this at this time. 

 You can do this, however, by creating your mappings file as JSON in the Elasticsearch format. See:
https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html 

 You can then create that JSON file and link it to your Domain model with. 

  @Mapping(mappingPath = "some/path/mapping.json")  

 Note that this is not, in my experience, compatible with the provided annotation based mapping for fields.  



