Query: Get Request Parameters in a Servlet
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/41413398)
 If you have parameters with the same name in the query string and in the posted form data, use  getParameterValues() . 

 Example:- 

  String fromQuery = request.getParameterValues("name")[0];
String fromForm = request.getParameterValues("name")[1];
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17015612)
 This will get ALL parameters from the request. For Debugging purposes only: 

  @RequestMapping (value = "/promote", method = {RequestMethod.POST, RequestMethod.GET})
public ModelAndView renderPromotePage (HttpServletRequest request) {
    Map<String, String[]> parameters = request.getParameterMap();

    for(String key : parameters.keySet()) {
        System.out.println(key);
        String[] vals = parameters.get(key);
        for(String val : vals)
            System.out.println(" -> " + val);
    }

    ModelAndView mv = new ModelAndView();
    mv.setViewName("test");
    return mv;
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26497799)
 You can receive the parameters you submit in the form with the method: 

 request.getParameter("fieldname"); 

 For intance, your servlet could get all the fields: 

   @Override
        protected void doPost(HttpServletRequest request, HttpServletResponse response)
                throws ServletException, IOException {

                            String username= request.getParameter("username");
                            String password= request.getParameter("password");

            }
}
  

 You can also send parameters from a link, e.g:  <a href="Servlet?nameOfParameter=valueOFparameter">  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5790414)
 You can use request.getParameter("name") and request.getParameter("value") in the doGet method of your servlet. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/40790318)
 Using  session , I successfully passed a parameter ( name ) from servlet #1 to servlet #2, using  response.sendRedirect  in servlet #1. Servlet #1 code: 

  protected void doPost(HttpServletRequest request, HttpServletResponse response) {
    String name = request.getParameter("name");
    String password = request.getParameter("password");
    ...
    request.getSession().setAttribute("name", name);
    response.sendRedirect("/todo.do");
  

 In Servlet #2, you don't need to get  name  back. It's already connected to the session. You could do  String name = (String) request.getSession().getAttribute("name");  ---but you don't need this. 

 If Servlet #2 calls a JSP, you can show  name  this way on the JSP webpage: 

   Welcome ${name}   


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/4933970)
 Sure, you can always use the standard HttpServletRequest to retrieve your parameters from. You can get this request by using the PortalUtil class, like in the following example: 

  HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest);
String articleId = request.getParameter("articleId");
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16850554)
 You can reconstruct your URL manually by using  ServletRequest#getParameterNames()  and  ServletRequest#getParameter()  both available with the  HttpServletRequest  instance. 

 Here is a sample code I've used in the past for this exact purpose : 

  private String getURL()
{
    Enumeration<String> lParameters;
    String sParameter;
    StringBuilder sbURL = new StringBuilder();
    Object oRequest = FacesContext.getCurrentInstance().getExternalContext().getRequest();

    try
    {
        if(oRequest instanceof HttpServletRequest)
        {
            sbURL.append(((HttpServletRequest)oRequest).getRequestURL().toString());

            lParameters = ((HttpServletRequest)oRequest).getParameterNames();

            if(lParameters.hasMoreElements())
            {
                if(!sbURL.toString().contains("?"))
                {
                    sbURL.append("?");
                }
                else
                {
                    sbURL.append("&");
                }
            }

            while(lParameters.hasMoreElements())
            {
                sParameter = lParameters.nextElement();

                sbURL.append(sParameter);
                sbURL.append("=");
                sbURL.append(URLEncoder.encode(((HttpServletRequest)oRequest).getParameter(sParameter),"UTF-8"));

                if(lParameters.hasMoreElements())
                {
                    sbURL.append("&");
                }
            }
        }
    }
    catch(Exception e)
    {
        // Do nothing
    }

    return sbURL.toString();
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/21895437)
 When in doubt, always go to the http://download.oracle.com/otndocs/jcp/servlet-3.0-fr-eval-oth-JSpec/. In this case, see chapter  9.1.1 Query Strings in Request Dispatcher Paths  

 
   The  ServletContext  and  ServletRequest  methods that create
   RequestDispatcher   objects using path information  allow the optional
  attachment of query string  information to the path . For example, a
  Developer may obtain a  RequestDispatcher   by using the following code: 

  String path = "/raisins.jsp?orderno=5"; 
RequestDispatcher rd = context.getRequestDispatcher(path;    
rd.include(request, response;
  
  
   Parameters specified in the query string used to create the
   RequestDispatcher  take precedence over other parameters of the same
  name passed to the included servlet.  The parameters associated with a
   RequestDispatcher  are scoped to apply only for  the duration of the
  include or forward call.  
 

   

  RequestDispatcher rd = getServletContext(.getRequestDispatcher("/report?p="+value;
rd.forward(request, response;   
  

 And the parameter  p  will be available only for  HttpServletRequest  that is given to the resource mapped to handle the specified path, ie.  /report  in this case. If that is a  HttpServlet , you can then access it with  

  request.getParameter("p";
  

 where  request  would be the  HttpServletRequest  method parameter. 

 When the  forward(..  call terminates and execution comes back to your  PreProcessingServlet , the parameter will no longer be available in the local  HttpServletRequest  object. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/6004378)
 Just wrap the icon in a link with a query string like so 

  servleturl?name=facebook
  

 In the  doGet()</codemethod of the servlet just get and handle it as follows 

  String name = request.getParameter("name");

if ("facebook".equals(name)) {
    // Do your specific thing here.
}
  

 See also:</h3>

 
 https://stackoverflow.com/tags/servlets/info 
 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/9800299)
 yes you can forward the parameter servlet to jsp and jsp to servlet. 

 when you can set the attribute in request then it will lost on destination.means you can not access that on third resource. 

  request.setAttribute(attribute name,attribute value)
  

 you can do same thing in session also. 



