Query: How do I clone an array variable?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/34699357)
 1D array of primitives does copy elements when it is cloned. This tempts us to clone 2D array(Array of Arrays). 

 Remember that 2D array clone doesn't work due to shallow copy implementation of  clone() . 

  public static void main(String[] args) {
    int row1[] = {0,1,2,3};
    int row2[] =  row1.clone();
    row2[0] = 10;
    System.out.println(row1[0] == row2[0]); // prints false

    int table1[][]={{0,1,2,3},{11,12,13,14}};
    int table2[][] = table1.clone();
    table2[0][0] = 100;
    System.out.println(table1[0][0] == table2[0][0]); //prints true
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/36631649)
   .clone()  on an array object will clone the array.  That does not clone other objects, namely the objects referred to by elements in the array. 

 What you are asking about is a https://en.wikipedia.org/wiki/Object_copying#Methods_of_copying.  After creating a new array to hold the new objects, then you need to iterate through the old array and clone each of the objects referred to there: 

  this.feitico = new Spell[rValue.feitico.length];
for (int i = 0; i < this.feitico.length ; i += 1)
    {
    this.feitico[i] = rValue.feitico[i].clone();
    }
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22394752)
 . 

 To understand this, you must understand (1) what a multidimensional array is in Java, and (2) that  clone()  is "shallow". 

 I'm going to start use 2D arrays in these examples, because they are a little simpler. 

 (1) A 2D array in Java is an array of arrays. 

  int[][] a = new int[4][];
a[0] = new int[1];
a[1] = new int[8];
a[3] = new int[0];
  

 This is an array of four arrays of  ints : an array of 1  int , an array of 8  int s,   null , and an array of no  int s. 

 (2) Now,  clone()  does a  shallow  copy. That means that it creates a copy of the array (or object) with the same elements, but the elements of that copied array (or object) are the same as the original. 

 That means that if I have 

  int[][] b = a.clone();
  

 then  b  is a different array than  a , with the same elements. If I do  a[0] = new int[45] , then  b  is unaffected. 

 Remember, however, that the  elements  of  b  are the same as the elements of  a .  

  a[0][0] = 1
  

 that affects  b[0] , since  a[0]  and  b[0]  are the same array in memory. 

 

  

  int[][]x = {{1,2},{3,4}};
int[][]y = new int[2][];
y[0] = x[0].clone();
y[1] = x[1].clone();
  

 You essential do a "2-deep" clone on a 2D array. That is,  x  and  y  are different. And  x[0]  and  y[0]  are different. But  x[0][0]  and  y[0][0]  are the same in memory. But, oh, it looks like that is just an  int , and you can't mutate an  int , like you could an array. 

 In the second example, you do essentially do a 2-deep clone on a 3D array. You can (and do) mutate  x[0][0] , which is the same as  y[0][0] . 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/10134532)
 You need to clone your array. 

  test2=test.clone();
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/12445291)
 Declare a new constructor for  IntVector  which takes an int array and a count: 

  IntVector(int[] data, int n) {
  items_ = data.clone();
  itemCount_ = n;
}
  

 Then you can write clone like this: 

  public IntVector clone() {
  return new IntVector(items_, itemCount_);
}
  

 You can make that new constructor  private  if you like, so only  clone  can use it. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27715177)
 When you assign an array variable to an existing array, you don't get a new array. You get two references to the same array. 

  

  int[] a = { 1, 2, 3};
int[] b = a;
  

  a  and  b  are not two arrays, but two references to the same array. Subsequently altering  a  is the same as altering  b . 

 With 2D arrays there is another catch: an array  int[][] x  is actually an array holding a sequence of other arrays. So a naive copy of it ( int[][] y = x.clone() ) would give you two  int[][]  arrays holding shared references to a sequence of  int[]  arrays. 

 To properly copy a 2D array requires copying the individual 1D arrays inside it. 

 -- 

 In your case, both your objects hold references to the same array. If you want them to have separate arrays you need to copy the array. You could copy the array in the constructor like this: 

  public Board(int[][] layout) {
    board = new int[layout.length][];
    for (int i = 0; i < layout.length; ++i) {
        board[i] = layout[i].clone();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/9942358)
 You need to use array's  clone()  method to make its copy: 

  //for example
int[][] copy = (int[][])arraySource.clone();
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27357042)
 It is possible to use streams in Java 8 to copy a 2D array. 

  @Test
public void testCopy2DArray() {
   int[][] data = {{1, 2}, {3, 4}};
   int[][] dataCopy = Arrays.stream(data)
             .map((int[] row) -> row.clone())
             .toArray((int length) -> new int[length][]);

   assertNotSame(data, dataCopy);
   assertNotSame(data[0], dataCopy[0]);
   assertNotSame(data[1], dataCopy[1]);

   dataCopy[0][1] = 5;
   assertEquals(2, data[0][1]);
   assertEquals(5, dataCopy[0][1]);
}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/3208903)
 It's easy, and it's a great idea to do it. 

  byte[] copy = arr.clone();
  

 Note that the return type of the  clone()  method of arrays is the type of the array, so no cast is required. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/9942494)
 The problem is the way Array is added to the Object here. You are not adding the Array to the Object. What is happening is you are adding the address to the location in memory where the Array resides. So every time you add the Array to the Object, you are adding the same address every time. So every Array in the Object is actually the same Array over and over since they all point to a single location in memory. So when you change the Array, it will appear to change all of them inside the Object.  

 The best thing to do is either create a new Array every time through the loop, essentially creating a new location in memory for the Array to reside, or  clone()  the Array which will create a new reference. 

 Example: 

  String[] houseOfStark = {"Eddard", "Catelyn", 
                       "Robb", "Sansa", "Arya", "Bran", "Rickon"}; // Sorry Jon
String[] copyOfStark  = houseOfStark;
String[] cloneOfStark = houseOfStark.clone();

houseOfStark[1] = "Lady Catelyn";

System.out.println(houseOfStark[1]);
System.out.println(copyOfStark[1]);
System.out.println(cloneOfStark[1]);
  

 Will produce: 

  Lady Catelyn
Lady Catelyn
Catelyn
  

 http://geekswithblogs.net/dforhan/archive/2005/12/01/61852.aspx  



