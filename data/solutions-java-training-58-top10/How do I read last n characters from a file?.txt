Query: How do I read last n characters from a file?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/43077054)
 Try something like this ...  

 You just read file line by line, split each line using  space  character, and convert last part of the line into  integer . 

  int sum=0;
try (BufferedReader br = new BufferedReader(new FileReader(file))) {
    String line;
    while ((line = br.readLine()) != null) {
       String[] res = line.split(" ");
       sum = sum + Integer.parseInt(res[res.length - 1]);
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/30458799)
 Below is a simple example of reading a file char by char , and appending a new line after 16 characters  

  Excerpt from  https://stackoverflow.com/questions/13370053/how-to-read-an-input-file-char-by-char-using-a-scanner 

  public class FileReader
{
  public static void main(String[] args) throws FileNotFoundException
  {

    StringBuilder stringBuilder = new StringBuilder();
    Scanner scanner = null;
    int count = 0;
    try
    {
      scanner = new Scanner(new BufferedReader(new java.io.FileReader("d:\\text.txt")));
      while (scanner.hasNext())
      {
        String str = scanner.next();
        char[] myChar = str.toCharArray();
        for (char c : myChar)
        {
          stringBuilder.append(c);
          count++;
          if (count == 16)
          {
            count = 0;
            stringBuilder.append("\n");
          }
        }
      }
      System.out.println(stringBuilder.toString());
    }
    finally
    {
      if (scanner != null)
      {
        scanner.close();
      }
    }
  }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/7322581)
  Below are two functions, one that returns the last non-blank line of a file without loading or stepping through the entire file, and the other that returns the last N lines of the file without stepping through the entire file:  

 What tail does is zoom straight to the last character of the file, then steps backward, character by character, recording what it sees until it finds a line break.  Once it finds a line break, it breaks out of the loop.  Reverses what was recorded and throws it into a string and returns.  0xA is the new line and 0xD is the carriage return.   

 If your line endings are  \r\n  or  crlf  or some other "double newline style newline", then you will have to specify n*2 lines to get the last n lines because it counts 2 lines for every line.   

  public String tail( File file ) {
    RandomAccessFile fileHandler = null;
    try {
        fileHandler = new RandomAccessFile( file, "r" );
        long fileLength = fileHandler.length() - 1;
        StringBuilder sb = new StringBuilder();

        for(long filePointer = fileLength; filePointer != -1; filePointer--){
            fileHandler.seek( filePointer );
            int readByte = fileHandler.readByte();

            if( readByte == 0xA ) {
                if( filePointer == fileLength ) {
                    continue;
                }
                break;

            } else if( readByte == 0xD ) {
                if( filePointer == fileLength - 1 ) {
                    continue;
                }
                break;
            }

            sb.append( ( char ) readByte );
        }

        String lastLine = sb.reverse().toString();
        return lastLine;
    } catch( java.io.FileNotFoundException e ) {
        e.printStackTrace();
        return null;
    } catch( java.io.IOException e ) {
        e.printStackTrace();
        return null;
    } finally {
        if (fileHandler != null )
            try {
                fileHandler.close();
            } catch (IOException e) {
                /* ignore */
            }
    }
}
  

  But you probably don't want the last line, you want the last N lines, so use this instead:  

  public String tail2( File file, int lines) {
    java.io.RandomAccessFile fileHandler = null;
    try {
        fileHandler = 
            new java.io.RandomAccessFile( file, "r" );
        long fileLength = fileHandler.length() - 1;
        StringBuilder sb = new StringBuilder();
        int line = 0;

        for(long filePointer = fileLength; filePointer != -1; filePointer--){
            fileHandler.seek( filePointer );
            int readByte = fileHandler.readByte();

             if( readByte == 0xA ) {
                if (filePointer < fileLength) {
                    line = line + 1;
                }
            } else if( readByte == 0xD ) {
                if (filePointer < fileLength-1) {
                    line = line + 1;
                }
            }
            if (line >= lines) {
                break;
            }
            sb.append( ( char ) readByte );
        }

        String lastLine = sb.reverse().toString();
        return lastLine;
    } catch( java.io.FileNotFoundException e ) {
        e.printStackTrace();
        return null;
    } catch( java.io.IOException e ) {
        e.printStackTrace();
        return null;
    }
    finally {
        if (fileHandler != null )
            try {
                fileHandler.close();
            } catch (IOException e) {
            }
    }
}
  

  Invoke the above methods like this:  

  File file = new File("D:\\stuff\\huge.log");
System.out.println(tail(file));
System.out.println(tail2(file, 10));
  

  Warning 
In the wild west of unicode this code can cause the output of this function to come out wrong.  For example "Mary?s" instead of "Mary's".  Characters with http://en.wikipedia.org/wiki/Diacritic etc may cause the output to be wrong because accents are added as modifiers after the character.  Reversing compound characters changes the nature of the identity of the character on reversal.  You will have to do full battery of tests on all languages you plan to use this with. 

 For more information about this unicode reversal problem read this:
http://msmvps.com/blogs/jon_skeet/archive/2009/11/02/omg-ponies-aka-humanity-epic-fail.aspx 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/43076906)
 Assuming only the information provided (line items are delimited by a single space, and the last item is always the number you want) you can read each line in the file and perform the following on each line. 

  String[] splitLine = line.split(" ");
total += Integer.parseInt(splitLine[splitLine.length - 1]);
  

 Reading the file and looping through each line is left as an exercise for the reader. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/18776662)
 use the filereader to read the file  use the regex to split into words      

      BufferedReader br = new BufferedReader( new FileReader( "file.txt" ) );
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while ( line != null ) {
            sb.append( line );
            sb.append( '\n' );
            line = br.readLine();
        }
        String everything = sb.toString();
        String[] words = everything.split( "[^\\w']+" );

        System.out.println( words );

    } finally {
        br.close();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/20296737)
 The size of the file does not matter for correctness (as long as you have enough ram to store the intermediate data), but it does matter in terms of performance. http://www.xyzws.com/Javafaq/how-to-read-and-write-utf8-file-in-java/164 explains how to read UTF-8 in Java. It uses InputStreamReader: 

           try {
            Reader reader = new InputStreamReader(
                        new FileInputStream(args[0]),"UTF-8");
            BufferedReader fin = new BufferedReader(reader);

            String line;
            while ((line = fin.readLine())!=null) {
                // do something with line
            }
            fin.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
  

 Note that he reads line by line. For large files, IO performance is important, so you might instead want to read the data in chunks of 4k or 8k bytes instead. Note though that that might break up characters (since UTF-8 characters can have one or more bytes, there is no way of telling in advance if a character ends exactly on a chunk boundary). 

 In that case, you either want to treat the text as data until you finished reading, or you must go through all read characters to find out, if you must append the last byte to the next chunk before processing it. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/47792341)
 I had similar problem, but I don't understood to another solutions. 

 I used this. I hope thats simple code. 

  // String filePathName = (direction and file name).
File f = new File(filePathName);
long fileLength = f.length(); // Take size of file [bites].
long fileLength_toRead = 0;
if (fileLength > 2000) {
    // My file content is a table, I know one row has about e.g. 100 bites / characters. 
    // I used 1000 bites before file end to point where start read.
    // If you don't know line length, use @paxdiablo advice.
    fileLength_toRead = fileLength - 1000;
}
try (RandomAccessFile raf = new RandomAccessFile(filePathName, "r")) { // This row manage open and close file.
    raf.seek(fileLength_toRead); // File will begin read at this bite. 
    String rowInFile = raf.readLine(); // First readed line usualy is not whole, I needn't it.
    rowInFile = raf.readLine();
    while (rowInFile != null) {
        // Here I can readed lines (rowInFile) add to String[] array or ArriyList<String>.
        // Later I can work with rows from array - last row is sometimes empty, etc.
        rowInFile = raf.readLine();
    }
}
catch (IOException e) {
    //
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15317179)
 Using a http://docs.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html to http://docs.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html#seek%28long%29, then http://docs.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html#read%28byte%5B%5D,%20int,%20int%29 your bytes out. 

  File file = new File("DemoRandomAccessFile.out");
RandomAccessFile raf = new RandomAccessFile(file, "r");

// Seek to the end of file
raf.seek(file.length() - n);
// Read it out.
raf.read(yourbyteArray, 0, n);
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/4121696)
 If you use a http://download.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html, you can use http://download.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html#length%28%29 and http://download.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html#seek%28long%29 to get to a specific point near the end of the file and then read forward from there. 

 If you find there weren't enough lines, back up from that point and try again. Once you've figured out where the  N th last line begins, you can seek to there and just read-and-print. 

 An initial best-guess assumption can be made based on your data properties. For example, if it's a text file, it's possible the line lengths won't exceed an average of 132 so, to get the last five lines, start 660 characters before the end. Then, if you were wrong, try again at 1320 (you can even use what you learned from the last 660 characters to adjust that - example: if those 660 characters were just three lines, the next try could be 660 / 3 * 5, plus maybe a bit extra just in case). 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/28259853)
 You are storing the newlines in the array. 

 Given that code, and that file, and that  outArray  contains [7][4] elements,  outArray  should end up containing: 

  outArray[0][0] == 'a'
outArray[0][1] == 'b'
outArray[0][2] == 'c'
outArray[0][3] == 'd'
outArray[1][0] == '\n'
outArray[1][1] == 'e'
outArray[1][2] == 'f'
outArray[1][3] == 'g'
outArray[2][0] == 'h'
outArray[2][1] == '\n'
outArray[2][2] == 'i'
outArray[2][3] == 'j'
// etc
outArray[6][0] == '\n'
outArray[6][1] == 'u'
outArray[6][2] == 'v'
outArray[6][3] == 'w'
  

  

      0    1    2    3
0  'a'  'b'  'c'  'd'
1 '\n'  'e'  'f'  'g'
2  'h' '\n'  'i'  'j'
3  'k'  'l' '\n'  'm'
4  'n'  'o'  'p' '\n'
5  'q'  'r'  's'  't'
6 '\n'  'u'  'v'  'w'
  

 This is because you are ignoring the fact that your file also contains newline characters. If your file didn't contain any newline characters (i.e. it was all on one line) then your code would successfully read it into the 7x4 array. 

 If your file always has the same format, you could skip over the newlines (since you know where to expect them), like so: 

  for(int i = 0; i < outArray.length; i++) {
   for(int j = 0; j < outArray[0].length; j++){
    outArray[i][j] = (char)br.read();
   }
   br.read(); // read the next character (which will be a newline) and ignore it
}
  



