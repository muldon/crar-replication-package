Query: How do I convert raw IP address to String?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9286956)
  

  InetAddress address = InetAddress.getByName(new URL(urlString).getHost());
  

 To get the raw IP: 

  String ip = address.getHostAddress();
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/9341037)
 Just call the InetAddress toString() method. Also, if you specifically want the host name, use getHostName. If you want a string representation of the IP address, use  getHostAddress() .  

  

  InetAddress inet = InetAddress.getByName("193.125.22.1");
System.out.println(inet.toString());
  

 for more information see: http://www.java2s.com/Code/JavaAPI/javax.net/InetAddressgetByNameStringname.htm 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/6026452)
 You can use  getHostAddress()  method of http://download.oracle.com/javase/6/docs/api/java/net/InetAddress.html#getHostAddress%28%29 to get host address without  / . 

 And if you are using  InetSocketAddress  then use  getAddress().getHostAddress()  to get host ip without  / . 

  InetAddress inetAddress = InetAddress.getByName("192.168.0.105");
System.out.println(inetAddress.getHostAddress());

InetSocketAddress address = new InetSocketAddress("192.168.0.105", 5555);
System.out.println(address.getAddress().getHostAddress());
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11548405)
  public class Main
{
    public static void main(String[] args)
    {
        String ip="192.168.1.10";
        String[] addrArray = ip.split("\\.");
        long num = 0;
        for (int i = 0; i < addrArray.length; i++)
        {
            int power = 3 - i;
            num += ((Integer.parseInt(addrArray[i]) % 256 * Math.pow(256, power)));
        }
        System.out.println(num);
    }
}
  

 Output: 

  3232235786
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/11548338)
 How about (tested & working): 

      String ipAddress = "192.168.1.10";
    String[] addrArray = addr.split("\\.");

    long ipDecimal = 0;

    for (int i = 0; i < addrArray.length; i++) {

        int power = 3 - i;
        ipDecimal += ((Integer.parseInt(addrArray[i]) % 256 * Math.pow(256, power)));
    }

    System.out.println(ipDecimal);
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/44079384)
 You are using raw-types. . Next, you'll need to parse the  String  representation to get  int  values from the four octets in the IP (or 192.168.100.1 will come before 192.168.2.1). You can pass a custom  Comparator  to  Collections.sort . Assuming you are using Java 8+, they might look something like 

  List<String> addressList = new ArrayList<>(Arrays.asList("192.168.0.5", // 
        "192.168.0.1", "192.168.25.1", "192.168.10.21", "192.168.77.1"));
Collections.sort(addressList, (a, b) -> {
    int[] aOct = Arrays.stream(a.split("\\.")).mapToInt(Integer::parseInt).toArray();
    int[] bOct = Arrays.stream(b.split("\\.")).mapToInt(Integer::parseInt).toArray();
    int r = 0;
    for (int i = 0; i < aOct.length && i < bOct.length; i++) {
        r = Integer.compare(aOct[i], bOct[i]);
        if (r != 0) {
            return r;
        }
    }
    return r;
});
System.out.println(addressList);
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20519622)
  

  InetAddress inetAddress = InetAddress.getByName("192.168.0.105");
  

 
   If a literal IP address is supplied, only the validity of the address
  format is checked. 
 

 java source code 

 
  // if host is an IP address, we won't do further lookup    
if (Character.digit(host.charAt(0), 16) != -1 || (host.charAt(0) == ':')) {

}
  
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/11548450)
  

  new BigInteger( InetAddress.getByName("1.1.1.1").getAddress() ).intValue()
  

 If I remember correctly this should do the trick... obviously use your IP rather than 1.1.1.1. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36836399)
 The can be done using  InetAddress  as follows. 

     //Converts a String that represents an IP to an int.
   InetAddress i= InetAddress.getByName(IPString);
   int intRepresentation= ByteBuffer.wrap(i.getAddress()).getInt();

   //This convert an int representation of ip back to String
   i= InetAddress.getByName(String.valueOf(intRepresentation));
   String ip= i.getHostAddress();
  



