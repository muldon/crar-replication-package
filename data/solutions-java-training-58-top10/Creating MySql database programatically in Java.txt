Query: Creating MySql database programatically in Java
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35435393)
 If you don't want to do it through the URL, you can use the  Properties  object with  DriverManager : 

  Properties props = new Properties();
props.setProperty("user", ...);
props.setProperty("password", ...);
props.setProperty("rewriteBatchedStatements", "true");
Connection connection = DriverManager.getConnection(url, props);
  

 If you use a  MysqlDataSource  or  MysqlConnectionPoolDataSource  then you need to set the property  rewriteBatchedStatements  (or call setter  setRewriteBatchedStatements(boolean)  

 To change this at runtime after you have obtained a connection, you should be able to use: 

  ((com.mysql.jdbc.ConnectionProperties) connection).setRewriteBatchedStatements(true);
  

 Note: I have only looked at the MySQL Connector/J sources for this last option, I haven't tested it. 

  UPDATED  

 For  c3p0  you can use the following: 

  ComboPooledDataSource cpds = ...
Connection connection = cpds.getConnection();
connection.unwrap(com.mysql.jdbc.ConnectionProperties.class).setRewriteBatchedStatements(true);
  

 c3p0 should be  com.mchange:c3p0:0.9.5.2 , be carefull with  com.mchange  - with other groupId this code does not work. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/17204796)
 you need to run 'mysqld.exe' to start the mysql server. This file can be found in the 'bin' folder in the mysql main folder (Assuming that you are working in windows). In my case 'mysql-5.6.10-win32\bin\mysqld.exe' . 

 From Java if you want to do the same - I used the following code and it worked. . 

  

  String command = "~path~\\mysql-5.6.10-win32\\bin\\mysqld.exe";

try
{
    Process process = Runtime.getRuntime().exec(command);
} 
catch (IOException e)
{
    e.printStackTrace();
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/3168078)
 Try setting following properties 

  properties.put("hibernate.connection.driver_class", "net.sourceforge.jtds.jdbc.Driver");
properties.put("hibernate.connection.url", "jdbc:jtds:sqlserver://test/dbname;SSL=REQUEST");
properties.put("hibernate.cconnection.username", "user");
properties.put("hibernate.connection.password", "password");
properties.put("hibernate.dialect", "org.hibernate.dialect.SQLServerDialect");
  

 of course this is for SQL Server so you would need to change driver to 'org.gjt.mm.mysql.Driver"'
and change dialect as well 'org.hibernate.dialect.MySQLInnoDBDialect'  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/16182086)
 Look into Runtime.exec(), which will allow you to start mySQL via console. 

 http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Runtime.html 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/21353834)
 If you want connect to database via SSH tunnel I can recommend you Java implementation of SSH.
Supports authorization with certificates, port-forwarding, the connection through a proxy, etc. 

 See 

 
 http://www.jcraft.com/jsch/ 
 http://www.jcraft.com/jsch/examples/ 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30186724)
 You have to register a JDBC driver before creating a connection. In your case it is MySQL driver. Download mysql-connector jar and then add it to your classpath and then run your application like the below code      

  try{
  //Register JDBC driver
  Class.forName("com.mysql.jdbc.Driver");

  //Open a connection
  Connection conn = DriverManager.getConnection(DB_URL,USER,PASS);

  //Create a statement
  Statement stmt = conn.createStatement();

  //Execute the query
  String insert = "INSERT INTO testtable VALUE ('Guy' , '0156421')";
  stmt.executeUpdate(insert);
}
catch(Exception e){
  System.out.println("Exception is " + e.getMessage());
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/16182170)
 
 Option 1 :  Find out how to start mysql from command line. Then use http://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html to do that  
 Option 2:  Use embeddable version of mysql 
, if that suits  you :  See http://dev.mysql.com/doc/connector-mxj/en/connector-mxj-configuration-java-object.html 
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/12167615)
 You can rekey a database by executing a  PRAGMA rekey  command.  More information can be found http://sqlcipher.net/sqlcipher-api/#rekey. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/21357581)
 What kind of clearance will you have on the target server? If possible, I'd suggest the accepted answer https://stackoverflow.com/a/3778205/2882550 which seems to address an issue similar to yours. Moreover, it keeps JPA and SSH separate. 


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/5582527)
 It is not possible to create a windows ODBC DSN programmatically with pure Java.  It is possible with C++ and other native approaches. 

 However, you can connect to an Access MDB file directly (via ODBC) using a JDBC URL of the form: 

 
  String jdbcUrl = "jdbc:odbc:Driver={MicroSoft Access Driver (*..mdb"  
 

 This way you do not need to have predefined DSN.  You might also want to review the answers to this question: 

 
 https://stackoverflow.com/questions/2578886/how-can-i-add-a-password-to-this-jdbcodbc-connection-string-that-is-trying-to-co 
 



