Query: Take a screenshot and save as image in Java
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/31083752)
  GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();  
GraphicsDevice[] screens = ge.getScreenDevices();       
Rectangle allScreenBounds = new Rectangle();  
for (GraphicsDevice screen : screens) {  
       Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();        
       allScreenBounds.width += screenBounds.width;  
       allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height);
       allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x);
       allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y);
      } 
Robot robot = new Robot();
BufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds);
File file = new File("C:\\Users\\Joe\\Desktop\\scr.png");
if(!file.exists())
    file.createNewFile();
FileOutputStream fos = new FileOutputStream(file);
ImageIO.write( bufferedImage, "png", fos );
  

 bufferedImage will contain a full screenshot, this was tested with three monitors  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18156495)
 If you'd like to capture all monitors, you can use the following code: 

  GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
GraphicsDevice[] screens = ge.getScreenDevices();

Rectangle allScreenBounds = new Rectangle();
for (GraphicsDevice screen : screens) {
    Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();

    allScreenBounds.width += screenBounds.width;
    allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height);
}

Robot robot = new Robot();
BufferedImage screenShot = robot.createScreenCapture(allScreenBounds);
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10796047)
 I never liked using Robot, so I made my own simple method for making screenshots of JFrame objects: 

  public static final void makeScreenshot(JFrame argFrame) {
    Rectangle rec = argFrame.getBounds();
    BufferedImage bufferedImage = new BufferedImage(rec.width, rec.height, BufferedImage.TYPE_INT_ARGB);
    argFrame.paint(bufferedImage.getGraphics());

    try {
        // Create temp file
        File temp = File.createTempFile("screenshot", ".png");

        // Use the ImageIO API to write the bufferedImage to a temporary file
        ImageIO.write(bufferedImage, "png", temp);

        // Delete temp file when program exits
        temp.deleteOnExit();
    } catch (IOException ioe) {
        ioe.printStackTrace();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4490471)
 Use http://download.oracle.com/javase/6/docs/api/java/awt/Robot.html#createScreenCapture%28java.awt.Rectangle%29. 

  BufferedImage image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
ImageIO.write(image, "png", new File("/screenshot.png"));
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/58326)
 Believe it or not, you can actually use http://java.sun.com/javase/6/docs/api/java/awt/Robot.html#createScreenCapture&#40;java.awt.Rectangle&#41; to "create an image containing pixels read from the screen." You can then write that image to a file on disk. 

 I just tried it, and the whole thing ends up like: 

  Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
BufferedImage capture = new Robot().createScreenCapture(screenRect);
ImageIO.write(capture, "bmp", new File(args[0]));
  

 NOTE: This will only capture the primary monitor. See http://java.sun.com/javase/6/docs/api/java/awt/GraphicsConfiguration.html for multi-monitor support. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/27866954)
 I use this solution 

  public void saveScreenshotOnDisk (final View view, final Context context, final String folder, final String title, final String description) {

    final String state = Environment.getExternalStorageState();
    if (state.equals(Environment.MEDIA_MOUNTED)) {
        final Bitmap screenshot = screenShot(view, context);
        final File folderPath = new File(Environment.getExternalStorageDirectory().toString() + File.separatorChar + folder + File.separatorChar + "" + "s");
        if (!folderPath.exists()) {
            folderPath.mkdirs();
        }

        final String imagePath = folderPath.getAbsolutePath() + File.separatorChar + "Receipt" + "_" + System.currentTimeMillis() + ".png";
        OutputStream fout = null;
        File imageFile = new File(imagePath);
        try {
            fout = new FileOutputStream(imageFile);
            screenshot.compress(Bitmap.CompressFormat.JPEG, 90, fout);
            MediaStore.Images.Media.insertImage(context.getContentResolver(), screenshot, title, description);

            Toast.makeText(context, "Verifique a pasta " + folder + " .", Toast.LENGTH_LONG).show();
        } catch (Exception e) {
            BBLog.w(TAG + ".saveScreenshotOnDisk", e.getMessage());
        }finally{
            try {
                if(fout != null){
                    fout.flush();
                    fout.close();
                }
            } catch (Exception e2) {}
        }
    }
}

public static Bitmap screenShot(final View view, final Context context) {
    view.setBackgroundColor(Color.WHITE);

    Bitmap capture = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
    Canvas c = new Canvas(capture);
    view.draw(c);

    view.setBackgroundColor(Color.TRANSPARENT);

    shootSound(context);

    return capture;
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/18187002)
 Does this work for you? 

  filepath = fullfile(dest_dir, sprintf('%s_screencapture.jpg',current_stock));

filehandle = java.io.File(filepath);

javax.imageio.ImageIO.write(image,'jpg',filehandle);
  

 PS - best not to use  image  or  rectangle  as variable names, as they are the names of built-in MATLAB commands. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/32628877)
 get the device list from ADB 

  IDevice[] devices = bridge.getDevices();
  

 Then you can get the specific device with serial number  

  d.getSerialNumber()
  

 Then capture the screen, 

  RawImage rawImage = device.getScreenshot();
  

 convert raw data to an Image 

      BufferedImage image = new BufferedImage(rawImage.width, rawImage.height,
            BufferedImage.TYPE_INT_ARGB);

    int index = 0;
    int IndexInc = rawImage.bpp >> 3;
    for (int y = 0 ; y < rawImage.height ; y++) {
        for (int x = 0 ; x < rawImage.width ; x++) {
            int value = rawImage.getARGB(index);
            index += IndexInc;
            image.setRGB(x, y, value);
  

 finally save the image 

  ImageIO.write(image, "png", new File(filepath));
  

 use ddmlib.jar 

 Source:
https://github.com/miracle2k/android-platform_sdk/blob/master/screenshot/src/com/android/screenshot/Screenshot.java 

 working and library can be found here..
http://www.java2s.com/Code/Jar/d/Downloadddmlibjar.htm 



