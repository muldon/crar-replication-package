Query: How do I breaks a paragraph into sentences?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/21430737)
  String[] sentenceHolder = titleAndBodyContainer.split("(?i)(?<=[.?!])\\S+(?=[a-z])");
  

 Try this it worked for me. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21430792)
  

  String str = "This is how I tried to split a paragraph into a sentence. But, there is a problem. My paragraph includes dates like Jan.13, 2014 , words like U.S and numbers like 2.2. They all got split by the above code.";

Pattern re = Pattern.compile("[^.!?\\s][^.!?]*(?:[.!?](?!['\"]?\\s|$)[^.!?]*)*[.!?]?['\"]?(?=\\s|$)", Pattern.MULTILINE | Pattern.COMMENTS);
Matcher reMatcher = re.matcher(str);
while (reMatcher.find()) {
    System.out.println(reMatcher.group());
}
  

 Output: 

<pre class="lang-none prettyprint-override"> This is how I tried to split a paragraph into a sentence.
But, there is a problem.
My paragraph includes dates like Jan.13, 2014 , words like U.S and numbers like 2.2.
They all got split by the above code.
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/33900185)
 You can pretty easy use Stanford tagger for this. 

  String text = new String("Your text....");  //Your own text.
List<List<HasWord>> tokenizedSentences = MaxentTagger.tokenizeText(new StringReader(text));

for(List<CoreLabel> act : tokenizedSentences)       //Travel trough sentences
{
    System.out.println(edu.stanford.nlp.ling.Sentence.listToString(act)); //This is your sentence
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/17983763)
 You can try to use the  java.text.BreakIterator  class for parsing sentences. For example: 

<pre class="lang-java prettyprint-override"> BreakIterator border = BreakIterator.getSentenceInstance(Locale.US);
border.setText(text);
int start = border.first();
//iterate, creating sentences out of all the Strings between the given boundaries
for (int end = border.next(); end != BreakIterator.DONE; start = end, end = border.next()) {
    System.out.println(text.substring(start,end));
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9493264)
 You can check the DocumentPreprocessor class. Below is a short snippet. I think there may be other ways to do what you want. 

  String paragraph = "My 1st sentence. “Does it work for questions?” My third sentence.";
Reader reader = new StringReader(paragraph);
DocumentPreprocessor dp = new DocumentPreprocessor(reader);
List<String> sentenceList = new ArrayList<String>();

for (List<HasWord> sentence : dp) {
   // SentenceUtils not Sentence
   String sentenceString = SentenceUtils.listToString(sentence);
   sentenceList.add(sentenceString);
}

for (String sentence : sentenceList) {
   System.out.println(sentence);
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/39985697)
 With the http://stanfordnlp.github.io/CoreNLP/#about provided by Stanford CoreNLP version 3.6.0 or 3.7.0. 

 Here's an example with 3.6.0. It works exactly the same with 3.7.0. 

 Java Code Snippet 

  import java.util.List;

import edu.stanford.nlp.simple.Document;
import edu.stanford.nlp.simple.Sentence;
public class TestSplitSentences {
    public static void main(String[] args) {
        Document doc = new Document("The text paragraph. . .");
        List<Sentence> sentences = doc.sentences();
        sentences.stream().forEach(System.out::println);
    }
}
  

 Yields: 

 
   The text paragraph. 
  
   . 
  
   . 
 

 pom.xml 

  <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>stanfordcorenlp</groupId>
    <artifactId>stanfordcorenlp</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/edu.stanford.nlp/stanford-corenlp -->
        <dependency>
            <groupId>edu.stanford.nlp</groupId>
            <artifactId>stanford-corenlp</artifactId>
            <version>3.6.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>2.6.1</version>
        </dependency>
    </dependencies>
</project>
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/6514989)
 How about this as an alternative:     

  public String[] extractFirstSentences() {
    String myText = getText();
    String[] paragraphs = myText.split("\\n");
    List<String> result = new ArrayList<String>();
    for (String paragraph : paragraphs) {
        result.add(paragraph.split("[\\.\\?\\!][\\r\\n\\t ]+")[0] + ".");
    }

    return result.toArray(new String[result.size()]);
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14768187)
  String  word[j]=sentences[i].split(" ");
          ^^^^^^^^
  

 this is not a valid  String  or  String array  declaration. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20172593)
 It appears that the existence of a  ParagraphsAnnotation  class in CoreNLP is a red herring - nothing actually uses this class (see http://grepcode.com/search/usages?type=type&id=repo1.maven.org%24maven2@edu.stanford.nlp%24stanford-corenlp@3.2.0@edu%24stanford%24nlp%24ling@CoreAnnotations.ParagraphsAnnotation&k=u - quite literally, there are no references to this class other than its definition).  Therefore, I have to break the paragraphs myself. 

 The key to this is to notice that each sentence contained within the  SentencesAnnotation  contains a  CharacterOffsetBeginAnnotation .  My code then becomes something like this: 

      List<CoreMap> sentences = document.get(SentencesAnnotation.class);
    List<Sentence> convertedSentences = new ArrayList<> ();
    for (CoreMap sentence : sentences)
    {
        int sentenceOffsetStart = sentence.get (CharacterOffsetBeginAnnotation.class);
        if (sentenceOffsetStart > 1 && text.substring (sentenceOffsetStart - 2, sentenceOffsetStart).equals("\n\n") && !convertedSentences.isEmpty ())
        {
            Paragraph current = new Paragraph (convertedSentences);
            paragraphs.add (current);
            convertedSentences = new ArrayList<> ();
        }           
        convertedSentences.add (new Sentence (sentence));
    }
    Paragraph current = new Paragraph (convertedSentences);
    paragraphs.add (current);
  



