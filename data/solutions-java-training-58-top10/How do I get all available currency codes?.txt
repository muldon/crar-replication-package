Query: How do I get all available currency codes?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/3537085)
 After studying the ISO table and the Currency class documentation, it seems that you can ask for currency as code or as Locale; and the class Locale has a  getAvailableLocales()  method. 

 So, the code would be: 

      public static Set<Currency> getAllCurrencies()
    {
        Set<Currency> toret = new HashSet<Currency>();
        Locale[] locs = Locale.getAvailableLocales();

        for(Locale loc : locs) {
            try {
                Currency currency = Currency.getInstance( loc );

                if ( currency != null ) {
                    toret.add( currency );
                }
            } catch(Exception exc)
            {
                // Locale not found
            }
        }

        return toret;
    }
  

 Hope this helps. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13391761)
 Otherwise a version a little better of Baltasarq code to avoid duplication: 

      ArrayList<String> currencys = new ArrayList<String>();
    Locale[] locs = Locale.getAvailableLocales();

    for(Locale loc : locs) {
        try {
            String val=Currency.getInstance(loc).getCurrencyCode();
            if(!currencys.contains(val))
                currencys.add(val);
        } catch(Exception exc)
        {
            // Locale not found
        }
        Collections.sort(currencys);
    }
  

 I have tested on android. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/14685495)
 This seems to be a known issue (http://code.google.com/p/android/issues/detail?id=38622.
I came to a possible solution this way: 

 Since the problem is in the Symbol and not the Currency code, i solved this problem creating a static Map  where the key is the  CurrencyCode  and the value is the  Symbol .  

  public static final Map<String, String> MYCURRENCIES = new HashMap<String, String>(){
        {
            put("EUR","€");
            put("USD","$");
            (..)
        }
};
  

 In order to get all (or almost) the currencies codes available in the locales information you can do something like this: 

  for (Locale ll: Locale.getAvailableLocales()){
    try {
       Currency a = Currency.getInstance(ll);
       Log.v("MyCurrency",a.getCurrencyCode()+"#"+a.getSymbol());
    }catch (Exception e){
       // when the locale is not supported
  }
}
  

 After you created you Map with the  CurrencyCode  and  Symbol  you just have to something like this: 

  Currency currency = Currency.getInstance(Locale.getDefault());
String curSymbol = MYCURRENCIES.get(currency.getCurrencyCode());
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/9777945)
 Try the following method: 

  private static NumberFormat getNumberFormat(String currencyCode)
{
    Currency currency = Currency.getInstance(currencyCode);

    Locale[] locales = NumberFormat.getAvailableLocales();

    for (Locale locale : locales)
    {
        NumberFormat numberFormat = NumberFormat.getCurrencyInstance(locale);

        if (numberFormat.getCurrency() == currency)
            return numberFormat;
    }

    return null;
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2544488)
 According to the https://docs.oracle.com/javase/1.5.0/docs/guide/intl/locale.doc.html, you have locale codes  hi_IN  (Hindi) and  en_IN  (English). 

  System.out.println(Currency.getInstance(new Locale("hi", "IN")).getSymbol());
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/45470695)
 You can use  java.util.Currency  to get the currency symbol. 

 You can use like this, 

  Currency mDefaultCurrency = Currency.getInstance(currencyCode); // currecyCode - ISO 4217 code of the currency as per doc

finalValue = String.format("%.2f %s", value, mDefaultCurrency.getSymbol());
  

 or you can user  Currency.getInstance(Locale locale)  

 If you want to check all the list of supported you can use  Currecny.getAvailableCurrencies()  will give set of Currencies 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/45342884)
 If there is no default Locale available, we can go with setting the currency symbol using unicode and decimal formatting. As in the below code: 

 For e.g. Setting the Indian currency symbol and formatting the value. This will work without user making changes in the settings. 

  Locale locale = new Locale("en","IN");
DecimalFormat decimalFormat = (DecimalFormat) DecimalFormat.getCurrencyInstance(locale);
DecimalFormatSymbols dfs = DecimalFormatSymbols.getInstance(locale);
dfs.setCurrencySymbol("\u20B9");
decimalFormat.setDecimalFormatSymbols(dfs);
System.out.println(decimalFormat.format(12324.13));
  

 Output: 

  ₹12,324.13
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/7751593)
 The way printing money amounts should be done is by using NumberFormat class!
 Check out this example: 

  NumberFormat format = NumberFormat.getCurrencyInstance(Locale.FRANCE);
format.setCurrency(Currency.getInstance("EUR"));
System.out.println( format.format(13234.34) );
  

 Which print this output: 

  13 234,34 €
  

 You can try different locales and currency codes. See docs: http://download.oracle.com/javase/1.4.2/docs/api/java/text/NumberFormat.html. 



