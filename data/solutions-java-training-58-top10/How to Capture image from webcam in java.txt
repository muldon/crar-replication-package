Query: How to Capture image from webcam in java
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46145364)
 I used Webcam Capture API...u can download from this http://webcam-capture.sarxos.pl/ 

          webcam = Webcam.getDefault();
        webcam.open();

        if (webcam.isOpen()) { //if web cam open 
            BufferedImage image = webcam.getImage();
            JLabel imageLbl = new JLabel();
            imageLbl.setSize(640, 480);             //show captured image
            imageLbl.setIcon(new ImageIcon(image));

            int showConfirmDialog = JOptionPane.showConfirmDialog(null, imageLbl, "Image Viewer", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(""));

            if (showConfirmDialog == JOptionPane.YES_OPTION) {
                JFileChooser chooser = new JFileChooser();
                chooser.setDialogTitle("Save Image");
                chooser.setFileFilter(new FileNameExtensionFilter("IMAGES ONLY", "png", "jpeg", "jpg")); //this file extentions are shown
                int showSaveDialog = chooser.showSaveDialog(this);
                if (showSaveDialog == 0) {                  //if pressed 'Save' button
                    String filePath = chooser.getCurrentDirectory().toString().replace("\\", "/");
                    String fileName = chooser.getSelectedFile().getName(); //get user entered file name to save
                    ImageIO.write(image, "PNG", new File(filePath + "/" + fileName + ".png"));

                }
            }
        }
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/10696643)
 You could use http://code.google.com/p/javacv/ to capture the image. 

 This code should get you started (taken from https://stackoverflow.com/questions/276292/capturing-image-from-webcam-in-java): 

  import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.FrameGrabber;
import com.googlecode.javacv.VideoInputFrameGrabber;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
public class GrabberShow implements Runnable {
    //final int INTERVAL=1000;///you may use interval
    IplImage image;
    CanvasFrame canvas = new CanvasFrame("Web Cam");
    public GrabberShow() {
        canvas.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    }
    @Override
    public void run() {
        FrameGrabber grabber = new VideoInputFrameGrabber(0); 
        int i=0;
        try {
            grabber.start();
            IplImage img;
            while (true) {
                img = grabber.grab();
                if (img != null) {
                    cvFlip(img, img, 1);// l-r = 90_degrees_steps_anti_clockwise
                    cvSaveImage((i++)+"-capture.jpg", img);
                    // show image on window
                    canvas.showImage(img);
                }
                 //Thread.sleep(INTERVAL);
            }
        } catch (Exception e) {
        }
    }
}
  

 Another alternative would be to use the Java Media Framework (http://www.oracle.com/technetwork/java/javase/tech/index-jsp-140239.html). You can find an example <a href="http://leejava.wordpress.com/2009/09/23/jmf-webcam-app-with-saving-jpeg/" rel="nofollow noreferrer" . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/4383406)
 JMyron is very simple for use.
http://webcamxtra.sourceforge.net/ 

  myron = new JMyron();
myron.start(imgw, imgh);
myron.update();
int[] img = myron.image();
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14744937)
 You can use https://github.com/sarxos/webcam-capture project to do that. It's working on Windows XP, Vista, 7, Linux, Mac OS, Raspberry Pi and more. There is a ready-to-use Swing component extending JPanel which can be used to display image from your webcam. Please found https://github.com/sarxos/webcam-capture/blob/master/webcam-capture/src/example/java/WebcamViewerExample.java for more details of how this can be done - it presents some advanced capabilities of this component, but basic usage would be the following: 

  JFrame window = new JFrame("Test webcam panel");
window.add(new WebcamPanel(Webcam.getDefault()));
window.pack();
window.setVisible(true);
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  

 After you run this code you should see JFrame with image from your webcam inside. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/9046360)
 This JavaCV implementation works fine. 

  CODE:  

  import com.googlecode.javacv.OpenCVFrameGrabber;

import com.googlecode.javacv.cpp.opencv_core.IplImage;
import static com.googlecode.javacv.cpp.opencv_highgui.*;

public class CaptureImage {
    private static void captureFrame() {
        // 0-default camera, 1 - next...so on
        final OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
        try {
            grabber.start();
            IplImage img = grabber.grab();
            if (img != null) {
                cvSaveImage("capture.jpg", img);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void main(String[] args) {
        captureFrame();
    }
}
  

 There is also http://ganeshtiwaridotcomdotnp.blogspot.com/2011/12/javacv-capture-save-flip-show-live.html from Camera .And http://ganeshtiwaridotcomdotnp.blogspot.com/2011/12/opencv-javacv-eclipse-project.html 
You can modify the codes and be able to save the images in regular interval and do rest of the processing you want. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/9046345)
 This JavaCV implementation works fine. 

 Code: 

  import org.bytedeco.javacv.*;

import static org.bytedeco.javacpp.opencv_core.IplImage;
import static org.bytedeco.javacpp.opencv_core.cvFlip;
import static org.bytedeco.javacpp.opencv_imgcodecs.cvSaveImage;


/**
 * Created by gtiwari on 1/3/2017.
 */

public class Test implements Runnable {
    final int INTERVAL = 100;///you may use interval
    CanvasFrame canvas = new CanvasFrame("Web Cam");

    public Test() {
        canvas.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    }

    public void run() {

        FrameGrabber grabber = new VideoInputFrameGrabber(0); // 1 for next camera
        OpenCVFrameConverter.ToIplImage converter = new OpenCVFrameConverter.ToIplImage();
        IplImage img;
        int i = 0;
        try {
            grabber.start();
            while (true) {
                Frame frame = grabber.grab();

                img = converter.convert(frame);

                //the grabbed frame will be flipped, re-flip to make it right
                cvFlip(img, img, 1);// l-r = 90_degrees_steps_anti_clockwise

                //save
                cvSaveImage((i++) + "-aa.jpg", img);

                canvas.showImage(converter.convert(img));

                Thread.sleep(INTERVAL);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Test gs = new Test();
        Thread th = new Thread(gs);
        th.start();
    }
}
  

 There is also http://ganeshtiwaridotcomdotnp.blogspot.com/2017/01/javacv-configuration-in-windows.html 

 You can modify the codes and be able to save the images in regular interval and do rest of the processing you want. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/8185050)
 You can try http://marvinproject.sourceforge.net. It provides an interface to work with cameras. Moreover, it also provides a set of real-time video processing features, like object tracking and filtering. 

 Take a look! 

 Real-time Video Processing Demo: 
http://www.youtube.com/watch?v=D5mBt0kRYvk 

 You can use the source below. Just save a frame using  MarvinImageIO.saveImage()  every 5 second. 

  Webcam video demo:  

  public class SimpleVideoTest extends JFrame implements Runnable{

    private MarvinVideoInterface    videoAdapter;
    private MarvinImage             image;
    private MarvinImagePanel        videoPanel;

    public SimpleVideoTest(){
        super("Simple Video Test");
        videoAdapter = new MarvinJavaCVAdapter();
        videoAdapter.connect(0);
        videoPanel = new MarvinImagePanel();
        add(videoPanel);
        new Thread(this).start();
        setSize(800,600);
        setVisible(true);
    }
    @Override
    public void run() {
        while(true){
            // Request a video frame and set into the VideoPanel
            image = videoAdapter.getFrame();
            videoPanel.setImage(image);
        }
    }
    public static void main(String[] args) {
        SimpleVideoTest t = new SimpleVideoTest();
        t.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
}
  

 For those who just want to take a single picture: 

  WebcamPicture.java  

  public class WebcamPicture {
    public static void main(String[] args) {
        try{
            MarvinVideoInterface videoAdapter = new MarvinJavaCVAdapter();
            videoAdapter.connect(0);
            MarvinImage image = videoAdapter.getFrame();
            MarvinImageIO.saveImage(image, "./res/webcam_picture.jpg");
        } catch(MarvinVideoInterfaceException e){
            e.printStackTrace();
        }
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/13347845)
 Some time ago I've created generic Java library which can be used to take pictures with a PC webcam. The API is very simple, not overfeatured, can work standalone, but also supports additional webcam drivers like OpenIMAJ, JMF, FMJ, LTI-CIVIL, etc, and some IP cameras. 

 Link to the project is https://github.com/sarxos/webcam-capture 

 Example code (take picture and save in test.jpg): 

  Webcam webcam = Webcam.getDefault();
webcam.open();
BufferedImage image = webcam.getImage();
ImageIO.write(image, "JPG", new File("test.jpg"));
  

 It is also available in Maven Central Repository or as a separate ZIP which includes all required dependencies and 3rd party JARs. 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/971686)
 http://grack.com/downloads/school/enel619.10/report/java_media_framework.html 

 Using the Player with Swing 

 The Player can be easily used in a Swing application as well.  The following code creates a Swing-based TV capture program with the video output displayed in the entire window: 

  import javax.media.*;
import javax.swing.*;
import java.awt.*;
import java.net.*;
import java.awt.event.*;
import javax.swing.event.*;

public class JMFTest extends JFrame {
    Player _player;
    JMFTest() {
        addWindowListener( new WindowAdapter() {
            public void windowClosing( WindowEvent e ) {
                _player.stop();
                _player.deallocate();
                _player.close();
                System.exit( 0 );
            }
        });
          setExtent( 0, 0, 320, 260 );
        JPanel panel = (JPanel)getContentPane();
        panel.setLayout( new BorderLayout() );
        String mediaFile = "vfw://1";
        try {
            MediaLocator mlr = new MediaLocator( mediaFile );
            _player = Manager.createRealizedPlayer( mlr );
            if (_player.getVisualComponent() != null)
            panel.add("Center", _player.getVisualComponent());
            if (_player.getControlPanelComponent() != null)
            panel.add("South", _player.getControlPanelComponent());
        }
        catch (Exception e) {
            System.err.println( "Got exception " + e );
        }
    }

    public static void main(String[] args) {
        JMFTest jmfTest = new JMFTest();
        jmfTest.show();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/10651784)
 For 64 bit JMF you might get some mileage out of https://forums.oracle.com/forums/thread.jspa?threadID=2132405.  There are alternatives to JMF as well, it seems, as detailed in https://stackoverflow.com/questions/276292/capturing-image-from-webcam-in-java 



