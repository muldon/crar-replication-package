Query: Java Compare file content
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10976653)
 Don't use  !=  or  ==  to compare strings in Java. Use  .equals()  instead. The  !=  and  ==  operators compare  references , not the content of objects. 

  if (!publisher.equals("Niho books") || !publisher.equals("Diamond Comics"))
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27379566)
 If the files are small, you can read both into the memory and compare the byte arrays. 

 If the files are not small, you can either compute the hashes of their content (e.g. MD5 or SHA-1) one after the other and compare the hashes (but this still leaves a very small chance of error), or you can compare their content but for this you still have to read the streams alternating. 

 Here is an example: 

  boolean sameContent(Path file1, Path file2) throws IOException {
    final long size = Files.size(file1);
    if (size != Files.size(file2))
        return false;

    if (size < 4096)
        return Arrays.equals(Files.readAllBytes(file1), Files.readAllBytes(file2));

    try (InputStream is1 = Files.newInputStream(file1);
         InputStream is2 = Files.newInputStream(file2)) {
        // Compare byte-by-byte.
        // Note that this can be sped up drastically by reading large chunks
        // (e.g. 16 KBs) but care must be taken as InputStream.read(byte[])
        // does not neccessarily read a whole array!
        int data;
        while ((data = is1.read()) != -1)
            if (data != is2.read())
                return false;
    }

    return true;
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/50735700)
 You will not compare 2 byte arrays like this, use Arrays.equals instead, example: 

  public static void main(String[] args) {
    byte[] a = {0,1};
    byte[] b = {0,1};
    System.out.println(a.equals(b)); //false
    System.out.println(Arrays.equals(a, b)); //true
}
  

  

    Assert.assertTrue(Arrays.equals(IOUtils.toByteArray(file), IOUtils.toByteArray(xlsxContent)));
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/36676189)
 You can compare their content by doing something like this: 

  Arrays.equals(byteArrayOutputStream1.toByteArray(), byteArrayOutputStream2.toByteArray());
  

 You can set its content like any other  OutputStream  thanks to the  write  methods if the content is big, but If your expected value is small, the better approach will be to put the content into a  String  variable then do the next test instead of the previous one: 

  Arrays.equals(expectedContent.getBytes(myCharset), byteArrayOutputStream2.toByteArray());
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/1523567)
 The solution is: 

  if (file1.getCanonicalPath().equals(file2.getCanonicalPath()) {
   // the arguments refer to the same file.
}
  

 Note that unlike  File.getAbsolutePath() , the  File.getCanonicalPath()  method resolves . .. pathnames, resolves symbolic links on Unix/Linux and converts Windows drive letters to standard case. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/30013592)
 It seems that  Assert.assertEquals  is using  euqlas  method to compare objects, but arrays don't override its  equals  method, they inherit it from  Object  class and it is using  ==  operator which compares references, not state of object.  

 To compare content of arrays you need to iterate over them and compare their elements.  

 You can also use  Arrays.equals(arr1, arr2)  helper method which will do it for you. There is also  Arrays.deepEquals  if you would want to compare multidimensional arrays. 

 You can use it like  

  Assert.assertTrue(Arrays.equals(arr1, arr2));
  

  

  Assert.assertArrayEquals(arr1, arr2);
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/20456342)
 The == comparison is one which only works on primitive types. In order to compare objects, such as a Date object, you must use equals() or compareTo() 

 == compares the ADDRESS of the two objects, not the actual VALUES of the objects. 

  if(date1.equals(date2))
    //do something
  

  

  if(date1.compareTo(date2) == 0)
    //do something
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/27379155)
 Exactly what  FileUtils.contentEquals  method of Apache commons IO does and api is https://commons.apache.org/proper/commons-io/javadocs/api-2.4/. 

 Try something like: 

  File file1 = new File("file1.txt");
File file2 = new File("file2.txt");
boolean isTwoEqual = FileUtils.contentEquals(file1, file2);
  

 It does the following checks before actually doing the comparison: 

 
 existence of both the files 
 Both file's that are passed are to be of file type and not directory. 
 length in bytes should not be the same. 
 Both are different files and not one and the same. 
 Then compare the contents. 
 


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/36309671)
 Simpel comparison of the content of two files with java.nio.file API. 

  byte[] file1Bytes = Files.readAllBytes(Paths.get("Path to File 1"));
byte[] file2Bytes = Files.readAllBytes(Paths.get("Path to File 2"));

String file1 = new String(file1Bytes, StandardCharsets.UTF_8);
String file2 = new String(file2Bytes, StandardCharsets.UTF_8);

assertEquals("The content in the strings should match", file1, file2);
  

 Or if you want to compare individual lines:  

  List<String> file1 = Files.readAllLines(Paths.get("Path to File 1"));
List<String> file2 = Files.readAllLines(Paths.get("Path to File 2"));

assertEquals(file1.size(), file2.size());

for(int i = 0; i < file1.size(); i++) {
   System.out.println("Comparing line: " + i)
   assertEquals(file1.get(i), file2.get(i));
}
  



