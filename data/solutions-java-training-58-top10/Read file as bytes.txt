Query: Read file as bytes
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9588458)
 You ... read 512 bytes at a time. 

  char[] myBuffer = new char[512];
int bytesRead = 0;
BufferedReader in = new BufferedReader(new FileReader("foo.txt"));
while ((bytesRead = in.read(myBuffer,0,512)) != -1)
{
    ...
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16227895)
 I would use File or FileChannel to get the file size. This is how to read until the last 128 bytes 

      FileInputStream is = new FileInputStream("1.txt");
    FileChannel ch = is.getChannel();
    long len = ch.size() - 128;
    BufferedInputStream bis = new BufferedInputStream(is);
    for(long i = 0; i < len; i++) {
        int b = bis.read();
        ...
    }
  

 if we continue reading we will get the last 128 bytes 

                ByteArrayOutputStream bout128 = new ByteArrayOutputStream();
    for(int b; (b=bis.read() != -1);) {
                      bout128.write(b);
    }        
              byte[] last128 = bout128.toByteArray();
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/9588409)
 You can use the appropriate  read()  method from the input stream, for example http://docs.oracle.com/javase/1.4.2/docs/api/java/io/FileInputStream.html#read%28byte%5B%5D%29 supports a  read(byte[])  to read a chunk of bytes. 

 something like: You may want to wrap the input stream in a  BufferedInputStream  if you wanted to guarantee 512 byte blocks (the constructor takes a block size argument). 

  byte[] buffer = new byte[512];
FileInputStream in = new FileInputStream("some_file");
int rc = in.read(buffer);
while(rc != -1)
{
  // rc should contain the number of bytes read in this operation.
  // do stuff...

  // next read
  rc = in.read(buffer); 
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/35251851)
 Here is an example using a byte array of size 20 : 

      import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.InputStream;
    import java.io.OutputStream;

    public class FileInputOutputExample {

        public static void main(String[] args) throws Exception {

            try{
                    byte[] b = new byte[20];
                    InputStream is = new FileInputStream("in.txt");
                    OutputStream os = new FileOutputStream("out.txt");

                    int readBytes = 0;

                    while ((readBytes  = is.read(b)) != -1) {
                      os.write(b, 0, readBytes);
                    }
                    is.close();
                    os.close();

            }catch(IOException ioe){
                System.out.println("Error "+ioe.getMessage());
            }
         }
     }
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31681187)
 Using https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html and https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html: 

  ByteBuffer bb = ByteBuffer.allocate(1);
FileChannel.open(file.toPath()).position(15e9).read(bb);
byte b = bb.get();
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11183273)
 As you read from the stream, keep a tally of bytes read. For example, if you are reading byte arrays directly from the stream: 

      long bytesReadTotal = 0L;
    int bytesRead = stream.read(bytes);
    while (bytesRead != -1) {
        bytesReadTotal += bytesRead;
        // process these bytes ...
        bytesRead = stream.read(bytes)
    }
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/34825802)
 You're assuming that  read(buffer);  always reads  1024  bytes, when it will read  up to  1024 bytes. It will return the amount of bytes read, so change your code to 

  int bytes = input.read(buffer);
fil.write(buffer, 0, bytes);
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/26096149)
 It is depend on available memory, size of file and other stuff. You better make some measurement. 

 PS: You code is wrong.  bufferedInStream.read(bytes)  may not fill all buffer? . This method return actual amount of bytes as result. 

  byte[] bytes = new byte[1024 * 32];
int size;
while ((size = bufferedInStream.read(bytes)) != -1) {
    bufferedOutStream.write(bytes, 0, size);
}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/53959335)
  len = stream.read(buffer);
read += len;
writableLocalFile.write(buffer, 0, len); 
  

 You must not use buffer.length as the bytes read, you need to use the return value of the read call. Because it might return a short read and then your buffer contains junk (0 bytes or data from previous reads) after the read bytes. 

 And besides calculating the remaining and using dynamic buffers just go for 16k or something like that. The last read will be short, which is fine. 



