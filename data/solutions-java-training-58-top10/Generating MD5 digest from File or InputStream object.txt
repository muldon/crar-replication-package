Query: Generating MD5 digest from File or InputStream object
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/37337943)
 With the byte array, result from message digest: 

  ...
byte hashgerado[] = md.digest(entrada);
...

for(byte b : hashgerado)
    System.out.printf("%02x", Byte.toUnsignedInt(b));
  

 Result (for example): 
89e8a9f68ad3c4bba9b9d3581cf5201d 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/7553788)
 You're seeing the results of calling  byte[].toString()  - which isn't showing you the actual hash of the data. You're basically getting a string which shows that you've called  toString  on a byte array (that's the  [B  part) and then the hash returned by  Object.hashCode()  (that's the hex value after the  @ ). That hash code doesn't take the  data  in the array into account. 

  

  System.out.println(Arrays.toString(md5.digest(byteArrayToDigest)));
  

 to see the actual  data . 

 EDIT: Quick note about creating an MD5 digest from  string  data - you should always use the same encoding, explicitly, when hashing. For example: 

  byte[] hash = md5.digest(text.getBytes("UTF-8"));
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13651993)
 The md5 Hash algorithm is part of the core java API so there is no need for any external libraries.  Here is the method I used to encrypt a password with MD5. 

  import java.security.MessageDigest;

/**
 * Use to encrypt passwords using MD5 algorithm
 * @param password should be a plain text password.
 * @return a hex String that results from encrypting the given password.
 */
public static String encryptPassword(String password) {
    try {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(password.getBytes());

        byte byteData[] = md.digest();

        StringBuffer hexString = new StringBuffer();
        for (int i=0;i<byteData.length;i++) {
            String hex=Integer.toHexString(0xff & byteData[i]);
            if(hex.length()==1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
    catch(java.security.NoSuchAlgorithmException missing) {
        return "Error.";
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/19300946)
 The Javadoc is pretty clear.  You can use clone only to calculate different intermediate digests using the same algorithm.  You cannot use  DigestInputStream  to calculate different digest algorithms without reading the stream multiple times.  You must use a regular  InputStream  and multiple  MessageDigest  objects; read the data once, passing each buffer to all  MessageDigest  objects to get multiple digests with different algorithms. 

 You could easily encapsulate this in your own variant of  DigestInputStream , say  MultipleDigestInputStream  that follows the same general approach but accepts a collection of  MessageDigest  objects or algorithm names. 

 Pseudojava (error handling omitted) 

  MessageDigest sha = MessageDigest.getInstance("SHA-1");
MessageDigest md5 = MessageDigest.getInstance("MD5");
InputStream input = ...;
byte[] buffer = new byte[BUFFER_SIZE];
int len;
while((len = input.read(buffer)) >= 0)
{
    sha.update(buffer,0,len);
    md5.update(buffer,0,len);
    ...
}
byte[] shaDigest = sha.digest();
byte[] md5Digest = md5.digest();
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/304350)
 There's an input stream decorator,  java.security.DigestInputStream , so that you can compute the digest while using the input stream as you normally would, instead of having to make an extra pass over the data. 

  MessageDigest md = MessageDigest.getInstance("MD5");
try (InputStream is = Files.newInputStream(Paths.get("file.txt"));
     DigestInputStream dis = new DigestInputStream(is, md)) 
{
  /* Read decorated stream (dis) to EOF as normal... */
}
byte[] digest = md.digest();
  



