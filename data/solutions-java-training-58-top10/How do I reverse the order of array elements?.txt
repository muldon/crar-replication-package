Query: How do I reverse the order of array elements?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19776557)
 This will do:  Arrays.sort(intArray).   

 if you want to do reverse sort i.e. sort in descending order than do as below: 

  Arrays.sort(a, new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            return o2-o1;
        }
    });
  

 where  a  is   Integer[] a = {1, 3, 2, 7, 9, 11};  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/423602)
  double[] array = new double[1048576];
  

 ... 

 By default order is ascending  

 To reverse the order  

  Arrays.sort(array,Collections.reverseOrder());
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22065663)
 For array which contains elements of primitives if there is  org.apache.commons.lang(3)  at disposal easy way to reverse array (after sorting it) is to use: 

  ArrayUtils.reverse(array);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/28246317)
 There is a Java reverse method for arrays: 

  ArrayUtils.reverse(int[] array) //Reverses the order of the given array.
  

 And also for add: 

  ArrayUtils.add(int[] array, int element) //Copies the given array and adds the given element at the end of the new array.
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/42132413)
  public class LargestArray {
public static void main(String[] args) {

    ArrayList<Integer> al = new ArrayList<>();
    Set<Integer> set = new TreeSet<>();
    set.add(10);
    set.add(20);
    set.add(7);
    set.add(4);
    set.add(1);
    set.add(2);
    set.add(3);
    set.add(4);
    System.out.println("after Sorting");
    for(int i : set) {
        System.out.print("  " + i);
    }
    al.addAll(set);
    set.clear();
    Collections.reverse(al);
    System.out.println();
    System.out.println("After Reverse");
    for (int i : al) {
        System.out.print(" " + i);
    }

}

}
  

 
   output = after Sorting 
    1  2  3  4  7  10  20
  After Reverse
   20 10 7 4 3 2 1 
 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/215283)
 There's been some confusion about  Arrays.asList  in the other answers.   

  double[] arr = new double[]{6.0, 5.0, 11.0, 7.0};
List xs = Arrays.asList(arr);
System.out.println(xs.size());  // prints 1
  

 then you'll have a List with 1 element.  The resulting List has the double[] array as its own element.  What you want is to have a  List<Double>  whose elements are the elements of the  double[] . 

 Unfortunately, no solution involving Comparators will work for a primitive array.   Arrays.sort  only accepts a Comparator when being passed an  Object[] .  And for the reasons describe above,  Arrays.asList  won't let you make a List out of the elements of your array. 

 So despite my earlier answer which the comments below reference, there's no better way than manually reversing the array after sorting.  Any other approach (such as copying the elements into a  Double[]  and reverse-sorting and copying them back) would be more code and slower. 


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/13803879)
  

      String[] strArray = new String[0];

    /*Creating array from Queue*/
    strArray = sQ.toArray(strArray);

    Arrays.sort(strArray,Collections.reverseOrder());   

    System.out.println("\n Elements of Queue in REVERSE:\n");

    for(String s:strArray)
    System.out.print(s+" ,");
  

 But problem is it will also  sort  your list in reverse order 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/14988091)
  for ( int i = logs.size() - 1; i >= 0; --i )
    // do something with logs.get( i )
    ;
  

 Don't waste time reversing something you can iterate in reverse order. 

 UPDATE: listIterator can also be used in reverse order, and is a more general solution: 

  for ( ListIterator< Logs > lit = logs.listIterator( logs.size() ); lit.hasPrevious(); )
    // do something with lit.previous()
    ;
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/9995487)
 Use a single temp element. 

  int array[SIZE];
int temp;

for (int i = 0; i < SIZE/2; i++)
  {
     temp = array[i];
     array[i] = array[SIZE-1 - i];
     array[SIZE-1 - i] = temp;
  }
  



