Query: How do I send an Http Post request?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/10607366)
 Here's the sample code for Http POST, using Apache HTTPClient API. 

  import java.io.InputStream;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;


public class PostExample {
    public static void main(String[] args){
        String url = "http://www.google.com";
        InputStream in = null;

        try {
            HttpClient client = new HttpClient();
            PostMethod method = new PostMethod(url);

            //Add any parameter if u want to send it with Post req.
            method.addParameter("p", "apple");

            int statusCode = client.executeMethod(method);

            if (statusCode != -1) {
                in = method.getResponseBodyAsStream();
            }

            System.out.println(in);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/46263882)
 I recomend use https://github.com/jsunsoftware/http-request built on apache http api. 

  HttpRequest<String> httpRequest = HttpRequestBuilder.createPost("http://www.example.com/page.php", String.class)
.responseDeserializer(ResponseDeserializer.ignorableDeserializer()).build();

public void send(){
   String response = httpRequest.execute("id", "10").get();
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20302567)
 A simple way using Apache HTTP Components is 

  Request.Post("http://www.example.com/page.php")
            .bodyForm(Form.form().add("id", "10").build())
            .execute()
            .returnContent();
  

 Take a look at the http://hc.apache.org/httpcomponents-client-ga/tutorial/html/fluent.html 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/14057848)
 . It works for my HttpClient application with POST request. 

  DefaultHttpClient httpClient = new DefaultHttpClient();
httpClient.getParams().setParameter(name, value);
......
  

 For Example, I set the connection timeout: 

  httpClient.getParams().setIntParameter(HttpConnectionParams.CONNECTION_TIMEOUT, httpTimeout);
  

 Then later, to send(execute) the request: 

  HttpResponse response = httpClient.execute([My HttpPost instance was here, but I think you can use HttpGet, HttpPut, and HttpDelete here as well]);
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/14767792)
 I have sent POST request using the below code 

  String requestBody = "{'name': 'newIndia','columns': [{'name': 'Species','type': 'STRING'}],'description': 'Insect Tracking Information.','isExportable': true}";
HttpRequest request = requestFactory.buildPostRequest(url, ByteArrayContent.fromString("application/json", requestBody));
request.getHeaders().setContentType("application/json");
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/11939695)
 You can use the  HttpURLConnection  class (in java.net) to send a POST or GET HTTP request. It is the same as any other application that might want to send an HTTP request. The code to send an Http Request would look like this: 

  import java.net.*;
import java.io.*;
public class SendPostRequest {
  public static void main(String[] args) throws MalformedURLException, IOException {
    URL reqURL = new URL("http://www.stackoverflow.com/"); //the URL we will send the request to
    HttpURLConnection request = (HttpURLConnection) (reqUrl.openConnection());
    String post = "this will be the post data that you will send"
    request.setDoOutput(true);
    request.addRequestProperty("Content-Length", Integer.toString(post.length)); //add the content length of the post data
    request.addRequestProperty("Content-Type", "application/x-www-form-urlencoded"); //add the content type of the request, most post data is of this type
    request.setMethod("POST");
    request.connect();
    OutputStreamWriter writer = new OutputStreamWriter(request.getOutputStream()); //we will write our request data here
    writer.write(post);
    writer.flush();
  }
}
  

 A GET request will look a little bit different, but much of the code is the same. You don't have to worry about doing output with streams or specifying the content-length or content-type: 

  import java.net.*;
import java.io.*;

public class SendPostRequest {
  public static void main(String[] args) throws MalformedURLException, IOException {
    URL reqURL = new URL("http://www.stackoverflow.com/"); //the URL we will send the request to
    HttpURLConnection request = (HttpURLConnection) (reqUrl.openConnection());
    request.setMethod("GET");
    request.connect();

  }
}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/28832645)
 According to RFC2616 with HTTP/1.1 you can send  307  response code, which will make  user-agent  to repeat it's POST request to provided host.
In your case just do 

  response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);
response.setHeader("Location", url);
  

 response is your  HttpServletResponse  object. 

 Hope this helps. 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/39982715)
 It is very easy with httpclient, here is example 

  import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

public class HttpClientUtils {

    public JSONObject doPost() {
        HttpClient httpclient = HttpClientBuilder.create().build();
        HttpPost request = new HttpPost("https://fcm.googleapis.com/fcm/send");
        JSONObject result = new JSONObject();
        try {
            String bodyContent = "{  'data': {    'score': '5x1',     'time': '15:10'   },   'to' : 'bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1...'}";
            StringEntity requestBody = new StringEntity(bodyContent);
            request.setEntity(requestBody);
            request.setHeader("Content-Type", "application/json");
            request.setHeader("Authorization", "key=AIzaSyZ-1u...0GBYzPu7Udno5aA");
            HttpResponse response = httpclient.execute(request);
            HttpEntity entity = response.getEntity();
            String responseString = EntityUtils.toString(entity);
            result.put("status", response.getStatusLine().getStatusCode());
            result.put("bodyContent", new JSONObject(responseString));
        } catch (ClientProtocolException e) {
            result.put("status", "500");
            result.put("bodyContent", "");
            e.printStackTrace();
        } catch (IOException e) {
            result.put("status", "500");
            result.put("bodyContent", "");
            e.printStackTrace();
        } finally {
            request.releaseConnection();
        }
        return result;
    }


}
  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/20481810)
 If I use the DELETE request from @BartekM, it get this exception: 

   java.net.ProtocolException: DELETE does not support writing
  

 To fix it, I just remove this instruction: 

   // httpURLConnection.setDoOutput(true);
  

 source: https://stackoverflow.com/questions/10338615/sending-http-delete-request-in-android 



