Query: How to recursively list all text files in a directory?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13444760)
 This is a http://en.wikipedia.org/wiki/Recursion_%28computer_science%29 

  public void find_files(File root)
{
    File[] files = root.listFiles(); 
    for (File file : files) {
        if (file.isFile()) {
            ...
        } else if (file.isDirectory()) {
            find_files(file);
        }
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/1455441)
 Try a class with a recursive method something like this: 

  public class Searcher {

    private String toFind, toReplace;
    // whatever other info you need

    public void searchInTextFiles(File dir) {
        File[] a = dir.list();
        for (File f : a) {
            if (f.isDirectory()) {
                searchInTextFiles(f);
            } else if (f.name().endsWith(".txt")) {
                searchInFile(f);
            }
        }
    }

    private void searchInFile(File f) {
        // do whatever you need to do on f using fields from this class
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30955348)
 this is my solution. It searches the "searchingText" string in a java project directory.I hope, this helps someone.  

  package textSearch;

    import java.io.BufferedReader;
    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.FileReader;
    import java.io.IOException;
    import java.sql.Connection;
    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;
    import java.util.Scanner;

    import org.apache.commons.io.FileUtils;
    import org.apache.commons.io.filefilter.DirectoryFileFilter;
    import org.apache.commons.io.filefilter.RegexFileFilter;
    import org.apache.commons.io.filefilter.TrueFileFilter;


    public class TextSearchingInFilesInDirectory {

        private static String filePath ="";
        static int fileCount = 0;   
        static String fileName ;
        static int lineNumber=0;

        private static final String folderPath = "C:\\Users\\omertasci\\EclipseWorkspace\\AnyProjectName\\src";

        public static void main(String[] args) throws FileNotFoundException{

        File dir = new File(folderPath);
        List<File> files =(List<File>) FileUtils.listFiles( dir, TrueFileFilter.INSTANCE, DirectoryFileFilter.DIRECTORY);

        for (File file : files) {
            try {
                System.out.println(file.getCanonicalPath()+ " is scanned.");
                filePath=file.getCanonicalPath();

                if (file.isFile()) {
                    //System.out.println(file.getName());
                    fileName=file.getName();
                    try {
                        FileReader reader = new FileReader(filePath );
                        BufferedReader br = new BufferedReader(reader); 
                        String s; 
                        while((s = br.readLine()) != null) { 
                            lineNumber++;
                            if(s.contains("searchingText")){  // you can change searchText with any keyword .
                                    System.out.println("searchingText is found in "+ file.getName()+ " at "+lineNumber+". line.\n"+ "----"+s.trim()+ "----");
                                                                               
                         
                        reader.close(); 
                    
                    catch(Exception e){
                        e.printStackTrace();
                    
                    

             catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            
        

  

  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/44713656)
 You can use below code to get a list of files of specific folder or directory recursively. 

  public static void main(String args[]) {

        recusiveList("D:");

    }

    public static void recursiveList(String path) {

        File f = new File(path);
        File[] fl = f.listFiles();
        for (int i = 0; i < fl.length; i++) {
            if (fl[i].isDirectory() && !fl[i].isHidden()) {
                System.out.println(fl[i].getAbsolutePath());
                recusiveList(fl[i].getAbsolutePath());
            } else {
                System.out.println(fl[i].getName());
            }
        }
    }
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28603067)
 this will work just fine ... and its recursive  

  File root = new File("ROOT PATH");
for ( File file : root.listFiles())
{
    getFilesRecursive(file);
}


private static void getFilesRecursive(File pFile)
{
    for(File files : pFile.listFiles())
    {
        if(files.isDirectory())
        {
            getFilesRecursive(files);
        }
        else
        {
            // do your thing 
            // you can either save in HashMap and use it as
            // per your requirement
        }
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/15291433)
 This Function will probably list all the file name and its path from its directory and its subdirectories.  

  public void listFile(String pathname) {
    File f = new File(pathname);
    File[] listfiles = f.listFiles();
    for (int i = 0; i < listfiles.length; i++) {
        if (listfiles[i].isDirectory()) {
            File[] internalFile = listfiles[i].listFiles();
            for (int j = 0; j < internalFile.length; j++) {
                System.out.println(internalFile[j]);
                if (internalFile[j].isDirectory()) {
                    String name = internalFile[j].getAbsolutePath();
                    listFile(name);
                }

            }
        } else {
            System.out.println(listfiles[i]);
        }

    }

}
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/29964733)
 This will work fine 

  public void displayAll(File path){      
    if(path.isFile()){
        System.out.println(path.getName());
    }else{
        System.out.println(path.getName());         
        File files[] = path.listFiles();
        for(File dirOrFile: files){
            displayAll(dirOrFile);
        }
    }
}
  

  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/1384961)
  

  List<String> textFiles(String directory) {
  List<String> textFiles = new ArrayList<String>();
  File dir = new File(directory);
  for (File file : dir.listFiles()) {
    if (file.getName().endsWith((".txt"))) {
      textFiles.add(file.getName());
    }
  }
  return textFiles;
}
  

 You want to do a case insensitive search in which case: 

      if (file.getName().toLowerCase().endsWith((".txt"))) {
  

 If you want to recursively search for through a directory tree for text files, you should be able to adapt the above as either a recursive function or an iterative function using a stack. 



