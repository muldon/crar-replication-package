Query: How to Load an image and write text to it
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/2736349)
 Take a look at http://www.java2s.com/Code/JavaAPI/java.awt/Graphics2DdrawStringStringstrintxinty.htm 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/6540490)
 Use  ImageIO  to read the image into a  BufferedImage . 

 Use the  getGraphics()  method of  BufferedImage  to get the Graphics object. 

 Then you can use the  drawString()  method of the Graphics object. 

 You can use  ImageIO  to save the image. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/2738106)
 Here's is yet another https://stackoverflow.com/questions/2658554/using-graphics2d-to-overlay-text-on-a-bufferedimage-and-return-a-bufferedimage/2658663#2658663. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7745390)
 You don't really need swing at all if you just want to generate image files. 

 You can do something like this: 

  import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.io.File;
import javax.imageio.ImageIO;
import java.io.IOException;

BufferedImage img = ImageIO.read(new File("dog.jpg")); // try/catch IOException
int width = img.getWidth();
int height = img.getHeight();

BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
Graphics2D g2d = bufferedImage.createGraphics();

// draw graphics
g2d.drawImage(img, 0, 0, null);
g2d.drawString(text, x, y);

g2d.dispose();

try {

// Save as PNG
File file = new File("newimage.png");
ImageIO.write(bufferedImage, "png", file);

// Save as JPEG
file = new File("newimage.jpg");
ImageIO.write(bufferedImage, "jpg", file);

} catch (IOException e) { }
  

 For more info, see: 

<p 

 The text alignment and centering can be done using the FontMetrics class. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/2736340)
 .  First load the image, probably using a method of  ImageIO . Then, using a  Graphics  object representing the image itself, call the  drawString  method. 


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/10985366)
 So basically what you're asking is how to convert a  BufferedImage  to a  byte[]  to print to PDF? 

  BufferedImage img; // your image to be printed
String formatName; // name of the image format (see ImageIO docs)
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageIO.write( img, formatName, baos);
byte[] rawData = baos.toByteArray();
  

 You should be able to use that for the CMYK-image as you had in your original post: 

  com.lowagie.text.Image img = Image.getInstance(byte[] rawData);
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/43893343)
 I don't know performance, but you can try this: 

 First of all transform your bitmap as byte[] array: 

  private byte[] bitmapToByte(Bitmap bitmap){
    ByteArrayOutputStream stream = new ByteArrayOutputStream();
    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
    byte[] byteArray = stream.toByteArray();
    return byteArray;
}
  

 Then use glide in this way: 

  Glide.with(holder.imagePhoto.getContext()).load(bitmapToByte(yourBitmap)).asBitmap().override(300, 300).fitCenter().into(holder.imagePhoto);
  

  

  Glide.with(holder.imagePhoto.getContext()).load(bitmapToByte(yourBitmap)).asBitmap().into(holder.imagePhoto); //>>not tested
  


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/6540516)
 I'm just going to point you in the general direction of image manipulation in Java. 

 To load images you can use http://download.oracle.com/javase/6/docs/api/javax/imageio/ImageIO.html. You can also use ImageIO to output images to different formats. 

 The easiest way to create an image is to use http://download.oracle.com/javase/6/docs/api/java/awt/image/BufferedImage.html and then paint on it via http://download.oracle.com/javase/6/docs/api/java/awt/Graphics2D.html. You can use Graphics2D to paint your loaded image and then paint your text on top of it. 

 When you're done you use ImageIO to output the image in a suitable format (PNG, JPG, etc). 



