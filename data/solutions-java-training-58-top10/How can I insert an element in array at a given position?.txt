Query: How can I insert an element in array at a given position?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/20076497)
 You should do something like this: 

  public void insert (Object item, int pos)
{
    Link add = new Link();
    int ix = pos - 1;
    Link cur = _head;
    for (int i = 0; i < _list_size; i++) {
      if(i == ix) {
        add.next = cur.next;
        cur.next = add;
      }
      cur = cur.next;
    }
   ++_listsize;
 }
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20186745)
 Do this: 

 
   Remove   the element from the list:  ArraylistObj.remove(object);  
   Add   the element  back  to the list   at specific position  :  ArrayListObj.add(position, Object);  
 

 As per your code use this : 

  url.remove("C");
url.add(0,"C");
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20076498)
 It seems you have not correctly inserted the new  Link  into the list. When you do that, you need to find the  Link  at the given position as well as the  Link  at the previous position. Then only you can set the  previous.next = add  and  add.next = position .  

 Below is the updated method that does the task. 

  public void insert (Object item)
{
    Link add = new Link();
    add.data = item;
    add.next = _head;
    _head = add;
    ++_listsize;
 }

public void insert (Object item, int pos)
{
    Link add = new Link();
    add.data = item;

    int ix = pos - 1;
    add.next = _head;

    Link previous = _head;

    for (int i = _listsize - 1; i > ix; --i) {
        previous = previous.next;
    }

    Link position = previous.next;

    previous.next = add;
    add.next = position;
    ++_listsize;
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/8719442)
 Use http://docs.oracle.com/javase/7/docs/api/java/util/List.html#add%28int,%20E%29 to specify the position at which an element will be added to a list. 

 
   Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). 
 

 

 So, following your example (using http://code.google.com/p/guava-libraries/ for convenience): 

  List<Integer> foo = Lists.newArrayList(0, 5, 5, 1);
foo.add(2, 4);
System.out.println(foo); // prints [0, 5, 4, 5, 1]
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/27906868)
 You said, "The list is sorted based on MapElementModel.position", so my answer will be based off this. If it were sorted based on MapElementModel.id, this would be a different algorithm. 

 Think of the  ArrayList  as your ordered collection of items. Instead of "storing" the position in the MapElementModel, just let the index of the element in the  ArrayList  be its position. For example, if your  ArrayList  has the elements  ["Red", "Blue", "Green", "Yellow", "Pink", "Purple"] , then the position of "Red" is 0, the position of "Blue" is 1, and the position of "Green" is 2, and so on... 

 I'm assuming you don't care much about efficiency - i.e. you're not dealing with a list of 1 billion items. 

 Now, to move an item, our algorithm is to simply remove it from the list and insert it again at the correct location. Suppose we have the list again: 

  ["Red", "Blue", "Green", "Yellow", "Pink", "Purple"]  

 Let's consider a few test cases: 

 
 Move item at position 3 to position 0 
 Move item at position 3 to position 5 
 Move item at position 3 to position 3 (redundant case) 
 

 In the first case, we move "Yellow" to in front of "Red". So remove "Yellow" like this 

  String removed = list.remove( 3 );
  

 Now we want to insert it back into position 0.  

  list.add( 0 , removed );
  

  Remove element at given index, insert it at desired index. Let's see if it works for the second test case.  

 In case 2, we want to move "Yellow" to position 5. Notice that there are six elements in our list, and position 5 corresponds to the sixth position (if our array indexing starts at 0), so "Yellow" would go to the end of the list, after "Purple." So, we remove "Yellow" again: 

  String removed = list.remove( 3 );
  

 But look now, everything after yellow has shifted down by 1: 

  ["Red, "Blue", "Green", "Pink", "Purple"]
  

 Conveniently, the index of "Purple" is 4, and if we insert at position 5 with 

  list.add( 5 , removed );
  

  

  ["Red, "Blue", "Green", "Pink", "Purple"]
  

 See if this algorithm works with putting yellow at position 3, the redundant case.  

 It looks like our algorithm works as follows: Remove at the given position, insert at the target position. It looks like we can just write an algorithm like this: 

  public void moveItem( int idxToMove , int targetIdx ) {
    String removed = list.remove( idxToMove );
    list.add( targetIdx , removed );
}
  

 If the user wants to move the item at position 3 up 1 spot the list, you call 

  moveItem( 3 , 3+1 );
  

 If the user wants to move the item at position 3 down 1 spot in the list, you call 

  moveItem( 3 , 3-1 );
  

 What would you do if the user wants to move the item at position 0 down 1 spot in the list? 

 If the user wants to move item at position 5 to item at position 2, you call 

  moveItem( 5 , 2 );
  

 Now you can implement this algorithm for an ArrayList of MapElementModel. If you really need the  position  field of your MapElementModel object to be correct, you simply go through the ArrayList and update it. The position of an element in the ArrayList is the element's position. 

  public void moveItem( int idxToMove , int targetIdx ) {
    //move the item as I did with Strings

    for ( int i=0 ; i<list.size() ; i++ ) {
        list.get( i ).position = i;
    }
}
  

 If you need to move an item with a specified id, you would locate it in the ArrayList and then move it: 

  public void moveItemById( int itemId , int newPosition ) {
    int positionOfItem = -1;
    for ( int i=0 ; i<list.size() ; i++ ) {
        if ( list.get( i ).id == itemId ) {
            positionOfItem = i;
            break;
        }
    }
    if ( positionOfItem != -1 ) {
        moveItem( positionOfItem , newPosition );
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:6 (https://stackoverflow.com/questions/48635819)
 Try the following method.  

  private static void insertAfter(long[][] array, int value, long[] insertion) {
    boolean found = false;
    for (int i = 0; i < array.length; i++) {
        long[] sub = array[i];
        for (int j = 0; j < sub.length; j++) {
            if (sub[j] == value) {
                long[] newSub = new long[sub.length + insertion.length];
                System.arraycopy(sub, 0, newSub, 0, j + 1);
                System.arraycopy(insertion, 0, newSub, j + 1, insertion.length);
                System.arraycopy(sub, j + 1, newSub, j + 1 + insertion.length, sub.length - j - 1);
                array[i] = newSub;
                found = true;
                break;
            }
        }
        if (found) break;
    }
}
  

 Example usage: 

  insertAfter(questionOrder, 7, new long[]{12, 13});
System.out.println(gson.toJson(questionOrder)); 
  

 This will print  [[4,5],[3,1,6,7,12,13],[34,21,55]]  

 To remove an element you can use similar, but slightly modified, logic: 

  private static long[][] remove(long[][] array, int value) {
    boolean found = false;
    int emptyIndex = -1;
    for (int i = 0; i < array.length; i++) {
        long[] sub = array[i];
        for (int j = 0; j < sub.length; j++) {
            if (sub[j] == value) {
                long[] newSub = new long[sub.length - 1];
                System.arraycopy(sub, 0, newSub, 0, j);
                System.arraycopy(sub, j + 1, newSub, j, sub.length - j - 1);
                array[i] = newSub;
                if (array[i].length == 0) emptyIndex = i;
                found = true;
                break;
            }
        }
        if (found) break;
    }
    if (emptyIndex >= 0) {
        long[][] newArray = new long[array.length - 1][];
        System.arraycopy(array, 0, newArray, 0, emptyIndex);
        System.arraycopy(array, emptyIndex + 1, newArray, emptyIndex, array.length - emptyIndex - 1);
        array = newArray;
    }
    return array.length == 0 ? null : array;
}
  

 This method will remove the given item from the inner array and, if the inner array becomes empty, removes it from the outer array. It returns the modified array or  null  if it's empty. 

 Example usage: 

  questionOrder = remove(questionOrder, 4);
  


-------------------------------------next answer-------------------------------------

Rank:7 (https://stackoverflow.com/questions/51615474)
 Note that when you insert into a List at a position, you are really inserting at a   dynamic position  within the List's current elements . See here: 

 http://tpcg.io/0KmArS 

  package com.tutorialspoint;

import java.util.ArrayList;

public class ArrayListDemo {
   public static void main(String[] args) {

      // create an empty array list with an initial capacity
      ArrayList<Integer> arrlist = new ArrayList<Integer>(5);

      // use add() method to add elements in the list
      arrlist.add(15, 15);
      arrlist.add(22, 22);
      arrlist.add(30, 30);
      arrlist.add(40, 40);

      // adding element 25 at third position
      arrlist.add(2, 25);

      // let us print all the elements available in list
      for (Integer number : arrlist) {
         System.out.println("Number = " + number);
      }  
   }
}
  

 
    $javac com/tutorialspoint/ArrayListDemo.java  
  
    $java -Xmx128M -Xms16M com/tutorialspoint/ArrayListDemo  

  Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 15, Size: 0
    at java.util.ArrayList.rangeCheckForAdd(ArrayList.java:661)
    at java.util.ArrayList.add(ArrayList.java:473)
    at com.tutorialspoint.ArrayListDemo.main(ArrayListDemo.java:12)
  
 


-------------------------------------next answer-------------------------------------

Rank:8 (https://stackoverflow.com/questions/15365427)
 Your idea of iterating through is correct; however there is no need to perform the iteration twice. Finding the right index and inserting the element can be done in one loop. ArrayList has a method  add(int, E)  that can insert an element into any position in the list.      

  //the value you want to insert
int[] toInsert = {someValue, someOtherValue};

//assume theList is the list you're working with
for(int index = 0; index < theList.size() -1; index ++)
{
     int key = theList.get(index)[0];
     int nextKey = theList.get(index + 1)[0];

     //if we've reached the correct location in the list
     if (toInsert[0] > key && toInsert[0] < nextKey)
     {
          //insert the new element right after the last one that was less than it
          theList.add(index + 1,toInsert);
     }
}
  

 Note that this method assumes that the list is sorted to begin with. If you want to make that a guarantee, look into some of the other answers describing sorting and  Comparator s.  


-------------------------------------next answer-------------------------------------

Rank:9 (https://stackoverflow.com/questions/13812329)
 Its always a good practice to use  List  type when declaring  ArrayList .   

  ArrayList<ArrayList<String>>ar1 = new ArrayList<ArrayList<String>>();
  

 use 

  List<List<String>>ar1 = new ArrayList<List<String>>();
  

 You can easily add elements in the arraylist through .add(element) method. Read the ever helpful http://docs.oracle.com/javase/1.4.2/docs/api/java/util/List.html for the complete list of list methods. . To start populating it, you need to create a 1d arraylist 

  List<String> a = new ArrayList<String>()
a.add("element");
  

 Then add the 1d arraylist in you 2d arraylist 

  ar1.add(a);
  

 To insert an element in a 2d list, you must access the position of the 1d arraylist where you want to insert then do an  .add(String) . 

  ar1.get(0).add("newly added element"); //will get the first list then append the string to that list
  

 Same as, to get an element in the 2d list 

  ar1.get(0).get(0); //will get the first lis then get the first element of the pulled list
  


-------------------------------------next answer-------------------------------------

Rank:10 (https://stackoverflow.com/questions/44101918)
 To answer your question check the following snippet (requires Java 8) and adapt on your demand: 

  public static void main(String[] args) {

    final List<String> list = new ArrayList<>();
    list.add("Element 1");
    list.add("Element 2");
    list.add("Element 3");

    /*
     * Insert at a specific position (add "Element 2.5" between "Element 2" and "Element 3")
     */
    Optional<String> elementToInsertAfter = list.stream().filter(element -> element.equals("Element 2")).findFirst();
    if(elementToInsertAfter.isPresent()) {
        list.set(list.indexOf(elementToInsertAfter.get()) + 1, "Element 2.5");
    }

    /*
     * Remove a particular element (in this case where name equals "Element 2")
     */
    list.removeIf(element -> element.equals("Element 2"));
}
  

  #add(element)  just adds an element to the list. In case of an ArrayList it's added at the end. If you want to insert an element at a particular position you need to use  #set(index,element)  

 

 But instead of inserting your element at a particular position manually you should maybe use a comparator instead. See  java.util.List.sort(Comparator<? super E> e)  



